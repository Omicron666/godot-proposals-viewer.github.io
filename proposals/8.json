[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1155",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1155/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1155/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1155/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1155",
    "id": 650563727,
    "node_id": "MDU6SXNzdWU2NTA1NjM3Mjc=",
    "number": 1155,
    "title": "Multi-threaded 3D Bullet physics",
    "user": {
      "login": "nikitavondel",
      "id": 9358177,
      "node_id": "MDQ6VXNlcjkzNTgxNzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9358177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikitavondel",
      "html_url": "https://github.com/nikitavondel",
      "followers_url": "https://api.github.com/users/nikitavondel/followers",
      "following_url": "https://api.github.com/users/nikitavondel/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikitavondel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikitavondel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikitavondel/subscriptions",
      "organizations_url": "https://api.github.com/users/nikitavondel/orgs",
      "repos_url": "https://api.github.com/users/nikitavondel/repos",
      "events_url": "https://api.github.com/users/nikitavondel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikitavondel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 7,
    "created_at": "2020-07-03T12:23:49Z",
    "updated_at": "2020-08-01T06:59:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA multiplayer game involving dedicated servers hosting higher player counts.\r\nMy server project simulates physics at a low tickrate and the clients interpolate the results. This gives each physics tick more time to process and allows for the creation of more physics entities, ideal for a server which hosts a larger amount of physics entities including players.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe 3D Bullet physics engine of Godot is single-threaded, my server project starts lagging behind when a certain amount of physics entities are spawned in and the profiler shows that this is caused by the native physics engine of Godot doing calculations. (disabled _phyics_process code for this case so nothing else holds it back).\r\nAt a certain amount of physics entities, the \"Physics Time\" takes too long to process each physics tick and the server becomes unplayable while my 8 threaded CPU only has 1 thread working at max capacity on Godot physics. Causing my server to have a physics bottleneck at a total of only 20% CPU usage.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAllowing the Bullet physics engine to utilize all available threads on the given CPU would increase the maximum physics entity count by up to 4-6 times on high-end gaming processors!\r\nThere are server hosting solutions out there which allow for even more than 8 CPU cores, which are ideal for hosting large game servers, if 3D Godot physics were to allow multi-threading these servers would allow for many, many physics entities. Imagine game servers hosting worlds that contain up to a hundred players with all kinds of entities they can create and interact with! This would allow for HUGE dedicated server type game projects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n@fire has a pull request in the making which unlocks multi-threading Bullet physics: https://github.com/godotengine/godot/pull/40073\r\nI am not knowledgeable enough to explain how the multi-threaded bullet physics feature is implemented in the back-end/core of Godot, but the aforementioned pull request should do a great job at showing how it is done!\r\nBy the looks of it, it is a change in the core physics code, not much would have to be done on the Godot game developer's end apart from enabling multi-threaded (physics) operations in the project settings.\r\n\r\nSo with this implementation, the total number of physics bodies that can be put in the same physical space that can interact with one another could be huge, especially for machines with high-end CPUs like servers.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, it cannot be worked around easily as this is a real performance limitation to 3D Godot physics, we are limited to one CPU thread. One could use 3D PhysicsServers for multi-threaded access on physics operations, but the 3D PhysicsServer instances still run on the same main thread which does not unlock the power of the additional CPU cores that are potentially idling, as mentioned in #483 (a great proposal to push the 3D physics boundaries as well).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAs far as I'm concerned Godot Bullet physics makes up a core engine part and cannot be changed with an add-on in the asset library in a performant way.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1155/reactions",
      "total_count": 21,
      "+1": 21,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1154",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1154/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1154/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1154/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1154",
    "id": 650221013,
    "node_id": "MDU6SXNzdWU2NTAyMjEwMTM=",
    "number": 1154,
    "title": "Implement clicking on a line in the Output generated by a `print()` to go to the corresponding row in the script file",
    "user": {
      "login": "peterhoglund",
      "id": 522470,
      "node_id": "MDQ6VXNlcjUyMjQ3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/522470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterhoglund",
      "html_url": "https://github.com/peterhoglund",
      "followers_url": "https://api.github.com/users/peterhoglund/followers",
      "following_url": "https://api.github.com/users/peterhoglund/following{/other_user}",
      "gists_url": "https://api.github.com/users/peterhoglund/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peterhoglund/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peterhoglund/subscriptions",
      "organizations_url": "https://api.github.com/users/peterhoglund/orgs",
      "repos_url": "https://api.github.com/users/peterhoglund/repos",
      "events_url": "https://api.github.com/users/peterhoglund/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peterhoglund/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-02T21:47:55Z",
    "updated_at": "2020-09-13T23:43:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSmall personal project for learning Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is mainly related to workflow and usability\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be very handy to be able to go to a scripts print() command by clicking on it in the Output. At times you make several prints to the Output for debugging, and forget to remove them. After a while it is easy to forget which print is from which script so once you want to remove them you have to go through all your script files and look for that print() command, which can take a long time. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen running a scene, in the Output console, click on a line generated by a print() command and the script view will open, highlighting the row with the print() command.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWould be a too small feature for an add-on and would make more sense to have in the core product.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1152",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1152/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1152/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1152/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1152",
    "id": 649070443,
    "node_id": "MDU6SXNzdWU2NDkwNzA0NDM=",
    "number": 1152,
    "title": "Add a `Node.add_child_at()` method to add a node at a specific index",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-07-01T15:24:15Z",
    "updated_at": "2020-07-06T23:00:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nThere is currently no way to directly add a child at an arbitrary index. The options we are have are either: \r\n\r\n1. `add_child` then move it with `move_child`\r\n2. Use `add_child_below_node` to specifiy a sibling. This method is already pretty poor and [has been replaced](https://github.com/godotengine/godot/issues/19642) with `add_sibling` in `master`, and it doesn't allow you to add a node at index 0 because the new node is added after the sibling.\r\n\r\nHonestly, I was a little surprised to find this feature missing. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplement a simple `add_child_at` which takes an index parameter in addition to the child. E.g.\r\n\r\n```\r\n# Add child at index 0\r\nparent.add_child_at(child, 0)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's pretty fast to work around with `add` then `move`, but tree mutations seem like common enough operations to be worth adding. If we think `add_sibling` was a common enough use-case, then this seems pretty reasonable too.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nComplements existing core functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1152/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1151",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1151/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1151/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1151/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1151",
    "id": 648911331,
    "node_id": "MDU6SXNzdWU2NDg5MTEzMzE=",
    "number": 1151,
    "title": "Add an absolute time (DSP time) feature",
    "user": {
      "login": "rezgi",
      "id": 41618561,
      "node_id": "MDQ6VXNlcjQxNjE4NTYx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41618561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rezgi",
      "html_url": "https://github.com/rezgi",
      "followers_url": "https://api.github.com/users/rezgi/followers",
      "following_url": "https://api.github.com/users/rezgi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rezgi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rezgi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rezgi/subscriptions",
      "organizations_url": "https://api.github.com/users/rezgi/orgs",
      "repos_url": "https://api.github.com/users/rezgi/repos",
      "events_url": "https://api.github.com/users/rezgi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rezgi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-07-01T11:36:01Z",
    "updated_at": "2020-11-13T19:19:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA rhythm game where all events and animations are synced to MIDI data\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI struggle to track and trigger events based on musical data (tempo). Since I can only execute logic in _process() and _physics_process(), I depend on the framerate while I need to trigger an event at exactly 2 seconds for example. But it's never 2s precisely and I constantly compensate the delay when the tempo (bar or beat) happens between 2 frames.\r\n\r\nOther engines have APIs like dspTime (Unity) or TimeSynth (Unreal) to manage that and I'm wondering if it's achievable in Godot. I don't know about the complexity of implementation, from what I understand these precise timing methods seem to run on their own thread I guess ?\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy having access to an API that can trigger events on precise timings like 2s (00:02:0000) which will allow easier programming for musical mechanics. Game logic will still run on main thread but at least we'll have another parallel logic that we can rely on to track the progression of the tempo for example.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`if get_absolute_time() == 2 print(\"Bar 2 reached\")`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere's no way to get absolute time and we need to check for approximations, which is ok for music playback and simplistic rhythm games but becomes hard when we want to deeply sync rhythm and game mechanics.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this kind of implementation really depends on the engine low-level process and I guess it needs an alternative thread to run this implementation. Maybe a C++ plugin could do that ? I'm not advanced enough to know.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1148",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1148/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1148/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1148/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1148",
    "id": 648570078,
    "node_id": "MDU6SXNzdWU2NDg1NzAwNzg=",
    "number": 1148,
    "title": "Allow to remove node without removing related animation tracks",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-30T23:45:56Z",
    "updated_at": "2020-06-30T23:45:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game using the Godot's animations feature a lot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you delete a node, any animation track pointing to that node will be removed. This is maybe ok in most cases, but sometimes you don't want to remove the tracks (because you are replacing a node or you did a mock animation and the actual node will be instantiated later). In that case you need to do some workarounds to avoid removing the tracks. And sometimes it's unexpected and happens unnoticed, so you lose some animations.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be a way to bypass this behavior, i.e. removing node without removing the related tracks. It could either be optional or maybe the tracks should never be automatically deleted (personally I never used this feature, not sure about others).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMaybe a button in Animation tab (or on the top toolbar) that when toggled on will prevent from auto-removing the tracks.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is usability improvement. Workarounds are inconvenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n> This is usability improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1148/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1147",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1147/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1147/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1147/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1147",
    "id": 648509301,
    "node_id": "MDU6SXNzdWU2NDg1MDkzMDE=",
    "number": 1147,
    "title": "Support expressions and constants in `export` ranges",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-30T21:32:03Z",
    "updated_at": "2020-07-01T14:27:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\ngodotengine/godot#6391\r\n\r\n**Describe the project you are working on:**\r\nThis is something that all projects may use.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to have a export float for rotation. Ideally, it would look like this:\r\n`export(float, 0.0, TAU) var default_rotation = 0.0`\r\nHowever, since expressions or constants aren't supported, it looks like this:\r\n`export(float, 0.0, 6.28318530717959) var default_rotation = 0.0`\r\n\r\nThe original issue also pointed out other examples\r\n\r\n```py\r\nexport(float, 1.0/64, 64) # SCRIPT ERROR: GDScript::reload: Parse Error: Expected ',' or ')' in numeric range hint.\r\nconst a = 4\r\nexport(float, a, 5) # SCRIPT ERROR: GDScript::reload: Parse Error: Expected a range in numeric hint\r\n```\r\n\r\nAlso noted by https://github.com/godotengine/godot/issues/6391#issuecomment-439703625: Enum values cannot be used in constants:\r\n```py\r\nenum MyEnum {Alpha, Bravo, Charlie}\r\nconst a = MyEnum.Alpha\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRather than parsing a number constant, Godot should parse an expression as if it is a function call or variable declaration.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs stated above:\r\n```py\r\nexport(float, 0.0, PI)\r\nconst MY_CONSTANT = 1000\r\nexport(float, -MY_CONSTANT, MY_CONSTANT)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement will be used often, and the only workaround is to hard-code constants (such as TAU above) which does not promote good programming standards.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is not applicable to the scope of this request.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1147/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1145",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1145/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1145/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1145/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1145",
    "id": 648086517,
    "node_id": "MDU6SXNzdWU2NDgwODY1MTc=",
    "number": 1145,
    "title": "Enhance experience for unmodified constructor inheritance",
    "user": {
      "login": "Erawpalassalg",
      "id": 4946673,
      "node_id": "MDQ6VXNlcjQ5NDY2NzM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4946673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Erawpalassalg",
      "html_url": "https://github.com/Erawpalassalg",
      "followers_url": "https://api.github.com/users/Erawpalassalg/followers",
      "following_url": "https://api.github.com/users/Erawpalassalg/following{/other_user}",
      "gists_url": "https://api.github.com/users/Erawpalassalg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Erawpalassalg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Erawpalassalg/subscriptions",
      "organizations_url": "https://api.github.com/users/Erawpalassalg/orgs",
      "repos_url": "https://api.github.com/users/Erawpalassalg/repos",
      "events_url": "https://api.github.com/users/Erawpalassalg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Erawpalassalg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-30T11:11:43Z",
    "updated_at": "2020-08-14T19:25:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n**On Godot 3.2.2**\r\n\r\nLet's say we have a simple project structure with 3 scripts.\r\n\r\n- `Base.gd` which declares a constructor with 1 parameter\r\n- `Child.gd` which inherits from `Base.gd` and do nothing\r\n- `Test.gd`, linked to `Test.tscn`, the script to rule them all, which attempts to instantiate `Child.gd` on `_ready()`\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nFirst thing first. If I wanted my example to work properly I'd have to do something like `_init(param).(param)` in my `Child.gd`. As a side-note, if I wanted to modify my child's constructor, the current state of the editor wouldn't be an issue (except for the compile-time/runtime weirdness, but that's not a big problem)\r\n\r\nNow, let's say I didn't declare my `Child`'s constructor.\r\n- If I try to call it with one param, as declared in my `Base` class, the editor throws a **compile-time** error saying `Too many arguments for \"_init()\" call. Expected at most 0.` \r\n- If I remove the param and try to run the scene, I'm now getting a **runtime** error saying `Invalid call to '_init'. Expected 1 arguments`. \r\n\r\nThis is pretty confusing. But it gets worse.\r\n\r\nLet's say, now, that instead of having 3 files, I have only one file declaring 2 inner classes (still called `Base` and `Child`). Still not declaring the `Child`'s constructor.\r\n\r\n- If I pass a parameter, now I get a **runtime** error saying that I made an `Invalid call to function 'new' in base 'GDScript. Expected 0 argments.`\r\n- If I do not pass a parameter, I get a **compile-time** error saying `Too few arguments for \"_init()\" call. Expected at least 1.`\r\n\r\nNone of these error messages are useful in this case. Worse, they muddy the waters about something which is already not that obvious (why do I have to redefine my constructor if I expect my child to be built the same way than its parent? plus this thing has a unique and weird syntax, which is understandable, but already confusing as a beginner).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis could be enhanced by either:\r\n- 👍 making the child inherit it's parent constructor by default. This would prevent people not interrested in modifying the child's constructor behavior to have to look into the weird syntax stuff (I think it's pretty frustrating when you want to experiment with Godot's OOP design and stumble on this), or\r\n- 🤷‍♂️ make the error messages clearer and normalize their pop-time, stating at compile-time that the constructor declaration of the child node is missing instead of this number-of-arguments thing\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nUnfortunately I have no clue about how to implement this in the Godot's codebase (for now)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI think it would be used often 😛 \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nWell, yeah, taht's because it's pretty core stuff",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1145/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1144",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1144/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1144/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1144/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1144",
    "id": 647820782,
    "node_id": "MDU6SXNzdWU2NDc4MjA3ODI=",
    "number": 1144,
    "title": "Option to decode Ogg Vorbis at load time to save space and have good performance",
    "user": {
      "login": "jitspoe",
      "id": 7751182,
      "node_id": "MDQ6VXNlcjc3NTExODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7751182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jitspoe",
      "html_url": "https://github.com/jitspoe",
      "followers_url": "https://api.github.com/users/jitspoe/followers",
      "following_url": "https://api.github.com/users/jitspoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jitspoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jitspoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jitspoe/subscriptions",
      "organizations_url": "https://api.github.com/users/jitspoe/orgs",
      "repos_url": "https://api.github.com/users/jitspoe/repos",
      "events_url": "https://api.github.com/users/jitspoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jitspoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-30T03:14:45Z",
    "updated_at": "2020-07-13T10:52:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** 2.5d Platformer (Fist of the Forgotten)\r\n\r\n**Describe the problem or limitation you are having in your project:** I'd like to use ogg vorbis files for all sounds to keep the file size down, but I don't want to impact runtime performance.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Decoding ogg files at load would allow the file size to remain small and not decoding in realtime will allow the performance to be better when playing lots of sounds.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** This would probably make the most sense as an import checkbox.  Like [] Decode sample into memory on load.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Not sure if this can be done as an add-on.  Seems pretty engine-level.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1144/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1141",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1141/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1141/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1141/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1141",
    "id": 647346570,
    "node_id": "MDU6SXNzdWU2NDczNDY1NzA=",
    "number": 1141,
    "title": "Support multiple .NET5 SDK-style projects per Godot project",
    "user": {
      "login": "GeorgeS2019",
      "id": 49812372,
      "node_id": "MDQ6VXNlcjQ5ODEyMzcy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/49812372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GeorgeS2019",
      "html_url": "https://github.com/GeorgeS2019",
      "followers_url": "https://api.github.com/users/GeorgeS2019/followers",
      "following_url": "https://api.github.com/users/GeorgeS2019/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeorgeS2019/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GeorgeS2019/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeorgeS2019/subscriptions",
      "organizations_url": "https://api.github.com/users/GeorgeS2019/orgs",
      "repos_url": "https://api.github.com/users/GeorgeS2019/repos",
      "events_url": "https://api.github.com/users/GeorgeS2019/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GeorgeS2019/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/2",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2/labels",
      "id": 5482292,
      "node_id": "MDk6TWlsZXN0b25lNTQ4MjI5Mg==",
      "number": 2,
      "title": "4.1",
      "description": "This proposal is planned to be implemented in 4.1 or later",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2020-05-31T14:29:07Z",
      "updated_at": "2021-01-08T05:26:43Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2020-06-29T12:47:45Z",
    "updated_at": "2020-08-22T07:19:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAs project complexity increases, it may be necessary to have a simpler and intuitive way to organize Csharp scripts into multiple projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently it is not trivial to create separate csharp project as either an additional Csharp library or for unit/integration testing, within a godot project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n[Migrate the current legacy csproj to the new .NET5 Sdk style csproj format ](https://github.com/godotengine/godot-proposals/issues/315)which make tracking which csharp files are associated with which csproj project simpler. However, the aim of the proposal is to go ONE step further on **HOW to organize these SDK style projects within a single Godot Project.**\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAllow one single Visual Studio Solution .sln file to support multiple the SDK style csproj projects with each on a separate csharp directory under a e.g. root Script directory.\r\n\r\nThe .sln file needs to be at the root level so it is possible to use continuous testing and delivery using Azure DevOps (Online or Server)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, we need this to allow Godot to support more complex and scalable project\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis involves the .sln solution file at the Godot Project root \r\n\r\nREF: [The current proposal requests the migration to the .NET5 SDK style csproj](https://github.com/godotengine/godot-proposals/issues/315). However the current proposal suggests how to organize Multiple SDK style projects per Godot Project to allow Godot project Csharp/mono project to scale in complexity",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1141/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1139",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1139/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1139/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1139/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1139",
    "id": 647222492,
    "node_id": "MDU6SXNzdWU2NDcyMjI0OTI=",
    "number": 1139,
    "title": "Add smoothing properties to Camera3D",
    "user": {
      "login": "MCrafterzz",
      "id": 19669673,
      "node_id": "MDQ6VXNlcjE5NjY5Njcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19669673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCrafterzz",
      "html_url": "https://github.com/MCrafterzz",
      "followers_url": "https://api.github.com/users/MCrafterzz/followers",
      "following_url": "https://api.github.com/users/MCrafterzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCrafterzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCrafterzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCrafterzz/subscriptions",
      "organizations_url": "https://api.github.com/users/MCrafterzz/orgs",
      "repos_url": "https://api.github.com/users/MCrafterzz/repos",
      "events_url": "https://api.github.com/users/MCrafterzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCrafterzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-06-29T08:33:11Z",
    "updated_at": "2020-12-12T16:32:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D racing game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThat builtin camera smoothing doesn't exist 🤷‍♂️ \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding smoothing to camera 3D would add a easy way to implement an extremely common feature.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/19669673/85991413-ada9cf80-b9f3-11ea-9249-3bc2719cd036.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would use it in any 3D project I would ever create\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n1. It's an extremely common use case, nearly all games want a smooth camera rather than a camera which instantly teleports to the player (or some other object)\r\n2. It already exists in 2D and is commonly use\r\n3. InterpolatedCamera is removed in 4.0 so this would replace part of it's functionality\r\n\r\nMaybe there's some technical limitation? Let me know!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1139/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1136",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1136/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1136/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1136/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1136",
    "id": 647023906,
    "node_id": "MDU6SXNzdWU2NDcwMjM5MDY=",
    "number": 1136,
    "title": "Add warning for 'Auto Switch To Remote Scene Tree' setting",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-28T23:03:42Z",
    "updated_at": "2020-06-29T07:55:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nCard game (but applies to any project)\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI noticed intermittent lag while testing my game, so I checked the profiler and saw huge lag spikes every second.\r\nAfter Googling, I found a few relevent mentions of this issue:\r\n\r\n- https://godotengine.org/qa/22467/lag-spikes-every-1s-using-c%23-in-3-0rc1\r\n- https://www.reddit.com/r/godot/comments/bs4erz/psa_lagstutter_every_second_in_large_scene_trees/\r\n- https://github.com/godotengine/godot/issues/13219\r\n\r\nThe lag was being caused by the Remote SceneTree being updated, because I had enabled 'Auto Switch To Remote Scene Tree' in the Editor settings.\r\n\r\nIf I hadn't found those search results, it would have taken me a long time to discover the source of the lag.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think there should be a warning generated when you run your project with 'Auto Switch To Remote Scene Tree' enabled, explaining that this can cause lag spikes every second.\r\n\r\nThis should also be mentioned in the tooltip when you hover over this setting in the Editor Settings window.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![AutoSwitchToRemoteSceneTreeWarning2](https://user-images.githubusercontent.com/60025044/85960286-03389a80-b968-11ea-8580-5d31fa3dc95d.png)\r\n\r\n![AutoSwitchToRemoteSceneTreeHint](https://user-images.githubusercontent.com/60025044/85960218-99b88c00-b967-11ea-8484-2e89073ce9a7.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWith no warning about the potential lag caused by having 'Auto Switch To Remote Scene Tree' enabled, this could make a lot of people think that they have an optimization problem when they don't.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1134",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1134/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1134/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1134/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1134",
    "id": 646949295,
    "node_id": "MDU6SXNzdWU2NDY5NDkyOTU=",
    "number": 1134,
    "title": "CSGPolygon: Add the ability to move points on the Z axis (depth)",
    "user": {
      "login": "NewNodeGames",
      "id": 39442359,
      "node_id": "MDQ6VXNlcjM5NDQyMzU5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/39442359?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NewNodeGames",
      "html_url": "https://github.com/NewNodeGames",
      "followers_url": "https://api.github.com/users/NewNodeGames/followers",
      "following_url": "https://api.github.com/users/NewNodeGames/following{/other_user}",
      "gists_url": "https://api.github.com/users/NewNodeGames/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NewNodeGames/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NewNodeGames/subscriptions",
      "organizations_url": "https://api.github.com/users/NewNodeGames/orgs",
      "repos_url": "https://api.github.com/users/NewNodeGames/repos",
      "events_url": "https://api.github.com/users/NewNodeGames/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NewNodeGames/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-28T15:38:36Z",
    "updated_at": "2020-06-30T13:10:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTrying to make a 3D game using the CSG system\r\n**Describe the problem or limitation you are having in your project:**\r\nCSGPolygon node is nice but can be even better with the possibility to add and edit points on Z axis.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe main idea is to add a mode in CSGPolygon with editable points in X, Y, and Z axis.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't know, I'm not a coding expert. Adding lines on some script I figure.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know, I think the node is limited.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe CSG system is integrated in the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1134/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1133",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1133/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1133/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1133/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1133",
    "id": 646940488,
    "node_id": "MDU6SXNzdWU2NDY5NDA0ODg=",
    "number": 1133,
    "title": "Grouping projects together in tree-like structure in Project Manager",
    "user": {
      "login": "revanj",
      "id": 37972124,
      "node_id": "MDQ6VXNlcjM3OTcyMTI0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/37972124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/revanj",
      "html_url": "https://github.com/revanj",
      "followers_url": "https://api.github.com/users/revanj/followers",
      "following_url": "https://api.github.com/users/revanj/following{/other_user}",
      "gists_url": "https://api.github.com/users/revanj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/revanj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/revanj/subscriptions",
      "organizations_url": "https://api.github.com/users/revanj/orgs",
      "repos_url": "https://api.github.com/users/revanj/repos",
      "events_url": "https://api.github.com/users/revanj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/revanj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-28T14:59:21Z",
    "updated_at": "2020-08-18T17:02:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA project where player teleports between different worlds. (I believe the project content is not relevant)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBecause I have quite a lot of projects (6, plus all the demos that comes with Godot on steam), it becomes increasing hard to find the right project in my project manager.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA tree like structure for grouping projects in project manager, reorder and change structure by mouse drags.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nChange Project manager to use a tree-like UI element.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's the project manager and is not that easy to create plugin or add-on.\r\n\r\nNote: I'm willing to PR for this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1133/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1132",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1132/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1132/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1132/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1132",
    "id": 646910242,
    "node_id": "MDU6SXNzdWU2NDY5MTAyNDI=",
    "number": 1132,
    "title": "Add information to Project Manager about new versions of Godot",
    "user": {
      "login": "qarmin",
      "id": 41945903,
      "node_id": "MDQ6VXNlcjQxOTQ1OTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41945903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qarmin",
      "html_url": "https://github.com/qarmin",
      "followers_url": "https://api.github.com/users/qarmin/followers",
      "following_url": "https://api.github.com/users/qarmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/qarmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qarmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qarmin/subscriptions",
      "organizations_url": "https://api.github.com/users/qarmin/orgs",
      "repos_url": "https://api.github.com/users/qarmin/repos",
      "events_url": "https://api.github.com/users/qarmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qarmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-28T12:41:00Z",
    "updated_at": "2021-01-09T12:15:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis is unrelated to proposal\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't have any problems with it, because I'm up to date with the newest Godot versions. \r\nSome people use Godot versions downloaded from site, which is easy but after time this version may become outdated.\r\nOf course there is Steam and Linux package managers which provide auto updates, but still not everybody have it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding popup/info would help users to use the latest available versions of software.\r\nSome of issues which they had, could be fixed in later versions of Godot.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThere should be a button \"Check for updates\" off by default(like vnen said, Godot should not connect to internet without user knowledge).\r\n\r\n![ver](https://user-images.githubusercontent.com/41945903/44196972-b9f94c00-a13d-11e8-91fe-cf82c3821d1c.png)\r\n\r\nor\r\n\r\n![vvv](https://user-images.githubusercontent.com/41945903/44226042-539d1980-a18f-11e8-832b-de31ec753f28.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't thing so.\r\nIt should be used rather often by all users.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think that is possible to use addon in project manager.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1132/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1127",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1127/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1127/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1127/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1127",
    "id": 646625707,
    "node_id": "MDU6SXNzdWU2NDY2MjU3MDc=",
    "number": 1127,
    "title": "Add JWT (JSON Web Token) support",
    "user": {
      "login": "InsightGit",
      "id": 13735132,
      "node_id": "MDQ6VXNlcjEzNzM1MTMy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13735132?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/InsightGit",
      "html_url": "https://github.com/InsightGit",
      "followers_url": "https://api.github.com/users/InsightGit/followers",
      "following_url": "https://api.github.com/users/InsightGit/following{/other_user}",
      "gists_url": "https://api.github.com/users/InsightGit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/InsightGit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/InsightGit/subscriptions",
      "organizations_url": "https://api.github.com/users/InsightGit/orgs",
      "repos_url": "https://api.github.com/users/InsightGit/repos",
      "events_url": "https://api.github.com/users/InsightGit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/InsightGit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-27T06:58:26Z",
    "updated_at": "2020-11-17T16:48:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA creative multiplayer shooter with separate custom back-end apis written in Python and the game server + client written in GDScript.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen I communicate between my game server and my backend servers, I'm using JWT now, albeit in a sort of hacky way partially in GDScript and partially in Python (see If this enhancement will not be used often...) that assumes that python is installed on the machine with the requisite JWT library (and thus is only feasible to implement on systems I control like my server).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt would get rid of the need to call an external python script server-side and handle JWT claims purely in GDScript, and allow me to parse/create JWT tokens client side.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIf I were to implement this, I'd most likely write a wrapper around an existing C or C++ JWT API like [libjwt](https://github.com/benmcollins/libjwt) or something if possible(I haven't worked in the Godot codebase enough to register whether it is). I would probably have one class similar to how the existing JSON class works where there would be two static functions. One of which would decode (with verification being done by default) a JWT token given the token, the JWT algorithm being used (ie RS256 or HS256) and the secret/public key, and the other of which would create such a token with similar parameters (except it would take a Dictionary and spew out a JWT token in the form of a String).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, but not natively in GDScript. For example, what I am doing right now is executing a separate python script on the server using OS.execute funnelling in the JSON data through command-line arguments and then extracting the JWT string via the command line. It works, but is a bit cumbersome and only works on systems that have Python and the requisite JWT library installed. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would pair well with JSON and serve as an easy way built into the engine to quickly exchange information that's verified to come from a trusted source, and thus could even possibly be used for passing serialized Variant objects over the network in a trusted and secure way.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1127/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1126",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1126/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1126/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1126/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1126",
    "id": 646524476,
    "node_id": "MDU6SXNzdWU2NDY1MjQ0NzY=",
    "number": 1126,
    "title": "Add a Shape2D node to draw 2D shapes",
    "user": {
      "login": "I7SOD",
      "id": 51547693,
      "node_id": "MDQ6VXNlcjUxNTQ3Njkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51547693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/I7SOD",
      "html_url": "https://github.com/I7SOD",
      "followers_url": "https://api.github.com/users/I7SOD/followers",
      "following_url": "https://api.github.com/users/I7SOD/following{/other_user}",
      "gists_url": "https://api.github.com/users/I7SOD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/I7SOD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/I7SOD/subscriptions",
      "organizations_url": "https://api.github.com/users/I7SOD/orgs",
      "repos_url": "https://api.github.com/users/I7SOD/repos",
      "events_url": "https://api.github.com/users/I7SOD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/I7SOD/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 26,
    "created_at": "2020-06-26T21:36:42Z",
    "updated_at": "2021-01-07T00:17:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nChecking out Game engines\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to create my own Sprite by myself even if I want to use a basic shape like a triangle\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a shape node  2d to handle simple shape objects\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA shape2d object that has different basic shapes\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure still a noob\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't really know I come from unity background which has it as a core object",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1126/reactions",
      "total_count": 23,
      "+1": 23,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1123",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1123/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1123/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1123/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1123",
    "id": 646336645,
    "node_id": "MDU6SXNzdWU2NDYzMzY2NDU=",
    "number": 1123,
    "title": "Allow use of native system file picker dialog",
    "user": {
      "login": "gingerbeardman",
      "id": 49612,
      "node_id": "MDQ6VXNlcjQ5NjEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/49612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gingerbeardman",
      "html_url": "https://github.com/gingerbeardman",
      "followers_url": "https://api.github.com/users/gingerbeardman/followers",
      "following_url": "https://api.github.com/users/gingerbeardman/following{/other_user}",
      "gists_url": "https://api.github.com/users/gingerbeardman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gingerbeardman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gingerbeardman/subscriptions",
      "organizations_url": "https://api.github.com/users/gingerbeardman/orgs",
      "repos_url": "https://api.github.com/users/gingerbeardman/repos",
      "events_url": "https://api.github.com/users/gingerbeardman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gingerbeardman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-26T15:21:13Z",
    "updated_at": "2021-01-04T07:22:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\n\r\n- Pixelorama https://github.com/Orama-Interactive/Pixelorama\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\n\r\n1. godot file picker does not allow filesystem access from godot in web browser \r\n1. godot file picker does not allow filesystem access in sandboxed macOS apps \r\n1. godot file picker does not offer capabilities and conveniences of the system file picker\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nregarding the above issues, allowing use of system file picker:\r\n- is required for 1\r\n- would alleviate 2\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nsimilar to these existing libraries, but cross platform and in core:\r\n- https://github.com/bruvzg/mac_file_panels\r\n- https://github.com/GodotExplorer/NativeDialogs\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nSadly not, core provides no mechanism for accessing native file pickers.\r\n\r\nSee https://github.com/godotengine/godot/issues/13177 for more history\r\n\r\nThe ongoing effort of creating a better file picker https://github.com/godotengine/godot/pull/36053 will still not help this issue.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n- it is required for sandboxed macOS apps, so core requirement is the only real solution",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1123/reactions",
      "total_count": 11,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1122",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1122/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1122/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1122/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1122",
    "id": 646270395,
    "node_id": "MDU6SXNzdWU2NDYyNzAzOTU=",
    "number": 1122,
    "title": "Allow \"Make Scene Root\" on an instanced scene to make the scene inherited",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-26T13:38:54Z",
    "updated_at": "2020-06-28T22:10:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a scene and the root node is a StaticBody2D. One child of it is an instance. When I right click on this instance and click Make Scene Root, an alert pops up and says \"Instantiated Scenes can't become root\" but making a new scene whose root is the same instance, it works.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe popup would be removed and making a childinstance to the root would work exactly how it works when creating a new scene with an instance as root.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it's core\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, you can also say it's a bug.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1121",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1121/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1121/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1121/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1121",
    "id": 646257242,
    "node_id": "MDU6SXNzdWU2NDYyNTcyNDI=",
    "number": 1121,
    "title": "AnimationNodeAnimation in AnimationTree should have configurable start and end times",
    "user": {
      "login": "Cwiiis",
      "id": 668518,
      "node_id": "MDQ6VXNlcjY2ODUxOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/668518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Cwiiis",
      "html_url": "https://github.com/Cwiiis",
      "followers_url": "https://api.github.com/users/Cwiiis/followers",
      "following_url": "https://api.github.com/users/Cwiiis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Cwiiis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Cwiiis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Cwiiis/subscriptions",
      "organizations_url": "https://api.github.com/users/Cwiiis/orgs",
      "repos_url": "https://api.github.com/users/Cwiiis/repos",
      "events_url": "https://api.github.com/users/Cwiiis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Cwiiis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-26T13:17:49Z",
    "updated_at": "2020-09-21T07:00:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 2.5d scrolling arcade shooter/platformer (2d gameplay, 3d environment and physics).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany of the resources I receive have one single animation, with frame-ranges specified for particular sub-animations. This is true for many of the resources available on both SketchFab and TurboSquid.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn enhancement would be for the AnimationNodeAnimation in AnimationTree to let me specify start/end times instead of always playing the whole animation. To overcome the problem currently, I need to edit the model in Blender, which is laborious, non-trivial and error-prone. This feature would make this entirely unnecessary and would allow direct use of many resources from SketchFab and TurboSquid (and presumably other 3d model resource sites).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTwo float properties would be available on AnimationNodeAnimation, start and end. Values below zero for end would signify no end (so play to end of animation). Values would otherwise be interpreted as times, in the same way the input value for seeking is treated. These properties would be modifiable from code and modifiable in the editor via the inspector.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI've found no way to work around this limitation beyond manually editing animations. I believe this enhancement would be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a common property of many 3d models with animation and any 3d game involving animated models may find this feature useful. Its behaviour and use is obvious enough not to introduce friction in the case where you don't have use for this feature. This feature would also be useful if you need to make small tweaks to the start/end of animations without having to edit files or go back to an artist to edit files for you.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1120",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1120/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1120/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1120/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1120",
    "id": 646006088,
    "node_id": "MDU6SXNzdWU2NDYwMDYwODg=",
    "number": 1120,
    "title": "Add Array.find_custom(Variant value, Object obj, String func,  int from=0)",
    "user": {
      "login": "AllenKll",
      "id": 14350666,
      "node_id": "MDQ6VXNlcjE0MzUwNjY2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/14350666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllenKll",
      "html_url": "https://github.com/AllenKll",
      "followers_url": "https://api.github.com/users/AllenKll/followers",
      "following_url": "https://api.github.com/users/AllenKll/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllenKll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllenKll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllenKll/subscriptions",
      "organizations_url": "https://api.github.com/users/AllenKll/orgs",
      "repos_url": "https://api.github.com/users/AllenKll/repos",
      "events_url": "https://api.github.com/users/AllenKll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllenKll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-26T04:53:01Z",
    "updated_at": "2020-06-26T07:14:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTurn based RPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to search an array of classes for the index of a class that contains a specific value.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding my own custom find predicate would allow me to not have to rewrite a very standard container search function\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis should be used similarly to how C++ STL has a search predicate available.\r\nhttps://www.cplusplus.com/reference/algorithm/search/\r\n \r\nexample usage :\r\n\r\n    class Person extends Resource:\r\n        var position\r\n        var name\r\n        var value\r\n\r\n        func _init(p,n,v):\r\n            position = p\r\n            name = n\r\n            value =v\r\n\r\n    func findByName(obj, val):\r\n        return obj.name == val\r\n    func findByValue(obj, val):\r\n        return obj.value == val\r\n    func findByPosition(obj, val):\r\n        return obj.position == val\r\n\r\n    var myArray = []\r\n    myArray.push_back(Person.new(Vector2(0,0), \"bob\", 15))\r\n    myArray.push_back(Person.new(Vector2(12,12), \"jane\", 47))\r\n    myArray.push_back(Person.new(Vector2(62,14), \"will\", 999))\r\n    myArray.push_back(Person.new(Vector2(1,1), \"jenny\", 75))\r\n\r\n    print(\"Index of Person at 12,12: \" + str( myArray.find_custom(Vector2(12,12), self, \"findByPosition\") ))\r\n    print(\"Index of Person with 47 : \" + str(  myArray.find_custom(47, self, \"findByValue\") ))\r\n    print(\"Index of Person named jenny: \" + str(  myArray.find_custom(\"jenny\", self, \"findByName\")  ))\r\n\r\n\r\nThe code for find_custom would loop through the array starting at `from`, call `obj.func` for the entry at the current index, and if the function returns true, returns the index of the current object.  Something like this:\r\n\r\n    ... somewhere in class Array\r\n\r\n    func find_custom(value, obj, func, from):\r\n        for x in range(from, arrayData.size()):\r\n            if obj[func]( arrayData[x], value ):\r\n                 return x\r\n        return -1\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would expect any data heavy application to use something like this quite often.  I'm rather surprised that this basic functionality was not implemented, especially since there is a custom binary search method... but this method requires sorting.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot sure how you could expand basic gdscript functionality as an addon.  I don't know enough about the structure of Godot.\r\n\r\n\r\nNaming is unimportant..  call it search_custom, call it find_custom.  whatever makes sense to the implimenter.  I think 'find' would make the most sense, as it would parallel the find command.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1120/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1118",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1118/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1118/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1118/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1118",
    "id": 645682429,
    "node_id": "MDU6SXNzdWU2NDU2ODI0Mjk=",
    "number": 1118,
    "title": "Support choosing margin between textures in TileMap",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-25T16:04:28Z",
    "updated_at": "2020-06-30T07:58:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nBreakout\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a TileMap and want to select a texture in a frame in an animation of an AnimatedSprite and can't get it correctly because the program's default margin is set to 0.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou could specify hw big the margin between each texture is.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Godot AnimatedSprite TileMap with Margin](https://user-images.githubusercontent.com/60623532/85758519-b27b3480-b710-11ea-928e-d0c8e073334e.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, everyone who uses TileMaps in AnimatedSprites could use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1117",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1117/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1117/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1117/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1117",
    "id": 644734773,
    "node_id": "MDU6SXNzdWU2NDQ3MzQ3NzM=",
    "number": 1117,
    "title": "Use default value for an argument after `,`",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2020-06-24T16:05:51Z",
    "updated_at": "2020-12-29T15:22:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to give the default value of the first argument if I want to pass a value that is different from the second argument's default.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou could step over the argument and only pass a value to the next one.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc _ready():\r\n\tmy_function(\"vvv\", \"mmm\")\r\n\tmy_function(\"passed to first argument\")\r\n\tmy_function(, \"passed to second argument\")\r\n\r\nmy_function(arg1 = \"hshaf\", arg2 = \"ldvm\"):\r\n\tprint(arg1, arg2)\r\n```\r\nThis would print\r\nvvv\r\nmmm\r\npassed to first argument\r\nldvm\r\nhshaf\r\npassed to second argument\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think an add-on can't change/add etc. something to the language.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1117/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1116",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1116/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1116/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1116/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1116",
    "id": 644532584,
    "node_id": "MDU6SXNzdWU2NDQ1MzI1ODQ=",
    "number": 1116,
    "title": "Emit a signal when the user is closing the window/tab (JavaScript `beforeunload` event)",
    "user": {
      "login": "severin-lemaignan",
      "id": 385379,
      "node_id": "MDQ6VXNlcjM4NTM3OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/385379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/severin-lemaignan",
      "html_url": "https://github.com/severin-lemaignan",
      "followers_url": "https://api.github.com/users/severin-lemaignan/followers",
      "following_url": "https://api.github.com/users/severin-lemaignan/following{/other_user}",
      "gists_url": "https://api.github.com/users/severin-lemaignan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/severin-lemaignan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/severin-lemaignan/subscriptions",
      "organizations_url": "https://api.github.com/users/severin-lemaignan/orgs",
      "repos_url": "https://api.github.com/users/severin-lemaignan/repos",
      "events_url": "https://api.github.com/users/severin-lemaignan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/severin-lemaignan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-24T11:16:30Z",
    "updated_at": "2020-09-19T06:46:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA web-based 2D multiplayer game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI can not detect when a player is closing its window. I would want for instance to send a message to the server to remove the player.\r\n\r\nIn pure javascript, the `beforeunload` event can be used to this end. See [documentation](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCurrently, there is no obvious ways of capturing a javascript event like `beforeunload`.\r\nIdeally, this special case should be handled like [other quit requests](https://docs.godotengine.org/en/stable/tutorials/misc/handling_quit_requests.html) in Godot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo obvious workaround, except for the server to regularly poll the clients to check they are still alive.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis belongs to the core lifecycle management of an app.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1116/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1115",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1115/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1115/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1115/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1115",
    "id": 644491941,
    "node_id": "MDU6SXNzdWU2NDQ0OTE5NDE=",
    "number": 1115,
    "title": "Exposing ObjectDB to GDNative C++ script",
    "user": {
      "login": "DrMoriarty",
      "id": 1177068,
      "node_id": "MDQ6VXNlcjExNzcwNjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1177068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrMoriarty",
      "html_url": "https://github.com/DrMoriarty",
      "followers_url": "https://api.github.com/users/DrMoriarty/followers",
      "following_url": "https://api.github.com/users/DrMoriarty/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrMoriarty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrMoriarty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrMoriarty/subscriptions",
      "organizations_url": "https://api.github.com/users/DrMoriarty/orgs",
      "repos_url": "https://api.github.com/users/DrMoriarty/repos",
      "events_url": "https://api.github.com/users/DrMoriarty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrMoriarty/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-24T10:09:42Z",
    "updated_at": "2020-06-24T12:21:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNative plugins for Android and iOS.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe standard C++ module have access to `ObjectDB::get_instance` so it can get `instance_id` of any GDScript instance and then call it's methods. GDNative plugin can get instance ID by calling `Object::get_instance_id()` or can get it as input parameter. But it can not use it in any way because ObjectDB not exposed into C++ plugin interface.\r\n\r\nAlso Java interface (both new and old java native plugins) can use `instance_id` for calling methods by using `GodotLib.calldeferred(instance_id, \"method_name\", args)`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake some way to get object by it's `instance_id`. It may be exposing of ObjectDB or may be static method in Object class or may be special method in Godot class especially for calling methods by instance_id.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nObject *obj = ObjectDB::get_instance(instanceId);\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo way.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1115/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1113",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1113/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1113/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1113/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1113",
    "id": 643969844,
    "node_id": "MDU6SXNzdWU2NDM5Njk4NDQ=",
    "number": 1113,
    "title": "AnimationTree - Bone properties filter",
    "user": {
      "login": "lygamac",
      "id": 49118209,
      "node_id": "MDQ6VXNlcjQ5MTE4MjA5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/49118209?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lygamac",
      "html_url": "https://github.com/lygamac",
      "followers_url": "https://api.github.com/users/lygamac/followers",
      "following_url": "https://api.github.com/users/lygamac/following{/other_user}",
      "gists_url": "https://api.github.com/users/lygamac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lygamac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lygamac/subscriptions",
      "organizations_url": "https://api.github.com/users/lygamac/orgs",
      "repos_url": "https://api.github.com/users/lygamac/repos",
      "events_url": "https://api.github.com/users/lygamac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lygamac/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-23T16:11:29Z",
    "updated_at": "2020-06-24T17:44:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA TPS game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to have a character that can attack (shoot) while running. With this purpose, I used two animations:\r\n- Running\r\n- Shooting\r\n    - ![](https://i.imgur.com/Sya3yYP.png)\r\n\r\nHowever, by blending them with oneshot (using filters, only including the hand that has the shooting animation) in the AnimationTree, as the bones follow their parents rotation, the shooting animation in running is not pointing forward:\r\n\r\n![](https://i.imgur.com/ySP5a7o.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would help if in in the filter menu, there are additional options at right side which allows you to keep the original transition/rotation/scaling.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBefore the second animation is blended, for example if I want to keep the rotation right, get parents rotation, set it negative and plus that into the filtered bones rotation.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt seems to be possible through the code: Using `animation_track_get_key_animation` and `animation_track_set_key_animation`. But when animating with many bones and keys, it's not a way that someone would choose.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf 3D is what Godot aims, this feature is not negligible, as it allows indie-developers to make a game much quicker (5+ animations vs. 1 animation)\r\n\r\n\r\n---\r\n\r\nFor shooting, one solution could be using IKs, but in a close combat such as lance, this problems persists.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1113/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1112",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1112/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1112/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1112/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1112",
    "id": 643928951,
    "node_id": "MDU6SXNzdWU2NDM5Mjg5NTE=",
    "number": 1112,
    "title": "Mono: Improve engine methods object parameters (and use/allow structs?)",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-23T15:16:53Z",
    "updated_at": "2020-06-23T19:29:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nJust looking forward to using godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently some engine methods take object parameters that inherit huge godot classes, that in some cases don't even make sense or are unusable in that inheritance chain, for example\r\nPhysicsShapeQueryParameters, which inherits from Reference. This allows it to be assigned a script or to receive notifications, have metadata etc. which is of no real use.\r\nOr RID which is so lightweight it should probably be a struct.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe obstacle is probably that currently System.object or structs seem to be unmarshallable for the most part as far as i understand it. But having that work could allow those bloated or uneccessarily allocating arguments to be more lightweight and developer friendly (easier to use, better performing/less allocating).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis proposal is halfway an issue report, so i'm unable to provide a solution apart from whats written in the feature description.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it's part of the engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt must be adjusted in the engine",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1112/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1110",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1110/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1110/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1110/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1110",
    "id": 643798202,
    "node_id": "MDU6SXNzdWU2NDM3OTgyMDI=",
    "number": 1110,
    "title": "Add properties to make VisibilityNotifier2D more accurate",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-23T12:25:57Z",
    "updated_at": "2020-06-25T07:47:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nflip screen platform game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVisibilityNotifier2D (as currently designed) is very inaccurate, even when setting the cell size to a very small number. Testing across different machines gives various results with the same values meaning consistency cannot be achieved for determining when an object leaves the screen.\r\n\r\nPutting a notifier polygon far outside the sprite, in the example below the notifier on the right does not trigger until the sprite is completely off the screen to the right with a cell size of 8 (from default of 128).\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/85402724-13114280-b554-11ea-8c50-1a813ebb2a75.png)\r\n\r\nThis is generally ok because the visibility notifier is often used to remove sprites no longer needed, such as enemies, however when the notifier is required for the player (e.g. flip/wrap around) accuracy is important.\r\n\r\nSwitching to an Area2D on the camera is much more long winded and removes the ability to set the notifier with the player node.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA high quality flag for the visibility, or an 'EnhanceVisibilityNotifier2D'.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine most of the complexity is for 3D, but for 2D it should be much less intensive and simpler to create a 'high quality' non heuristic approach to visibility.\r\n\r\nAdd a flag (or a new EnhanceVisibilityNotifier2D node) that either changes the method for 2D screen/viewport leaving/entering or increases polling and removes a 'cell size' requirement.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno, the only alternative is area2d on a camera, and that is more complex and removes ability to set it on a specific kinematic body.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n2D platform games make up a large volume of games and such a 'random' and inaccurate event is not good.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1108",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1108/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1108/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1108/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1108",
    "id": 643482884,
    "node_id": "MDU6SXNzdWU2NDM0ODI4ODQ=",
    "number": 1108,
    "title": "add set_tile(position: Vector2, tile: int) method for TileMap",
    "user": {
      "login": "alexzheng",
      "id": 1130047,
      "node_id": "MDQ6VXNlcjExMzAwNDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1130047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexzheng",
      "html_url": "https://github.com/alexzheng",
      "followers_url": "https://api.github.com/users/alexzheng/followers",
      "following_url": "https://api.github.com/users/alexzheng/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexzheng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexzheng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexzheng/subscriptions",
      "organizations_url": "https://api.github.com/users/alexzheng/orgs",
      "repos_url": "https://api.github.com/users/alexzheng/repos",
      "events_url": "https://api.github.com/users/alexzheng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexzheng/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-23T02:37:56Z",
    "updated_at": "2020-10-22T15:01:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen just change a tile without modify other options, the code maybe:\r\ntilemap.set_cellv(cell, new_tile, tilemap.is_cell_x_flipped(cell.x, cell.y), tilemap.is_cell_y_flipped(cell.x, cell.y), tilemap.is_cell_transposed(cell.x, cell.y))  \r\n\r\nit's really a long call.\r\n\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\ncan we have a method just set the tile, keep other options just as it is\r\n\r\ntilemap.set_tile(cell, new_tile)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis method is  used frequently, although it can be implemented in GDScript. A build in method will be much more convenient\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's just a handy call.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1108/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1107",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1107/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1107/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1107/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1107",
    "id": 643422437,
    "node_id": "MDU6SXNzdWU2NDM0MjI0Mzc=",
    "number": 1107,
    "title": "New GUI Component - Table",
    "user": {
      "login": "ShlomiRex",
      "id": 17744127,
      "node_id": "MDQ6VXNlcjE3NzQ0MTI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17744127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShlomiRex",
      "html_url": "https://github.com/ShlomiRex",
      "followers_url": "https://api.github.com/users/ShlomiRex/followers",
      "following_url": "https://api.github.com/users/ShlomiRex/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShlomiRex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShlomiRex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShlomiRex/subscriptions",
      "organizations_url": "https://api.github.com/users/ShlomiRex/orgs",
      "repos_url": "https://api.github.com/users/ShlomiRex/repos",
      "events_url": "https://api.github.com/users/ShlomiRex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShlomiRex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-22T23:29:40Z",
    "updated_at": "2020-07-06T18:50:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I want to create table, like database gui, like JTable in Java Swing.\r\n![model](https://user-images.githubusercontent.com/17744127/85344522-98ffa000-b4f8-11ea-9899-935f108c74c6.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI want to pull my request: https://github.com/godotengine/godot/pull/36053\r\n(Pull request # #36053)\r\n![image](https://user-images.githubusercontent.com/17744127/85344945-b719d000-b4f9-11ea-98aa-81e21985ecde.png)\r\n\r\nAnd the current file dialog uses Tree. Which is a bad choice. ItemList is preferred. Even so, a Table with dedicated Title (like in the picture) and user can click on title and sort the table.\r\nMoreover, current solutions don't allow user to select a row and that row will be selected and highlighted. I modified the code, turns out Tree is designed that way. It only has 2 modes: Single (single cell select) and Multi (multi cell select). If I want to select a row, I need to set multi mode and select all the cells in that row. This is bad.\r\nIn the pull request I switched multi mode with Row mode. This however throws error (not crashing, just log. Other than that the code works perfectly with correct selection of files)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI am working on it on 3.2 on commit a662b853dd5de7d47a8c5ebee3ae35cf66490d3f (latest as of writing this post)\r\nThough I'm not working on it full time, as I got work and university, but as side project, torwards big goal\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, need dedicated GUI component\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, GUI is core feature\r\n\r\n\r\nAnother feature I want to add, after Table is ready:\r\n* Sort the table (with function call according to one column)\r\n* Sort the table (with user clicking on title) (Defenition of title: in the picture above the title is the first row, describing the column's names)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1107/reactions",
      "total_count": 15,
      "+1": 10,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1106",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1106/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1106/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1106/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1106",
    "id": 642688488,
    "node_id": "MDU6SXNzdWU2NDI2ODg0ODg=",
    "number": 1106,
    "title": "Add support for curving Line2D",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-22T01:41:03Z",
    "updated_at": "2020-06-22T10:35:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMobile game\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to curve my line2d node\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt's an innovation I call line2d.add_curve_point\r\nBasically add_curve_point method on line2d nodes \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt creates curve and all you have to choose is whether to have an inward or outward curve but defaults to outward\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlso part of gdscript",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1106/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1105",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1105/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1105/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1105/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1105",
    "id": 642685488,
    "node_id": "MDU6SXNzdWU2NDI2ODU0ODg=",
    "number": 1105,
    "title": "Add support for code animation",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 34,
    "created_at": "2020-06-22T01:29:18Z",
    "updated_at": "2020-06-26T15:16:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMobile game\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have a few lines of code that I would like run bit by bit not just at once. I know you are thinking just use yield() but I have a lot of code and I also want to have a bit more control over the code animation like the easing\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe solution is An animate block 🤯🤯🤯\r\nAn animate block???\r\nYes an animate block\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe animate block just like if block but used for code animation something like animate (duration = 4s):\r\n    #Your code to animate here \r\n#Continue code here \r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't the only other way to do it is to use yield and it's more tedious and less controllable\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt gdscript based which is core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1105/reactions",
      "total_count": 10,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 8,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1104",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1104/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1104/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1104/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1104",
    "id": 642684953,
    "node_id": "MDU6SXNzdWU2NDI2ODQ5NTM=",
    "number": 1104,
    "title": "Loop Multiple Animations Button",
    "user": {
      "login": "richard14110",
      "id": 6833439,
      "node_id": "MDQ6VXNlcjY4MzM0Mzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6833439?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richard14110",
      "html_url": "https://github.com/richard14110",
      "followers_url": "https://api.github.com/users/richard14110/followers",
      "following_url": "https://api.github.com/users/richard14110/following{/other_user}",
      "gists_url": "https://api.github.com/users/richard14110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richard14110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richard14110/subscriptions",
      "organizations_url": "https://api.github.com/users/richard14110/orgs",
      "repos_url": "https://api.github.com/users/richard14110/repos",
      "events_url": "https://api.github.com/users/richard14110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richard14110/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-22T01:27:17Z",
    "updated_at": "2020-07-04T22:31:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on an RPG project to evaluate the features of Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen there are many animations, it may take a while to loop all of the ones that should be looped by selecting an animation in an animation player, by clicking the \"Animation Looping\" button, and then by repeating the process. Certain games need the loop to make a part of the game look natural such as continuous movement. Adding -loop or -cycle to each animation seems inconvenient because clicking a button may be faster than renaming. Looping one at a time is not the most time saving way. Plus, specific games can have multiple animation players which might make it harder to organize every animation as more are added. A person could accidentally forget to loop an animation if some animations are looped and the others are not. It takes time to search each scene for an animation. In certain cases the animation names can be the same although there could be 2 or more animation players which may make it more difficult to remember which one.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a button called \"Loop Multiple Animations\" which brings up a window with a list of all of the animation names and a checkbox next to each one. If the animation names are the same, the full path of the scene file and the node name should be included to avoid confusion. The person can use the \"Ctrl\" and \"A\" keys to quickly check all of the checkboxes and then perhaps deselect the ones that shouldn't loop by clicking. At the top, there might be the sentence \"Select the animations you want to loop.\" There could be an \"OK\" button at the bottom and/or an \"X\" button to close the window. Pressing \"Ctrl\" and \"A\" again may uncheck all of the boxes or another keyboard shortcut may do the same. The list might be loaded faster if it gets updated whenever any animation player and/or animation is added and/or changed before the user clicks the button. To make it look better, the list may be organized. The human can look at the checkboxes to know which animations are looped. A search feature should be included so that the person could easily find a specific animation. I let the developer(s) decide where to place the \"Loop Multiple Animations\" button. It might be possible to replace the \"Animation Looping\" button with the \"Loop Multiple Animations\" button, but that could depend on personal preference. Both -loop and -cycle may no longer be needed if the suggestions are implemented because the person doesn't have to rename by using an external program. Many developers can benefit from the user interface enhancements.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhile Godot is loading the project, it might scan the animations for any changes that should be stored within the list. Before the game engine is open, someone could have replaced a scene file as an example. After the loading and to hopefully improve the performance, the system may check the most recently changed and/or added animation player(s) and/or animation(s) instead of checking everything animation related. The window and the other components are displayed after clicking the \"Loop Multiple Animations\" button. Then Godot switches to analyzing the checkboxes to know which ones are ticked or unticked. The confirmation might apply the change(s) or the person cancels by closing the window.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPerhaps not.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe features would be useful to more people if those come with the editor. Whenever someone desires to loop at least one animation, the faster method should be used.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1103",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1103/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1103/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1103/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1103",
    "id": 642682759,
    "node_id": "MDU6SXNzdWU2NDI2ODI3NTk=",
    "number": 1103,
    "title": "Add support for Multiple value assignment",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-06-22T01:20:04Z",
    "updated_at": "2020-06-24T02:28:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMobile game\r\n**Describe the problem or limitation you are having in your project:**\r\nHaving to reassign a value to different objects on and on\r\nIn my Case I had 5 different objects that I had to assign the same value to and I had to write 5 lines of code to get that\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI came up with an function called assign()\r\nIt takes in a list of values and gives them a value like assign(value,[value1 ,value2 , value3]\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe value will be passed to all the values in the list as explained above and you won't have to go value1 = value \r\nValue2 = value ...\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGdscript is core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1103/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1102",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1102/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1102/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1102/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1102",
    "id": 642679475,
    "node_id": "MDU6SXNzdWU2NDI2Nzk0NzU=",
    "number": 1102,
    "title": "Add \"Always on screen\" property to Control nodes",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-22T01:06:45Z",
    "updated_at": "2020-06-22T08:40:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMobile Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am not fully able to get a label node to stay on screen and I am working on a tooltip mechanism  to help players better understand the game\r\n![Tooltip](https://user-images.githubusercontent.com/59492619/85239305-03e2a580-b42b-11ea-9844-207a27af1b09.PNG)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an always on screen property to enable control nodes ensure that they don't go out of screen even when parent object is moving out of the screen\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen always on screen is enabled on control nodes it creates like a collision shape that hits the bounding boxes of the screen and smoothly displaces itself from its parents when the parent tends to move it out of screen\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nControl nodes are core \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1102/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1101",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1101/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1101/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1101/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1101",
    "id": 642612770,
    "node_id": "MDU6SXNzdWU2NDI2MTI3NzA=",
    "number": 1101,
    "title": "Make some methods in File and Directory class static",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-21T18:10:14Z",
    "updated_at": "2020-06-22T21:42:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiple projects using files API for file operations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI do lots of file operations. While opening files and iterating directories is ok, there's one thing that always makes me cringe: checking if file exists. I can't do `File.file_exists(path)`. I have to\r\n```\r\nvar file_checker = File.new()\r\nif file_checker.file_exists(path)\r\n```\r\nor more compact version (when I don't need to use it multiple times) `File.new().file_exists(path)`. It's very inconvenient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis method should be available statically, i.e. directly through the File class. There's no reason to have it as a member method. Other methods that could be made static:\r\n- Directory.file_exists()\r\n- Directory.file_exists()\r\n- Directory.make_dir/recursive()\r\n- Directory.remove()\r\n- Directory.rename()\r\n(each of these methods takes path to the file/directory, so calling it on an instance is unecessary)\r\n\r\nAs a bonus, `File/Directory.open()` could be static too and return an instance.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake above-listed methods available statically, i.e. directly from File/Directory class, without needing to create an instance. Example class with similar functionality is Engine, where all methods are static, but you can create instance too (although it's invalid, heh)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, literally one line, but it's about convenience. It is used often. Very often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause core API would benefit from it, as it's a common thing to do.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1101/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1100",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1100/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1100/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1100/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1100",
    "id": 642600698,
    "node_id": "MDU6SXNzdWU2NDI2MDA2OTg=",
    "number": 1100,
    "title": "Add possibility to add/remove buttons to/from ConfirmationDialog in Editor",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-21T16:56:14Z",
    "updated_at": "2020-06-29T13:38:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't want to add buttons to my ConfirmationDialog via script.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou could add and remove buttons to/form a ConfirmationDialog in the Editor. It should have the same structure of the Item List Editor of the OptionButton.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Godot ConfirmationDialog Button Editor](https://user-images.githubusercontent.com/60623532/85230488-d5e06f80-b3f0-11ea-95da-17d33832936d.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot directly, but the things that are done with this can.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it's super useful.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1099",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1099/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1099/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1099/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1099",
    "id": 642559906,
    "node_id": "MDU6SXNzdWU2NDI1NTk5MDY=",
    "number": 1099,
    "title": "Add 'hide when idle' mouse mode",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-21T13:04:55Z",
    "updated_at": "2020-06-22T03:44:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game in which there is no mouse control\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want the cursor to disappear if it remains motionless for some time, and appears when the mouse moves. `Input.MOUSE_MODE_HIDDEN` is not suitable because it hides the cursor at all.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis mode can be selected in the Project Settings or activated in a single line of code.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNeed to add new mouse mode (`Input.MOUSE_MODE_HIDE` or `Input.MOUSE_MODE_AUTOHIDE`), delay time before cursor disappears and default mouse mode to the Project Settings.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n```\r\nvar tmr := Timer.new()\r\n\r\nfunc _ready() -> void:\r\n    tmr.one_shot = true\r\n    tmr.wait_time = 1.2\r\n    tmr.connect(\"timeout\", self, \"hide_cursor\")\r\n    add_child(tmr)\r\n\r\nfunc _input(e: InputEvent) -> void:\r\n    if e is InputEventMouseMotion:\r\n        Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)\r\n        tmr.start()\r\n\r\nfunc hide_cursor() -> void:\r\n    Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is often required in 2D games without mouse control. Almost as often as switching to fullscreen (https://github.com/godotengine/godot/pull/39708). It makes no sense to reinvent the wheel every time. Besides, the mode that I propose is often found in other applications (for example, video players).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1099/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1097",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1097/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1097/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1097/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1097",
    "id": 642461989,
    "node_id": "MDU6SXNzdWU2NDI0NjE5ODk=",
    "number": 1097,
    "title": "Include rcedit in Godot / Provide an easier way to change the executable icon for projects exported to Windows",
    "user": {
      "login": "valfus",
      "id": 62182832,
      "node_id": "MDQ6VXNlcjYyMTgyODMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/62182832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/valfus",
      "html_url": "https://github.com/valfus",
      "followers_url": "https://api.github.com/users/valfus/followers",
      "following_url": "https://api.github.com/users/valfus/following{/other_user}",
      "gists_url": "https://api.github.com/users/valfus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/valfus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/valfus/subscriptions",
      "organizations_url": "https://api.github.com/users/valfus/orgs",
      "repos_url": "https://api.github.com/users/valfus/repos",
      "events_url": "https://api.github.com/users/valfus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/valfus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-20T23:16:50Z",
    "updated_at": "2020-09-18T22:07:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nCurrently nothing, just tests.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is not possible to change the properties of the executable (for example the description of the file, the icon, etc.) at the time of export\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy including rcedit in godot it will be possible to export the games without having to download it separately\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't know\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is not possible\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause this way you can change the properties of the executable without having to download it separately to get everything ready. Then I believe that if the rcedit code were included in godot there would no longer be any need for wine on macOS / linux.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1097/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1096",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1096/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1096/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1096/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1096",
    "id": 642400118,
    "node_id": "MDU6SXNzdWU2NDI0MDAxMTg=",
    "number": 1096,
    "title": "Warn me that some members will be inaccessible when I attach a script that inherits from a parent class of the target node",
    "user": {
      "login": "31",
      "id": 331300,
      "node_id": "MDQ6VXNlcjMzMTMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/331300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/31",
      "html_url": "https://github.com/31",
      "followers_url": "https://api.github.com/users/31/followers",
      "following_url": "https://api.github.com/users/31/following{/other_user}",
      "gists_url": "https://api.github.com/users/31/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/31/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/31/subscriptions",
      "organizations_url": "https://api.github.com/users/31/orgs",
      "repos_url": "https://api.github.com/users/31/repos",
      "events_url": "https://api.github.com/users/31/events{/privacy}",
      "received_events_url": "https://api.github.com/users/31/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-20T15:52:15Z",
    "updated_at": "2020-06-20T17:19:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game that attaches C# scripts to nodes. (I'm filing this as a result of a help conversation, I haven't run into this personally. It seems like a significant stumbling block for new users, though.)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI wrote a script that extends `Spatial`, and I attach it to several `Spatial` nodes, and also some `KinematicBody` nodes. Later, I realize I want the script to use `KinematicBody`'s `get_floor_normal()` in certain special conditions.\r\n\r\nIn C#, I can add a `Microsoft.CSharp` reference and use `DynamicObject.get_floor_normal()`. This won't work on iOS: https://github.com/godotengine/godot/issues/18371.\r\n\r\nIn GDScript, I can do this fine with dynamic typing, but not with static typing. (I'm not completely sure if this is correct, I'm not totally familiar with GDScript.)\r\n\r\nNow... in reality I should redesign my scripts to be compatible with static typing. But as a new user, Godot doesn't guide me down a good path. Threads discussing this:\r\n\r\n* [Mono: Can't get a node as it's actual type unless the script derives from that type #11980](https://github.com/godotengine/godot/issues/11980)\r\n* [Allow access to the \"actual\" node a script is attached to. #23164](https://github.com/godotengine/godot/issues/23164)\r\n\r\nNote: this proposal is **not** to fulfill these requests. Just the opposite. Maybe at some point this could be allowed by reworking how a bunch of stuff works, but until then, I think that Godot should detect this situation and direct people in the right direction so they can be productive with what we have now.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen I add a custom script `MyScript` extending `Spatial` to a node that's more specialized than `Spatial`, like `KinematicBody`, inform me that the specialized members won't be accessible by normal means. Ideally also bring me to a help doc that describes the intended usage of Godot script inheritance.\r\n\r\nThis changes the situation from a brick wall (where I might end up giving up on static typing! 😧), to a way to learn about the way Godot expects script inheritance to work. Pit of success and all that.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe scene tree could show a warning:\r\n\r\n![image](https://user-images.githubusercontent.com/331300/85205463-1f419980-b2e1-11ea-93d8-d74a29ae26b5.png)\r\n\r\nWith something like this when I click it:\r\n\r\n![image](https://user-images.githubusercontent.com/331300/85205758-f3271800-b2e2-11ea-936f-d6ba229372c9.png)\r\n\r\nThis might end up being too much noise if someone works on a project that relies on this behavior. Perhaps there would also need to be a way to disable it in project settings, and/or some way to declare in a script that it shouldn't trigger this warning.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think you could probably get this done via an editor script/plugin. But since this is intended as a way to guide new users just getting used to the idea of attaching scripts, I think that plugin/script would be useless as nobody who would benefit from it would be able to find it.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1096/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1095",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1095/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1095/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1095/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1095",
    "id": 642399984,
    "node_id": "MDU6SXNzdWU2NDIzOTk5ODQ=",
    "number": 1095,
    "title": "Add a `font_color_selected_focus` theme item to ItemList",
    "user": {
      "login": "Giwayume",
      "id": 4075314,
      "node_id": "MDQ6VXNlcjQwNzUzMTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4075314?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Giwayume",
      "html_url": "https://github.com/Giwayume",
      "followers_url": "https://api.github.com/users/Giwayume/followers",
      "following_url": "https://api.github.com/users/Giwayume/following{/other_user}",
      "gists_url": "https://api.github.com/users/Giwayume/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Giwayume/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Giwayume/subscriptions",
      "organizations_url": "https://api.github.com/users/Giwayume/orgs",
      "repos_url": "https://api.github.com/users/Giwayume/repos",
      "events_url": "https://api.github.com/users/Giwayume/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Giwayume/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-20T15:51:12Z",
    "updated_at": "2020-06-22T01:07:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nUI\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere are many controls that are incomplete in terms of theming. I need to be able to change the font color of an item in an ItemList when it is selected vs selected and focused.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a new theme property to ItemList called font_color_selected_focus, to complement font_color_selected.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI feel like this proposal is very straightforward without such.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt will be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nNo reason for it to be an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1094",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1094/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1094/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1094/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1094",
    "id": 642386713,
    "node_id": "MDU6SXNzdWU2NDIzODY3MTM=",
    "number": 1094,
    "title": "Searching and managing large tilesets is difficult, possible solution",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-20T14:28:52Z",
    "updated_at": "2020-09-12T20:31:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nplatform shooter\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ntilemap editor makes finding items long-winded and difficult, especially when large tilesheets are used. Specifically, knowing which tiles have collision or other polygons and finding tiles using the Pick Tile option seems to have a bug. Detailed next.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. In the picture below there are lots of tiles, but only some have collision (or possibly occlusion and navigation) polygons. There is no way to know which of the tiles have them currently, only the currently selected tile (as shown).\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/85203906-a5bda180-b308-11ea-95f3-d3b7e40cd9ef.png)\r\n\r\n2. Related to 1, for every node where you can add a collision polygon you can toggle it on and off so it is visible in the main window. Because a tileset is just a resource all you can do with a tilemap is make the entire map visible or not. It would be handy to be able to view all the collision and other polygons within the IDE like all other nodes. This is possible at runtime by simply enabling the debug option, but no such option is available within the IDE.\r\n\r\n3. I would consider this more a bug than a feature request. When you use the Pick Tile option it does not scroll to make the selection visible. When you have a lot of tiles, it's time consuming to scroll up and down to figure out where the tile is. The image below shows the picked tile, but I had to scroll for quite a few seconds to find it.\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/85203950-f9c88600-b308-11ea-8433-23f93f74409e.png)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. Have a checkbox 'show all' on the tileset toolbar so that when you select 'collision', 'occlusion', 'navigation', if the checkbox it ticked, all the polygons are shown for all tiles. Something like this, or completely different :)\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/85204192-a5bea100-b30a-11ea-9697-c24dbd58a987.png)\r\n\r\n2. Have an option somewhere in the tilemap IDE, e.g. next to 'pick tile' to allow showing/hiding of polygons for collision, navigation, occlusion.\r\n\r\n3. When Pick Tile is used, simply ensure the tile is visible on screen.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is a feature that should be present to make tile maps more usable.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1092",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1092/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1092/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1092/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1092",
    "id": 642351851,
    "node_id": "MDU6SXNzdWU2NDIzNTE4NTE=",
    "number": 1092,
    "title": "Make the `or` operator between yields do something",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-20T10:30:45Z",
    "updated_at": "2020-11-02T13:36:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't pause a function with multiple yields at the same time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI want to pause a function in one line until signal1 or signal2 is emitted.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`yield(get_tree().create_timer(2), \"timeout\") or yield($Button, \"pressed\")` You can already write this without having an error but there's a warning: _Standalone expression (the line has no effect)._\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it's very useful.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1092/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1091",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1091/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1091/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1091/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1091",
    "id": 642339506,
    "node_id": "MDU6SXNzdWU2NDIzMzk1MDY=",
    "number": 1091,
    "title": "Add option to highlight current hovered line",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-20T08:58:12Z",
    "updated_at": "2020-06-20T13:24:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n3.2.1.stable.official\r\n**Describe the problem or limitation you are having in your project:**\r\nI wanted to click next to the line number to set a breakpoint and I wasn't sure in which line I had to place it because the lines look similar to each other.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI noticed for this it would be useful if you can enable that the current hovered line is highlighted. If you enabled Highlight Current Line in Editor --> Editor Settings --> General --> Text Editor --> Highlighting , it should maybe highlight the hovered line in a different color, or maybe just weaker.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Godot current hovered line highlighted](https://user-images.githubusercontent.com/60623532/85197956-e4416500-b2e4-11ea-9f29-718cbe42c598.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it's not very complicated to implement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1091/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1090",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1090/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1090/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1090/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1090",
    "id": 642301332,
    "node_id": "MDU6SXNzdWU2NDIzMDEzMzI=",
    "number": 1090,
    "title": "Reassign node track on Animation Player",
    "user": {
      "login": "LoneDespair",
      "id": 35421467,
      "node_id": "MDQ6VXNlcjM1NDIxNDY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35421467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LoneDespair",
      "html_url": "https://github.com/LoneDespair",
      "followers_url": "https://api.github.com/users/LoneDespair/followers",
      "following_url": "https://api.github.com/users/LoneDespair/following{/other_user}",
      "gists_url": "https://api.github.com/users/LoneDespair/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LoneDespair/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LoneDespair/subscriptions",
      "organizations_url": "https://api.github.com/users/LoneDespair/orgs",
      "repos_url": "https://api.github.com/users/LoneDespair/repos",
      "events_url": "https://api.github.com/users/LoneDespair/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LoneDespair/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-20T03:50:34Z",
    "updated_at": "2020-06-20T13:24:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA simple rpg game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhenever restructuring the scene tree and other changes, it's pretty easy for the animation player to loose track of its target node, and almost super inconvenient to reuse for other nodes\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt will save a lot of work from not loosing the animation frames due to big changes and even be able to reuse it on other projects\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Screenshot (64)](https://user-images.githubusercontent.com/35421467/85190520-c1ff1580-b2eb-11ea-8f23-be15d570d58b.png)\r\nMaybe being able to click on the little node icon to reassign?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's quite essential when dealing with lots of animations\r\n\r\nThank you :D\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1089",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1089/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1089/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1089/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1089",
    "id": 642055029,
    "node_id": "MDU6SXNzdWU2NDIwNTUwMjk=",
    "number": 1089,
    "title": "Add color status and gutters for VCS",
    "user": {
      "login": "wyrmling",
      "id": 13387159,
      "node_id": "MDQ6VXNlcjEzMzg3MTU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13387159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyrmling",
      "html_url": "https://github.com/wyrmling",
      "followers_url": "https://api.github.com/users/wyrmling/followers",
      "following_url": "https://api.github.com/users/wyrmling/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyrmling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyrmling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyrmling/subscriptions",
      "organizations_url": "https://api.github.com/users/wyrmling/orgs",
      "repos_url": "https://api.github.com/users/wyrmling/repos",
      "events_url": "https://api.github.com/users/wyrmling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyrmling/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-19T15:33:44Z",
    "updated_at": "2020-06-22T18:01:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "_Continuation of godotengine/godot#25442._\r\n\r\n**Describe the project you are working on:**\r\nSeveral game projects with decent amount of scenes/scripts. Some of them are being developed in team. All of them stored in Git-based repositories.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy use-case - an incremental approach, and relies on finishing small steps and commiting them to Git repo, thus \"cleaning\" the overall project view. During development I'm frequently using Git status gutters in PhpStorm to track new / refactored / removed code. Also helps a lot to not get lost in your code during refactoring.\r\nIn opposite to this - Godot IDE doesn't allow me to get this info. Sometimes I prefer to switch to VS Code just for coding, which has Godot plugin. But still for me it's a temporary solution, as I have to constantly switch back to IDE.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs it was mentioned in issue godotengine/godot#25442 it should be an integrated solution, to really solve the above mentioned user experience problems.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs for me - best examples would be VSC & JetBrains IDE functionality:\r\n#### VS Code\r\n![defold_vcs_gutter_vscode](https://user-images.githubusercontent.com/13387159/41196122-31409042-6c42-11e8-8cf9-ab2b98f9d286.png)\r\n\r\n#### IntelliJ IDEA\r\n![defold_vcs_gutter_idea](https://user-images.githubusercontent.com/13387159/41196120-3117eb24-6c42-11e8-9875-5a3a068e7599.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think there are a \"few line solution\" for this. Also - suggested enhancement will be used on constant basis.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, I'm aware of https://github.com/godotengine/godot-git-plugin/\r\nThe main reason why it has to be added to core - it's meant to be mainly informational feature (plus \"revert block\" function).\r\nDespite functionality that it may suggest - I personally don't need it, as prefer to interact with Git via CLI or, in complicated cases, something UI-based, like SmartGit.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1089/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1087",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1087/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1087/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1087/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1087",
    "id": 641699212,
    "node_id": "MDU6SXNzdWU2NDE2OTkyMTI=",
    "number": 1087,
    "title": "Easy way to choose whether to start in window or full-screen dynamically.",
    "user": {
      "login": "HubKing",
      "id": 10900489,
      "node_id": "MDQ6VXNlcjEwOTAwNDg5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10900489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HubKing",
      "html_url": "https://github.com/HubKing",
      "followers_url": "https://api.github.com/users/HubKing/followers",
      "following_url": "https://api.github.com/users/HubKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/HubKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HubKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HubKing/subscriptions",
      "organizations_url": "https://api.github.com/users/HubKing/orgs",
      "repos_url": "https://api.github.com/users/HubKing/repos",
      "events_url": "https://api.github.com/users/HubKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HubKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-19T04:40:49Z",
    "updated_at": "2020-06-19T07:41:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA beginner example.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nStarting the game in a small window is usually better to quickly test something, but sometimes one would need to see it in the full screen (to see fine details, or in some cases, there are behavioural differences in window-mode and full-screen mode. Changing it in the settings (Run -> Window Placement) each time is not that convenient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAny way to choose window/full-screen dynamically at the moment when the user invokes Play in the Editor, like:\r\n*Method 1: An action for \"Play in full-screen\" on the Shortcuts dialogue. If that exists, one could map a key like Ctrl+F5 to it, and start the game in full-screen with that shortcut.\r\n*Method 2: Clicking the Play button starts it in window, a modifier + click (like ctrl+click) starts it in full-screen.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf the person want to start it in a window, he will click the play button or press F5. If he wants to start it in full-screen, he will ctrl+click the play button or press Ctrl+F5. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would use this often. It should possible to programme a feature to toggle the full-screen mode in the game itself (seems to be no such shortcut exists by default, because pressing Alt+Enter did not do it), but then one would have to do that every time when they create a new project, and one would have to toggle the mode after the game has started.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is the editor's behaviour, so it probably is not possible with an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1087/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1086",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1086/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1086/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1086/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1086",
    "id": 641628470,
    "node_id": "MDU6SXNzdWU2NDE2Mjg0NzA=",
    "number": 1086,
    "title": "Provide extra ES module export from an HTML5 export",
    "user": {
      "login": "davehayes",
      "id": 6225697,
      "node_id": "MDQ6VXNlcjYyMjU2OTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6225697?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davehayes",
      "html_url": "https://github.com/davehayes",
      "followers_url": "https://api.github.com/users/davehayes/followers",
      "following_url": "https://api.github.com/users/davehayes/following{/other_user}",
      "gists_url": "https://api.github.com/users/davehayes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davehayes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davehayes/subscriptions",
      "organizations_url": "https://api.github.com/users/davehayes/orgs",
      "repos_url": "https://api.github.com/users/davehayes/repos",
      "events_url": "https://api.github.com/users/davehayes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davehayes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-19T00:41:35Z",
    "updated_at": "2020-09-18T22:06:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI am writing an online web game framework that is backend agnostic and maybe frontend agnostic. Godot has been selected as the frontend engine of choice.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have some fairly complex javascript that describes the behavior of my site. I use tools like webpack to produce a single includable JS file from several modules. \r\n\r\nThe problem is that godot exports are not currently directly compatible with my tools. Assuming I am developing on `YourApp`, the current html5 export methodology seems to be to insert this into your html page:\r\n\r\n```html\r\n<script ... src=\"YourApp.js\"></script>\r\n```\r\nThis JS file is partially minified, but contains this technique.\r\n```javascript\r\n(function() {\r\n        var engine = Engine;\r\n...\r\n})();\r\n```\r\n\r\nNaturally this doesn't provide any way to include this into a webpack based tool environment. My current workaround is to insert this:\r\n```javascript\r\n(function() {\r\n        var engine = Engine;\r\n...\r\n        window.MyEngine = Engine;\r\n})();\r\n```\r\nwhich is unsafe because it exposes the engine to anything that knows where that global is. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI am proposing the output of a custom `es6` module in addition to the `js` code you output. This can be gated behind an option if you prefer. The es6 module should have a well named module name such that this code might work:\r\n\r\n```es6\r\nimport YourApp;\r\nYourApp.Engine.init(MAIN_PACK).then(() => { ... });\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe same template code you use for js can just be applied to an es6 template.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI doubt this will not be used often, relative to the space of all developers using the HTML5 export. It can be worked around in a less than safe way as described above.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI'm not sure this is an asset. That would be the only reason. However, if in core, this will address or at least provide support to these issues:\r\n\r\n#952 \r\n#286 \r\n#331\r\n\r\nThanks for reading. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1086/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1084",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1084/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1084/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1084/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1084",
    "id": 641603336,
    "node_id": "MDU6SXNzdWU2NDE2MDMzMzY=",
    "number": 1084,
    "title": "Add a setting to change the script editor autocomplete shortcut (tab, enter, tab or enter)",
    "user": {
      "login": "StormFalcon32",
      "id": 18366173,
      "node_id": "MDQ6VXNlcjE4MzY2MTcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/18366173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/StormFalcon32",
      "html_url": "https://github.com/StormFalcon32",
      "followers_url": "https://api.github.com/users/StormFalcon32/followers",
      "following_url": "https://api.github.com/users/StormFalcon32/following{/other_user}",
      "gists_url": "https://api.github.com/users/StormFalcon32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/StormFalcon32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StormFalcon32/subscriptions",
      "organizations_url": "https://api.github.com/users/StormFalcon32/orgs",
      "repos_url": "https://api.github.com/users/StormFalcon32/repos",
      "events_url": "https://api.github.com/users/StormFalcon32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/StormFalcon32/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-18T23:18:54Z",
    "updated_at": "2020-06-20T13:42:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThis applies to all projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nOften times I will try to make a newline, and accidentally accept an autocomplete suggestion\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAllowing the user to change the shortcut to accept autcomplete can let them avoid this issue by setting it to tab only, or whatever other shortcut they are comfortable with, instead of enter or tab.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdding an option for \"autocomplete accept\" to the shortcuts menu\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, it's built into the editor\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a core part of the editor",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1084/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1082",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1082/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1082/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1082/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1082",
    "id": 641485732,
    "node_id": "MDU6SXNzdWU2NDE0ODU3MzI=",
    "number": 1082,
    "title": "Remove the section Autoload under Project --> Project Settings --> Filesystem because this has its own tab.",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-18T19:10:03Z",
    "updated_at": "2020-06-19T08:31:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's useless that it exists twice.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe project settings would be a tiny little bit clearer.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Godot Project Settings without Autoload in Filesystem](https://user-images.githubusercontent.com/60623532/85061960-f9fd4000-b1a7-11ea-9dec-a604771c7f7e.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it's quickly done.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1082/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1080",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1080/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1080/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1080/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1080",
    "id": 641390406,
    "node_id": "MDU6SXNzdWU2NDEzOTA0MDY=",
    "number": 1080,
    "title": "Unfold inspector sections when dragging something over it",
    "user": {
      "login": "hinlopen",
      "id": 25907608,
      "node_id": "MDQ6VXNlcjI1OTA3NjA4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25907608?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hinlopen",
      "html_url": "https://github.com/hinlopen",
      "followers_url": "https://api.github.com/users/hinlopen/followers",
      "following_url": "https://api.github.com/users/hinlopen/following{/other_user}",
      "gists_url": "https://api.github.com/users/hinlopen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hinlopen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hinlopen/subscriptions",
      "organizations_url": "https://api.github.com/users/hinlopen/orgs",
      "repos_url": "https://api.github.com/users/hinlopen/repos",
      "events_url": "https://api.github.com/users/hinlopen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hinlopen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-18T16:54:13Z",
    "updated_at": "2020-06-19T07:50:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot related to any project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen assigning a texture to e.g. a button, the textures are folded behind a `Textures` section. If you are dragging a texture before unfolding it, you must drop it, unfold and then do it again. This is also true for dragging nodes or other resources.\r\n![unfold](https://user-images.githubusercontent.com/25907608/85048205-48541400-b193-11ea-901c-5c06ba1e7d6b.gif)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen dragging a file or node over an inspector section, it opens up and allows the the underlying fields to be assigned.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have made an early version showing how it would work:\r\n![unfold2](https://user-images.githubusercontent.com/25907608/85048207-4a1dd780-b193-11ea-82b6-8fb21f47c52f.gif)\r\nIt could be expanded by not instantly opening up a section, but waiting for a certain duration. Other suggestions are welcome.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure if this could be easily scripted, but I imagine this feature will be used quite often regardless.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBasic usability feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1080/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1079",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1079/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1079/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1079/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1079",
    "id": 640600617,
    "node_id": "MDU6SXNzdWU2NDA2MDA2MTc=",
    "number": 1079,
    "title": "Support a wider character set in the default project font",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-17T16:58:58Z",
    "updated_at": "2020-06-17T17:17:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nClicker Game\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to write € in a Label if you want to use € instead of $. Russian, Chinese, Japanese letters, and I'm sure many more, also don't work.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou could write whatever text you want.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Eurosupportgodot](https://user-images.githubusercontent.com/60623532/84926924-60149500-b0cc-11ea-8612-13bfc4d1ca8c.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it's not possible with add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1079/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1078",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1078/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1078/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1078/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1078",
    "id": 640582318,
    "node_id": "MDU6SXNzdWU2NDA1ODIzMTg=",
    "number": 1078,
    "title": "Make canvas transform accesible in canvas_item shaders",
    "user": {
      "login": "Nolkaloid",
      "id": 30960698,
      "node_id": "MDQ6VXNlcjMwOTYwNjk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30960698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nolkaloid",
      "html_url": "https://github.com/Nolkaloid",
      "followers_url": "https://api.github.com/users/Nolkaloid/followers",
      "following_url": "https://api.github.com/users/Nolkaloid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nolkaloid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nolkaloid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nolkaloid/subscriptions",
      "organizations_url": "https://api.github.com/users/Nolkaloid/orgs",
      "repos_url": "https://api.github.com/users/Nolkaloid/repos",
      "events_url": "https://api.github.com/users/Nolkaloid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nolkaloid/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-17T16:33:17Z",
    "updated_at": "2020-06-17T16:47:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProject with screen reading shaders.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need a way to get the current zoom of the canvas, in the shader.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHaving a CANVAS_TRANSFORM or CANVAS_ZOOM built-in would be very useful for screen reading shaders.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`SCREEN_UV.y + UV.y*size*CANVAS_ZOOM`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause as far as I know you cannot modify shader built-ins.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1078/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1075",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1075/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1075/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1075/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1075",
    "id": 640110525,
    "node_id": "MDU6SXNzdWU2NDAxMTA1MjU=",
    "number": 1075,
    "title": "Close editor WindowDialogs only when [X]/Close/Save are clicked",
    "user": {
      "login": "HubKing",
      "id": 10900489,
      "node_id": "MDQ6VXNlcjEwOTAwNDg5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10900489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HubKing",
      "html_url": "https://github.com/HubKing",
      "followers_url": "https://api.github.com/users/HubKing/followers",
      "following_url": "https://api.github.com/users/HubKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/HubKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HubKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HubKing/subscriptions",
      "organizations_url": "https://api.github.com/users/HubKing/orgs",
      "repos_url": "https://api.github.com/users/HubKing/repos",
      "events_url": "https://api.github.com/users/HubKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HubKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-17T03:25:16Z",
    "updated_at": "2020-06-30T18:16:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nHello World.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot about the project, but about the editor UI.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is my first time trying the UI, and I have to say, I vastly prefer the accessibility of the editor than that of Unreal (ugly, blurry text) or Unity (cannot change the background colour unless you pay $40 a month). However, when I tried to set a custom theme, the behaviour was frustrating. The \"Editor Settings\" suddenly disappeared, and I thought it was force-closed by a bug. I then found out that it is closed when I accidentally click outside of the window. On mobile maybe, but that is not how applications work on Windows.\r\n\r\nAlso, on the colour picker dialogue that pops up when I try to edit the \"Base Color\", there does not seem to change all three (R,G,B) at once (i.e., adjusting the grey level), so I was trying to type R,G,B values manually. But suddenly the dialogue closes itself whilst I am trying to type a second or third value. It is reproducible every time. See the attached recording below.\r\n\r\nOverall, the dialogue close behaviour is frustrating because it does not work as that of other applications.\r\n\r\n![rtgIdFuTQ6](https://user-images.githubusercontent.com/10900489/84851467-53c11580-b095-11ea-8cfe-56359a90cace.gif)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nClose the dialogue window only when [X]/Close/Save are clicked as other applications do.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nProbably not.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan an add-on change the editor GUI behaviour?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1075/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1074",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1074/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1074/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1074/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1074",
    "id": 639772348,
    "node_id": "MDU6SXNzdWU2Mzk3NzIzNDg=",
    "number": 1074,
    "title": "Add a console/REPL/expression evaluator for debugging GDScript",
    "user": {
      "login": "severin-lemaignan",
      "id": 385379,
      "node_id": "MDQ6VXNlcjM4NTM3OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/385379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/severin-lemaignan",
      "html_url": "https://github.com/severin-lemaignan",
      "followers_url": "https://api.github.com/users/severin-lemaignan/followers",
      "following_url": "https://api.github.com/users/severin-lemaignan/following{/other_user}",
      "gists_url": "https://api.github.com/users/severin-lemaignan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/severin-lemaignan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/severin-lemaignan/subscriptions",
      "organizations_url": "https://api.github.com/users/severin-lemaignan/orgs",
      "repos_url": "https://api.github.com/users/severin-lemaignan/repos",
      "events_url": "https://api.github.com/users/severin-lemaignan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/severin-lemaignan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-16T15:37:23Z",
    "updated_at": "2020-06-17T12:41:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nSeveral game dev (!)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n[issue imported from https://github.com/godotengine/godot/issues/7057]\r\n\r\nDebugging gdscript is difficult without being able to quickly inspect and/or manipulate variables. Many platforms/language have a tool to open an interactive console at arbitrary points, and inspect & execute code (from `pdb.set_trace` in python to the javascript console found in Firefox/Chrome dev tools).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWhen debugging a game, the debugger panel should feature an additional sub panel or tab with an interactive console where gdscript command could be entered and executed.\r\nThe scope should be matching the local scope where the code has been interrupted (via a breakpoint or an exception).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis would form a key part of the debugging toolset.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1074/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1072",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1072/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1072/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1072/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1072",
    "id": 639654153,
    "node_id": "MDU6SXNzdWU2Mzk2NTQxNTM=",
    "number": 1072,
    "title": "Facilitate testing Release builds while developing",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-16T13:13:03Z",
    "updated_at": "2020-06-16T13:25:56Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe Godot Engine ;)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen developing a game with the Godot editor, the editor itself is the equivalent of a \"Debug\" build (built with `target=release_debug`), which has a limited level of optimization and contains many checks that help catch bugs but impact performance.\r\n\r\nWhen you run a project from the editor (with \"Play (F5)\" or any of the other play buttons in this toolbar: ![Screenshot_20200616_145335](https://user-images.githubusercontent.com/4701338/84776871-29ae1b80-afe1-11ea-8ac0-6b11e15bcbaf.png), the editor starts a new process using its own executable to run the project, so this is equivalent to a Debug build.\r\n\r\nThat's a good default behavior, but two families of issues are not caught by this workflow:\r\n\r\n- As Debug builds have more checks, they catch errors early on and report them, and most of the time they can avoid interrupting the execution (so that you can keep catching more errors, or ignore some temporarily). On the other hand, in many situations, Release builds will simply crash, as they don't perform the sanity checks, expecting that your code was already quality-checked in Debug builds. This improves performance a lot, but many developers omit fixing some of the glaring \"ERROR\"s raised by the Debug build, and are surprised to see their Release builds crash. Being able to run a Release build from the editor would help catch this early on (as well as allow users to test their game with a more optimized and performant binary, to see if a specific scene or code might be a bottleneck in final builds).\r\n\r\n- The \"Play\" button runs the project with a Debug binary from its source code, with access to all the original resources of the project. When you export a game to a binary + PCK data package, some files will be left out as they're not considered resources, or because they have been imported already and the engine automatically remaps them from their `.import` file to the matching file in the `res://.import/` folder (typically images). This can lead to confusing situations where some code works in the editor but fails after exporting (typically trying to open a file with a low-level API like `File`, which is present in the source folder but not in the exported PCK). Being able to quick export and run a game from a temporary PCK (similar to the one-click deploy for HTML5) could be a way to address this.\r\n\r\nSee #1071 for more concept, and the earlier proposal for this at godotengine/godot#5257.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAs mentioned above, I'd suggest two features to improve the situation:\r\n\r\n- Make it possible to run the game, from source code, with a Release build. This requires having export templates installed (at least for the host platform), so that the Release template for the platform can be used to run the project.\r\n\r\n- Add a One-Click Deploy option for desktop platforms which exports the game using one of the export presets defined for the current host platform. This would support both Release and Debug exports, and would do a typical export with binary + PCK in a temporary folder, run the game from there, and delete the temporary export once you close the game. (To reduce copying, it could do a PCK export only and use the export templates directly to run the PCK with the `--main-pack` option. But if the export preset uses an option such as \"Embed PCK\", then a full binary export would be performed.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI suggest adding a \"more\" drop down menu next to each \"Play\" button, which lets you select one of the above features. Something like this (quick and dirty mockup, this needs proper UI work to look good):\r\n\r\n![Screenshot_20200616_151028](https://user-images.githubusercontent.com/4701338/84778609-84e10d80-afe3-11ea-9035-61564e96c3ae.png)\r\n(I used \"Play (F5)\" as text but this is meant to be the same icons as in the above screenshot, it's just a quick mockup to show the idea.)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt won't be used *very* often, which is why it should be a drop-down \"more\" menu and not change the default behavior of \"Play (F5)\". But it needs to be part of the editor UI.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt *could* be made via an EditorPlugin, but I believe this should be a core feature of the engine as it will benefit most users.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1072/reactions",
      "total_count": 15,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1071",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1071/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1071/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1071/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1071",
    "id": 639638387,
    "node_id": "MDU6SXNzdWU2Mzk2MzgzODc=",
    "number": 1071,
    "title": "Improve the Release/Debug export workflow",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-16T12:49:55Z",
    "updated_at": "2020-12-20T22:26:24Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe Godot Engine :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current export workflow is the following (as of 3.2.2 RC 1):\r\n\r\n![Screenshot_20200616_142129](https://user-images.githubusercontent.com/4701338/84773425-af7b9800-afdc-11ea-828d-72acb44ce560.png)\r\n*Export dialog, where you configure presets (with no release/debug setting), and press the \"Export Project\" to export.*\r\n\r\n![Screenshot_20200616_142257](https://user-images.githubusercontent.com/4701338/84773585-e2259080-afdc-11ea-936b-3428e3eef8cf.png)\r\n*File dialog to choose the export location. It's the one where you specify whether you want a Debug or Release build, here highlighted by the focus but normally it's not, and is hard to notice.*\r\n\r\nThe value is not saved, so by default exports are always in Debug mode, and you have to tick this off to get a Release export (non-obvious).\r\n\r\nMany users miss the checkbox, or are not familiar with what a \"non-debug\" build would be. So they might end up shipping their games as debug builds, which typically means worse performance due to a lot more checks being performed on the code.\r\n\r\nMoreover, Release builds are optimized to be faster, and since they do less checks, situations where a Debug build would have raised an error and proceeded gracefully could become crash scenarios in Release builds. So it's dangerous for developers to start shipping Release builds too late without proper QA (think e.g. if they got Debug builds released and tested first, then noticed the issue, and decide to just upload a Release build as a bugfix without QA - unless they were very careful around fixing all error messages in the editor and debug runs, they're bound to get some bad surprises).\r\n\r\nIMO there are two things to solve:\r\n- The export dialog's UX around Debug/Release builds is bad. UI changes are necessary to make things clearer to the user. This is what this proposal is about.\r\n- The difference between Release and Debug builds needs to be made clear to all Godot users, both in documentation and through editor features. Another proposal will handle that part (#1072).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTo improve the usability of the Release/Debug export workflow, I suggest:\r\n\r\n- Replace the \"Export Project\" button (see first screenshot above) by a drop-down menu with:\r\n  - Export Release Build\r\n  - Export Debug Build\r\n- The same treatment should be made for the \"Export PCK\" (it's uncommon, but PCK files *could* differ between Release and Debug exports) and \"Export All\" buttons - or they could all be merged in a big \"Export Project...\" drop-down menu covering all export options. Quick mockup (using `MenuButton`, no theming):\r\n![Screenshot_20200616_144805](https://user-images.githubusercontent.com/4701338/84776275-66c5de00-afe0-11ea-935c-34372c71d082.png)\r\n- The \"Export With Debug\" checkbox will be removed from the file dialog, as the choice to make it Release/Debug will be made on the previous dialog.\r\n\r\nAnother option is to keep a default \"Export Project\" button that will use the *last* used mode, which should thus be saved in the export preset as suggested in godotengine/godot#39208.\r\nIn that case, the widget could look like this:\r\n![Screenshot_20200616_144831](https://user-images.githubusercontent.com/4701338/84776338-79d8ae00-afe0-11ea-9475-c1f208be8731.png)\r\n(Quick and dirty, the above is just a Button + a MenuButton, but I think we might already have this kind of combined button with a default action and a drop-down list with more options - if not, it might be worth implementing for this and things like device selection for one-click deploy.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee above, but this mostly requires changing the `Button`s to a big `MenuButton` and make sure that it's themed properly to look good in the editor. The checkbox in the file dialog should be removed, and thus some of the code might have to move around a bit.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis will be used all the time, and is a change to the editor UI itself.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a built-in editor dialog.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1071/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1070",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1070/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1070/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1070/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1070",
    "id": 639534632,
    "node_id": "MDU6SXNzdWU2Mzk1MzQ2MzI=",
    "number": 1070,
    "title": "Support WebM videos with alpha channel/transparency",
    "user": {
      "login": "htangidnerd",
      "id": 50318886,
      "node_id": "MDQ6VXNlcjUwMzE4ODg2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/50318886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/htangidnerd",
      "html_url": "https://github.com/htangidnerd",
      "followers_url": "https://api.github.com/users/htangidnerd/followers",
      "following_url": "https://api.github.com/users/htangidnerd/following{/other_user}",
      "gists_url": "https://api.github.com/users/htangidnerd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/htangidnerd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/htangidnerd/subscriptions",
      "organizations_url": "https://api.github.com/users/htangidnerd/orgs",
      "repos_url": "https://api.github.com/users/htangidnerd/repos",
      "events_url": "https://api.github.com/users/htangidnerd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/htangidnerd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-16T09:58:36Z",
    "updated_at": "2020-11-22T16:41:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nWe are working on 2d displays for casino floor games.  It is designed to show current game state, event history and result trends.  \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe want to use video for a full screen overlay to play a pre-rendered animation but the current godot video player does not support alpha channel.  Currently we are using AnimatedSprites for this.   However as we add more animations, memory is becoming an issue. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe video player should detect and process alpha channel data encoded into the video.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis feature should be seamless to the user as it would only function if there is alpha channel in the video data.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nShould not impact cases of video playback without alpha channel.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis makes more sense as a built in feature for the core video player.\r\n\r\nrelated link. [18337](https://github.com/godotengine/godot/issues/18337)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1070/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1069",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1069/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1069/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1069/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1069",
    "id": 639449948,
    "node_id": "MDU6SXNzdWU2Mzk0NDk5NDg=",
    "number": 1069,
    "title": "Expose support for packing/unpacking ZIP archives to the scripting API",
    "user": {
      "login": "GlaDOSik",
      "id": 3484686,
      "node_id": "MDQ6VXNlcjM0ODQ2ODY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3484686?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GlaDOSik",
      "html_url": "https://github.com/GlaDOSik",
      "followers_url": "https://api.github.com/users/GlaDOSik/followers",
      "following_url": "https://api.github.com/users/GlaDOSik/following{/other_user}",
      "gists_url": "https://api.github.com/users/GlaDOSik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GlaDOSik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GlaDOSik/subscriptions",
      "organizations_url": "https://api.github.com/users/GlaDOSik/orgs",
      "repos_url": "https://api.github.com/users/GlaDOSik/repos",
      "events_url": "https://api.github.com/users/GlaDOSik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GlaDOSik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-16T07:50:02Z",
    "updated_at": "2020-06-17T09:05:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNode based image and material editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to be able to pack and unpack user configuration to a single zip file. I will for sure find another usage for it later.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI will be able to do what I cannot do now.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nInspiration can be taken from gdunzip (link below). Zip functionality can be a method in File class (which could zip files and directories).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be done with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe plugin in GDScript was made but it's only unzip, it doesn't do CRC checks and it's not very fast. The engine already uses some C library (still minizip?) so it shouldn't be hard to expose it to GDScript to get native performance.\r\n\r\nRelated links [3701](https://github.com/godotengine/godot/issues/3701), [22440](https://github.com/godotengine/godot/issues/22440) and [gdunzip](https://github.com/jellehermsen/gdunzip).\r\n\r\n*Bugsquad edit (keywords for easier searching): extract, create*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1069/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1068",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1068/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1068/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1068/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1068",
    "id": 639189048,
    "node_id": "MDU6SXNzdWU2MzkxODkwNDg=",
    "number": 1068,
    "title": "Add a shortcut to toggle grid snapping in the TileSet editor ",
    "user": {
      "login": "hero2002",
      "id": 20283475,
      "node_id": "MDQ6VXNlcjIwMjgzNDc1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20283475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hero2002",
      "html_url": "https://github.com/hero2002",
      "followers_url": "https://api.github.com/users/hero2002/followers",
      "following_url": "https://api.github.com/users/hero2002/following{/other_user}",
      "gists_url": "https://api.github.com/users/hero2002/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hero2002/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hero2002/subscriptions",
      "organizations_url": "https://api.github.com/users/hero2002/orgs",
      "repos_url": "https://api.github.com/users/hero2002/repos",
      "events_url": "https://api.github.com/users/hero2002/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hero2002/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-15T21:40:09Z",
    "updated_at": "2020-06-16T22:35:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2d top down rpg game\r\n**Describe the problem or limitation you are having in your project:**\r\nwhen making new tileset ever time i do the collision layer in tileset editor i have to disable grid snapping  \r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nadding shortcut for disable grid snapping in tileset editor\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\ni dont know\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nyes i think it will beacuse every time i have to make new tileset i have to disable the grid snapping and re enable it when i done with collision layer \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\ni dont know if it can implemented in add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1066",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1066/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1066/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1066/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1066",
    "id": 638908352,
    "node_id": "MDU6SXNzdWU2Mzg5MDgzNTI=",
    "number": 1066,
    "title": "Add a \"Mute Audio\" toggle to the editor",
    "user": {
      "login": "hmans",
      "id": 1061,
      "node_id": "MDQ6VXNlcjEwNjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hmans",
      "html_url": "https://github.com/hmans",
      "followers_url": "https://api.github.com/users/hmans/followers",
      "following_url": "https://api.github.com/users/hmans/following{/other_user}",
      "gists_url": "https://api.github.com/users/hmans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hmans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hmans/subscriptions",
      "organizations_url": "https://api.github.com/users/hmans/orgs",
      "repos_url": "https://api.github.com/users/hmans/repos",
      "events_url": "https://api.github.com/users/hmans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hmans/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-06-15T14:40:30Z",
    "updated_at": "2020-07-13T15:46:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Noisy space shootybang](https://twitter.com/hmans/status/1271542655307132929). ;-)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile developing the game, it would sometimes be very nice to be able to simply mute _all_ audio. At the moment, unless I've missed something obvious, this needs to be done within the project's code. For example, I have the following global AutoLoad in my game:\r\n\r\n```gdscript\r\nexport var mute_audio = true\r\n\r\nfunc _init():\r\n\tif not OS.has_feature(\"release\"):\r\n\t\tif mute_audio:\r\n\t\t\tAudioServer.set_bus_mute(0, true)\r\n```\r\n\r\nThis is an _okay_ solution, but apart from the added overhead of moving an editor concern into the project space, it also means I'm not getting sound in Debug exports, or I need to remember to manually change the value of `mute_audio`, then think about how and if to version control this, and so on.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe editor itself should have some toggle in its UI that allows me to mute/unmute _all_ audio. This could be housed in the \"Debug\" menu, but maybe there are better places.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAssuming there is a \"Mute Audio\" menu entry in the \"Debug\" menu:\r\n\r\n1. User starts his project/scene\r\n2. Project/scene happily outputs audio\r\n3. User stops project\r\n4. User enables \"Mute Audio\" from the \"Debug\" menu\r\n5. User once again stars his project/scene\r\n6. Project/scene is silent\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSee above -- sort of kind of, but with caveats.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf it's possible to implement this as an addon, I'd be happy to implement it! But I'm not sure if it is.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1066/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1065",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1065/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1065/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1065/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1065",
    "id": 638581178,
    "node_id": "MDU6SXNzdWU2Mzg1ODExNzg=",
    "number": 1065,
    "title": "Make assign expressions return a value",
    "user": {
      "login": "alt3r3dgd",
      "id": 26593533,
      "node_id": "MDQ6VXNlcjI2NTkzNTMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26593533?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alt3r3dgd",
      "html_url": "https://github.com/alt3r3dgd",
      "followers_url": "https://api.github.com/users/alt3r3dgd/followers",
      "following_url": "https://api.github.com/users/alt3r3dgd/following{/other_user}",
      "gists_url": "https://api.github.com/users/alt3r3dgd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alt3r3dgd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alt3r3dgd/subscriptions",
      "organizations_url": "https://api.github.com/users/alt3r3dgd/orgs",
      "repos_url": "https://api.github.com/users/alt3r3dgd/repos",
      "events_url": "https://api.github.com/users/alt3r3dgd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alt3r3dgd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-15T06:25:58Z",
    "updated_at": "2020-06-21T17:25:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** I am working on a game _about shooting bubbles_ and each bubble has a certain random chance of getting a bomb or a lock or something else.\r\n\r\n**Describe the problem or limitation you are having in your project:** The code for setting the bubble type looks not clean:\r\n```\r\nvar type_chance := rand_range(0, 10)\r\nif type_chance <= bomb_chance: bubble.type = 1\r\nelif type_chance <= bomb_chance + lock_chance: bubble.type = 2\r\nelif type_chance <= bomb_chance + lock_chance + coin_chance: bubble.type = 3\r\nelif type_chance <= bomb_chance + lock_chance + coin_chance + gem_chance: bubble.type = 4\r\nelif type_chance <= bomb_chance + lock_chance + coin_chance + gem_chance + blind_chance: bubble.type = 5\r\nelif type_chance <= bomb_chance + lock_chance + coin_chance + gem_chance + blind_chance + timer_chance: bubble.type = 6\r\nelse: bubble.type = 0\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** This will shorten (but probably will not make it very understandable) some chunks of code, and this feature already exists in C# and probably a lot more languages (but is not in Python)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** In my instance, I could rewrite my code something like this:\r\n```\r\nvar type_chance := rand_range(0, 10)\r\nvar type_comp := bomb_chance\r\nif type_chance <= type_comp: bubble.type = 1\r\nelif type_chance <= type_comp += lock_chance: bubble.type = 2\r\nelif type_chance <= type_comp += coin_chance: bubble.type = 3\r\nelif type_chance <= type_comp += gem_chance: bubble.type = 4\r\nelif type_chance <= type_comp += blind_chance: bubble.type = 5\r\nelif type_chance <= type_comp += timer_chance: bubble.type = 6\r\nelse: bubble.type = 0\r\n```\r\nIt will also allow to make stuff like this:\r\n```\r\nsome_var = other_var = third_var = forth_var\r\n```\r\nThis will set all the variables to `forth_var`.\r\nIf I write this code right now, I get an error \"Unexpected assign\".\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** When I posted this to Godot Q&A instead of this _on accident_, I was answered that I could make my code look like this:\r\n```\r\nvar bomb_chance  := 0.2\r\nvar lock_chance  := bomb_chance  + 0.1\r\nvar coin_chance  := lock_chance  + 0.1\r\nvar gem_chance   := coin_chance  + 0.1\r\nvar blind_chance := gem_chance   + 0.1\r\nvar timer_chance := blind_chance + 0.1\r\n\r\nvar type_chance := rand_range(0, 1)\r\n\r\nif type_chance <= bomb_chance:\r\n    bubble.type = 1\r\nelif type_chance <= lock_chance:\r\n    bubble.type = 2\r\nelif type_chance <= coin_chance:\r\n    bubble.type = 3\r\nelif type_chance <= gem_chance:\r\n    bubble.type = 4\r\nelif type_chance <= blind_chance:\r\n    bubble.type = 5\r\nelif type_chance <= timer_chance:\r\n    bubble.type = 6\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** I pretty much don't know how to extend GDScript functionality, and I am not really sure if this possibility even exists.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1065/reactions",
      "total_count": 6,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1063",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1063/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1063/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1063/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1063",
    "id": 638513069,
    "node_id": "MDU6SXNzdWU2Mzg1MTMwNjk=",
    "number": 1063,
    "title": "Collision signals for KinematicBody",
    "user": {
      "login": "DoctorWhoof",
      "id": 6250116,
      "node_id": "MDQ6VXNlcjYyNTAxMTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6250116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoctorWhoof",
      "html_url": "https://github.com/DoctorWhoof",
      "followers_url": "https://api.github.com/users/DoctorWhoof/followers",
      "following_url": "https://api.github.com/users/DoctorWhoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoctorWhoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoctorWhoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoctorWhoof/subscriptions",
      "organizations_url": "https://api.github.com/users/DoctorWhoof/orgs",
      "repos_url": "https://api.github.com/users/DoctorWhoof/repos",
      "events_url": "https://api.github.com/users/DoctorWhoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoctorWhoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-15T03:28:26Z",
    "updated_at": "2020-06-19T07:46:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 3D top down Action-RPG. There are lots of enemies on screen around the player, all of them driven by a KinematicBody. The collision information from those bodies is used to inflict damage from contact (collision with player and with other characters) and determine the type of terrain the characters are in (collision with terrain). Graphics are minimalist, so GPU is not a bottleneck.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe amount of processing done in GDScript per frame, per character, is causing CPU use to be high on the target hardware (5 year old laptop or low end PC) when there are large groups of characters. While some of that performance bottleneck is coming from the collision detection itself, the amount of GDScript code processed per frame could be reduced if the engine provided a few extra KinematicBody signals.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose minimizing the amount of processing that needs to be done per character per frame by implementing collision signals in KinematicBody at the engine level. Currently I need to keep arrays tracking the current collisions and the collisions the occurred on the last frame, and then compare the two on every frame to figure out if a collision is \"new\", to only then emit a \"collision_started\" signal. If that processing happened on the engine side it would be much more efficient, and my GDSCript code would only \"kick in\" when a new collision actually occurred.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like Area has \"area_entered\" style signals, a KinematicBody should have these signals:\r\ncollision_started(body)\r\ncollision_stayed(body)\r\ncollision_exited(body)\r\nA KinematicBody could connect those signals to itself on _ready, and execute just a minimal amount of  code that actually handles the gameplay logic. Not only it would reduce per-frame script processing, it would make the KinematicBody signals more consistent with the Area signals, and more consistent with Godot's signal-oriented design.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI currently have those signals generated via GDScript. It works, but it's CPU hungry with a lot of characters.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCollision signals seem to fit really well into Godot's Signal oriented philosophy. It would be consistent with how Area signals work. They are also very common in other engines (i.e. Unity has virtual methods like \"OnCollisionEntered\", etc) and having a direct equivalent in Godot can lower the entry barrier.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1063/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1062",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1062/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1062/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1062/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1062",
    "id": 638490935,
    "node_id": "MDU6SXNzdWU2Mzg0OTA5MzU=",
    "number": 1062,
    "title": "Add Scaling/Modify a CSG Polygon in PathFollow when PathNode is drawing the mesh",
    "user": {
      "login": "stebulba",
      "id": 26193340,
      "node_id": "MDQ6VXNlcjI2MTkzMzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26193340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stebulba",
      "html_url": "https://github.com/stebulba",
      "followers_url": "https://api.github.com/users/stebulba/followers",
      "following_url": "https://api.github.com/users/stebulba/following{/other_user}",
      "gists_url": "https://api.github.com/users/stebulba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stebulba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stebulba/subscriptions",
      "organizations_url": "https://api.github.com/users/stebulba/orgs",
      "repos_url": "https://api.github.com/users/stebulba/repos",
      "events_url": "https://api.github.com/users/stebulba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stebulba/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-06-15T02:19:05Z",
    "updated_at": "2020-08-22T08:52:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am making a 3d map editor. I am using Path and CSG Polygon (path fallow) to make slides and tracks.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThat's work, but it's missing one option. I would like modify the PoolVector2Array polygon on any steep when drawing the path. I want extrude my polygon from a array A and scaling/moving/midify to the end of the path until a got the new polygon from array B.\r\n![bezier](https://user-images.githubusercontent.com/26193340/84613168-ae3d5480-ae90-11ea-9bc1-ec65380145d1.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThey have the option for tween animation : tween_step where on any step of the animation we can do someting. But it's probably not a good way.\r\n\r\nCan be possible to add on last points of the curve (path node) a different PoolVector2Array polygon and leave the path calculate the size of the csg polygon between those points when is drawing? On that way, Why not to include a TransitionType, like trans linear on the csg polygon between the first and the last point of the curve.\r\n\r\nWhen Godot is drawing the mesh of the csg polygon from on the path, that should be easy for Godot to calculate the interpolation between the first csg polygon array and the second array.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![curve_image](https://user-images.githubusercontent.com/26193340/84610284-0d4a9b80-ae88-11ea-9a2d-762b909129c6.jpg)\r\n\r\nEach CSG polygon should have if Path fallow is activate :\r\n- two polygon pool array, one for beginning (the original one) and the second for the end.\r\n- option to activate the interpolation from the both array.\r\n- option if activate to choose a TransitionType, (trans linear etc)\r\n\r\nThat don't look difficult to include in Godot. Something in this file.\r\nhttps://github.com/godotengine/godot/blob/master/modules/csg/csg_shape.cpp#L2087\r\nIf I am not in error at the line 2087 the final_polygon array (with a different name of var) should be updated to the new polygon size and position depending of the transitionType between beginning and the end. \r\n `2087:  new_polygon = polygon_from_slip_already_interpolate_earlier_arround_line_1815[i];`\r\nThat's right ?\r\n\r\njust for link :\r\nhttps://github.com/godotengine/godot/blob/master/scene/3d/path_3d.cpp\r\n\r\nThat limitation will miss me the AAA on map Editor.\r\nI hope you understand what a mind, what I am proposing.\r\n\r\nThis small option will give us a lot of opportunities. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1062/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1061",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1061/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1061/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1061/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1061",
    "id": 638430315,
    "node_id": "MDU6SXNzdWU2Mzg0MzAzMTU=",
    "number": 1061,
    "title": "Port the Godot editor to Android, iOS and Chromebook",
    "user": {
      "login": "zolizolizoli",
      "id": 42497592,
      "node_id": "MDQ6VXNlcjQyNDk3NTky",
      "avatar_url": "https://avatars1.githubusercontent.com/u/42497592?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zolizolizoli",
      "html_url": "https://github.com/zolizolizoli",
      "followers_url": "https://api.github.com/users/zolizolizoli/followers",
      "following_url": "https://api.github.com/users/zolizolizoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/zolizolizoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zolizolizoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zolizolizoli/subscriptions",
      "organizations_url": "https://api.github.com/users/zolizolizoli/orgs",
      "repos_url": "https://api.github.com/users/zolizolizoli/repos",
      "events_url": "https://api.github.com/users/zolizolizoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zolizolizoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-14T21:04:45Z",
    "updated_at": "2020-09-18T21:53:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\n\r\nI would like to use Godot on my Android phone. But I can't use Godot on my Android phone. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI don't know how to port to Android and other mobile platform. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf someone port Godot to mobile OS, we can use Godot on mobile devives. In my opinion this helps to developing directly on the target devices. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI don't know how to implement this issue. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI think, yes ;) \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause it is not feasible with these",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1058",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1058/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1058/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1058/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1058",
    "id": 638396951,
    "node_id": "MDU6SXNzdWU2MzgzOTY5NTE=",
    "number": 1058,
    "title": "Unhandled Input Event propagation rethinking",
    "user": {
      "login": "LordBrkica",
      "id": 51578785,
      "node_id": "MDQ6VXNlcjUxNTc4Nzg1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51578785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LordBrkica",
      "html_url": "https://github.com/LordBrkica",
      "followers_url": "https://api.github.com/users/LordBrkica/followers",
      "following_url": "https://api.github.com/users/LordBrkica/following{/other_user}",
      "gists_url": "https://api.github.com/users/LordBrkica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LordBrkica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LordBrkica/subscriptions",
      "organizations_url": "https://api.github.com/users/LordBrkica/orgs",
      "repos_url": "https://api.github.com/users/LordBrkica/repos",
      "events_url": "https://api.github.com/users/LordBrkica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LordBrkica/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-14T17:41:17Z",
    "updated_at": "2020-06-15T18:39:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nStrategy game\r\n**Describe the problem or limitation you are having in your project:**\r\nInput events as they are now [handled ](https://docs.godotengine.org/en/stable/tutorials/inputs/inputevent.html) arent logical.\r\n\r\nCurrently unhandled inputs are triggered before CollisionObject inputs.\r\n\r\nImagine we have a game like age of empires.\r\nWe have a unit in form of collision body. \r\nWe also have a map in form of node2d.\r\n\r\nSo we have some scene like so:\r\n_Map(Node2D)_\r\n--_Unit1(KinematicBody)_\r\n--_Unit2(KinematicBody)_\r\n...\r\n\r\nWe would like to select the unit, we hover the mouse over the unit and we click on the unit.\r\n\r\nWhat happens is that:\r\n__InputEvent_ of our unit/kinematic body triggeres **after** the __UnhandledInput_ event of the map. \r\n\r\nThis is not logical.  If I have a mouse exactly over some _Unit1_ and I click RMB then it is probable that I want to do something with the unit in question. I want the __InputEvent_  of the said unit to trigger and register my desire.\r\n\r\nWhat happens right now is that the __UnhandledInput_ of the map gets processed first.\r\n\r\nI am well aware that I can ignore the event and so allow its propagation to _Unit1_, but that is not a solution, because one never knows was clicking on the map the original desire of the user or was it to click/select the KinematicBody. We lose valuble knowledge.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be beneficial if we could somehow prioritize the __InputEvent_  of CollisionObjects over __UnhandledInput_  via some setting or property. \r\n\r\nI mean even the name suggest that **Un**handled Input should come last, nothing else wanted to take it so here we are. Right now thats not true.\r\nA user [long long ago](https://www.reddit.com/r/godot/comments/bgyhkj/shouldnt_collisionobject2d_input_event_be/) also encountered this illogical behaviour.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSadly I dont know how exactly could this property be set.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, one must either:\r\n- stop using __InputEvent_ on CollisionObjects to trigger user inputs into them\r\n- create a map as CollisionObject (which is probably weven worse than solution above)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI only have logic by my side (I hope).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1056",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1056/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1056/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1056/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1056",
    "id": 638368081,
    "node_id": "MDU6SXNzdWU2MzgzNjgwODE=",
    "number": 1056,
    "title": "Ability to dynamically hide exported variables in the inspector",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-14T14:57:12Z",
    "updated_at": "2020-07-12T20:34:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThis could help in any game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe inspector currently shows all exported variables, irregardless of whether they have any effect in current setup or not.\r\n\r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/7307968/84596573-d7dd8800-ae5e-11ea-8fc1-a4457c6e079b.png)\r\n\r\nHere Illustration Texture and Custom Display fields have an effect only when certain modes are chosen in the Display Mode field.\r\nHaving them displayed anyway creates confusion, for example for the game content creators (non-programmers).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis feature would allow to add logic to scripts that would dynamically control the visibility of exported variables in the Inspector.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nHere is some pseudocode:\r\n\r\n```python\r\ntool\r\nextends Node\r\n\r\nexport(Enums.EntityDisplayModes) var display_mode = Enums.EntityDisplayModes.MODE_ICON\r\n\r\n# This will be shown if display_mode is icon\r\nexport var icon_border\r\nexport var icon_texture\r\n\r\n# This will be shown if display_mode is card\r\nexport var card_border\r\nexport var card_texture\r\n\r\nexport(bool) var has_special_frame = false\r\n\r\n# This will be shown if has_special_frame is true\r\nexport(Color) var special_frame_color\r\n\r\nfunc _init():\r\n  if Engine.is_editor_hint():\r\n    if display_mode = Enums.EntityDisplayModes.MODE_ICON:\r\n      hide_property(\"card_border\")\r\n      hide_property(\"card_texture\")\r\n    elif display_mode = Enums.EntityDisplayModes.MODE_CARD:\r\n      hide_property(\"icon_border\")\r\n      hide_property(\"icon_texture\")\r\n      \r\n    if !has_special_frame:\r\n      hide_property(\"special_frame_color\")\r\n```\r\n\r\nThis enhancement could also be extended to allow for foldable sections of exported variables.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAfaik this can't be done using add-ons.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1056/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1055",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1055/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1055/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1055/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1055",
    "id": 638265958,
    "node_id": "MDU6SXNzdWU2MzgyNjU5NTg=",
    "number": 1055,
    "title": "Add autocompletion for AnimationTree parameters in the script editor",
    "user": {
      "login": "itsjavi",
      "id": 122741,
      "node_id": "MDQ6VXNlcjEyMjc0MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/122741?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/itsjavi",
      "html_url": "https://github.com/itsjavi",
      "followers_url": "https://api.github.com/users/itsjavi/followers",
      "following_url": "https://api.github.com/users/itsjavi/following{/other_user}",
      "gists_url": "https://api.github.com/users/itsjavi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/itsjavi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/itsjavi/subscriptions",
      "organizations_url": "https://api.github.com/users/itsjavi/orgs",
      "repos_url": "https://api.github.com/users/itsjavi/repos",
      "events_url": "https://api.github.com/users/itsjavi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/itsjavi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-14T01:45:52Z",
    "updated_at": "2020-06-22T21:28:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nRetro RPG game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNone, I just run into some typos while using the AnimationTree getters/setters.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe calls to the get/set methods for an AnimationTree will have autocompletion, similar to the AnimationPlayer.play method:\r\n\r\n![Jun-14-2020 03-34-54](https://user-images.githubusercontent.com/122741/84582757-7088ef00-adf0-11ea-8b4e-13980f79bdc2.gif)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor example, let's consider you have an AnimationTree with \"Idle\" and \"Walk\" animations. Then, when writing: `animationTree.set(\"` you will get the following suggestions (this is an example a not a definitive list): \r\n- `parameters/playback`\r\n- `parameters/Idle/blend_position`\r\n- `parameters/Walk/blend_position`\r\n\r\nSame for the \"get\" method.\r\n\r\nAnother thing is that when using `animationTree.get('parameters/playback').travel('Idle')` and you middle click on \"travel\" it does not open up the documentation. I think this should be detected as `AnimationNodeStateMachinePlayback`.\r\n\r\nThe `travel` method should also have autocompletion for the animation names in the tree.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it can't, since it's an improvement of the IDE itself.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it's possible to do it as an asset.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1053",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1053/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1053/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1053/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1053",
    "id": 638181928,
    "node_id": "MDU6SXNzdWU2MzgxODE5Mjg=",
    "number": 1053,
    "title": "Improvement to AtlasTexture resource type",
    "user": {
      "login": "revanj",
      "id": 37972124,
      "node_id": "MDQ6VXNlcjM3OTcyMTI0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/37972124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/revanj",
      "html_url": "https://github.com/revanj",
      "followers_url": "https://api.github.com/users/revanj/followers",
      "following_url": "https://api.github.com/users/revanj/following{/other_user}",
      "gists_url": "https://api.github.com/users/revanj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/revanj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/revanj/subscriptions",
      "organizations_url": "https://api.github.com/users/revanj/orgs",
      "repos_url": "https://api.github.com/users/revanj/repos",
      "events_url": "https://api.github.com/users/revanj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/revanj/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-13T15:33:28Z",
    "updated_at": "2020-12-23T16:29:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI'm working on a project where I have to import atlas texture from a large sprite sheet, instead of cutting them into pieces and importing them as an atlas.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI find the current AtlasTexture resource type quite useless, as normally people would just cut their pictures into pieces, and \"import them as atlas texture\". However, there is no way to handle the cases where there actually is only one large sprite sheet and has to be spliced in the engine. (If the splices are not the same size / not orderly). Currently AtlasTexture support auto slice but I see no way to save these auto slice results, and use them conveniently.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCurrently godot supports importing small textures and packing them into a atlas. I thinking of a similar thing. For a large sprite sheet, create an atlas file, and treat the splices as separate files in the editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCurrently godot supports importing small textures and packing them into a atlas. I thinking of a similar thing. For a large sprite sheet, create an atlas file, cut the sprite sheet into pieces, and treat them as separate files in the editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around with an external tool that cuts the sprite sheet. But with files downloaded from the internet this may be inconvenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe existence of a AtlasTexture resource seem frustrating if this is not added to the engine. Current AtlasTexture would always need an external json to be used properly. Seem like a waste.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1052",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1052/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1052/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1052/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1052",
    "id": 638179628,
    "node_id": "MDU6SXNzdWU2MzgxNzk2Mjg=",
    "number": 1052,
    "title": "Getting AnimationStateMachineNodeTransition from the NodeAnimations it connects",
    "user": {
      "login": "jcarlosrc",
      "id": 8985409,
      "node_id": "MDQ6VXNlcjg5ODU0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8985409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcarlosrc",
      "html_url": "https://github.com/jcarlosrc",
      "followers_url": "https://api.github.com/users/jcarlosrc/followers",
      "following_url": "https://api.github.com/users/jcarlosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcarlosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcarlosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcarlosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/jcarlosrc/orgs",
      "repos_url": "https://api.github.com/users/jcarlosrc/repos",
      "events_url": "https://api.github.com/users/jcarlosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcarlosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-13T15:19:00Z",
    "updated_at": "2020-06-23T16:34:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking in a 3D project TPS play\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to manage AnimationStateMachineNode transitions from code. I can only get a transition from its index with the _get_transition(idx: int)_ method. However, transition's idx is nowhere to be found in the editor, so that I have to gess what such index is. Of course it makes sense to get a transition from the nodes names it connects.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust add a _get_transition(node_from: String, node_to: String)_ method to get transitions in a natural way. I does not seem to be a complex addition to the API.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a core API function.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1050",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1050/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1050/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1050/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1050",
    "id": 638030961,
    "node_id": "MDU6SXNzdWU2MzgwMzA5NjE=",
    "number": 1050,
    "title": "Animated Collision Polygon / Mesh shapes. Rigged collision meshes.",
    "user": {
      "login": "jcarlosrc",
      "id": 8985409,
      "node_id": "MDQ6VXNlcjg5ODU0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8985409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcarlosrc",
      "html_url": "https://github.com/jcarlosrc",
      "followers_url": "https://api.github.com/users/jcarlosrc/followers",
      "following_url": "https://api.github.com/users/jcarlosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcarlosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcarlosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcarlosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/jcarlosrc/orgs",
      "repos_url": "https://api.github.com/users/jcarlosrc/repos",
      "events_url": "https://api.github.com/users/jcarlosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcarlosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-12T22:22:52Z",
    "updated_at": "2020-06-28T16:30:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA 3d Project with imported characters from blender.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nUsing -col in Blender creates a **Static** collision polygon for the imported object. However, it does not follow character animations. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEnable a **Mesh** collision shape that can be rigged. Nowadays there is a Polygon collision shape but it is static and can not be rigged. It means it can not follow character animations.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt will enable better collision detection for animated characters.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1048",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1048/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1048/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1048/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1048",
    "id": 638016936,
    "node_id": "MDU6SXNzdWU2MzgwMTY5MzY=",
    "number": 1048,
    "title": "Ability to export Node types instead of just NodePaths",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-06-12T21:41:14Z",
    "updated_at": "2020-11-20T19:24:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Header/Notice**: This is a revival of the [old issue here](https://github.com/godotengine/godot/issues/7821). Mentioning @Zylann as they are the creator of the old issue.\r\n\r\n**Describe the project you are working on:**\r\nThis is useful for all project types, but it is particularly useful with things like UI with lots of containers and hierarchy.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf someone would like to export a reference to a node that can be edited from the editor, there is a lot of boilerplate script code for each variable and the editor-side is not necessarily intuitive. (Clicking the `NodePath` variable and selecting a node rather than just dragging the node into the space).\r\n\r\nPrevious code example:\r\n```py\r\nexport(NodePath) var my_label_path\r\n# This next line could be even longer if the user decides to have type hints.\r\nonready var my_label = get_node(my_label_path)\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature enhancement I (and others) propose is to have a shorter syntax that handles the `NodePath`s. Basically, a simpler code format that behaves the same as the previous code.\r\n\r\nNew code proposal:\r\n```py\r\nexport(Label) var my_label\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee the code proposal above.\r\n![image](https://user-images.githubusercontent.com/14253836/84548560-7fc24c80-accb-11ea-8693-59ea98208844.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis can be worked around in only two lines, but those lines are very redundant, especially in cases where several nodes are exported. Also, this is an extremely common use-case that has come up several times in most (if not all) of my projects.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is core in the script and not sure if it is possible to work around with an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1048/reactions",
      "total_count": 54,
      "+1": 43,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 10,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1047",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1047/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1047/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1047/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1047",
    "id": 638015745,
    "node_id": "MDU6SXNzdWU2MzgwMTU3NDU=",
    "number": 1047,
    "title": "Create class without showing on node list",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-12T21:38:09Z",
    "updated_at": "2020-06-12T21:38:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with lots of scripts.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use the typing, mostly for better autocompletion and stuffs. However I have many scripts for which I want to have types, but I don't instance them from the editor. So I either use `class_name` and cope with my node list being cluttered or preload the script, which kills the purpose of `class_name` :I\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI just want a way to use `class_name` without adding the class to node list, so I can use it as a type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMaybe this could be annotation, like `@no_editor class_name MyClass`. This would register the type, but it wouldn't show on the node list when adding a child node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can workaround it with `preload(script.gd)`, but it's meh.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan't be an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1047/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1046",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1046/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1046/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1046/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1046",
    "id": 637973170,
    "node_id": "MDU6SXNzdWU2Mzc5NzMxNzA=",
    "number": 1046,
    "title": "Implement mouse wheel click scrolling in script tab (like in some Web browsers)",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-12T19:56:26Z",
    "updated_at": "2020-09-18T19:00:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game.\r\n**Describe the problem or limitation you are having in your project:**\r\nNothing happens if I click (and move while clicked) the mouse wheel in the script tab.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike everywhere else, if you click and hold the mouse wheel an move the mouse in a direction, it scrolls in this direction, if you click and release the mouse wheel, this tool is active until you do some other input that's not moving the mouse.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it has to something with the Engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1046/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1045",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1045/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1045/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1045/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1045",
    "id": 637699150,
    "node_id": "MDU6SXNzdWU2Mzc2OTkxNTA=",
    "number": 1045,
    "title": "Add exponentiation operator (`**`) to GDScript",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-06-12T11:57:31Z",
    "updated_at": "2020-10-26T19:59:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no exponentiation operator in GDScript. There is only the `pow()` function, which is a bit inconvenient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. `A ** B` does not add extra parentheses\r\n2. `A ** B` little shorter than `pow(A, B)`\r\n3. the infix operator is more familiar than the prefix function\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`A ** B == C`, where `A`, `B`, `C` are `float`, `C == pow(A, B)`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, you cannot add your own operators to GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes. This is available in many programming languages, for example, JavaScript, Python.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1045/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1043",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1043/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1043/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1043/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1043",
    "id": 637384506,
    "node_id": "MDU6SXNzdWU2MzczODQ1MDY=",
    "number": 1043,
    "title": "Select the MeshInstance and see it selected using arrow keys on keyboard",
    "user": {
      "login": "chalcosoma",
      "id": 20130832,
      "node_id": "MDQ6VXNlcjIwMTMwODMy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20130832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chalcosoma",
      "html_url": "https://github.com/chalcosoma",
      "followers_url": "https://api.github.com/users/chalcosoma/followers",
      "following_url": "https://api.github.com/users/chalcosoma/following{/other_user}",
      "gists_url": "https://api.github.com/users/chalcosoma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chalcosoma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chalcosoma/subscriptions",
      "organizations_url": "https://api.github.com/users/chalcosoma/orgs",
      "repos_url": "https://api.github.com/users/chalcosoma/repos",
      "events_url": "https://api.github.com/users/chalcosoma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chalcosoma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-11T23:38:12Z",
    "updated_at": "2020-06-13T18:01:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 3D spaceship game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n(I'm talking about the Godot Editor) \r\nI have many MeshInstance nodes that I need to change position, rotation, and scale. I'm reusing some meshes and making duplicates so my hierarchy is very messed. When I use arrow keys on my keyboard to navigate, I can't see the MeshInstance selected. It confuses me a lot because for me it is faster to duplicate many meshes to prototype my spaceship models (some of them are huge and have a lot of nodes) and don't rename or order them, so I need to see what is the node selected. IAs I don't see the selection using arrow keys I don't know what is the node.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI want to see the current MeshInstance selected using up and down arrow keys. Or putting in other words, I want to select the MeshInstance using up and down arrow keys.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust select the MeshInstance in the editor using up and down and show it on editor viewport.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it is very useful and standard behavior so it needs to exist in the engine. And will be used very often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know what to say here.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1043/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1042",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1042/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1042/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1042/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1042",
    "id": 637331401,
    "node_id": "MDU6SXNzdWU2MzczMzE0MDE=",
    "number": 1042,
    "title": "Implement drag-and-drop for NodePaths",
    "user": {
      "login": "MartinHaeusler",
      "id": 16356998,
      "node_id": "MDQ6VXNlcjE2MzU2OTk4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16356998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MartinHaeusler",
      "html_url": "https://github.com/MartinHaeusler",
      "followers_url": "https://api.github.com/users/MartinHaeusler/followers",
      "following_url": "https://api.github.com/users/MartinHaeusler/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinHaeusler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MartinHaeusler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinHaeusler/subscriptions",
      "organizations_url": "https://api.github.com/users/MartinHaeusler/orgs",
      "repos_url": "https://api.github.com/users/MartinHaeusler/repos",
      "events_url": "https://api.github.com/users/MartinHaeusler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MartinHaeusler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-11T21:31:32Z",
    "updated_at": "2020-11-02T18:55:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D puzzle adventure\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you have a `[Export] public NodeType myPath` field in your script, then the editor brings up a popup dialog when you click on it, allowing you to pick a node. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be much more convenient if I could simply drag a node from the scene tree over to the inspector field and drop it there (the way it works in Unity).\r\n\r\nThis would require that the editor can be \"locked\", i.e. it must not immediately switch to the selected node, otherwise nodes cannot be dragged into inspector fields. Unity supports both locking the inspector to a certain scene element, and also only displays the editor for an element if you *click* on it, not if you click-and-drag it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/16356998/84440437-48f02600-ac3a-11ea-8e1f-50bed7180d2d.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, because it concerns only the editor. The \"workaround\" is to use the popup dialog, which is distracting for the user due to the context switch. They may have their eyes on the node in the scene tree already, click on the \"assign\" button and get an entire new tree to browser through, just to find the same item again.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAgain, entirely editor-related and definitely a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1042/reactions",
      "total_count": 21,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1041",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1041/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1041/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1041/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1041",
    "id": 637299190,
    "node_id": "MDU6SXNzdWU2MzcyOTkxOTA=",
    "number": 1041,
    "title": "Add ability to use an argument for another argument",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-06-11T20:25:35Z",
    "updated_at": "2020-10-15T20:30:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't use an argument in the function defining line (line that begins with `func`) for another argument.\r\nThis works:\r\n```\r\nvar number1 = 1\r\nvar number2 = number1 + 10\r\nfunc _ready():\r\n\tmy_function(number1, number2)\r\n\r\nfunc my_function(argument1, argument2):\r\n\tprint(argument1 + argument2)\r\n```\r\nprints 12\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou could do something with argument1 in argument2.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis does not work (yet):\r\n```\r\nvar number1 = 1\r\nfunc _ready():\r\n\tmy_function(number1):\r\n\r\nfunc my_function(argument1:int, argument2:int=argument1 + 10):\r\n\tprint(argument2)\r\n```\r\nWould print 12\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, see below\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUseful for every project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1037",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1037/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1037/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1037/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1037",
    "id": 637070467,
    "node_id": "MDU6SXNzdWU2MzcwNzA0Njc=",
    "number": 1037,
    "title": "Add support for AI image upscaling at load-time",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-11T14:38:01Z",
    "updated_at": "2020-06-18T08:00:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 3D Platform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLong time for texture importing\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUsing a compressor integrated with the engine which takes almost no time to import, compressing it to reduce final game filesize, and still maintaining quality.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAs reduz mentioned in the last reunion, using[ betsy's GPU Compressor](https://github.com/darksylinc/betsy) inside the engine could be the best solution for now, and I was thinking \r\nabout using a recent technology in conjunction with betsy: UPSCALING AI as shown in this [video (all necessary material to implement is on description)](https://www.youtube.com/watch?v=HvH0b9K_Iro) , so there are two approaches i can think of now:\r\n\r\n![Screenshot from 2020-06-11 11-30-34](https://user-images.githubusercontent.com/58845030/84399587-693ac900-abd7-11ea-943e-7207383e9d48.png)\r\nthis one is my favorite:\r\n* User Import image\r\n* The Ai downscale it (the most it can without losing information) [must have project settings?]\r\n* Then Bet's do its work and communicate with engine\r\n\r\n![Screenshot from 2020-06-11 11-32-33](https://user-images.githubusercontent.com/58845030/84399876-bdde4400-abd7-11ea-9fc6-ad418132e751.png)\r\n* User Import image\r\n* Betsy do its work\r\n* communicate with the engine\r\n* AI Upscale only is called when necessary (showing in-game,export,etc..)\r\n\r\nI expect I've been clear here! please let me know you guys opinion...\r\nps: sorry for any mockup error, I dont know how the engine works behind the scenes...\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will be useful for everyone\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMUST/HAS to comunicate with core with less barriers as possible for performance/time reasons",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1037/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1036",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1036/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1036/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1036/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1036",
    "id": 637066776,
    "node_id": "MDU6SXNzdWU2MzcwNjY3NzY=",
    "number": 1036,
    "title": "Make Unique per Duplicate Resource Option",
    "user": {
      "login": "Lucrecious",
      "id": 4584511,
      "node_id": "MDQ6VXNlcjQ1ODQ1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4584511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lucrecious",
      "html_url": "https://github.com/Lucrecious",
      "followers_url": "https://api.github.com/users/Lucrecious/followers",
      "following_url": "https://api.github.com/users/Lucrecious/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lucrecious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lucrecious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lucrecious/subscriptions",
      "organizations_url": "https://api.github.com/users/Lucrecious/orgs",
      "repos_url": "https://api.github.com/users/Lucrecious/repos",
      "events_url": "https://api.github.com/users/Lucrecious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lucrecious/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-11T14:33:21Z",
    "updated_at": "2020-06-13T12:34:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a 2D platformer, and as part of a design goal, I'm making sure all level editing is done within Godot (using custom-made plugins, Godot's already great features, etc).\r\n\r\nI'm working on a pretty interesting plugin called \"Handles\" which allows you to add custom position and size anchors to any `CanvasItem` node. i.e. For example, you might use these custom handles to make `RectangleShape2D` to scale it from the Top-Left corner instead of the middle.\r\n\r\nAnyways, this plugin allows you to set custom position and scale anchors for _any_ `CanvasItem` (no script requirement) node via a custom property in the inspector.\r\n\r\nHere's how it looks:\r\n![2020-06-11 10 22 02](https://user-images.githubusercontent.com/4584511/84398074-7a7ed800-abcd-11ea-9b4c-0613a945d875.gif)\r\n\r\nAs you can see, the `RectangleShape2D` is being scaled from the top-left corner, and the entire top-left's node position is moved (this is done with one handler).\r\n\r\nThis is all done through one extra property on all `CanvasItem` inspectors:\r\n![image](https://user-images.githubusercontent.com/4584511/84399949-6e941580-abcf-11ea-8464-3cc471ff10ca.png)\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I duplicate my top-level Canvas Item, even when I use 'Local to Scene', the RectangleShape2D isn't made unique and, thus, the scaling functionality of my plugin scales all instances of the RectangleShape2D.\r\n\r\nI would like to be able to duplicate this StaticBody2D and its collision shape so that I can edit the copies individually without having to \"Editable Children\", finding the shape and clicking \"Make Unique\".\r\n\r\nLocal to Scene does not achieve this, how come? Is this a bug? If not what's the difference between \"Local to Scene\" checked and \"Make Unique\"? I'm genuinely curious.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a checkbox 'Make Unique on Duplicate` under all resources (like \"Local to Scene\"). If this is checked, then that resource alone would be duplicated every time the instanced scene is duplicated.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust add a checkbox property called 'Make Unique on Duplicate' under all resources.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou need to do check \"Editable Children\" which bloats the Scene tree. There is no way to override the duplicate function to have custom functionality (as far as I know) - I would be happy with a solution that would allow me to override the duplicate functionality on an instanced Scene.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis seems like a pretty common use case, and would be helpful with more frictionless level editing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1035",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1035/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1035/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1035/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1035",
    "id": 637047574,
    "node_id": "MDU6SXNzdWU2MzcwNDc1NzQ=",
    "number": 1035,
    "title": "Add \"Declutter Script\" shortcut",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-11T14:09:22Z",
    "updated_at": "2020-10-25T16:52:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(N/A) (Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I have a section of code that I want to change, I often:\r\n1) Copy the section of code\r\n2) Comment it out\r\n3) Paste it below the original commented-out version\r\n4) Test changes until stable\r\n5) Delete the old commented-out code\r\n\r\nHowever, after doing this a lot, I end up with a lot of commented lines which I need to remove.\r\nPreviously, I had been doing this by:\r\n1) Trimming the trailing whitespace from the script I want to clean\r\n2) Copy/pasting it into Notepad++\r\n3) Removing all lines beginning with '#'\r\n4) Pasting the cleaned up code back into my project.\r\n\r\nThis does the job, but it's tedious, and actually dangerous because it removes ALL comments, even those you may wish to keep for documentation. It also deletes multiline string lines that begin with '#'\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI created a simple script which handles all of this for you.\r\nIt also has these additional features:\r\n1) Replaces consecutive blank lines with X number of blank lines (0, 1, 2, etc.)\r\n2) Allows for defining custom symbols to indicate commented lines which should be preserved (#//, etc.)\r\n3) Preserves custom multi-line comments (#/* ... #*/)\r\n4) Preserves comments inside strings (single or multi-line strings)\r\n5) Preserves spaced comments by default(\"# \")\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n_(code provided below)_\r\nCurrently, this code works by dragging and dropping the script to be cleaned onto an export variable of the tool node containing this script.\r\n\r\nThe cleaned-up code is copied to the OS clipboard, and the user then simply replaces the old code with the new code (Ctrl+A, Ctrl+V)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think people would use this a lot. I certainly do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis could help speed up people's workflow, and also automatically reduces the number of blank lines, which makes it easier to see more of the code on the screen at once.\r\n\r\nIf this was a built-in shortcut in the script editor, it would be even quicker/easier to do than using a tool node to handle this.\r\n\r\n**Note:**\r\nWhile I put in checks to make this code as safe as I could, it is not without risk.\r\nThe user should be responsible for backing up their code before using this tool.\r\nBeing built into the editor should allow undo functionality if they made a mistake.\r\n\r\n**Working Example:**\r\n**(Before)**\r\n![Unclean Code](https://user-images.githubusercontent.com/60025044/84391485-aa72af00-abbe-11ea-8ea4-f0e4ed1fe6d6.png)\r\n\r\n**(After, with `max_blank_lines `set to 1)**\r\n![Clean Code](https://user-images.githubusercontent.com/60025044/84391493-acd50900-abbe-11ea-9153-667985974cf5.png)\r\n\r\n**Code:**\r\n```\r\ntool\r\nextends Node\r\n\r\nconst comment_spaced := \"# \"\r\nconst comment_slashed := \"#//\"\r\nconst comment_warning := \"# warning-ignore\"\r\n\r\nconst permanent_comment_symbols := [comment_spaced, comment_slashed, comment_warning]\r\nconst multiline_string_symbol := \"\\\"\\\"\\\"\"\r\n\r\nexport(bool) var keep_spaced_comment := true setget set_keep_spaced_comment\r\nfunc set_keep_spaced_comment(__bool: bool) -> void:\r\n\tkeep_spaced_comment = __bool\r\n\r\nexport(int) var max_blank_lines := 1 setget set_max_blank_lines\r\nfunc set_max_blank_lines(__line_count: int) -> void:\r\n# warning-ignore:narrowing_conversion\r\n\tmax_blank_lines = max(__line_count, 0)\r\n\r\nexport(Script) var script_to_clean = null setget set_script_to_clean\r\nfunc set_script_to_clean(__script: Script) -> void:\r\n\tif !__script:\r\n\t\treturn\r\n\r\n\tvar __source_code: String = __script.source_code\r\n\tvar __source_lines: Array = __source_code.split(\"\\n\")\r\n\r\n\tvar __source_code_trimmed := \"\"\r\n\tvar __consecutive_blank_lines := 0\r\n\r\n\tvar __is_comment := false\r\n\r\n\tvar __in_permanent_comment := false\r\n\tvar __in_multiline_comment := false\r\n\tvar __on_multiline_comment_last_line := false\r\n\r\n\tvar __in_multiline_string := false\r\n\r\n\tfor __i in __source_lines.size():\r\n\t\tvar __line: String = __source_lines[__i]\r\n\r\n\t\tvar __r_stripped_line: String = __line.strip_edges(false, true)\r\n\t\tvar __stripped_line: String = __line.strip_edges(true, true)\r\n\r\n\t\tif !__in_multiline_string:\r\n\t\t\t__is_comment = __stripped_line.begins_with(\"#\")\r\n\t\telse:\r\n\t\t\t__is_comment = false\r\n\r\n\t\tif __stripped_line.begins_with(\"#/*\"):\r\n\t\t\tif !__in_multiline_string:\r\n\t\t\t\t__in_multiline_comment = true\r\n\r\n\t\tif __stripped_line.begins_with(\"#*/\"):\r\n\t\t\tif !__in_multiline_string:\r\n\t\t\t\tif !__in_multiline_comment:\r\n\t\t\t\t\tvar __err_msg := str(\"\\n\\t\", \"Multiline comment symbol error:\",\r\n\t\t\t\t\t\t\t\t\t\t\"\\n\\t\\t\", \"End symbol (*/) found at line: \", __i + 1, \".\",\r\n\t\t\t\t\t\t\t\t\t\t\"\\n\\t\\t\", \"No previous start symbol (/*) found.\",\r\n\t\t\t\t\t\t\t\t\t\t\"\\n\\t\\t\", \"Can't copy source code until resolved.\"\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\tprint(__err_msg)\r\n\t\t\t\t\tpush_warning(__err_msg)\r\n\r\n\t\t\t\t__on_multiline_comment_last_line = true\r\n\r\n\t\tvar __permanent_comment_symbols := permanent_comment_symbols.duplicate(true)\r\n\t\tif !keep_spaced_comment:\r\n\t\t\t__permanent_comment_symbols.erase(comment_spaced)\r\n\r\n\t\tif !__in_multiline_string:\r\n\t\t\tfor __symbol in __permanent_comment_symbols:\r\n\t\t\t\tif __stripped_line.begins_with(__symbol):\r\n\t\t\t\t\t__in_permanent_comment = true\r\n\r\n\t\tif multiline_string_symbol in __r_stripped_line:\r\n\t\t\tvar __multiline_string_symbol_count := __r_stripped_line.count(multiline_string_symbol)\r\n\t\t\tvar __is_even: bool = __multiline_string_symbol_count % 2 == 0\r\n\r\n\t\t\tif !__is_comment:\r\n\t\t\t\tif __in_multiline_string:\r\n\t\t\t\t\t__in_multiline_string = __is_even\r\n\t\t\t\telse:\r\n\t\t\t\t\t__in_multiline_string = !__is_even\r\n\r\n\t\tif __in_permanent_comment \\\r\n\t\tor __in_multiline_comment \\\r\n\t\tor !__is_comment:\r\n\r\n\t\t\tif !__stripped_line.empty():\r\n\r\n\t\t\t\t__consecutive_blank_lines = 0\r\n\t\t\t\t__source_code_trimmed += __r_stripped_line + \"\\n\"\r\n\t\t\telse:\r\n\t\t\t\t__consecutive_blank_lines += 1\r\n\r\n\t\t\t\tif __consecutive_blank_lines <= max_blank_lines:\r\n\t\t\t\t\t__source_code_trimmed += \"\\n\"\r\n\r\n\t\t\tif __on_multiline_comment_last_line:\r\n\t\t\t\t__in_multiline_comment = false\r\n\t\t\t\t__on_multiline_comment_last_line = false\r\n\r\n\t\t\t__in_permanent_comment = false\r\n\r\n\twhile __source_code_trimmed.ends_with(\"\\n\"):\r\n\t\t__source_code_trimmed = __source_code_trimmed.trim_suffix(\"\\n\")\r\n\r\n\tOS.clipboard = __source_code_trimmed\r\n\tvar __success_msg := \\\r\n\t\t\tstr(\"\\n\", \"Copied source code to clipboard.\",\r\n\t\t\t\t\"\\n\\t\", \"'script.resource_path': \", __script.resource_path,\r\n\t\t\t\t\"\\n\\t\", \"'keep_spaced_comment': \", keep_spaced_comment,\r\n\t\t\t\t\"\\n\\t\", \"'max_blank_lines': \", max_blank_lines\r\n\t\t\t\t)\r\n\r\n\tself.property_list_changed_notify()\r\n\tprint(__success_msg)\r\n```\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1035/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1034",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1034/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1034/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1034/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1034",
    "id": 636574464,
    "node_id": "MDU6SXNzdWU2MzY1NzQ0NjQ=",
    "number": 1034,
    "title": "Add support for variadic functions (varargs) to GDScript",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-06-10T21:56:02Z",
    "updated_at": "2020-10-26T13:58:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nReaction game\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't call a function with a variable amount of arguments (if they haven't a default)!\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI could call a function with a variable amount of arguments. Of course, you should also be able to pass the argument you want, not necessarily in the given order but this is something different:[look here](https://github.com/godotengine/godot-proposals/issues/902)\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc my_func(*argv):  \r\n\tfor arg in argv:  \r\n\t\tprint (arg) \r\n    \r\nmy_func(\"Hello\", \"Welcome\", \"to\", \"Godot\")  \r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, I think\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it is useful for every project.\r\n\r\n*Bugsquad edit (keywords for easier searching): python, args, kwargs*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1034/reactions",
      "total_count": 32,
      "+1": 32,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1033",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1033/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1033/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1033/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1033",
    "id": 636535323,
    "node_id": "MDU6SXNzdWU2MzY1MzUzMjM=",
    "number": 1033,
    "title": "Add a 2DHingeJoint node",
    "user": {
      "login": "cheesymoo",
      "id": 4663804,
      "node_id": "MDQ6VXNlcjQ2NjM4MDQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4663804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cheesymoo",
      "html_url": "https://github.com/cheesymoo",
      "followers_url": "https://api.github.com/users/cheesymoo/followers",
      "following_url": "https://api.github.com/users/cheesymoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/cheesymoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cheesymoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cheesymoo/subscriptions",
      "organizations_url": "https://api.github.com/users/cheesymoo/orgs",
      "repos_url": "https://api.github.com/users/cheesymoo/repos",
      "events_url": "https://api.github.com/users/cheesymoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cheesymoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-06-10T20:42:50Z",
    "updated_at": "2020-11-03T18:07:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2D game featuring vehicles and trailer attachements\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to attach 2DKinematic or 2DPhysics bodies to each other via a 2D-HingeJoint\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n2D should have a HingeJoint, it is obviously useful as we have a 3D version of it already\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt will be analogous to the 3DHingeJoint, just for 2D physics\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI have attempted using other joints and scripting work-arounds, but nothing seems to have the desired effect\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt brings the 2D joints into parity with the 3D joints\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1033/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1032",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1032/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1032/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1032/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1032",
    "id": 636506497,
    "node_id": "MDU6SXNzdWU2MzY1MDY0OTc=",
    "number": 1032,
    "title": "Editable and selectable list for layers of CanvasLayer",
    "user": {
      "login": "sszigeti",
      "id": 2530086,
      "node_id": "MDQ6VXNlcjI1MzAwODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2530086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sszigeti",
      "html_url": "https://github.com/sszigeti",
      "followers_url": "https://api.github.com/users/sszigeti/followers",
      "following_url": "https://api.github.com/users/sszigeti/following{/other_user}",
      "gists_url": "https://api.github.com/users/sszigeti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sszigeti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sszigeti/subscriptions",
      "organizations_url": "https://api.github.com/users/sszigeti/orgs",
      "repos_url": "https://api.github.com/users/sszigeti/repos",
      "events_url": "https://api.github.com/users/sszigeti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sszigeti/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-10T19:53:53Z",
    "updated_at": "2020-06-12T12:07:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Not relevant.\r\n\r\n**Describe the problem or limitation you are having in your project:** This proposal is a small user experience enhancement to allow a friendlier management of CanvasLayer layer values. Currently CanvasLayer exports its `layer` property as an int to the editor, so as a developer I have to keep track of my layer values elsewhere.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** It'd be better if these layers could be edited in a central place like in _Project Settings / Layer Names / 2d Physics_ and in the editor's Inspector a human-readable list would appear instead of the numerical input field.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** This could probably look and behave like an ItemList, or what we currently (3.2) have for `CanvasItem.pause_mode`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No, this is an enhancement for the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It's a small change that doesn't break backwards compatibility, and makes the editor easier to understand and use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1032/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1031",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1031/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1031/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1031/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1031",
    "id": 635863133,
    "node_id": "MDU6SXNzdWU2MzU4NjMxMzM=",
    "number": 1031,
    "title": "HDR Color toggle and a separated slider for power",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-10T01:38:52Z",
    "updated_at": "2020-06-10T12:47:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nany project that uses HDR color.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn Godot currently we are able to use HDR colors, but it is not intuitive and you have to make the calculations manually. It would be nicer if we could enable/disable a color as a HDR and use a slider or something to increase/decrease the power separated.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature would be simple as defining a new parameter to the class Color to define the HDR power, using the \"raw\" color picker parameter renaming to \"HDR\" and adding a simple HDR power slider to it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe class \"Color\" would have the HDR power parameter, multiplying the RGB channels by the power.\r\nIn the color picker we could enable/disable if the current color is HDR and if so, it would appear a slider to change the power like so:\r\n![Temp1](https://user-images.githubusercontent.com/43936806/84217037-7c4b7d00-aaa1-11ea-971f-df03ab305be0.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot with a few lines of script, as it would be needed to create a custom editor plugin, with a custom Color class and the scripts would only accept this custom Color class to use easily the HDR function.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause is a main feature for those that creates custom shader effects with HDR that would accept the color in HDR, as many other things.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1031/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1030",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1030/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1030/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1030/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1030",
    "id": 635726268,
    "node_id": "MDU6SXNzdWU2MzU3MjYyNjg=",
    "number": 1030,
    "title": "GoldenLayout-style Layout widget for the Engine and as a Control node",
    "user": {
      "login": "Crystalwarrior",
      "id": 3470436,
      "node_id": "MDQ6VXNlcjM0NzA0MzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3470436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crystalwarrior",
      "html_url": "https://github.com/Crystalwarrior",
      "followers_url": "https://api.github.com/users/Crystalwarrior/followers",
      "following_url": "https://api.github.com/users/Crystalwarrior/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crystalwarrior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crystalwarrior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crystalwarrior/subscriptions",
      "organizations_url": "https://api.github.com/users/Crystalwarrior/orgs",
      "repos_url": "https://api.github.com/users/Crystalwarrior/repos",
      "events_url": "https://api.github.com/users/Crystalwarrior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crystalwarrior/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-09T20:13:46Z",
    "updated_at": "2020-06-10T12:31:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** I am working on a recreation of a browser-based project called [Attorney Online 2](http://web.aceattorneyonline.com/)\r\n\r\n**Describe the problem or limitation you are having in your project:** I am unable to achieve the same level of interface/layout capabilities with dragging gui around. While Godot does offer tabs moving between several interfaces, I am not allowed the same level of fluidity [Golden Layout](http://golden-layout.com/) offers.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** [Golden Layout](http://golden-layout.com/) implements a full, fluid interface to rearrange the interface in whichever way you want, allowing full user customizability without any required knowledge beforehand.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n[Golden Layout](http://golden-layout.com/) should be fully readable for the source code. As for the feature in Godot itself as an interface, I believe it should be a top-level control node similar to how \"Tabs\" and \"TabContainer\" behave - the \"Layout\" widget would require a control to insert as a Tab, and the Layout widget may contain unlimited amount of tabs. This would allow Godot Engine interface to actually undergo an even less restrictive interface, allowing its users to put the main engine viewport to the left, right corners of the screen, or to even arrange all of the interface elements in a \"horizontal ladder\" of they wished to.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. This feature is not feasible to implement on a user level without extensive knowledge of Godot Engine's interface capabilities, and would require more than a few lines of code to achieve.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDue to its speed, versatility and long-term viability for Godot Engine itself, it can be used as a massive improvement for Godot Engine's interface, improving the user experience immensely by providing unparalleled customizability.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1030/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1029",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1029/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1029/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1029/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1029",
    "id": 635641386,
    "node_id": "MDU6SXNzdWU2MzU2NDEzODY=",
    "number": 1029,
    "title": "Allow importing 3D models without colliders",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2020-06-09T17:47:50Z",
    "updated_at": "2020-11-13T03:31:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Godot TPS demo\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe TPS demo's Blender files contain colliders on some of the meshes. Godot imports them as StaticBody children with CollisionShape nodes. My goal is to get rid of them. I can't figure out how to remove them in Blender, and Godot does not have an import setting for this.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMy proposal is to add an import setting for 3D models to ignore all collider information, such that the imported scene does not contain any PhysicsBody or CollisionShape nodes. Godot already has tons of import options in the \"Import\" dock to configure meshes, skins, materials, and animations, and more, so I think it is very reasonable to add import options for physics.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIn the \"Import\" dock, a new checkbox will be added, something like \"Import colliders\". This checkbox will be enabled by default. If unchecked, Godot does not import colliders or generate physics nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is not a feature that exists in script, it is an import option.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, because it is an import option and can't be worked around in a script.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1029/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1028",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1028/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1028/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1028/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1028",
    "id": 635566589,
    "node_id": "MDU6SXNzdWU2MzU1NjY1ODk=",
    "number": 1028,
    "title": "Allow the debugger's \"continue\" action to bring the game to the front while not debugging",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-09T16:07:37Z",
    "updated_at": "2020-06-10T18:08:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n3d sokoban-like with twisty puzzle mechanics\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm irritated by not having a quick way to bring my game to the front of the screen\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nthe continue feature already brings the game to the front if it wasn't when you are debugging, why not just allow it to bring it to the front even when you aren't. Then f12 would double as a \"bring to front\" shortcut. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nsame way it does already for the debugger\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm sure I'm not the only one who is inconvenienced by this. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1028/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1027",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1027/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1027/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1027/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1027",
    "id": 635494389,
    "node_id": "MDU6SXNzdWU2MzU0OTQzODk=",
    "number": 1027,
    "title": "Add compute shader for OpenGL and Vulkan renderer",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-09T14:45:18Z",
    "updated_at": "2020-06-10T17:00:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTest project where I create a dynamic 3D water system with arrays on surface\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn my project, I'm creating a dynamic water system where I use a 2D array as the surface height,\r\nbut manipulating this array from GDScript can be very slow as I increase surface quality (n^2 time complexity). This could be faster if I could manipulate variables directly in GPU (as an arbitrary choosen example, the TensorFlow library uses GPU Matrices calculation to perform the neural network tasks faster).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature would be a new shader_type, where it would have the desired uniforms on top, and the logic on body. The uniforms would be only for initializing the logic, and the logic inside would manipulate the uniforms every frame. With this, the heavy tasks as large 2D arrays would be leaved only for GPU, as it performs more tasks that CPU.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe new shader_type would be something like this:\r\n\r\n```\r\nshader_type gpu_task; // or other name\r\n\r\nuniform float[][] water_heights; // the current shader api dont works with arrays as uniform\r\n\r\n// updates every frame (before rendering)\r\nvoid update() {\r\n    // The logic goes here\r\n}\r\n\r\n// reset variables?\r\nvoid reset() {}\r\n```\r\n\r\nAs it would perform tasks directly on GPU, it can apply those variables on a second-pass shader, where would be rendered after. So the second-pass shader would have the same variable names as the new shader.\r\n\r\nThe reason why it would be a shader_type because it would be simpler to program for those that already knows the Godot shader language.\r\n\r\nMaybe I'm saying something impossible, but it would be nice to have in Godot.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, as the current shader API's uniforms dont works with arrays and dont write then.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would increase the performance in a majority of in-game tasks, as the water update example.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1027/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1026",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1026/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1026/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1026/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1026",
    "id": 634936373,
    "node_id": "MDU6SXNzdWU2MzQ5MzYzNzM=",
    "number": 1026,
    "title": "Support creating TileSets from a TextureArray / TextureLayered",
    "user": {
      "login": "agausmann",
      "id": 6611767,
      "node_id": "MDQ6VXNlcjY2MTE3Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6611767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agausmann",
      "html_url": "https://github.com/agausmann",
      "followers_url": "https://api.github.com/users/agausmann/followers",
      "following_url": "https://api.github.com/users/agausmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/agausmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agausmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agausmann/subscriptions",
      "organizations_url": "https://api.github.com/users/agausmann/orgs",
      "repos_url": "https://api.github.com/users/agausmann/repos",
      "events_url": "https://api.github.com/users/agausmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agausmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-08T21:09:47Z",
    "updated_at": "2020-06-11T15:22:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm working on a project that uses tilemaps/tilesets, and I'm wanting to use shaders that sample the surrounding texture pixels for the current tile, in order to accomplish various things:\r\n\r\n- Edge detection, so I can apply an outline around highlighted/selected tiles. Samples the alpha channel of its own UV coordinate along with the UV coordinates of some nearby texels to calculate whether the current fragment is part of the outline. \r\n\r\n- Antialiasing, so I can accurately represent the edges of pixels in pixel art where they don't exactly line up between fragments. This solves the \"pixel wobble\" that is currently present when texture filtering is turned off (aka \"nearest\" filter). My fragment shader looks at the current position and the samples of neighboring fragments to produce a weighted average of all of the texels it contains.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe problem with sampling nearby texels in a tileset / atlas is that on the edge of the tile, you may be sampling some pixels that belong to a neighboring tile. This is known as \"texture bleeding\", and produces undesirable results. For example, this is what happens with my outline shader:\r\n\r\n![2020-06-08-152831_218x204_scrot](https://user-images.githubusercontent.com/6611767/84077296-be3ecb00-a99c-11ea-9582-b58b66d4ec48.png)\r\n\r\nThis is happening because some of the tiles in my tileset share a boundary, and so texels from a neighboring tile get sampled as if they were valid neighbor texels.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCreating a tileset from a layered texture / texture array would solve this problem, because the tiles would no longer neighbor each other in UV space, so there is no way for the tiles to bleed over each other if the layer is constant/invariant for each tile.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThere would be an API change for `TileSet`, allowing it to accept layered textures and optionally accepting a layer index when setting texture offsets for tiles. I'd also like support in the editor itself, to make working with layered textures easier, maybe it could show/treat each of the layers as if it were its own \"texture\" in the list.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nAdding a 1px or 2px margin around the tiles would solve this, as long as I don't sample further than the margin width, but I would like to avoid doing that. Maybe another option would be to clamp the UV coordinates to the boundaries of the current tile? I'm not sure how I would approach that.\r\n\r\n _(edit: I'm aware it can be done within the shader, but I don't know of a good way to pass the UV bounds to it or calculate them from within the shader.)_\r\n\r\nIt may be possible to dynamically create the TileSet using the existing APIs, creating `ImageTexture`s from the image data from each layer and setting them for each tile. Something like:\r\n```\r\ntileset.tile_set_texture(i, ImageTexture.create_from_image(layered_texture.get_layer_data(i)))\r\n```\r\n\r\nHowever, if I understand correctly, this would take away the main benefit of making the atlas a single texture, which is that you don't have to change render state before rendering each tile. They'd all be converted into separate textures if it was created like this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n I don't see how this feature could be integrated into the official TileSet from a third-party asset without incurring some kind of performance penalty. To avoid that, it would have to be a fork/port of the existing TileSet code. It might also have to reimplement some of the dependents of TileSet, like TileMap, to accept this new tileset. Further, I'm not sure how well a third-party asset can be integrated into the editor, I don't know if it could have the same interface that is currently available for tilemaps and tilesets.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1026/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1023",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1023/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1023/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1023/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1023",
    "id": 633554364,
    "node_id": "MDU6SXNzdWU2MzM1NTQzNjQ=",
    "number": 1023,
    "title": "Allow users to specify signal method receiver name format",
    "user": {
      "login": "Rubonnek",
      "id": 8337880,
      "node_id": "MDQ6VXNlcjgzMzc4ODA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8337880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rubonnek",
      "html_url": "https://github.com/Rubonnek",
      "followers_url": "https://api.github.com/users/Rubonnek/followers",
      "following_url": "https://api.github.com/users/Rubonnek/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rubonnek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rubonnek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rubonnek/subscriptions",
      "organizations_url": "https://api.github.com/users/Rubonnek/orgs",
      "repos_url": "https://api.github.com/users/Rubonnek/repos",
      "events_url": "https://api.github.com/users/Rubonnek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rubonnek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-07T16:28:40Z",
    "updated_at": "2020-06-18T01:22:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game's UI\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm currently reorganizing the user interface of a game and whenever I rename an instanced scene, or I change the \"Edit Children\" property of the instanced scene, I lose all my signal connections that live outside of those instanced scenes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInstead of generating a string of type `_on_${node.name}_${node.signal_in_question}`, let users specify what string they want to use when connecting signals by using other property values of the node.\r\n\r\nFor example, by editing the project properties, users can then specify the signal format of: `_on_${node.name}_${node.class}_${node.signal_in_question}`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot entirely. Connecting signals through GDScript has the side effect of not showing up in the UI which is not what we want in our current project given the sheer amount of signals.\r\n\r\nIt's worth mentioning that this issue will come up when working on complex games -- refactoring nodes and code whilst keeping the UI the same will become a pain because users will have to retype or copy paste function names every single time they attempt to connect signals through the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGodot's editor must be modified to add this feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1023/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1022",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1022/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1022/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1022/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1022",
    "id": 633431914,
    "node_id": "MDU6SXNzdWU2MzM0MzE5MTQ=",
    "number": 1022,
    "title": "Add a `reset()` method for every property of any Node and for Nodes themselves",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-07T13:49:53Z",
    "updated_at": "2020-09-13T23:45:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf I want to reset the font color of a label because I have changed it in code, I'll have to do `add_color_override(\"font_color\", ColorN(\"white\"))` for example. In the inspector there's a reset button next to every changed property. Why can't there be such a function?!\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMany lines would be really shorter. It's very practical. If you want to reset all properties of a Node you could call this reset function on the node. If you want to reset all properties of a specific type for example anchor, call the reset function on this type.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`text.reset(`) `align.reset()` `reset()` `anchor.reset()`\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often but yes, it can be worked around but this is annoying.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1021",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1021/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1021/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1021/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1021",
    "id": 633417166,
    "node_id": "MDU6SXNzdWU2MzM0MTcxNjY=",
    "number": 1021,
    "title": "Allow for easy add_group dropdowns for inspector properties for plugins",
    "user": {
      "login": "Lucrecious",
      "id": 4584511,
      "node_id": "MDQ6VXNlcjQ1ODQ1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4584511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lucrecious",
      "html_url": "https://github.com/Lucrecious",
      "followers_url": "https://api.github.com/users/Lucrecious/followers",
      "following_url": "https://api.github.com/users/Lucrecious/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lucrecious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lucrecious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lucrecious/subscriptions",
      "organizations_url": "https://api.github.com/users/Lucrecious/orgs",
      "repos_url": "https://api.github.com/users/Lucrecious/repos",
      "events_url": "https://api.github.com/users/Lucrecious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lucrecious/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-07T13:30:06Z",
    "updated_at": "2020-06-11T02:22:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA design goal I'm aiming for in my project is to build all my level editing needs within Godot. I'm working on an Inspector plugin that \"extends\" the CanvasItem node globally. The idea is to add a few extra useful inspector properties to control from my plugin.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't seem to be able to easy add a \"group\" dropdown menu with a plugin.\r\n\r\nI'm using `EditorInspectorPlugin`, `add_property_editor` and override `parse_category` to add properties to CanvasItem categories globally. However, I have a few properties I'd like to add, so I'd like to be able to put them under a dropdown group menu (much like the `Anchors` menu on `Controls`).\r\n\r\nI suspected that _maybe_ `add_property_editor_for_multiple_properties` _could_ help with this but I have no idea what this does and the documentation isn't clear. I've tried using it in multiple ways and it hasn't helped. I'd love to be enlightened on the usage of this method.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis feature allows the plugin designer to easily add a \"group\" menu, such that properties can be put under subcategories like the `Anchors`, `Margin`, `rect`, etc, menus.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not sure how this would be done with the API the Godot developers are aiming for, but I guess the simplest way to do this would be to add a `Control` node that looks like the group control used in the actual Inspector but has methods to add multiple `EditorProperty`s to it.\r\n\r\nThat or maybe a method to group `EditorProperty` nodes together, like \r\n```gdscript\r\nextends EditorInspectorPlugin\r\n\r\nfunc can_handle(object) -> bool:\r\n    return object is CanvasItem\r\n\r\nfunc parse_category(object: Object, category: String) -> void:\r\n    if category != \"CanvasItem\": return\r\n\r\n    var prop1 = EditorProperty.new()\r\n    prop1.label = \"A\"\r\n\r\n    var prop2 = EditorProperty.new()\r\n    prop2.label = \"B\"\r\n\r\n    add_group_property_editors(\"AB\", [prop1, prop2])\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis could definitely be worked around but not with a few lines of script, I don't think. I'd love to know if there is. However, to my knowledge, you'd have to create your own dropdown that opens and collapses within the editor, and write code for how it would display multiple EditorProperties.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI feel like this is a natural and common thing users would want to do if they want to \"extend\" properties on certain node types for Inspector plugins.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1020",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1020/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1020/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1020/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1020",
    "id": 633326583,
    "node_id": "MDU6SXNzdWU2MzMzMjY1ODM=",
    "number": 1020,
    "title": "Add Cancel Button to Item List Editor of OptionButton",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-07T11:30:40Z",
    "updated_at": "2020-06-17T17:07:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOn an OptionButton, item additions/changes are saved before pressing OK. https://github.com/godotengine/godot/issues/39360\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf there was a Cancel Button next to the OK button, the additions/changes would not be saved.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Item List Editor with Cancel](https://user-images.githubusercontent.com/60623532/83967557-07bae780-a8c3-11ea-8a07-fe7f011f00fd.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1019",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1019/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1019/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1019/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1019",
    "id": 633253415,
    "node_id": "MDU6SXNzdWU2MzMyNTM0MTU=",
    "number": 1019,
    "title": "Set contact monitoring on rigidbodies to 1 by default",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-07T09:52:23Z",
    "updated_at": "2020-06-07T09:52:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A (this applies to all projects using physics)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNew users are confused by the fact that RB contacts/collisions are not reported. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSet contact monitoring to 1 by default.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFlip the default.\r\nOptionally, a warning in the editor that tells you that if you encounter performance problems, disable contact monitoring (although benchmarks in original issue show that it shouldn't be an issue for 99% of projects)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope - the point is that the users don't have to work around the current default in every single RB they use.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core feature.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/17910",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1019/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1018",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1018/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1018/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1018/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1018",
    "id": 632417782,
    "node_id": "MDU6SXNzdWU2MzI0MTc3ODI=",
    "number": 1018,
    "title": "Set human-readable names for the editor's nodes",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-06T12:09:22Z",
    "updated_at": "2020-06-06T18:24:15Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen implementing new features in the editor, it's often useful to refer to the scene tree to see how things are organized. This can be done using `print_tree_pretty()` or with Zylann's excellent [EditorDebugger](https://github.com/Zylann/godot_editor_debugger_plugin) add-on.\r\n\r\nUnfortunately, most nodes in the editor don't have manually-assigned names, which makes this tree much less human-readable than it could be.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAssigning names to nodes will make it easier for contributors to work on the editor. This will let them fix bugs and add new features more efficiently.\r\n\r\nThis can also be useful for add-on developers. That said, we don't make any guarantees as to node names not changing over time, so this should not be regarded as a reliable solution for `get_node()` in add-ons.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis is already being done in some places, such as here:\r\n\r\nhttps://github.com/godotengine/godot/blob/f54eda121d975127f68db624265271d39d8dabf3/editor/node_3d_editor_gizmos.cpp#L4257\r\n\r\nThis proposal is just a matter of doing the same for all nodes used in the editor. Names should use the PascalCase convention for consistency, unless the node name is being displayed in the UI somehow (e.g. for use in TabContainer).\r\n\r\nThis task should be relatively easy, but it'll take a while to name all nodes in the editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core editor functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core editor functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1018/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1017",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1017/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1017/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1017/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1017",
    "id": 632371407,
    "node_id": "MDU6SXNzdWU2MzIzNzE0MDc=",
    "number": 1017,
    "title": "Add picture-in-picture camera previews to the editor when a Camera3D node is selected",
    "user": {
      "login": "bjr29",
      "id": 26935086,
      "node_id": "MDQ6VXNlcjI2OTM1MDg2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26935086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjr29",
      "html_url": "https://github.com/bjr29",
      "followers_url": "https://api.github.com/users/bjr29/followers",
      "following_url": "https://api.github.com/users/bjr29/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjr29/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjr29/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjr29/subscriptions",
      "organizations_url": "https://api.github.com/users/bjr29/orgs",
      "repos_url": "https://api.github.com/users/bjr29/repos",
      "events_url": "https://api.github.com/users/bjr29/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjr29/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-06-06T10:47:14Z",
    "updated_at": "2020-09-25T12:44:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCan't easily tell what is visible on the camera.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo have a small pop-up window like in Unity showing what is in the camera's view.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Image](https://user-images.githubusercontent.com/26935086/83942466-6f056880-a7eb-11ea-9a55-80f7edb8c511.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI image quite a few people would find this feature helpful.\r\n\r\n*Bugsquad edit (keywords for easier searching): picture in picture, PiP*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1017/reactions",
      "total_count": 13,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1015",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1015/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1015/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1015/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1015",
    "id": 631666125,
    "node_id": "MDU6SXNzdWU2MzE2NjYxMjU=",
    "number": 1015,
    "title": "Line index color of empty lines should be white",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-05T14:59:46Z",
    "updated_at": "2020-09-13T23:47:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEmpty lines aren't unsafe lines but they aren't real safe lines, they're just empty. The line index color is sometimes green (safe) and sometimes gray (unsafe). I couldn't find what it depends on.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEmpty lines/ lines with spaces/ lines with indentations should have the line index color white.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1 extends Node\r\n2 \r\n3 var test\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n_I don't have experience with add-ons._",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1015/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1013",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1013/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1013/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1013/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1013",
    "id": 631178265,
    "node_id": "MDU6SXNzdWU2MzExNzgyNjU=",
    "number": 1013,
    "title": "Add functions to impart forces and impulses on SoftBody nodes",
    "user": {
      "login": "theketchupdude",
      "id": 38171793,
      "node_id": "MDQ6VXNlcjM4MTcxNzkz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38171793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theketchupdude",
      "html_url": "https://github.com/theketchupdude",
      "followers_url": "https://api.github.com/users/theketchupdude/followers",
      "following_url": "https://api.github.com/users/theketchupdude/following{/other_user}",
      "gists_url": "https://api.github.com/users/theketchupdude/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theketchupdude/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theketchupdude/subscriptions",
      "organizations_url": "https://api.github.com/users/theketchupdude/orgs",
      "repos_url": "https://api.github.com/users/theketchupdude/repos",
      "events_url": "https://api.github.com/users/theketchupdude/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theketchupdude/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-04T22:08:48Z",
    "updated_at": "2020-07-22T13:37:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI was seeing if I could make a controllable blob that could squish through tight spaces.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWithout any way to apply forces to the blob, it's hard to get an accurate simulation of the movement.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThese new functions would make the SoftBody easier to work with, and would mean more potential uses for this node type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe RigidBody node has `apply_impulse()` and `apply_force()` as well as central versions, so I propose adding those to the SoftBody as well.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI do not see any way to work around this issue.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe it should be a core functionality of the SoftBody because it seems like a good fit for the node's purpose.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1013/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1012",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1012/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1012/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1012/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1012",
    "id": 631167014,
    "node_id": "MDU6SXNzdWU2MzExNjcwMTQ=",
    "number": 1012,
    "title": "Prevent data loss on reloaded instanced scenes (which use tool scripts)",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-04T21:42:56Z",
    "updated_at": "2020-07-21T14:29:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA combat system which makes heavy use of buttons on the screen.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a custom \"BTN\" scene with a tool script.\r\n(The BTN node is actually a generic GUI node that has a child Label for text windows and other UI, but can also be clicked.)\r\nI'm instancing a bunch of these BTN nodes to create my game's GUI.\r\nIt uses an exported `setget` function to set the text of the child Label in the editor to preview how the scene will look.\r\n\r\nThe problem is that, because it uses a tool script, whenever I make any change to the script and save it, all the instanced scenes are reloaded and their `setget` setter functions get called again, causing the button text to be reset.\r\nThe sizes of the buttons also get reset, so the entire GUI layout gets screwed up.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAutomatically re-apply all property settings changes on instanced scenes whenever they are reloaded.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI found a workaround to this problem by doing the following:\r\n\r\n1. Set the Main scene (which contains the instanced BTNs) as a tool script.\r\n2. In the **Main.gd** `_ready()` function, grab its .tscn file using a Directory search. (_see Notes section_)\r\n3. Parse the text of the Main.tscn file and extract all of the saved properties of each instanced BTN.\r\n4. Find and grab each BTN in the Main scene using get_node() and the node paths in the Main.tscn file.\r\n5. Set each of those BTNs' properties again using the data found in the .tscn file.\r\n6. Call setter functions for each property, if they have one. (_see Notes section_)\r\n\r\n**Things that didn't work:**\r\n- Attempts to save the BTNs' data into a dictionary with instance ID keys failed because when the scenes reloaded, each BTN got a new instance ID.\r\n- Saving the data into a non-tool script didn't work since the tool script would run before the non-tool script.\r\n- Saving the data into another tool script didn't work because those scripts also got reset upon restarting the engine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would benefit anyone that uses tool nodes to lay out a scene.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUsers would expect stability of their node data without needing an add-on.\r\nIt should \"just work\", and you should be able to quickly set up a scene in the editor for rapid prototyping/testing.\r\nWe shouldn't have to worry about our scene setup being reset for inexplicable reasons and losing hours (or more) of work.\r\n\r\nAlso, this requires a lot of complex code to do manually.\r\nThe fact that nodes can lose their data because they use tool scripts is dangerous and can be a huge setback.\r\nThis had me pulling my hair out until I implemented my workaround (which is far from perfect.)\r\n\r\n**Notes:**\r\nStep 2 (grabbing a scene's .tscn file) was not as simple as I had hoped.\r\nA function like  `Node.get_tscn()` would have been helpful. (This could be a separate proposal)\r\nMy method currently relies on the .tscn file having the same name as the root node, and there not being another .tscn file of the same name.\r\n\r\nStep 6 currently relies on the setter function being named \"set_\" + <property_name>, but obviously not everyone names their setters that way.\r\nIf there is a built-in way to check if a property has a setter, so that it can be called automatically instead of directly setting the value, that would be useful here.\r\n(Vnen's proposal #844 might take care of step 6 automatically, but I'm not sure.)\r\n\r\nI can provide an example project with this code if it will help, but it might be too specific to my project, and there's probably a much better way to do this than my workaround.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1011",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1011/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1011/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1011/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1011",
    "id": 630904810,
    "node_id": "MDU6SXNzdWU2MzA5MDQ4MTA=",
    "number": 1011,
    "title": "Refactor the pause system to allow pausing arbitrary parts of the scene tree",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2020-06-04T15:03:03Z",
    "updated_at": "2020-11-18T10:11:23Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nSee the discussion in https://github.com/godotengine/godot/issues/15993, there are already many users desiring this feature and giving example use cases. In fact, most of the users in the thread seem to be confused and thought it was a bug at first, since how they expected pausing to work is how this proposal works.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe current pause enum looks [like this](https://docs.godotengine.org/en/latest/classes/class_node.html#enumerations):\r\n\r\n> * **PAUSE_MODE_INHERIT = 0** — Inherits pause mode from the node’s parent. For the root node, it is equivalent to PAUSE_MODE_STOP. Default.\r\n> * **PAUSE_MODE_STOP = 1** — Stops processing when the SceneTree is paused.\r\n> * **PAUSE_MODE_PROCESS = 2** — Continue to process regardless of the SceneTree pause state.\r\n\r\nThe SceneTree pause state referenced above is [a boolean in SceneTree](https://docs.godotengine.org/en/latest/classes/class_scenetree.html#class-scenetree-property-paused).\r\n\r\nChanging the pause mode for any node has no effect except for when the `paused` boolean is true. This means that the only purpose of changing the pause mode is to force specific nodes to be **un**paused, and the only purpose of `PAUSE_MODE_STOP` is to force pausing of a node under an unpaused one. This also means that there is no way to pause just some parts of the scene tree.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to refactor the pause system to allow pausing arbitrary parts of the scene tree. I propose to simplify the system such that the only thing that determines the pause state is the pause mode enum (renamed to `PauseState` to reflect this). This means that SceneTree's `paused` boolean will be removed. Then, the enum would behave like this:\r\n\r\n* **PAUSE_STATE_INHERIT = 0** — Inherits pause state from the node’s parent. For the root node, it is equivalent to PAUSE_STATE_PROCESS. Default.\r\n* **PAUSE_STATE_STOP = 1** — Stop processing always.\r\n* **PAUSE_STATE_PROCESS = 2** — Continue processing always.\r\n\r\nThis means that if you wanted to pause the whole scene tree, instead of `get_tree().paused = true`, you would instead use `get_tree().root.pause_state = PAUSE_STATE_STOP`. Unlike the current system, this proposed system can be used to pause or unpause any node in the scene tree. You can simply replace `get_tree().root` with a reference to the node you want to pause or unpause. Unlike the current system, the ability to pause any node is not dependent on the SceneTree's (or root node's) pause state.\r\n\r\nI would appreciate it if anyone can share use cases that can't work with the above system. I can't think of any, the system seems to work really well in my head considering how simple it is.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe behavior is explained above, and it would behave like that. I could implement it if desired. EDIT: https://github.com/godotengine/godot/pull/39606\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, not really. However, this new system is a lot more flexible if users did want to have a lot more manual control over how their game is paused.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is about refactoring a core feature, so it is already in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1011/reactions",
      "total_count": 47,
      "+1": 33,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 5,
      "rocket": 4,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
