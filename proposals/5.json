[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1570",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1570/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1570/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1570/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1570",
    "id": 709306016,
    "node_id": "MDU6SXNzdWU3MDkzMDYwMTY=",
    "number": 1570,
    "title": "Add a \"virtual space\" option in the script editor (allow placing the caret after end of line)",
    "user": {
      "login": "m6502",
      "id": 1667712,
      "node_id": "MDQ6VXNlcjE2Njc3MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1667712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m6502",
      "html_url": "https://github.com/m6502",
      "followers_url": "https://api.github.com/users/m6502/followers",
      "following_url": "https://api.github.com/users/m6502/following{/other_user}",
      "gists_url": "https://api.github.com/users/m6502/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m6502/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m6502/subscriptions",
      "organizations_url": "https://api.github.com/users/m6502/orgs",
      "repos_url": "https://api.github.com/users/m6502/repos",
      "events_url": "https://api.github.com/users/m6502/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m6502/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-25T21:55:34Z",
    "updated_at": "2020-09-25T23:09:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nNot related to any specific project. This proposal is more of a request for comments :-) \r\n\r\nI was commenting about virtual space at the VS Code Github project page, as someone opened an issue requesting if this could be added to that editor. While I would find that addition very welcome when using VS Code it just came to my mind that in fact the code editor I'm using nowadays is the built-in editor in Godot. So why not ask here :-)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAt that project's issue I talk about two types of people, some who use the mouse for source navigation, and some who only use the keyboard.\r\n\r\nWhen using a mouse your point of reference is the mouse cursor. You always know where the cursor is, so you know where your next (mouse) action is directed to.\r\n\r\nThen there's the other type of people who are mainly at the keyboard. When depending on the mouse while editing source code the speed of your actions is strongly limited because there's always a time penalty when having to move your hand from the keyboard to the mouse and then back to the keyboard to continue typing. Some people find this painfully slow and work 100% of the time at the keyboard. \r\n\r\nWhen using only the keyboard your point of reference is the caret. The problem is that without having virtual space if you go one line up or down the caret may or may not continue being positioned at the same column, randomly jumping to another position if the line size is smaller than the current column position. When this happens you are literally losing your point of reference and you can't continue working because this induces tons of typing at the wrong place errors. You have to stop what you were doing, maybe undoing what you put at the wrong place, and seach for the caret. When you are used to virtual space this literally drives you crazy because you know there's no need for enduring that pain. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nVirtual Space detaches the existence of characters in the source file from being able to move to wherever you need, even if it's empty positions. Enables you to insert text there, and adds previous white space if necessary. \r\n\r\nVirtual Space enables a very efficient workflow while programming and reading source code, makes it easy to align comments to the right and much more. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nTo implement Virtual Space the editor needs to stop caring about the line sizes and just allow the caret to be positioned at any place. When typing a character spaces or tabs are inserted if required. \r\n\r\nAn option in the editor preferences to enable this would be fantastic.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is a feature of the code editor...\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n... So it needs to be in the editor code.\r\n\r\n----\r\n\r\nI'm 100% willing to try to implement this by myself in the future. But if someone wants to step up and give it a try implementing it I would be equally happy.  I think there's a sizable portion of programmers who would welcome this option to be implemented in Godot. The \"word processor\"-like behavior feels plain wrong when you have tried virtual space. \r\n\r\nWith a language like GDScript that gives a semantic meaning to the indentation I think this is even more interesting to consider.\r\n\r\nWhat do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1570/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1569",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1569/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1569/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1569/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1569",
    "id": 709212786,
    "node_id": "MDU6SXNzdWU3MDkyMTI3ODY=",
    "number": 1569,
    "title": "Some missing styles for controls",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-25T19:00:21Z",
    "updated_at": "2020-09-25T22:13:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWin16 theme\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere are some missing styles for controls\r\n\r\n- v and h scrollbar does not have a pressed and disabled icons equivalent for the increment and decrement arrows\r\n- window dialog doesn't have a pressed and disabled icons equivalent for the close button\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nimplement icons for these states so we can have pressed and disabled styles for them\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nyou may be wondering.. disabled scrollbar icons?\r\nyes this happens when there is not need for scrollbars instead of them disappearing (optional) only the scrollbar handle would disappear and the increment and decrement icons would become disabled\r\n\r\nthe close button would be able to be disabled through the property browser\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nidk styles aren't the easiest thing to implement and I think having this feature would be useful\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits a extra icons yes but its a pretty basic feature when it comes to the state of controls\r\n\r\n**Updates**\r\n- UPDATE 9/25/2020:  \r\n  - tab containers also do not have pressed or disabled icons they seem to emulate disabled with \r\ntransparency\r\n   - sliders don't have focus style for slider area or pressed icon for the grabber\r\n   - tree control doesn't have a way to style sub controls and its impossible to do doted tree lines \r\n   - tree and spin box doesn't have disabled and pressed icons for up and down separately \r\n   - tree  also can't edit the horizontal line width without effecting the spacing   ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1567",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1567/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1567/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1567/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1567",
    "id": 709037294,
    "node_id": "MDU6SXNzdWU3MDkwMzcyOTQ=",
    "number": 1567,
    "title": "Create and serialize import presets",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-25T15:43:46Z",
    "updated_at": "2020-09-29T20:45:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nMultiplayer 3d game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n> _Not able to have time for this. So it's open to anyone to work on._\r\n\r\nUsing lossy compression for all images decreased the project size by a large margin.\r\n\r\nHowever, setting the import settings requires changing the default and deleting all the import files.\r\n\r\nDeleting the .import file to reset the import to a new default is a bug. \r\n\r\n> \\<vnen> it's not a bug because you can't tell which ones are using the default because it is the default or because the default preset happens to be what you want for this particular file\r\n> \\<iFire> why can't we tell\r\n> \\<vnen> so if this is done, there must be a way to specify those\r\n> because AFAIK, there's no way to mark them\r\n> so the .import file for both will be the same\r\n\r\nThis is one of the reasons why https://github.com/godotengine/godot-proposals/issues/1060#issuecomment-697559163 was proposed.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf one changes the defaults for ones project, one is forced to delete all the relevant .import files to get them reimported with new defaults\r\n\r\n> \\<vnen> I guess it would be a good solution to allow you to create presets, and changing them automatically applies to the whole project\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Encode the \"preset\" property into the import file. \r\n1. Save the presets into .godot/import_preset.cfg\r\n1. Do not save the default preset class properties into the .import file—only the different ones.\r\n1. When an import file is loaded, first load the preset class, then load the properties. Properties different from the preset should override as expected.\r\n1. Changing the class-default changes all the imports (as expected, might be a long scan to reimport everything)\r\n1. Existing legacy presets names are saved as is\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nSerialized presets modifies how presets are serialized to disk and is a core functionality change.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSerialized presets modifies how presets are serialized to disk and is a core functionality change.\r\n\r\n**See also:**\r\n\r\n* https://github.com/jahd2602/godot/compare/3882e0d006efbd076bdc6d08fb844e006d30e718...98eb965deda3cfcf2fbd509ca170aa0c36f",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1567/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1566",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1566/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1566/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1566/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1566",
    "id": 708673827,
    "node_id": "MDU6SXNzdWU3MDg2NzM4Mjc=",
    "number": 1566,
    "title": "Implement namespaces to avoid collisions in third-party add-ons",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-09-25T06:18:01Z",
    "updated_at": "2020-12-31T21:46:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGDScript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n`class_name` is a great feature and I use it often when making plugins.\r\n\r\nBut there are at least 3 problems which can occur when using `class_name`:\r\n1. If you use a custom class named say `Util` when creating a plugin, there is absolutely no guarantee that the user is not using a custom type with the same name.\r\nSo you will get\r\n    > Unique global class \"Utils\" already exists\r\n\r\n2. As the number of your custom classes gets large (imagine a room with several hundred items on the floor), you will most likely want to structure them by dividing them into logical parts (arrange all items on their shelves) for easier access. But in this case, you will face various challenges, and it seems that none of the solutions will be truly convenient\r\nespecially if you want to keep having each class separately (i.e. don't use nested classes)\r\n\r\n3. Littering the global namespace as a whole.\r\nall custom classes are visible in the global namespace. The user might mistakenly try to use your class.\r\nalso a large number of custom classes clogs up the autocomplete.\r\n\r\nthus, having a large number of custom classes is incompatible with ease of development, which, as the code base of the project grows, will force the developer to abandon their use or resort to hackу workarounds.\r\n\r\nHowever, this deprives the user of the benefits of using `class_name`.\r\nPerhaps custom classes are the most convenient way to have classes as separate files that need global access.\r\nIt's just convenient. For example, I have many utility classes with static methods as custom classes.\r\n\r\nThe problem is especially acute when creating plugins.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplementing namespaces system could solve the ploblem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine it as a new keyword - `namespace`\r\nFor example\r\n`a.gd:`\r\n```gdscript\r\nnamespace X\r\nclass_name A\r\n```\r\n\r\n`b.gd:`\r\n```gdscript\r\nnamespace X\r\nclass_name B\r\n```\r\n\r\nin this case, access to classes A and B could be done as follows:\r\n`new_script.gd`:\r\n```gdscript\r\nfunc _ready():\r\n  print (X.A)\r\n  print (X.B)\r\n```\r\n\r\nwhen trying to get class `A` from the global namespace, an error will appear:\r\n`new_script.gd`:\r\n```gdscript\r\nfunc _ready():\r\n  print (A)\r\n```\r\n> Error: The identifier \"A\" isn't declared in the current scope\r\n\r\nAs you can see, several scripts can use one namespace, which is one of the main advantages of namespaces over custom classes\r\n\r\nusing the same class inside the same namespace should lead to error:\r\n`a.gd:`\r\n```gdscript\r\nnamespace X\r\nclass_name A\r\n```\r\n\r\n`a_new.gd:`\r\n```gdscript\r\nnamespace X\r\nclass_name A\r\n```\r\n> Unique global class \"A\" already exists in namespace: X\r\n\r\n\r\n\r\nAnother important advantage of namespaces is the ability to use nested namespaces.\r\n\r\n`c.gd:`\r\n```gdscript\r\nnamespace X.Y\r\nclass_name C\r\n```\r\n`new_script.gd`:\r\n```gdscript\r\nfunc _ready():\r\n  print (X.Y.C)\r\n```\r\n\r\nIf namespace is not specified (keyword `namespace` is not used), then just the global namespace is used (as usual).\r\nThat is, when creating a script `d.gd` with `class_name D`, class D will be visible in any script.\r\n`d.gd:`\r\n```gdscript\r\n# namespace not specified, use the usual scenario\r\nclass_name D\r\n```\r\n`new_script.gd`:\r\n```gdscript\r\nfunc _ready():\r\n  print (D)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImplementing this feature not at the core level would hardly be a good solution.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1566/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1564",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1564/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1564/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1564/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1564",
    "id": 708573982,
    "node_id": "MDU6SXNzdWU3MDg1NzM5ODI=",
    "number": 1564,
    "title": "Some things I would like to see added to controls and themes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-25T01:34:25Z",
    "updated_at": "2020-09-25T08:39:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nwin95 recreation theme\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVarious missing options for controls and other derived nodes \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nPlease allows us to define separate fonts, colors and styles in controls and themes for the following states..\r\n- normal\r\n- focused\r\n- hovered\r\n- pressed,\r\n- disabled\r\n\r\nI also suggest that the following bools be added to controls..\r\n- is_hovered\r\n- is_pressed\r\n- is_disabled\r\n\r\nI suggest that the following be renamed to be more consistency..\r\n- has_focus -> is_focused\r\n\r\nI also suggest that the following signals be added to control\r\n- left click\r\n- right click\r\n\r\nthis removes many limitations with the gui library, for example...\r\n\r\nif you wanted a panel or dialog that slightly highlights when pressed, focused, or hovered\r\nif you wanted to have a button that uses a font with a shadow when its disabled\r\nif you wanted to check if a dialog is clicked or pressed\r\nif you wanted to define default styles for controls in a theme\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nok so lets first define what these states are as we know every control has them..\r\n- **disabled**: this is when the control is disabled no other state can be given to this control until it is enabled again\r\n- **focus**: this is when focus enters the control and lasts until focus leaves the control\r\n- **hover**: this is when the mouse enters the controls bounds and lasts until the mouse leaves\r\n- **pressed**: this is when the mouse is down over the control and lasts until the mouse leaves or is released (note we might need a way to set what mouse buttons effect it)\r\n- **normal**: this is when no other state is given\r\n\r\n**Q**: so you may ask is this just a button?\r\n**A**:the answer is well yes this is what a button does however this is not only limited to a button but any control.\r\n**Q**:so why can't you just use a button?\r\n**A**:the answer is because buttons do not cover every use case.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used a lot.\r\nthis might be able to be worked around with a few lines of script but you would be fighting the system.\r\nthis would just move some general logic that all controls have into the control node.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits already there but right now its limited to buttons\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1564/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1562",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1562/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1562/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1562/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1562",
    "id": 708336168,
    "node_id": "MDU6SXNzdWU3MDgzMzYxNjg=",
    "number": 1562,
    "title": "Prevent parent node from expanding when selecting child node",
    "user": {
      "login": "rudrrayan",
      "id": 47331292,
      "node_id": "MDQ6VXNlcjQ3MzMxMjky",
      "avatar_url": "https://avatars1.githubusercontent.com/u/47331292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rudrrayan",
      "html_url": "https://github.com/rudrrayan",
      "followers_url": "https://api.github.com/users/rudrrayan/followers",
      "following_url": "https://api.github.com/users/rudrrayan/following{/other_user}",
      "gists_url": "https://api.github.com/users/rudrrayan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rudrrayan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rudrrayan/subscriptions",
      "organizations_url": "https://api.github.com/users/rudrrayan/orgs",
      "repos_url": "https://api.github.com/users/rudrrayan/repos",
      "events_url": "https://api.github.com/users/rudrrayan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rudrrayan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-24T17:07:39Z",
    "updated_at": "2020-09-25T09:20:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a 2d platformer, in which I use StaticBody2D nodes as colliders as such:\r\n![image](https://user-images.githubusercontent.com/47331292/94175814-1e477780-fe8f-11ea-9e32-3fc1f5510631.png)\r\nThe reason I did it like this, is because my previous engine was gamemaker studio 2 and that was how we did it in that engine\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nevery time I select one of the nodes in order to add more colliders the parent Node2D which I used for grouping, expands and opens up its hundred's of child nodes, so when I am finished, I would have to scroll up for quite a while before collapsing the node. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI understand there is a feature that allows you to lock a node, preventing it from expanding, but it also prevents me from selecting the child nodes themselves. I am proposing an option for the parent node to be \"unexpandable\" perhaps in the right click menu of the node.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/47331292/94176807-8c406e80-fe90-11ea-86cf-cac605a6d397.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think this can be achieved using scripts or plugins, I also believe that it won't be used quite often, so having it hidden away would be fine\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImplementing this in the asset library would be difficult, and it will make it much easier for new arrivals from the gamemaker studio 2 engine to adjust to Godot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1561",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1561/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1561/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1561/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1561",
    "id": 708181578,
    "node_id": "MDU6SXNzdWU3MDgxODE1Nzg=",
    "number": 1561,
    "title": "Allow to customize C++ module name by not relying on module's directory name",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-24T13:40:03Z",
    "updated_at": "2020-10-06T14:11:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nVarious community C++ modules for Godot Engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nA lot of projects at GitHub have a convention of prepending `godot-` to the repository names related to Godot Engine. This is alright for most projects, but when it comes to C++ modules development, this is where the real problem kicks in. To name a few:\r\n\r\n* https://github.com/Zylann/godot_voxel\r\n* https://github.com/rakai93/godot_voronoi\r\n* https://github.com/Xrayez/godot-anl\r\n\r\nThe build system in Godot detects C++ modules at build-time and infers module names directly from directory base names where these modules are located. Those exact directory names are then taken to generate various headers which hardcode various registering callbacks such as `register_*_types` to be included in `register_modules_types()` for each detected module.\r\n\r\nNow, if you take these two facts, they don't play together, because:\r\n1. When someone clones a repository, it's likely that a module might be cloned as-is, for instance:\r\n```bash\r\n# This is going to be cloned under `godot-anl` directory by default...\r\ngit clone https://github.com/Xrayez/godot-anl\r\n```\r\n2. While the build system can still successfully infer the name, it cannot change the code which was written to expect the particular module name in `register_types.h/cpp` sources.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to add an ability to customize the module names via `config.py::get_name()`, instead of relying on directory names.\r\n\r\nThis also alleviates a possible problem which may arise in the future, mainly when different modules could have the same directory names (when using `custom_modules` build option which can specify a list of different directories where modules can be found). For instance, I may have a `game` module (godotengine/godot-proposals#565.), but someone implemented a similar module in their own project which I want to reuse. This could result in module shadowing in the best case (which is a feature btw, if you now what you're doing), and build error in the worst case.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe first thing which can be done is to fetch the module name explicitly via `config.py::get_name()`. If such method doesn't exists, the build system shall still infer the name from the directory name. That way, the build system will not rely on directory name, which would solve the issue, C++ modules developers would have to actually define `config.py::get_name()` themselves:\r\n\r\n```python\r\ndef get_name():\r\n    return \"anl\"\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou have to constantly remind people that they must rename the module directory name in order to successfully compile a module. In fact, I've even [written some documentation in Goost](https://goost.readthedocs.io/en/gd3/development/modules.html#adding-community-modules) which reflects this limitation.\r\n\r\nThis is how it should be done currently:\r\n```bash\r\n# Cloning properly:\r\ngit clone https://github.com/Xrayez/godot-anl anl\r\n# Adding as submodule in another git project:\r\ngit submodule add --name anl https://github.com/Xrayez/godot-anl modules/anl\r\n```\r\n\r\nYet some people go as far as to just fork a module and modify those names directly in their forks...\r\n\r\nSome modules better follow the previously mentioned naming convention because:\r\n1. It doesn't make sense to give a different repository name in case a module simply acts as a wrapper for another C++ library adapted to work with Godot types.\r\n2. Do not want to create confusion with other large projects, as in the case of https://github.com/GodotExplorer/ECMAScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHave to modify the build system itself so the rest of the community can benefit from this.\r\n\r\nI can implement this myself, having previously worked on `custom_modules` support in godotengine/godot#36922.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1561/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1560",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1560/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1560/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1560/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1560",
    "id": 707871694,
    "node_id": "MDU6SXNzdWU3MDc4NzE2OTQ=",
    "number": 1560,
    "title": "Allow type checking of child classes using the `is` keyword",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-09-24T05:42:40Z",
    "updated_at": "2020-11-15T20:55:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nRPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing the `is` keyword to check if an object is an instance of a child class doesn't work.\r\n![Class Instance Error](https://user-images.githubusercontent.com/60025044/94104834-9cf3d480-fdfd-11ea-8725-be38556d78d0.png)\r\n\r\nUsing a variable instead of `self` will make the error \"go away\", but you'll get a cyclic dependency when you try to run the game.\r\n\r\n![Cyclic Dependency 2](https://user-images.githubusercontent.com/60025044/94107237-a895ca00-fe02-11ea-9f3d-c439f27588d5.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn the script editor, when using the `is` keyword to check if `object A` is an instance of `class B`, only show an error if `class B` does not extend `class A`.\r\nWhen running the code, return `true` if `object A` is an instance of `class B` as usual.\r\nThis would allow you to put all the code in the base class script instead of in each child class script.\r\n(This would require solving the cyclic dependency problem, though)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n(pseudo code - when Godot sees the `is` keyword)\r\n\r\n```\r\nvar object_A = < object before is keyword >\r\nvar class_A = < class of object_A >\r\nvar class_B = < class after is keyword >\r\n\r\nif game_is_running:\r\n\treturn (object_A is class_B)\r\nelse:\r\n\t# (in editor)\r\n\tif class_B extends class_A:\r\n\t\tpass\r\n\telse:\r\n\t\t< Error >\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI've been working around this issue by overriding `get_class()` in each of the child classes, and then using:\r\n\r\n```\r\nmatch __character_object.get_class():\r\n\t\t\"Player\":\r\n\t\t\t< Player code >\r\n\t\t\"NPC\"\r\n\t\t\t< NPC code >\r\n\t\t_:\r\n\t\t\t< Error, forgot to override get_class() >\r\n```\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a core script parser feature.\r\n\r\nThis seems like it should work, since you can say \"This `animal` is a `dog`\", and it makes perfect sense.\r\nEven though `dog` is a \"subclass\" of `animal`, it's still a logically correct statement.\r\n\r\nIt would just be simpler if the `is` keyword worked this way, so that the user doesn't have to remember to override `get_class()` and check that every time.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1560/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1559",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1559/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1559/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1559/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1559",
    "id": 707815298,
    "node_id": "MDU6SXNzdWU3MDc4MTUyOTg=",
    "number": 1559,
    "title": "RichTextLabel: Add ability to get col/row position at mouse or arbitrary point",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-24T03:05:50Z",
    "updated_at": "2020-09-24T03:57:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn gdscript I can't find a way to get col/row position at mouse for `RichTextLabel`.\r\nmaybe it would also be useful to have this feature for a regular `Label`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding appropriate api methods would solve the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`get_position_at_mouse()` returns the text column an row indices at mouse\r\nor \r\n`get_position_at_point(point:Vector2)` returns column an row indices at some point\r\nImo the second one is more flexible.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno it can't, since there's no api for that (available in gdscript)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nnot sure",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1558",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1558/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1558/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1558/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1558",
    "id": 707806947,
    "node_id": "MDU6SXNzdWU3MDc4MDY5NDc=",
    "number": 1558,
    "title": "RichTextLabel: add ability to get text selection",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-24T02:40:33Z",
    "updated_at": "2020-09-24T03:29:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript editor plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRichTextLabel lacks `get_selection()` method.\r\nIt seems there is no way to get selection of text (selection start and end indices)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n`get_selection()` method\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt could return start and end indices, where the selection starts and ends in the text.\r\n\r\ngetting only text (using something like `get_selected_text()` method) could also be a convenient but less flexible solution, since there may be also a need for getting additional information about the selection (for example, get the line number where the selection begins or ends, etc.).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno it can't, since there's no api for working with selection at all (available in gdscript)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nnot sure",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1557",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1557/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1557/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1557/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1557",
    "id": 707738260,
    "node_id": "MDU6SXNzdWU3MDc3MzgyNjA=",
    "number": 1557,
    "title": "Change name of ' Translation ' to ' Position' in Transforms . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 9,
    "created_at": "2020-09-23T23:16:15Z",
    "updated_at": "2020-12-17T17:25:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was sitting making some visual script, and I noticed that the ' place ' of, a character, or object is called ' translation ' . . However, when making the ' logic ', for instance, to make a vector, I thought it makes more sense to say, ' GET position ' of enemy MINUS ' GET position ' of player, to make a vector, from player, to enemy . . I know ' translation ' is a pretty good name, but when we do the math, what we want to do, ' when thinking ', is GET position of something, MINUS position of something else . . I think under transforms, it might make more sense to write ' Position ', also since translation of refers to movement, ie. translate something from A to B, and not ' technically ' a position, it'd make more sense to call ' Translation ' ' Position ' . .\r\n\r\nThat way, when we make boxes in visual script, the names of the boxes make more sense, or so . . ie. to make a vector from player to enemy the box, should be called Get Position ( enemy ) MINUS Get Position ( Player ), not ' get translation ' . . It's a little thing, but it'd make the engine have names, that ' match ' the words, for how we think, more . .\r\n\r\nI was also thinking, since under Transform is says Rotation Degrees, same way some boxes have a ' Index ' setting, ie. for a rotation, one can disable ' Default Settings ', that one could have an ' index ' for a GET rotation box, that outputs either radians, or degrees . . I'm not sure, just some thoughts . . It'd make the engine a bit more, like what we ' think ', when doing math, that's all . . It'd just be a small help, especially for visual script coders, or so . .\r\n\r\nAlso, for some reason the written code, for keyboard presses is called Input(), but in visual script, it is called action . . imo, in visual script, it could be called Input also, or User_input, I think it makes more sense to make it match what is written code, since then after one has learned visual script, one is more ready, to begin learning written code, and so as much as possible, the words in visual script boxes match, what happens in written code, to help talk between written coders, and visual script game makers, or so . . These are very minor things, but they often bug me . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThese are just really small changes, that I think would make the coding experience a bit nicer, nothing more, a bit silly . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nChange transform name ' Translation ', to ' Position ', so when making code, it matches more, how we think in math, that's all . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't re-change the engine, very well, as a new user, it'd take a long time . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it would just make the engine make a bit more sense, to how we think, from math, making it a bit faster . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1557/reactions",
      "total_count": 5,
      "+1": 1,
      "-1": 4,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1556",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1556/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1556/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1556/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1556",
    "id": 707727392,
    "node_id": "MDU6SXNzdWU3MDc3MjczOTI=",
    "number": 1556,
    "title": "Menu buttons should be separated into menu items as nodes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-23T22:51:10Z",
    "updated_at": "2020-10-20T18:36:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\na spaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to create a editor however I find that menu buttons are not very well thought out.\r\nfirst of all they require a editor to edit them\r\nsecond they don't easily support nested menus\r\nthird they aren't easily bindable to click events because you have to match between the items since they are internal to the menu button\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest making the menu button and other menu controls obsolete and introducing a menu item which can be nested infinitely and hooked up separately.\r\n\r\nit also wouldn't need a editor because each menu item would be its own control with properties \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nso basically it would looks something like this for a titlebar\r\n- dialog (root)\r\n  - menu item (file)\r\n     - menu item (new)\r\n     - seperator\r\n     - menu item (open)\r\n     - menu item (save)\r\n     - menu item (save as..)\r\n     - seperator\r\n     - menu item (exit)\r\n\r\neach one would have a click or pressed event\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used as often as the current system if not more and it can be worked around but its inconvenient and not standard to other ui frameworks \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits already in its just not done a ideal way\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1556/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1554",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1554/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1554/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1554/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1554",
    "id": 707687036,
    "node_id": "MDU6SXNzdWU3MDc2ODcwMzY=",
    "number": 1554,
    "title": "Specify sub-directory in assets to load files instead of root assets directory",
    "user": {
      "login": "rodly",
      "id": 773095,
      "node_id": "MDQ6VXNlcjc3MzA5NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/773095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodly",
      "html_url": "https://github.com/rodly",
      "followers_url": "https://api.github.com/users/rodly/followers",
      "following_url": "https://api.github.com/users/rodly/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodly/subscriptions",
      "organizations_url": "https://api.github.com/users/rodly/orgs",
      "repos_url": "https://api.github.com/users/rodly/repos",
      "events_url": "https://api.github.com/users/rodly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-23T21:20:17Z",
    "updated_at": "2020-09-23T21:27:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere are a lot of assets to my project and currently they pollute the root assets directory, i'd like to have a sub-directory purely for Godot\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nProvide a way to specify a root directory for Godot to search for assets\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGodot editor export setting for asset sub-directory\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSorry, i'm not sure\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1554/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1551",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1551/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1551/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1551/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1551",
    "id": 706996973,
    "node_id": "MDU6SXNzdWU3MDY5OTY5NzM=",
    "number": 1551,
    "title": "Improve workflow of File and Directory",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-23T03:34:45Z",
    "updated_at": "2020-10-21T11:15:02Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nConsidering reworking much of the File and Directory workflow for 4.0, and making this issue to brainstorm and discuss what we should change.\r\nKind of a continuation of https://github.com/godotengine/godot-proposals/issues/1225\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, the system for files and directories is quite verbose and takes a lot of boilerplate.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI want to take inspiration from Java's `File` API.\r\n\r\n- Each file object must already be connected to a file or directory\r\n- ~~\"`File`\" can represent a **file or a directory**~~\r\n- **Directory contents can be iterated with `get_contents()`**\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\n# Construct the file\r\n# File should be immediately constructed with a path, and flags optionally\r\nvar icon = File.new(\"res://icon.png\", File.READ)\r\nprint(icon.get_path()) # res://icon.png\r\nprint(icon.get_name()) # icon.png\r\n```\r\n\r\n```gdscript\r\nvar music_directory = Directory.new(\"res://Music\")\r\n# Idea: get_contents() can return a list or stream of `File`s\r\n# Q: Should there also be a method that returns subfolders? What if the user wants both files and subfolders?\r\n#     I don't think that there's much of a good reason to be honest since they are both different data types.\r\nfor song_file in music_directory.get_contents():\r\n    print(\"Loading song file at \" + song_file.get_name())\r\n    # Load could also take a file\r\n    var song = load(song_file)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nFiles and Directories are used very often\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nFile is already part of Godot's core\r\n\r\n---\r\n\r\n**Edit**: On second thought, not sure if `File` and `Directory` should be compacted to one class, since it is misleading that `File.new(\"res://icon.png\").get_contents()` compiles. People may even think that `get_contents` has something to do with the binary part of a file.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1551/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1550",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1550/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1550/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1550/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1550",
    "id": 706493442,
    "node_id": "MDU6SXNzdWU3MDY0OTM0NDI=",
    "number": 1550,
    "title": "Close a script in Editor when deleting it",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-09-22T15:40:41Z",
    "updated_at": "2020-10-18T14:22:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen deleting a script with godot filesystem (`right mouse click` - `Delete`), I also need to manually close it from script list in ScriptEditor (if it is opened). This can be inconvenient especially when doing it often.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nClosing a script in Script Editor automatically when deleting it could resolve it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen deleting a script for example using `right mouse click` - `Delete` in Godot filesystem, the deleted script could be deleted from ScriptEditor script tabs automatically this way one wouldn't need to press `right click` - `Close` or `Ctrl+W` to close the script.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nusing plugins - maybe, not sure about \"a few lines\" tho\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think plugins can do that, but I alse think that at least having an opion to automatically close scripts when they are deleted would be useful at the core level.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1550/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1548",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1548/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1548/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1548/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1548",
    "id": 706263382,
    "node_id": "MDU6SXNzdWU3MDYyNjMzODI=",
    "number": 1548,
    "title": "Add shortcut for toggling Word Wrap in Script Editor",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-22T10:34:56Z",
    "updated_at": "2020-09-22T10:34:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGame using GDScript.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I'm writing script, I don't really care about line length, so some of them get quite long. This is mostly fine, but sometimes when I try to edit a long line, it's not easy to precisely put the cursor. Well, I could just keep lines short, but that requires putting `/` at the end of lines, which looks awkward IMO. I could also just enable Word Wrap, but I find it a bit confusing when it's always on.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn VS Code there's a dedicated shortcut to quickly toggle word wrap. I find it quite handy to have. Would be useful to have one in Godot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd a shortcut in Script Editor that will toggle Word Wrap editor setting. Or it could even work internally in the script editor, it doesn't need to be permanent.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. You could theoretically write a plugin, but not sure if it's possible to add a shortcut in a specific editor, which means it would need to be global.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs said above, it's not 100% possible to make a proper plugin.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1548/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1547",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1547/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1547/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1547/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1547",
    "id": 706134328,
    "node_id": "MDU6SXNzdWU3MDYxMzQzMjg=",
    "number": 1547,
    "title": "Joint inspector properties layout changes",
    "user": {
      "login": "addmix",
      "id": 38119387,
      "node_id": "MDQ6VXNlcjM4MTE5Mzg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38119387?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/addmix",
      "html_url": "https://github.com/addmix",
      "followers_url": "https://api.github.com/users/addmix/followers",
      "following_url": "https://api.github.com/users/addmix/following{/other_user}",
      "gists_url": "https://api.github.com/users/addmix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/addmix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/addmix/subscriptions",
      "organizations_url": "https://api.github.com/users/addmix/orgs",
      "repos_url": "https://api.github.com/users/addmix/repos",
      "events_url": "https://api.github.com/users/addmix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/addmix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-22T07:09:27Z",
    "updated_at": "2020-09-22T09:47:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on an FPS framework and I wanted to use generic 6DOF joints to control the arms/gun as to make it feel more wobbly than a static connection.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn the property inspector the linear/angular limit/motor/spring variables are ordered as such\r\n![image](https://user-images.githubusercontent.com/38119387/93852328-13ae9780-fc6f-11ea-9885-64a6094152cb.png)\r\nThis is extremely bulky and hard to navigate, taking a few seconds to find the correct property in the list\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nrefactoring the list to be ordered can make the editor more cleanly and easier to navigate\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHaving a layout more akin to something like this\r\n\r\n```\r\nlinear limit\r\n>x\r\n>y\r\n>z\r\nlinear motor\r\n>x\r\n>y\r\n>z\r\nlinear spring\r\n>x\r\n>y\r\n>z\r\nangular limit\r\n>x\r\n>y\r\n>z\r\nangular motor\r\n>x\r\n>y\r\n>z\r\nangular spring\r\n>x\r\n>y\r\n>z\r\n```\r\n\r\nwith the x, y, and z values being in the drop down section of the property\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would make editing values for joints unbelievably more time efficient\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause it modifies a core feature's inspector layout to be more usable than it is in it's current form",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1547/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1545",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1545/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1545/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1545/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1545",
    "id": 705663733,
    "node_id": "MDU6SXNzdWU3MDU2NjM3MzM=",
    "number": 1545,
    "title": "Replace Category and Name with a single property Name field in the Project Settings",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-21T14:41:22Z",
    "updated_at": "2020-09-22T14:30:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is inconvenient to copy a two-part setting name, while the ProjectSettings singleton uses a single name.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nOne single field from which you can copy the entire setting name.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![](https://user-images.githubusercontent.com/47700418/93780002-48e7c500-fc30-11ea-805e-42bc1536e9d2.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think not, you still have to copy it twice.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is just the functionality of the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1545/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1543",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1543/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1543/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1543/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1543",
    "id": 705222252,
    "node_id": "MDU6SXNzdWU3MDUyMjIyNTI=",
    "number": 1543,
    "title": "Add different icons to each data - type in the res folder / HDD dock",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-21T00:50:03Z",
    "updated_at": "2020-09-23T15:00:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, atm . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, many of the icons in the ' res ' folder, look the same, which can be a bit confusing . . .\r\n<img width=\"226\" alt=\"Skærmbillede (299)\" src=\"https://user-images.githubusercontent.com/61069740/93725950-92de9580-fbb3-11ea-9db7-d34aef005da7.png\">\r\n\r\nI was wondering, if we could get some easier to read ' icons ', ie. either a visual easy ' to find ' icon, or just some letters, inside the ' document ' icons . . it would help read what was in the res:// folder, and speed up game making, also . .\r\n\r\nHere are some simple, but easily recognizable icons, or a style . .\r\n\r\n![2020-09-21 0240](https://user-images.githubusercontent.com/61069740/93726015-dcc77b80-fbb3-11ea-9367-52e0e82c99e5.jpg)\r\n\r\nIdeally, we'd need some beautiful, nice icons, but the above is sort of a ' functional - working ' style, ie. it'd be enough . . One could also just write, with bigger letters, inside each icon, for example . .\r\n\r\n<img width=\"654\" alt=\"Skærmbillede (299)\" src=\"https://user-images.githubusercontent.com/61069740/93726069-2617cb00-fbb4-11ea-9a4a-ca622d4b75a4.png\">\r\n\r\nImo, having nice icons could make it more fun, to work with Godot, also . . However, actually making these icons, so they fit well with the editor, or so, is beyond me, the above are just suggestions . . Same way in visual script, the different boxes have a different colored header, maybe the icons could have a slightly different color, also . .\r\n\r\n<img width=\"225\" alt=\"Skærmbillede (299)\" src=\"https://user-images.githubusercontent.com/61069740/93726128-72fba180-fbb4-11ea-998e-44411d0310c2.png\">\r\n\r\nGuess my point is, it would be nice if the icons actually we're both nice, and had colors, or at least a ' shape ', that was distinct, maybe someone can make a nice idea, not sure . . .\r\n\r\nI like these, but they're not ' the right ' ones, or so, an idea . . .\r\n\r\n![2020-09-21 0246](https://user-images.githubusercontent.com/61069740/93726153-a76f5d80-fbb4-11ea-8528-963dc920b296.png)\r\n\r\nOr . .\r\n\r\n![2020-09-21 0247](https://user-images.githubusercontent.com/61069740/93726166-b7873d00-fbb4-11ea-8cbb-51a43f85116a.png)\r\n\r\nWith each one being ' tweaked ', so they fit the engine, Thanks <3 . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust make the editor a bit nicer, to work with . . Something fun, and that makes sense, for game making, is fun, but also neat, technical, efficient, something cool . . . <3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust add a different icon pack, for the major data types, ie. imported mesh3D data, imported sound, visual scripts, png, jpeg, so on . . Right now the folder is difficult to read, bec. it's missing, compared to many other programs . . Would help keep track, and more easily find stuff, in the res:// folder dock <3 Thx . . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, I don't know the engine well enough, tbh . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nEverybody uses it all the time, so it makes sense, but someone needs to make some really nice ' Godot ' specific icons, maybe like the above, not sure, did a quick google search, for icon packs, none of them are ' just right ', or so . .\r\n\r\n<3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1543/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1542",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1542/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1542/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1542/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1542",
    "id": 705141264,
    "node_id": "MDU6SXNzdWU3MDUxNDEyNjQ=",
    "number": 1542,
    "title": "Implement UI Design Tool plugin features to core",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-20T16:35:52Z",
    "updated_at": "2020-09-22T00:55:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\nThis applies to any Project with Text\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe UX of graphically adjusting text in Godot 3.2.3 or below is extremely unconventional, counter intuitive, tedious, slow, not fun ...\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe UI Design Tool plugin behavior is akin to pretty much any Editor that has graphical text editing and design capabilities. It has familiar UI and flow. It's tons faster and intuitive to adjust multiple Label nodes at once.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![ui_design_tool](https://user-images.githubusercontent.com/47016402/93716312-5ee18100-fb6f-11ea-9b05-0c9a731df751.gif)\r\nhttps://github.com/imjp94/UIDesignTool\r\nhttps://godotengine.org/asset-library/asset/717\r\nhttps://github.com/imjp94/UIDesignTool/blob/master/CHANGELOG.md\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so. It's a usability feature first and foremost. Working around it defeats the purpose of usability.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI need this in 99.9% of all cases start a new project in Godot. Going to the asset Library every time I start a new project to install the plugin directly counters the drastic improvement of usability it provides, especially in fast prototyping and minimal test projects.\r\n\r\nThere also seems to be considerable high demand in having this as a default UI feature:\r\nhttps://www.reddit.com/r/godot/comments/iwaosq/ui_design_tool_v020_godot_32_plugin/",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1542/reactions",
      "total_count": 20,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1540",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1540/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1540/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1540/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1540",
    "id": 705062825,
    "node_id": "MDU6SXNzdWU3MDUwNjI4MjU=",
    "number": 1540,
    "title": "Add more nodes/functionality to Visual Scripting",
    "user": {
      "login": "revsyy",
      "id": 71583747,
      "node_id": "MDQ6VXNlcjcxNTgzNzQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/71583747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/revsyy",
      "html_url": "https://github.com/revsyy",
      "followers_url": "https://api.github.com/users/revsyy/followers",
      "following_url": "https://api.github.com/users/revsyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/revsyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/revsyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/revsyy/subscriptions",
      "organizations_url": "https://api.github.com/users/revsyy/orgs",
      "repos_url": "https://api.github.com/users/revsyy/repos",
      "events_url": "https://api.github.com/users/revsyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/revsyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-20T07:38:25Z",
    "updated_at": "2020-09-25T12:57:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nA clicker game :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAlthough I'm not working on a super insan game with a complex same system, it would be nice to have the same things as GDscript\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThings like making a new file, or opening a file and formatting it into a text (open txt), and other file related things plus many others\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd more nodes in Visual Scripting that allow the user to have the same functionality as GDscript. Add a node for opening the contents of a file, for example a txt file. Having the ability to open the txt file using the file dialogue would be great. This would add the ability to make something like a text editor with a save, open function. I also would LOVEE to see a node that gives us the ability to create a new file, such as in GDscript like \"file.new.\" Also the ability to add content to that newly created file (also like GDscript.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, if it won't be used than you won't need to avoid it with other lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be better for many reasons. Beginners, like myself who just recently started programming with Godot and don't know much coding knowledge and are using Visual Scripting would not want to watch more tutorials of how to install a certain add-on to make these new things possible. I am only suggesting a node \"expansion\" and so if you don't want to use the newly added nodes than you don't even have to worry about them.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1540/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1539",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1539/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1539/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1539/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1539",
    "id": 705040281,
    "node_id": "MDU6SXNzdWU3MDUwNDAyODE=",
    "number": 1539,
    "title": "Don't run `tool` scripts until scene is ready and values are populated",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-09-20T04:01:20Z",
    "updated_at": "2020-11-24T22:09:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA spaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI keep running into annoying issues with godot where the scene is not ready when tool scripts are ran\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest the following...\r\n- properties are not serialized unless they are auto properties and then only their backed fields are\r\n- tool scripts are not ran until the scene is ready and the fields are populated into the script (in that order)\r\n- when scripts are saved they are paused until populated again\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically this solve issues with exported properties throwing errors when they access nodes in tool scripts\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nidk but its not very beginner friendly if there is.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts really annoying to have to null check every time you use a node that might not be ready.\r\nI think the would be a good way to keep GDScript easy to use and would make it so much less or a pain to write tool scripts\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1539/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1538",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1538/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1538/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1538/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1538",
    "id": 704722785,
    "node_id": "MDU6SXNzdWU3MDQ3MjI3ODU=",
    "number": 1538,
    "title": "Add a TileMap `set_cell_region` method to set a rectangular area of tiles faster",
    "user": {
      "login": "dariomnz",
      "id": 63566776,
      "node_id": "MDQ6VXNlcjYzNTY2Nzc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63566776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dariomnz",
      "html_url": "https://github.com/dariomnz",
      "followers_url": "https://api.github.com/users/dariomnz/followers",
      "following_url": "https://api.github.com/users/dariomnz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dariomnz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dariomnz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dariomnz/subscriptions",
      "organizations_url": "https://api.github.com/users/dariomnz/orgs",
      "repos_url": "https://api.github.com/users/dariomnz/repos",
      "events_url": "https://api.github.com/users/dariomnz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dariomnz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-09-19T00:32:46Z",
    "updated_at": "2020-09-19T20:53:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2d game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen setting a large amount of the same tile in a tilemap inside a doble for, it takes a lot of time.\r\nFor example if you want to fill a tilemap, and then you are going to remove the tiles for creating the rooms.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe new feature is to create a new method in the tilemap class (source code) like set_cell_region.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCode in c++\r\n```\r\nvoid TileMap::set_cell_region(const Vector2 &p_start, const Vector2 &p_end , int p_tile, bool p_flip_x, bool p_flip_y, bool p_transpose, Vector2 p_autotile_coord) {\r\n    for (int x = p_start.x ; x <= p_end.x ; x++) {\r\n        for (int y = p_start.y ; y <= p_end.y ; y++) {\r\n            set_cell(x, y, p_tile, p_flip_x, p_flip_y, p_transpose, p_autotile_coord);\r\n        }\r\n    }\r\n}\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be do in 3 lines of code in gdscript but take a lot of time the execution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI already compile the engine with this new feature and I can test it.\r\nThe results are this for area of 1000x1000 tiles:\r\n\r\nTime consumed in set_cell in a double for: 4080 msec\r\nTime consumed in set_cell_region: 2345 msec\r\nset_cell_region: 42.52451% less than set_cell in a double for.\r\n\r\n\r\n\r\nI think that there is a good new feature. I already have the source code. But because I new i don't know if I need to create a pull request or this is later.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1538/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1537",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1537/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1537/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1537/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1537",
    "id": 704685635,
    "node_id": "MDU6SXNzdWU3MDQ2ODU2MzU=",
    "number": 1537,
    "title": "Improve the built-in toon shader . . ",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-09-18T22:10:27Z",
    "updated_at": "2020-09-21T06:09:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, atm . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've been using the toon shader for fun, and I saw this on a post, on Godot social media, it's a ' nicer ' toon shader . .\r\n![2020-09-18 2339](https://user-images.githubusercontent.com/61069740/93647301-676b7780-fa08-11ea-8a28-dcc32710e4b1.jpg)\r\n\r\nFrom what I can read, it is fairly easy to implement this feature ( ie. take values between 75 - 100 % lit, and give them 1 uniform shading, same for 50 % - 75 % . . ) . . This creates some really nice effects, many that like toon games use them, and overall it's just nice . . My suggestion is, the toon shader gets expanded, so one can set ' how many bands ', and for each band, what percentage ' number ' that gets clamped, maybe as a setting, in toon shader . . ie. default is, each band gets evenly divided, for 3 ' bands ' means 0-33 % get on ' shadow intensity ', 33-66 % get a medium shadow intensity, so on . .\r\n\r\nbut, so one can make it more custom, one can write . .\r\n\r\n4 bands ( opens settings ) . .\r\n\r\nband 1 35 % - 100 %\r\nband 2 20 - 35 %\r\nband 3 10 % - 20 %\r\nband 4 0-10 %\r\n\r\nThis would help place the bands, and create a much nicer toon shader, or so . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would just be an expanded ' setting ' in toon shader, so one can set ' how many ' bands, and also, where they get placed, perhaps number, from 0 - 1, so above becomes\r\n\r\n...\r\nband 3 0.1-0.2\r\nband 4 0.0 - 0.1\r\n\r\nThe last thing that could be nice, was if one could make a feature, so one can add ' black ' line, near each transition, or so . . like so . . .\r\n\r\n![2020-09-18 2339](https://user-images.githubusercontent.com/61069740/93647694-4d7e6480-fa09-11ea-8827-031b558d6d9b.jpg)\r\n\r\nAlso, if one could add a ' basic ' pattern, on certain bands, ie. looks like this . .\r\n\r\n![2020-09-18 2339](https://user-images.githubusercontent.com/61069740/93647947-e319f400-fa09-11ea-8356-4c37f24adefa.jpg)\r\n\r\nThis matches classic style, called cross-hatching, and would have to be painted, as a ' flat ' effect . . ie. from, the viewport . .\r\n![2020-09-18 2352](https://user-images.githubusercontent.com/61069740/93648038-15c3ec80-fa0a-11ea-9100-d1bd0af056c7.jpg)\r\nCross-hatching, is where you draws lines at ' one ' angle, to make shadows appear deeper, one draws them, from another angle, this 'crosshatching ' pattern could be painted on ' certain ' bands, which could also be set, under each band, or so . . Another common way, of adding shadows, is to use ' dots ', on the surface, the classic comic book look effect . . .\r\n![2020-09-18 2354](https://user-images.githubusercontent.com/61069740/93648135-56236a80-fa0a-11ea-9367-51cc35b5d155.jpg)\r\n\r\nImproving the current cartoon shader, so it can a. control how many bands are drawn, and b. one can add classic cartoon or, painting style ' overlays ', to create shadows, would be really nice . . technically, one would need a ' project pattern ' flat or, from view-port onto the bands, to create the effect . . more settings could be, where one could change the colors, of the cross-hatching or, comic book dots, in many classic paintings, they use red coal, so the cross-hatches are actually read, ie. Leonardo da Vinci drawings, sketches, or some comics, actually have blue dots, so on . . While the effect might be rudimentary, I think it could be really nice, or at least make more ' default ' settings, to work with, for beginners, that just want their 3D model to look ' toon ', and really cool, right away, without learning shaders, advanced stuff . . I also think this makes the cartoon shader far more useful, for what it is made for, ie. cartoon, comic or, animation of comics, or so . .\r\n\r\n![2020-09-18 2359](https://user-images.githubusercontent.com/61069740/93648389-f5486200-fa0a-11ea-9b7e-8df9c77277c9.jpg)\r\n\r\nNotice how the shadowy areas, I think this is a copy, have been made, using cross-hatch lines, I think one could have a box, of ' settings ', like parameters in spatialmaterial, a sub-menu under toon shader, where one could work, with this stuff, it might look cool, one could need to be able to set thickness, of the lines, or dot effect, for each band, to have a super - custom toon shader, and these things shouldn't ' bloat ' the interface, but be in an appropriate sub-setting, for toon shader . . I think it's fairly easy to implement, if one knows shaders, but I don't know that, so I can't do it . . This would make the toon shader much more versatile, and powerful, for various art-styles, and Godot more cool, for new users, ie. once there are tutorials, anyone can make a nice custom cartoon or, comics style look, or imitate ' classic ' masters, ie. techniques, to make nicer toon games <3 . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike, normal spatialmaterial has ' Parameters ', where one can set all kinds of things, make a new ' menu ' in toon shader, called ' Band shading ', and allow users to set these things, as they want, or so . . It would make it a lot nicer, and people could create amazing looking toon-games, almost right away, in Godot, as well . . I have really wanted these things for a long time, other people have asked for a nice toon shader, as well, a more versatile one, Thank you . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou need to dive into the weird world, of shaders, which is rather difficult, for new users . . Having these things in the built-in toon shader, in a way so it's doesn't bloat the engine, could make some really nice effect . . .\r\n\r\n![2020-09-19 0006](https://user-images.githubusercontent.com/61069740/93649321-fd54d180-fa0b-11ea-9cbd-9bef446013cb.jpg)\r\n\r\nIn my opinion, having read a ton of comics, and studied some amazing classic art, these two - cross-hatching, and dot ' shading ', is the TWO most popular ones, the last is simply ' band ' shading, ie. how the first image looks . . If the standard toon shader could do that, it would be really amazing, to work with . .\r\n\r\n![2020-09-19 0008](https://user-images.githubusercontent.com/61069740/93649416-3b51f580-fa0c-11ea-934c-6d613c8d08ab.jpg)\r\n\r\nIt would make the toon shader more powerful, and rounded, and help new users make amazing looking ' comic ' games, with almost no effort, which is so cool . . . <3\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBec., having this option, might mean some makes next ' Legend of Zelda ' clone, in Godot, or so . . it could be really powerful, and take in-engine toon shading to another level, for users, and make Godot the ' best ' engine to make toon games in, which is over-looked, really nice . . <3 <3\r\n\r\nThis might be complicated, the challenge is then, to make it user-friendly, while powerful, tough work, I think, once it's done, we have a whole new level of cartoon games, in Godot <3\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1537/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1535",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1535/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1535/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1535/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1535",
    "id": 704617702,
    "node_id": "MDU6SXNzdWU3MDQ2MTc3MDI=",
    "number": 1535,
    "title": "TextEditor: add option to Find in files outside the res folder",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-18T19:52:19Z",
    "updated_at": "2020-09-18T20:00:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is a useful feature to Search files by the content (`Script`-`Search`-`Find in files` or `F3`-`Ctrl+Shift+F`)\r\nbut it works only inside the `res://` folder (no way to select a root folder other than `res://` in `Find in files` popup menu).\r\nAnd I would often like to search for files in other projects as well, for example in one of my projects folders.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding ability to set search root folder other than `res://` would be great\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like in Script Editor `Open File` popup dialog, `Find in files` `Open a directory` dialog could have features of choosing an arbitrary folder on the computer\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nvery likely it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe that it is possible to write an addon (for example gdscript plugin) that can do everything that the current `Find in files` can do and even more, including the proposal feature.\r\n\r\nhowever, I believe that this is a matter of a couple of dozen lines for core feature versus hundreds of lines for an addon.\r\nThat is, creating an addon just for this feature would be like reinventing the wheel imo\r\nSo I am in favor of a \"native\" solution",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1534",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1534/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1534/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1534/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1534",
    "id": 704589650,
    "node_id": "MDU6SXNzdWU3MDQ1ODk2NTA=",
    "number": 1534,
    "title": "Project Manager: sort projects by creation date",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-18T18:59:37Z",
    "updated_at": "2020-09-18T19:23:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have many projects and I often want to sort them by creation date. I would like to do this in Godot project manager, without needing to use the OS explorer or third-party programs.\r\nBut for now there is only sorting by `Name`, `Path` or `Last Modified`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a sorting by creation date would be great\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt could be added to Project Manager `Sort:` dropdown list right below `Last Modified` and named like `Creation Date`.\r\nAs well as sorting by modification date, sorting by creation date could show newly created projects first, then older ones\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it could be worked around just using OS file explorer etc but that would be less convenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo it can't (at least making gdscript plugin) since now there is no access to Project Manager API",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1533",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1533/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1533/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1533/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1533",
    "id": 704557226,
    "node_id": "MDU6SXNzdWU3MDQ1NTcyMjY=",
    "number": 1533,
    "title": "Backport the engine unit testing framework to Godot 3.2.x",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-18T17:59:20Z",
    "updated_at": "2020-09-28T17:04:09Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine. 🙂\r\n[Goost](https://github.com/goostengine/goost) Godot Engine Extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRunning unit tests on CI is difficult using third-party plugins like [GUT](https://github.com/bitwes/Gut). Difficult to import assets using headless build of Godot for them to be tested.\r\n\r\nAs you may know, Godot Engine has unit tests now: godotengine/godot#40659. A lot of effort was put to make it functional, so most classes (if not all) can be unit tested currently in Godot 4.0 with the help of godotengine/godot#40980, which opened up a door to making this actually work for most use cases.\r\n\r\nBecause of that, we've decided that it's time to document unit testing in Godot, so I've written preliminary documentation in godotengine/godot-docs#4017 (CC @RevoluPowered).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMost users don't use Godot 4.0 in production, and rightly so. But it's also important for the stable version of Godot to have unit testing system in place.\r\n\r\nI propose that we backport the existing doctest unit testing framework to Godot 3.2, so users can benefit from using the unit testing system in Godot via C++ modules. Note that it's totally possible to write self-contained unit tests within C++ modules with the help of godotengine/godot#40720.\r\n\r\nI've been working on various C++ modules in 3.2, and I see how this could benefit other developers.\r\n\r\nPeople writing C++ unit tests in modules could also write tests for core functionality as well, so more people could test the engine internals externally, with the chance of such tests to be \"upstreamed\" to Godot, or when features written in C++ modules could be made part of Godot core if deemed useful by many developers, with tests already written.\r\n\r\nThat said, this proposal is more about community support rather than core development.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTests go through a different entry point, and people would need to compile the engine with `scons tests=yes` anyway, so this mostly shouldn't impact the stable production code, I think it's just a matter of work to be done to port existing doctest functionality to 3.2.\r\n\r\nI can implement this proposal myself.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPeople can still stick to using GUT or other GDScript-based test frameworks in their C++ modules/projects.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\ndoctest is implemented in C++, and the test runner must be implemented under `tests/`, so no.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1533/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1532",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1532/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1532/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1532/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1532",
    "id": 704387525,
    "node_id": "MDU6SXNzdWU3MDQzODc1MjU=",
    "number": 1532,
    "title": "Allow hard-coded keyboard shortcuts in GUI controls to be customised",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2020-09-18T13:39:38Z",
    "updated_at": "2020-10-02T13:18:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project:\r\nIn the Godot engine, a number of GUI controls have keyboard shotcuts 'built-in' to the C++ code. For example, in Text Edit, Copy and Paste are hard-coded to `Ctrl + C` and `Ctrl + V` respectively. This can cause issues and confusion when trying to rebind input that uses these hard-coded shortcuts.\r\n\r\nOften these shortcuts give the impression that they can be rebound... Take a look at the Script Text Editor shortcuts in Editor Settings.\r\n![image](https://user-images.githubusercontent.com/41730826/93598625-4acb4180-fa00-11ea-8fbe-3220d6dd1154.png)\r\nHowever, even if you change this binding,  `Ctrl + C` and `Ctrl + V` still both work for copy and paste, since they are built in to the TextEdit code, which ScriptTextEditor uses under the hood.\r\n\r\nRelated issues:\r\nhttps://github.com/godotengine/godot/issues/29490\r\nhttps://github.com/godotengine/godot/issues/42139\r\nhttps://github.com/godotengine/godot/issues/12164\r\nhttps://github.com/godotengine/godot/issues/17927\r\nhttps://github.com/godotengine/godot/issues/26854\r\nhttps://github.com/godotengine/godot/issues/31739 (this is loosely related - but the comment @akien-mga makes at the end is relevant - _\"A recent example: in 28561 I added a feature to convert clipboard indentation on paste, but I can't have it overwrite Ctrl+V because that's hardcoded in TextEdit. The new API should allow overriding TextEdit's input management in CodeEdit and EditorCodeEdit.\"_\r\nhttps://github.com/godotengine/godot/issues/20065 - Ideally this proposals would help make the built-in editor shortcuts more obvious.\r\n\r\n### **Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA method to be able to rebind these shortcuts which is completely separate to EditorSettings to avoid breaching https://github.com/godotengine/godot/issues/29730.\r\n\r\n### **Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**PLEASE NOTE: The implementation has changed a lot since this was first written. I am now using the InputAction system. Please read the latest comments on this post for a clearer picture of how it will work.**\r\n\r\nI have a test branch working already. Essentially, each GUI Control node would keep its own mini version of EditorSettings shortcuts which only applies to itself. Here is a mockup:\r\n\r\n**control.cpp**\r\n```cpp\r\n// *** Header *** \r\nHashMap<StringName, Ref<InputEvent>> built_in_shortcuts;\r\n\r\n// *** cpp ***\r\nvoid Control::_set_built_in_shortcut(const StringName &p_name, const Ref<InputEvent> &p_shortcut); // Protected\r\nRef<InputEvent> Control::get_builtin_shortcut(const StringName &p_name); // Public, or Protected if option 1) is chosen below.\r\nvoid Control::override_builtin_shortcut(const StringName &p_name, const Ref<Shortcut> &p_shortcut); // Public. Checks if p_name is a registered shortcut first. Not needed if option 1) is chosen below.\r\n```\r\n\r\nFrom here, I think there are 2 options.\r\n1. Controls which derive from Control define their own setters and getters for their own shortcuts. These would call `_set_built_in_shortcut` and `get_builtin_shortcut` internally. This would remove the need for `override_builtin_shortcut` In this example text edit has quite a few shortcuts so there would be a number of methods:\r\n```cpp\r\nTextEdit::set_shortcut_copy(Ref<InputEvent> p_ev) {\r\n\t_set_built_in_shortcut(\"copy\", p_ev);\r\n}\r\n\r\n// And other methods...\r\nTextEdit::get_shortcut_copy();\r\nTextEdit::set_shortcut_paste(...);\r\nTextEdit::get_shortcut_paste();\r\n```\r\n2. Use a string based implementation. Instead of methods on the derived child, use the methods in `Control` to set the shortcuts. This would rely on strings (fragile) but would not require methods on the GUI control for every shortcut.\r\n\r\nEither 1) or 2) would work... Built-in shortcuts don't change very often and C++ user's would not be adding them on the fly (like they can with EditorSettings), so this points to 1) being the better option as it does not rely on fragile strings and would be a more consistent and easy to understand API.\r\n\r\nOk, moving on... For brevity, I will use option 1) for the following examples.\r\n\r\n**Usage in nodes which derive from control, e.g. TextEdit**\r\n```cpp\r\n// Inside the Constructor, set the default key binding.\r\nRef<InputEventKey> ie;\r\nie.instance();\r\nie->set_control(true);\r\nie->set_keycode(KEY_C);\r\nset_shortcut_copy(ie);\r\n\r\n// Inside _gui_input, or wherever the shortcut needs to be checked:\r\nif (get_shortcut_copy()->shortcut_match(p_ev)) {\r\n\t// < logic for shortcut >\r\n}\r\n\r\n// For comparison, the current implementation is essentially:\r\nRef<InputEventKey> k = p_ev;\r\nif (k->get_keycode() == KEY_C && k->get_control() ) { // Oh dear... the shortcut can't be changed!\r\n\t// < logic for shortcut >\r\n}\r\n```\r\n\r\n**Usage when you want to override the shortcut... E.g. In ScriptTextEditor**\r\n```cpp\r\n// Inside ScriptTextEditor Constructor\r\ncode_editor->get_text_editor()->set_shortcut_copy(ED_GET_SHORTCUT(\"script_text_editor/copy\", TTR(\"Copy\"));\r\n// Or, if you define the shortcut at the same time:\r\ncode_editor->get_text_editor()->set_shortcut_copy(ED_SHORTCUT(\"script_text_editor/copy\", TTR(\"Copy\"), KEY_MASK_CMD | KEY_C);\r\n```\r\n\r\nNow you can change the TextEdit shortcuts via an Editor Shortcut if you like, or you can just set a custom shortcut without using EditorSettings.\r\n\r\nNote that ED_SHORTCUT is not being checked directly in the TextEdit, so if you make a change to EditorSettings it will no be used until the editor is restarted. I believe you can make the shortcuts update after a change if you handled `NOTIFICATION_EDITOR_SETTINGS_CHANGED` in `notification()` and just called `set_shortcut_...(ED_GET_SHORTCUT(...))` again. Assuming the notification is called on shortcut change - that might have to be added, but this is a small detail overall.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1532/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1530",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1530/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1530/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1530/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1530",
    "id": 704324124,
    "node_id": "MDU6SXNzdWU3MDQzMjQxMjQ=",
    "number": 1530,
    "title": "Add option to keep undo history after closing scripts",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-18T12:01:22Z",
    "updated_at": "2020-09-18T13:38:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nwhen you close a script with `close` (ctrl+w) and then open it, its undo history loses. I often do not want this, because for example I can accidentally close the script, and after that I will not be able to return to a previous undo state, if required.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBeing able to keep script undo history when closing it, would solve the problem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine it as a setting in Editor Settings like\r\n`keep undo when closing scripts`\r\nThe setting could be located in `Text Editor` - `Files` section\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI did not find API for working with scripts undo history, so I think for now it is impossible to implement this using a plugin without hacky workarounds and pitfalls",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1529",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1529/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1529/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1529/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1529",
    "id": 704063439,
    "node_id": "MDU6SXNzdWU3MDQwNjM0Mzk=",
    "number": 1529,
    "title": "Add methods to rotate Rect2 and AABB (Rect3)",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-18T03:57:56Z",
    "updated_at": "2020-09-22T07:18:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\na 3d spaceship builder\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to make a spaceship builder but I need to check rotated collisions\r\nI was wonding if rect2 and aabb(rect3) could support checking with a x, y and z rotation by 90 degree increments\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\ngiving us this ability allows us check grid coordinates with rotation allowing us to easily build 3d builders\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\naabb1.rotate(Vector3i(0,0,1)) //rotated 90 degrees on z axis\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit might be able to be worked around by implementing areas but this requires that node is present and it would be nice to be able to check collision without creating area or physics nodes\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit allows us to transform the bounding box without too much overhead\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1529/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1528",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1528/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1528/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1528/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1528",
    "id": 704060172,
    "node_id": "MDU6SXNzdWU3MDQwNjAxNzI=",
    "number": 1528,
    "title": "Rename AABB back to Rect3",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-09-18T03:47:14Z",
    "updated_at": "2020-10-15T12:21:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\naabb doesn't make sense for a 3d boundingbox it should be called aaabbb if anything but thats too long\r\nI think rect3 is short and easy to understand and use for both beginners and existing users\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nrename aabb back to rect3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nvar boxa = rect3(0,0,0,1,2,1)\r\nvar boxb = rect3(0,0,0,8,8,8)\r\nif !boxa.intersects(boxb):\r\n    placeblock()\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used alot yes and no it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits more consistent rect2 naming\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1528/reactions",
      "total_count": 9,
      "+1": 0,
      "-1": 6,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1526",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1526/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1526/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1526/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1526",
    "id": 703891392,
    "node_id": "MDU6SXNzdWU3MDM4OTEzOTI=",
    "number": 1526,
    "title": "Add an API for registering localized resources programmatically",
    "user": {
      "login": "spacechase0",
      "id": 665679,
      "node_id": "MDQ6VXNlcjY2NTY3OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/665679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spacechase0",
      "html_url": "https://github.com/spacechase0",
      "followers_url": "https://api.github.com/users/spacechase0/followers",
      "following_url": "https://api.github.com/users/spacechase0/following{/other_user}",
      "gists_url": "https://api.github.com/users/spacechase0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spacechase0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spacechase0/subscriptions",
      "organizations_url": "https://api.github.com/users/spacechase0/orgs",
      "repos_url": "https://api.github.com/users/spacechase0/repos",
      "events_url": "https://api.github.com/users/spacechase0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spacechase0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-17T20:33:25Z",
    "updated_at": "2020-09-17T20:48:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a game which I would like to have extensive modding support (ideally including language packs).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn another game's modding community that I'm a part of, we occasionally have an issue where someone wants to add support for a language that the game doesn't officially support. The game hard-codes the languages supported in an enum to 12-13 specific ones, so to work with a new language you have to completely replace another one.\r\n\r\nI'm trying to design my framework around these sorts of things that I've encountered while modding there, hence the language packs. This is fairly easy for text - call `TranslationServer.add_translation` with a `Translation` resource containing the text keys and values. For resource paths, however, there isn't an exposed way to register new paths besides in the editor.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis would allow loading at runtime the language data that remaps resource paths, including ones added by users after release, without having to rely on undocumented settings.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe simplest solution with the current implementation would be to add a method to somewhere like `TranslationServer` to register a new resource path mapping for a language which just adds it to `\"locale/translation_remaps\"` in `ProjectSettings` (like my C# code in the \"workaround\" section of the proposal).\r\n\r\n```gdscript\r\nTranslationServer.add_translated_asset( \"es\", \"res://shop-signs.png\", \"res://shop-signs.es.png\" );\r\n```\r\n\r\nA solution that might be more consistent with the rest of the translation design would be to maybe add a `Dictionary` to `Translation` holding the resource path mappings, and check that during `ResourceLoader::_path_remap`?\r\n\r\n```gdscript\r\nvar translation = TranslationServer.get_translation_object( \"es\" ) # I was going to suggest this too, but found it while digging in the source code while making this proposal! Yay!\r\ntranslation.add_translated_asset( \"res://shop-signs.png\", \"res://shop-signs.es.png\" )\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, although since it isn't in the public API I'm concerned that it will change and break at some point.\r\n\r\nI tracked down the path remapping to [`ResourceLoader::_path_remap`](https://github.com/godotengine/godot/blob/d84954a2818e72a96deec1d027028e796f2930f3/core/io/resource_loader.cpp#L849), and so am using this right now (not that I've had a chance to test it yet):\r\n\r\n```cs\r\n        /// <summary>\r\n        /// Register an asset translation for the specified language.\r\n        /// TODO: Test\r\n        /// </summary>\r\n        /// <param name=\"lang\">The language code for the language.</param>\r\n        /// <param name=\"key\">The asset path for the asset before translation remapping.</param>\r\n        /// <param name=\"value\">The asset path for the translated asset.</param>\r\n        public static void RegisterAssetTranslation( string lang, string key, string value )\r\n        {\r\n            // Let's hope this doesn't break in later Godot releases!\r\n\r\n            var remaps = ( Godot.Collections.Dictionary ) ProjectSettings.GetSetting( \"locale/translation_remaps\" );\r\n            if ( !remaps.Contains( key ) )\r\n            {\r\n                remaps.Add( key, new string[] { $\"{value}:{lang}\" }  );\r\n                return;\r\n            }\r\n\r\n            List<string> langMaps = new List<string>( ( string[] ) remaps[ key ] );\r\n            langMaps.Add( $\"{value}:{lang}\" );\r\n            remaps[ key ] = langMaps.ToArray();\r\n        }\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt goes along with Godot's native translation support, and to me feels like it should be there for completeness. It also seems small (relatively speaking) for a full addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1525",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1525/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1525/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1525/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1525",
    "id": 703810528,
    "node_id": "MDU6SXNzdWU3MDM4MTA1Mjg=",
    "number": 1525,
    "title": "Have `CUSTOM_ID` be available in CanvasItem vertex shader",
    "user": {
      "login": "Hasenn",
      "id": 20937891,
      "node_id": "MDQ6VXNlcjIwOTM3ODkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20937891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Hasenn",
      "html_url": "https://github.com/Hasenn",
      "followers_url": "https://api.github.com/users/Hasenn/followers",
      "following_url": "https://api.github.com/users/Hasenn/following{/other_user}",
      "gists_url": "https://api.github.com/users/Hasenn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Hasenn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Hasenn/subscriptions",
      "organizations_url": "https://api.github.com/users/Hasenn/orgs",
      "repos_url": "https://api.github.com/users/Hasenn/repos",
      "events_url": "https://api.github.com/users/Hasenn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Hasenn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-09-17T18:24:10Z",
    "updated_at": "2020-09-18T19:28:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIt's a 2D platformer\r\n**Describe the problem or limitation you are having in your project:**\r\nWe're trying to implement a \"flipbook\" variation on a particle effect (having a random texture on each instance of some 2D GPU particles) and we concluded we either have to rewrite the whole default particle shader just to pass some random seed through INSTANCE_CUSTOM, or resort to some hacks using the hue variation in the default process material and later read it in the canvas_item material.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nhave CUSTOM_ID also be a thing in canvas_item, i would be able to hash that and add some variation to my particle's rendering based on that\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```glsl\r\nvarying float lifetime;\r\nvarying float rand;\r\nvoid vertex(){\r\n        lifetime = INSTANCE_CUSTOM.y; //currently this works\r\n        rand = rand_from_seed(hash(INSTANCE_ID)); //this doesn't in 2D shaders\r\n    }\r\n//then use rand to influence rendering in the fragment function\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe workaround is not pretty but it can be done in about 10 lines of shader code, and we also have to move textures from where they usually go to inside the shader, and use the regular texture field with something like a green square which is unintuitive for our designers\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit already is a thing for 3D particles, i don't see why it shouldn't also work for 2D",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1524",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1524/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1524/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1524/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1524",
    "id": 703197784,
    "node_id": "MDU6SXNzdWU3MDMxOTc3ODQ=",
    "number": 1524,
    "title": "Draw interconnected line segments with segment-by-segment width",
    "user": {
      "login": "lostdarkwolf",
      "id": 42664454,
      "node_id": "MDQ6VXNlcjQyNjY0NDU0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/42664454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lostdarkwolf",
      "html_url": "https://github.com/lostdarkwolf",
      "followers_url": "https://api.github.com/users/lostdarkwolf/followers",
      "following_url": "https://api.github.com/users/lostdarkwolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/lostdarkwolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lostdarkwolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lostdarkwolf/subscriptions",
      "organizations_url": "https://api.github.com/users/lostdarkwolf/orgs",
      "repos_url": "https://api.github.com/users/lostdarkwolf/repos",
      "events_url": "https://api.github.com/users/lostdarkwolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lostdarkwolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-17T01:35:21Z",
    "updated_at": "2020-09-17T15:17:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am coding a function for a game that has vector graphics. I realized that I needed better vector drawing functions for my game. Because of this, I am coding the function I need. Nearing completion of the mentioned script, I realized that Godot cannot draw interconnected line segments with width-fluctuation. I can provide the mentioned code, but I don't think it is needed.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy problem is related to drawing lines. I cannot draw connected lines that are able to fluctuate thier width.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf there was a function likely called \"draw_polyline_colors_widths\", that would be Ideal. As you could probably imagine, it would take an array in the argument for width so that the width could be changed at every point in the line.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBelow is an outline of what Godot would likely show when looking up this function in help.\r\ndraw_polyline_colors_widths(points: PoolVector2Array, colors: PoolColorArray, width: PoolRealArray, antialiased: bool = false)\r\n\r\nDraws interconnected line segments with a segment-by-segment width, segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between points and colors. Widths assigned to line segments match by index between points and widths.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around, but not very easily. In order to work around this issue properly, the use of draw_polygon is required. The proposed function must be built manually, and from scratch.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a modification of \"draw_polyline_colors\".",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1522",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1522/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1522/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1522/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1522",
    "id": 703001088,
    "node_id": "MDU6SXNzdWU3MDMwMDEwODg=",
    "number": 1522,
    "title": "Facilitate implementing core data structure such as linked list via modules or plugins",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-16T18:58:22Z",
    "updated_at": "2020-12-19T12:04:22Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine Extension.\r\nContinuing from godotengine/godot#7194.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSimply put, `List != Array`. Linked lists perform faster when it comes to insertion and deletion operations, having `O(1)` time complexity, not to mention the benefit of passing around list nodes throughout code while still maintaining the order of elements.\r\n\r\nNote that this proposal also applies to any other core data structure which could be implemented via modules or plugins, but the linked list is one of the most commonly used data structures out there.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nFor instance, I've [previously ported bucket fill algorithms from GDScript to C++](https://github.com/goostengine/goost/blob/e297357df6d86ea153784d5a5efdd1f167ba7600/core/image/goost_image.cpp#L28-L30) because they were too slow to execute via script, and bucket fill typically requires a stack-based data structure (for which the `List<T>` is used throughout the engine internals). There was certainly a factor of going through GDScript calls for each pixel there as well which contributed to the slowdown, of course.\r\n\r\nOther data structures could be more efficiently implemented/derived by using the `List` in a particular way, such as stack or queue. Any recursive calls could be more efficiently implemented using a list as a stack without reverting to using the *GDScript* call stack (which is also limited to 1024 by default). There are ways to use an `Array` as a stack as suggested in https://github.com/godotengine/godot-proposals/issues/1522#issuecomment-693697224, but the usage is advanced and requires more steps to setup and maintain.\r\n\r\nBinary trees can also be implemented using nested linked lists.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n## As a `Reference`\r\nSee goostengine/goost#12 where this is already implemented using C++ modules capabilities.\r\n\r\n![goost_linked_list_and_node](https://user-images.githubusercontent.com/17108460/93257054-f6785580-f7a4-11ea-89d6-9725721103b1.png)\r\n\r\nA list is implemented as a `Reference` and the nodes/elements inherit `Object`.\r\n\r\nWhile working on such an implementation, I've stumbled upon various core issues:\r\n\r\n- [ ] Casting custom object types (`ListNode` in this case) for them to be compatible with `Variant`: godotengine/godot#42060.\r\n- [ ] I haven't found a way to override constructors (`_init()`, `new()` etc). This is possible with `Array` and `Dictionary` in contrast.\r\n- [ ] There seems to be no way to override or prevent `free()` calls for GDScript. For `Reference`, this is already enforced by preventing `Reference.free()` when used in GDScript specifically, but not in core. Preventing or overriding `free()` calls for `ListNode`s is desired because `LinkedList` needs to take care of re-linking previous and next nodes upon deletion, otherwise this may lead to a crash attempting to delete previously deleted pointer to a node.\r\n- [x] Overriding `print()` for those classes in C++: godotengine/godot#42093.\r\n- [ ] Making `for node in list:` to work fast enough without allocating an `Array` in GDScript: godotengine/godot#42053.\r\n- [ ] Cannot expose `List` as `List` because of namespace issues in C++ (but possible in GDScript...)\r\n- [ ] Attempting to assign any value to `LinkedList.front` directly results in an error, which is exposed as a read-only property: godotengine/godot#41319.\r\n\r\n## As a `Variant::LIST` and/or `Variant::LIST_NODE`\r\nI really don't know what has to be done to make it work, but I guess that would be the same as implementing `Variant::ARRAY` or `Variant::DICTIONARY`, so we'll have a third type of container type in Godot: `Variant::LIST`. But obviously, it would solve all of the above limitations because it would be treated as an actual core data structure.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is perfectly possible to implement such a structure via GDScript, certainly not a few lines of code but possible, see https://github.com/willnationsdev/godot-next/commit/72c0f7f72d097cbb27d313fbebf398d80d28e936 for instance. Yet there are existing issues which prevent implementing such a structure to work reliably via script (not mentioning the above limitations when trying to implement the same data structure in C++):\r\n- [ ] godotengine/godot#31166.\r\n- [ ] https://github.com/godotengine/godot/issues/6784#issuecomment-480588033.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI have to be honest, with the particular `Reference`-based list implementation, there's no reason for this to be in core implemented like that. The engine does have `List` implemented in C++ for internal engine development throughout the codebase but despite this, it's really not trivial to expose the same data structure to scripting. It would be best if the list is implemented as a core `Variant::LIST` type to begin with, I've raised this proposal for discussion purposes, to share my research on this topic, and to indicate what has to be done in order to facilitate the development for modules and plugins.\r\n\r\nI feel like goostengine/goost#12 could already solve a lot of problems, so feel free to suggest what could be done there as well, because it's not only about Godot Engine development, it's about solving more or less common needs as requested by people. 🙂\r\n\r\nIn any case, I think there are enough of bullet points to solve in this proposal to make it easier for C++ modules developers to implement such a structure more reliably for everyone.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1522/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1520",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1520/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1520/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1520/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1520",
    "id": 702735965,
    "node_id": "MDU6SXNzdWU3MDI3MzU5NjU=",
    "number": 1520,
    "title": "Allow raycast more than one level when excluding parent",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-16T12:47:22Z",
    "updated_at": "2020-09-16T12:56:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlatform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you add a raycast to a body you typically add multiple raycasts. To avoid polluting the tree these are typically added inside a grouping node, e.g.\r\n![image](https://user-images.githubusercontent.com/12863685/93338571-67aa1e00-f822-11ea-8a39-c96c430d6914.png)\r\n\r\nHowever, in almost ever instance you want to exclude the entire body the ray is part of, but 'exclude parent' only works for one level. So doing the above means the collision attached to the actual body is still found there is no choice but to either:\r\n\r\n1. Allow it to collide with the body, which is no use when trying to find the first hit that was not the body\r\n2. Move the raycast so it is outside the collision box, which is no use when you require pixel perfect adjustment and this may cause issues with collisions when checking for ground, etc.\r\n3. move the collision box inside the group, which doesn't make sense\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow a means of excluding a raycast from its scene (if that is possible, obviously won't work if not saved as a separate scene) or some means of specifying what a parent is, e.g. number of parent checks, etc.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nEveryone uses raycasts for checking with a body is hitting other objects, tiles, etc and typically have multiple rays. So having this simple 'parent' option is of limited use and restricts ability to put raycasts inside a node",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1520/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1519",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1519/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1519/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1519/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1519",
    "id": 702226927,
    "node_id": "MDU6SXNzdWU3MDIyMjY5Mjc=",
    "number": 1519,
    "title": "Integrate contrast-adaptive sharpening (CAS) in the Vulkan renderer",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-15T20:13:38Z",
    "updated_at": "2020-11-26T23:18:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen MSAA is too expensive or not effective enough due to frequent use of alpha-tested surfaces, developers typically fall back on a screen-space antialiasing algorithm like FXAA. However, unlike MSAA, screen-space antialiasing algorithms will make the image blurrier to help decrease aliasing. This can make players avoid using antialiasing altogether, especially at lower resolutions where the lost sharpness is often considered unacceptable.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA sharpening algorithm can be used to recover some of the sharpness lost when using a screen-space antialiasing algorithm. Contrast-adaptive sharpening (CAS) has been a popular method in recent games.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIntegrate a contrast-adaptive sharpening shader such as the MIT-licensed [AMD FidelityFX](https://gpuopen.com/fidelityfx-cas/).\r\n\r\nIn addition, FidelityFX also supports fast upscaling in addition to sharpening, which could be useful to further improve the visual quality with [dynamic resolution scaling](https://github.com/godotengine/godot-proposals/issues/917) or when the resolution is lowered for performance reasons.\r\n\r\nImplementation recommendations can be found in [this slideshow](https://gpuopen.com/wp-content/uploads/2019/07/FidelityFX-CAS.pptx).\r\n\r\nNote that since FidelityFX uses compute shaders, this feature can't be backported to the GLES3 and GLES2 renderers.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nOn Linux, CAS can already be injected into Godot thanks to [vkBasalt](https://github.com/DadSchoorse/vkBasalt). Other programs such as ReShade may also be able to do this on other platforms.\r\n\r\nHowever, injection-based approaches will often make sharpening apply to 2D elements, making the editor and GUI elements appear unnecessarily sharp. A proper CAS implementation in Godot will make it possible to sharpen only 3D elements.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1519/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1516",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1516/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1516/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1516/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1516",
    "id": 702107873,
    "node_id": "MDU6SXNzdWU3MDIxMDc4NzM=",
    "number": 1516,
    "title": "Set global default font color",
    "user": {
      "login": "ShatReal",
      "id": 69117768,
      "node_id": "MDQ6VXNlcjY5MTE3NzY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/69117768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShatReal",
      "html_url": "https://github.com/ShatReal",
      "followers_url": "https://api.github.com/users/ShatReal/followers",
      "following_url": "https://api.github.com/users/ShatReal/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShatReal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShatReal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShatReal/subscriptions",
      "organizations_url": "https://api.github.com/users/ShatReal/orgs",
      "repos_url": "https://api.github.com/users/ShatReal/repos",
      "events_url": "https://api.github.com/users/ShatReal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShatReal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-15T17:12:41Z",
    "updated_at": "2020-09-15T18:12:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA project that has buttons and backgrounds with light colors.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe default white text isn't very visible on the backgrounds. And I have to change all of the colors individually in the theme editor to get them to show up.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option in project settings to set the default font color for all text would save me some time.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUnder GUI --> Theme in Project Settings how about an option for \"Custom Font Color\"?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. I would use it often, at least.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBeing able to set the font color once for the entire project sounds pretty core to me.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1516/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1515",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1515/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1515/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1515/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1515",
    "id": 702016120,
    "node_id": "MDU6SXNzdWU3MDIwMTYxMjA=",
    "number": 1515,
    "title": "Add pre-rotation optimization for Vulkan rendering on Android",
    "user": {
      "login": "The-O-King",
      "id": 14830461,
      "node_id": "MDQ6VXNlcjE0ODMwNDYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/14830461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/The-O-King",
      "html_url": "https://github.com/The-O-King",
      "followers_url": "https://api.github.com/users/The-O-King/followers",
      "following_url": "https://api.github.com/users/The-O-King/following{/other_user}",
      "gists_url": "https://api.github.com/users/The-O-King/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/The-O-King/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/The-O-King/subscriptions",
      "organizations_url": "https://api.github.com/users/The-O-King/orgs",
      "repos_url": "https://api.github.com/users/The-O-King/repos",
      "events_url": "https://api.github.com/users/The-O-King/events{/privacy}",
      "received_events_url": "https://api.github.com/users/The-O-King/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-15T15:09:01Z",
    "updated_at": "2020-09-18T21:10:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny Vulkan-based Android project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPreviously with OpenGL, the driver was responsible for handling the relationship between the Android compositor and the app's rendering surface with regards to the device's orientation - but with Vulkan, this responsibility is placed on the app developer. If not handled properly, the Android compositor is left to make the rotation of the rendered surface to match the device's orientation, which can be very costly performance wise.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRecreating the swapchain properly and applying a rotation to the final projection matrix used to render to the surface will handle device orientation changes properly and avoid overhead from usage of the Android compositor\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUsing the method described in [this blog post](https://android-developers.googleblog.com/2020/02/handling-device-orientation-efficiently.html) we will need to detect the android device's \"identity\" orientation/screen resolution on startup, and when an orientation change occurs, swapchain recreation will have to set the preTransform flag properly and then use the devices current orientation to apply a rotation matrix to the projection matrix used to render the final image onscreen - as we will be keeping the swapchain at the device's original identity orientation's screen resolution \r\n\r\nAn initial look at the renderer's code - we may want to implement the rotation of the projection matrix in the render_camera functions found in rendering_server_scene.cpp\r\n\r\ncreate_swap_chain/_update_swap_chain in vulkan_context.cpp will also need to be updated for this - would using ifdef guards be a suitable solution? Or do we want a more object-oriented abstraction with a new implementation of vulkan_context.cpp for android devices?\r\n\r\nAs mentioned in the article, we need to discuss implementations for pre-android 10 and android 10+ devices, also have to take into consideration viewport/scissor adjustments and the usage of derivatives in shaders when compiling for android\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, this is a rendering-engine level optimization\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a fundamental optimization that is recommended for all Android applications to implement\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1515/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1514",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1514/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1514/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1514/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1514",
    "id": 701953376,
    "node_id": "MDU6SXNzdWU3MDE5NTMzNzY=",
    "number": 1514,
    "title": "Add ability to change Script Editor default completion or use custom ones",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-15T13:56:48Z",
    "updated_at": "2020-09-15T14:32:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen there are many methods and properties in a script, then there is a desire to have flexible settings for displaying these properties and methods in the Code Editor autocomplete window (popup).\r\nFor example I really miss\r\n  - a smarter methods sorting (for example, taking into account the most frequently selected/used methods, etc.),\r\n  - hiding some of the  results (for example, the ability to show methods and properties of only the current script, like here https://github.com/godotengine/godot/pull/38449#issue-412781186 ),\r\n  - or even adding some custom results.\r\nI tried to solve this using plugins, but it seems like now it is impossible to get the code autocompletion popup window or do anything with it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe solution could be to open access to the API for Autocomplete methods and, in general, in the ability to add a custom logic to Autocomplete using plugins.\r\nThis would allow flexible customization of autocomplete to fit ones needs.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAbility to get a list of autocomplete results and filter them, sort and add new results.\r\nUsing a plugin, one could get the autocomplete class (say via `get_editor_interface().get_script_editor().get_completion()` and then use the methods, properties and signals of this class to modify the autocomplete results.\r\n\r\nOr to create and use custom Autocompletions using Autocomplete plugins, for example by analogy with the Inspector plugins.\r\n\r\nThe ability to change the appearance of the autocomplete window would also be convenient (here's an example where tabs are added to the autocomplete window https://github.com/godotengine/godot/pull/38449#issue-412781186)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, there's no way to work around it\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this couldn't be implemented as an add-on since there is no API for it",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1513",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1513/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1513/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1513/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1513",
    "id": 701581997,
    "node_id": "MDU6SXNzdWU3MDE1ODE5OTc=",
    "number": 1513,
    "title": "Make it possible to pass arguments to `PackedScene.instance()`",
    "user": {
      "login": "menip",
      "id": 22862244,
      "node_id": "MDQ6VXNlcjIyODYyMjQ0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22862244?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/menip",
      "html_url": "https://github.com/menip",
      "followers_url": "https://api.github.com/users/menip/followers",
      "following_url": "https://api.github.com/users/menip/following{/other_user}",
      "gists_url": "https://api.github.com/users/menip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/menip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/menip/subscriptions",
      "organizations_url": "https://api.github.com/users/menip/orgs",
      "repos_url": "https://api.github.com/users/menip/repos",
      "events_url": "https://api.github.com/users/menip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/menip/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-15T03:43:45Z",
    "updated_at": "2020-11-20T15:02:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny Godot project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a script with some parameters in it's `_init(...)`. While trivial to pass in args if creating objects via `.new(...)`, I have not found a way to pass something in when instancing a scene using said script. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice to be able to have scene instancing accept args to configure the object. \r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike: `.instance(args)`, where those would then be passed into the scripts `__init(...)`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nA workaround is to instead have an additional `init(...)` function and call it right after instancing the scene.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is not something that can be implemented as a (simple) add-on. Additionally, this would make scenes/scripts work more consistently.\r\n\r\n**Previous Discussion**\r\nhttps://github.com/godotengine/godot/issues/27834\r\nhttps://github.com/godotengine/godot/issues/28712\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1513/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1512",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1512/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1512/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1512/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1512",
    "id": 701554497,
    "node_id": "MDU6SXNzdWU3MDE1NTQ0OTc=",
    "number": 1512,
    "title": "Add pattern matching for `await`",
    "user": {
      "login": "cgbeutler",
      "id": 9751923,
      "node_id": "MDQ6VXNlcjk3NTE5MjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9751923?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgbeutler",
      "html_url": "https://github.com/cgbeutler",
      "followers_url": "https://api.github.com/users/cgbeutler/followers",
      "following_url": "https://api.github.com/users/cgbeutler/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgbeutler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgbeutler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgbeutler/subscriptions",
      "organizations_url": "https://api.github.com/users/cgbeutler/orgs",
      "repos_url": "https://api.github.com/users/cgbeutler/repos",
      "events_url": "https://api.github.com/users/cgbeutler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgbeutler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-15T02:23:55Z",
    "updated_at": "2020-11-21T00:00:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nkinda N/A.  Platformer game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to call \"yield\" on a couple signals at once and just look for the first one received. More specifically, I want to open a dialog and then yield for 'accept' or 'cancel'.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis feature would simply be a shorthand to save time with signals and to make them safer to use.\r\nThis shorthand would be a new await or await-match type instruction. The instruction would yield until one of a selection of signals was received.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe syntax could be done in many ways.\r\nFor the first sample below, I patterned the syntax off the [new GDScript](https://godotengine.org/article/gdscript-progress-report-new-gdscript-now-merged) get/set properties.\r\nSample code:\r\n```coffeescript\r\n$file_dialog.popup_centered()\r\nawait $file_dialog:\r\n    file_selected(filename):\r\n        ...  # handle the signal's result here (aka \"filename\")\r\n    popup_hide():\r\n        ...  # handle a cancel here\r\n... # code here called after either branch above\r\n```\r\nI realize some folks would not want more syntax added to GDScript. To avoid that, it could also be done with lambdas in 4.0 and could look somewhat like the current call.\r\nSomething like:\r\n```coffeescript\r\n$file_dialog.popup_centered()\r\nawait( $file_dialog,\r\n    \"file_selected\", (filename) => ...,\r\n    \"popup_hide\", () => ...\r\n)\r\n... # code here called after either signal\r\n```\r\n\r\nUnder the covers, this feature would register to the signals passed in. When one of the signals was then triggered, all would be un-registered and the result lambda would be called. This would allow for safer handling of one-off awaits.\r\nAnd, yes, I fully realize there are a dozen ways around this that aren't too bad. I just think a shorthand would be nice and quite useful. (It also somewhat emulates tagged unions/discriminated unions, which are my favorite 😅)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A. The feature could just be ignored or the old syntax used.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf we want some custom syntax and more compile-time checking then it would likely be better added to core GDScript. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1512/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1511",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1511/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1511/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1511/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1511",
    "id": 700915818,
    "node_id": "MDU6SXNzdWU3MDA5MTU4MTg=",
    "number": 1511,
    "title": "Make virtual keyboard option possible",
    "user": {
      "login": "Olaf-007",
      "id": 56698992,
      "node_id": "MDQ6VXNlcjU2Njk4OTky",
      "avatar_url": "https://avatars1.githubusercontent.com/u/56698992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Olaf-007",
      "html_url": "https://github.com/Olaf-007",
      "followers_url": "https://api.github.com/users/Olaf-007/followers",
      "following_url": "https://api.github.com/users/Olaf-007/following{/other_user}",
      "gists_url": "https://api.github.com/users/Olaf-007/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Olaf-007/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Olaf-007/subscriptions",
      "organizations_url": "https://api.github.com/users/Olaf-007/orgs",
      "repos_url": "https://api.github.com/users/Olaf-007/repos",
      "events_url": "https://api.github.com/users/Olaf-007/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Olaf-007/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-14T09:04:21Z",
    "updated_at": "2020-09-23T14:50:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nHey I am currently working on an Android interface application.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have the user inserting multiple names in a list of LineEdits and want to ease to jump from one edit to the next.\r\nBut therefore I need a NOTIFICATION from the virtual keyboard that currently does not exist (correct me if I am wrong), when the inserted name is \"accepted\".\r\nAlso there is the Control property \"focus_next\" which works on Windows with the tab key but not on Android.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen OS.show_virtual_keyboard() is called on Andoird this opens up:\r\n![current_keyboard_layout](https://user-images.githubusercontent.com/56698992/93065266-c895f280-f678-11ea-96d2-bfd539ec8d33.png)\r\nBut in other applications there are different kinds of keyboards which I would like to use in my application and cannot:\r\n![otther_keyboard_options](https://user-images.githubusercontent.com/56698992/93065385-f2e7b000-f678-11ea-9d67-7708a7c43c29.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn Sketchware there are these two properties that can be set on a LineEdit or TextEdit:\r\n![Bild1](https://user-images.githubusercontent.com/56698992/93065508-16125f80-f679-11ea-953d-700230001de9.png)\r\n![Bild2](https://user-images.githubusercontent.com/56698992/93065517-1874b980-f679-11ea-9034-5bb645c6c166.png)\r\nThis could be a FLAG-property of the LineEdit or an optional FLAG for the OS.show_virtual_keyboard()-function:\r\nOS.show_virtual_keyboard(type=OS.VIRTUAL_KEYBOARD_TYPE_TEXT,option=OS.VIRTUAL_KEYBOARD_OPTION_SEARCH)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI dont think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIn every other application in the app store this feature is used - from the calculator to any browser. Why is Godot not supporting this feature? (Correct me if I am wrong, but I did not found this setting where I expected it) ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1511/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1509",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1509/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1509/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1509/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1509",
    "id": 700678349,
    "node_id": "MDU6SXNzdWU3MDA2NzgzNDk=",
    "number": 1509,
    "title": "Don't open the bottom panel when selecting nodes (such as Shader or AnimationTree)",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-14T00:17:44Z",
    "updated_at": "2020-09-14T13:15:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis proposal is part of a much more complete UI/UX overhaul and should be considered with this view about Godot Editor problems and possible solutions: #1503\r\n\r\n### Screen Setup is Arbitrarily Changed by Clicking in Objects\r\n![JvhqC7hham](https://user-images.githubusercontent.com/6172013/93031997-3e607680-f605-11ea-8228-820a47056509.gif)\r\n\r\nThere's something that is quite annoying with the current Godot editor design and is the bad habit of change the screen. I see the good intentions of it, but it's childish and annoying as hell!\r\nCurrently everytime you click in a Shader it opens the shader editor, everytime you click in a AnimationPlayer it opens the animator, you click to play it shows the Output even if i just closed it right now! At first it can look great but it's not, once you start to configure the window for the user he loses agency about how he want to see his screen and what is the most important for he now. It get's worse. It's not even currently consistent. E.g when you click in some file in the FileSystem it do not show the Import Option. When you click in any audio element in the Scene it do not open the Audio settings in the bottom panel. It's totally arbitrary and a design decision not compatible with modern softwares.\r\n\r\nThis behavior is also not fully compatible with a more customized UI as proposed here: https://github.com/godotengine/godot-proposals/issues/1508\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nDisable this behavior by default and add a option to enable it in the editor settings or vice versa.\r\n\r\nThis is partially addressed here: https://github.com/godotengine/godot/pull/40438 and the Output setup Panel can already be disabled as noted by @Calinou in #1503  \"You can disable this in the Editor Settings: Run > Output > Always Open Output On Play\"\r\n\r\nSo there's no point in not extend this to all panels not only those selected ones.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used Often\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core editor feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1509/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1508",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1508/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1508/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1508/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1508",
    "id": 700675678,
    "node_id": "MDU6SXNzdWU3MDA2NzU2Nzg=",
    "number": 1508,
    "title": "Unify the editor panel docking system and make it more flexible",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-09-14T00:05:31Z",
    "updated_at": "2020-11-26T01:33:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis proposal is part of a much more complete UI/UX overhaul and should be considered with this view about Godot Editor problems and possible solutions: #1503\r\n\r\n### Unified and More Flexibility Docking Panels System.\r\n![IeYLcTRAWf](https://user-images.githubusercontent.com/6172013/93031858-61d6f180-f604-11ea-827e-352559be18b4.gif)\r\n\r\nGodot has multiple panels each one for a specific task. With the current modular position system you can choose 8 positions that better serves you for each panel. Godot 4 makes it even better with floating panels. It's very useful for multi monitor users (mostly of us right?) since you can detach a panel and send it to another monitor. But there's some big problem here. For some reason you can't detach, change, add or remove the panels from the bottom and up elements. Also you can't detach or change position of the most important panel that would make usage of multi monitors, the Script one. This is related to two [UI/UX principles:](http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/) Flexibility and Consistency.\r\n2a. Provide choice in methods of use.\r\n3b. Be consistent with user expectations and intuition.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis is partially covered here in a smaller scope. https://github.com/godotengine/godot-proposals/issues/28\r\n\r\n**Bottom and Left Panels**\r\nUnify the Panel behavior making all just tabs with the same behavior. So they can be changed position to other docks freely and can be detached as well. Obvious some panels don't quite fit every position well, there's two approaches to it. First you can just let the user do what they want (Blender and Visual Studio approach) and if it's ugly to have the inspector in the Bottom it's ok because they can just change it anyway and it will not be default. There's also a more conservative approach that would be to have a list of allowed docks that way each panel can be attached but i'm not on it, i really would prefer the full customized way. Game developers are power users, let us have agency about our screen setup.\r\n\r\n**Top Panels**\r\nThe Top Panel is challenging not only it don't have a clear meaning (2D and 3D are viewport options, script and Asset Library are other panels) but they also require huge screen space to work. Also as noted before the most important detached panel is not currently detached and it's the Script Editor. This is so much important to multiple monitor users to be ignored. So my suggestion to the top panel is:\r\n\r\n2D and 3D should be unified in a single \"Viewport item\". After that a option to this \"Viewpot Mode\" (2D/3D) need to be added.. It need be accessible all the time in viewport so should be a fixed option in the viewport top header.\r\n\r\nAsset Library should be a floating panel by default. Just like a File Browser. It's not used so often that justify it own option here. It can be hidden in the Project menu e.g\r\n\r\nSo it let us with 2 functions Viewport and Script. What makes sense here is to keep Viewport fixed and Script as any other Panel, i mean, you should be able to put the script editor in any dock and be detachable too. I can quite think in some screen setups that would work just great with the Script in the left dock. Again the point is that Users should be allowed agency about their screen setup everytime it's feasible. With max flexibility users can fix bad default UI decisions, make it more pleasant or more similar to what they are used to.\r\n\r\nHow the default screen would look like:\r\n![Screen1](https://user-images.githubusercontent.com/6172013/93031821-1de3ec80-f604-11ea-803b-47b2d95b444b.png)\r\n\r\nHow complex sub panels in bottom would look like:\r\n![Screen2 - Copia](https://user-images.githubusercontent.com/6172013/93093619-46f19500-f677-11ea-8aa0-b7636601d8b0.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used Often\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core editor feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1508/reactions",
      "total_count": 15,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1507",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1507/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1507/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1507/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1507",
    "id": 700672391,
    "node_id": "MDU6SXNzdWU3MDA2NzIzOTE=",
    "number": 1507,
    "title": "Make mouse input handling more consistent in the editor",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-13T23:44:00Z",
    "updated_at": "2020-09-13T23:48:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis proposal is part of a much more complete UI/UX overhaul and should be considered with this view about Godot Editor problems and Suggestions: #1503\r\n\r\n### Inconsistent Mouse Events\r\n![Jw5subZ7rG](https://user-images.githubusercontent.com/6172013/93031458-5e8e3680-f601-11ea-8ee2-56aa61cbd22e.gif)\r\nThere's bad inconstancy with the current Mouse Actions between the FileSystem and the Scene Panels. Consistency and predictable behaviors is one of the most important UX Principles so this should be fixed if possible.\r\n\r\nFileSystem:\r\nClick (Mouse Press) - Select and Show Import Options\r\nClick on Already Selected Element - Do Nothing.\r\nDouble Click - Open Asset, Scene, Script etc...\r\nDrag and Drop - Works for Drop files in the Viewport and Inspector as Resources. Should reorder on list but do not work because list is always alphabetical sort.\r\n\r\nScene:\r\nClick (Mouse Press) - Select and Show Inspector/Node Options\r\nClick on Already Selected Element - Rename.\r\nDouble Click - Do Nothing.\r\nDrag and Drop - Do Nothing.\r\n\r\nThe main problem i see here is the Mouse Click event is not correctly used/implemented in Godot.\r\nDon't know the reason but Mouse Press is used as Mouse Click in Godot Editor! It limit how much different events it can handle. Click should be a sequence of Mouse Press - Check Max Threshold Mouse Move - Mouse Release. If Moved too much it's a Drag Event not a Click. The Event should only be accepted as a Click in the Mouse Release not before.\r\n\r\nDouble Click is a Click - Check time Threshold event. Don't know how it's implemented now.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nWith this new Click event implemented this is my proposal:\r\n\r\nFileSystem\r\nClick (Real Click) - Select and Show Import Options\r\nClick on Already Selected Element - Rename. **[NEW]**\r\nDouble Click - Open Asset in Inspector, Scene, Script etc...\r\nDrag and Drop - Works for Drop files in the Viewport and Inspector as Resources.\r\n\r\nScene:\r\nClick (Real Click) - Select and Show Inspector Options\r\nClick on already selected element - Rename\r\nDouble Click - Do Nothing.\r\nDrag and Drop - Can Drag and Drop in Exported Notepath fields in Inspector. **[NEW]** Since the Click is now a different event of the Drag and Drop it will not change the current Inspector Selected so it will works as should. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core editor feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1507/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1506",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1506/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1506/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1506/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1506",
    "id": 700671611,
    "node_id": "MDU6SXNzdWU3MDA2NzE2MTE=",
    "number": 1506,
    "title": "Improve dragging float number fields in the inspector",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-13T23:38:44Z",
    "updated_at": "2020-12-24T15:07:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis proposal is part of a much more complete UI/UX overhaul and should be considered with this view about Godot Editor problems and possible solutions: https://github.com/godotengine/godot-proposals/issues/1503\r\n\r\n### Dragging Float Number Input Fields\r\n\r\n![69Z6iIRMB5](https://user-images.githubusercontent.com/6172013/93031363-84ffa200-f600-11ea-96fb-64ff3c04dd8d.gif)\r\n\r\nWhen dragging a number input field in inspector the values seems normalized by type. What it means is that if a field has float values they are always normalized in -1 to 1 and Integer in -1000 to 1000 (Don't know the right values but this is the amplitude of a mouse movement approximately). There's a modifier to allow to decrease the rate of change and it's useful to integers but for float values with large numbers like used in Transform Inspector it is useless. Is currently impracticable to handle float fields that use values > 1 without a tendinitis.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNormalize the float values the same high numbers it's done with Integers but add a proporcional mouse movement in a way that slow mouse movements will change by 0.1, mid will change by 1.0 and fast will change to 10. That way you can keep the same amplitude of values you have in int number fields and keep the resolution if the user want to change small values. This can also be applied to int unifying the behavior but with another scale 1/10/100 e.g\r\n\r\nKeeping the SHIFT modifier also could force the lower change rate independent of the mouse velocity. Also if something is normalized only in small values like 0~1 it would use the slider component anyway. It would fix manipulation in all Transform inspector parameters and exported float fields.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used often\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core editor feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1506/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1504",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1504/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1504/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1504/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1504",
    "id": 700655769,
    "node_id": "MDU6SXNzdWU3MDA2NTU3Njk=",
    "number": 1504,
    "title": "Allow copy-pasting property values by hovering them in the inspector and pressing Ctrl + C / Ctrl + V",
    "user": {
      "login": "Olaf-007",
      "id": 56698992,
      "node_id": "MDQ6VXNlcjU2Njk4OTky",
      "avatar_url": "https://avatars1.githubusercontent.com/u/56698992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Olaf-007",
      "html_url": "https://github.com/Olaf-007",
      "followers_url": "https://api.github.com/users/Olaf-007/followers",
      "following_url": "https://api.github.com/users/Olaf-007/following{/other_user}",
      "gists_url": "https://api.github.com/users/Olaf-007/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Olaf-007/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Olaf-007/subscriptions",
      "organizations_url": "https://api.github.com/users/Olaf-007/orgs",
      "repos_url": "https://api.github.com/users/Olaf-007/repos",
      "events_url": "https://api.github.com/users/Olaf-007/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Olaf-007/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-13T21:55:36Z",
    "updated_at": "2020-09-13T23:26:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiple projects. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn my projects I ofthen have to align two nodes (or more) with the same propertys (e.g. aligning multiple nodes to the same position). So what I do: I go and copy the x-coordinate and paste it in the next object. Then I go back and copy the y-coordinate ... paste it ... z-coordinate ... paste it. UUfff!\r\nAnother example: I have two Buttons and create three custom_styles for normal, hover and pressed. I would like to quickly share these StyleBoxes with the other button, so what do I do: I save all three StyleBoxes in the file directory and drop them into the Button. UUfff, this takes a lot of time espacially when you want to try sth. out quickly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is the solution I propose which is inspired by a feature in Blender:\r\nWhen hovering a value inside the inspector, the user can press CTRL+C so without clicking the value is copied.\r\nThen the user hoveres the property he wants to past in and presses CTRL+V (optionally the user has to press the property to not exidentally drop sth when not focussing on the mouse)\r\nHere is how it works:\r\n![Improvment](https://user-images.githubusercontent.com/56698992/93029519-b2a61480-f61b-11ea-8678-3504c07e174d.png)\r\n\r\nAnd there could be even more: hovering a property and pressing Shift+C could copy the property name or path so the user can insert it directly into his code. (Imagine such long ones as subsurf_scatter_enabled) \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf you have more questions on this, please ask :) \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement will be used often because it increases the workflow dramatically.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a workflow speedup and huge comfortability feature. This should be part of the major engine. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1504/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1501",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1501/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1501/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1501/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1501",
    "id": 700629401,
    "node_id": "MDU6SXNzdWU3MDA2Mjk0MDE=",
    "number": 1501,
    "title": "Use social media meta tags in HTML5 exports",
    "user": {
      "login": "DanielZTing",
      "id": 43592069,
      "node_id": "MDQ6VXNlcjQzNTkyMDY5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/43592069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanielZTing",
      "html_url": "https://github.com/DanielZTing",
      "followers_url": "https://api.github.com/users/DanielZTing/followers",
      "following_url": "https://api.github.com/users/DanielZTing/following{/other_user}",
      "gists_url": "https://api.github.com/users/DanielZTing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DanielZTing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DanielZTing/subscriptions",
      "organizations_url": "https://api.github.com/users/DanielZTing/orgs",
      "repos_url": "https://api.github.com/users/DanielZTing/repos",
      "events_url": "https://api.github.com/users/DanielZTing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DanielZTing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-13T19:14:00Z",
    "updated_at": "2020-09-18T22:09:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis is applicable to anything and everything made with Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I post a link to my HTML5 game in Facebook/Twitter/Discord, all that shows is a bare-bones link.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI believe adding a field in the HTML5 export modal for at least a title, description and image will greatly enhance the visibility of HTML5 games made with Godot on Facebook, Twitter, and other forms of social media. For reference, this is what Google looks like when posted to Discord:\r\n\r\n![image](https://user-images.githubusercontent.com/43592069/93025557-7c897600-f5c4-11ea-80b9-14c9d29f8460.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimply add a new tab to the HTML5 export options named \"social media\" or something with a field for a title, description, and image. The exporter will then use those to add the proper `<meta>` tags in the HTML head (see https://css-tricks.com/essential-meta-tags-social-media).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement should be very useful for those who export to the web.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIn my opinion, it's essentially a no-brainer to include these tags to drive engagement. This should be an easy and effective way to aid the visibility of Godot and its games.\r\n\r\nAs someone relatively new to open source contributions, I think this is within my ability to take a shot.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1501/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1499",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1499/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1499/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1499/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1499",
    "id": 700538376,
    "node_id": "MDU6SXNzdWU3MDA1MzgzNzY=",
    "number": 1499,
    "title": "Make a splash screen for first time users",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-09-13T10:02:18Z",
    "updated_at": "2020-10-11T07:18:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNow, there seems to be some confusion, about best start-up environment, and settings . . One could perhaps make a ' splash screen ', with some options, that could be toggled, ie. like ' Do not show this again ' . . In it, there could be some questions, or so . . Do you want to make 2D game, 3D game, stylized, near-realistic, or so . . And, also do you want you want high-fidelity graphics, low but, fast settings, so on . . I don't know how to design that, and of course, for experienced users, it would need a box, where ' do not show this again ', maybe the Godot makers could think, if there could be good use, for such a screen . . \r\n\r\n<img width=\"1920\" alt=\"Skærmbillede (246)\" src=\"https://user-images.githubusercontent.com/61069740/93015259-51008e80-f5b8-11ea-9e3c-b6dbe8c47e99.png\">\r\n\r\nHigh-performance graphics could be. MSAA set to 4x, or 8x, and an-isotropy enabled, by default . . This would sort of, match the A, AA, and AAA demo-graphics, or so . . And, it would make the ' first ' screen be less confusing, where one has to sort of, read and, accidentally click 3D Node, to even get started, or so . . That would work better, so it's a suggestion, not ' quite ' good . .\r\n\r\nThe start page could also link to a web-page, a special introduction page, that goes over most important knowledge, ie. where official docs are, where one can find tutorials, the official community channels, just good, basic information, or so . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's just not super-user friendly for new users, to open their first project, or even for some months, or so . . . The box can be ' do not show again ', for experienced users, not sure what should be in it, atm, it's for engine makers to decide, since it is their engine, or so . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike image above, a sort of ' splash - screen ', that gets things going, or so . . Like, ' better ' documentation, from the very start, or so . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nImage above, or sort a, ' Where do we go now - screen ', for new users <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's standard in many programs, especially complex programs, where one needs a little help, almost right away, to learn . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nJust, makes sense, at least to a new user, or so . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1499/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1498",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1498/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1498/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1498/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1498",
    "id": 700534916,
    "node_id": "MDU6SXNzdWU3MDA1MzQ5MTY=",
    "number": 1498,
    "title": "Optimize start-up 3D environment",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-13T09:39:03Z",
    "updated_at": "2020-10-08T15:09:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany have complained the default lighting, bec. sky contribution is a bit ' blue ', from blue sky being a light source . . This makes it difficult, to make a ' pure white ' cube, and sort of, makes things look weird . . It's counter-intuitive for a beginner, to have to find a weird setting, called sky contribution, or know that's even the problem . . It's a lot better, in Godot 4 current builds <3, but I have a suggestion . . Right now, when one creates a 3D world, the ' assumption ' is, one wants to make a ' photo-real ' game, ie. with a sophisticated, near-accurate sun and, ' atmosphere ' simulation . . However, many games, going back a long time, and many current 3D games, are stylized, and do not need this, at all . .\r\n\r\nThere's also the idea, most graphics settings are turned off, by default, in Godot, to maximize performance, on any hardware, or for ' mobile ' titles, and this is a really good approach . . So, based on that, one can say, what is the ' optimal ' start environment, and that's simply a background, like in Blender, maybe a bit darker ( no auto-blue sky, or like that ), and a sky contribution set to ' 0 ', and the ambient light to ' pure white ', intensity 1 . .\r\n\r\nThat way, the ' fastest ' default editor settings, in terms of performance, on any device, would look like this, or so . . .\r\n\r\n![Skærmbillede (243)](https://user-images.githubusercontent.com/61069740/93014772-24e30e80-f5b4-11ea-80d5-75468fc92c97.png)\r\n\r\n![Skærmbillede (244)](https://user-images.githubusercontent.com/61069740/93014778-2ca2b300-f5b4-11ea-867f-237abb339a67.png)\r\n\r\nAnd, since the most basic, classic games, are basically stylized, going back to Mario 2D ( simple, ambient light ), or games like Mario 3D games, these are sort of the most fun, silly games one can play, and it would make sense, if Godot sort of, looked like that, by default . . . Would make sense to new users, and no one would be confused, by an odd ' color ' to everything, they didn't ask for, and for stylized games, a MAJOR slice, of 3D games, even today ( Kingdom Hearts, Mario Galaxy, some Nintendo games ), this would be a GOOD default setting, as MANY games are made, designed to look like, that . .\r\n\r\nSo, because many games are SUPPOSED to look stylized, and it makes sense, if one imports an asset, that it ' looks ' basically like what it is, fundamentally . . .\r\n\r\nAlso, from performance perspective, since simple ambient light is the fastest, I think one could say, the ' best ' default environment is the above . . At least, that fits with the rest of the engine, where most graphics settings are turned ' off ', by default, such as MSAA, anisotropy, to make the engine run as fast, and have best performance, in editor, by default . . So, that is the idea, to make the default environment look, and run like above, I think that is logical, or almost . . :D :D <3 . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust, make the most basic start-up editor look, as everything makes more sense then, and it will run faster, on basically any device, or so . . Alternatively, make a ' editor settings ' option, to set new default environment settings, like in Blender, where one can ' save ' a different start-up document, ex. no default cube, or so . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust make the default environment as FAST, and also logical, as possible, bec. MANY games are made to be stylized, and if one imports a model, even a photorealistic one, it still looks good in simple, white ambient light, but many stylized games look ' wrong ', when the PBR sky is set to on, ie. it would work better, for all cases <3 Thank you . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nJust an idea, pretty simple, ps. Really love Godot, you've done an amazing job, it's the engine for me, for life <3\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTo make, it faster and, far more intuitive, ESPECIALLY for beginners, and stylized game makers, as well . .\r\n\r\n![2020-09-13 1136](https://user-images.githubusercontent.com/61069740/93014944-8061cc00-f5b5-11ea-8d1f-4677a854b134.jpg)\r\n\r\n![2020-09-13 1137](https://user-images.githubusercontent.com/61069740/93014947-822b8f80-f5b5-11ea-8970-db1bcfb0f7f3.jpg)\r\n\r\n![2020-09-13 1138](https://user-images.githubusercontent.com/61069740/93014961-98395000-f5b5-11ea-900d-b98e17e61a98.jpg)\r\n\r\nFaster, more intuitive, and one doesn't have to look for tutorials, or join various forums, to make a simple, white color, or so, works for everyone, also PBR crowd, that know things need a lot more complex settings, to be more real-looking, after initial import, or so . .\r\n\r\nThanks <3 . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1497",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1497/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1497/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1497/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1497",
    "id": 700255827,
    "node_id": "MDU6SXNzdWU3MDAyNTU4Mjc=",
    "number": 1497,
    "title": "Visualize Position2D, Position3D and RayCast3D orientation with editor gizmos",
    "user": {
      "login": "robbertzzz",
      "id": 7684647,
      "node_id": "MDQ6VXNlcjc2ODQ2NDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7684647?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbertzzz",
      "html_url": "https://github.com/robbertzzz",
      "followers_url": "https://api.github.com/users/robbertzzz/followers",
      "following_url": "https://api.github.com/users/robbertzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbertzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbertzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbertzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/robbertzzz/orgs",
      "repos_url": "https://api.github.com/users/robbertzzz/repos",
      "events_url": "https://api.github.com/users/robbertzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbertzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-12T14:27:09Z",
    "updated_at": "2020-09-12T14:49:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am using the Position2D node in my project as a socket so I can visually place and recognise them in the editor. The specific sockets where I noticed the issue were ones where directional weapons could be placed.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI cannot see the orientation of the node. Ideally, I'd like to have an error depicting the forward axis of the node, similar to how a DirectionalLight uses an arrow to visualise its direction.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAlthough the orientation can be seen when selecting the node and switching to local space, it becomes ambiguous when deselected. The gizmo for both the Position nodes could be rotated by 180 degrees in any direction without it being visually clear. Having an arrow depicting forward (or maybe different size/thickness axes?) would show the user the orientation immediately. The RayCast node only shows a line and not a direction; when not selected it is unclear what the start and end points are. RayCast2D does show an arrow, so for the sake of consistency alone it would make sense for the 3D version to do the same.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt could work exactly the same for Position3D and RayCast as a directional light in 3D, and the Position2D could work the same as a RayCast2D.\r\n3D:\r\n![image](https://user-images.githubusercontent.com/7684647/92997576-3b358f80-f50c-11ea-81dc-a2e06fee46c5.png)\r\n2D:\r\n![image](https://user-images.githubusercontent.com/7684647/92997597-61f3c600-f50c-11ea-8f10-603164b0a98e.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used for every position and raycast node and wouldn't make a lot of sense as a tool; it's pretty much core functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt doesn't add any actual functionality other than a life improvement when working with the engine; that wouldn't make a lot of sense as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1497/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1496",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1496/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1496/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1496/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1496",
    "id": 700197819,
    "node_id": "MDU6SXNzdWU3MDAxOTc4MTk=",
    "number": 1496,
    "title": "Add reactive extensions to visual scripting",
    "user": {
      "login": "Thaina",
      "id": 1042507,
      "node_id": "MDQ6VXNlcjEwNDI1MDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1042507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thaina",
      "html_url": "https://github.com/Thaina",
      "followers_url": "https://api.github.com/users/Thaina/followers",
      "following_url": "https://api.github.com/users/Thaina/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thaina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thaina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thaina/subscriptions",
      "organizations_url": "https://api.github.com/users/Thaina/orgs",
      "repos_url": "https://api.github.com/users/Thaina/repos",
      "events_url": "https://api.github.com/users/Thaina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thaina/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-12T11:16:32Z",
    "updated_at": "2020-09-12T20:57:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nturn based casual web game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nrepetitive visual scripting just for easy task\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI wish godot should adopt reactive extension and let it be part of the signal system for scripting and visual scripting. This would make it easier to manipulate signal flow relationship and reactive extension is already have userbased\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis below is current visual scripting for simple\r\n\r\n![image](https://user-images.githubusercontent.com/1042507/92993823-fc5d0500-f51e-11ea-8f81-3c2fea44ff6f.png)\r\n\r\nThis is what I think will improved\r\n\r\n![image](https://user-images.githubusercontent.com/1042507/92994078-4a730800-f521-11ea-8c4f-295e87dd8acc.png)\r\n\r\nWith the reactive pattern. The signal and value would be combined into typed signal. Signal maybe void signal or have value or even a tuple of values combined from multiple signal (as it might be came from reactive `Zip` or `CombineLatest` signal)\r\n\r\nWith the example above. It change the graphing from\r\n\r\n```\r\nSignal trigger SetValue\r\nSetValue get a value from GetValue\r\n```\r\n\r\n into \r\n\r\n```\r\nSignal Select GetValue (change type from void to float)\r\nGetValue signal trigger SetValue\r\n```\r\n\r\nSignals could also be processed with reactive operator, buffering / throttling / combining / merging / filtering. It would me more intuitive to work with complex orchestration of signal\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nnot sure about this question\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt was changing of the visual scripting itself at the core so it better be a new version of visual scripting",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1495",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1495/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1495/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1495/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1495",
    "id": 700008961,
    "node_id": "MDU6SXNzdWU3MDAwMDg5NjE=",
    "number": 1495,
    "title": "Document how to set a Theme Property of Control node",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-12T03:31:55Z",
    "updated_at": "2020-09-12T15:42:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSetting a Control node's \"theme property\" with code is not intuitive and needs explanation in the docs.\r\n\r\nTo do this, a user has to figure out that they need to use `<control>.set(\"custom_constants/...\", <value>)`\r\nHow are they supposed to figure this out?\r\nIs the fact that you can hover over an inspector property to see its 'path' even documented anywhere?\r\n\r\nEven if a user figures this out, when they use `<control>.set(...)`, if they have a typo or write an incorrect string in the `set(...)` function, they get no warning/error to let them realize their mistake. \r\n(See: #1494)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. Document that you can hover over an inspector property to see its 'path'\r\n2. Document how to set Control theme properties using `set(\"custom_constants/...\", <value>)`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![ThemePropertyConfusion4](https://user-images.githubusercontent.com/60025044/92986547-5c04d300-f481-11ea-828b-f5de5f8fd483.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a documentation-related.\r\n\r\n**P.S.**\r\nSeriously, what is the `type` argument in `theme.set_constant(...)` supposed to be?\r\nAll I could find on it was this thread from 2016.\r\nhttps://godotengine.org/qa/4215/explanation-of-string-type-argument-in-theme-api\r\n\r\nThe docs page keeps using this word by never explains it.\r\nhttps://docs.godotengine.org/en/stable/classes/class_theme.html",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1494",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1494/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1494/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1494/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1494",
    "id": 700008112,
    "node_id": "MDU6SXNzdWU3MDAwMDgxMTI=",
    "number": 1494,
    "title": "Print error/warning when using `Object.set()` on nonexistent property",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-09-12T03:30:21Z",
    "updated_at": "2020-09-18T00:17:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNo error/warning is given when using `set(...)` on a nonexistent property\r\nI imagine most people would want to get an error/warning instead of no feedback at all.\r\nThey probably made a typo when writing the property name, or wrote the wrong word, like `visibility` instead of `visible`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGive an error when a user tries to do this.\r\n(Or a warning, at the very least)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![SetPropertyErrorMessage](https://user-images.githubusercontent.com/60025044/92985517-f3195d00-f478-11ea-88df-b71cfd2b0a8c.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1494/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1493",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1493/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1493/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1493/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1493",
    "id": 699951629,
    "node_id": "MDU6SXNzdWU2OTk5NTE2Mjk=",
    "number": 1493,
    "title": "Add more noise generators such as random, cellular, Anisotropic etc.",
    "user": {
      "login": "jak6jak",
      "id": 6291339,
      "node_id": "MDQ6VXNlcjYyOTEzMzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6291339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jak6jak",
      "html_url": "https://github.com/jak6jak",
      "followers_url": "https://api.github.com/users/jak6jak/followers",
      "following_url": "https://api.github.com/users/jak6jak/following{/other_user}",
      "gists_url": "https://api.github.com/users/jak6jak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jak6jak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jak6jak/subscriptions",
      "organizations_url": "https://api.github.com/users/jak6jak/orgs",
      "repos_url": "https://api.github.com/users/jak6jak/repos",
      "events_url": "https://api.github.com/users/jak6jak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jak6jak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-12T01:56:09Z",
    "updated_at": "2020-09-14T11:45:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nLearning about shaders and Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen creating procedural materials noise is often used. Common types of noise are random, cellular, FBM, and simplex noise.\r\n\r\nCurrently the visual shader editor only can generate simplex noise. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently if you want to use noise in visual shader editor you would have to build it yourself. This can be time consuming and difficult. Other visual shader editors have a large tool set of different noise generators such as Blender, and Substance. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would assume it would be added to the list of types of noise to create within the NoiseTexture resource. \r\n\r\nI am interested in helping implement this myself. I am not familiar with how opensimplexnoise was added. Any guidance would be appreciated. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis tutorial shows how to create the various nose through code: https://www.youtube.com/watch?v=ybbJz6C9YYA However, the tutorial does not use visual nodes. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHaving a good selection of noises is common in visual shader programs such as Blender, Substance, and Unity. I think adding more noise types will put godot closer to being on par with other visual shading programs. I do not know how easy it is to create another generator with a plugin. If it is easy I would love to know how.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1493/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1491",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1491/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1491/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1491/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1491",
    "id": 699573997,
    "node_id": "MDU6SXNzdWU2OTk1NzM5OTc=",
    "number": 1491,
    "title": "Allow VisibilityNotifier2D to be visible when running the project",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-11T17:38:42Z",
    "updated_at": "2020-09-18T13:42:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nYou can only view collision and navigation nodes in debug, if you have a visibility notifier 2d it's impossible to see where it is in relation to it's parent node to fine tune positioning, etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nallow a means of viewing visibility notifier rect\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThey are visible in IDE, so presume a simple means of enabling viewing via debug menu will be available...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, you have to do something silly like wrap it in a node and draw a sprite on top\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nwhen debugging you should be able to see your nodes, even if they're invisible\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1491/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1490",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1490/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1490/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1490/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1490",
    "id": 699294774,
    "node_id": "MDU6SXNzdWU2OTkyOTQ3NzQ=",
    "number": 1490,
    "title": "Improve Tree's multiselect signals",
    "user": {
      "login": "mnemoli",
      "id": 18196666,
      "node_id": "MDQ6VXNlcjE4MTk2NjY2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18196666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mnemoli",
      "html_url": "https://github.com/mnemoli",
      "followers_url": "https://api.github.com/users/mnemoli/followers",
      "following_url": "https://api.github.com/users/mnemoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/mnemoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mnemoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mnemoli/subscriptions",
      "organizations_url": "https://api.github.com/users/mnemoli/orgs",
      "repos_url": "https://api.github.com/users/mnemoli/repos",
      "events_url": "https://api.github.com/users/mnemoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mnemoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-11T13:04:22Z",
    "updated_at": "2020-10-23T17:53:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nEditor plugin which triggers an event as a result of FileSystem selections.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMulti-select trees (i.e. what the filesystem dock uses) currently emit a `multi_selected` signal for each item which has changed. That is:\r\n- If you have a single item selected, and select a different single item instead: it will raise two `multi_selected` events.\r\n- If you do a shift-select across multiple items: it will raise as many `multi_selected` events as there are items selected. These are raised at the time each item is processed.\r\n\r\nAnyone who wishes to trigger something as a result of the user's selection must therefore understand the following unintuitive things:\r\n- `multi_selected` is raised for items which have actually been UNselected\r\n- Any action which you wish to do as a result of a user's selection change must be idempotent to some degree. For example, if you want to show a panel with the result of the user's selection, you can't spawn a new panel for each `multi_selected` event.\r\n- Attempting to call `get_editor_interface().get_current_path()`, `tree.get_selected()` or `tree.get_next_selected()` while processing a `multi_selected` event may return the 'wrong' thing, since the full selection hasn't been processed yet\r\n- There is no way to know when the selection action IS fully complete\r\n- What if you wanted to check whether two items had been selected simultaneously? If item2 is selected and then the user single-clicks item1, the `multi_selected` event for item1 will be raised BEFORE the deselected `multi_selected` event for item2 is raised. You will erroneously think that both items were selected simultaneously for some period of time, whereas from the user's point of view, they weren't.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose a \"multi_select_complete\" signal which is emitted only when selection is complete. This signal will only raise for multi-select trees, and will contain a list of the TreeItems selected. This provides a much simpler and more intuitive way for users writing GUIs to process such events.\r\n\r\nThe FileSystem dock can connect to this and raise a \"files_selected\" event (since the tree is not easily accessible from the filesystem itself) with an array of selected paths. Possibly similar for the scene tree dock.\r\n\r\nAdditionally, it seems that getting the tree selection currently involves partially traversing the tree multiple times via `get_next_selected`. Can this be cached at selection time instead, and provided via a new function returning a full list?\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nDraft here: https://github.com/godotengine/godot/compare/master...mnemoli:tree-enhance-master\r\n\r\n(A bit inefficient at the moment, since it traverses the tree to get the selection right after we've just calculated the selection!)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI see no way to work around it if you want to trigger at the point the selection is actually _complete_.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nInvolves the inner workings of a core gui node.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1490/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1489",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1489/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1489/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1489/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1489",
    "id": 697550763,
    "node_id": "MDU6SXNzdWU2OTc1NTA3NjM=",
    "number": 1489,
    "title": "Add action notifications/toast menu system",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-09-10T07:29:17Z",
    "updated_at": "2020-11-13T20:20:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany actions in the editor have no feedback to the user. E.g. `Make Subresources Unique`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSome more obvious way of informing the user of actions in the editor. One option for this is is something like a toast menu. A few other applications use this, like VS Code, Unreal Engine, and some Adobe products.\r\n\r\n![image](https://user-images.githubusercontent.com/41730826/92693838-84110b00-f389-11ea-9b10-98cb3cbfefc1.png)\r\n![image](https://user-images.githubusercontent.com/41730826/92693891-968b4480-f389-11ea-9a37-e33ca1885a88.png)\r\n![image](https://user-images.githubusercontent.com/41730826/92693980-b1f64f80-f389-11ea-99bc-62d9b438a911.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust spitballing here, probably best to put it in something like `EditorNode`, where there would be a method like `add_notification` or similar. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCan't be scripted\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs above",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1489/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1487",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1487/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1487/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1487/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1487",
    "id": 697164546,
    "node_id": "MDU6SXNzdWU2OTcxNjQ1NDY=",
    "number": 1487,
    "title": "Add \"Open Owner Scenes\" to Script editor panel's context menu",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-09T21:16:49Z",
    "updated_at": "2020-09-14T00:03:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOpening of script owner scenes could be a little more convenient.\r\n\r\nIf you have a script in your `Script Panel`, but the owner scene is not open, you can:\r\n- (1) Right click the script to open the dropdown menu\r\n- (2) Select '`Show in FileSystem`'\r\n- (3) Double-click the scene in the `FileSystem` to open it (_**if**_ it's in the same folder as the script)\r\n\t\r\nIt's a minor annoyance, but if I have my `FileSystem` open where I want it, I'd rather not have it jump to another location just to open the owner scene.\r\n\r\nAlso, if for whatever reason, the script in question is not located in the same folder as the owner scene(s), then '`Show in FileSystem`' isn't going to locate the scene.\r\n\r\n(You could search for it by name, but when you click on the scene to open it, it will jump the current `FileSystem` location to that folder, which could be annoying.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust add a `View Owners` dropdown menu option when right-clicking a script from the `Script Panel`\r\n(This menu option already exists when right-clicking the script in the `FileSystem`, but not the `Script Panel`)\r\n\r\nAlso, if there is only one scene which owns the script (or you want to open all owner scenes), adding a `Open Owner Scenes` button would be at least one less click.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![ScriptPanelDropdownProposal2](https://user-images.githubusercontent.com/60025044/92655428-07adf780-f2b7-11ea-8c87-c699d5e019ad.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nDon't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a basic \"quality of life\" improvement for the editor",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1487/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1486",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1486/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1486/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1486/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1486",
    "id": 697135006,
    "node_id": "MDU6SXNzdWU2OTcxMzUwMDY=",
    "number": 1486,
    "title": "Add features and API for simultaneous working with multiple projects",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-09T20:27:25Z",
    "updated_at": "2020-09-10T08:00:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI often keep several projects open at the same time in order to conveniently compare project settings, or copy certain parts of the code from one project to another.\r\n\r\nbut often I have to use an external OS tools, such as file explorer/ file manager, in order to copy scenes and resources from one project to another.\r\nAnd sometimes it is not as convenient as if I could do it entirely in godot editor or using plugins.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nthe solution would be to create a system that would make it more convenient to work with several projects at the same time, without the need to access OS tools such as file explorer, file managers, etc.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Changes in the interface, adding new menu items and actions:\r\n\r\n   1.1. I think it would be convenient to add project tabs between which the user can switch, thereby selecting the current project, just like the user selects the current scene using the scene tabs.\r\n   1.2. in the main menu (Scene, Project, Debug ...) the Project section could be revised.\r\nfor example, actions could be added:\r\n   - open project\r\n   - close project\r\n   - open project in new tab\r\n\r\n   1.3. opening the Project Manager may not close the current project, as projects can be added to a new tab.\r\n\r\n   1.4 it would be convenient to add actions such as:\r\n\r\n      in filesystem right-click context menu:\r\n      - copy (to copy selected resources)\r\n      - cut (to copy selected resources and remove them from current project after them will be successfully pasted to another project)\r\n      - paste (to paste resources in current project dir\r\n\r\n      somewhere:\r\n      - search in opened projects\r\n\r\n\r\n\r\n2. Adding an API for creating plugins that interact with multiple open projects:\r\n\r\nfirst API methods that come to mind:\r\n- proj get_project (project_idx: int)\r\n- open_project (dir: String, in_new_tab = true)\r\n- close_project (proj)\r\n- set_current_project (proj)\r\n\r\nas soon as the user gets the `proj` value (for example using `get_project()` ), he can get the project scenes and work with them, as well as doing all the same things that are available when creating plugins.\r\n\r\nas a result, all this would make it more convenient to work with several projects at the same time, and getting rid of routine actions which plugins could do instead of a user\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe current plugins API is not enough to implement this with plugins elegantly and organically",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1486/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1484",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1484/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1484/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1484/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1484",
    "id": 696787810,
    "node_id": "MDU6SXNzdWU2OTY3ODc4MTA=",
    "number": 1484,
    "title": "Make a visual script box like comment, but with larger font size + search for words in comments . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-09-09T12:51:56Z",
    "updated_at": "2020-09-11T03:14:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, or so . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRe-reading an old visual script is a bit tough, as one has to sort of, re-understand the entire code, to find a particular place, maybe to help better ' see ' what's happening, we could get a special ' comment ' box, where one could have a larger font size, so one could make better fonts, that work, zoomed out . . . One could even make an extra zoom level, or two, if one could ' read ' it, that big . . It would help re-read larger scripts, if one could search for ' words ' in boxes, and then ' jump ' to them, ie. one gets a list, with all ' comment ' nodes, ie. Comment 1, Comment 2, Comment 3 . . And, one could search, for words in the comments, such as ' character controller ', and then eliminate options that don't fit, on the list, and then double-click the remaining ones, to quickly move around the script, it could help reduce this stuff . . .\r\n\r\n<img width=\"789\" alt=\"Skærmbillede (217)\" src=\"https://user-images.githubusercontent.com/61069740/92600290-a896b580-f2ab-11ea-9b5a-e6ff9ab47bb0.png\">\r\n\r\nIt would be a standard comment box, but with a font that could be read, when zoomed out, that way we could even have an even bigger zoomed out mode, or two, and still be able to see, where stuff is, or so . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust, it's tough to keep track of large scripts, or re-read them later, this would help deal with that, or so . . Not, sure . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake it so, the ' Comment ' box supports several font sizes, with an integer increments, +1, +2,  +3, so on, so it's readable, when zooming, or so . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know how to do that, another option could be a border-less comment box, for quickly adding words, for over-view, navigation, or so . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nJust, because zoomed out works a bit wonky, atm, for visual script . . .\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1482",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1482/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1482/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1482/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1482",
    "id": 696369797,
    "node_id": "MDU6SXNzdWU2OTYzNjk3OTc=",
    "number": 1482,
    "title": "Add support for project manager plugins",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-09T03:28:55Z",
    "updated_at": "2020-09-09T11:54:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd like to create a plugin that would implement Project Templates\r\nhttps://github.com/godotengine/godot-proposals/issues/1481\r\nThe problem is afaik there's no way to customize Project Manager with gds plugin, my idea was to add there \"Project templates\" tab.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAbility to create custom Project Managers with plugins and choose what Manager implementation to use, could solve the problem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMaybe it could be some kind of plugin that loads MyProjectManager that extends default Project manager class and then uses it instead of default one.\r\nSo some API methods would be useful like\r\n— what project manager to use (default or some custom one)\r\n— sort, search, scan projects etc\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis should be core one. Implementing custom ProjectManager with a plugin from scratch seems like a rather laborious affair",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1482/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1481",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1481/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1481/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1481/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1481",
    "id": 696342404,
    "node_id": "MDU6SXNzdWU2OTYzNDI0MDQ=",
    "number": 1481,
    "title": "Add a way to save and load project templates",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-09T02:35:59Z",
    "updated_at": "2020-09-09T16:20:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nmy workflow involves frequent creation of projects. I think this is not uncommon, especially when creating plugins.\r\n\r\nI noticed that often when creating a project, I would like to have certain presets of this project, depending on its type and the characteristics of the project that I am going to work on, a specific set of project settings, scripts, plugins, scenes and assets depending on a project type.\r\n\r\nThe problem is it seems now I need to manually pre-setting each new project from scratch. At least current Project Manager dialog can either load a project or create a project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis could be fixed implementing something like `project templates`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\none could create a project, do some settings, then save it as a project template\r\n`project — save as Project template`\r\n\r\nThen when you want to create a new project from template, in Project manager you could select `Project Templates` tab then:\r\n1. specify new project directory\r\n2. select one of project templates you have created\r\n3. and press button \"create from template\".\r\n\r\nAs a result a new project will be created and all the selected template content will be duplicated there\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it's possible to implement this feature with a gdscript plugin, but it would have some drawbacks, for example the user can't use project manager for creating projects from template, since afaik there's no Project manager API like adding new nodes etc",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1481/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1480",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1480/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1480/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1480/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1480",
    "id": 696290752,
    "node_id": "MDU6SXNzdWU2OTYyOTA3NTI=",
    "number": 1480,
    "title": "Add ability to set editor settings on a per-project basis",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-09T01:01:51Z",
    "updated_at": "2020-09-11T15:52:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nsay there is \"constrain editor view\" setting.\r\nI'd like to have it enabled by default but disabled for some projects, say for project X.\r\nbut now there's no \"official\" way to do that.\r\nAs a result every time I open project X, I need to go to Editor settings, then \r\ndisable \"constrain editor view\" then do some work, and after that set the setting \"constrain editor view\" back.\r\nand what would be really inconvenient if I need to do this for several/several dosens of Editor settings\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is adding ability to set editor settings per project.\r\nI think it's possible to have global Editor settings (what Editor settings actually are now) and local ones.\r\nFor example the user could specify which settings he wants to be \"local\", so that these settings won't affect  other projects Editor settings.\r\n\r\nI believe this would make work with different projects more flexible and customizable, because the user may wish different Editor settings values for different projects (depending on project type, game genre, target platforms and so on)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\"local project editor settings\" could be stored in project res:// dir for example, maybe in a separate file. I think there's no need to write every single setting value, but only values of settings which user make \"local\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit could be a plugin but I'm afraid it would be a hacky one, and this won't work correctly in some cases\r\nfor example it is obvious that the implementation of this feature as a plugin will require the user to have this plugin active in every project where the user wants to use this feature. And this may be inconvenient",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1480/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1478",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1478/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1478/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1478/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1478",
    "id": 696028622,
    "node_id": "MDU6SXNzdWU2OTYwMjg2MjI=",
    "number": 1478,
    "title": "Add emissive/unshaded output in CanvasItem shaders",
    "user": {
      "login": "andriyDev",
      "id": 22285953,
      "node_id": "MDQ6VXNlcjIyMjg1OTUz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22285953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andriyDev",
      "html_url": "https://github.com/andriyDev",
      "followers_url": "https://api.github.com/users/andriyDev/followers",
      "following_url": "https://api.github.com/users/andriyDev/following{/other_user}",
      "gists_url": "https://api.github.com/users/andriyDev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andriyDev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andriyDev/subscriptions",
      "organizations_url": "https://api.github.com/users/andriyDev/orgs",
      "repos_url": "https://api.github.com/users/andriyDev/repos",
      "events_url": "https://api.github.com/users/andriyDev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andriyDev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-08T16:50:14Z",
    "updated_at": "2020-09-10T16:13:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D overhead game with lighting effects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCanvasItem shaders (at least VisualShaders) do not have an option to output \"emissive\"/unshaded colours. So you can either have only an unshaded Sprite, or a lit sprite, but not parts being lit and others unlit.\r\n\r\nExample 1: A wolf with glowing red eyes. The wolf should be completely black when not in light (i.e. through a CanvasModulate), but it's eyes should be visible when in darkness.\r\nExample 2: An enemy taking damage should flash red even when it darkness, but the enemy should not be visible in darkness.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy having an emissive/unshaded output in CanvasItem shaders, this can simply be colour added to the output of the lighting pass.\r\n\r\nExample 1: The wolf can have two sprite sheets, one for the actual wolf, and one for its eyes. Then the unshaded output simply samples from the second texture, meaning the eyes will still be visible even when in darkness.\r\nExample 2: When taking damage, the emissive colour can be set to red, and once the damage has passed, the emissive colour can be set to transparent.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCurrently (by my understanding) the final output colour is just:\r\n`final_colour = colour_from_light_pass`\r\nThe new code could be as simple as:\r\n`final_colour = colour_from_light_pass + unshaded_from_fragment`\r\nAn even better approach would be to use the blending options. For example, mix:\r\nfinal_colour = mix(colour_from_light_pass, unshaded_from_fragment, unshaded_from_fragment.a)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis feature can be worked around by having a second Sprite on top of the first, which is unlit and handles the emissive component, but this means twice as many nodes for each Sprite, and means you may need duplicated code in 2 separate shaders to get the same look.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think changes to the shader system work in an add-on. This seems to need to be implemented in C++ in the core engine rendering system.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1477",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1477/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1477/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1477/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1477",
    "id": 696011904,
    "node_id": "MDU6SXNzdWU2OTYwMTE5MDQ=",
    "number": 1477,
    "title": "Allow creating AnimatedTextures from the FileSystem dock",
    "user": {
      "login": "CenTdemeern1",
      "id": 24682280,
      "node_id": "MDQ6VXNlcjI0NjgyMjgw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24682280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CenTdemeern1",
      "html_url": "https://github.com/CenTdemeern1",
      "followers_url": "https://api.github.com/users/CenTdemeern1/followers",
      "following_url": "https://api.github.com/users/CenTdemeern1/following{/other_user}",
      "gists_url": "https://api.github.com/users/CenTdemeern1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CenTdemeern1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CenTdemeern1/subscriptions",
      "organizations_url": "https://api.github.com/users/CenTdemeern1/orgs",
      "repos_url": "https://api.github.com/users/CenTdemeern1/repos",
      "events_url": "https://api.github.com/users/CenTdemeern1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CenTdemeern1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-08T16:24:38Z",
    "updated_at": "2020-09-08T17:49:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating AnimatedTexture resources from a lot of frames is slow.\r\nEspecially when you have 50+ frames, in my case.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen selecting multiple image/texture files in the FileSystem tab, add an option to \"convert to AnimatedTexture\", which, when clicked, creates an AnimatedTexture resource with all the frames already loaded in, which is easier than dragging and dropping in 50+ files from the FileSystem tab into the Inspector tab. (Also, please load the frames in lexographic order!)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Convert_to_animtex_mockup](https://user-images.githubusercontent.com/24682280/92502658-809e4800-f200-11ea-8dff-49a90cff1efa.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot applicable, as this is an editor feature in a right-click menu.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be much more accessible when bundled with Godot, making it easier for everyone to add animation.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1476",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1476/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1476/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1476/events",
    "html_url": "https://github.com/godotengine/godot-proposals/pull/1476",
    "id": 695863874,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDgyMDM2ODM4",
    "number": 1476,
    "title": "Link Godot Ideas repository as an alternative for GIP",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-08T13:17:09Z",
    "updated_at": "2020-12-09T17:50:39Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/pulls/1476",
      "html_url": "https://github.com/godotengine/godot-proposals/pull/1476",
      "diff_url": "https://github.com/godotengine/godot-proposals/pull/1476.diff",
      "patch_url": "https://github.com/godotengine/godot-proposals/pull/1476.patch"
    },
    "body": "Resolves #39.\r\nResolves #47.\r\nCloses #91, as suggested by @Calinou in https://github.com/godotengine/godot-proposals/issues/91#issuecomment-688850693.\r\nCloses #779, similar suggestion by @aaronfranke in https://github.com/godotengine/godot-proposals/issues/779#issuecomment-625595439, with the 👍 from the OP.\r\n\r\nCurrently, GIP has a requirement that proposals must describe a concrete use case to justify making a proposal:\r\n\r\n> All proposals must be linked to a substantive use-case. In justifying your proposal, it is not enough to say it would be \"nice\" or \"helpful\". Use the template to show how Godot is not currently meeting your needs and then explain how your proposal will meet a particular need.\r\n\r\nThis pull request amends the third rule for submitting a proposal to provide an alternative way to present and discuss ideas in the [`Godot Ideas`](https://github.com/godot-extended-libraries/godot-ideas) repository (unofficial) in case people do not have any concrete use cases to justify the proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1476/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1473",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1473/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1473/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1473/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1473",
    "id": 695432059,
    "node_id": "MDU6SXNzdWU2OTU0MzIwNTk=",
    "number": 1473,
    "title": "Export game as embeddable iOS view to easily use non-Godot code (Android already supported)",
    "user": {
      "login": "bfelbo",
      "id": 23178145,
      "node_id": "MDQ6VXNlcjIzMTc4MTQ1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/23178145?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bfelbo",
      "html_url": "https://github.com/bfelbo",
      "followers_url": "https://api.github.com/users/bfelbo/followers",
      "following_url": "https://api.github.com/users/bfelbo/following{/other_user}",
      "gists_url": "https://api.github.com/users/bfelbo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bfelbo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bfelbo/subscriptions",
      "organizations_url": "https://api.github.com/users/bfelbo/orgs",
      "repos_url": "https://api.github.com/users/bfelbo/repos",
      "events_url": "https://api.github.com/users/bfelbo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bfelbo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-09-07T23:15:15Z",
    "updated_at": "2020-12-25T20:08:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMultiplayer game for iOS and Android\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to the social nature of our game, we need to:\r\n- Use many mobile features like microphone permissions (https://github.com/godotengine/godot-proposals/issues/1272), in-app purchases (https://github.com/godotengine/godot-proposals/issues/242),  [VoIP push notifications](https://developer.apple.com/documentation/pushkit/responding_to_voip_notifications_from_pushkit), [ForegroundService](https://developer.android.com/guide/components/services), [CallKit](https://developer.apple.com/documentation/callkit). Godot doesn't support these, but there's lots of battle-tested iOS/Android libraries for these features and it would be great to rely on those libraries.\r\n- Build lots of UI to support multiplayer features (e.g. friends, guilds, chat), which would be  easier to do using e.g. the [React Native](https://github.com/facebook/react-native) framework, which is focused exclusively on building UI. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGodot added support for [embedding your game inside an Android app](https://github.com/godotengine/godot/pull/39855) and it would be amazing if Godot added support for iOS as well.\r\n\r\nA few benefits:\r\n- Developers wanting more flexibility or needing specific mobile features could use the approach. In this way, Godot doesn't have to build support for many mobile features, e.g. https://github.com/godotengine/godot-proposals/issues/1272, https://github.com/godotengine/godot-proposals/issues/1175, https://github.com/godotengine/godot-proposals/issues/242, https://github.com/godotengine/godot-proposals/issues/1427, https://github.com/godotengine/godot-proposals/issues/1184.\r\n- Many multiplayer games need a lot of UI such as e.g. friends, guilds, chat. It would be easy to write this UI in a cross-platform UI framework such as [React Native](https://github.com/facebook/react-native) or [Flutter](https://github.com/flutter/flutter), which has lots of libraries for e.g. chat.\r\n- It would be easy to add Godot games inside existing apps, which is becoming a increasingly popular trend (see e.g. Snapchat games).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimilar to https://github.com/godotengine/godot/pull/39855 for Android, it would be possible to export your game as an embeddable iOS view.\r\n\r\nA developer would create their own Android/iOS app from scratch and use the Godot embeddable view. Inside the app, the Godot view could be displayed for the actual gameplay. For instance, consider the popular mobile games Brawl Stars, Fortnite, and PUBG. The developers could code up all the UI, app permissions, ad tracking, etc. in any language and then use Godot once the user clicks \"Play\" and enters the actual gameplay.\r\n\r\nOne way to think of the current default Godot app exports is that they're a embeddable view + a wrapper. The view has all the core functionality and the wrapper handles things like setting the right permissions in the `AndroidManifest.xml`. If this was separated, it would be easy for anyone to export a complete app or to just use the embeddable view depending on their use case.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I know of.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPorting/exporting is best handled in core and this proposal would alleviate the need for many other core proposals (see linked issues above).\r\n\r\n**EDIT:**\r\nUpdated to split out documentation and focus on iOS support based on @m4gr3d's [suggestion](https://github.com/godotengine/godot-proposals/issues/1473#issuecomment-692333588).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1473/reactions",
      "total_count": 10,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1472",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1472/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1472/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1472/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1472",
    "id": 695370761,
    "node_id": "MDU6SXNzdWU2OTUzNzA3NjE=",
    "number": 1472,
    "title": "Add a sound property to buttons",
    "user": {
      "login": "SoloCarryGuy",
      "id": 44634090,
      "node_id": "MDQ6VXNlcjQ0NjM0MDkw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/44634090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoloCarryGuy",
      "html_url": "https://github.com/SoloCarryGuy",
      "followers_url": "https://api.github.com/users/SoloCarryGuy/followers",
      "following_url": "https://api.github.com/users/SoloCarryGuy/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoloCarryGuy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoloCarryGuy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoloCarryGuy/subscriptions",
      "organizations_url": "https://api.github.com/users/SoloCarryGuy/orgs",
      "repos_url": "https://api.github.com/users/SoloCarryGuy/repos",
      "events_url": "https://api.github.com/users/SoloCarryGuy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoloCarryGuy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-07T20:13:41Z",
    "updated_at": "2020-12-28T17:28:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a match 3 game\r\n**Describe the problem or limitation you are having in your project:**\r\nFor all the button presses I have to manually code a sound to be played by creating a global sound manager whenever a button is pressed\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd sound to be played on button pressed\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSorry, I am a beginner in godot and game development, I don't know how to impplement it.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think this is used for every button in every game made.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAgain, because there are always sounds on button presses",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1469",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1469/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1469/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1469/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1469",
    "id": 694614969,
    "node_id": "MDU6SXNzdWU2OTQ2MTQ5Njk=",
    "number": 1469,
    "title": "A CollisionHeight collision node proposal (not HeightMapShape)",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-07T01:35:45Z",
    "updated_at": "2020-09-07T12:00:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn infinite terrain game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm creating a terrain along a vertex shader that calculates the height from global vertex position (xz), this is really fast in shader as this uses a mathematical formula to get height for every vertex (and the object is offset by Camera global position xz to give the illusion of infinite terrain). But I need some way to efficiently have collisions on CPU without having to worry about the terrain size nor the resolution of it. The way I'm currently thinking to use is to have a HeightMapShape as CollisionShape's shape, but the limitations is the map size that can have a time complexity of “O(x*y)” (or “O(x^2)” if I have a size variable and set as width and depth) and the resolution that is limited to integer (can be scaled using Spatial's scale property), with higher resolution will have a huge impact on performance.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature is to add a CollisionHeight node, that can be used as StaticBody's CollisionShape (I don't know if RigidBody and KinematicBody have some application with this kind of collision), where it can calculate the collision using a height calculated from given XZ position (in global coordinates), this can create a solution that is not needed to worry in the resolution and size of the collision, as it's calculated entirely from custom mathematical functions.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis node could have a virtual function called “sample_height(position: Vector2) -> float” that the developer can create a custom mathematical operation to calculate the height from the given position. And is it!Off course there're some aspects to worry, like the normal from position calculated from sampling two more points with a tiny step to build the normal, how the other CollisionShape will collide with this kind of collision, etc. This is an example on how this function can be overrided:\r\n\r\n```\r\nextends CollisionHeight\r\n\r\nexport (float) var height;\r\nexport (int) var octaves;\r\nexport (float) var period;\r\nexport (float) var persistance;\r\nexport (float) var lacunarity;\r\nexport (Vector2) var octave_offset;\r\n\r\n#Really simple way to override the function creating sine-cossine waves combining multiple waves.\r\nfunc sample_height(position: Vector2) -> float:\r\n\tvar s = position * Vector2(period, period) + offset;\r\n\tvar o_off = Vector2(0, 0);\r\n\tvar h = sin(s.x) * cos(s.y);\r\n\tfor i in range(1, octaves):\r\n\t\ts *= lacunarity;\r\n\t\to_off += offset * i * octave_offset;\r\n\t\th += sin(s.x + o_off.x) * cos(s.y + o_off.y) * persistance;\r\n\treturn h * height;\r\n```\r\n\r\nIf the programmer wants to calculate the height with the StaticBody's Y position, he needs to add manually to the output of the function.\r\n\r\nThen to calculate the normal from a point, could be something like that:\r\n\r\n```\r\nfunc sample_normal(position: Vector2) -> Vector3:\r\n\tvar height : float = sample_height(position);\r\n\tvar normal_x : float = height - sample_height(pos + Vector2(NORMAL_SAMPLE_STEP, 0.0));\r\n\tvar normal_y : float = NORMAL_SAMPLE_STEP;\r\n\tvar normal_z : float = height - sample_height(position + Vector2(0.0, NORMAL_SAMPLE_STEP));\r\n\treturn Vector3(normal_x, normal_y, normal_z);\r\n```\r\n\r\nThe sample_normal method is inspired in the Godot Docs tutorial: [Your first Spatial shader: part 2](https://docs.godotengine.org/pt_BR/stable/tutorials/shading/your_first_shader/your_second_spatial_shader.html)\r\n\r\nThe NORMAL_SAMPLE_STEP parameter is a private constant stored in the CollisionHeight class to say how much to step to sample a point, this need to be adjusted to have a higher precision.\r\n\r\nThe reason why to have this node as Spatial node and not a Shape node because it makes it easier to create one without needing to create a separated Resource to store the collision logic.\r\n\r\nThen, to say if some collision is detect, just test if the object's collider corners position is bellow (or will be bellow) some height sampled from xz position. I think if is implemented correctly, this can easily be better than HeightMapShape in most of the scenarios.\r\n\r\nI don't know if could be practical to have the get_normal function as a virtual function, because I can't think of any condition to override this to calculate custom normals. But just in any case, it would be nice to have this as virtual method, so anyone can create a custom normal logic.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, because this would need to rewrite the entire collision detection to be able to handle this kind of collision, as there isn't any way to manually write a custom collision solver with the current given Godot tools.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause if this is on core, this can be easier to manipulate the collision without changing a lot of parameters and can be really useful to game developers create a game where can have a infinite sized world with proper collision, without worring with resolution, size, etc.\r\n\r\nObs: When I say infinite sized world, this is pratically not possible, as in very high positions, the collision and rendering behaves strangely.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1469/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1468",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1468/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1468/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1468/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1468",
    "id": 694516381,
    "node_id": "MDU6SXNzdWU2OTQ1MTYzODE=",
    "number": 1468,
    "title": "Add a dedicated 2.5D editor",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-06T20:25:24Z",
    "updated_at": "2020-09-10T08:21:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2.5D Fight game but using 3D nodes\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen using 3D sprites, you dont have same features as when working with 2D nodes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo overcome this problem getting these 2d features and enabling them in 3d.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n* Grid\r\n- the user needs to position the sprites pixel-by-pixel \r\n![Peek 2020-09-03 19-35](https://user-images.githubusercontent.com/58845030/92334547-78f66c00-f065-11ea-8f9a-abfb0663452b.gif)\r\n\r\n- 2d like collisionshapes scaling and positioning\r\n(I was thinking here, in 2.5D games, one axis of the collisionshape can be ignored!)\r\n![Peek 2020-09-03 19-35](https://user-images.githubusercontent.com/58845030/92334585-d8ed1280-f065-11ea-9191-2cf2a81297b2.gif)\r\n\r\n- Onion Skin for 3DSprite node (MeshInstance to?)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure of it\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCore 2D features.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1468/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1467",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1467/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1467/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1467/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1467",
    "id": 694483351,
    "node_id": "MDU6SXNzdWU2OTQ0ODMzNTE=",
    "number": 1467,
    "title": "Expose the Filter flag and Linear Interpolation option in ViewportContainer",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-06T18:40:47Z",
    "updated_at": "2020-09-06T20:27:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently ViewportContainers don't have a way to set the interpolation filter what makes it limited to 3D applications.\r\n\r\nThe usual workaround is to use TextureRects instead as a ViewportContainer but it's not a perfect replacement and there's no point in not expose this property. \r\n\r\nOn top of it pointing the TextureRect to the same Viewport that is set in the ViewportContainer you can setup their Filter flag what while not be considered a bug (They are the same texture at the end) only shows how much simpler it would be if only this property was exposed in the ViewportContainer directly.\r\n\r\n![godot windows tools 64_Pnvvcnc5gX](https://user-images.githubusercontent.com/6172013/92332798-cae3c580-f056-11ea-9a7b-ac5be596569a.png)\r\n![godot windows tools 64_NJBlkXiQNs](https://user-images.githubusercontent.com/6172013/92332800-cc14f280-f056-11ea-9d67-aa4183328285.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExpose the Filter flag in the ViewportContainer would just fix this. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust a bool in the ViewportContainer inspector.\r\n![ApplicationFrameHost_cgLBD1M3eH](https://user-images.githubusercontent.com/6172013/92332928-6e34da80-f057-11ea-9cd8-1079e516376f.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't be workarounded by code. It's not exposed in GDScript/C# either. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a Core Feature of the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1466",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1466/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1466/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1466/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1466",
    "id": 694478792,
    "node_id": "MDU6SXNzdWU2OTQ0Nzg3OTI=",
    "number": 1466,
    "title": "Add support for editing Godot shaders in an external editor",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-09-06T18:26:05Z",
    "updated_at": "2020-09-08T15:01:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nYou can't nicely edit Godot Shaders in external text editors like VSCode.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n- Allow to set External Text Editors as default shader editor\r\n- Add support to Godot Shader syntax and functions in external text editors like VSCode\r\n- Clicking on shader icons/files in editor all over the place open it externally instead of use the internal shader editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDescribed above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used all the time for everyone that use external editors.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core feature for the ecosystem not to Godot editor only itself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1466/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1465",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1465/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1465/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1465/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1465",
    "id": 694454581,
    "node_id": "MDU6SXNzdWU2OTQ0NTQ1ODE=",
    "number": 1465,
    "title": "Allow to edit objects of SubViewports that have the Own World property enabled",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-06T17:10:19Z",
    "updated_at": "2020-09-19T03:08:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace Tactical RPG https://twitter.com/ZeroPointGame \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot sure if it's a feature request or a bug but Control Objects in Sub Viewports are not shown in the Editor at all when \"Own World\" is set make they impossible to edit.\r\n![godot windows tools 64_X9NO8cqpiB](https://user-images.githubusercontent.com/6172013/92331013-afbe8900-f049-11ea-837b-ed8cabee4e42.png)\r\n\r\nSpatial Objects also suffer with that but at least the Gizmo is shown.\r\n\r\n![godot windows tools 64_w1gjpdRVQv](https://user-images.githubusercontent.com/6172013/92331086-468b4580-f04a-11ea-8ef7-faeef18d7141.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIdeally when selected a object inside a sub Viewport that is using \"Own World\" the hole scene should change to this \"sub world\" allowing edit it as in any normal scene.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nClick in any sub viewport object -> Change to the world of this Sub View port allow it to be edited as normally.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's used all the time if you're using sub viewports.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1465/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1464",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1464/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1464/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1464/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1464",
    "id": 694315165,
    "node_id": "MDU6SXNzdWU2OTQzMTUxNjU=",
    "number": 1464,
    "title": "Add an option to make the editor not use the dedicated GPU by default on Linux",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318904,
        "node_id": "MDU6TGFiZWwyMzU5MzE4OTA0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:linuxbsd",
        "name": "platform:linuxbsd",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-06T09:46:47Z",
    "updated_at": "2020-09-18T22:09:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiple games, and this would apply to all of them.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a laptop with a hybrid GPU setup. The editor sets `DRI_PRIME=1` by default in order to use the dedicated GPU. This means I have to launch it from the terminal in order to manually set `DRI_PRIME=0` if I didn't want to use the dedicated GPU (to save battery power, or to test my game with a weaker GPU). In GNOME, there is an option to launch an app with the dedicated GPU without needing to run it from a terminal:\r\n![Screenshot from 2020-09-06 13-41-40](https://user-images.githubusercontent.com/36982494/92323075-cb746000-f046-11ea-83f8-8c3b2af4e924.png)\r\nHowever, there is no option to do the opposite, since all apps are expected to default to the integrated GPU.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option would be added in the editor settings to stop it from setting `DRI_PRIME=1`. I understand the reason behind this default behavior, but making it optional would be better.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, one can just run the editor from a terminal, but this shouldn't be necessary.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it's a modification to the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1464/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1463",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1463/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1463/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1463/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1463",
    "id": 693788084,
    "node_id": "MDU6SXNzdWU2OTM3ODgwODQ=",
    "number": 1463,
    "title": "Import / Export extensions",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-04T23:11:16Z",
    "updated_at": "2020-09-05T00:00:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nGodot Engine and a 3D Multiplayer Game.\r\n \r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThis is a way to implement https://github.com/godotengine/godot-proposals/issues/1398. \r\n\r\nIn GLTF2 we currently code lights and cameras directly into the gltf2 importer.\r\n\r\nglTF2 has many extensions. It doesn't make sense for all them to be embedded into the core of Godot Engine. There's also user extensions that shouldn't be part of Godot Engine.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nUsing this extension system, the lights and cameras in gltf2 can be moved to c++ extensions. This also allows other uses.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe main goal is for these extensions to be gdscript-able.\r\n\r\nI wanted to move the glTF2 camera and light extensions to an \"Extension class of a glTF2 document\".\r\n\r\nIn the import panel, we can select import/export extensions which are just global named import/export extensions.\r\n\r\n**Import:**\r\n\r\nread from disk -> extension pre -> parse into gltf/fbx document -> extension current -> packed scene -> extension post\r\n\r\n**Export:**\r\n\r\npacked scene -> extension pre -> convert to gltf/fbx document -> extension current -> write to disk -> extension post\r\n\r\nThere's a stack of extensions. The order of the extensions are interleaved. The pre of all the extensions is done before all the current extensions, and all the post extensions.\r\n\r\nUser modifications should be stored in the .import file for use in these scripts.\r\n\r\nThis should also allow the creation of new properties that are stored inside of the import panel and saved in the .import file.\r\n\r\n**Misc other uses:**\r\n\r\n```gdscript\r\nclass_name SomeNameHere\r\nextends SceneWorkflowTool\r\nfunc on_pre_import( resource_path : String ):\r\n    pass\r\n\r\nfunc on_current_import( resource_path : String, document: Resource):\r\n    pass\r\n\r\nfunc on_post_import( resource_path : String, scene : PackedScene ):\r\n  if treeA.contains(\"/RootNode/\"):\r\n     treeA.remove(\"/RootNode/\")\r\n    # example extensions which could be written\r\n    optimise_meshes()\r\n    remove_lighting()\r\n    reset_all_scales_to_one()\r\n    purge_orphans()\r\n    retain_orphan_gui()\r\n\r\nfunc on_pre_export( resource_path : String ):\r\n   convert_all_dds_to_png(resource_path)\r\n\r\nfunc on_current_export( resource_path : String, document: Resource ):\r\n    pass\r\n\r\nfunc on_post_export( resource_path : String, scene : PackedScene ):\r\n   open_diff_gui(treeA, treeB, <matching rule> )\r\n  if treeA.contains(\"/RootNode/\"):\r\n     treeA.remove(\"/RootNode/\")\r\n```\r\n\r\n**Workflow extra root node:**\r\n\r\nThere is a root node that is at the top.\r\n\r\nExtension point pre and current are ignored.\r\n\r\nExtension point post takes the existing scene that is imported and modifies the root to be dissolved keeping children. The nodepath and string references need to be rewritten. Animations too.\r\n\r\n**Workflow diff tool:**\r\n\r\nA diff tool can be one of the default extensions and can be subclassed.\r\n\r\nWe can make an extension post point gui for gdscript fixes that has shows a popup dialog for all the relevant changed locations for review.\r\n\r\n**Workflow orphan detection:**\r\n\r\nExtension point pre reads from the raw tscn and directly searches for orphans and deletes it since the orphans don't appear in the scene.\r\n\r\n**Workflow gdscript is in-correct:**\r\n\r\nThis is a diff tool that shows every node that is invalid. The tool asks the developer for input.\r\n\r\n**Workflow tool post process move to directory:**\r\n\r\nExtension point import post is a post process option.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWe want to expose an interface that is gdscriptable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nExpose the extension points in importers requires work.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1462",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1462/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1462/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1462/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1462",
    "id": 693602370,
    "node_id": "MDU6SXNzdWU2OTM2MDIzNzA=",
    "number": 1462,
    "title": "AnimationNode lifecycle callbacks",
    "user": {
      "login": "RolandMQuiros",
      "id": 1084143,
      "node_id": "MDQ6VXNlcjEwODQxNDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1084143?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RolandMQuiros",
      "html_url": "https://github.com/RolandMQuiros",
      "followers_url": "https://api.github.com/users/RolandMQuiros/followers",
      "following_url": "https://api.github.com/users/RolandMQuiros/following{/other_user}",
      "gists_url": "https://api.github.com/users/RolandMQuiros/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RolandMQuiros/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RolandMQuiros/subscriptions",
      "organizations_url": "https://api.github.com/users/RolandMQuiros/orgs",
      "repos_url": "https://api.github.com/users/RolandMQuiros/repos",
      "events_url": "https://api.github.com/users/RolandMQuiros/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RolandMQuiros/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-04T20:42:12Z",
    "updated_at": "2020-09-10T11:46:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA heavily animation-driven beat'em-up.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn Unity, I like to use [StateMachineBehaviours](https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html) to drive a lot of my character logic. It puts my code very close to the onscreen representation, which makes it quick to adjust and rebalance character abilities and behaviors.\r\n\r\n![image](https://user-images.githubusercontent.com/1084143/92282150-f7121180-eeb1-11ea-8dc4-00e3a74a67cd.png)\r\n\r\nThis lets me attach modular logic to specific animation states, without having to juggle a separate state machine structure. It also lets me implement [rollback netcode](https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/) fairly easily, since I can track state and resimulate using just the Animator's `Update(float deltaTime)` method.\r\n\r\nGodot's `AnimationTree` is almost to the point where I can recreate this approach, but `AnimationNode`'s API doesn't expose a lot of its own information to scripts. Specifically, I'm having a hard time telling if a node is processing, and when it starts and stops processing. I'm able to script around this, but it's lot of hacking that involves traversing property lists and finding nested `AnimationNodeStateMachinePlayback` objects. And those playback objects only exist for state machines, which means I have to write specific implementations for other subclasses.\r\n\r\nI know parts of this [have been an issue for users in the past](https://github.com/godotengine/godot/issues/21399#issuecomment-453743355) but apparently not many of them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExpose more `AnimationNode` data to scripts. Add lifecycle callbacks to the `AnimationNode` scripting API for entering, exiting, and processing.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI've already made the modifications here: https://github.com/godotengine/godot/pull/41771#issue-480080445\r\n\r\nThe changes add the following members to `AnimationNode`:\r\n- `property Dictionary child_nodes`\r\n  - Property that exposes the result of `AnimationNode.get_child_nodes()` to scripts, so you can traverse the structure of the `AnimationTree` at runtime. Currently `get_child_nodes` returns null for `extends AnimationNode` scripts, and simply doesn't exist for `AnimationNode` subclasses.\r\n- `virtual void _advance(float delta)`\r\n  - Called every time the node is processed, with the delta time passed in.\r\n- `virtual void _on_play(float time)`\r\n  - Called when the node starts playing, or is \"entered\" in a state machine. `time` is the time returned by `AnimationNode.process`, which is the time left in the node's current animation.\r\n- `virtual void _on_stop(float time)`\r\n  - Called when the node stops playing, or is \"exited\" in a state machine. Same `time` parameter as `_on_play`\r\n\r\nI also modified the behavior of `get_child_nodes(List<ChildNode> *)` in the C++ classes. They now call the script `get_child_node` implementation, even in `AnimationNode` subclasses, so you can override the behavior even if your `extends AnimationNode` script is attached to an `AnimationNodeStateMachine`.\r\n\r\nI would absolutely appreciate any feedback on the above API choices.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around, but not elegantly, and in many more lines than I'd like.\r\n\r\nI'm not aware of many people who use animation state machines this way, especially since Unity's been neglecting Mecanim in favor of DOTS stuff, but I'm hoping Godot can pick up the slack.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's directly modifying the behavior of a built-in class.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1462/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1460",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1460/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1460/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1460/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1460",
    "id": 693160194,
    "node_id": "MDU6SXNzdWU2OTMxNjAxOTQ=",
    "number": 1460,
    "title": "Create an .app bundle automatically when compiling the editor for macOS",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359319259,
        "node_id": "MDU6TGFiZWwyMzU5MzE5MjU5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:macos",
        "name": "platform:macos",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-04T13:17:47Z",
    "updated_at": "2020-09-18T21:56:29Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*See also https://github.com/godotengine/godot/issues/16415.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen building the editor on macOS, you won't get any system integration out of the box. To get Godot to look like an usual macOS application (that can be dragged to `/Applications` and the like), you have to place the binary in [`misc/dist/osx_tools.app`](https://github.com/godotengine/godot/tree/master/misc/dist/osx_tools.app) yourself in the correct location (`Contents/MacOS/Godot`).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe can have SCons generate the .app bundle automatically when building the editor for macOS.\r\n\r\nUsers will still be able to start the application from a terminal by running `bin/<app_bundle_name>.app/Contents/MacOS/Godot`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nMake SCons generate the .app bundle automatically by using its file handling utilities. To do so, it can copy the files contained in [`misc/dist/osx_tools.app`](https://github.com/godotengine/godot/tree/master/misc/dist/osx_tools.app) to the `bin` folder and move the compiled Godot binary to the correct location.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nTechnically, yes: this can be achieved with a few lines of shell scripting. However, since this is about improving the experience for people who are just getting started with compiling the engine, I'd say it's worth the effort (provided we don't find downsides to doing this).\r\n\r\nIf there are significant downsides to doing this, we can put this behind a SCons option like `osx_app_bundle=yes`.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core buildsystem functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1460/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1459",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1459/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1459/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1459/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1459",
    "id": 693155935,
    "node_id": "MDU6SXNzdWU2OTMxNTU5MzU=",
    "number": 1459,
    "title": "Create the macOS export template structure on the fly when exporting the project",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359319259,
        "node_id": "MDU6TGFiZWwyMzU5MzE5MjU5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:macos",
        "name": "platform:macos",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-09-04T13:13:28Z",
    "updated_at": "2020-11-11T20:20:01Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*See also https://github.com/godotengine/godot/issues/10913, which is an older approach to the same issue (but it's less consistent with how exporting to Windows and Linux works).*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nUsers who build their own export templates are often confused as to the exact steps required to package export templates for all platforms.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe can simplify this process by making the editor do more work on its side. This in turn makes the build process more \"fault-tolerant\" since it will be harder for users to make mistakes.\r\n\r\n@bruvzg suggested doing the following in https://github.com/godotengine/godot/pull/36332#issuecomment-652428695:\r\n\r\n> Do we need to ship macOS export templates as ZIP at all? It's just folder structure and two text files (`Info.plist` and `PkgInfo`), .plist is modified on export anyway, PkgInfo contains static \"APPL????\" string. Export process can be easily changed to generate them in place.\r\n\r\nThis way, we can simplify the export template building process by simply adding a macOS binary to the export templates TPZ. Users building their own export templates won't have to create an export template structure based on the files in [`misc/dist/osx_template.app`](https://github.com/godotengine/godot/tree/master/misc/dist/osx_template.app) anymore.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n- Create the required files and folders using Godot's built-in file handling classes.\r\n- Instead of adding `osx_template.zip` to the export template binary, just add `osx_debug` and `osx_release` binaries. (Note: How will this work with Apple Silicon?)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is related to the editor's export functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is related to the editor's export functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1459/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1458",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1458/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1458/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1458/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1458",
    "id": 692809330,
    "node_id": "MDU6SXNzdWU2OTI4MDkzMzA=",
    "number": 1458,
    "title": "Introduce daily/hourly/bleeding edge preview builds with automatic updates",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "akien-mga",
        "id": 4701338,
        "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akien-mga",
        "html_url": "https://github.com/akien-mga",
        "followers_url": "https://api.github.com/users/akien-mga/followers",
        "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
        "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
        "organizations_url": "https://api.github.com/users/akien-mga/orgs",
        "repos_url": "https://api.github.com/users/akien-mga/repos",
        "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akien-mga/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-09-04T07:10:40Z",
    "updated_at": "2020-10-29T08:09:02Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Godot Engine\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany users have [stability concerns](https://github.com/godotengine/godot/issues/32233) with Godot. One of the limitations Godot currently has with ensuring stability is that it's difficult for testers to get builds to test. Not everyone wants to build Godot themselves, or go to a website every single day to download builds. We should make this process as easy and convenient as possible for testers.\r\n\r\n(In this post, I am defining \"tester\" as anyone who uses a build of Godot that isn't a stable release)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI will compare with existing solutions and proposals to better explain this proposal.\r\n\r\n* Godot provides two official organization-provided options for getting preview builds.\r\n\r\n  * Compiling it yourself.\r\n\r\n    * Pro: The absolute latest builds.\r\n\r\n    * Con: Requires gigabytes of tools and knowledge of how to use Git and compilers.\r\n\r\n    * Con: Can require hours of waiting on a slow computer.\r\n\r\n    * Con: No automatic updates.\r\n\r\n  * Release candidates, betas, alphas.\r\n\r\n    * Con: Not available from a central [download page](https://godotengine.org/download), only via [blog posts](https://godotengine.org/news).\r\n\r\n    * Con: Infrequent/outdated builds.\r\n\r\n    * Con: No automatic updates.\r\n\r\n* @Calinou offers nightly builds [here](https://hugo.pro/projects/godot-builds/) and [here](https://archive.hugo.pro/builds/godot/).\r\n\r\n    * Con: While master builds are frequently updated, other branches are infrequent/outdated.\r\n\r\n    * Con: No automatic updates.\r\n\r\n    * Con: Not official.\r\n\r\n* @fire offers [nightly builds via Itch.io](https://ifiregames.itch.io/stern-flowers-chibifire-com-godot-engine).\r\n\r\n    * Pro: Automatic updates.\r\n\r\n    * Con: Infrequent/outdated builds, ~~last build was from July.~~\r\n\r\n    * Con: Only the master branch is provided, no builds for 3.2 etc.\r\n\r\n    * Con: Not official.\r\n\r\nThere is also this proposal #1412 about providing PR artifacts and nightly builds. By itself I think this proposal is not enough, I think an important part of this solution is to provide users with automatic updates.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n(Yes I know this isn't code/pseudocode, but it is a description of how it will work)\r\n\r\nI propose a system like this: Builds would be distributed through Itch.io for the purpose of allowing users to have automatic updates if they choose to use the Itch app. There would be separate \"games\" for the different branches of Godot (master, 3.2, etc), separate from the existing stable one. These builds would be updated very frequently, perhaps daily or even hourly. A script on a build server would periodically check the head of the branches, and build if the commit hash is different from last time. Completed builds would be uploaded to Itch.io via their command line tool, butler.\r\n\r\nTesters would simply be able to install the Itch app, install the relevant \"game\" for the branch they want, and then this would be automatically updated by the Itch app. Testers would be pointed to instructions on how to set this up from [the download page](https://godotengine.org/download), it should be in a prominent spot, perhaps above the \"Requirements\" section. The goal is to get a large amount of testers testing the heads of branches to increase the chance of finding critical bugs and regressions. In the near future I don't expect many people to test their projects with master, but a large amount of users testing branches such as 3.2 could have helped avoid some of the regressions caused by 3.2.2, as an example.\r\n\r\nHopefully, this system would allow testers to get builds more frequently, more easily, and more conveniently.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1458/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1457",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1457/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1457/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1457/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1457",
    "id": 692286198,
    "node_id": "MDU6SXNzdWU2OTIyODYxOTg=",
    "number": 1457,
    "title": "Add support for deploying to multiple Android devices at once",
    "user": {
      "login": "DisDoh",
      "id": 10052295,
      "node_id": "MDQ6VXNlcjEwMDUyMjk1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10052295?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DisDoh",
      "html_url": "https://github.com/DisDoh",
      "followers_url": "https://api.github.com/users/DisDoh/followers",
      "following_url": "https://api.github.com/users/DisDoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/DisDoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DisDoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DisDoh/subscriptions",
      "organizations_url": "https://api.github.com/users/DisDoh/orgs",
      "repos_url": "https://api.github.com/users/DisDoh/repos",
      "events_url": "https://api.github.com/users/DisDoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DisDoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-03T20:05:50Z",
    "updated_at": "2020-09-18T21:10:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a BlueTooth Poker.\r\nsee here: https://play.google.com/store/apps/details?id=ch.disd.BlueToothPoker8&hl=en_US\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nOnce upon a time Android studio had a multi device deployment to test on multiple devices. \r\nIt could be very useful to conect all my devices and then just wait for all to deploy. ;-)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature is helpful to easily deploy on multiple devices.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIt could be a check box next or before the device name and also a \"select all\" button.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nyes it not a lot to code and could be a very big plus for android deployement and testing phase.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAs Android implementation doesn't require any plugin it should be core.\r\n\r\nThanks to the Godot community ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1455",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1455/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1455/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1455/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1455",
    "id": 692066501,
    "node_id": "MDU6SXNzdWU2OTIwNjY1MDE=",
    "number": 1455,
    "title": "I hope the scene tree editor and PackedScene change to use call method to call node's get_child and get_child_count method",
    "user": {
      "login": "838116504",
      "id": 15709523,
      "node_id": "MDQ6VXNlcjE1NzA5NTIz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15709523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/838116504",
      "html_url": "https://github.com/838116504",
      "followers_url": "https://api.github.com/users/838116504/followers",
      "following_url": "https://api.github.com/users/838116504/following{/other_user}",
      "gists_url": "https://api.github.com/users/838116504/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/838116504/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/838116504/subscriptions",
      "organizations_url": "https://api.github.com/users/838116504/orgs",
      "repos_url": "https://api.github.com/users/838116504/repos",
      "events_url": "https://api.github.com/users/838116504/events{/privacy}",
      "received_events_url": "https://api.github.com/users/838116504/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-03T15:24:22Z",
    "updated_at": "2020-09-03T17:55:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** godot 3.2.2-stable\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI made my custom container. It put child node to child ScreenContainer's child BoxContainer. The ScreenContainer and BoxContainer hide in scene dock by not set owner . I want it like container to add_child, so my custom class override **get_child** and **get_child_count** method to return BoxContainer  **get_child** and **get_child_count** method, but the scene dock and PackedScene not call them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** \r\nIn packed_scene.cpp: replace **p_node->get_child_count()** to **(int)p_node->call(\"get_child_count\")**. replace **p_node->get_child(i)** to **p_node->call(\"get_child\", i)**.\r\nscene_tree_editor.cpp same.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`\r\ntool\r\nextends Container\r\n\r\nvar scrollContainer = ScrollContainer.new()\r\nvar hbc = HBoxContainer.new()\r\n\r\nfunc _init():\r\n\tscrollContainer.size_flags_horizontal = SIZE_EXPAND_FILL\r\n\tscrollContainer.size_flags_vertical = SIZE_EXPAND_FILL\r\n\tadd_child(scrollContainer)\r\n\thbc.size_flags_horizontal = SIZE_EXPAND_FILL\r\n\thbc.size_flags_vertical = SIZE_EXPAND_FILL\r\n\thbc.alignment = BoxContainer.ALIGN_END\r\n\tscrollContainer.add_child(hbc)\r\n\r\nfunc get_child(p_id:int):\r\n\treturn hbc.get_child(p_id)\r\n\r\nfunc get_child_count():\r\n\treturn hbc.get_child_count()\r\n\r\nfunc get_children():\r\n\treturn hbc.get_children()\r\n\r\nfunc _notification(what):\r\n\tif what == NOTIFICATION_SORT_CHILDREN:\r\n\t\tfit_child_in_rect(scrollContainer, Rect2(Vector2.ZERO, rect_size))\r\n\t\tvar temp\r\n\t\tfor i in .get_children():\r\n\t\t\tif i == scrollContainer:\r\n\t\t\t\tcontinue\r\n\t\t\ttemp = i.name\r\n\t\t\tremove_child(i)\r\n\t\t\thbc.add_child(i, true)\r\n\t\t\ti.owner = self\r\n\t\t\ti.name = temp\r\n`\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n...",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1454",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1454/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1454/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1454/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1454",
    "id": 691960995,
    "node_id": "MDU6SXNzdWU2OTE5NjA5OTU=",
    "number": 1454,
    "title": "Better control over exported assets (such as selecting folders for exporting resources)",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-03T13:13:55Z",
    "updated_at": "2020-11-15T00:58:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(this is somewhat revival of https://github.com/godotengine/godot/issues/23784, but for different purpose)\r\n\r\n**Describe the project you are working on:**\r\nA very big game™\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs mentioned above, my game is very big. Now, I wanted to make a demo. The easiest way would be export it with a \"demo\" feature tag that makes parts of the game inaccessible. The problem is that with this we end up with a huge game file with little content (the fact that players could potentially bypass the demo limiter is another concern). Of course there's an option to choose assets that will be exported, but this has problems:\r\n1. The most obvious one is that the amount of assets is huge and you have to check each of them one-by-one. This gives immense room for error, where you forgot to check an asset and suddenly your exported game breaks\r\n2. The assets you include might be not constant. Often there are improvements to the game that might land in the demo (like QoL features or additional sound effects etc.). You have to remember to include them\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe most basic feature that would help with above is an ability to choose assets that will be excluded from export. Such list is usually constant (i.e. when you pick something once, you won't need to include it later) and there's less room for error, because it's easier to tell if something is never going to be used than if something might be used (e.g. as dependency). If you miss something from exclusion, you just end up with bigger export, but it won't affect the running game.\r\n\r\nAnother useful thing would be an option to tick directories instead of only single files. This would help a lot in mass-selecting assets.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/2223172/92119032-8ad2d780-edf7-11ea-81c9-4cca2d425dbe.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's usability feature for editor export.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1454/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1453",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1453/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1453/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1453/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1453",
    "id": 691866931,
    "node_id": "MDU6SXNzdWU2OTE4NjY5MzE=",
    "number": 1453,
    "title": "Improve GridMap and TileMap",
    "user": {
      "login": "PranavSK",
      "id": 18136182,
      "node_id": "MDQ6VXNlcjE4MTM2MTgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18136182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PranavSK",
      "html_url": "https://github.com/PranavSK",
      "followers_url": "https://api.github.com/users/PranavSK/followers",
      "following_url": "https://api.github.com/users/PranavSK/following{/other_user}",
      "gists_url": "https://api.github.com/users/PranavSK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PranavSK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PranavSK/subscriptions",
      "organizations_url": "https://api.github.com/users/PranavSK/orgs",
      "repos_url": "https://api.github.com/users/PranavSK/repos",
      "events_url": "https://api.github.com/users/PranavSK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PranavSK/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-03T10:57:51Z",
    "updated_at": "2020-09-10T12:57:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis proposal is for any game that would need a grid-based level editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current implementations of `TileMap` and `GridMap` are a bit of a black box, although internally they use the same core concepts achievable via existing nodes. While it may seem to simplify things it actually loses a lot of the flexibility afforded by the node-based approach of Godot. This also affects the UX and how it is designed as it does not fully take advantage of Godot's best feature.\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\nTo better understand what the issue is we can look at what `TileMap` and `GridMap` try to provide:\r\n\r\n1. A grid-based level editor.\r\n2. Ability to *paint* the required mesh, sprite on to the scene.\r\n3. Facilitate a modular approach to using assets. Potentially reuse or replace assets easily.\r\n\r\nWith this, we can also group some possible extensions a user might need:\r\n\r\n1. Different types of grids - cartesian, hexagonal, Voronoi etc.\r\n2. Custom paint functions - auto place tiles based on neighbours, scale the mesh instead of placing, auto-create a quadtree or octree from mesh (terrains for eg.), use mesh-instancing etc., or a combination of these.\r\n3. Provide for an easy workflow to create the modular asset library from external tools, preprocess assets to be used in modular level editing as per game/tool requirements, create tests on import to assert valid modular assets etc.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nKeeping the above in mind we can have the following:\r\n\r\n1. A new resource called `Grid`. This would enable wrapping the custom grid using the cartesian coordinate system used internally by Godot. The core engine does not need to know actual conversions between the coordinate systems, Any custom grid types would extend and implement this the `Grid` class.\r\n2. A new editor-only resource called `Brush`. This could be made available to runtime for supporting runtime level editors. These are dependent on the `Grid` resource (A brush needs to store the grid type it can work on). There are two main functions in the `Brush` resource - one to do instantiation/placement and another to resolve the asset to use.\r\n3. An editor that uses these brushes to paint assets. The editor would work globally but resolve contextually i.e, it doesn't need a particular node type to exist in the scene but changes based on which node is selected. \r\n4. A brush palette/library. This would also be stored globally and allows selecting a brush to use with the above paint tool. The brushes are grouped based on the grid. They can further be grouped based on the instantiation logic or based on the asset it places. This could be customizable by the user. The actual UX of creating this needs to be discussed. We could have a default brush per grid type (eg. a simple instantiate on the grid position). Any '.tscn' file could be dragged onto the library and brush is created using the default for that scene. \r\n\r\nThe idea here is that the brushes and the library depend on the grid, unlike the current approach where the library is more generic. This I believe makes more sense since the modular assets are generally created by keeping the grid in mind. With the ability to use custom grids, the library can still be used in different ways. Also by making the library global (per project) we can have a more unified place to organize them. This should also simplify the UX.\r\n\r\nThis approach would keep things intuitive in the Godot sense. It is also possible to make UX more unified with regards to level editing. We could also use this as a base for future editors (for eg. terrain editing). It is also easily customizable and a modular approach to level editing tools. Asset creators could provide grids or brushes and extend on other brushes easily. External editors that understand the Godot node-tree don't need to be retrofit to work in parallel with the level editor tools. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really but, when implemented a lot of the custom level editor tool creation can be simplified.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a rethinking of existing implementation to provide for improved and customizable UX.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1453/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1450",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1450/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1450/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1450/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1450",
    "id": 691253825,
    "node_id": "MDU6SXNzdWU2OTEyNTM4MjU=",
    "number": 1450,
    "title": "Add has_char(...) to Font class.",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-02T17:32:12Z",
    "updated_at": "2020-09-02T19:55:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(Any project which supports multiple languages)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf the currently selected `Font` doesn't contain a glyph/character you're trying to use, it will just be ignored/skipped, which can look like a bug.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere is already a proposal for using a placeholder glyph in this case [#591](https://github.com/godotengine/godot-proposals/issues/591).\r\nI am simply proposing that we add a `has_char_str(char_str: String)` and `has_char_code(char_code: int)` to the `Font` class.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nYou could make a custom `Label` scene, with this script to ensure that every character is supported by the `Font`.\r\n```\r\nextends Label\r\n\r\nfunc set_text(__text: String): #override\r\n\tassert_font_supports_all_characters(__text)\r\n\ttext = __text\r\n\r\nfunc assert_font_supports_all_characters(__text: String):\r\n\tvar __font := get_font(\"font\")\r\n\tvar __font_path := __font.resource_path\r\n\tfor __char_str in __text:\r\n\t\tif !__font.has_char_str(__char_str):\r\n\t\t\tassert(false, str(\"Unsupported char '\", __char_str, \"' in Font (\", __font_path, \")\"))\r\n```\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, but I don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis could help in catching some confusing bugs relating to having multiple fonts for different languages.\r\n\r\nBy adding these functions, an invalid char/glyph could be caught and throw an error so the problem can be fixed instead of slipping by unnoticed.\r\n\r\nIf you're creating your own font, this would also help to track down any characters which you may have forgotten to add glyphs for.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1450/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1449",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1449/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1449/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1449/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1449",
    "id": 691097162,
    "node_id": "MDU6SXNzdWU2OTEwOTcxNjI=",
    "number": 1449,
    "title": "Locking the node in the inherited scene for teams",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-02T15:02:29Z",
    "updated_at": "2020-10-07T16:41:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n3d Multiplayer Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nPrevent changes to the inherited scene for larger teams. For example when you review a scene and don't want to move the floor on review.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nUsability fix to make the lock button more discoverable and fit the mental model of locking.\r\n\r\nAll the functionality already exists in Godot Engine, but the default is set wrong.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n* Click on lock will also set group selection\r\n* Click on lock and then group selection will lock and the previous behaviour of ungrouped selections.\r\n* Same changes for canvas and Node3d\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is not few lines of script. Well.. It's a few lines of c++.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis changes how the editor interacts with the packed scene which is core functionality.\r\n\r\n**Edited:**\r\n\r\nThis has been updated and rewritten. See history.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1449/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1448",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1448/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1448/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1448/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1448",
    "id": 690985036,
    "node_id": "MDU6SXNzdWU2OTA5ODUwMzY=",
    "number": 1448,
    "title": "Add animated image data support as a built-in `Image` feature",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-02T12:36:47Z",
    "updated_at": "2020-09-06T23:17:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine. 🙂\r\n\r\nThis proposal is largely inspired by the discussion in my previous proposal regarding loading and importing animated images #1433, so this proposal can be considered as a possible alternative or a dependency to #1433, and exists for the entire purpose of discussion. Because this proposal goes against [Solutions must be local](https://docs.godotengine.org/en/latest/community/contributing/best_practices_for_engine_contributors.html#solutions-must-be-local), I don't expect this to be approved, but worth a shot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTo repeat #1433, Godot doesn't provide any kind of core data structures which would be useful as a container (and most importantly, a loader) for animated images, or rather image frames to make it agnostic to the purpose of being animated. Neither `AnimatedTexture` nor `SpriteFrames` is suitable for this task either because both have either number of frames limitation or lack of ability to set custom delay between frames, not to mention that adding various methods such as `load` and `load_gif_from_buffer` is out of scope for those classes, because they're usually imported rather than loaded.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhile being able to load images via script is still a common denominator and motivation behind #1433 and *this* proposal, a concern was raised by @groud that adding a dedicated class (namely `ImageFrames`, previously referred to as `AnimatedImage`) just for loading animated image data is not necessary and could potentially bloat Godot, make it more confusing for beginners, introduce maintenance costs due to excess flexibility etc.\r\n\r\nI propose that we add a way to deal with those issues by actually adding built-in support for a sequence of frames (with delay), directly in the `Image` class. This has the following benefits:\r\n- No new class is added to Godot (?).\r\n- Makes the API more intuitive (you just want to load an image, but it may be just animated one, like `gif`).\r\n- No need to create a dedicated `ImageFramesLoader` to replicate the functionality of `ImageLoader`, which is already quite specific to loading images compared to other format/resource loaders.\r\n- It *does* simplify implementing various resource importers which can reuse image loaders with animated formats for `AnimatedTexture`, `SpriteFrames` etc.\r\n- You could also import as `Image` as you currently can, but if the underlying format is animated image (`gif`, `apng`, `webp`), then the `Image` instance shall have those frames data already in-place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTo make it less intrusive, you'd just add a property which would hold a dictionary/array of frames alongside regular image data. `Image.get_data()` and alike could return only the first frame (if an image does have those).\r\n\r\nThis is where we can add those loading methods:\r\n```gdscript\r\nvar image = Image.new()\r\n# Note that we already have specific methods for png, jpg etc.\r\nimage.load_gif_from_buffer(bytes)\r\nimage.load(\"res://godot.gif\") # Would also handle png, jpg etc just fine.\r\n```\r\n\r\nPerhaps adding `Image.is_animated()` method would also be nice, which would just check whether the image has frames data associated with it, but again it's not necessary to add.\r\n\r\nThen implement needed animated image loaders as `ImageFormatLoader`, in theory even without changing the API.\r\n\r\nSimilarly to #1433, we could then add `AnimatedTexture.create_from_image()` just like in `ImageTexture`. It would still work if the animated image has only 1 frame.\r\n\r\nI believe no other changes would have to be done, except for some minor refactor of existing methods. Note that I do not propose providing a way to do image processing on a bulk of frames with the same Image API, I think this could be overkill (for Godot).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's about extending the existing core `Image` class and various C++ loaders which are/can be implemented in the future, not sure if possible to implement via script and it would just defeat the purpose of this proposal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's definitely not necessary to have this in core, consider approving #1433 which is easier to maintain and which has a higher chance of being backwards compatible, I just don't see other ways to expose animated image loading methods otherwise.\r\n\r\nYou may recall a pull request of mine which aimed at adding indexed image support: godotengine/godot#28013 (which is now part of [Goost](https://github.com/goostengine/goost), by the way), and GIFs could be imported as `ImageIndexed` there, so perhaps it's better if this is maintained outside of Godot core by now. What do you think?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1448/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1447",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1447/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1447/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1447/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1447",
    "id": 690509366,
    "node_id": "MDU6SXNzdWU2OTA1MDkzNjY=",
    "number": 1447,
    "title": "Add a option to create flat-shaded PrimitiveMeshes in Editor",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-01T23:15:48Z",
    "updated_at": "2020-09-01T23:19:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA low poly racing game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm creating a low poly racing game, and for any low poly projects, the rendered meshes would need to have flat normals instead of blended normals that give the smooth look even with low vertice count. The problem is that in Godot, we can't automatically create a PrimitiveMesh with flat surface, the generated mesh have smooth normals that isn't the desired look to a low poly project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature is a simple boolean option to choose if the generated mesh will have flat or rounded normals. The only PrimitiveMesh inherited classes that would be nice to have this feature is CapsuleMesh, CylinderMesh and SphereMesh.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't know exactly how these PrimitiveMesh is generated in code, but if it uses the SurfaceTool to generate the meshes, the simple solution is to use \"add_smooth_group(smooth_boolean_variable)\" to generate the mesh with or without smooth normals.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCan be created using the SurfaceTool and Mathematic knowledge to create the primitives with this option, but this makes harder to a new user create a simple low poly project with no effort. The other solution is to create manually these meshes in Blender and them export to Godot, but again, slows down the workflow.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause this can be really useful to create fast low poly meshes in editor, can be used in Particles node and to a lot of other creative things.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1447/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1446",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1446/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1446/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1446/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1446",
    "id": 690267467,
    "node_id": "MDU6SXNzdWU2OTAyNjc0Njc=",
    "number": 1446,
    "title": "Allow setting default NativeScript library",
    "user": {
      "login": "rosshadden",
      "id": 669012,
      "node_id": "MDQ6VXNlcjY2OTAxMg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/669012?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rosshadden",
      "html_url": "https://github.com/rosshadden",
      "followers_url": "https://api.github.com/users/rosshadden/followers",
      "following_url": "https://api.github.com/users/rosshadden/following{/other_user}",
      "gists_url": "https://api.github.com/users/rosshadden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rosshadden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rosshadden/subscriptions",
      "organizations_url": "https://api.github.com/users/rosshadden/orgs",
      "repos_url": "https://api.github.com/users/rosshadden/repos",
      "events_url": "https://api.github.com/users/rosshadden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rosshadden/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-01T16:03:38Z",
    "updated_at": "2020-09-01T17:26:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "[Here is my original issue](https://github.com/godotengine/godot/issues/18030), from before godot-proposals existed.\r\n\r\n**Describe the project you are working on:**\r\nGames; nothing specifically relevant here.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, every time you add a new NativeScript script, you need to set the library.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be great if you could set a default NativeScript library.\r\n\r\nOr if that is not feasible, maybe we could at least populate the dropdown with a list of used libraries. Right now I have to manually load a library every time I want to use it. In the following screenshot, this is after I have loaded the library in another node. Nothing shows in the list so I have to click \"Load\" again.\r\n![2020-09-01-11-55-48](https://user-images.githubusercontent.com/669012/91876069-4b1abd00-ec4a-11ea-8857-17214754728b.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPerhaps this could be implemented as a project-wide default setting (it seems unlikely to use multiple libraries in one project after all). Or perhaps it could be implemented as a \"last library used is the default for newly created NativeScripts\". Either way, having the option automatically set would greatly improve the user experience around using gdnative scripts, preventing us from having to drill into each added script to set the library. The workflow would be condensed down to simply attaching the script to a node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, unfortunately the workaround is to load libraries manually again and again on every new node. This may seem tiny but it all adds up.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot applicable; it would have to be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1445",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1445/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1445/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1445/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1445",
    "id": 690175826,
    "node_id": "MDU6SXNzdWU2OTAxNzU4MjY=",
    "number": 1445,
    "title": "Make it possible to use a plain color as splash screen instead of an image",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-01T14:09:37Z",
    "updated_at": "2020-09-01T16:07:22Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nSince many games would rather have their own animated splash screen, they may want to replace it with a pure color instead (not necessarily black). Likewise, most non-game applications use a plain color while loading (see how Electron apps handle this).\r\n\r\nRight now, you can create a 1×1 black image and use it as a splash screen, but it's not very convenient for prototype and gamejam projects. (For command-line aficionados, the ImageMagick command `convert -size 1x1 xc:\"#000000\" g.png` can be used to create a 1×1 black image.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere should be a way to define a custom splash screen color without having to create an image.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd a project setting that defines a splash screen background color. This color can be used in addition to a custom splash image (to define a color outside the splash) or as a replacement for the default splash image. The default color would be `Color(0, 0, 0, 0)` (fully transparent black), which makes Godot use the default splash instead. (A fully transparent splash color will make Godot not override the default splash image if none is defined.)\r\n\r\nNote that splash screen hasn't been reimplemented yet in the `master` branch, so this requires splash screen functionality to be reimplemented first.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as splash screen drawing is handled by the engine itself.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAdd-ons can't modify how the splash screen is drawn since it's drawn by the engine itself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1445/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1444",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1444/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1444/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1444/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1444",
    "id": 690096447,
    "node_id": "MDU6SXNzdWU2OTAwOTY0NDc=",
    "number": 1444,
    "title": "Add a command palette to quickly perform operations listed in the editor menus",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-09-01T12:23:12Z",
    "updated_at": "2020-11-29T02:09:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhile there are \"quick open\" menus for scenes, scripts and resources, there is no equivalent for menu items listed at the top of the editor or in context-specific menus. This can decrease, productivity for keyboard-centered users since you have to reach for the mouse more often.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA command palette can be integrated to perform actions listed in various editor menus. These could be registered automatically by the command palette somehow (or the other way around; editor menus will signal their presence to the command palette).\r\n\r\nThere should be a keyboard shortcut defined by default as well. Since we already use <kbd>Space</kbd> for other purposes in Godot, I think something like <kbd>Ctrl + Shift + P</kbd> (<kbd>Cmd + Shift + P</kbd> on macOS) could make sense. This is the same shortcut as Visual Studio Code uses for its command palette.\r\n\r\nTo bind the command palette to <kbd>Ctrl + Shift + P</kbd>, we'd have to reassign the **Preview Canvas Scale** shortcut to another combination. That shortcut is probably not used very often, so it should be fine.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe modal should consist of a LineEdit that acts as a search field, then an ItemList that lists the search results. When entering text, the first result is automatically selected. Pressing the <kbd>Up</kbd> and <kbd>Down</kbd> arrow keys navigates in the results. Pressing <kbd>Enter</kbd> performs the action associated to the selected result.\r\n\r\nFor editor actions that have a keyboard shortcut associated, we should also display the associated shortcut. This helps the user memorize shortcuts.\r\n\r\nHere are some examples of command palettes in other programs:\r\n\r\n### Blender\r\n\r\n![image](https://user-images.githubusercontent.com/180032/91850727-4c55e500-ec5e-11ea-8348-6124403cae45.png)\r\n\r\n### Visual Studio Code\r\n\r\n![image](https://user-images.githubusercontent.com/180032/91850696-3cd69c00-ec5e-11ea-9d80-d84ab8809f6f.png)\r\n\r\n### Ubuntu Unity HUD\r\n\r\n![image](https://user-images.githubusercontent.com/180032/91850813-77403900-ec5e-11ea-9b7c-afd54df2528d.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core editor functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIf #70 is implemented, there's a chance this could be implemented as an add-on. However, command palettes are becoming really popular in creative/productivity software these days. It'd be a shame to pass on this opportunity in Godot :slightly_smiling_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1444/reactions",
      "total_count": 31,
      "+1": 22,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1441",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1441/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1441/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1441/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1441",
    "id": 689483657,
    "node_id": "MDU6SXNzdWU2ODk0ODM2NTc=",
    "number": 1441,
    "title": "Make the individual editor side docks minimizable using keyboard shortcuts",
    "user": {
      "login": "albinaask",
      "id": 11806563,
      "node_id": "MDQ6VXNlcjExODA2NTYz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11806563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/albinaask",
      "html_url": "https://github.com/albinaask",
      "followers_url": "https://api.github.com/users/albinaask/followers",
      "following_url": "https://api.github.com/users/albinaask/following{/other_user}",
      "gists_url": "https://api.github.com/users/albinaask/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/albinaask/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/albinaask/subscriptions",
      "organizations_url": "https://api.github.com/users/albinaask/orgs",
      "repos_url": "https://api.github.com/users/albinaask/repos",
      "events_url": "https://api.github.com/users/albinaask/events{/privacy}",
      "received_events_url": "https://api.github.com/users/albinaask/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-31T20:26:34Z",
    "updated_at": "2020-08-31T22:34:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAt the moment several, but generally speaking a space game that has some physics elements and a lot of coding.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI develop a lot on my laptop with a screen that is quite small, and optimizing your screen space for what you are doing is really important to get a good overview of what you're doing... for example when I'm coding I want to be able to close the side panels to see my entire if statement for example. It's very nice that you can make them smaller, but at minimum size they are still huge on a tiny screen, ideally they would just snap close when you drag them towards the margin. A keyboard press would also be greatly useful.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nOne tiny button on the top of each side panel which closed each of them, leaving max space for scripting or manipulation in the 3D environment or what have you. It would look exactly like the bar on the bottom, but on each side. Very much like blender has the N & T keys that maximizes or minimizes the sidebars.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nif(Input.was_key_released(Input.KEY_T)|| minimize_left_side_panel_button.has_button_been_pressed()|| maximize_left_side_panel_button.has_button_been_pressed()):\r\n     if (left_side_panel.is_visible_in_tree()):\r\n         left_side_panel.visible = false\r\n         maximize_left_side_panel_button.visible = true\r\n     else:\r\n         left_side_panel.visible = true\r\n         maximize_right_side_panel_button.visible = false\r\n\r\nif(Input.was_key_released(Input.KEY_N)|| minimize_right_side_panel_button.has_button_been_pressed()|| maximize_right_side_panel_button.has_button_been_pressed()):\r\n     if (right_side_panel.is_visible_in_tree()):\r\n         right_side_panel.visible = false\r\n         maximize_right_side_panel_button.visible = true\r\n     else:\r\n         right_side_panel.visible = true\r\n         maximize_right_side_panel_button.visible = false\r\n```\r\n\r\nprobably some logic error, but you get the idea...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nBy the right person it can technically be done in a script, but it's not easily made by someone not familiar with exactly how the node tree of the editor works. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nOne would be able to use an addon, but you'd be required to install it on every small device that anyone uses, I think it would be a feature as used as the \"transform object to floor\" button and key bind. It is also almost a requirement for someone trying to use the editor on a tablet, or other small screen where every screen square centimetre must be used sensibly to get an adequate experience.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1438",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1438/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1438/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1438/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1438",
    "id": 689181245,
    "node_id": "MDU6SXNzdWU2ODkxODEyNDU=",
    "number": 1438,
    "title": "Theme Editor User Experience - gathering feedback, request for ideas.",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-08-31T12:48:44Z",
    "updated_at": "2020-09-03T09:58:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHopefully I will be able to rework the theme editor. After a brief discussion with @groud, it seems like another part of the editor that may need some work - but slightly smaller in scope than the tileset/tilemap editor 😉.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe theme editor user experience is not optimal. Hopefully I will be able to make some improvements, but want to gather feedback and ideas first, and have a think about how it will all be laid out.\r\n\r\nThere are a few tickets floating about related to the theme editor, but it would be good to have as much as possible in one place.\r\n\r\nCheers!\r\n\r\nRelated tickets:\r\nhttps://github.com/godotengine/godot/issues/40827\r\nhttps://github.com/godotengine/godot/issues/39138\r\nhttps://github.com/godotengine/godot/issues/29038\r\nhttps://github.com/godotengine/godot/issues/22252 (more related to Scrollbar theming options than the editor itself)\r\nhttps://github.com/godotengine/godot/issues/29063",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1438/reactions",
      "total_count": 9,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 1,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1436",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1436/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1436/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1436/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1436",
    "id": 688870273,
    "node_id": "MDU6SXNzdWU2ODg4NzAyNzM=",
    "number": 1436,
    "title": "Increase the resolution of the default icon.png",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 12,
    "created_at": "2020-08-31T03:28:29Z",
    "updated_at": "2020-10-02T13:43:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** I've noticed the lack of resolution in a variety of projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany people use `icon.png` as a placeholder, or even a part of their game. It's even [become a meme](https://www.youtube.com/watch?v=VJMb88-d-js).\r\n\r\nHowever, `icon.png` has a fairly low resolution by default, it's only 64x64 pixels:\r\n\r\n![icon](https://user-images.githubusercontent.com/1646875/91680009-eb23f980-eb17-11ea-85a8-514975d4ca5f.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI propose increasing it to 128x128 pixels. Here's a 128x128 version compressed with `oxipng`:\r\n\r\n![icon](https://user-images.githubusercontent.com/1646875/91680049-0b53b880-eb18-11ea-84f0-656e743e3a1c.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nGodot will place [this](https://user-images.githubusercontent.com/1646875/91680049-0b53b880-eb18-11ea-84f0-656e743e3a1c.png) into the project instead of the existing `icon.png`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis problem is very easy to work around, but this will be used very often (by anyone who creates a project, nearly 100% of users).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n`icon.png` is a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1436/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1435",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1435/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1435/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1435/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1435",
    "id": 688864250,
    "node_id": "MDU6SXNzdWU2ODg4NjQyNTA=",
    "number": 1435,
    "title": "Add a physically based wind simulator . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-31T03:07:52Z",
    "updated_at": "2020-09-06T14:05:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now, we're getting some amazing PBR, or ' science ' based features, like the new sky, so on . . And, sdfgi, volumetric fog, many improvements . . . I would suggest Godot gets a wind simulation system, where one can add ' objects ', or meshes to that layer, so it creates a wind system, based on physics, or approximations . . . All the objects needed to be affected by a global, procedural wind simulation, would be added, to the ' wind ' layer, or so . . Settings would include from light breeze, to more chaotic stuff, gusts, random factors, other stuff . . This would help games, that need this, to easily create some basic cases, more could be added later, to make it more realistic . . All the objects in the ' wind cull mask ', would be affected by a global wind simulation, with a number, of settings . . . This would help create planes of waving grass, from light breeze, to maybe storms, procedurally generated, based, in physics . . . Even if it was only applied to transparent grass objects, to begin with, it could create some amazing effects, for most users . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt might sound silly, but having an optimized, global, or perhaps restricted wind system, to a certain volume, if it was based in science, physics, could do amazing things, for many games . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically, in environment settings, have a new mode, called ' wind ', all the stuff in that cull mask, is affected by physics, optimized, to make things like fields, of wheat, random breezes . . .\r\n\r\n![2020-08-31 0505](https://user-images.githubusercontent.com/61069740/91679090-9bf5bd00-eb47-11ea-9bd9-c738db306a4b.gif)\r\n\r\nHaving this feature, would help Godot better simulate real world effects, and should be user-friendly, and customizable . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nHaving it as in-built feature, would mean more games could benefit from it, it should be fairly small, or scalable, so it can be run, at least cost, to FPS . . <3\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's something that helps simulate worlds, or physics . . Game engines are moving towards this, more and more things a PBR, physics based, having an approximation, based in science, of wind, would be nice . .\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1435/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1434",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1434/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1434/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1434/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1434",
    "id": 688852530,
    "node_id": "MDU6SXNzdWU2ODg4NTI1MzA=",
    "number": 1434,
    "title": "Suggestions for the new decal node . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-31T02:26:21Z",
    "updated_at": "2020-08-31T07:06:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, for fun . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe new decal node in Godot 4.0 is already amazing, but I had a suggestion . . Often, making stylized games, one just want a simple decal, that projects a transparent texture, onto a surface, and has a cull mask feature . . Then, after that, one would want one that supports a normal texture, on top, for more realistic decals, such as place dirt, or a gravel road, on a surface . . Then, after that, one wants the current, very advanced decal node, implemented in Godot 4 . .\r\n\r\nI mentioned before, that it looks like the new decal node isn't properly in ' Mix ' blend mode, but actually in ' Add ' mode, when applying the decal, the colors are washed out, compared to simply applying the same texture, to a surface . . ie., it doesn't work like a decal ' should ', just ' Mix ' blend mode the decal image, on to surface . . See here . . Mentioned it before, looks better now, as far as I can tell, but not ' right ' . .\r\n\r\n![Skærmbillede (157)](https://user-images.githubusercontent.com/61069740/91676242-7a90d300-eb3f-11ea-936a-90f7a5296943.png)\r\nLeft ( faded image ) is the decal, on right is a plane, with the same texture applied . . It looks like, the decal isn't working . . It is faded, or ' washed ' out, atm . . .\r\n\r\nI guess my problem is, we have a VERY advanced decal, that seems to not work, like a decal should . . Maybe this is not an issue, but I would like a simple decal, with very few settings, and an advanced decal, that can even be used, for 3D projection . . Maybe the current advanced decal isn't more, of a performance drain, anyway I wanted to ask, maybe for a SimpleDecal and, AdvancedDecal node, to get the best performance . . Simple decal would be a direct texture projection, working in ' Mix ' blend mode, with OPTION, for normal map, since this is what most people think of, when using decals . . However, there are today much more advanced decals, such as 3D decals, even some the deform under-lying geometry, I think it would make a lot of sense, to have maybe two different decals, a very advanced one, and a simple one, that one would use for stylized ( ie., no normal maps, just textures ), with an option, to use a normal map, that when not turned off, wouldn't impact performance ( like in spatial material, default normal map is off, no performance drain ) . . And, then to have the very advanced decal, I'm assuming the current decal is performance intensive, it has a lot of features, I don't really need, ie., for making a stylized 3D game look nice . .\r\n\r\n![2020-08-31 0412](https://user-images.githubusercontent.com/61069740/91676505-55509480-eb40-11ea-8ef5-22cdd038a9cd.jpg)\r\n\r\nIn the game, above, decals can be used to make a much more nice-looking game, that is a stylized game, and all one needs, to for a simple projected ' Mix ' mode decal, to make that entire game . . So, for that use-case having a ' SimpleDecal ', or ' BasicDecal ', would make sense, to have as much performance . . The simple decal should also support normal maps, but no more, as this will allow one to make say a ' gravel road ', by using a transparent road texture, in a more realistic game . . It should work as a simple decal project, no fancy features, and have a cull mask . .\r\n\r\nI hope this makes sense, I think users will be happy if there is a ' SimpleDecal ', and ' ComplexDecal ', also to limit performance issues, however is just an idea, don't really know how decals, the current one, affects performance, or so . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike above, and I also think the simple decal should just be in ' Mix ' mode, but advanced decal support Mix, Add, Subtract, and Multiply blend modes, of the texture . . That way, one can conserve the Advanced decal for the use-cases it is there for, and use the ' SimpleDecal ' for those, often used, in fact in some games, like Diablo, one would ONLY use that . . For many games, one doesn't need the advanced features in the current decal, and one worries, if those things might impact performance . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake two decals, a simple, basic, fast one, and a more advanced decal, with amazing features, or so . . ' DecalBasic ' and, ' DecalComplex ' . . This is assuming it would increase performance, not sure . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, as a beginner it's important the options I need are there, without needing to write code . . Also, for coders decals might not be important, but for artists, and those working on that side, in a game dev team, having both performant, and very advanced decals, seems logical, to me, not sure . . Also, for many game types, one would only really need the basic version, for the entire game . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, since the stuff is still being worked, anyway as an artist, mainly, use visual script, stuff like this would help me make sense of the engine, and get what I want, at minimum performance price . . That's, the idea, getting the best, of both worlds, a simple 2D project decal, for most use cases and, an advanced one, with 3D projection, fall-off, so one, that can be projected in complex ways, and have the advanced stuff, for special stuff . . Also, having a simple Decal would be a good way, for people to begin using them, just want best performance and, quality, where possible . . ;) . .\r\n\r\nThe current decal is amazing, aside the blend mode, but this is about use-cases, it would be nice to have a simpler ( faster :D ) decal, since the current one, is well, VERY, VERY advanced . .\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1433",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1433/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1433/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1433/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1433",
    "id": 688722771,
    "node_id": "MDU6SXNzdWU2ODg3MjI3NzE=",
    "number": 1433,
    "title": "Add support for loading (and/or importing) animated images (GIF, APNG)",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-08-30T13:51:38Z",
    "updated_at": "2021-01-04T14:05:37Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine Extension.\r\nRelated PR: goostengine/goost#8.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot doesn't currently support loading animated images (such as GIF), and there are no core data structures to facilitate this. Currently, we are limited to a single `Image` class which acts as a container for static images and provides basic image processing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that we add some basic (but still useful) support for loading (and possibly importing) animated images. For Godot, this would be mainly useful for the AssetLib godotengine/godot#31683, where people may link animated images into descriptions/relevant sections, for instance see my plugin https://github.com/Xrayez/godot-editor-icons-previewer with some GIF showcasing the plugin functionality.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![GIF](https://user-images.githubusercontent.com/17108460/91660938-92d20500-eae1-11ea-82e5-2aababaa8b15.gif)\r\n\r\nMinimal core functionality is required to make this happen. For introduction, see godotengine/godot#31831. Since the PR hasn't received much review from the core developers throughout a year (by the way, tomorrow will be exactly one year since the PR was opened!), it seems like that PR got abandoned (CC @Daw11, feel free to take over and/or discuss this).\r\n\r\nI'm not sure the reasons why it wasn't accepted for 3.2, but I suspect that the PR provided too much functionality which was considered a bloat for Godot. So, I'm taking a different approach and propose an alternative solution which should be more self-contained and easier to maintain, see my PR at goostengine/goost#8. Obviously, I had to strip out (most) non-essential features.\r\n\r\nThe most core data structure which was originally proposed is `AnimatedImage`, which basically acts as a container for an array of `Image`s with a custom delay for each. Different loaders could then use this class as a proxy for animated image importers.\r\n\r\nI decided to rename `AnimatedImage` class to `ImageFrames`. I recall Akien wasn't particularly happy with `Image` name for the existing class and once asked whether it makes sense to rename it to `ImageData` so people are less likely to use that as `Texture`s, see #godotengine-devel IRC logs:\r\n```\r\nAkien> reduz: Should we rename Image to ImageData or similar? We often get users confused and trying to use Image to load a PNG texture (where they should use StreamTexture or ImageTexture)\r\nThis being prompted by #41106 - but the UX problem around handling Image, ImageTexture and StreamTexture might run a bit deeper than just naming.\r\n```\r\n I believe it wouldn't be an improvement because then we'd have to rename other `Image`-related methods such as `create_from_image` or `get_data`. But renaming `AnimatedImage` is indeed a good decision in my eyes in comparison, to avoid further confusion with `AnimatedTexture` class, so I'll refer to it as `ImageFrames` from now on.\r\n\r\nAnother reason for having `ImageFrames` is because users could benefit from loading animated images via GDScript, with an API similar to `Image`:\r\n```gdscript\r\nvar frames = ImageFrames.new()\r\nframes.load(\"path/to/your.gif\")` # Or apng, not supported yet.\r\nframes.load_gif_from_buffer(bytes)` # Would be certainly useful for HTTP requests and AssetLib.\r\nframes.load_apng_from_buffer(bytes)` # Doesn't exist yet.\r\n```\r\n\r\nPersonally loading GIF images dynamically is the main motivation for me to work on this in fact, I'm not particularly interested in importers, but importing GIFs as `AnimatedTexture`s would be certainly useful, with the abundance of GIFs out there.\r\n\r\nI kinda \"had\" to remove `ImageFrames::to_animated_texture` and `ImageFrames::to_sprite_frames` because they can be implemented via script, this a compromise to increase the chances of this feature to be eventually implemented in Godot without bloat, I could certainly re-add these methods in Goost.\r\n\r\nOn that matter, I'd also like to propose to add `AnimatedTexture.create_from_image_frames` method, if this ends up implemented in Godot. This would be in alignment to `ImageTexture.create_from_image` method.\r\n\r\nTo summarize, we have `Image` for static images, so makes sense to add `ImageFrames` class for animated images (again, the purpose of both these classes currently is exactly image data storage, with some processing involved). Of course it would be up to the user to decide how these frames could be converted to `AnimatedTexture` or `SpriteFrames`, or `AnimationPlayer` with frames etc. I think importers could be completely implemented by the user, but I haven't tried this, the PR I linked only supports importing as `AnimatedTexture` (no `SpriteFrames` etc).\r\n\r\nSo, I'd like to come up with some common API at the very least with this proposal. If goostengine/goost#8 deemed acceptable for Godot, then I can start working on porting this to `master` branch. Not implementing importers at all is also acceptable for me.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nGIF is a known format for which there's an existing C library which works reliably for loading GIF images, cannot be possibly implemented via script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis can definitely be implemented as a C++ module as seen in goostengine/goost#8. If this proposal is not accepted, the PR is going to be merged eventually in Goost, hopefully that's alright considering this feature attracted a lot of 👍 and both projects are MIT licensed, I'll properly add @Daw11 as a co-author and even invite him as a collaborator, if that's the case.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1433/reactions",
      "total_count": 11,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1432",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1432/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1432/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1432/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1432",
    "id": 688719268,
    "node_id": "MDU6SXNzdWU2ODg3MTkyNjg=",
    "number": 1432,
    "title": "Distribute Windows installers for the Godot editor (in addition to ZIP archives)",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-08-30T13:29:10Z",
    "updated_at": "2020-09-18T22:08:23Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Reopened from https://github.com/godotengine/godot/issues/8057.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nNewcomers are sometimes confused as to how they can integrate Godot into their Windows system.\r\nBy \"integrating\", I'm referring to Start Menu entries, desktop shortcuts, file type associations, adding Godot to the `PATH`, and so on.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWindows installers will allow for a better out-of-the-box user experience, providing things such as start menu entries, easier installation and uninstall procedures, built-in export templates, registering file associations and more.\r\n\r\nOf course, the \"portable\" ZIP distribution will still be distributed alongside the executable installers.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nWe can use the open source [Inno Setup](https://jrsoftware.org/isinfo.php) to create Windows installers. It's possible to run the Inno Setup compiler on Linux using WINE too (but you'll need to use [innoextract](https://constexpr.org/innoextract/) to extract the Inno Setup installer *itself*, or create your own ZIP distribution of Inno Setup which you then extract).\r\n\r\nThe installers will also have to be signed to avoid warnings, just like the official Windows editor binaries.\r\n\r\nWe can use the [`.iss` setup definition file](https://github.com/Calinou/godot-builds-ci/blob/master/resources/innosetup/godot.iss) I wrote for my Godot nightly builds as a base (in addition to [modpath.pas](https://github.com/Calinou/godot-builds-ci/blob/master/resources/innosetup/modpath.pas) to add Godot to the `PATH` automatically).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this pertains to the official Godot editor distribution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis pertains to the official Godot editor distribution.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1432/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1431",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1431/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1431/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1431/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1431",
    "id": 688701102,
    "node_id": "MDU6SXNzdWU2ODg3MDExMDI=",
    "number": 1431,
    "title": "CSG Polygon Path Follow Enhancments",
    "user": {
      "login": "mrjustaguy",
      "id": 50302479,
      "node_id": "MDQ6VXNlcjUwMzAyNDc5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50302479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjustaguy",
      "html_url": "https://github.com/mrjustaguy",
      "followers_url": "https://api.github.com/users/mrjustaguy/followers",
      "following_url": "https://api.github.com/users/mrjustaguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjustaguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjustaguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjustaguy/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjustaguy/orgs",
      "repos_url": "https://api.github.com/users/mrjustaguy/repos",
      "events_url": "https://api.github.com/users/mrjustaguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjustaguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-30T11:22:34Z",
    "updated_at": "2020-08-30T12:23:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProcedurally Generated Map (Corridors specifically)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen using Path mode on CSG Polygon, the Rotation option has \"Path\", \"Path Follow\" and \"Polygon\".\r\nI want to use \"Path Follow\" however It's automatic rotation seems to be set to XYZ, (See PathFollow Node) and there is no option to change it.. when Path Follow rotation mode is enabled it should have an option to assign a path follow node and inherit it's settings.. Without the extra information/constraints, making a 3d path for a corridor will create some undesirable artifacts, limiting the corridors to a 2d plane\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy having the settings, one could more accurately describe the flow of the polygons, adding more options for procedural corridor generation and many other CSG oriented use cases..\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf Rotation mode is set to Path Follow, add setting allowing for PathFollow node to be assigned to it, when assigned use PathFollow Node to determine the polygon rotations (as in apply it's settings when constructing the CSG) as if the polygon's are a Plane on the Path using the PathFollow to get from the start of the path to the end and each step would be like it's extruded from the current Polygon to the next Plane's position while following the path.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSadly, no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCSG is a part of Godot, and adding this functionallity as an addon would be difficult\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
