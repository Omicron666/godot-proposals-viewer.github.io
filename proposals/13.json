[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/395",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/395/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/395/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/395/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/395",
    "id": 552047593,
    "node_id": "MDU6SXNzdWU1NTIwNDc1OTM=",
    "number": 395,
    "title": "Tree and Grid export hints",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-20T03:37:09Z",
    "updated_at": "2020-01-20T21:34:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspace ship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm adding a data orientated abstraction over the gui of my game and I need to export a tree of resources.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nbasically the tree node would allow the user to add, move, and deleted the exported hint type to exported hints kinda like the tree editor in the scenes but more simplified.\r\n\r\ngrids would be like arrays but with a second dimension \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\ndoesn't need it\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nit would have to be done in the engine so idk\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit may or may not be used often but i don't think there is a way to do it in scripts thats why i'm suggesting it\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause it makes godot better and easier to use.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/394",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/394/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/394/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/394/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/394",
    "id": 552002496,
    "node_id": "MDU6SXNzdWU1NTIwMDI0OTY=",
    "number": 394,
    "title": "Add support for dragging and dropping materials and textures onto MeshInstances and CSG shapes",
    "user": {
      "login": "BlueCannonBall",
      "id": 35404206,
      "node_id": "MDQ6VXNlcjM1NDA0MjA2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35404206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BlueCannonBall",
      "html_url": "https://github.com/BlueCannonBall",
      "followers_url": "https://api.github.com/users/BlueCannonBall/followers",
      "following_url": "https://api.github.com/users/BlueCannonBall/following{/other_user}",
      "gists_url": "https://api.github.com/users/BlueCannonBall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BlueCannonBall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BlueCannonBall/subscriptions",
      "organizations_url": "https://api.github.com/users/BlueCannonBall/orgs",
      "repos_url": "https://api.github.com/users/BlueCannonBall/repos",
      "events_url": "https://api.github.com/users/BlueCannonBall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BlueCannonBall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-19T23:19:47Z",
    "updated_at": "2020-01-21T21:19:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** I'm working on a small-scale Battle Royale style shooter game.\r\n\r\n**Describe the problem or limitation you are having in your project:** It takes me too long to apply materials to meshes with lots of material slots. Because of of the lack of a feature to drag and drop materials straight onto the editor viewport, it takes me hours to days to implement new assets.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** If I were able to simply drag an image (to automatically make a material) or material onto a mesh, the time it takes to finish meshes would be cut in half.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/35404206/72690216-3852de00-3ae8-11ea-9988-39b718b613b5.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** Not sure how.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Not that I know of.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot really, assuming it's possible to make such an asset. Though I don't know how.\r\n\r\n**Edit:** Forgot to mention that the screenshot isn't the project I mentioned above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/394/reactions",
      "total_count": 15,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/393",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/393/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/393/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/393/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/393",
    "id": 551958612,
    "node_id": "MDU6SXNzdWU1NTE5NTg2MTI=",
    "number": 393,
    "title": "Autocomplete methods from custom script for override",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-19T18:00:36Z",
    "updated_at": "2020-01-26T13:13:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with lots of script inheritance going.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you write `func`, you get a nice autocompletion list for virtual methods ready to be overriden. However these are only built-in methods. When inheriting a custom script, there's no list at all and there's no way to make the custom methods appear in the override list.\r\n\r\nI have e.g. an Enemy class with lots of callbacks. Not only I have to remember them all, I have to write them perfectly, otherwise the override will have no effect. The meh workaround is copy-pasting them from my Enemy script.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would be immensely useful for productivity if we could have autocomplete for custom \"virtual\" methods, from inherited user script. It could suggest all methods or methods starting with `_`, any way would be useful.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/72685721-1c057000-3aed-11ea-90ed-f1f3548bdd8e.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nJust fill the func name autocompletion list with methods from inherited custom classes, not only built-in ones.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can't write Script Editor plugins.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYou can't write Script Editor plugins. And even if you could, it's a rather obvious usability thing to have.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/393/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/392",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/392/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/392/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/392/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/392",
    "id": 551869987,
    "node_id": "MDU6SXNzdWU1NTE4Njk5ODc=",
    "number": 392,
    "title": "Unify bezier animations in the animation player",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-19T05:31:52Z",
    "updated_at": "2020-02-02T01:45:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nLillyByte mentioned she had a hard time using the animation player in her project.\r\n\r\nhttps://twitter.com/LillyByteGames\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently the animation player requires you to go to each track to edit the bezier curves.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/72675387-dc308100-3a37-11ea-8131-5dcf6437cef7.png)\r\n\r\nThe animation player only displays one of the nodes.\r\n\r\nThere is no way to select another node without going back to the timeline list.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nMy proposal is to unifiy all the bezier curve so they're on the same page.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis is my current work in progress.\r\n\r\n![ezgif-6-bc34fa6c77da](https://user-images.githubusercontent.com/32321/72675413-785a8800-3a38-11ea-9d63-55e1814a8527.gif)\r\n\r\nAkeytsu displays the beziers editor in the viewport:\r\n\r\n![image](https://user-images.githubusercontent.com/32321/72675450-13536200-3a39-11ea-9ff6-f745a5d194a4.png)\r\n\r\nhttps://www.youtube.com/watch?v=e8f8xZm9eJY\r\n\r\nMaya displays the beziers editor in the properties like Godot Engine: \r\n\r\n![Maya](https://help.autodesk.com/cloudhelp/2018/ENU/Maya-Animation/images/GUID-83E0DFEE-8248-43A7-AE6D-B06098B5458D.gif\r\n)\r\n\r\nLooking for suggestions on how to modify my current prototype.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nhttps://github.com/fire/godot/tree/unified-beziers\r\n\r\n* Make editor/animation_bezier_editor.h a multiple bezier track data structure [done]\r\n* Make the graph render multiple tracks [done]\r\n* Create a button to open a per animation beziers view [done]\r\n* Modify the animation player so it can work on multiple bezier tracks [done]\r\n* Make beziers view scroll. [pending]\r\n* Modify the bezier view so the developer can select a specific key without switching to another track [pending]\r\n* Modify the animation player so it can work on non bezier tracks [pending / blocked on design]\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a usability issue to improve workflow.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a ux modification to the core editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/392/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/391",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/391/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/391/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/391/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/391",
    "id": 551827291,
    "node_id": "MDU6SXNzdWU1NTE4MjcyOTE=",
    "number": 391,
    "title": "GDScript: Add keyword to access the current class",
    "user": {
      "login": "ChibiDenDen",
      "id": 11915378,
      "node_id": "MDQ6VXNlcjExOTE1Mzc4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11915378?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChibiDenDen",
      "html_url": "https://github.com/ChibiDenDen",
      "followers_url": "https://api.github.com/users/ChibiDenDen/followers",
      "following_url": "https://api.github.com/users/ChibiDenDen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChibiDenDen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChibiDenDen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChibiDenDen/subscriptions",
      "organizations_url": "https://api.github.com/users/ChibiDenDen/orgs",
      "repos_url": "https://api.github.com/users/ChibiDenDen/repos",
      "events_url": "https://api.github.com/users/ChibiDenDen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChibiDenDen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-18T21:33:07Z",
    "updated_at": "2020-01-19T16:24:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\ngdscript\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNo access to class from the following places:\r\n\r\n1. From static functions when unnamed https://github.com/godotengine/godot/issues/27491\r\nMostly for factory methods trying to call new\r\n2. As type from within the same class when unnamed \r\nFor example:\r\n\r\n      - As return type for function\r\n      - As variable type\r\n      - etc..\r\n\r\n3. As type from within the same class even when named\r\nhttps://github.com/godotengine/godot/issues/25252\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe keyword will allow access to the “static_class” Type, thus allowing access to the class type without giving it a name\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nFactory function with this_class return type, this_class local variable and access to this_class.new:\r\n```\r\nfunc make_with_color(color) -> this_class:\r\n\tvar obj : this_class = this_class.new()\r\n\tobj.color = color\r\n\treturn obj\r\n```\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThis will be implemented as an additional keyword to the parser and compiler of gdscript\r\nthe keyword I used for my POC was \"this_class\" but I would be more than happy to hear any better suggestions.\r\nSee Commit for actual code:\r\nhttps://github.com/ChibiDenDen/godot/commit/2ff8c1bc8106880997755ff559f5e930f1842034\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe current “script” solution is to use the following expression to get the static class\r\nload(“res://path_to_script_file.gd”)\r\nWhich is a hacky way, creates a dependency on the scripts path and looks bad\r\nFurthermore, this is not documented and very hard for new users to find.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is part of gdscript syntax",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/391/reactions",
      "total_count": 8,
      "+1": 4,
      "-1": 1,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/390",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/390/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/390/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/390/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/390",
    "id": 551717993,
    "node_id": "MDU6SXNzdWU1NTE3MTc5OTM=",
    "number": 390,
    "title": "Set owner by default when calling add_child",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 23,
    "created_at": "2020-01-18T04:10:03Z",
    "updated_at": "2020-09-16T19:07:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nJRPG/CCG (N/A)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is very easy to forget to call set_owner() after calling add_child() to create nodes in the SceneTree with code.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI think add_child() should automatically set the owner of the added/instanced node as the node that called add_child().\r\nFor instance, a savestate could be easily created, as all instanced nodes would be saved into the PackedScene when saving.\r\nIf the user didn't want this behavior, and instead wanted instanced nodes to be left out of the save file, they could set the owner as null when calling add_child().\r\n`add_child(instance, null)`\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n(see proposed default code below)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n`void add_child(instance: Node, owner: Node = self, legible_unique_name: bool = false)`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think most users would expect that calling add_child() would be all that they would have to do to build the SceneTree with code.\r\n\r\nBy not having add_child() automatically call set_owner(), loaded game files would be missing all of the nodes that were created in code, because the user didn't know that they had to call set_owner() manually.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/390/reactions",
      "total_count": 10,
      "+1": 8,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/389",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/389/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/389/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/389/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/389",
    "id": 551654704,
    "node_id": "MDU6SXNzdWU1NTE2NTQ3MDQ=",
    "number": 389,
    "title": "Add sandboxing for \"untrusted\" resource packs",
    "user": {
      "login": "ElfEars",
      "id": 20967774,
      "node_id": "MDQ6VXNlcjIwOTY3Nzc0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/20967774?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ElfEars",
      "html_url": "https://github.com/ElfEars",
      "followers_url": "https://api.github.com/users/ElfEars/followers",
      "following_url": "https://api.github.com/users/ElfEars/following{/other_user}",
      "gists_url": "https://api.github.com/users/ElfEars/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ElfEars/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ElfEars/subscriptions",
      "organizations_url": "https://api.github.com/users/ElfEars/orgs",
      "repos_url": "https://api.github.com/users/ElfEars/repos",
      "events_url": "https://api.github.com/users/ElfEars/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ElfEars/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-17T22:07:38Z",
    "updated_at": "2020-09-06T19:13:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game planned to have heavy mod support\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently the package system is very powerful but also very dangerous.\r\nFull access to the scripting system means unscrupulous mod authors can do naughty things such as overwrite player data or even worse...\r\nExecutable permissions will probably (Not a guarentee!) protect you from having system32 deleted but with arbitrary file operations you could spearphish pretty effectively or just read and upload any files with \"interesting\" names (we've all got a passwords.txt somewhere) or delete any other files the system isn't protecting.\r\n\r\nI propose a new package loading function that adds restrictions to all scripts loaded from it.\r\n(My proposal for the name would be SceneTree.load_untrusted_resource_pack())\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThese \"untrusted\" scripts would not be able to directly perform any file actions or edit the project settings. (Doing so via proxy would be OK though. In theory, if a game wished for mods to be able to have their own saves etc they'd use custom exposed functions that did all the behind the scenes work)\r\nAny scripts that have their sources edited by these \"untrusted\" scripts would also become \"untrusted\" (Simply instantiating a script however shouldn't cause it to become restricted)\r\nI also propose adding keywords to GDscript (Similar to and in tandem with the RPC keywords) dictating what script functions can/can not be called and what script variables can/can not be directly edited by untrusted scripts thus allowing for you to expose as much or as little of the game to the modding API as is needed.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Moddingv2_2](https://user-images.githubusercontent.com/20967774/72685178-47815e00-3adf-11ea-9108-bd208409a8db.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdd a boolean to the Script class designating it as \"Trusted\" or \"Untrusted\" or make a derived UntrustedScript class if it would make checking and overriding behaviour more efficient.\r\n(A full permissions system where you can specify what parts of the engine each package is allowed to use is probably overkill)\r\nModify certain script functions to check if the calling script is trusted or not. (Or override them for the UntrustedScript class)\r\nAdd keywords to GDscript (Similar to and in tandem with the RPC keywords) that dictate what functions can/can not be called and what variables can/can not be directly edited by untrusted scripts.\r\n(Unsure of whether it should be a whitelist or blacklist. Probably make it a project option?)\r\n\r\nI'm not sure how or even IF this could be implemented in C#/Other alternate scripting languages (Or how they interact with GDScript) so any experts on that side of the scripting environment please feel free to chime in.\r\n\r\nI don't think Shaders will need a permissions system. The worst you can do with those is crash the game (and that happens even on popular moddable engines such as Source so it's semi-expected)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used often. Working around requires creating an entirely new modding system reimplementing a lot of engine features and with all the underlying security issues still unresolved should someone find an exploit in the modding system.\r\nYou'd have to implement your own scripting system or build your game on premade tweakable via export var scripts with a whitelist and pre-vet the states of ALL PackedScenes to ensure that they do not include unauthorized scripts.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee previous. Also requires modification to the Script class and functions relating to it to impliment.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/389/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/387",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/387/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/387/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/387/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/387",
    "id": 551560394,
    "node_id": "MDU6SXNzdWU1NTE1NjAzOTQ=",
    "number": 387,
    "title": "Add a project upgrade tool for Godot 4.0",
    "user": {
      "login": "BenjaminNavarro",
      "id": 14923636,
      "node_id": "MDQ6VXNlcjE0OTIzNjM2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/14923636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenjaminNavarro",
      "html_url": "https://github.com/BenjaminNavarro",
      "followers_url": "https://api.github.com/users/BenjaminNavarro/followers",
      "following_url": "https://api.github.com/users/BenjaminNavarro/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenjaminNavarro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenjaminNavarro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenjaminNavarro/subscriptions",
      "organizations_url": "https://api.github.com/users/BenjaminNavarro/orgs",
      "repos_url": "https://api.github.com/users/BenjaminNavarro/repos",
      "events_url": "https://api.github.com/users/BenjaminNavarro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenjaminNavarro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-17T18:14:23Z",
    "updated_at": "2020-09-13T23:32:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI mostly make games on the side for fun using Godot 3.x but I follow its development quite closely.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen Godot 4.0 is released I would like to easily be able to switch to the new version with my current 3.x projects.\r\n\r\nBut being a major release, some parts of the API will change, as outlined in this [issue](https://github.com/godotengine/godot/issues/16863). This can make the transition phase a bit tedious if it has to be done manually.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nSince the mapping between the old names and the new ones is known the project imported can probably be modified to upgrade 3.x projects to be 4.0 compatible automatically. If some parts of the project cannot be upgraded automatically (e.g. removed feature) they should be clearly listed along with some guidelines on how to deal with these issues.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIt's a bit early for this, but I can make one once I know if it's theoretically possible to do it and what would be the best solution for it.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAgain, too early\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt probably can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSo that current users can migrate to 4.0 as smoothly as possible. If it's separated from the editor, most people probably won't know about it and struggle to upgrade their projects.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/387/reactions",
      "total_count": 13,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/386",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/386/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/386/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/386/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/386",
    "id": 550651085,
    "node_id": "MDU6SXNzdWU1NTA2NTEwODU=",
    "number": 386,
    "title": "Add a toolbar container",
    "user": {
      "login": "timothyqiu",
      "id": 372476,
      "node_id": "MDQ6VXNlcjM3MjQ3Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/372476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timothyqiu",
      "html_url": "https://github.com/timothyqiu",
      "followers_url": "https://api.github.com/users/timothyqiu/followers",
      "following_url": "https://api.github.com/users/timothyqiu/following{/other_user}",
      "gists_url": "https://api.github.com/users/timothyqiu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timothyqiu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timothyqiu/subscriptions",
      "organizations_url": "https://api.github.com/users/timothyqiu/orgs",
      "repos_url": "https://api.github.com/users/timothyqiu/repos",
      "events_url": "https://api.github.com/users/timothyqiu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timothyqiu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-16T08:29:02Z",
    "updated_at": "2020-01-17T05:22:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**  Just playing around trying to find & fix bugs\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nEditor's toolbar can end up with lots of buttons. Currently, it uses a `HBoxContainer` as toolbar. To keep all the buttons visible, it even pushes dock panels out of the window frame:\r\n\r\n<img width=\"1391\" alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/372476/72498428-47c4f380-386a-11ea-8cf2-faf24f0fa84d.png\">\r\n\r\nThe window in the screenshot is maximized. The inspector is pushed off the window.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nA toolbar container does not have to make all its children visible, it can have a much smaller minimum width.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nIf there is not enough space to show all the buttons on the toolbar, the extra buttons can be put into an overflow menu, as its menu items. (like an Android toolbar / extension toolbar on Chrome.)\r\n\r\n<img width=\"602\" alt=\"mock\" src=\"https://user-images.githubusercontent.com/372476/72500626-e9027880-386f-11ea-936c-7db718695efd.png\">\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n`ToolbarContainer` is like an `HBoxContainer` with a hidden trailing overflow menu button. When the container is resized to its minimum size, it only shows the overflow button. The container's children are usually `ToolbarItem`s. `ToolbarItem` creates an button when on the toolbar, and creates a menu item when in the overflow menu.\r\n\r\nAdditionally, a `ToolbarItemGroup` can be added to group `ToolbarItem`s. It has three menu modes:\r\n\r\n* `always`: shows an overflow menu button on the toolbar, or a submenu in the overflow menu\r\n* `never`: shows a divider separated group of buttons on the toolbar, or a divider separated group of menu options in the overflow menu\r\n* `auto`: default, one of the above two behaviors depending the available space\r\n\r\nThere are existing overflow menus that are added manually. For example:\r\n\r\n<img width=\"236\" alt=\"menu\" src=\"https://user-images.githubusercontent.com/372476/72503734-6e3d5b80-3877-11ea-98eb-8cb3ed0ec246.png\">\r\n\r\nThe layout in the above screenshot may be implemented as something like this: (shown in XML for easy display of hierarchy)\r\n\r\n```xml\r\n<ToolbarContainer>\r\n\r\n<ToolbarItemGroup>\r\n    <ToolbarItem icon=\"aaa\">Use Smart Snap</ToolbarItem>\r\n    <ToolbarItem icon=\"bbb\">Use Grid Snap</ToolbarItem>\r\n    <ToolbarItemGroup menu_mode=\"always\">\r\n        <ToolbarItem select_mode=\"toggle\">Use Rotation Snap</ToolbarItem>\r\n        <ToolbarItem select_mode=\"toggle\">Use Scale Snap</ToolbarItem>\r\n        <ToolbarItem select_mode=\"toggle\">Snap Relative</ToolbarItem>\r\n        <ToolbarItem select_mode=\"toggle\">Use Pixel Snap</ToolbarItem> \r\n        <ToolbarItemGroup menu_mode=\"always\" text=\"Smart Snapping\">\r\n            <ToolbarItem>XXX</ToolbarItem> \r\n        </ToolbarItemGroup>\r\n        <ToolbarItemGroup menu_mode=\"never\">\r\n            <ToolbarItem>Configure Snap...</ToolbarItem> \r\n        </ToolbarItemGroup>\r\n    </ToolbarItemGroup>\r\n</ToolbarItemGroup>\r\n<ToolbarItemGroup>\r\n    <ToolbarItem icon=\"ccc\" tooltip=\"Lock the selected object in place.\">Lock Object</ToolbarItem>\r\n    <ToolbarItem icon=\"ddd\" tooltip=\"Make sure the object's children are not selectable.\">Protect Children</ToolbarItem>\r\n</ToolbarItemGroup>\r\n<ToolbarItemGroup icon=\"bone\" menu_mode=\"always\">\r\n    <ToolbarItem>XXX</ToolbarItem>\r\n</ToolbarItemGroup>\r\n<ToolbarItem icon=\"camera\">Game Camera Override</ToolbarItem>\r\n\r\n</ToolbarContainer>\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nSeems not achievable using only a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nEditor can make use of this container for toolbar.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/386/reactions",
      "total_count": 20,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/385",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/385/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/385/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/385/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/385",
    "id": 550534785,
    "node_id": "MDU6SXNzdWU1NTA1MzQ3ODU=",
    "number": 385,
    "title": "Implement 3D focusing for keyboard/joystick-based GUI",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-16T02:22:41Z",
    "updated_at": "2020-11-15T20:55:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace ship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI keep having problems with keyboard and gamepad based gui because as you may have noticed controls games have nested focus based controls.\r\n\r\nfor example say you have a button that when pressed goes to a different part of the ui and when you press back you might go back to the previous parts of the ui.\r\n\r\nyou may also have a control that when selected automatically focuses onto a part of the gui.\r\n \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nbasically it would add 3 new focus neighbors to controls.\r\n- auto  (when the control is selected).\r\n- enter (when you press ui_accept)\r\n- escape (when you press ui_cancel)\r\n\r\n\r\nand 4 flags to controls\r\n- auto press flag (instead of focusing when you use keyboard or joystick input it tries to simulates a press)\r\n- auto focus flag (if disabled it doesn't focus on anything unless specified as a focus neighbor )\r\n- visible on focus flag (automatically makes your control visible when it or its children have focus)\r\n- invisible on unfocus flag (automaticly makes your control invisible when it or its children don't have focus)\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2453707/72486311-6621e500-37bf-11ea-8f53-2ffdbc031b54.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\njust pseudo code but here is a example\r\n```\r\nextends Control\r\n\r\n\r\nexport(bool) var auto_press\r\nexport(bool) var auto_focus\r\nexport(bool) var visible_on_focus\r\nexport(bool) var invisible_on_unfocus\r\n\r\nexport(NodePath) var focus_neighbour_auto\r\nexport(NodePath) var focus_neighbour_enter\r\nexport(NodePath) var focus_neighbour_escape\r\n\r\n# Called when the node enters the scene tree for the first time.\r\nfunc _ready():\r\n\tconnect(\"focus_entered\", self, \"_on_focus_enter\");\r\n\tconnect(\"focus_exited\",  self, \"_on_focus_leave\");\r\n\t\r\nfunc _gui_input(event):\r\n\t\r\n\tif(event.is_action_pressed(\"ui_accept\")):\r\n\t\tif(focus_neighbour_enter != \"\"):\r\n\t\t\tget_node(focus_neighbour_enter).grab_focus()\r\n\t\t\t\r\n\tif(event.is_action_pressed(\"ui_cancel\")):\r\n\t\tif(focus_neighbour_enter != \"\"):\r\n\t\t\tget_node(focus_neighbour_escape).grab_focus()\t\r\n\r\n\r\nfunc _on_focus_enter():\r\n\t\r\n\tif(auto_press):\r\n\t\t#simulate press\r\n\t\t#grab previus nodes focus\r\n\t\r\n\tif(check_all_children_and_me_focus(self, true)):\r\n\t\tvisible = true;\r\n\t\t\r\n\tif(focus_neighbour_auto != \"\"):\r\n\t\tget_node(focus_neighbour_auto).grab_focus()\r\n\t\t\r\nfunc _on_focus_leave():\r\n\tvar was_keyboard_or_gamepad_input = #get weather or not the focus lost was keyboard or gamepad\r\n\tvar was_a_focus_neighbour         = #get weather ot not focus was lost to a focus neighbour\r\n\tif(!auto_focus && was_keyboard_or_gamepad_input && !was_a_focus_neighbour):\r\n\t\tgrab_focus();\r\n\t\r\n\tif(check_all_children_and_me_focus(self, false)):\r\n\t\tvisible = false;\r\n\t\t\r\nfunc check_all_children_and_me_focus(node, value):\r\n\r\n\t\r\n\tfor n in node.get_children():\r\n\t\tif (!check_all_children_and_me_focus(n,value)):\r\n\t\t\treturn false;\r\n\t\t\t\r\n\treturn node.has_focus();\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would probably be used alot for console games and might be doable with a script but it probably would require more then a few lines.\r\n\r\nbut again, it would be a really nice feature to have and would be used alot for things like menus.\r\n**(EDIT)** I don't know if this is doable actually since there is no real way to simulate something like a button press\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\neasability with console games\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/384",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/384/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/384/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/384/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/384",
    "id": 549869643,
    "node_id": "MDU6SXNzdWU1NDk4Njk2NDM=",
    "number": 384,
    "title": "Inbuilt Focus changing can not obviously be disabled ",
    "user": {
      "login": "Spartan322",
      "id": 4315446,
      "node_id": "MDQ6VXNlcjQzMTU0NDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4315446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spartan322",
      "html_url": "https://github.com/Spartan322",
      "followers_url": "https://api.github.com/users/Spartan322/followers",
      "following_url": "https://api.github.com/users/Spartan322/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spartan322/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spartan322/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spartan322/subscriptions",
      "organizations_url": "https://api.github.com/users/Spartan322/orgs",
      "repos_url": "https://api.github.com/users/Spartan322/repos",
      "events_url": "https://api.github.com/users/Spartan322/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spartan322/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-14T23:05:55Z",
    "updated_at": "2020-01-17T08:32:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Simple Space-centric RTS\r\n\r\n**Describe the problem or limitation you are having in your project:** The auto-managed Focus Next, Prev, and Neighbors implementations can't be disabled, causing QoL issues with some of my UIs. (least without the cost of an even more complicated SceneTree, godotengine/godot#35045 incidentally related but not isolated)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** Giving choice over whether I desire the ability for Godot to auto-manage the focus changes would allow me to be more direct with my UI's Tree.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:** I'm not certain on a clean manner to do this, I'd prefer to discuss avenues to solving the problem foremost, so I can't.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** As stated, I'm not certain on a nice clean implementation, though my current naive ideal would be to have an enable/disable tickbox for the Focus Next, Prev, and Neighbors separately from the `focus_mode`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No, the only alternative is disabling the focus altogether, which for inputs is useless. (and thanks to godotengine/godot#34045 its impossible with RichTextLabel having `selection_enabled`)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** I don't believe it really can be done as an add-on, least not efficiently, its an automated oversight for how Focus is implemented in engine in my opinion.\r\n\r\nEdit: It seems there is a manner of doing so, but it sounds more like a hack then intended, setting the Focus Next, Prev, and Neighbors to the path of `'.'` which I suppose works fine, but it be nice to be able to more directly disable this functionality in editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/383",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/383/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/383/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/383/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/383",
    "id": 549362985,
    "node_id": "MDU6SXNzdWU1NDkzNjI5ODU=",
    "number": 383,
    "title": "Add support for bone constraints",
    "user": {
      "login": "somnivore",
      "id": 28724859,
      "node_id": "MDQ6VXNlcjI4NzI0ODU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28724859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somnivore",
      "html_url": "https://github.com/somnivore",
      "followers_url": "https://api.github.com/users/somnivore/followers",
      "following_url": "https://api.github.com/users/somnivore/following{/other_user}",
      "gists_url": "https://api.github.com/users/somnivore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somnivore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somnivore/subscriptions",
      "organizations_url": "https://api.github.com/users/somnivore/orgs",
      "repos_url": "https://api.github.com/users/somnivore/repos",
      "events_url": "https://api.github.com/users/somnivore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somnivore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-14T06:34:12Z",
    "updated_at": "2020-05-06T12:43:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nBone-heavy RPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a model created in Blender and exported with GLTF2 which makes use of disconnected hands and feet to make animating them simple (they're parented to the IK target bones, so they won't rotate when the legs/arms do); the bones also have constraints which keep them connected to the legs or arms.  Given the way Godot imports these animations, it seems to work out fine, and they do play just as they were made in Blender (after some modifications to the optimizer.)\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/72310835-6fd50c80-3648-11ea-8a81-352b17e02203.png)\r\nI assume those yellow lines are the foot IK targets way off from the model, but the feet remain attached to the legs anyway, which does match what's going on in Blender.\r\n\r\nFrom there, I created a BlendSpace1D in an AnimationTree and hooked up this animation to her walking animation, depicted below:\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/72310967-d35f3a00-3648-11ea-8432-9dd2207af83c.png)\r\n\r\nHowever, once any sort of blending occurs, the feet or hands will detach and rely on the IK targets for where they should be in-between the two animations, resulting in this:\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/72311427-3ef5d700-364a-11ea-88ff-34e39d95c676.png)\r\n\r\nThis is a contrived example, but it is noticeable with any blended animation that's at least a little different from where it's coming from, even if the IK targets are at a reasonable distance.\r\n\r\nThis poses a big problem: for now, the only way to ensure the blending works appropriately is to keep the hands and feet attached to the arms or legs, such that the bone hierarchy matches up with how Godot expects it.  \r\n\r\nUnfortunately, this also means that IK can't be very useful, as you must constantly readjust how the hands or feet are rotated for any little change made to the arms or legs if they are directly parented to them in any capacity.  You can make a bone not follow its parent's rotation in Blender, but Godot will not respect this setting, and you wind up with an animation that does not match up with the animation made in Blender:\r\n\r\n![HmkimhB34O](https://user-images.githubusercontent.com/28724859/72312178-de1bce00-364c-11ea-9702-fd0bba1253f1.gif)\r\n\r\nThe result is the same for any other configuration which attempts to make the hand or feet bones obey a different rotation from their parent, presumably due to Godot's FK.\r\n\r\nSo it seems that the animator is stuck either tediously readjusting the hands and feet every keyframe, or they must forego animation blending, or they must devise some system to make an arbitrary number of bones disregard its parent's rotation and follow another in Godot itself.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt seems that what's needed in this regard is to expand the behavior of bones.  Right now, settings for bones are simple: you can disable them, or enable them, which seems to prevent them from being animated.  A bone will transform relative to its parents.  You can override a bone's transform in code.  I don't believe there's anything more to them at the moment.\r\n\r\nIn this particular instance, my problem would be solved if I could specify that a bone should copy the rotation of another bone, similarly to how the RemoteTransform node works; this would allow the hierarchy to be preserved such that blendspaces work as intended, while the animation matches up between Blender and Godot.  But having other constraints, such as to limit rotations or copy location and scale, would be very useful in a variety of different situations, particularly for use with SkeletonIK.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nHere's how Blender's Copy Rotation constraint looks like:\r\n![image](https://user-images.githubusercontent.com/28724859/72318393-c13dc580-3661-11ea-8987-fc7ce6da4fc6.png)\r\n\r\nIf there was a way to directly import certain Blender constraints along with the model, that'd be most ideal, as no further setup would be necessary.  But I suppose that would boil down to what GLTF2 supports.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nOne option would be having an array of BoneConstraint resources on each bone, and a variety of constraints extending from it.  In some manner, these resources are populated in the array.  I assume the order in which the resource appears is how the skeleton constrains the bone.  Godot would preserve these constraints upon reimport.\r\n\r\nAnother option is to have a BoneConstraint node added to a skeleton.  You would select which bone to constrain, and select whatever constraints you want.  I don't believe this should be made a part of SkeletonIK, as you may want to constrain a bone without wanting to use Godot's IK.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is possible to override a bone's transform in code, and with a tool script, it can be done in the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nModifies the Godot core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/383/reactions",
      "total_count": 12,
      "+1": 9,
      "-1": 0,
      "laugh": 3,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/380",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/380/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/380/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/380/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/380",
    "id": 549207174,
    "node_id": "MDU6SXNzdWU1NDkyMDcxNzQ=",
    "number": 380,
    "title": "Add hotkeys for the editor's bottom panels [output, debugger, search results, audio, animation]",
    "user": {
      "login": "laubblaeser",
      "id": 36275400,
      "node_id": "MDQ6VXNlcjM2Mjc1NDAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/36275400?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laubblaeser",
      "html_url": "https://github.com/laubblaeser",
      "followers_url": "https://api.github.com/users/laubblaeser/followers",
      "following_url": "https://api.github.com/users/laubblaeser/following{/other_user}",
      "gists_url": "https://api.github.com/users/laubblaeser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laubblaeser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laubblaeser/subscriptions",
      "organizations_url": "https://api.github.com/users/laubblaeser/orgs",
      "repos_url": "https://api.github.com/users/laubblaeser/repos",
      "events_url": "https://api.github.com/users/laubblaeser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laubblaeser/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-13T22:00:19Z",
    "updated_at": "2020-10-05T09:50:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nRecently started out so I don't have a project that directly relates to my proposal. In using the Godot editor, often times the output window opens automatically and has to be closed with a mouse click. This could be done quicker with the press of a hotkey. Same applies for the debugger which is needed often to view hints/error messages. A quick \"open, read and close\" cycle could be done with keyboard via hotkeys for it.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI often find myself in the position to have to switch between keyboard and mouse controls. This workflow for coding/testing could be smoothened by introducing keyboard hotkeys.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nFaster access to opening and closing the respective panels without having to grab the mouse.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nIn my humble opinion, a mocked up screenshot would not be very helpful to better understand my proposal.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSet hotkeys \"Alt + [1, 2, 3, 4, 5]\" as default for opening/closing [output, debugger, search results, audio, animation]. These key combinations are easily accessible with one hand.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI do not know if others would be interested in this as well. Personally I could see myself using the feature quite often. Thus I also cannot tell if a few lines of script might fix the problem because I cannot code in C++ and don't know the inner workings of the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt covers core features of the engine which are used very frequently. An add-on might fix the issue but the proposal is to include it as a core feature for reasons of fundamentality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/380/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/378",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/378/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/378/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/378/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/378",
    "id": 548625907,
    "node_id": "MDU6SXNzdWU1NDg2MjU5MDc=",
    "number": 378,
    "title": "Create spritesheet for SpriteFrames by drag and dropping",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-12T20:57:01Z",
    "updated_at": "2020-01-12T20:57:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game with spritesheets.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI started using AnimatedSprite node more after it got support for atlases and I faced a big usability inconvenience. You can create the spritesheet only by clicking the button\r\n![image](https://user-images.githubusercontent.com/2223172/72225383-34253e80-3585-11ea-90a3-0e41374bdfc7.png)\r\nwhich opens the file dialog to select the file. Now, I try to avoid this dialog as much as possible, because the filesystem dock is infinitely easier to navigate and find things. However, in this one case I can't avoid it.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nCreating spritesheets for AnimatedSprites would be less annoying if I could do it by drag and dropping. Normally when you drop texture to SpriteFrames editor, it adds it as frame. But it could open the spritesheet creator when holding Ctrl.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Proposal](https://user-images.githubusercontent.com/2223172/72225461-12788700-3586-11ea-99a1-507f4bdfe365.gif)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWhen you drop the texture on SpriteFrames editor while holding Ctrl, open the spritesheet creator with that texture. Should be easy to do.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's an editor things, non-pluginable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n> non-pluginable",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/378/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/376",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/376/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/376/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/376/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/376",
    "id": 548601339,
    "node_id": "MDU6SXNzdWU1NDg2MDEzMzk=",
    "number": 376,
    "title": "Improve dependency-injected classes for addons, plugins, and modding tools",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-12T17:31:01Z",
    "updated_at": "2020-10-14T20:23:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlugins where users can override how certain nodes and scenes execute their processes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLet's say I want to create instances of some class, but I want the user to decide which class it is. I could, theoretically, export some data type, have the user assign a value to that data type, and then use that data type to instantiate the class. I will also frequently want to constrain the selected data type to refer to a type of Node class, Resource class, or some user-defined class via Script or even a PackedScene. In fact, at one point I even tried having meta-tools (tools that help other programmers create tools for designers/writers/etc.) that allow the constraints themselves to be a user-defined class.\r\n\r\nHowever, the problem is that there are multiple ways to represent a class, with no single API for handling them, instantiating them, or checking their inheritance to guarantee a type constraint.\r\n\r\nCurrently, if I allow engine classes to be used, then I have to export a String for the user to type in the name of the class. And if I want to give better UX, then I need to create some sort of utility to help the user get the name right, e.g. a popup for autocompletion of the class name or a button that, once clicked, opens the CreateDialog and lets the user choose a class to then fill in the name.\r\n\r\nIf we allow user-defined scripts, then names alone won't suffice. We will need to export a Script. And checking inheritance / instantiating a Script is a very different process from doing so with a class name, so I'll need unique logic for handling that case.\r\n\r\nAnd yet *again*, if we allow scenes, then names and scripts alone won't suffice. We will need to export a PackedScene. Again, instantiating a scene is different, and checking inheritance for a scene is *way* more complicated since it involves diving into the packed data and crawling its data for the things you need (which aren't well documented anywhere). Furthermore, there are two different types of inheritance for scenes: scene inheritance and root node inheritance. This is because a derived scene could conceivably change the script on the root node and change the node type (actually a very common practice).\r\n\r\nThis means that, to get a decent UX, I would have to create either 3 separate exported properties and tons of customized logic for handling each of them, or add even more logic to dynamically generate a single exported property based on some kind of toggleable setting interactived-with via a button that is placed by an EditorInspectorPlugin. It's just a rabbit hole of complexity that should really not be there for something seemingly so simple.\r\n\r\nTo get much improved UX, I would prefer to export a *class* that could abstract all 3 representations behind a single data type.\r\n\r\nUntil this is resolved, proper and smooth dependency injection for plugins, addons, and especially modding tools (which are Godot projects and not in the Editor) is a whole bunch of unnecessary complexity.\r\n\r\nAnother point is that, once a class has been selected, then at runtime, I would like to show the class's information to the user. Aside from documentation generation itself being a separate issue, knowing *which* class's documentation to show is already problematic without these changes since you have to add logic to check for which data type is used to represent the class and how to fetch the corresponding data. This relies on information from ClassDB for engine classes and Script reflection methods (godotengine/godot#31021) for user-defined scripts. Scenes just run off of whichever category their root node falls into.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt would abstract away the complexity of Godot's class system behind a single API so that basic lookup, instantiation, type checking, and reflection can all be performed from a single entity and in a single method call for each operation. This would dramatically improve the UX of any dependency injection related to class usage.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nI would imagine one could create an EditorProperty that looks like this:\r\n\r\n    | A | B | C |------- D -------|\r\n    |-------------- E ------------|\r\n\r\n- A: ToolButton for browsing files on the filesystem, filtered to any compatible script or scene file.\r\n- B: ToolButton for opening the CreateDialog and selecting a class name.\r\n- C: ToolButton with a `?` to display a popup which displays the name or file path of the type constraint assigned to the property. Defaults to \"Object\".\r\n- D: A string field for displaying the class name or file path of the resource representing the class.\r\n- E: A \"result\" field indicating what field C evaluates to.\r\n    - When C is Nil or empty string, it displays a message about defaulting to the type constraint.\r\n    - When C is an invalid class name or path, displays an error message.\r\n    - When C is a valid engine class name, it displays the name of the class.\r\n    - When C is a valid script class name or a valid path to a script or scene file, it displays an expandable resource bar that can open a sub-inspector, just like the EditorPropertyResource does.\r\n        - If the given resource does not meet the type constraints, then this section displays an error message instead.\r\n\r\nExporting the property might then look something like this:\r\n\r\n    const EnemyUnitScn = preload(\"res://enemy_unit.tscn\")\r\n\r\n    # Somehow get `ClassType` to be an acceptable symbol (core/module/editor cases)\r\n    export(ClassType, Control) list_item_type: ClassType = null\r\n    # If an addon, then can't reference the symbol and need to represent as a string.\r\n    # Can't be statically typed in that case, because differing export/static type.\r\n    export(String, TYPE, EnemyUnitScn) enemy_unit_class = ClassType.new(enemy_unit_class)\r\n\r\nWith a PropertyInfo resulting in these kinds of structures:\r\n\r\n    {\r\n        \"name\": \"list_item_type\",\r\n        \"type\": TYPE_OBJECT,\r\n        \"hint\": PROPERTY_HINT_TYPE_STRING,\r\n        \"hint_string: \"Control\"\r\n        \"usage\": ...\r\n        \"class_name\": \"ClassType\"\r\n    },\r\n    {\r\n        \"name\": \"enemy_unit_class\",\r\n        \"type\": TYPE_OBJECT,\r\n        \"hint\": PROPERTY_HINT_TYPE_STRING,\r\n        \"hint_string: \"res://enemy_unit.tscn\"\r\n        \"usage\": ...\r\n        \"class_name\": \"ClassType\"\r\n    }\r\n\r\nMaybe we'd need a separate PROPERTY_HINT to be allocated for this purpose? Ideally we'd be able to get away with using what we already have. I was hoping the `TYPE_OBJECT` and `PROPERTY_HINT_TYPE_STRING` combination would be the flag that triggers the unique behavior here.\r\n\r\nAny other suggestions are welcome.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nExcept for the export/editor portion, I already have a slightly tested and functional script that can handle all of the above logic. It is [Godot Next's ClassType](https://github.com/godot-extended-libraries/godot-next/blob/master/addons/godot-next/references/class_type.gd). There are some extra things in there that I would probably remove if ported to an official Godot class of some sort, but overall it fulfills a lot of the abstraction outlined above.\r\n\r\nSo, the implementation would involve porting that class to some sort of data type that abstracts the notion of a class, and then creating a new `EditorProperty*` type that knows how to react to that data type.\r\n\r\n**The difficult part** is *how* and/or *where* to put such a class to fulfill its tactical needs:\r\n\r\n- If you put it in `/editor`, then it can't be used in modding tools unless the users bundle in the entire Godot Editor with their modding tools (which they may not want to do).\r\n- If you put it in `/modules`, then the editor can't reference the class from the editor. You would only be able to have the class export properly if you detected and reacted to specific settings (like a module-dependent unique `PROPERTY_HINT`) to customize the Inspector while iterating over properties on the object. And GDScript can't even directly build PropertyInfos (nor is that user-friendly at all), so it wouldn't be able to create such a property anyway. You'd have to use a different language.\r\n- If you put it in `/core`, then it is accessible everywhere (the editor can use it AND modding tools can use it), but it's a problem because the core doesn't actually *use* the class, so it is nothing but bloat as far as the core is concerned.\r\n- \\* If you make it an addon that other addons would use as a dependency, then the UX of the concept drops considerably. If it isn't a built-in feature, then designing plugins that expect users to have the other plugin installed becomes much more difficult.\r\n    It's also slightly awkward since the functionality itself, \"being able to use dependency injection to plug in a class for a script's logic,\" is incredibly basic functionality that, due to the variety of class constructs in Godot, is far more complicated than it should be. Users shouldn't have to go through extra effort like an addon just to use dependency injection consistently. It should be a built-in feature.\r\n    - If you were to use an addon, then the implementation would shift from using an `EditorProperty*` to using an `EditorInspectorPlugin` to inject a custom Control node with the mentioned features/interface.\r\n\r\nAnd no matter what you do, you'd still have to find a way of encoding this concept into the PropertyInfo so that an `EditorProperty*` or `EditorInspectorPlugin` can detect when it should have the custom GUI code in the EditorInspector. There isn't really a clean way to do this since GDScript can't export property hints directly (unless they are derived from property hints / hint strings already in core and the gdscript parser can be updated to convert a certain export pattern to the matching PropertyInfo data).\r\n\r\nSo, part of this proposal is figuring out *which* implementation can be made to work in the most clean and effective way. The option that sounds most likely would be a module in the engine core, but I think you would need to make changes to how exports work in order for the connection between GDScript, PropertyHint, Inspector, and ClassType can resolve cleanly.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWhether it is used often or not depends on whether someone...\r\n\r\n1. uses tools written by someone else (which are using dependency injection).\r\n1. how many people are on their team (if they write tools for other team members that use dependency injection).\r\n1. is busy writing the tools for other people to use (my use case).\r\n\r\nSo, *some* people may not use this feature at all, but *most* stand to benefit from it since dependency injection is a core programming principle that spans all scripting languages and software development paradigms.\r\n\r\nAnd no, it is anything but a few lines of script. My `class_type.gd` script is nearly a thousand lines of code by itself (probably could be shortened to around 800 lines of code if the spaces, inlined docs, and bloat are removed). Then you'd have to add all the editor tools on top of that which is probably another few hundred lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nRestating the asterisked section above:\r\n\r\n> If you make it an addon that other addons would use as a dependency, then the UX of the concept drops considerably. If it isn't a built-in feature, then designing plugins that expect users to have the other plugin installed becomes much more difficult.\r\n> It's also slightly awkward since the functionality itself, \"being able to use dependency injection to plug in a class for a script's logic,\" is incredibly basic functionality that, due to the variety of class constructs in Godot, is far more complicated than it should be. Users shouldn't have to go through extra effort like an addon just to use dependency injection consistently. It should be a built-in feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/376/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/375",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/375/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/375/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/375/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/375",
    "id": 548482713,
    "node_id": "MDU6SXNzdWU1NDg0ODI3MTM=",
    "number": 375,
    "title": "Button nodes should have both valign and halign properties for icons and text",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-11T21:31:37Z",
    "updated_at": "2020-01-12T00:41:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGameboy Zelda Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCan't set the halign or valign of icons specifically in buttons\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nadding both vertical and horizontal alignment for text and icons allows the buttons to be more customizable without hackish workarounds \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIt doesn't need it\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nbasically it would be the align property of the button with a combobox but it would have 4 of them instead of just 1.\r\n2 for icon alignment (x and y), 2 for text alignment (x and y)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis feature would be used often and idk if it can be done with scripts.\r\nits kinda one of those things that should already be added since every other gui framework has it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause alignment already is, its just not very useful right now.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/375/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/374",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/374/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/374/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/374/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/374",
    "id": 548460869,
    "node_id": "MDU6SXNzdWU1NDg0NjA4Njk=",
    "number": 374,
    "title": "Add support for vector literals in GDScript",
    "user": {
      "login": "MyriaCore",
      "id": 35076430,
      "node_id": "MDQ6VXNlcjM1MDc2NDMw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/35076430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MyriaCore",
      "html_url": "https://github.com/MyriaCore",
      "followers_url": "https://api.github.com/users/MyriaCore/followers",
      "following_url": "https://api.github.com/users/MyriaCore/following{/other_user}",
      "gists_url": "https://api.github.com/users/MyriaCore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MyriaCore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MyriaCore/subscriptions",
      "organizations_url": "https://api.github.com/users/MyriaCore/orgs",
      "repos_url": "https://api.github.com/users/MyriaCore/repos",
      "events_url": "https://api.github.com/users/MyriaCore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MyriaCore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2020-01-11T18:03:23Z",
    "updated_at": "2020-01-27T17:56:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 2D top down shooter/puzzle game that has a heavy emphasis on projection/reflection physics. This feature applies to all projects, though, as it relates to vector algebra, something we all have to slog through eventually as game developers.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWriting physics related code feels very unnatural, not because it's significantly difficult to work with vectors in godot, but because GDScript is already such a compact language that having to type out `Vector2(..., ...)` or `Vector3(..., ..., ...)` any time I want to create a vector contrasts very harshly with what I need to do to create a list or a dictionary. This compounds when (for example) working with lists of vectors, or a dictionary of vectors, making for a very cumbersome editing experience:\r\n```\r\nvar vlist = [Vector2(..., ...), Vector2(..., ...), Vector2(..., ...), ...]\r\nvar vdictionary = { \r\n   \"v1\": Vector2(..., ...), \r\n   \"v2\": Vector2(..., ...), \r\n   \"v3\": Vector2(..., ...), \r\n   ...\r\n}\r\n```\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nGDScript borrows a lot of design elements from python, one of which is upheld across most of GDScript, but not when it comes to vectors (and some other physics-related types). In python, *most* commonly-used standard library datatypes can be expressed as literals:\r\n\r\n| Literals in Python | Literals in GDScript |\r\n| --- | --- |\r\n| String literals: `\"halo\"` , `'12345'` |  Strings: `\"Hello\"`, `\"Hi\"`; Multiline strings:  `\"\"\"Hello\"\"\"` |\r\n| Int literals: `0`,`1`,`2`,`-1`,`-2` | Base 10 integers: `45`; Base 16 (hex) integers: `0x8F51` |\r\n| Float literals: `3.14` | Floating point numbers: `3.14`, `58.1e-10` |\r\n| Boolean literals: `True` or `False` | Booleans: `true`, `false` |\r\n| List literals: `[]`, `[5,6,7]` | Lists: `[1, 2, 3, 4]` |\r\n| Dict literals: `{}`, `{'x':1}` | Dictionaries: `{ \"a\": 1, \"b\": 2, \"c\": 3 }` |\r\n| Set literals: `{8,9,10}` |  |\r\n| Long literals: `89675L` |  |\r\n| Complex literals: `12j` |  |\r\n| Unicode literals: `u\"hello\"` |  |\r\n| Tuple literals: `()`, `(9,1)`,`(8,9,0)` |  |\r\n|  | NodePath or StringName: `@\"Node/Label\"`  |\r\n| | Shorthand for `get_node(\"NodePath\")`: `$NodePath` |\r\n\r\nAs we can see, even complex datatypes, like dictionaries and sets, get their own literal representations. Godot has started taking this approach with some of their own standard-library concepts, like the `@\"Node/Label\"` and `$NodePath` literals.  \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIn code, I propose we implement vector literals using angle brackets, to best align with notation used in vector algebra:\r\n- Vector2: `< v₀, v₁ >`\r\n- Vector3: `< v₀, v₁, v₂ >`\r\n\r\nHere's what real examples of code might look like with this syntax:\r\n```\r\n$Node2D.position = <400, 300>\r\n\r\nvar sprite = $Node2D/AnimatedSprite\r\nif vel != <0, 0> and not sprite.playing: sprite.play(\"moving\")\r\n\r\nmatch vel:\r\n   <0, 0>:\r\n      print(\"player is standing still\") \r\n   <0, var v_y>:\r\n      print(\"player is moving %s at %d px/sec\"  \\\r\n         % [(\"north\" if v_y > 0 else \"south\"), abs(v_y)])\r\n   <var v_x, 0>:\r\n      print(\"player is moving %s at %d px/sec \" \\\r\n         % [(\"west\" if v_x > 0 else \"east\"), abs(v_x)])\r\n   <var v_x, var v_y>:\r\n      print(\"player is moving %s%s at %d px/sec\"  \\\r\n         % [(\"north\" if v_y > 0 else \"south\"), \\\r\n            (\"east\" if v_x > 0 else \"west\"), vel.length()])\r\n```\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIn [`godotengine/godot/modules/gdscript`](https://github.com/godotengine/godot/tree/master/modules/gdscript):\r\n1. Edit [`gdscript_tokenizer.h`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.h) and [`gdscript_tokenizer.cpp`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp)\r\nso balanced angle brackets can be properly recognized by the parser as relating to vector literals\r\n2. Edit [`gdscript_parser.h`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_parser.h) and [`gdscript_parser.cpp`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_parser.cpp) to add parsing logic that makes terms of the form `< t₁, t₂>` and `< t₁, t₂, t₃>` legal. Also, add logic to ensure that at the the `<` token relating to less-than checks and the `<` token relating to vector-literals are distinguishably distinct. \r\n3. Edit [`gdscript.h`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript.h) and [`gdscript.cpp`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript.cpp) in the event that we need to add special evaluation rules to ensure less-than checks distinct from a vector-literal's opening bracket, as required in step 2.\r\n4. Edit [`gdscript_compiler.h`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_compiler.h) and [`gdscript_compiler.cpp`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_compiler.cpp) in the event that target code relating to vectors should be different when working with literals vs. classes. I don't *think* this should be the case, as to my understanding, by the time the compiler is running, the distinction between literal datatypes and non-literal datatypes should've been abstracted away, but I could easily be wrong, which is why I include this step here.\r\n5. Edit [`gdscript_editor.h`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_editor.h) and [`gdscript_editor.cpp`](https://github.com/godotengine/godot/blob/master/modules/gdscript/gdscript_editor.cpp) in the event that we need to do more to allow the editor to properly work with the literals (suggest completions, possibly match braces, etc).\r\n\r\nAnd that should be it! \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nAdoption of this feature depends on how many Godot users prefer data literals over the use of class constructors. Those coming from C# would likely use this feature fairly little, but those used to languages like python would be more likely to use this feature very often.\r\n\r\nThat being said, I don't think this can be worked around with a few lines of script, unless GDScript has macro support. Because of the nature of implementing a new literal, we'd naturally need access to the parser/interpreter to make this work. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n- If implemented as an add-on, it would likely need to add a whole new scripting language, forcing users to choose between \"GDScript\", and \"GDScript-more-literals\" as their scripting language, and that's not something that's really reasonable.\r\n- It would also make updating more difficult, because if a new version of GDScript comes out, the compiler would have to be re-forked and merged back into the add-on.\r\n- This feature would allow the language to channel more of python's flow-inducing syntax, which, in this case, is a good thing for everyone involved.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/374/reactions",
      "total_count": 9,
      "+1": 5,
      "-1": 4,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/373",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/373/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/373/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/373/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/373",
    "id": 548399754,
    "node_id": "MDU6SXNzdWU1NDgzOTk3NTQ=",
    "number": 373,
    "title": "Add function to emulate features when playing the game from Editor",
    "user": {
      "login": "earlroxas13",
      "id": 8316851,
      "node_id": "MDQ6VXNlcjgzMTY4NTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8316851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earlroxas13",
      "html_url": "https://github.com/earlroxas13",
      "followers_url": "https://api.github.com/users/earlroxas13/followers",
      "following_url": "https://api.github.com/users/earlroxas13/following{/other_user}",
      "gists_url": "https://api.github.com/users/earlroxas13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earlroxas13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earlroxas13/subscriptions",
      "organizations_url": "https://api.github.com/users/earlroxas13/orgs",
      "repos_url": "https://api.github.com/users/earlroxas13/repos",
      "events_url": "https://api.github.com/users/earlroxas13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earlroxas13/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-11T08:16:29Z",
    "updated_at": "2020-01-13T09:12:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nRight now my game have 3 version that separated using feature:\r\n1. Normal version\r\n2. Demo version -> using feature tag 'demo'\r\n3. Free version -> using feature tag 'free'\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs an example, I have this project setting field \"Stage Count\" that is the number of stages that player can play.\r\nIn the normal version it is 20, in the demo version it is 8. For now if I want to test the demo version I have to export the game using preset that have feature tag demo.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf this feature implemented I dont have to export the game to test it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIrrelevant\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdd the Project Setting to store the feature you want to emulate.\r\nMy suggestion would be:\r\ndebug/settings/feature/emulated\r\n\r\nThen if I use the OS.has_feature() it should return true if the feature tag is written in the setting above.\r\nAnd also if you get ProjectSetting using ProjectSettings.get_setting() is should return the overrided value if any.\r\n\r\nAnd also this should ONLY work on Editor and SHOULD NOT work on exported game.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAFAIK,no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo, but it should be in the core to make testing more easy",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/373/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/372",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/372/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/372/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/372/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/372",
    "id": 548397003,
    "node_id": "MDU6SXNzdWU1NDgzOTcwMDM=",
    "number": 372,
    "title": "Add function to get exported application version / product version",
    "user": {
      "login": "earlroxas13",
      "id": 8316851,
      "node_id": "MDQ6VXNlcjgzMTY4NTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8316851?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/earlroxas13",
      "html_url": "https://github.com/earlroxas13",
      "followers_url": "https://api.github.com/users/earlroxas13/followers",
      "following_url": "https://api.github.com/users/earlroxas13/following{/other_user}",
      "gists_url": "https://api.github.com/users/earlroxas13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/earlroxas13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/earlroxas13/subscriptions",
      "organizations_url": "https://api.github.com/users/earlroxas13/orgs",
      "repos_url": "https://api.github.com/users/earlroxas13/repos",
      "events_url": "https://api.github.com/users/earlroxas13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/earlroxas13/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-11T07:46:22Z",
    "updated_at": "2020-01-13T07:46:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIrrelevant\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nYou can't get the version of the app or game that you export.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMake it easier to get version of my exported app.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIrrelevant\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIn the export preset there is a version field, example:\r\nAndroid: Preset > Options > Version > Name\r\nWindows: Preset > Options > Application > Product Version\r\netc\r\nSo these version should be available to get from Godot API.\r\nMy suggestion would be:\r\nOS.get_product_version()\r\nor\r\nOS.get_application_version()\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nRight now I use the project setting to make custom string field to write my game version and get it using ProjectSettings.get_setting(). But is not so effective because I have to edit it manually whenever I update my app version in export preset.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is important.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/372/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/371",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/371/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/371/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/371/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/371",
    "id": 548346730,
    "node_id": "MDU6SXNzdWU1NDgzNDY3MzA=",
    "number": 371,
    "title": "Add support for profiling C# code using Visual Studio",
    "user": {
      "login": "jasonswearingen",
      "id": 814134,
      "node_id": "MDQ6VXNlcjgxNDEzNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/814134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasonswearingen",
      "html_url": "https://github.com/jasonswearingen",
      "followers_url": "https://api.github.com/users/jasonswearingen/followers",
      "following_url": "https://api.github.com/users/jasonswearingen/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasonswearingen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasonswearingen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasonswearingen/subscriptions",
      "organizations_url": "https://api.github.com/users/jasonswearingen/orgs",
      "repos_url": "https://api.github.com/users/jasonswearingen/repos",
      "events_url": "https://api.github.com/users/jasonswearingen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasonswearingen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-11T00:03:41Z",
    "updated_at": "2020-10-28T16:06:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPrototyping high performance C#\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWant to profile with VS2019, so I can look at GC allocations, etc related to systems I'm prototyping.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nVS2019 Community Edition is free and includes its profiler tools.  \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n1. Run game with \"wait for debugger\"\r\n2. attach visual studio profiler\r\n3. run game for a bit then exit game\r\n4. profiler generates a report\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI am new to Mono (but used c# a lot) but it looks like Visual Studio isn't able to detect the mono code in the app.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nVSCode works great for debugging, but there isn't a profiler for it.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it's related to core mono support.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/371/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/369",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/369/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/369/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/369/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/369",
    "id": 547509978,
    "node_id": "MDU6SXNzdWU1NDc1MDk5Nzg=",
    "number": 369,
    "title": "When Using maths inside inspector apply it to each selected node individually",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-09T14:24:59Z",
    "updated_at": "2020-01-12T17:27:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nBreakout clone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nInspector allows users to use paths inside it rather than type numbers for example if we select a sprite and in transform x we type +25 it will be moved by 25 pixels . Problem starts when we have multiple selected nodes if we select multiple nodes and type +50 position will be calculated only once and assigned to all nodes\r\n\r\nhttps://streamable.com/m170v\r\n\r\nThis is not what we want to accomplish at all. \r\n\r\nWhat user really wants is to move all sprites by 50 pixels like this\r\n\r\n![1](https://user-images.githubusercontent.com/30668026/72075270-4c7a2c80-32eb-11ea-84fa-31b6d885f8b7.PNG)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nBy applying maths to each node individually we would speed up level design significantly \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nLinks above\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nNot sure if this can even be done but would be nice if it could \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nBy everyone every time they use maths in editor\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nit's a part of core functionality of editor",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/369/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/368",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/368/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/368/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/368/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/368",
    "id": 547403336,
    "node_id": "MDU6SXNzdWU1NDc0MDMzMzY=",
    "number": 368,
    "title": "UX for the Items of OptionButton could be improved",
    "user": {
      "login": "QbieShay",
      "id": 7917475,
      "node_id": "MDQ6VXNlcjc5MTc0NzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7917475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QbieShay",
      "html_url": "https://github.com/QbieShay",
      "followers_url": "https://api.github.com/users/QbieShay/followers",
      "following_url": "https://api.github.com/users/QbieShay/following{/other_user}",
      "gists_url": "https://api.github.com/users/QbieShay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QbieShay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QbieShay/subscriptions",
      "organizations_url": "https://api.github.com/users/QbieShay/orgs",
      "repos_url": "https://api.github.com/users/QbieShay/repos",
      "events_url": "https://api.github.com/users/QbieShay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QbieShay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-09T10:54:44Z",
    "updated_at": "2020-06-28T15:45:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIrrelevant to the issue, but worth to mention it's a project done by a number of people.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is the first time for me where I am using an option button, and the original scene containing the option button was not done by me. I had to modify the options of the option button. Took me solid 30 minutes to find where the options are added to the option button, because they were not present in the inspector so I assumed they were added via code.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI think the UX of adding items to an OptionButton should be unified with the rest of Godot's, which is generally to have a property in the inspector panel on the right. In the case of the OptionButton, I would expect it to show an array that accept Items.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWhat I would imagine is for the content of the popup that shows when you press on \"items\" to show instead in the inspector. This could be a minor change (not sure as I'm not super familiar with the editor code organization). What would be better is to treat the items of an option button as an array/list of dictionaries/resources.\r\n\r\nCurrent look:\r\n![optionbuttoncurrent](https://user-images.githubusercontent.com/7917475/72060835-0ade8700-32d5-11ea-81eb-b85a1ee36a66.png)\r\nItems are defined by clicking on the Items button, close to the \"anchors\" button on the top part of the central view. Clicking that buttons opens this popup:\r\n![optionbuttonitem](https://user-images.githubusercontent.com/7917475/72060891-26e22880-32d5-11ea-8a0c-9d3dacdef44b.png)\r\n\r\nWhat I would expect is something similar to this:\r\n![items](https://user-images.githubusercontent.com/7917475/72060925-32355400-32d5-11ea-82c7-396374f379f9.png)\r\n\r\nIt would be even better (from a consistency perspective) if it was a regular Array of Dictionaries or Array of Items.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNot sure, I'm not familiar with that part of the editor code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure this could be implemented with an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/368/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/367",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/367/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/367/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/367/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/367",
    "id": 546844518,
    "node_id": "MDU6SXNzdWU1NDY4NDQ1MTg=",
    "number": 367,
    "title": "RichTextLabel: highlighting and redacting",
    "user": {
      "login": "CawawaC",
      "id": 5923281,
      "node_id": "MDQ6VXNlcjU5MjMyODE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5923281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CawawaC",
      "html_url": "https://github.com/CawawaC",
      "followers_url": "https://api.github.com/users/CawawaC/followers",
      "following_url": "https://api.github.com/users/CawawaC/following{/other_user}",
      "gists_url": "https://api.github.com/users/CawawaC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CawawaC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CawawaC/subscriptions",
      "organizations_url": "https://api.github.com/users/CawawaC/orgs",
      "repos_url": "https://api.github.com/users/CawawaC/repos",
      "events_url": "https://api.github.com/users/CawawaC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CawawaC/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-08T12:59:07Z",
    "updated_at": "2020-01-08T15:33:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nI'm currently working on a text-driven game. Part horror investigation, par turn-based RPG. Text formatting is absolutely essential because there are almost no images, all interactions happen with the text, and all the information is held in the text while being highlighted in proper ways in order to guide the player. Also, all the events that take place during play happen, you guessed it, to the text. \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nI need a way to bring forward certain words in the text. I need them as eye-popping as possible.\r\nAlso, and this is a related addition, I need to be able to dynamically obscure text. Some displayed texts need to be obscured when the player is missing information. \r\nAll this without using an image of a text, since text is generated, and I need it to be dynamic (be able to change the content in real time and modify the style of individual words, and be able to have parts of it hoverable and clickable).\r\n\r\n### Describe how this feature / enhancement will help you overcome this problem or limitation\r\nHighlighting text is arguably the most eye-popping text styling option. It is a great way to bring forward crucial information, like enemy names in my game.\r\nRedacted text is part of investigation visual tropes, that's why I'm looking to reproduce it, and am choosing it as the way my game will obscure parts of a text.\r\n\r\n### Show a mock up screenshots/video or a flow diagram explaining how your proposal will work\r\nHighlighted text:\r\n![Capture](https://user-images.githubusercontent.com/5923281/71978859-9cd68900-321c-11ea-981a-826a5c19ad4a.PNG)\r\nRedacted text :\r\n![redacted](https://user-images.githubusercontent.com/5923281/71979037-048cd400-321d-11ea-8dea-600bbdfef943.PNG)\r\n\r\n### Describe implementation detail for your proposal (in code), if possible\r\nUnfortunately, I'm not familiar enough with the inner working of text styling in the Godot source. But hightlighting could be a BBCode tag. Or perhaps `RichTextEffect` could take care of this. Since highlighting is actually painting the background of a character, BBCode tags for highlighting could look like this:\r\n\r\n`[background=yellow]highlighted text[/background]`\r\nor\r\n`[bgcolor=yellow]highlighted text[/background]` which seems more common.\r\n\r\nAs for redacted text:\r\n`[redacted]redactedtext[/redacted]`\r\nWhich would paint a black color over the text. And would probably need to remove the actual characters, so they can't in any way be selected. It is basically the same as highlighting, but color is painted over the text, and not under it. So we could also make it more generic:\r\n`[overlay=black]redacted text[/overlay]`\r\nI tried using a `RichTextEffect` to replace tagged letters with the [full block character](https://www.fileformat.info/info/unicode/char/2588/index.htm) █ but no luck: there's space displayed instead of the characters. And replacing the letters this way does not remove them (selecting, copying and pasting reveals they are still there).\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nProbably not. At least, I don't see how you could alter the background color of certain characters within a text node using only scripts.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIf there's a way to make this into an addon, I don't see why not. But it's not a heavy addition, and only expands upon common text styling options to make `RichTextLabel` more versatile.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/367/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/366",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/366/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/366/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/366/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/366",
    "id": 546821391,
    "node_id": "MDU6SXNzdWU1NDY4MjEzOTE=",
    "number": 366,
    "title": "AnimationPlayer should return error when attempting to play animation that doesn't exist",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-08T12:07:44Z",
    "updated_at": "2020-01-19T08:43:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nBreakout clone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently `$AnimationPlayer.play(\"animation_name_that_doesn't_exist\")` will do nothing it will simply not play any animation. This is not desired because it makes it hard to track bugs. \r\n\r\nThis usually happens when user misspells animation name and is not something any user could possibly want as desired behaviour. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n`$AnimationPlayer.play(\"animation_name_that_doesn't_exist\")` should return error `Attempting to play animation that doesn't exist` so user knows immediately that that there is an error \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nNot sure\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nUsed by everyone and no current work around hat I know off. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a pare of core behaviour of one of core nodes. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/366/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/365",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/365/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/365/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/365/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/365",
    "id": 546730784,
    "node_id": "MDU6SXNzdWU1NDY3MzA3ODQ=",
    "number": 365,
    "title": "Allow disabling Shortcut's visual pressing of buttons",
    "user": {
      "login": "Spartan322",
      "id": 4315446,
      "node_id": "MDQ6VXNlcjQzMTU0NDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4315446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spartan322",
      "html_url": "https://github.com/Spartan322",
      "followers_url": "https://api.github.com/users/Spartan322/followers",
      "following_url": "https://api.github.com/users/Spartan322/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spartan322/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spartan322/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spartan322/subscriptions",
      "organizations_url": "https://api.github.com/users/Spartan322/orgs",
      "repos_url": "https://api.github.com/users/Spartan322/repos",
      "events_url": "https://api.github.com/users/Spartan322/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spartan322/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-08T09:06:53Z",
    "updated_at": "2020-09-14T00:07:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Simple Space-centric RTS \r\n\r\n**Describe the problem or limitation you are having in your project:** Shortcut Events always visually press buttons and there is no manner to disable such.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** Its mostly just a concept to allow developers more visual control over their game without having to wire it up themselves, its more convenient to wire up buttons from the editor.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** Could add a boolean on the shortcut for detecting if it will visually activate it, however because of the nature of `on_action_event(InputEvent)` the BaseButton itself can't absolutely determine if what triggered it was a shortcut or a button press. In which case you could allow detection of the shortcut's visually active boolean in`_unhandled_input` but I'm not certain if that's fine with the style of Godot, I suppose there's nothing against a separate method in that case? I'm not sure how much trouble this would cause throughout the engine tho. That aside all that would have to be done in any case is handle calling `_toggle` and/or `_pressed` for the shortcut which seems trivial. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Yes, its massively trivial as far as issues go, its just a matter of convenience in editor so I need not manage it, I'd just rather clean up my code and make it easier to see from the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It would require re-implementing everything extending from BaseButton, reconstructing all the Buttons as new assets isn't practical for such a minor issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/364",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/364/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/364/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/364/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/364",
    "id": 546711894,
    "node_id": "MDU6SXNzdWU1NDY3MTE4OTQ=",
    "number": 364,
    "title": "Add a `rotate_and_collide/slide` method to KinematicBody",
    "user": {
      "login": "ligazetom",
      "id": 11858829,
      "node_id": "MDQ6VXNlcjExODU4ODI5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11858829?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ligazetom",
      "html_url": "https://github.com/ligazetom",
      "followers_url": "https://api.github.com/users/ligazetom/followers",
      "following_url": "https://api.github.com/users/ligazetom/following{/other_user}",
      "gists_url": "https://api.github.com/users/ligazetom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ligazetom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ligazetom/subscriptions",
      "organizations_url": "https://api.github.com/users/ligazetom/orgs",
      "repos_url": "https://api.github.com/users/ligazetom/repos",
      "events_url": "https://api.github.com/users/ligazetom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ligazetom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-08T08:23:30Z",
    "updated_at": "2020-09-28T21:57:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTop down project with non-symmetric shape for kinematic body. (Just some fun with physics so far)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHaving rectangle as collision shape. If I stay in one place and want to only rotate the pawn, I need to check for collisions as well, not only when moving.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt will help many more people, as they won't have to implement the method (which should already exist) on their own.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/11858829/71961869-99c9a180-31f8-11ea-82cc-a6f0e3c16657.png)\r\n\r\n\r\nWhen would I rotate in place setting transforms, I should collide with the red block.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIn physics_body.cpp, where KinematicBody is implemented I see that every method is basically using test_move() and only after that setting the positions. So why not do the same for rotations? test_move() or rather PhysicsServer::get_singleton()->body_test_motion() takes Transform as argument so it would not be problem.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, I mean it might be a few lines, but as it would be used very often I believe it should be implemented as those lines are not \"that\" easy to implement right off the bat.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is basic feature. Definitely should be in core.\r\n\r\n\r\n\r\nI can implement it myself no problem. The thing is I have no idea how to create bindings for it. So if someone would help me with those (help, not make them without me as I would like to be able to do it in the future myself) then it would be really quick.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/364/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/361",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/361/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/361/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/361/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/361",
    "id": 546449968,
    "node_id": "MDU6SXNzdWU1NDY0NDk5Njg=",
    "number": 361,
    "title": "Automate delegation of exported properties to internal nodes to improve GDScript abstractions",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-07T18:55:27Z",
    "updated_at": "2020-08-29T13:42:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA quiz game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPlayers move over an Area to \"select\" a quiz question's answer.\r\n\r\nThe Area has its own scene with several exported properties on the root node, including...\r\n\r\n- Which answer the area represents (an enum with A, B, C, D).\r\n- The atlas texture to use for the answer (an alphabet).\r\n- The region into the texture to select the character's individual sprite.\r\n- A highlight texture to use when an answer is selected.\r\n- A relative offset position for the Panel that displays the answer's text (unprojected from the area's 3D coordinate).\r\n\r\nNow, I could just instantiate multiples of this scene and then use Editable Children to override the various values, but I don't want to have to do that since I only really need very specific overrides to be delegated to child nodes in the scene. I may also eventually want to convert these scenes into standalone scripts, so the user might not even be able to use Editable Children in the future.\r\n\r\nAs of right now, I have to do stuff like this:\r\n\r\n    onready var _sprite := $MySprite as Sprite3D\r\n    export onready var sprite_region := Rect2() setget set_sprite_region\r\n    func set_sprite_region(p_value: Rect2) -> void:\r\n        _sprite.region_rect = p_value\r\n\r\nHowever, as you can tell, this involves *a lot* of boilerplate code when all I really want to do is export values that my node reassigns, by default, to child nodes. It would be much cleaner if I could directly define a delegation relationship for the property and avoid all the boilerplate, especially since I can easily have anywhere from 3-12 of these properties (as I've encountered this sort of problem before).\r\n\r\nMaybe do something like this instead:\r\n\r\n    export onready var sprite_region := Rect2() in @\"MySprite:region_rect\"\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nHelps clean up abstractions in GDScript and makes the code flow better. Automates boilerplate code thereby removing clutter derived from the abstractions. Also, since the NodePaths are outlined at parse-time, you can get editor warnings on nodes that have a script whose stated node dependencies don't exist.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nA code usage example is in the description.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nYou would need to update the gdscript parser to support the new syntax. It would need to store information about which property gets redirected to which node and how it is being exported / what type it is, etc. all inside of the GDScript object. It would also need to, in the editor context, fetch the active scene and confirm that the nodes in question exist, displaying warnings in the editor if they don't. Then you would update the GDScriptInstance's `set`/`get`/`get_property_list` methods to check these particular things while iterating over properties, that way it can properly fetch the dependent node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, it can be worked around with a few lines of script, but the proposal itself is about the frequency of needing to do things like this when abstracting multiple nodes under a single node and how cluttered it makes the code. The workaround is what we already have and it is cumbersome.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt involves the GDScript parser and therefore cannot be implemented as an addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/361/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/358",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/358/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/358/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/358/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/358",
    "id": 545401850,
    "node_id": "MDU6SXNzdWU1NDU0MDE4NTA=",
    "number": 358,
    "title": "Improve working with gui (grab_focus, visibility)",
    "user": {
      "login": "nezvers",
      "id": 26794315,
      "node_id": "MDQ6VXNlcjI2Nzk0MzE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/26794315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nezvers",
      "html_url": "https://github.com/nezvers",
      "followers_url": "https://api.github.com/users/nezvers/followers",
      "following_url": "https://api.github.com/users/nezvers/following{/other_user}",
      "gists_url": "https://api.github.com/users/nezvers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nezvers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nezvers/subscriptions",
      "organizations_url": "https://api.github.com/users/nezvers/orgs",
      "repos_url": "https://api.github.com/users/nezvers/repos",
      "events_url": "https://api.github.com/users/nezvers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nezvers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-05T10:51:55Z",
    "updated_at": "2020-01-05T11:39:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on GameTemplate (everything that's not related to game-specific logic) - https://github.com/nezvers/Godot-GameTemplate\r\nI want to have good support for not-mouse use cases for GUI.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGetting an initial focus on buttons is harder than it should be. It needs to be clicked with the mouse on one of the buttons to get initial focus and after that actions \"ui_*direction*\" works flawlessly until those buttons get hidden by a parent or has overlayed by another layer of GUI.\r\nAll buttons that are hidden by a parent answers visible as true.\r\nAll buttons that are hidden by a parent can grab_focus() and answers has_focus() as true.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n1. Receiving visible as false if the button is hidden by a parent would help iterate through the buttons, that are saved in the database or in my case in group \"FocusGroup\".\r\n2. Buttons shouldn't be able to grab_focus if they are hidden by a parent - would help to find a button that can grab_focus(). Or Control could have method can_grab_focus()->bool: returning true if they could be triggered by mouse (they are truly visible and not overlayed by another GUI that filters mouse).\r\n3. The engine itself could initiate focus when \"ui_*directions*\" actions are used but no button has_focus(). Making GUI workflow truly amazing.\r\n\r\n**Show a mock-up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA game starts with the Main menu consisting of buttons.\r\nNo buttons are in focus.\r\nThe player uses one of \"ui_direction\" actions.\r\nOne of the buttons becomes focused. A suggestion is if \"ui_down\" focuses top button, \"ui_up\" focuses the bottom button.\r\nThe player chooses the Options menu.\r\nThe Options menu overlays the main menu, making last button loose focus.\r\nAgain the player uses \"ui_direction\".\r\nThe corresponding button becomes in focus.\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nif Input.is_action_just_pressed(\"ui_direction\") && Control.get_focus_owner() == null:\r\n    Focus on a button that's on the screen and is able to grab_focus (visible and can focus on mouse click)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAt the moment I have to have all important buttons from each page in \"FocusGroup\" + group of it's own page.\r\nUse singleton for focusing logic.\r\nGet all buttons in \"FocusGroup\".\r\nParse buttons in \"FocusGroup\" to get their page group and create a dictionary with their pages as key.\r\nImplement logic that tracks opened pages.\r\nIn singleton track _unhandled_input() actions that are \"ui_direction\". (I'd appreciate way to do that with fever lines, now I do if for each action).\r\nThen trigger function for finding a button from the needed page and focus it.\r\nLike a miracle it triggers grab_focus() on the button every time but it doesn't happen when one of the buttons is already in focus.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a particular need for core functions to solidify GUI mechanics offered by the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/357",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/357/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/357/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/357/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/357",
    "id": 545346558,
    "node_id": "MDU6SXNzdWU1NDUzNDY1NTg=",
    "number": 357,
    "title": "Add option to offset keyframes in a track",
    "user": {
      "login": "SamMacedo",
      "id": 7089504,
      "node_id": "MDQ6VXNlcjcwODk1MDQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7089504?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamMacedo",
      "html_url": "https://github.com/SamMacedo",
      "followers_url": "https://api.github.com/users/SamMacedo/followers",
      "following_url": "https://api.github.com/users/SamMacedo/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamMacedo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamMacedo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamMacedo/subscriptions",
      "organizations_url": "https://api.github.com/users/SamMacedo/orgs",
      "repos_url": "https://api.github.com/users/SamMacedo/repos",
      "events_url": "https://api.github.com/users/SamMacedo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamMacedo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-04T23:46:31Z",
    "updated_at": "2020-01-17T20:46:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D contra/megaman style action platformer.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe godot engine animator is quite powerful already, but I think that fine tuning keyframes can be very time consuming, for example, lets say I create the following grass animation:\r\n\r\n> Example 1. Animation **without** offset\r\n![no-offset](https://user-images.githubusercontent.com/7089504/71772282-c9796080-2efd-11ea-99fa-a1b949ce421e.gif)\r\n\r\nAs you can see every sprite is moving at the same timing which leads to a kinda robotic-looking animation. \r\n\r\nIn other animation software such as Spine there is an option to **offset** keyframes, this basically allows you to drag all the keyframes and loop them over the animation's duration, for example in Spine we can do the following:\r\n\r\n![spine-offset](https://user-images.githubusercontent.com/7089504/71772464-1100ec00-2f00-11ea-84a7-ae5014f209d5.gif)\r\n\r\nAs you can see, in the above example when you drag any keyframe then all keyframes positions are adjusted (including curves), this allows to **offset** movement of individual sprites in an animation which can help to achieve better looking animations.\r\n\r\nIf we apply offset to each of the sprites in the grass example then we get something like this:\r\n\r\n> Example 2. Animation **with offset**\r\n![with-offset](https://user-images.githubusercontent.com/7089504/71772565-00ea0c00-2f02-11ea-803d-8ea000a879bc.gif)\r\n\r\nOffseting keyframes gives the illusion that each part of the animation is now moving at a different timing which makes it look more natural.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWhile the animation in example 2 can be perfectly created in Godot, it is extremely time consuming since we need to manually move all of the keyframes and adjust the curves. I think this enhancement will greatly help us to adjust animations much more quickly.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI think that having an **offset** toggle button similar as in spine would be good, once enabled dragging any keyframe should adjust all the keyframes in the track:\r\n\r\n![spine-offset](https://user-images.githubusercontent.com/7089504/71772464-1100ec00-2f00-11ea-84a7-ae5014f209d5.gif)\r\n\r\nAdditional to moving/looping keyframes, curves should also automatically be adjusted in order for the track to maintain the original keyframes transitions.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAnimations can be adjusted but as mentioned above it is very time consuming, specially with complex animations with a lot of keyframes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nFor me, the animator is one of godot's best features as it integrates very well with the engine so I think adding this usability enhancement can help animators achieve the results they want in much  less time.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/357/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/356",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/356/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/356/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/356/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/356",
    "id": 545337988,
    "node_id": "MDU6SXNzdWU1NDUzMzc5ODg=",
    "number": 356,
    "title": "AnimationPlayer Timeline: add unique zoom level for each animation, scroll to zoom, rightclick to reset",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-04T22:04:39Z",
    "updated_at": "2020-01-05T16:07:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAll my projects use AnimationPlayer node.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing the AnimationPlayer with animations of varying length is very tedious currently, because there is only one Timeline zoom saved for all animations. Going from one animation to another means to have to reset the zoom level again every time by left clicking and dragging the slider in the lower right corner.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAdding per-animation-zoom and other common intuitive means to zoom and adjust the zoom level would result in less time wasted on readjusting the editor again and again and more time on actual work on the project.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n- Each animation get's it's own zoom state that will be saved when adjusted. If an animation get's duplicated, the zoom state gets duplicated along with it. \r\n- Using the mouse scroll wheel while hovering above the timeline or the timeline slider would result in zooming in an out. This should work in addition to the existing timeline slider, not replacing it.\r\n- When doing so, the cursor would get a small magnifying glass additional symbol.\r\n- Right click anywhere on the Timeline or Timeline zoom slider to set the zoom level to show the complete Animation length.\r\n\r\n![scroll_zoom_timeline](https://user-images.githubusercontent.com/47016402/71772322-d4f27900-2f49-11ea-8e0c-0356e64c07fa.png)\r\n\r\nSelect between \"Master Zoom\" and \"Anim Zoom\" in a drop down menu next to the slider to change the slider's functionality:\r\n\r\n![scroll_zoom_timeline2](https://user-images.githubusercontent.com/47016402/71772730-5baa5480-2f50-11ea-90ab-99627e0bc16c.png)\r\n\r\n\r\nThis would complement the leftclick and drag in #179 once reimplemented, allowing fast and fluid navigation.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nUnfortunately not possible\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUsed often because it saves time, improves usability and reduces pointless clicking.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIncreases usability of existing feature and reduces pointless clicking.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/356/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/355",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/355/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/355/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/355/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/355",
    "id": 545319565,
    "node_id": "MDU6SXNzdWU1NDUzMTk1NjU=",
    "number": 355,
    "title": "New scene instance type : Background",
    "user": {
      "login": "Flarkk",
      "id": 49606622,
      "node_id": "MDQ6VXNlcjQ5NjA2NjIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/49606622?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flarkk",
      "html_url": "https://github.com/Flarkk",
      "followers_url": "https://api.github.com/users/Flarkk/followers",
      "following_url": "https://api.github.com/users/Flarkk/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flarkk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flarkk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flarkk/subscriptions",
      "organizations_url": "https://api.github.com/users/Flarkk/orgs",
      "repos_url": "https://api.github.com/users/Flarkk/repos",
      "events_url": "https://api.github.com/users/Flarkk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flarkk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-01-04T19:03:10Z",
    "updated_at": "2020-06-02T06:02:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nThis proposal is based on issue https://github.com/godotengine/godot/issues/1006 from https://github.com/Ace-Dragon\r\n\r\n**Describe the project you are working on:**\r\nA space exploration game within a very large universe\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to render both very far (and large) objects like planets and stars, and close objects (spaceship, terrain when exploring planets, ...). Today there are 2 limitations : \r\n- Because the scale of the whole scene is huge it cannot be rendered on a single viewport due to zbuffer accuracy. Instead, scene must be splitted into N « layers » rendered on separated viewports, each one being the background canevas of the another one\r\n- Because very far objects come in a very very high number (billion of stars ...), sometimes some of the layers can't be rendered each frame. Instead these layers must be bake-rendered onto a panoramic background map which is displayed as the « skybox » of the next layer\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe proposal consists in a new type of scene instance, whose could be used as the background of another scene, either in « canvas » mode or in « panoramic » mode (with color, brightness, reflection, ... and all HDR ingredients). In combination with cameras settings within this background scene, it would allow to switch between per-frame or manual re-rendering\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSimplistic proposal (but I'm sure much elegant solutions exist)\r\n```\r\n- Root of main scene\r\n     - Nodes ...\r\n     - ...\r\n     - Camera_main -> Background set to render target of Camera_bg\r\n- Root of background scene\r\n     - Nodes ...\r\n     - ...\r\n     - Camera_bg -> Set to a new type of render \"Panoramic background\" that would take 360° pictures of the scene\r\n```\r\nThis scheme could work with any number of \"nested\" background scenes\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nToo vast topic to dive in detail here\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs far as I know it's impossible because there is no simple way to render \"panoramic backgrounds\" and use them as background of camera.\r\nThe simplest workaround I can imagine would be to render the 6 faces of a cubemap, build a cubemap texture, convert it to an equirectangular projection (via a shader ?) and then use it as a background sky.\r\nThis is not doable in a few lines of script, and the performance would probably be really poor ...\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis should be core because of the large number of possible use cases, including :\r\n- Using it as a true 3D perspective background in a 2D game\r\n- Using it as a skybox with animation and dynamic properties\r\n- Using it as a 3D background with 3D games\r\n- Dynamic muiti-layered background effects using more than one background scene\r\n\r\nAdditionally this is a very common feature in commercial game engines (camera layers)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/355/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/352",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/352/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/352/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/352/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/352",
    "id": 545241839,
    "node_id": "MDU6SXNzdWU1NDUyNDE4Mzk=",
    "number": 352,
    "title": "AutoTile: Navigate tiles without auto-selecting the selection tool",
    "user": {
      "login": "avahe-kellenberger",
      "id": 34498340,
      "node_id": "MDQ6VXNlcjM0NDk4MzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/34498340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avahe-kellenberger",
      "html_url": "https://github.com/avahe-kellenberger",
      "followers_url": "https://api.github.com/users/avahe-kellenberger/followers",
      "following_url": "https://api.github.com/users/avahe-kellenberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/avahe-kellenberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avahe-kellenberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avahe-kellenberger/subscriptions",
      "organizations_url": "https://api.github.com/users/avahe-kellenberger/orgs",
      "repos_url": "https://api.github.com/users/avahe-kellenberger/repos",
      "events_url": "https://api.github.com/users/avahe-kellenberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avahe-kellenberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-04T05:01:33Z",
    "updated_at": "2020-05-06T12:28:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** 2D platformer with tiles for collision.\r\n\r\n**Describe the problem or limitation you are having in your project:** Creating collision boxes for an auto-tile TileMap is very cumbersome. Click the tile, click the shape, click the tile again, click the next tile, repeat.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**  By not automatically selecting the selection tool after the collision shape has been created, creating auto-tile TileMaps will be much faster.\r\nWe can achieve this by having `left click` select tiles, and `right click` to apply the collision shape.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n1. Select collision shape in the toolbar\r\n2. Click a tile with `left click` to select it\r\n3. Draw/apply the collision shape with `right click`\r\n4. Select your next tile again with `left click` and repeat\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** Remove the selection tool from the toolbar and have right click apply the shape(s).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I don't believe so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Anyone using auto-tile TileMaps would benefit from it, and auto-tiling is in the core editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/352/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/351",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/351/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/351/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/351/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/351",
    "id": 545225485,
    "node_id": "MDU6SXNzdWU1NDUyMjU0ODU=",
    "number": 351,
    "title": "Add an option to place touch controls in black bars when scaled / drawn an overlay scene on top of scaled game view",
    "user": {
      "login": "Bleuzen",
      "id": 12885163,
      "node_id": "MDQ6VXNlcjEyODg1MTYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12885163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bleuzen",
      "html_url": "https://github.com/Bleuzen",
      "followers_url": "https://api.github.com/users/Bleuzen/followers",
      "following_url": "https://api.github.com/users/Bleuzen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bleuzen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bleuzen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bleuzen/subscriptions",
      "organizations_url": "https://api.github.com/users/Bleuzen/orgs",
      "repos_url": "https://api.github.com/users/Bleuzen/repos",
      "events_url": "https://api.github.com/users/Bleuzen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bleuzen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-04T01:38:20Z",
    "updated_at": "2020-05-19T08:05:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D jump n run\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to place touch controls in the black bars which appear by scaling.\r\n\r\nLong version:\r\nMy game is in fixed 16:9 aspect ratio and scaled in 2D keep mode, so if the aspect ratio of the screen or window is something like 21:9, there apper black bars at the left and right.\r\nNow I want to place touch buttons in my game, but these should be on the left/right of the screen, but not limited to the games scaled area.\r\n\r\nLimitation:\r\nI can not place touch controls in the black bars when the game is scaled. Outside of the aspect ratio of the game, no elements are displayed, there are just the black bars.\r\nThis makes it really uncomfortable to play on current 'widescreen' mobile devices (with crazy aspect ratios like 21:9).\r\n\r\nSo my game is in 16:9, but I want to place the touchscreen buttons in the black bars, to make it more comfortable to play on devices with high aspect ratio.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would definitely improve the users experience and make things much easier.\r\n\r\n(Currently I have to search for a hacky workaround to get this working, still haven't found anything good, which is frustrating.)\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nExample image, so you can see how the games screen looks. I drew in where I want to place the touch controls.\r\nhttps://imgur.com/a/UEQCyTb\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWell, I don't know much about Godots code currently. Sorry, not much of an idea.\r\n\r\nAs of how it could be implemented, here is my first idea (but maybe someone comes up with a better one):\r\n\r\nIn project settings, add an option to select a scene as an overlay. The selected scene should then be drawn on top of everything else, also the black bars when scaled.\r\nWith this it would be possible to place the touch controls on the overlay scene.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI really tried. Haven't got a working solution yet. Don't know if it is even possible currently.\r\n\r\nI tried it with my own scaled up Viewport, but this makes other problems. (not sure if this is a godot bug? I will possibly open another issue for this)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think this is something that an add-on could do(?)\r\n\r\nAlso, many games could use this. It just makes sense with these mobile phones getting even crazier screen ratios these days.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/349",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/349/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/349/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/349/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/349",
    "id": 545127273,
    "node_id": "MDU6SXNzdWU1NDUxMjcyNzM=",
    "number": 349,
    "title": "Add methods to access the parent of the tree and add a child immediatelly",
    "user": {
      "login": "Mautar55",
      "id": 16104645,
      "node_id": "MDQ6VXNlcjE2MTA0NjQ1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16104645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mautar55",
      "html_url": "https://github.com/Mautar55",
      "followers_url": "https://api.github.com/users/Mautar55/followers",
      "following_url": "https://api.github.com/users/Mautar55/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mautar55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mautar55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mautar55/subscriptions",
      "organizations_url": "https://api.github.com/users/Mautar55/orgs",
      "repos_url": "https://api.github.com/users/Mautar55/repos",
      "events_url": "https://api.github.com/users/Mautar55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mautar55/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-03T19:26:20Z",
    "updated_at": "2020-01-03T23:29:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A bullet hell filled with objects beign create and destroyed with controlled transformations.\r\n\r\n**Describe the problem or limitation you are having in your project:** On every project i work on, i instantiate some elements directly at the root of the scene as children nodes, this is a standard feature of almost every game. The problem comes (and came) when i had to teach how to use nodes to reach the root and add children to them. Many find weird the node tree at the beggining and feel odd to need to reach the parent and transform it to the corresponding position.\r\n\r\nvar instance\r\ninstance = preloaded_resource.instance()\r\ninstancia.transform = transform\r\nget_tree().get_root().add_child(instance)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nNew functions for instancian, adding and tranforming will make the code cleaner and easy to understand. Specially for newcomers.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![child_to_root](https://user-images.githubusercontent.com/16104645/71743845-4ea03f00-2e44-11ea-9478-b03d132c0946.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI propose add 4 new standard functions to keep the code cleaner and understandable:\r\n\r\n```\r\nfunc child_to_root(instance):\r\n    get_tree().get_root().add_child(instance)\r\n\r\nfunc child_local_to_root(instance):\r\n    instance.transform = get_global_transform()\r\n    get_tree().get_root().add_child(instance)\r\n\r\nfunc instance_to_root(resource):\r\n    get_tree().get_root().add_child(preloaded_resource.instance(resouce))\r\n\r\nfunc instance_local_to_root(resource):\r\n    var instance = resource.instance()\r\n    instance.transform = get_global_transform()\r\n    get_tree().get_root().add_child(instance)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes it can, but is used VERY often. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt has use cases to most of the projects.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/349/reactions",
      "total_count": 4,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/348",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/348/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/348/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/348/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/348",
    "id": 545028499,
    "node_id": "MDU6SXNzdWU1NDUwMjg0OTk=",
    "number": 348,
    "title": "Improve Default 3D Lighting & World Environment",
    "user": {
      "login": "tinmanjuggernaut",
      "id": 632766,
      "node_id": "MDQ6VXNlcjYzMjc2Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/632766?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinmanjuggernaut",
      "html_url": "https://github.com/tinmanjuggernaut",
      "followers_url": "https://api.github.com/users/tinmanjuggernaut/followers",
      "following_url": "https://api.github.com/users/tinmanjuggernaut/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinmanjuggernaut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinmanjuggernaut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinmanjuggernaut/subscriptions",
      "organizations_url": "https://api.github.com/users/tinmanjuggernaut/orgs",
      "repos_url": "https://api.github.com/users/tinmanjuggernaut/repos",
      "events_url": "https://api.github.com/users/tinmanjuggernaut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinmanjuggernaut/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 45,
    "created_at": "2020-01-03T15:02:52Z",
    "updated_at": "2020-07-05T22:14:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "# Issue Tracker\r\nThis section summarizes and tracks progress on this proposal. Detail follows.\r\n\r\n**Merged:**\r\nn/a\r\n\r\n**Issue/PR Created:**\r\n- [X] Tonemap/Filmic, White: 6. [PR 34798](https://github.com/godotengine/godot/pull/34798)\r\n- [X] ProceduralSky Sun - Combine with a directional light or calculate shadows. [PR 37179](https://github.com/godotengine/godot/pull/37179)\r\n\r\n**Discussed Topics:**\r\n- [ ] New 3D Scene Button - Add Light/World/Camera/Cube.\r\n    [Per Calinou/reduz](https://github.com/godotengine/godot-proposals/issues/348#issuecomment-570797689): we could have a default DirectionalLight in Environment... \r\n   reduz@IRC chat: there will be an editor setting that will enable/disable default DL\r\n- [ ] Default Environment Settings: \r\n    * DirectionalLight \r\n            Color: White, Energy: 2, Shadow Enabled. Shadow Color: value 60\r\n    * Ambient Light \r\n             Color value 50, Energy: 3, Sky Contrib: 0.3\r\n    * ProceduralSky \r\n    Sky Color: #36508d, Horizon: #8bafcf, Curve: 0.13\r\n    Sun: Latitude: 50, Angle max 30 Energy 30.\r\n    Ground: both colors = Sky Horizon color\r\n\r\n**Minor/No Discussion:**\r\n- [ ] ProceduralSky Sun - Decouple power output from visual size.\r\n- [ ] ProceduralSky Sun - Increase energy scale 20x (or equal to DirectionalLight)\r\n- [ ] \"New scene\" templates for Blank Scene or scene w/ included default items (probably moot)\r\n- [ ] PanoramaSky - Embed a directional light along with the hottest point on the HDR. (nice to have)\r\n- [ ] PanoramaSky - Embed a shadow projection plane. (nice to have)\r\n\r\n\r\n\r\n## The Issue\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe default lighting environment is extremely unattractive. Unaware devs use the defaults, which detracts from their demos, as well as makes Godot look bad. For comparison, UE4 has a great lighting setup by default - no configuration is necessary. \r\n\r\nThese objects are white, but appear blue:\r\n![white-cube](https://user-images.githubusercontent.com/632766/71598788-46fe4300-2b83-11ea-9e2f-925b7b01526e.jpg)\r\n\r\nMaterials look terrible by default:\r\n![materials](https://user-images.githubusercontent.com/632766/71598807-5a111300-2b83-11ea-85dc-be0f6d872e2b.jpg)\r\n\r\nHighlights are blown out by default, which also makes HDRIs unattractive:\r\n![tone-mapper](https://user-images.githubusercontent.com/632766/71598829-6d23e300-2b83-11ea-9eb2-1663c000aa08.jpg)\r\n\r\n\r\n## **Is this a real problem for people?**\r\nLook on facebook, twitter, youtube, or reddit for 3D demos from devs. Many of them use the default lighting and their demos look bad.\r\n\r\nExamples. All of these have a heavy blue cast and muted colors, even if they've added a light:\r\nhttps://twitter.com/dalton8000/status/1208794768337190912\r\nhttps://twitter.com/m4gr3d/status/1210249791017570304\r\nhttps://twitter.com/nightblade99/status/1209324080907857925\r\nhttps://twitter.com/skooterkurt/status/1210625650807263233\r\nhttps://www.facebook.com/groups/godotengine/permalink/1764599440343309/\r\nhttps://www.facebook.com/buzzmandt/posts/10216181547837595\r\nhttps://www.reddit.com/r/godot/comments/eiv38x/getting_better_at_working_with_vehiclebodykinda/\r\nhttps://www.reddit.com/r/godot/comments/eik633/20_days_with_godot_so_much_fun/\r\n\r\n\r\nFurther, this twitter thread was very popular and seemed to hit a nerve with people:\r\nhttps://twitter.com/TokisanGames/status/1210610419556999168\r\n\"it's not easy to get lighting right in Godot\"\r\n\"I'm really looking forward to that, the unnatural blue hue and lost contrast has been a big problem in a project I'm working on!\"\r\n\"I agree. The default environment make anything bluish.\"\r\n\r\n**Referenced tickets showing its a continuing issue:**\r\n#30 \r\nhttps://github.com/godotengine/godot/issues/18226\r\nhttps://github.com/godotengine/godot/pull/20786 (It was really bad before this, now it is only bad)\r\nhttps://github.com/godotengine/godot/issues/10451\r\n\r\nUsers should not have to hunt to find an obscure Sky Contribution setting just to remove the blue cast. Or even know they need a light before their materials will look good. The first brand new scene should just look good by default.\r\n\r\n\r\n## Other Template Questions\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nAnyone can work around the issue now. However, most don't because the knowledge of how to do it takes months of using Godot and trial and error to learn how.\r\n\r\n**Describe the project you are working on:**\r\nVoxel Tools demos, YT Tutorials, prototypes w/ voxels. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used by everyone. A script is insufficient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nProceduralSky and WorldEnvironment are in core.\r\n\r\n\r\n\r\n## My Proposal\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nI made a [30 minute tutorial video](https://youtu.be/8kwnCxK8Vc8) showing devs how to work around all the limitations and setup a good scene. It also illustrates the issues highlighted in this proposal. TLDR - here is where the issues are demonstrated:\r\n* [HDRI Blowout / Tonemap 4:29](https://youtu.be/8kwnCxK8Vc8?t=269)\r\n* [Procedural Sky Issues 16:27](https://youtu.be/8kwnCxK8Vc8?t=987) \r\n\r\nIt would be ideal if the default environment was just set up as I show in the video. Some suggestions require code changes. \r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nHere is my proposal, but these points and values are open to discussion on how best to achieve an attractive default lighting setup. I've created the settings based on a decently calibrated monitor, and comparing and tuning settings with white materials, grass/rock materials in my own prototypes, and all the materials in the 3D materials demo. This took me about 5 weeks of testing and retesting. I had to make my video 3 times as I tweaked my settings.\r\n\r\nOnce there is a consensus as to the best way forward, I can create individual issues if desired.\r\n\r\n\r\n**Tonemap**\r\n~~* Mode: Filmic (like Blender; UE4 uses ACES, but I think it's too contrasty for a default). I can't think of any reason why we'd leave this at Linear.~~ PR\r\n~~* White: 6 (at least 4, up to 16. 4-8 allows the very center of the sun to blow out, giving it the effect of a ball with a coronoa. The ball is also visible in reflections. See the white plastic in material demo.)~~ PR\r\n\r\n**Ambient Light**\r\n* Color: value 50 (128,128,128)\r\n* Energy: 3\r\n* Sky contribution: 0.3 \r\n\r\nAt 1, procedural sky is unnaturally blue. It appears far stronger than it is with HDRIs - maybe reduce the ProcSky scale to 1/3rd. Some HDRIs look fine at 1. So I'd either default the settings for both at 3/0.3, or reduce the internal ProcSky Sky Contrib scale down to 33-50% of what it is now, and boost energy x3, then you could leave both HDRI Sky Contrib and ProcSky Sky Contrib at 1 and 1.\r\n\r\n**Procedural Sky**\r\n* Sky\r\n    * Color: #36508d \r\n    * Horizon: #8bafcf\r\n    * Curve: 0.13\r\n\r\nColors were chosen under filmic, based on my reference photos below. I recently took these here in the Philippines. The air has very little pollution and it's an equatorial sky, so perhaps it's the ideal reference sky. The deepest part of the sky has a hue of 219-222.\r\n\r\n![reference-sky-philippines](https://user-images.githubusercontent.com/632766/71616066-52875380-2bef-11ea-8d85-5eca462fe2eb.jpg)\r\n![reference-sky-boat](https://user-images.githubusercontent.com/632766/71625350-4f598b00-2c22-11ea-8659-06fc374fa9d5.jpg)\r\n![reference-sky-clouds](https://user-images.githubusercontent.com/632766/71625352-4ff22180-2c22-11ea-9fbc-da364b5e389f.jpg)\r\n\r\n\r\n* Ground\r\n    * Do we even need a ground? Won't every dev put in their own plane/level/landscape? UE4 has no ground, just sky underneath. I recommend that it is removed entirely, or it's set to the sky horizon color by default to hide it.\r\n    * ~~Decouple it from shadows and shaded faces on objects. Energy/color of the ground should not affect the lighting on objects!~~ - Edit: apparently the sky works like an HDR, wholly illuminating the scene, so this isn't a problem anymore.\r\n\r\n* Sun\r\n    * Latitude: 50 (just so it's not so late afternoon as 35)\r\n    * The size of the sun as it currently appears with Angle max: 30, Energy: 30.\r\n    * Decouple angle/curve/energy from size. Let us control image and power independently.\r\n    * Increase energy scale 10x, minimum. Maybe 12-20x so we have some headroom. The sun needs an energy level of at least 640 just to start being in the range of properly exposing a scene (it's about the equivalent of a directional light at around 1.5-2), but then the size takes up half the sky. \r\n    * ~~Nice to have: Embed a directional light in with the sun, matching the angle so we can get shadows (but only one energy setting). Or just automatically calculate shadows directly from the procedural sun. There's no reason to have the procedural sun emit light unless it can also cast a shadow. If it won't, then for all games that need shadows, it only makes sense to disable the sun energy effect, use a directional light, then manually align it with the sun. Why not just embed all of that together?~~ PR\r\n\r\n\r\n**PanoramaSky (HDRI/Shader)**\r\n\r\nNice to have: \r\n\r\n* Detect the hottest point of the HDR and embed a directional light there, just like with the ProceduralSky. Or we can set its position manually. \r\n* Provide a ground shadow projection plane. UE4 seems to do some [trickery](https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/HDRIBackdrop/index.html) with the HDRI, adding a virtual ground plane to catch the shadow. But it's not clear if they require a light to do this. I haven't experimented with HDRIs in UE4 in a while, but I seem to recall that a lot of it is automagical.\r\n\t\r\n**Directional Light**\r\n* Energy: 2\r\n* Shadow enabled\r\n* Shadow Color: value 60 (153,153,153)\r\n\r\n**New Scenes**\r\n\r\n![image](https://user-images.githubusercontent.com/632766/71625802-c5f78800-2c24-11ea-8f52-ff68d36f885e.png)\r\n\r\n* I recommend that the new 3D Scene button only (the one visible when starting a new project, \"Create Root Node\") sets up a white directional light with shadow enabled, and maybe a cube and a camera pointing at it (like in blender), and a WorldEnvironment node. All other new scenes are created empty. \r\n* Also maybe we use scene templates, like with new scripts where you can specify a script with comments, or blank. Maybe 'give me a scene with stuff in it', or a blank scene.\r\n\r\n\r\n## Sample Project & Summary\r\n\r\n**Project file**\r\nHere is a sample project. Start by downloading the [3d materials demo](https://github.com/godotengine/godot-demo-projects/tree/master/3d/material_testers). Then drop [these files](https://github.com/godotengine/godot-proposals/files/4018858/cory_defaults.zip) inside. Load `cory_scene.tscn` which should load `cory_procsky_env.tres`, and you can view the white cube with all the other materials. \r\n\r\nYou can also switch to `cory_hdr_env.tres`. But note, that all of the HDRIs included in the demo are 50% the brightness they should be. So adjust Tonemap/Exposure to 2. People should use properly exposed HDRIs, so this setting should default to 1.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/348/reactions",
      "total_count": 295,
      "+1": 173,
      "-1": 0,
      "laugh": 4,
      "hooray": 45,
      "confused": 0,
      "heart": 45,
      "rocket": 18,
      "eyes": 10
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/346",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/346/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/346/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/346/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/346",
    "id": 544402770,
    "node_id": "MDU6SXNzdWU1NDQ0MDI3NzA=",
    "number": 346,
    "title": "Use fuzzy selection in more places",
    "user": {
      "login": "rcorre",
      "id": 2496231,
      "node_id": "MDQ6VXNlcjI0OTYyMzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2496231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcorre",
      "html_url": "https://github.com/rcorre",
      "followers_url": "https://api.github.com/users/rcorre/followers",
      "following_url": "https://api.github.com/users/rcorre/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcorre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcorre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcorre/subscriptions",
      "organizations_url": "https://api.github.com/users/rcorre/orgs",
      "repos_url": "https://api.github.com/users/rcorre/repos",
      "events_url": "https://api.github.com/users/rcorre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcorre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-01T21:54:49Z",
    "updated_at": "2020-01-02T02:34:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nApplies to any project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAssigning a `Resource` to an `export`ed field in the editor is tedious.\r\nFor example, suppose I want to assign the sound `shield_break.wav` to an `AudioStreamPlayer`. I have two options:\r\n\r\n1. Click `stream > Load`, and click through multiple folders until I find the sound I need.\r\n2. Type a string like `shield_b` in the `FileSystem` tab, then click-and-drag that file into to `stream` field.\r\n\r\nI propose that clicking `Load` on any `Resource` field should show a fuzzy selector that shows only files of the appropriate type (e.g. `wav/ogg` for an `AudioStream`). There are 3 examples of such selectors in the editor already:\r\n\r\n1. The FileSystem tab:\r\n\r\n![1577914739](https://user-images.githubusercontent.com/2496231/71646407-2be02000-2cb6-11ea-960a-2c47575e9f46.png)\r\n\r\n2. The `Call Method` selector for an `AnimationPlayer`:\r\n\r\n![1577915203](https://user-images.githubusercontent.com/2496231/71646411-2be02000-2cb6-11ea-912e-503b5f586b36.png)\r\n\r\n3. The \"Quick Open Scene\" selector:\r\n\r\n![1577915171](https://user-images.githubusercontent.com/2496231/71646410-2be02000-2cb6-11ea-818d-2fd39da4e0ba.png)\r\n\r\nI think the 3rd has the best behavior (it can filter by a non-continuous string, e.g. \"lats\" will select \"lab.tscn\"), however the first might be the easiest to leverage as it is already designed for the filesystem.\r\n\r\n(Maybe a future proposal is to use the same matching logic across all of these)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt will make selecting resources easier as it requires less clicks than navigating through folders, and avoids the click-and-drag aspect of using the FileSystem tab.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n1. Click on `[empty]` and click `load`:\r\n\r\n![1577915642](https://user-images.githubusercontent.com/2496231/71646474-2e8f4500-2cb7-11ea-96e0-15575f25b7e7.png)\r\n\r\n2. See one of the dialogs shown above, but filtered to files of the appropriate type\r\n3. Type into the search box, files are fuzzy-filtered\r\n4. Press `Enter` to select the file you want\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nWhen `load` is clicked, spawn one of the existing fuzzy selection dialogs populated with files of the correct type, then assign the result to the selected field.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt will be used often, and I don't see an easy way to script it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe it will provide a superior user experience for everyone.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/346/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/345",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/345/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/345/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/345/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/345",
    "id": 544397996,
    "node_id": "MDU6SXNzdWU1NDQzOTc5OTY=",
    "number": 345,
    "title": "AnimationPlayer: show values in the Inspector also when selecting different key types",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-01T20:56:29Z",
    "updated_at": "2020-01-21T20:02:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Projects with lots of animation and keys of similar as well as different types.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen multi-selecting more than one key, the idea is to save effort by doing an operation once for all keys. Unlike 3.0.6, in 3.1, multi-selecting keys of the _same kind_ to edit their value is not possible. Thanks to [this PR](https://github.com/godotengine/godot/pull/30778) it's back in 3.2.\r\nIf however in 3.2. beta4 there is even just one key among the selected ones that is not of the same type, no values other than the timestamp position are made available in the inspector. \r\n![multi_select_keys](https://user-images.githubusercontent.com/47016402/71645793-df103f80-2cdd-11ea-8970-b109dd8f5e7d.gif)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf the values would show up in the Inspector, we could edit all values of keys of equal type simultaneously and would not have to sift through the masses of blue points find the ones that are of the same type, edit the values, and start the whole process again. It would be a tremendous time save and usability improvement.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![all_selected_keys](https://user-images.githubusercontent.com/47016402/71646041-572c3480-2ce1-11ea-94e6-82e12535e16b.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWish I could\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nDon't think it can.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a necessary usability improvement allowing efficient AnimationPlayer use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/345/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/344",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/344/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/344/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/344/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/344",
    "id": 543921858,
    "node_id": "MDU6SXNzdWU1NDM5MjE4NTg=",
    "number": 344,
    "title": "issues with overriding methods inherited from parent classes. ",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-30T15:40:06Z",
    "updated_at": "2020-01-04T00:51:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a puzzle game involving rotation which uses similar mechanics to rubiks cubes and combination locks.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn my levels I want several objects to wrap around the screen pacman style. I'd like to make a setter like this\r\n```gdscript\r\nfunc set_translation(value : Vector3):\r\n    value.x = fposmod(value.x, level_width)\r\n    translation = value\r\n```\r\n\r\nI'd also like to make to ensure my rotations don't go over TAU to prevent overflow so I want to make a setter to ensure it stays in that range. \r\n```gdscript\r\nfunc set_rotatation(value : Vector3):\r\n    value.y = fposmod(value.y, TAU)\r\n    rotation = value\r\n```\r\n\r\nbut it seems transform methods cannot currently be overriden. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe feature I want is the ability to override set_rotation and set_translation functions. Such that when I use translation = Vector3 or translation.x = value it can make the appropriate adjustments. It seems to me like there was always the intention that we should be able to do this but something got over looked and we can't. I don't know how pervasive this is but it seems this is not possible using spatial or node2D for transform methods, it could be a bigger problem than that however. There could be many more setters/getters from parent functions that are are not able to be overridden but should. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWe would just make getters and setters just like the parent classes and they would be overriden such that when you do rotation.y +=2.5 * TAU for example it would call the setter I set above. \r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know c++ well enough yet to tell exactly why this is a problem in the first place. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nFor every variable of the spatial class I want to have a setter for, I could make a second variable like psuedo_rotation. Then use a setter on that, then on physics_process() set rotation = psuedo_rotation. But then I don't get all the functionality the actual rotation has from the spatial class and it wouldn't be perfectly synced especially when it comes to changes triggered by input events. It should also be totally unnecessary to make an assignment every iteration, all the tools are there just not being used. Alternatively I could do the setter manually every time I set the transform information but that is extremely tedious, unreadable, I might forget an instance or implement it differently on accident. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits already there I think someone must have accidentally not made it overridable. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/344/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/341",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/341/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/341/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/341/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/341",
    "id": 543218619,
    "node_id": "MDU6SXNzdWU1NDMyMTg2MTk=",
    "number": 341,
    "title": "Add functionality to export 3D models from an exported project",
    "user": {
      "login": "kone9",
      "id": 12847027,
      "node_id": "MDQ6VXNlcjEyODQ3MDI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12847027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kone9",
      "html_url": "https://github.com/kone9",
      "followers_url": "https://api.github.com/users/kone9/followers",
      "following_url": "https://api.github.com/users/kone9/following{/other_user}",
      "gists_url": "https://api.github.com/users/kone9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kone9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kone9/subscriptions",
      "organizations_url": "https://api.github.com/users/kone9/orgs",
      "repos_url": "https://api.github.com/users/kone9/repos",
      "events_url": "https://api.github.com/users/kone9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kone9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-12-28T15:52:19Z",
    "updated_at": "2020-05-06T12:44:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn application where 3D models are chosen and then can be exported\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't find a way to export 3D models of a compiled project\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would help me to create an application completely with godot engine\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Captura de pantalla_2019-12-28_09-45-12](https://user-images.githubusercontent.com/12847027/71545974-8a349800-2970-11ea-924d-4d1acb6c74a9.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nyou choose a 3D model and then it is exported from the compiled project to be able to print it in 3D\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthey told me that if I connect it with a json it may be, but I have no idea how to implement it\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt could be a complement, the important thing is the functionality of being able to export 3D models once the project is compiled.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/340",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/340/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/340/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/340/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/340",
    "id": 543131306,
    "node_id": "MDU6SXNzdWU1NDMxMzEzMDY=",
    "number": 340,
    "title": "Add animation/keyframe support for Audio Bus / Audio Effects",
    "user": {
      "login": "sampengilly",
      "id": 1129772,
      "node_id": "MDQ6VXNlcjExMjk3NzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1129772?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sampengilly",
      "html_url": "https://github.com/sampengilly",
      "followers_url": "https://api.github.com/users/sampengilly/followers",
      "following_url": "https://api.github.com/users/sampengilly/following{/other_user}",
      "gists_url": "https://api.github.com/users/sampengilly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sampengilly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sampengilly/subscriptions",
      "organizations_url": "https://api.github.com/users/sampengilly/orgs",
      "repos_url": "https://api.github.com/users/sampengilly/repos",
      "events_url": "https://api.github.com/users/sampengilly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sampengilly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-28T11:43:11Z",
    "updated_at": "2020-01-28T08:41:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nEnvironmental Storytelling type game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAudio Bus / Audio Effect properties cannot be keyframed in the animation editor. Obvious workarounds exist such as making changes to those properties in code. However this approach is clunky if you're trying to tie audio element volumes or effect properties to other animated elements (such as transforms or shader property animations)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nBy treating audio bus volumes or audio effect properties as key-able values, a more coherent animation workflow can be achieved, combining spatial, visual, and aural elements on a single timeline. It feels a bit more consistent as well to allow all inspector properties to be keyframed in some way.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nThe \"key\" button as seen alongside other properties should be applied to audio effect properties and to audio bus volumes\r\n\r\n![image](https://user-images.githubusercontent.com/1129772/71542975-5762c200-29b9-11ea-8165-bccd94f025f8.png)\r\n![image](https://user-images.githubusercontent.com/1129772/71543026-c0e2d080-29b9-11ea-92fe-ed85a089e2f8.png)\r\n![image](https://user-images.githubusercontent.com/1129772/71543048-043d3f00-29ba-11ea-8dae-1f4317717c94.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI'm not yet knowledgeable on the internals of the Godot engine and I imagine that the reason this feature doesn't already exist is possibly due to audio properties not being treated in the same \"named\" (i.e. indexable path) fashion as other properties such as `.:material:shader_param/blur_amount`. I would imagine that if these properties were handled in such an indexable way, a simple UI fix would be all that is needed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs stated above, this can be worked around but leads to a disjointed and clunky workflow when animating things that contain both visual and aural elements/effects that change over time.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know that I'm qualified enough to state with certainty whether this particular feature could be implemented as a plugin or not. That being said, I feel as though the indexing of properties for animation purposes is something baked into the core of Godot and would certainly make sense to be implemented in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/340/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/338",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/338/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/338/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/338/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/338",
    "id": 543006742,
    "node_id": "MDU6SXNzdWU1NDMwMDY3NDI=",
    "number": 338,
    "title": "Allow ability to overwrite parent variables",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-12-27T22:20:03Z",
    "updated_at": "2020-01-17T11:52:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nArcanoid Clone for learning \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have a scene BrickParent that has behaviours for all my bricks in a game. I then want multiple inherited scenes of that scene to be different colour bricks. Each brick is worth different amount of points in the game \r\n\r\nIn my BrickParent scene I have var points = 0 I then want this var points to be different in each inherited scene. So In my inherited scene I created a inherited script that inherits from BrickParent.gd if I type var points = 50 U will get error Member 'points' already exists in parent class. I would like to be able to override this just how I can override some of the functions in parent class that already exist. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis will will make code easier to follow across different inherited scenes. And allow for faste rprototyping\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI can't help here I have no idea how to do it. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI would expect it to be used every time people create inherited scripts. Work around for now is to add all the variables we want to change in _ready() function it works but for example you can't override constants in that way. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's pretty much part of the way core ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/338/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/334",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/334/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/334/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/334/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/334",
    "id": 542184331,
    "node_id": "MDU6SXNzdWU1NDIxODQzMzE=",
    "number": 334,
    "title": "Adding distance/cost to the connection rather than in point AStar.",
    "user": {
      "login": "pegasusearl",
      "id": 23167087,
      "node_id": "MDQ6VXNlcjIzMTY3MDg3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/23167087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pegasusearl",
      "html_url": "https://github.com/pegasusearl",
      "followers_url": "https://api.github.com/users/pegasusearl/followers",
      "following_url": "https://api.github.com/users/pegasusearl/following{/other_user}",
      "gists_url": "https://api.github.com/users/pegasusearl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pegasusearl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pegasusearl/subscriptions",
      "organizations_url": "https://api.github.com/users/pegasusearl/orgs",
      "repos_url": "https://api.github.com/users/pegasusearl/repos",
      "events_url": "https://api.github.com/users/pegasusearl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pegasusearl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-24T17:44:59Z",
    "updated_at": "2020-03-09T22:58:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n## **Describe the project you are working on:**\r\nRestaurant simulator where staff and customer will need pathfinding to walk from door, kitchen, seat and table. The game is about **effective restaurant layout** so abit more accurate pathfinding will be useful.\r\n\r\n\r\n## **Describe the problem or limitation you are having in your project:**\r\nYou can't set `connection_cost` (from point to point) manually. A point can have multiple **connections** that will have different **distance** so we can't just use `weight_scale` for it. `weight_scale` is setting cost at the **point**, not in the **connection**. In current astar, it's impossible to set `connection_cost`.\r\n![astarcost](https://user-images.githubusercontent.com/23167087/71421286-7eb14a80-26ac-11ea-97bd-e92fa48a8ece.png)\r\nUsually I just ignore `weight_scale` or distance but for this project, I wish I could make better one.\r\n\r\n\r\n## **Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf we can manually set `connection_cost`. We won't need hacky workaround.\r\n![astarcostz](https://user-images.githubusercontent.com/23167087/71421322-b9b37e00-26ac-11ea-96bf-a1194e72e1a9.png)\r\n\r\n\r\n## **Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n### Current\r\n\r\nWe can set weight_scale, but we can't manually set distance between points. Distance determined by weight_scale.\r\n![without](https://user-images.githubusercontent.com/23167087/71421365-fda68300-26ac-11ea-9137-da3e213bf30a.png)\r\n\r\n### With customizable connection_cost\r\n\r\nIf we can manually set the distance between point, we can do this:\r\n![with](https://user-images.githubusercontent.com/23167087/71421379-09924500-26ad-11ea-8db6-ded090cc72dc.png)\r\nsee the distance.\r\n\r\nCircle with A B  C is points. and the arrow is the connections.\r\n\r\n\r\n## **Describe implementation detail for your proposal (in code), if possible:**\r\nUnfortunately, I don't know how to implement it in the engine. But this is how godot user can use it:\r\n```\r\nadd_point ( int id, Vector3 position, float weight_scale=1.0 ) # add point stay the same just incase some user actually used weight_scale,\r\nconnect_points ( int id, int to_id, bool bidirectional=true, <float/int> cost=1 ) # just adding cost\r\n\r\ntotal_costs = cost * weight_scale\r\n\r\n# OR (EDITED in march 10th, 2020)\r\ntotal_costs = cost * weight_scale_a *  weight_scale_b / 2\r\n# as weight_scale_a is from source point and weight_scale_b is from destination point.\r\n```\r\n\r\n\r\n## **If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. It can be workarounded but definitely not with just few lines of code.\r\nWhat I can think of is adding an \"inbetween node\" for connections that had extra distance. Then everytime we call `get_point_path()` we will need to check if there is \"inbetween node\" then remove them. Of course that also means we will have list of which one is regular point and which one is inbetween.\r\n\r\n\r\n\r\n## **Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTo my **subjective** opinion, I don't undrestand why we have `weight_scale` instead  of custom distance. Custom distance easily workaround weight_scale but weight_scale cannot fix different distances in the from or to the same points.\r\n`weight_scale` had far fewer usecase than custom distance. Example are the pictures I shown above, diagonal movement and point to point movement. (that point to point movement can be used for world_map pathfinding. World map is set of areas in which distance between area to area is different)\r\n\r\nThank you for reading this far. It's alot of text.\r\nI apologize for any unpleasant words. If there is any mistake/misunderstanding, I would like to hear it.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/334/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/333",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/333/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/333/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/333/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/333",
    "id": 541998267,
    "node_id": "MDU6SXNzdWU1NDE5OTgyNjc=",
    "number": 333,
    "title": "The addition of more separation shapes besides RayShape (and their relation to KinematicBody)",
    "user": {
      "login": "DenisBelmondo",
      "id": 8296741,
      "node_id": "MDQ6VXNlcjgyOTY3NDE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8296741?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DenisBelmondo",
      "html_url": "https://github.com/DenisBelmondo",
      "followers_url": "https://api.github.com/users/DenisBelmondo/followers",
      "following_url": "https://api.github.com/users/DenisBelmondo/following{/other_user}",
      "gists_url": "https://api.github.com/users/DenisBelmondo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DenisBelmondo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DenisBelmondo/subscriptions",
      "organizations_url": "https://api.github.com/users/DenisBelmondo/orgs",
      "repos_url": "https://api.github.com/users/DenisBelmondo/repos",
      "events_url": "https://api.github.com/users/DenisBelmondo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DenisBelmondo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-24T05:37:16Z",
    "updated_at": "2020-05-24T06:25:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "# Describe the project you are working on: #\r\n\r\nI am currently working on a first person 3D action game. The level geometry of which is full of slopes and stairs and all kinds of non-orthogonal bits. The player is required to move relatively fast and often comes across lips and cracks in the floor.\r\n\r\n# Describe the problem or limitation you are having in your project: #\r\n\r\n> I may have a complete misunderstanding how RayShape works. Correct me if I'm wrong, but to my knowledge, RayShapes' entire purpose is to \"separate\" a body from another one using a ray.\r\n- Me, further down this proposal\r\n\r\n### tl;dr: it's possible to get a CollisionShape + RayShape rig caught on the lip of a ledge so many RayShapes are needed across the bottom of the player scene. However, that gets messy really fast so I propose that there be a separator like RayShape but instead of using a simple ray, we should be able to use primitives (or meshes) that push the player out of the floor just like RayShape does. ###\r\n\r\n## The long winded version: ##\r\n\r\nKinematicBody suffices for most sloped walls, however, sloped floors have always been a problem for the node. In 3.1 (including 3.1.2), the node did not seem to implement the RayShape approach as shown [here](https://godotengine.org/article/godot-31-will-get-many-improvements-kinematicbodyl); it only worked this way in 2D, which means that the player always slowly slid down slopes even when stop_on_slope was true,<sup>1</sup> as well as walking much slower when traversing them.<sup>2</sup> As of recent, in the 3.2 branch, KinematicBody(3D) was given the ability to use the RayShape method to solve both of these problems. In other words, picture a lollipop. The lollipop's stick is a RayShape, and the lollipop's head is a BoxShape/SphereShape/CapsuleShape, etc. This exact scene is how I implemented the RayShape technique in the link above in 3D. In 3.2, it correctly stops the player from sliding down slopes, as well as making it so that they do not have a harder time walking up them. Also, as some kind of very welcomed side effect, they traverse most staircases seamlessly, which is a huge plus in my opinion as literally 0 code needed to be written for this behavior.\r\n\r\nHowever, there are a couple of issues when using this exact approach in 3D.\r\n\r\n## The ledge problem: ##\r\n\r\nThe first one being that this player is shaped like a lollipop. In 3D (and possibly 2D), it's entirely possible to get the head of the lollipop to hang off the edge of a platform, while its stick is dangling. Here is an illustration:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71379170-9a6f0080-2587-11ea-9566-2fde7dea61db.png)\r\n(I can verify that this exact thing can occur in 3D.)\r\n\r\nWhile it may be less likely for this to occur during normal play, it could still happen, possibly causing confusion to the player and visual oddities. Not only that, but when the StaticBody happens to have a slope like in the following illustration, the RayShape does not stop it from sliding since its not colliding along with the head in order to inform KinematicBody of the information it needs in order to stop slope sliding. In other words, RayShape cannot separate KinematicBody from the ground since there is no ground beneath RayShape, but there _is_ ground beneath the head. This is definitely desired behavior, but that will be touched on a little further down this proposal.\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71379581-0f8f0580-2589-11ea-8bb8-5e0916352eac.png)\r\n\r\nAnd if we were to move them a little bit to the right...\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71379679-672d7100-2589-11ea-85d2-91f7cd2c66da.png)\r\n\r\nThe RayShape is now able to properly do its job by separating the body from the floor<sup>3</sup>.\r\n\r\nOne could simply _mitigate_ this issue by changing the shape of the head to be a sphere or a capsule like so:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71387572-bb4c4b80-25b1-11ea-8290-7fb6c8fca18c.png)\r\n\r\nThis causes the head to still catch onto the ledge, but the sliding off is much more gradual. However, there is still a catch.\r\n\r\n## Addressing the ledge problem: ##\r\n\r\nI went with the most obvious solution. I gave the head of this ex-lollipop two sticks on either side of the head. The allegory no longer applies, so I'll call them legs. Again, the same technique was done in 3D (one RayShape for each corner of a BoxShape) This resulted in a setup like so:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71388073-07988b00-25b4-11ea-89e4-0a647993bd8c.png)\r\n\r\nThis worked for a while, though sometimes, a player may encounter a situation like this:\r\n\r\nIn 2D:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71425355-f35a9980-2658-11ea-9be2-6b3a77727f21.png)\r\n\r\nIn 3D:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71388342-2fd4b980-25b5-11ea-905e-4f4a8f25b611.png)\r\n\r\nNeedless to say, this particular collision rig seems to \"get confused\" at this point. When the player tries to move forwards and backwards when on the peak of this pyramid or the furthest corner a rectangular prism rotated at 30-45 degrees, jutting out of the ground, they seem to have trouble moving out of it for some reason. It's possible to unstick themselves, but there is still a very apparent catch and struggle to get out of a position like this.\r\n\r\nThankfully, the problem in this very particular instance can be solved by adding one more RayShape:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71389350-47ae3c80-25b9-11ea-8a3b-5c0d57573892.png)\r\n\r\nWhile extremely unlikely at this point, it would still be hypothetically possible to encounter a situation like so:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71389469-be4b3a00-25b9-11ea-8d92-c1b840b14a6b.png)\r\n\r\nAt this point, it would be a much more sane choice to _not_ use a BoxShape. I suppose capsules are the most popular player controller shapes for a reason.\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71389746-e5eed200-25ba-11ea-8d54-08130a4ac643.png)\r\n\r\nMuch better. In the extremely unlikely event that the point of collision is _exactly between any_ of these rays at any time, the smooth bottom of the capsule collider will simply let the player glide off of it, _almost seamlessly_ un-sticking itself.\r\n\r\n## However ##\r\n\r\nI can't help but to feel like there must be a more elegant way of handling \"separation\" the way this particular RayShape approach does. When does the density start and stop? How many is \"the right amount\" to put on? It must differ for every use case, but I've found the most paranoid, airtight amount is about 9.\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71390468-c1e0c000-25bd-11ea-8637-aac46e784f87.png)\r\n\r\n(That's one for every corner, one _in between_ every corner, and one dead center)\r\n\r\nIf only there could be a RayShape on the player's bottom everywhere. All the time.\r\n\r\nI may have a complete misunderstanding how RayShape works. Correct me if I'm wrong, but to my knowledge, RayShapes' (an apparently more accurate name for which would be \"SeparationRayShape\" <sup>4</sup>) entire purpose is to \"separate\" a body from another one using a ray. In most cases, that's probably the player or some other KinematicBody entity like an enemy.\r\n\r\nI am not 100% clear on how the implementation for RayShape works (will discuss under the proper header), but if all the separation ray does is check to see if the ray is colliding with something and then snapping the body out of the ground based on the information given by the ray, then hopefully it wouldn't be too hard to just do the very same but with a shape query.\r\n\r\n# Describe how this feature / enhancement will help you overcome this problem or limitation : #\r\n\r\nUsing a primitive instead of multiple rays, I believe, would provide a number of benefits. I'll knock the small fry off the list first AKA the more philosophical, convenience-oriented things.\r\n\r\n- For one, I think that it would completely eliminate cluttering the player scene with CollisionShape-RayShape nodes. It would be much easier to maintain everything, including collision and separation shapes.\r\n\r\n- It seems quite hacky to use this approach. It genuinely seems like a workaround achieve proper slope and stair traversal while preventing them from catching on a ledge. In my personal opinion, if RayShape already provides these two pieces of functionality crucial for any action game, it seems natural to recognize them and integrate them more elegantly using one solution with way less hypothetical fail cases.\r\n\r\nMore concrete things:\r\n\r\n- Although I haven't noticed very much of a cost, performance-wise, of using even 9 RayShapes, I can't help but to feel like casting a ray 9 separate times and attempting to push the body outwards that many times could have some sort of consequence. If a single shape query can completely supplant this \"legs\" solution, I'm sure it would save quite a few calculations. (Correct me if I'm wrong).\r\n\r\n- **With even the most pesky of geometry (the aforementioned pyramid or spike), while that may not actually occur very often in real level geometry in a real game, I personally believe ratifying and developing this feature will give KinematicBody an extremely considerate boost in robustness and power to walk on just about anything. It will render it extremely competitive with player controllers from other engines that come with the ability to walk up complex geometry like stairs out of the box without the use of a complex inverse kinematics system.**\r\n\r\n- Using the multiple RayShape approach completely breaks the way `move_and_slide()` detects what slopes are too steep or not since there is _always_ a RayShape that is preventing the non-RayShape CollisionShape from touching the slope itself. I will go into a little more detail under the implementation header.\r\n\r\n# Show a mock up screenshots/video or a flow diagram explaining how your proposal will work: #\r\n\r\n> If only there could be a RayShape on the player's bottom everywhere. All the time.\r\n\r\n## Enter: SeparationBoxShape ##\r\n\r\nForgive the crude drawings again, but here is what I have in mind:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71392474-6286ae00-25c5-11ea-896d-583b4a9f1d00.png)\r\n\r\nHopefully, as you can see, the underlying SeparationBoxShape is properly separating the BoxShape from the StaticBody. Because the _entire_ surface area of the BoxShape's bottom is covered, there should (hypothetically) be no fear of the player catching on the ledge. For instance: the following should **never** happen the same way it would happen if you were using an ordinary RayShape lollipop style:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71392714-5a7b3e00-25c6-11ea-8c1a-bc34c484580b.png)\r\n\r\nSince SeparationBoxShape detects a collision, it will properly snap the player out of the platform.\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71392768-8e566380-25c6-11ea-9a56-24e4f970a334.png)\r\n\r\nAdditionally, as mentioned above with regards to stairs, the player should be able to traverse the following:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71392867-ff961680-25c6-11ea-94a4-2b96483b062b.png)\r\n\r\nWith a plain RayShape setup, the player would have to advance forward a little more before they notice actually ascend the step:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71392926-45eb7580-25c7-11ea-8593-6d91bf59d81c.png)\r\n\r\nThis is, of course, the very thing that causes \"ledge catching\" detailed in the diagrams way above.\r\n\r\nAdditionally, SeparationBoxShape is simply an example. I assume that if boxes can be used for separation shapes, then so can capsules, spheres, cones, etc. Perhaps even meshes?\r\n\r\n## Editor-side: ##\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71393153-6ec03a80-25c8-11ea-8220-c6aece847957.png)\r\n\r\nPerhaps the icons should be red to differentiate them? :) In any case, selecting a separation shape should be fairly straightforward. You would then place it in your scene normally as if it were any other CollisionShape.\r\n\r\n# Describe implementation detail for your proposal (in code), if possible:  #\r\n\r\nHere's the interesting part. To reiterate, I am not very familiar with the exact inner-workings of RayShape, but I'm going to proceed under the assumption that it works by just pushing the player out of a body when it's colliding with one.\r\n\r\nTo reference [this](https://godotengine.org/article/godot-31-will-get-many-improvements-kinematicbody) blog post once more, the only benefit described in the article is to prevent the player from moving more slowly up slopes which RayShape does flawlessly. The way that it achieves this is through a very interesting technique. I'll copy the figure here for convenience's sake:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71393829-ac729280-25cb-11ea-98b1-feb47f5ef271.png)\r\n<sub>Image (presumably) made by Juan Linietsky</sub>\r\n\r\nIt is apparent from the image alone that the internal RayShape approach can be summarized by saying that if the RayShape is touching the floor but the capsule is not, then the slope is not too steep and the player stops on the slope completely without sliding even a little bit. However, if the capsule is touching the slope and the RayShape isn't, then we know it's too steep.\r\n\r\nIf you recall from the last bullet point in the previous section:\r\n\r\n> Using the multiple RayShape approach completely breaks the way `move_and_slide()` detects what slopes are too steep or not since there is always a RayShape that is preventing the non-RayShape CollisionShape from touching the slope itself.\r\n\r\nIf you can excuse my crude drawings again, I hypothesize it's because of this:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71394360-68cd5800-25ce-11ea-9a73-6bee5e1e6a3b.png)\r\n\r\nThis makes it entirely possible for a player to climb a slope that is hilariously steep. A solution for this, I've found, is to use as many RayCast nodes as there are RayShape nodes that cast from and to the exact same places as the RayShapes and grab which one of these RayCast nodes detects the largest angle, and flip all the RayShapes' \"slide on slopes\" property to true if the angle derived from the normal is above a certain threshold. This works pretty nicely if it weren't for two issues:\r\n\r\n- It involves what I think is a very unnecessary supplement to what I think should be exposed in RayShape anyway if it were possible. (e.g. RayShapes should have a function that can get the normal of what they're colliding with)\r\n\r\n- Even if this technique were to give me _exactly_ what I want behavior-wise, it requires quite a bit of computation with a linear search through every RayCast child node every frame to determine if they're colliding with something and what their normal is and calculate the angle from this normal to see if the player should slip off it. This clutters the player scene and the player code.\r\n\r\nWith all of that said, I think that the way RayShape collision is implemented right now is manageable for most 2D applications, especially in combination with my RayShape + RayCast approach, but 3D might need another method for determining what is too steep and what isn't.\r\n\r\nMy suggestion is the most obvious one: if Separation Shapes are not that much different from other CollisionShapes, then hopefully the talented crew that are infinitely more intimate with the physics engine than me will probably know whether or not the following is a valid method:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71395292-9ae0b900-25d2-11ea-888b-718cd41b465d.png)\r\n\r\nThere should be an additional (exposed) property for SeparationBoxShape: floor_max_angle. If the normal at the point of collision is above floor_max_angle, then that's when the player should start sliding (slides_on_slopes is internally overriden to true?). In more technical speak, at this point, the SeparationBoxShape should return the correct normal instead of some kind of a `floor_normal` constant which what I hypothesize stops it from sliding. My hypothesis comes from information I gleaned from studying the internal `move_and_slide()` and playing around with it, and also this tooltip from RayShape in the editor:\r\n\r\n![image](https://user-images.githubusercontent.com/8296741/71395502-6b7e7c00-25d3-11ea-9063-c3208f7ec467.png)\r\n\r\nTo address what this will _actually_ look like in `move_and_slide()`, take a look at (currently, at the time of writing) [line 1185](https://github.com/godotengine/godot/blob/master/scene/3d/physics_body.cpp#L1185) in physics_body.cpp. In the else block, `separate_raycast_shapes()` is called, which, after a few glances, seems to tell the physics server to test a ray separation to find the deepest collision point and update's KinematicBody's global_transform.origin with a \"recovery\" vector, which I assume in the case of a floor, would be `(0.0, <amount needed to snap the RayShape out of the ground, AKA, the \"recovery amount\">, 0.0).`\r\n\r\nIf `separate_raycast_shapes()` could be further generalized to `separate_separation_shapes()` or something along those lines, hopefully that would suffice. `separate_separation_shapes()` could be a similar check except instead of using `PhysicsServer::body_test_ray_separation()`, it could use `PhysicsServer::body_test_motion()` or something that returns more sufficient information, like a shape intersection query.\r\n\r\n# If this enhancement will not be used often, can it be worked around with a few lines of script? Is there a reason why this should be core and not an add-on in the asset library?: #\r\n\r\nI am very certain these features belong in the main engine for the reasons I described above. I assume they will be used very often and that not enough of the physics engine is exposed to GDScript make SeparationBoxShape in any elegant fashion.\r\n\r\n# Conclusion: #\r\n\r\nTo reiterate once more, I am not 100% on how possible or what's possible and how RayShape works. If there are no plans to add more separation shapes, would it be possible to have RayShape expose the normal of whatever it's hitting? Simultaneously, would it be possible to check for collisions on a player's non-RayShape CollisionShape first to prevent the occasional \"climb up the wall for 0.1 seconds\" bug? May not be that simple to fix, but I'm interested to hear what might be happening under the trunk.\r\n\r\nThere are still a couple known bugs regarding RayShape. Namely [#34098](https://github.com/godotengine/godot/issues/34098#issuecomment-562858296) and some jittering.\r\n\r\nThanks for reading, this took me quite a while to assemble. I hope it didn't come off as too presumptuous. I am not an expert by any means, but I look forward to hearing from one.\r\n\r\nHappy holidays!\r\n\r\n---\r\n\r\n1. This, according to my observations, is caused by consistently applying downward force in move_and_slide, like gravity. In move_and_slide_with_snap, the slowly sliding down slopes is intrinsic to the function because it is technically _always_ applying downward force in order to snap the player back down to the ground.\r\n\r\n2. You can circumvent this by not applying any downward force by checking if the player is on the floor like so: `if !is_on_floor() && vel.y > -max_fall_accel: vel.y -= fall_accel`. However, it is consistently recommended to apply _some_ downward force to prevent the erratic flipping between true and false when checking for `is_on_floor()` every frame, making this technique not ideal if you need to check if the player is on the floor every frame. You _could_ use `move_and_collide()` or `test_move()` to see if there is solid ground beneath the player, but that results in the use of an additional physics query every frame. `move_and_slide_with_snap()` already has two, internally.\r\n\r\n3. As many reading this would have assumed, this is exactly how stair collisions are automagically handled with KinematicBody + RayShape setups.\r\n\r\n4. [\"Yes, the name is confusing, maybe they should be renamed to SeparationRayShape in Godot 4.0 :)\" - Juan Linietsky](https://godotengine.org/article/godot-31-will-get-many-improvements-kinematicbody)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/333/reactions",
      "total_count": 11,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 10,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/331",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/331/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/331/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/331/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/331",
    "id": 541546603,
    "node_id": "MDU6SXNzdWU1NDE1NDY2MDM=",
    "number": 331,
    "title": "Add \"Loading - Please Wait\" text to HTML5 export loading screen.",
    "user": {
      "login": "LillyByte",
      "id": 56379365,
      "node_id": "MDQ6VXNlcjU2Mzc5MzY1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/56379365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LillyByte",
      "html_url": "https://github.com/LillyByte",
      "followers_url": "https://api.github.com/users/LillyByte/followers",
      "following_url": "https://api.github.com/users/LillyByte/following{/other_user}",
      "gists_url": "https://api.github.com/users/LillyByte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LillyByte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LillyByte/subscriptions",
      "organizations_url": "https://api.github.com/users/LillyByte/orgs",
      "repos_url": "https://api.github.com/users/LillyByte/repos",
      "events_url": "https://api.github.com/users/LillyByte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LillyByte/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-12-23T02:49:12Z",
    "updated_at": "2020-09-18T22:03:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI export a lot of small, HTML5 games that are played by numerous people; especially by Twitch streamers, and I've encountered a simple, core issue affected by many who load HTML5 games exported by Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAfter watching a large number people load my HTML5 games in their browsers (100s of people over time), most will initially close the game page because they think the page is frozen, even though the circle is still spinning. Many will remark that it's not working. The spinning circle alone is not recognized as a universal loading icon. I have to explain to them, \"No, the circle means it's still loading, you have to wait for it to load.\" \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA little bit of text saying \"LOADING PLEASE WAIT\" underneath or above the spinning  icon would go a long way in allowing end users to understand the game is loading and that it is not frozen.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nJust put some text above/below the spinning icon we currently have, and there you go.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know how to do this.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used in every single HTML5 export, as it would be on the loading page.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's for end-user clarity while loading Godot HTML5 exported games so people don't pre-emptively close them out thinking they are frozen.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/331/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/330",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/330/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/330/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/330/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/330",
    "id": 541493525,
    "node_id": "MDU6SXNzdWU1NDE0OTM1MjU=",
    "number": 330,
    "title": "Angle difference function to be added to math core",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-22T19:40:58Z",
    "updated_at": "2019-12-30T18:53:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a puzzle game involving rotation which uses similar mechanics to rubiks cubes and combination locks. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have concentric circles which I need to tell if they are rotationally aligned. Since they have the same center I cant use Vector2.angle_to_point() unless I do Vector2.angle_to(Vector2(cos(angle), sin(angle))) but that seems excessive considering the angle_to_point function is probably using an angle difference function within it.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI wrote a code which has the same effect with much less work which would be placed in the math core\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nCant on my phone which is the only thing with internet right now please forgive my inability to use tab\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n```gdscript\r\n# returns a value from -PI to PI\r\nfunc angle_dif(from : float, to : float):\r\n    var ans = fposmod(to - from, TAU)\r\n    if ans > PI:\r\n        ans -= TAU\r\n   return ans\r\n```\r\nHere is the same thing in degrees if that is what they need: \r\n\r\n```gdscript\r\n# returns a value from -180 to 180\r\nfunc angle_dif_degree(from : float, to : float):\r\n    var ans = fposmod(to - from, 360)\r\n    if ans > 180:\r\n        ans -= 360\r\n   return ans\r\n```\r\n\r\nHere are corresponding angular interpolation functions \r\n\r\n```gdscript\r\nfunc aint(from: float, to: float, weight: float)\r\n    return from + angle_dif(from, to) * weight\r\n```\r\n\r\n```gdscript\r\nfunc aint_degree(from: float, to: float, weight: float)\r\n    return from + angle_dif_degree(from, to) * weight\r\n```\r\n*If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt will be used often and while it can be overcome by script the script they might come up with might not be as elegant as the solution I found. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nbecause its usage would be pretty ubiquitous and it seems odd that angle_to_point is included but angle_dif is not.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/330/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/329",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/329/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/329/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/329/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/329",
    "id": 541444424,
    "node_id": "MDU6SXNzdWU1NDE0NDQ0MjQ=",
    "number": 329,
    "title": "Make collision layer a class / resource",
    "user": {
      "login": "fossegutten",
      "id": 15088582,
      "node_id": "MDQ6VXNlcjE1MDg4NTgy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15088582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fossegutten",
      "html_url": "https://github.com/fossegutten",
      "followers_url": "https://api.github.com/users/fossegutten/followers",
      "following_url": "https://api.github.com/users/fossegutten/following{/other_user}",
      "gists_url": "https://api.github.com/users/fossegutten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fossegutten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fossegutten/subscriptions",
      "organizations_url": "https://api.github.com/users/fossegutten/orgs",
      "repos_url": "https://api.github.com/users/fossegutten/repos",
      "events_url": "https://api.github.com/users/fossegutten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fossegutten/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-22T12:25:13Z",
    "updated_at": "2019-12-22T22:22:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nI would suggest to make the collision layers / masks into a resource. The code for layers is now repeated in physics_body, physicsbody2d, area, area3d, csgshape, softbody, gridmap and tilemap. Including methods to edit the collision layer. setting bit value, getting bit value etc.\r\n\r\n**Describe the project you are working on:**\r\nWorking on several projects that uses inner classes or custom nodes, that needs a collision mask / layer.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem is to get a collision_layer to communicate with the regular physics system. Now i need to first make an area2d node or similar, then check all collision bits i need, then print out the value of collision_layer. The printed out value can now be used for collision_layer, which i use as a value in my bullet class, to be used as a parameter in Physics2DShapeQueryParameters.\r\n\r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis way I could just add a collision_layer resource to my classes / nodes, and use this through exposed methods.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nHere is an example, with the CollisionLayer inner class representing the custom resource that i suggest:\r\n```\r\nextends Node\r\n\r\nvar player_bullets : Array = []\r\n\r\nfunc _ready():\r\n\tfor i in 10:\r\n\t\tvar p : Projectile = Projectile.new()\r\n\t\tp.pos = Vector2(10, 20 * i)\r\n\t\tp.dir = Vector2.RIGHT\r\n\t\tp.speed = 10.0\r\n\t\tp.damage = 1\r\n\t\tplayer_bullets.append( p )\r\n\r\nfunc _process(delta):\r\n\tfor b in player_bullets:\r\n\t\t# process logic, included collisions with Physics2DDirectSpaceState\r\n\t\tpass\r\n\r\nclass Projectile:\r\n\r\n\tvar pos : Vector2\r\n\tvar dir : Vector2\r\n\tvar speed : float\r\n\tvar damage : int\r\n\tvar collision_layer : CollisionLayer\r\n\t\r\n\tfunc set_collision_layer(new_layer : CollisionLayer):\r\n\t\tcollision_layer = new_layer\r\n\r\nclass CollisionLayer:\r\n\t\r\n\tvar _layer\r\n\t\r\n\tfunc get_layer():\r\n\t\treturn _layer\r\n```\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nMove the code from all the above mentioned classes into a resource that they can all use, with exposed methods for setting bit values, getting values, and getting the collision layer value (int).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt could be made in GDscript with functions like this, but it will require several lines:\r\n```\r\nfunc set_collision_layer_bit(layer : int, bit : int, value : bool) -> int:\r\n\tif value:\r\n\t\tlayer |= 1 << bit\r\n\telse:\r\n\t\tlayer &= ~(1 << bit)\r\n\treturn layer\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would also reduce the repeating of code in the Godot code base.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/329/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/328",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/328/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/328/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/328/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/328",
    "id": 541438548,
    "node_id": "MDU6SXNzdWU1NDE0Mzg1NDg=",
    "number": 328,
    "title": "Allow opening sprites and other files in external editor/default program",
    "user": {
      "login": "nikhilCad",
      "id": 47214394,
      "node_id": "MDQ6VXNlcjQ3MjE0Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/47214394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikhilCad",
      "html_url": "https://github.com/nikhilCad",
      "followers_url": "https://api.github.com/users/nikhilCad/followers",
      "following_url": "https://api.github.com/users/nikhilCad/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikhilCad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikhilCad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikhilCad/subscriptions",
      "organizations_url": "https://api.github.com/users/nikhilCad/orgs",
      "repos_url": "https://api.github.com/users/nikhilCad/repos",
      "events_url": "https://api.github.com/users/nikhilCad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikhilCad/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-22T11:22:36Z",
    "updated_at": "2020-06-28T21:31:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nProject with many sprites\r\n**Describe the problem or limitation you are having in your project:**\r\nTo edit sprites, I have to leave Godot and locate them on my computer\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt will basically make me stay close to the 'Godot environment'\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSee below\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nBasically, it will be an option in editor settings. User has to point the application.\r\nAll textures resources will have an Edit in Image Editor button in inspector\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPlugins are per project. It will be tedious to set image editor in each project\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame as above",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/328/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/325",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/325/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/325/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/325/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/325",
    "id": 541116822,
    "node_id": "MDU6SXNzdWU1NDExMTY4MjI=",
    "number": 325,
    "title": "Onready setters",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-12-20T17:48:37Z",
    "updated_at": "2020-11-29T20:41:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGame with \"interactive\" nodes, which use tool script with setters and stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nReal use case here. I have a node called Door. It has two exported properties with setters: `right` and `texture`. When you set `right` to true, the sprite gets flipped, but there's also a collider that changes position to opposite side. `texture` is a... well, sprite texture.\r\n\r\nThe Door script is a tool script. I recently noticed that I can't just use `_process()` in every tool script that reacts to variable changes, because it kills my GPU due to constant scene redrawing. So I switched to setters and ran into another problem. As you might guess from above description, my tool script affects two underlying nodes by editing their properties. The problem is initialization. When I run the game, the setters are called instantly and error out, because they rely on using `get_node()` before the children are initialized. Right now I'm using a workaround where in the setter I check if the node is inside tree and `return` if not and also inside `_ready()` I call the setters directly _with current value_ to initialize them properly. tbh it feels like a hack and also I will have to do this for every \"interactive\" object, which is meh.\r\n\r\nRelated issues:\r\nhttps://github.com/godotengine/godot/issues/30460\r\nhttps://github.com/godotengine/godot/issues/28014\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMy idea is being able to defer the call of setters. Consider this syntax:\r\n```\r\nexport var right: bool onready setget set_right\r\n```\r\nNotice the `onready` before setget (this might look ugly, but I don't have idea for better syntax rn). It means that when initializing the object, the engine should use `call_deferred` instead of `call` on the setter. This way it will be called after the node is inside tree and have its children properly initialized, so it can modify them.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/71278669-85f8f100-2358-11ea-9f90-7f834e702a7a.png)\r\nmaybe\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nHopefully it should be possible to call the setter in deferred mode. However this might happen after `_ready()` (unless we use some new logic, but that makes it complicated), so maybe the property could have its value set bypassing the setter and then call the setter on idle frame. Sounds perfectly possible and solves the problem.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's a change to GDScript, so non-pluginable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n> non-pluginable",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/325/reactions",
      "total_count": 20,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/324",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/324/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/324/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/324/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/324",
    "id": 541086977,
    "node_id": "MDU6SXNzdWU1NDEwODY5Nzc=",
    "number": 324,
    "title": "Automatically enable newly installed addons",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-20T16:37:56Z",
    "updated_at": "2019-12-20T17:54:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nIn all of my projects I use addons to make them more modular and install addons from the asset library.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAfter putting addons in or installing them through the asset library, you always have click six times to navigate to the addons panel and enable it.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt will make things quicker.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![20191220](https://user-images.githubusercontent.com/28286961/71269313-55608980-234f-11ea-9c21-1b6ad2168e12.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nChange the asset library importing in\r\nhttps://github.com/godotengine/godot/blob/48edf6333029fc961528892af190201197b44c40/editor/editor_asset_installer.cpp#L212\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a quality of live improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/324/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/323",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/323/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/323/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/323/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/323",
    "id": 540702323,
    "node_id": "MDU6SXNzdWU1NDA3MDIzMjM=",
    "number": 323,
    "title": "Ability to export projects in the background",
    "user": {
      "login": "FeralBytes",
      "id": 7874274,
      "node_id": "MDQ6VXNlcjc4NzQyNzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7874274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FeralBytes",
      "html_url": "https://github.com/FeralBytes",
      "followers_url": "https://api.github.com/users/FeralBytes/followers",
      "following_url": "https://api.github.com/users/FeralBytes/following{/other_user}",
      "gists_url": "https://api.github.com/users/FeralBytes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FeralBytes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FeralBytes/subscriptions",
      "organizations_url": "https://api.github.com/users/FeralBytes/orgs",
      "repos_url": "https://api.github.com/users/FeralBytes/repos",
      "events_url": "https://api.github.com/users/FeralBytes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FeralBytes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-20T02:15:12Z",
    "updated_at": "2020-11-22T15:35:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nMobile and Desktop Application.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nExporting to Android (and all exports for that matter) could be a background task. As I often want to export to an android emulator and immediately start a Game Instance on the Desktop, to do multiplayer integration testing. But I have to wait for the mobile build and export to finish before I can start the Desktop instance. \r\nIt would be nice to have these tasks back grounded at least as an option. The only catch would be no saving or project changes should be allowed during the export process.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt will make the process of local and emulated testing more convenient and it will take me away from the code for less time.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n||Click Export Button|| Task moves to the background and a icon indicates the status of the background tasks.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n||Download|| or ||Export Button|| is clicked and rather than calling a blocking progress bar instead push the task to the background and instead display a non-blocking progress indicator. If an error occurs a blocking pop-up should still be displayed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can not be worked around with a script and would require the engine to background the tasks (which they already are back grounded), but visually push them to the background. It can be worked around by opening a second instance of the Godot IDE as noted by @reduz but that is not a good solution for my portable laptop which only has 4GB of RAM and a super slow hard drive (swap is painful even on Linux), but would be perfectly acceptable for my Gaming Laptop and Desktop.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt has to be a core enhancement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/323/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/321",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/321/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/321/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/321/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/321",
    "id": 540503232,
    "node_id": "MDU6SXNzdWU1NDA1MDMyMzI=",
    "number": 321,
    "title": "Make `OS.get_window_safe_area()` work on Android",
    "user": {
      "login": "NoFr1ends",
      "id": 6075580,
      "node_id": "MDQ6VXNlcjYwNzU1ODA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6075580?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NoFr1ends",
      "html_url": "https://github.com/NoFr1ends",
      "followers_url": "https://api.github.com/users/NoFr1ends/followers",
      "following_url": "https://api.github.com/users/NoFr1ends/following{/other_user}",
      "gists_url": "https://api.github.com/users/NoFr1ends/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NoFr1ends/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NoFr1ends/subscriptions",
      "organizations_url": "https://api.github.com/users/NoFr1ends/orgs",
      "repos_url": "https://api.github.com/users/NoFr1ends/repos",
      "events_url": "https://api.github.com/users/NoFr1ends/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NoFr1ends/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-19T19:04:46Z",
    "updated_at": "2020-09-18T21:20:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently it is not possible to handle display cut outs on Android devices. Instead the game will go into letter box and leave the area of the display cut out blank.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAdding the functionality of `OS.get_window_safe_area()` for android too.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n```\r\nOS.get_window_safe_area()\r\n```\r\nThis would return the safe inset for top, right, bottom, left.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is an important API required for porting games to mobile devices properly, a possible work around would be to just add margins to the UI. I consider this work around as not optimal because this would add margins to devices without cut-outs or a notch too.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis proposal provides an important API for porting games to current mobile phones.\r\n\r\n---\r\n\r\nThis also got an issue in the main repository:\r\nhttps://github.com/godotengine/godot/issues/34466\r\n\r\n---\r\n\r\n**If this is okay to implement I can work on a PR.**",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/321/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/320",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/320/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/320/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/320/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/320",
    "id": 540350948,
    "node_id": "MDU6SXNzdWU1NDAzNTA5NDg=",
    "number": 320,
    "title": "Warn if sending an rpc/rset that would be invalid",
    "user": {
      "login": "winadam",
      "id": 6750326,
      "node_id": "MDQ6VXNlcjY3NTAzMjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6750326?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winadam",
      "html_url": "https://github.com/winadam",
      "followers_url": "https://api.github.com/users/winadam/followers",
      "following_url": "https://api.github.com/users/winadam/following{/other_user}",
      "gists_url": "https://api.github.com/users/winadam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winadam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winadam/subscriptions",
      "organizations_url": "https://api.github.com/users/winadam/orgs",
      "repos_url": "https://api.github.com/users/winadam/repos",
      "events_url": "https://api.github.com/users/winadam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winadam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-19T14:34:23Z",
    "updated_at": "2020-09-12T21:37:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a project with networking.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFollowing rpc security errors back to the source is difficult because the error just shows up as invalid in the server with no sense of where the property or rpc was invalidly called.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMy ideal implementation would only be enabled in debug builds, and would create a warning when doing rset/rpc that would be invalid. Such as calling/setting a puppet method/property when the node is not the master.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nEnabled only in debug builds. Not sure, I want to know if my proposal has some critical flaws before I start working on it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis proposal deals with the networking system and I believe the add-on would be replacing the entire networking system.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/320/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/317",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/317/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/317/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/317/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/317",
    "id": 539634196,
    "node_id": "MDU6SXNzdWU1Mzk2MzQxOTY=",
    "number": 317,
    "title": "Duplicating a node should result in either a true Instance or true unique copy, not a mix of both",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-18T11:51:44Z",
    "updated_at": "2019-12-19T13:22:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIn all my projects I'm duplicating and instancing nodes all the time.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I duplicate nodes, they are neither unique (aka independent or disconnected from their original), nor are they completely connected: a pure instance where changing one thing in any one of the duplicates results in the same change happening to all of the duplicates.\r\n![instance_or_duplicate](https://user-images.githubusercontent.com/47016402/71084030-a8daa800-2194-11ea-97b2-2bd72f6e2fb6.gif)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nHaving either true Instances of nodes or true unique duplicates would prevent confusion, unintentional changes, self inflicted bugs.\r\nIdeally I would like to be able to do something like\r\n\r\n- rightclick on a node in the Scene Panel for the context menu and select \"create Duplicate (Ctrl+D)\" to create a unique duplicate\r\n- and \"create Instance (Ctrl + I )\" (or Ctrl+Shift+D) to create a true Instance of the Node I just created.\r\n\r\nIf I would want a specific Resource to be shared, by multiple nodes, I would like to Save the resource as a .res for instance, and then load it into any another node (already possible).\r\nThis would be intentional driven design for me.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nImagine either both color changing _and_ shapes changing in the gif above (true instance) or both color _and_ shape changes stay independent from the original (unique duplicate)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nfor me not possible\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWould be used a lot because duplication of nodes is a very common thing in Godot.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about existing core functionality",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/317/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/316",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/316/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/316/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/316/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/316",
    "id": 539612089,
    "node_id": "MDU6SXNzdWU1Mzk2MTIwODk=",
    "number": 316,
    "title": "Add a warning when someone calls Input.is_action ... in _input(event)",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-12-18T11:05:52Z",
    "updated_at": "2020-03-17T14:25:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nProjects with Input events and Input maps\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was not aware about the fact that `Input.is_action_just_pressed(\"action\")` could be called multiple times per frame, but thanks to [this post on reddit](https://www.reddit.com/r/godot/comments/ec7gxv/friendly_reminder_try_not_to_mix_inputevent_and/) I was made aware.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA yellow warning would be nice to tell me about the risk and the recommended alternative.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nsomething like: \r\n\"Using Input.is_action ... calls in _input(event) might get called more than once per frame. Use event.is_action('my_action') instead\"\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nnot possible\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nused often by those not aware\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nto help people not to create unnecessary bugs",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/313",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/313/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/313/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/313/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/313",
    "id": 539055981,
    "node_id": "MDU6SXNzdWU1MzkwNTU5ODE=",
    "number": 313,
    "title": "Joins. (rest) position via code.",
    "user": {
      "login": "SuperDIMMaX",
      "id": 22836285,
      "node_id": "MDQ6VXNlcjIyODM2Mjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22836285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SuperDIMMaX",
      "html_url": "https://github.com/SuperDIMMaX",
      "followers_url": "https://api.github.com/users/SuperDIMMaX/followers",
      "following_url": "https://api.github.com/users/SuperDIMMaX/following{/other_user}",
      "gists_url": "https://api.github.com/users/SuperDIMMaX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SuperDIMMaX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SuperDIMMaX/subscriptions",
      "organizations_url": "https://api.github.com/users/SuperDIMMaX/orgs",
      "repos_url": "https://api.github.com/users/SuperDIMMaX/repos",
      "events_url": "https://api.github.com/users/SuperDIMMaX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SuperDIMMaX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-12-17T13:09:17Z",
    "updated_at": "2019-12-19T00:39:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProject with physics (car).\r\n**Describe the problem or limitation you are having in your project:**\r\nJoint position(pivot) setup only when created. If you need change \"rest\"(pivot) position you need delete joint and create new.\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nNot need destroy and make new joint with same properties, just update position and/or rotation.\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nFrom\r\n![Video 1](https://user-images.githubusercontent.com/22836285/71038783-af850300-2133-11ea-8906-9d770f5d1581.gif)\r\nGet this\r\n![Video 2](https://user-images.githubusercontent.com/22836285/71038797-b6ac1100-2133-11ea-95c4-345d4c2dc947.gif)\r\nvia change joint position.\r\nVideo how it works:\r\n![ezgif-2-ea99af098ad1](https://user-images.githubusercontent.com/22836285/71078878-4a64f800-219b-11ea-8683-1481adcaae35.gif)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be do this via script, but with some bugs and limitations.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf need soft slide joint to position from video1 to video2 you need destroy and create new joint per frame.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/313/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/312",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/312/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/312/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/312/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/312",
    "id": 538964430,
    "node_id": "MDU6SXNzdWU1Mzg5NjQ0MzA=",
    "number": 312,
    "title": "Rework `Navigation.get_simple_path()` to improve performance",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-17T10:08:48Z",
    "updated_at": "2020-11-22T16:38:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMi current project is a clone moba game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I make a map with tilesets and I add path in tiles the game, even with just the minion on it became slow that is not working.\r\nThe main problem is the continue recalculation of \"get_simple_path\"  for each tile. In a huge map (10000x10000) there are so many.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nUnique array/collection with inside a ordered  list  of possible paths -by length+weight -. \r\nIn game - when something have to travel it will check among all possible paths in an array and choose all paths that have his start-point and his end-point and choose with one have the less weight.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI cannot provide any because I don't know the current flow-chart related to get_simple_path.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nMy suggestion is to extract the possible titles  that are defined as path at the start of the game  just once. Then make an ordered array of possible paths where the first one will be the longest one (start point to end point)  all pats must be unique (the can share - for example - one start-point ma they must have different end-point. Plus a weight related to each one that define the length - this one unique too -.\r\nThe downside will be they need more memory to save this array but it will be a huge impact  in performance.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope as I far I know.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIs up to PM to decide this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/312/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/311",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/311/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/311/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/311/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/311",
    "id": 538799315,
    "node_id": "MDU6SXNzdWU1Mzg3OTkzMTU=",
    "number": 311,
    "title": "Add a \"Close Doc Tabs\" context menu option in script editor tab list",
    "user": {
      "login": "regakakobigman",
      "id": 42157525,
      "node_id": "MDQ6VXNlcjQyMTU3NTI1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/42157525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/regakakobigman",
      "html_url": "https://github.com/regakakobigman",
      "followers_url": "https://api.github.com/users/regakakobigman/followers",
      "following_url": "https://api.github.com/users/regakakobigman/following{/other_user}",
      "gists_url": "https://api.github.com/users/regakakobigman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/regakakobigman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/regakakobigman/subscriptions",
      "organizations_url": "https://api.github.com/users/regakakobigman/orgs",
      "repos_url": "https://api.github.com/users/regakakobigman/repos",
      "events_url": "https://api.github.com/users/regakakobigman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/regakakobigman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-17T02:45:35Z",
    "updated_at": "2020-09-14T00:07:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA game where I open a lot of doc tabs while working.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe script editor has a list of open tabs, including doc/help tabs. Clicking a link will open it in a new tab by default, so it's easy to quickly amass a large amount of doc tabs. There is no way to quickly close these tabs without closing every tab, which is time consuming and tedious.\r\n\r\nThere are already context menu options to close one tab, close all tabs, or close all tabs except one. I propose there could be another option that only closes doc tabs, and leaves script tabs untouched.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis feature would make it easy to instantly clean out all no-longer-needed doc tabs, without affecting any script tabs you might have open. It would solve a small but common frustration.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nA new context menu option titled 'Close Doc Tabs' could be added below the other options in the tab context menu:\r\n\r\n![image](https://user-images.githubusercontent.com/42157525/70959712-efbc8680-204a-11ea-9696-fadd1e9e6bdd.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI don't know, but it could be simple enough for a junior job.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere is no easy workaround that I know of, besides just right clicking on the doc tabs individually and closing them.\r\n\r\nNote: you can select the bottom most tab and repeatedly press Ctrl-W, but the most recently opened tab will be re-focused each time, so this is still tedious and error-prone.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a small feature, and (AFAIK) wouldn't be easy to fix without forking the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/310",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/310/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/310/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/310/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/310",
    "id": 538669396,
    "node_id": "MDU6SXNzdWU1Mzg2NjkzOTY=",
    "number": 310,
    "title": "Special TileMap edge mode for autotiles",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-16T21:25:04Z",
    "updated_at": "2020-05-28T21:18:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D game with tiles.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI defined autotiles for my tileset, but they have problem on the edges. Well, I have problem.\r\n![image](https://user-images.githubusercontent.com/2223172/70943673-b3405900-2051-11ea-9bf0-1d67d4afcd53.png)\r\nLook at this ground at the edge of the map. This is how I want it to look:\r\n![image](https://user-images.githubusercontent.com/2223172/70943773-e8e54200-2051-11ea-9dea-420aa4d87102.png)\r\nIt's impossible to achieve this with autotiles only. I either need to add some tiles out of the screen, so the border is invisible or disable autotiling to draw what I want (basically killing the purpose of autotiles :/)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWould be nice to have an option to treat TileMap edges as \"tiles\" so autotiles on the edges would behave like if there were tiles next to them.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n(some option in the inspector that changes what appears in first image into stuff on the second one)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n(some TileMap property that changes what appears in first image into stuff on the second one)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nProbably doable with a script, not sure how many people would use it, but maybe they don't know yet that they need it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMakes autotiles more platformer-friendly, so it's like general usage (?).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/310/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/309",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/309/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/309/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/309/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/309",
    "id": 538089730,
    "node_id": "MDU6SXNzdWU1MzgwODk3MzA=",
    "number": 309,
    "title": "Adding support for Consulo as external Mono editor",
    "user": {
      "login": "SeleDreams",
      "id": 16335601,
      "node_id": "MDQ6VXNlcjE2MzM1NjAx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16335601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SeleDreams",
      "html_url": "https://github.com/SeleDreams",
      "followers_url": "https://api.github.com/users/SeleDreams/followers",
      "following_url": "https://api.github.com/users/SeleDreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeleDreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SeleDreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeleDreams/subscriptions",
      "organizations_url": "https://api.github.com/users/SeleDreams/orgs",
      "repos_url": "https://api.github.com/users/SeleDreams/repos",
      "events_url": "https://api.github.com/users/SeleDreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SeleDreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-15T18:45:55Z",
    "updated_at": "2019-12-15T19:37:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a C# game named \"Dream of Moonlight\" It is a 2D RPG similar to the way pokemon games work\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to the fact the project is in C#, Godot has a native support for both VS Code and MonoDevelop. Which is logic as those are the two most popular free (and open source) cross platform C# IDEs.\r\n\r\nThe issue is that both of these IDEs have issues.\r\nFor instance, MonoDevelop is not *really* available anymore on Windows and Linux \r\n(It's still available for older builds, but since the 8.X branch, Monodevelop doesn't build anymore except on OSX and the currently available build has a lot of bugs, such as this one : https://github.com/godotengine/godot/issues/34035 )\r\nand VS Code, while really versatile, is still a text editor, which makes managing solutions, projects and packages more tedious than in real IDEs.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe advantage of Consulo is that it is a fork of Intellij IDEA Community.\r\nIt means that it benefits from the stability and the features of this IDE + The fact a lot of people probably are already used to its workflow so wouldn't have a lot of issues picking it up.\r\nIt is also versatile and allows plugins, which means Godot could probably easily make a plugin for it since it is also based on Intellij IDEA.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/16335601/70867201-1c9d6a80-1f73-11ea-98f6-80354f3688b3.png)\r\n\r\nI feel like this IDE could be the best replacement in the long term for MonoDevelop, even more if extensions add more support for godot (it already has extensions for instance making it a good IDE for Unity Engine development)\r\n\r\nits source code is available here : https://github.com/consulo/consulo\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/307",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/307/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/307/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/307/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/307",
    "id": 537998382,
    "node_id": "MDU6SXNzdWU1Mzc5OTgzODI=",
    "number": 307,
    "title": "Allow using interface as exported property type",
    "user": {
      "login": "mysticfall",
      "id": 2367032,
      "node_id": "MDQ6VXNlcjIzNjcwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2367032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mysticfall",
      "html_url": "https://github.com/mysticfall",
      "followers_url": "https://api.github.com/users/mysticfall/followers",
      "following_url": "https://api.github.com/users/mysticfall/following{/other_user}",
      "gists_url": "https://api.github.com/users/mysticfall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mysticfall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mysticfall/subscriptions",
      "organizations_url": "https://api.github.com/users/mysticfall/orgs",
      "repos_url": "https://api.github.com/users/mysticfall/repos",
      "events_url": "https://api.github.com/users/mysticfall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mysticfall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-15T03:49:44Z",
    "updated_at": "2019-12-15T10:22:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe issue may be relevant to any C# project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor now, Godot allows defining an exported property of `Array<T>` or `IEnumerable<T>`, provided `T` is one of the types that Godot knows how to serialize.\r\n\r\nHowever, sometimes you may need to store different subtypes of type `T` in `IEnumerable<T>` which in turn may define a type parameter itself.\r\n\r\nFor instance, let's say we want to create a character customization system and we allow our users to morph either the color or bone scale of their characters.\r\n\r\nNaturally, a C# programmer would define a parent type like `Morph<T> : Resource` and declare derivative morphs as something like `ColorMorph : Morph<Color>` and `BoneMorph<float>`, respectively.\r\n\r\nHowever, if you want to make them as resources and assign to an exported property, it becomes problematic.\r\n\r\nAs C# does not have a concept of wildcard type parameter, we can't declare such a property as `[Export] IEnumerable<Morph<_>> Morphs { get; }`.\r\n\r\nNormally, a common remedy to the problem is to define an interface `IMorph` which each morph implementation may implement. But Godot currently does not support using an interface type in a signature of exported properties.\r\n\r\nOne may try to circumvent the problem by using an abstract class instead like this:\r\n```csharp\r\npublic abstract class Morph : Resource { ... }\r\n\r\npublic abstract class Morph<T> : Morph { ... }\r\n```\r\nHowever, it's not always possible to do so when type hierarchy is more complex, so we have to use the lowest common denominator approach, and use `IEnumerable<Resource>` instead.\r\n\r\nAnd of course, it means we can't have any type validation when we drag resources over such fields which is not an ideal solution.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf Godot allowed using an interface type as `T` in `IEnumerable<T>` or `Array<T>` for exported properties, it would solve the problem explained above.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI mentioned a possible workaround above but it's not an ideal solution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it's something easily implemented by an add-on.\r\n\r\n\r\nI understand that it may be a low priority issue which may not be easy to solve. But this is a pattern of problem I've encountered a lot when I tried to migrate my project to use custom resources, so I wanted this feature request to keep track of relevant discussions in future.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/307/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/306",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/306/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/306/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/306/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/306",
    "id": 537975279,
    "node_id": "MDU6SXNzdWU1Mzc5NzUyNzk=",
    "number": 306,
    "title": "Allow to import system fonts from within Godot",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2019-12-14T22:47:25Z",
    "updated_at": "2020-11-18T02:03:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis applies to numerous projects, all using GUI.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEvery time I create a new project that uses GUI, I inevitably fall into the same problem - I need a font. Now, I'm used to needing to find a TTF file and import it into project so that I can put some labels. But I've come into _some engines_ that handle this in better way which is, most importantly, more friendly towards beginners. Making labels of different size has multiple problems. Scaled labels/buttons look super-ugly, but aside from that, their anchors are broken (https://github.com/godotengine/godot/issues/19068). So using a dynamic font for text size is a necessity.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe biggest problem with this workflow is whenever you want to have nice text, you have to go out of your way and get a TTF file from somewhere. It might be web or system fonts, but I imagine this is not obvious step for beginners.\r\n\r\nI've seen that in _some other engines_, the fonts are seemingly built-in. Not sure if they are provided with the engine (which is a no-no-no for Godot), but the option to get a system font into your project without having to navigate to Windows/Linux directory would be really useful.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/70855414-b2c98600-1eca-11ea-8b96-ad21bd254c12.png)\r\n(imagine there's some button saying \"Import system font\" here and clicking it opens some dropdown/lists of system fonts, clicking which will copy the font into your project)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't recall any similar system in Godot, so can't recommend any copy-paste material here, but the idea is to access system's font directory (like C:/Windows/Fonts or /Linux/Fonts) and allow to copy a font into your project without leaving the editor. So it requires platform-specific code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will be used by everyone the second this is added, trust me.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe purpose is to be friendly to newbies, so having this in asset lib and being basically a \"standard plugin to use\" would make it a bit pointless...",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/306/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/305",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/305/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/305/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/305/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/305",
    "id": 537969623,
    "node_id": "MDU6SXNzdWU1Mzc5Njk2MjM=",
    "number": 305,
    "title": "Make UI system more intuitive",
    "user": {
      "login": "markotaht",
      "id": 5711458,
      "node_id": "MDQ6VXNlcjU3MTE0NTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5711458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markotaht",
      "html_url": "https://github.com/markotaht",
      "followers_url": "https://api.github.com/users/markotaht/followers",
      "following_url": "https://api.github.com/users/markotaht/following{/other_user}",
      "gists_url": "https://api.github.com/users/markotaht/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markotaht/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markotaht/subscriptions",
      "organizations_url": "https://api.github.com/users/markotaht/orgs",
      "repos_url": "https://api.github.com/users/markotaht/repos",
      "events_url": "https://api.github.com/users/markotaht/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markotaht/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-12-14T21:46:10Z",
    "updated_at": "2019-12-29T03:11:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2d management game. It has a map where your mashines and stuff are and then there is the UI where you can control everything and that gives you overview about the situation. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating a UI is turning out to be a headache as the positioning and placing UI elements is not very intuitive. And lot of time is spent on doing even the simplest UI elements. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt will make creating the UI more simple and intuitive.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Proposal](https://user-images.githubusercontent.com/5711458/70854938-777b8700-1ecb-11ea-80f2-0612bf337407.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWhile the container system itself is a good idea, the way to place and set elements is rather difficult. So Instead of parent container overriding the child node values, the child node values should be in reference to the parent container. If parent container has a margin of 10 and child container sets the margin to 20 then the actual margin for child should be 30. And the same with other parameters. Location of child node should be in reference to parent node. Even if parent is at X 100 and child has X -40 then global position of child should be 60.  Basically they behave like HTML elements, only that some of the elements have some preset behavior. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will be used often, as it is the basis of the UI system. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would make it easier for people to get into Godot without having to spend tons of time researching on how it actually works. This would allow to do away with the custom constants for many elements. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/305/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/304",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/304/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/304/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/304/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/304",
    "id": 537918682,
    "node_id": "MDU6SXNzdWU1Mzc5MTg2ODI=",
    "number": 304,
    "title": "Add a more detailed system version info to OS class",
    "user": {
      "login": "lupoDharkael",
      "id": 14951430,
      "node_id": "MDQ6VXNlcjE0OTUxNDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14951430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lupoDharkael",
      "html_url": "https://github.com/lupoDharkael",
      "followers_url": "https://api.github.com/users/lupoDharkael/followers",
      "following_url": "https://api.github.com/users/lupoDharkael/following{/other_user}",
      "gists_url": "https://api.github.com/users/lupoDharkael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lupoDharkael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lupoDharkael/subscriptions",
      "organizations_url": "https://api.github.com/users/lupoDharkael/orgs",
      "repos_url": "https://api.github.com/users/lupoDharkael/repos",
      "events_url": "https://api.github.com/users/lupoDharkael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lupoDharkael/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-14T14:09:36Z",
    "updated_at": "2020-03-19T08:48:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nirrelevant.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd like to implement automatic reporting so I can know better about the userbase of my game. he actual state of the OS class allows to know if the system is \"Linux\" or \"Windows\" but I'd like to have specific information of the system version/distro. \r\n\r\nIt would be useful for https://github.com/godotengine/godot/issues/24780 if it gets implemented.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI'd implement 3 new methods in the OS singleton:\r\nget_system_name(), get_build_number() and get_system_version().\r\n\r\nNote: the following examples of every method show the output of a Fedora 31 and W10 education system.\r\n\r\n- get_system_name:\r\nreturns the specific name of the system (or distro). \r\ni.e. Fedora, Microsoft Windows 10 Education, etc.\r\n\r\n- get_build_number:\r\nreturns the build number of the system.\r\ni.e. 5.3.15-300.fc31.x86_64, 17134, etc.\r\n\r\n- get_system_version:\r\nreturns the system version of the system.\r\ni.e. 31 (KDE Plasma), 10.0.17134, etc.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nirrelevant.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nLinux:\r\n- get_system_name: field NAME in /etc/os-release\r\n- get_build_number: `uname -r`\r\n- get_system_version: field VERSION in /etc/os-release\r\n\r\nWindows:\r\n- get_system_name, get_build_number and get_system_version:\r\nYou can use `wmic` to obtain that information:\r\n![image](https://user-images.githubusercontent.com/14951430/70849620-50986300-1e81-11ea-8287-ea2518fc9d78.png)\r\nThis command requires admin in windows XP but this isn't a problem as Godot targets Windows 7+\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think this can be implemented in *a few* lines for every supported platform.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt could be an asset but I think this should be a well maintained feature in the engine and most important multiplatform engines have methods to obtain system version info.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/304/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/303",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/303/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/303/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/303/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/303",
    "id": 537802467,
    "node_id": "MDU6SXNzdWU1Mzc4MDI0Njc=",
    "number": 303,
    "title": "Add ability to remove default input map",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2019-12-13T22:17:39Z",
    "updated_at": "2020-04-19T23:12:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nShort game with input\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nDefault input map is a good place to start some users but the fact that it cannot be renamed or deleted makes zero sense. It clutters the input maps with all the \"ui_down\" \"ui_up\" etc before it gets all the way down to user defined inputs. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n99% of time user wants to implement his own input and naming convention. Ability to remove all default input would be great at keeping input map with only input keys user is actually implementing in his/her game\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nLike this but empty\r\n\r\n![input](https://user-images.githubusercontent.com/30668026/70835786-1766e100-1df6-11ea-82d6-73226e73af3e.PNG)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nDon't know probably the same way we can add and remove user define inputs. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou can work around it by suffering having all those inputs there for no reason and it works fine but there is no purpose to it. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes it's very much core of a game engine and everyone uses input map when making new project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/303/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/302",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/302/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/302/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/302/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/302",
    "id": 537740427,
    "node_id": "MDU6SXNzdWU1Mzc3NDA0Mjc=",
    "number": 302,
    "title": "Copy-Paste keyframes from one track to another",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-13T19:42:32Z",
    "updated_at": "2019-12-14T22:43:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n\r\n**Describe the project you are working on:**\r\nCreating a level editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\ntried to copy and paste the keyframes from track A to B , but it is not possible\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nthis will speed the development process\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nthere is no needed\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nnot code\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nyes, you can do this by editing the .tres file and copying these lines: \r\n`\"times\": PoolRealArray( 0.16, 0.32, 0.41, 1.33, 1.43, 1.48, 1.84, 1.9, 1.97, 2.45, 2.52, 2.59, 2.95, 3, 3.08, 3.25, 3.3, 3.39 ),\r\n\"transitions\": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),\r\n\"update\": 0,\r\n\"values\": [ 0.0, 0.4, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4, 0.0 ]\r\n`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits a basic feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/302/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/300",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/300/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/300/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/300/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/300",
    "id": 536927985,
    "node_id": "MDU6SXNzdWU1MzY5Mjc5ODU=",
    "number": 300,
    "title": "Expose more classes and functionality to editor plugins",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-12T11:44:29Z",
    "updated_at": "2020-05-17T04:31:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nEditor plugins that use inspector plugins, reflection and that create dynamic properties.\r\nSee: https://github.com/samdze/godot-modifiers-plugin\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nDuring the development of the plugin I ran into many limitations, Godot often just didn't expose the methods and the classes I needed to efficiently create the plugin.\r\nThis would be more like a tracker of all the stumblings I came across.\r\nHere's a list of things I'd like to see added or addressed, some of which I'm not sure if already available or not:\r\n\r\n- [ ] **1.** Expose all editor types, at least those useful to create plugins, like the subclasses of EditorProperty, various dialogs/containers (to select a property from a node or resource, to select a method, to create a Node/Resource, ecc). Also in the Create Dialog, maybe hidden by default and displayed only if explicitly selected in a dropdown menu. (like in the Search Help dialog)\r\n- [ ] **2.** Expose EditorInspector:instantiate_property_editor, or a method that does the following, users can automatically instantiate the right EditorProperty (based on TYPE_*, class name and hints) and customize it if needed.\r\n- [ ] **3.** Add a built-in way to get type names from TYPE_* integers.\r\n- [x] **4.** Methods to retrieve methods, properties, signals ecc names from Script Resources (NOT script instances).\r\n- [x] **5.** Inspector plugins tutorial in the docs is really bad, should be improved.\r\n- [ ] **6.** Add a convenient way to get the current editor theme and use it in tools to get colors, icons, ecc.\r\n- [ ] **7.** Add a way to precisely listen to files/resources creations and removals in the project filesystem. This would be very useful whether a plugin wants to be aware of all the resources of type TypeA to create custom dropdowns, lists and many other powerful tools.\r\n- [ ] **8.** Add a convenient way to mark properties (methods, signals...) with custom export hints, so that inspector plugins can take action whenever needed for example. Something like annotations should be great. https://github.com/godotengine/godot/issues/20318\r\n- [ ] **9.** Ability to properly export custom Resource types.\r\n- [ ] **10.** In general, make it **very easy and quick** to recreate editor-style controls and UIs.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nAll this additions will bring much more freedom and power to users creating editor plugins.\r\nSome of the benefits are already explained above.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot quite, if possible, the workarounds are inefficient, slow or not convenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a set of improvements that would allow better add-ons, not possible to implement with add-ons themselves.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/300/reactions",
      "total_count": 14,
      "+1": 13,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/299",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/299/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/299/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/299/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/299",
    "id": 536467164,
    "node_id": "MDU6SXNzdWU1MzY0NjcxNjQ=",
    "number": 299,
    "title": "Refactor the SizeFlags enum of Control nodes",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2019-12-11T16:04:55Z",
    "updated_at": "2021-01-03T09:26:48Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Any game with a UI\r\n\r\n**Describe the problem or limitation you are having in your project:** The problem that I am having is that, either I do not understand the SizeFlags enum of Control nodes, or the enum is designed in a confusing way that allows invalid configurations. In the case of the former, it's possible this proposal is completely nonsense and it's just docs that need updating.\r\n\r\nAccording to the [Control node documentation](https://docs.godotengine.org/en/latest/classes/class_control.html#enumerations):\r\n\r\n>enum **SizeFlags**:\r\n>  * **SIZE_FILL** = **1** — Tells the parent Container to expand the bounds of this node to fill all the available space without pushing any other node. Use with size_flags_horizontal and size_flags_vertical.\r\n>  * **SIZE_EXPAND** = **2** — Tells the parent Container to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they’ll share the space based on their stretch ratio. See size_flags_stretch_ratio. Use with size_flags_horizontal and size_flags_vertical.\r\n>  * **SIZE_EXPAND_FILL** = **3** — Sets the node’s size flags to both fill and expand. See the 2 constants above for more information.\r\n>  * **SIZE_SHRINK_CENTER** = **4** — Tells the parent Container to center the node in itself. It centers the control based on its bounding box, so it doesn’t work with the fill or expand size flags. Use with size_flags_horizontal and size_flags_vertical.\r\n>  * **SIZE_SHRINK_END** = **8** — Tells the parent Container to align the node with its end, either the bottom or the right edge. It doesn’t work with the fill or expand size flags. Use with size_flags_horizontal and size_flags_vertical.\r\n\r\n\"Fill\" says it \"fills all the available space without pushing any other node\", but this is false in testing. This sentence implies that the last item in an HBoxContainer would grow to the right, it doesn't. The actual behavior is that it fills up the reserved space.\r\n\r\nBoth \"Shrink Center\" and \"Shrink End\" say \"It doesn’t work with the fill or expand size flags\", and I don't think they work with each other either. Shrink Center is mutually exclusive with everything else, and Shrink End is also mutually exclusive with everything else.\r\n\r\nI don't think there is a use case for \"Expand\" without \"Fill\", but I could be wrong. So, from what I can gather, there are only **5** valid configurations out of the 16 possible combinations:\r\n\r\n* No size flags\r\n* Fill only\r\n* Fill with Expand (ExpandFill)\r\n* Shrink Center only\r\n* Shrink End only\r\n\r\nFurthermore, having none of the size flags enabled basically functions as a \"Shrink Begin\", if I'm understanding this correctly (because it's not filling or being moved to center/end).\r\n\r\nI think that it would make more sense to refactor this into a \"dropdown\"-style contiguous enum (0,1,2,3,4) instead of a \"checkbox\"-style bitwise enum (0,1,2,4,8), and rename some of the options. I was thinking something like this:\r\n\r\n* Normal (same as Fill currently, and called this way because this is the default and most common)\r\n* Expand (same as ExpandFill currently)\r\n* Shrink Begin (same as everything unchecked currently)\r\n* Shrink Center (same)\r\n* Shrink End (same)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIf the SizeFlags enum was less confusing, it would help people understand Control nodes more easily.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:** See above\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** It would require a very heavy amount of refactoring which would break compatibility. For example, code that checks for Fill would need to be changed from `& SizeFlags.Fill` to `< 2` or `< SizeFlags.ShrinkBegin` or similar. Code that checks for Expand would need to be changed from `& SizeFlags.Expand` to `== SizeFlags.Expand` and code that checks for ShrinkCenter/ShrinkEnd must be `== SizeFlags.ShrinkCenter` etc.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I think Control nodes are used very often, so making them less confusing is good.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** N/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/299/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/297",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/297/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/297/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/297/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/297",
    "id": 536044564,
    "node_id": "MDU6SXNzdWU1MzYwNDQ1NjQ=",
    "number": 297,
    "title": "Add option to treat engine errors as C# exceptions",
    "user": {
      "login": "mysticfall",
      "id": 2367032,
      "node_id": "MDQ6VXNlcjIzNjcwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2367032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mysticfall",
      "html_url": "https://github.com/mysticfall",
      "followers_url": "https://api.github.com/users/mysticfall/followers",
      "following_url": "https://api.github.com/users/mysticfall/following{/other_user}",
      "gists_url": "https://api.github.com/users/mysticfall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mysticfall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mysticfall/subscriptions",
      "organizations_url": "https://api.github.com/users/mysticfall/orgs",
      "repos_url": "https://api.github.com/users/mysticfall/repos",
      "events_url": "https://api.github.com/users/mysticfall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mysticfall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-10T23:04:07Z",
    "updated_at": "2020-09-12T21:35:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIt can apply to all C# projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, if something bad happens in a native method call Godot simply logs the error message to the console and tries to continue the execution. This may be a reasonable behaviour in a certain situation but not always so.\r\n\r\nThe problem is, there is no way for user code to know whether or not an invocation has failed which can be at least problematic in many situations.\r\n\r\nOutside of game engines, it is a common behaviour for platforms and frameworks to throw an error so giving the user application a chance to handle the problem before it is propagated to a catch-all error handler which typically logs the error as Godot currently does.\r\n\r\nC# already has all the features required to implement such a behaviour, and when godotengine/godot#16107 and godotengine/godot#28259 get fixed, there is no reason why Godot cannot provide a similar feature as other application servers or frameworks do.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf we can make such error handling behaviour as configurable(i.e. log and continue / throw an exception / terminate), it will allow those who create a Godot project in C# can detect an error condition and try to recover or handle it in a special way (like showing an in-game error message).\r\n\r\nAnd in general, knowing whether or not an API invocation was successful is quite important to write robust code.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think it can be workaround with a few lines of user code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it can be implemented as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/297/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/296",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/296/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/296/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/296/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/296",
    "id": 536010607,
    "node_id": "MDU6SXNzdWU1MzYwMTA2MDc=",
    "number": 296,
    "title": "Add equivalent of Node._Ready() for Resource type",
    "user": {
      "login": "mysticfall",
      "id": 2367032,
      "node_id": "MDQ6VXNlcjIzNjcwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2367032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mysticfall",
      "html_url": "https://github.com/mysticfall",
      "followers_url": "https://api.github.com/users/mysticfall/followers",
      "following_url": "https://api.github.com/users/mysticfall/following{/other_user}",
      "gists_url": "https://api.github.com/users/mysticfall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mysticfall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mysticfall/subscriptions",
      "organizations_url": "https://api.github.com/users/mysticfall/orgs",
      "repos_url": "https://api.github.com/users/mysticfall/repos",
      "events_url": "https://api.github.com/users/mysticfall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mysticfall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-10T21:41:43Z",
    "updated_at": "2020-08-18T02:11:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n\r\n\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n**Describe the project you are working on:**\r\nI'm working on a framework type project for Godot games, but I believe this feature is not tied to any specific type of project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBefore Godot began to support custom resources in a C# project, I mostly used `Node` to represent shared data like racial traits in an RPG.\r\n\r\nSometimes I need to validate exported properties of such nodes or do initialization processes, like transforming those user input values to a more suitable format to be used by other parts of the project.\r\n\r\nHowever, since I migrated the codebase to classes extending `Resource` instead of `Node`, I'm no longer able to use `Node._Ready()` for such a purpose and there does not seem to be any equivalent of the method in `Resource`.\r\n\r\nThe only alternative I've found was to lazy initialize and always validate exported properties everytime they are accessed which can lead to ugly and inefficient code.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA simple method like `Resource._Ready()` which is called when all its exported properties are filled would do.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAt least, I will use it for every resource type I create, because I used to validate exported properties of `Node` based game data containers in my project before I began migrating them to `Resource`.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it could be implemented as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/296/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/290",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/290/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/290/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/290/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/290",
    "id": 534543776,
    "node_id": "MDU6SXNzdWU1MzQ1NDM3NzY=",
    "number": 290,
    "title": "Add single instruction multiple data (SIMD) functionality for GDScript / C# / C++",
    "user": {
      "login": "lawnjelly",
      "id": 21999379,
      "node_id": "MDQ6VXNlcjIxOTk5Mzc5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21999379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lawnjelly",
      "html_url": "https://github.com/lawnjelly",
      "followers_url": "https://api.github.com/users/lawnjelly/followers",
      "following_url": "https://api.github.com/users/lawnjelly/following{/other_user}",
      "gists_url": "https://api.github.com/users/lawnjelly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lawnjelly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lawnjelly/subscriptions",
      "organizations_url": "https://api.github.com/users/lawnjelly/orgs",
      "repos_url": "https://api.github.com/users/lawnjelly/repos",
      "events_url": "https://api.github.com/users/lawnjelly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lawnjelly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-12-08T13:43:46Z",
    "updated_at": "2020-05-26T09:43:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHigh computation in gdscript.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile gdscript is great for many purposes, it sacrifices performance for the portability and ease of use. I have come across this as a limitation in computationally intensive tasks before.\r\n\r\nI came upon this thread, where people discuss the issue:\r\nhttps://www.reddit.com/r/godot/comments/e71g7x/high_performance_code_in_gdscript/\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nOne of the fundamental changes that can increase the speed of code (in any language) is to move from a paradigm of functions that operate on a single item of data, to those that operate on multiple data. As well as encouraging a more optimal layout of the data, this often allows compilers to better optimize the procedure. It also offers more opportunities for autovectorization (generation of SSE and Neon SIMD code), which can offer significant speedup.\r\n\r\n_To distinguish between actual SIMD cpu instructions and the multiple data from one instruction paradigm, I will call the latter 'ranged' functions._\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI therefore made a quick mockup module yesterday in c++, testing an equivalent function against 'normal' gdscript. The functions take the form:\r\n\r\n`function_name(arguments, range_from, range_to)`\r\n\r\n```\r\nconst size = 5000000\r\n\r\nfunc TestSIMD():\r\n\tvar fast_arr = FastArray_4f32.new()\r\n\tfast_arr.reserve(size)\r\n\r\n\tvar norm_arr = []\r\n\t\r\n\tfor i in range (size):\r\n\t\tfast_arr.write(i, Quat(1, 1, 1, 1))\r\n\t\tnorm_arr.push_back(Quat(1, 1, 1, 1))\r\n\t\r\n\tvar before = OS.get_ticks_msec()\r\n\tfast_arr.value_add(Quat(1, 1, 1, 1), 0, size)\r\n\tvar after = OS.get_ticks_msec()\r\n\t\r\n\tvar q_add = Quat(1, 1, 1, 1)\r\n\tvar before2 = OS.get_ticks_msec()\r\n\tfor i in range (size):\r\n\t\tnorm_arr[i] += q_add\r\n\tvar after2 = OS.get_ticks_msec()\r\n\t\r\n\r\n\tvar q = fast_arr.read(0)\r\n\tprint(\"result : \" + str(q))\r\n\t\r\n\tprint(\"timing SIMD \" + str(after - before))\r\n\tprint(\"timing array \" + str(after2 - before2))\r\n```\r\nThe timings on my PC give:\r\n`timing ranged 7ms`\r\n`timing array 1953ms`\r\n\r\nThis is a 279x speed increase. _(This is not exactly like for like, as the module is built with -O3 and godot is built with release_debug, but you get the idea)._\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have made a proof of concept module:\r\nhttps://github.com/lawnjelly/godot-simd\r\n\r\nSome of the most commonly used data structures in godot are the float Vector2, Vector3, and Vector4 (only available as a Quat / Plane etc currently rather than explicit vec4). These work reasonably with the 4 value 32 bit float SIMD registers available on nearly all modern computers. As a result I built the proof of concept to work with this unit, which corresponds to _m128 in SSE.\r\n\r\nWith a Vector3 this does represent a potential 'waste' of the 4th float, however this is probably outweighed by the gains in speed due to alignment. The 4th float is also useful to return a result, I have used it to store lengths, square lengths and dot products for example.\r\n\r\nAlthough some of the specific functions I have added rely on this arrangement, you can also use a SoA (structure of arrays) with the functionality if desired.\r\n\r\n## Some notes\r\n* I have not yet added thread safety\r\n* I am currently using stl::vector, but this is easy to swap out\r\n* I am also intending to add variable stride versions\r\n* Any SSE / Neon code (in separate .cpps) can be compiled out with #defines, most of the reference functions are auto-vectorized by the compiler. (Just adding reference code for auto-vectorization would work great in most cases if we didn't want to add any intrinsics, but it is worth noting that some instructions such as inverse sqrt cannot be auto-vectorized and may need the intrinsic version to access the SIMD instruction.)\r\n\r\nI am also not proposing that this should be a finished product, I am open to ideas on how best to add this type of functionality, down to naming conventions etc. willnationsdev pointed out the difficulty of adding new types to Variant, so I've added a new object type derived from Reference, this seems to work. There may be better ways of passing some of the arguments.\r\n\r\nOne important consideration may be how to best get data in / out of the system to actually *do something* with the result. This is a common theme with SIMD. As such I have added proof of concept functions to fill the fast array from PoolVector3 and return the result to a PoolVector3.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCannot be worked around with script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'll probably round this out as a module even if it is decided not to put something like this in core. However, for something so simple, I think it offers a lot of potential, both to people making games, tools, and also potentially for use from other parts of the core.\r\n\r\n## Functions already included\r\n* read / writing elements and reserving array\r\n* read / writing as pool arrays\r\n* add, subtract, multiply, divide\r\n* dot, cross, unit cross, normalize\r\n* length, length squared\r\n* sqrt, inverse sqrt, reciprocal\r\n* xform, inverse xform\r\n\r\n## More timings (for those interested to compare intrinsics)\r\nThis time with a PoolVector3Array for gdscript, to make things fairer, and comparing sqrt functions for 20,000,000 sqrts, using either normal gdscript, ranged non-SSE code, and ranged SSE1 code:\r\n\r\n`timing gdscript 8228ms`\r\n`timing ranged 86ms`\r\n`timing SSE 8ms`\r\n\r\nThis is over 1000x speed increase with SSE. I have looked at the potential for SSE at the same time while doing the ranged functions. Up to SSE2 can be used with no need for CPU detection on 64 bit x86, as it is mandated. With CPU detection we could use AVX512, which would theoretically be up to 4000x faster (although memory speed might become more a bottleneck).\r\n\r\nThings like sqrt and reciprocal sqrt, length calculations and normalization really get a lot faster because SIMD uses a slightly less accurate but much faster version than standard sqrt. Afaik these can only be accessed by intrinsics, I don't think you can get the autovectorizer to make them for you, as there is a small loss of accuracy.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/290/reactions",
      "total_count": 21,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 6,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/289",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/289/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/289/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/289/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/289",
    "id": 534437257,
    "node_id": "MDU6SXNzdWU1MzQ0MzcyNTc=",
    "number": 289,
    "title": "AnimationPlayer track: track visualisation should also visualize Update Mode, Interpolation Mode or Easing",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-07T18:43:53Z",
    "updated_at": "2019-12-07T21:57:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Projects that use AnimationPlayer node a lot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was on the fence submitting the track visualization as bug, because it leads to false judgement and shows stuff that is not actually happening:\r\nWhen you change alpha or color between two keys, the track accurately visualizes the change (see alpha -> white -> alpha -> red transition below). However, when you change Update Mode, Interpolation Mode or Easing, the track visualization dos not reflect the setting, which makes it **very** easy to oversee a mistake, or simply confuse people. This makes the track visualization imho more harmful than helpful:\r\n![animation_track_previs](https://user-images.githubusercontent.com/47016402/70379076-a5d7f000-1928-11ea-8817-f46472bd5a05.gif)\r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMake the track reflect the Update Mode, Interpolation Mode or Easing setting as well, or remove the track visualization all together.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSee above how it currently works. If the track visualization would also reflect Update Mode, Interpolation Mode or Easing setting, we would not see a gradient between keys on the track once I changed the setting from \"linear\" to \"Nearest\" (Interpolation Mode), or \"Linear\" to \"Zero\" (Easing)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nImpossible.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I would know.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would lead to less confusion and potential error for all users of the AnimationPlayer. Don't download anti-confusion medicine in the library, people!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/289/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/288",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/288/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/288/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/288/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/288",
    "id": 534421653,
    "node_id": "MDU6SXNzdWU1MzQ0MjE2NTM=",
    "number": 288,
    "title": "Compilation - Separate the Editor and the Export Templates, Into Their Own Rules",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-07T16:26:49Z",
    "updated_at": "2019-12-08T12:38:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Possible Solution \\ Idea**\r\nokay i've come to the conclusion that this is how this should be handled\r\n\r\n\r\nEditor_Debug (use the current \"debug\" rules) (debug symbols, runtme checks, allow the debugger to be attached)\r\nEditor_Release (use the current \"release_debug\" rules)\r\n\r\nExportTemplate_Debug (uses the old rules from \"release_debug\")\r\nExportTemplate_Release (the godot editor, has no use for the \"release\" alone, so we move it here)\r\n\r\ni think this makes so much more sense, and it's no longer a giant clusterfuck\r\n\r\nor separate them as **Editor** and **ExportTemplate**, and apply the specific build rules to the \"release\" and \"debug\" targets\r\n___\r\n**Describe the project you are working on:**\r\nteaching people how to compile the engine easily, right now it all feels a bit obtuse\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\npeople can't tell the difference between release_debug and release, functionally they do two completely different things, or are not ment to be used togheter at all\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nit stops people from making issues like this one\r\nhttps://github.com/godotengine/godot/issues/28849\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\njust rename some text\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nit's just a rename change\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno, or at least, i don't know, it's just some text change\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nyes, it's related to the compilation stage\r\n\r\n___\r\nI find the naming convention to be extremelly confusing. I've seen a ton of cases, of other users who have also been confused because of this - we can assume that this happens all the time, most people just don't report this problem, as they don't even realize, that it's a problem\r\n\r\nthis is a very subtle issue, and it should be fixed\r\n\r\n**Rename \"Release_Debug\" to \"Release\"**\r\n- these are builds of godot, which are shared around\r\n- official godot builds use this\r\n- the _debug is really confusing, usually it's standard to use \"debug\" or \"release\", not both\r\n- seriously you have no idea how much that extra \"_debug\" throws you off, just call it debug\r\n\r\n**Rename \"Release\" to \"ExportTemplate\"**\r\n- has nothing to do with the editor itself\r\n- actually removes the tools\r\n- is only used to export games, that's it\r\n- has an immediate clarity now\r\n- confuses new users, who have no idea what this is actually supposed to do\r\n- users assume that release_debug is heavier, so they do a release, which is plain wrong\r\n- users are confused, when godot throws up some random message\r\n- users get confused, they assume this is inconsistent behaviour\r\n- users assume that there's something wrong with godot\r\n\r\ni think that this is a very obvious change and it woud improve the overall clarity and the usability as a whole\r\n\r\nhttps://github.com/godotengine/godot/issues/28849\r\n___\r\n**edit 2:** after some more thought\r\nRename **Debug** to **DevelopmentBuild**\r\nRename **Release_Debug** to **OptimizedBuild**\r\nRename **Release** to **ExportTemplate**\r\n\r\n___\r\n**edit 3:** after some more thought\r\nRename **Debug** to **DevelopmentBuild**\r\nRename **Release_Debug** to **OptimizedBuild**\r\n\r\nseparate ExportTemplate into two\r\n**ExportTemplate_Release\r\nExportTemplate_Debug**",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/288/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/287",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/287/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/287/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/287/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/287",
    "id": 533890580,
    "node_id": "MDU6SXNzdWU1MzM4OTA1ODA=",
    "number": 287,
    "title": "Split AnimationPlayer play() method into start() and resume()",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2019-12-06T10:54:41Z",
    "updated_at": "2020-11-22T21:51:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n2d games using a lot of animationplayers\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently `play()` method doesn't adhere to single responsibility principle. If user calls `play()` while there is no animation playing it acts as `start_animation()` where as when user calls it when animation is already playing it acts as `resume_animation()`. This dual behaviour is not desired by users as it requires a condition statement in order to use `start_animation` functionality of `play()`. It is also inconstant across the engine as for example `AudioStreamPlayer` method `play()` method has only singular functionality of `start_playing()`. This is confusing to understand and breaks intuitiveness of the engine. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nSplinting `play()` into `start()` and `resume()` as well as splitting `stop()` into `pause()` and `stop()` will give use finer control of the behaviour they would like to see from the method without requiring them to invoke conditional statements. It can be a solid ground for adding the same functionality to other nodes in a future like mentioned earlier `AudioStreamPlayer`\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis is what happens when user calls `play()` method inside the `_process` function \r\n\r\n![1](https://user-images.githubusercontent.com/30668026/70317239-4b01a400-1815-11ea-8f08-ffb6509b77c0.gif)\r\n\r\nWith proposed changes this is what will happen when user calls `start()` inside `_process`  function or `input events`. \r\n\r\n![2](https://user-images.githubusercontent.com/30668026/70317410-9ddb5b80-1815-11ea-9130-376a6bac7be3.gif)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nNo idea but it appears to be feasible as it was proposed in this issue https://github.com/godotengine/godot/issues/34125\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nit can be worked around via using few conditionals to restart animation but it's a pain in to work with and is very undesirable solution that is inconsistent with the way of how other nodes work in the engine. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes. This is very much improvement on faulty and confusing design of core feature. I believe that issue is important enough that should be brought back to main branch prior to 4.0 happening. Ideally in 3.2.1 or similar. Reason for this is that functionality was present in 3.0.6 version of a engine. I would go as far as to call it a bug being a result of untended change to `play()` function between releases.  It was then removed from the engine in 3.1 without any discussion and it would greatly improve the users ability to use those without having impact on existing projects. Any work around people did to gain the functionality discussed here would still work with new functionality. For example conditional that check if animation in playing and reset it would still work. This however would make future projects easier and code base less confusing. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/287/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/286",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/286/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/286/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/286/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/286",
    "id": 533374174,
    "node_id": "MDU6SXNzdWU1MzMzNzQxNzQ=",
    "number": 286,
    "title": "Add the ability to call GDScript code from JavaScript in HTML5 exports",
    "user": {
      "login": "davthedev",
      "id": 26961646,
      "node_id": "MDQ6VXNlcjI2OTYxNjQ2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26961646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davthedev",
      "html_url": "https://github.com/davthedev",
      "followers_url": "https://api.github.com/users/davthedev/followers",
      "following_url": "https://api.github.com/users/davthedev/following{/other_user}",
      "gists_url": "https://api.github.com/users/davthedev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davthedev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davthedev/subscriptions",
      "organizations_url": "https://api.github.com/users/davthedev/orgs",
      "repos_url": "https://api.github.com/users/davthedev/repos",
      "events_url": "https://api.github.com/users/davthedev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davthedev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "Faless",
      "id": 1687918,
      "node_id": "MDQ6VXNlcjE2ODc5MTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1687918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Faless",
      "html_url": "https://github.com/Faless",
      "followers_url": "https://api.github.com/users/Faless/followers",
      "following_url": "https://api.github.com/users/Faless/following{/other_user}",
      "gists_url": "https://api.github.com/users/Faless/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Faless/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Faless/subscriptions",
      "organizations_url": "https://api.github.com/users/Faless/orgs",
      "repos_url": "https://api.github.com/users/Faless/repos",
      "events_url": "https://api.github.com/users/Faless/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Faless/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "Faless",
        "id": 1687918,
        "node_id": "MDQ6VXNlcjE2ODc5MTg=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/1687918?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Faless",
        "html_url": "https://github.com/Faless",
        "followers_url": "https://api.github.com/users/Faless/followers",
        "following_url": "https://api.github.com/users/Faless/following{/other_user}",
        "gists_url": "https://api.github.com/users/Faless/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Faless/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Faless/subscriptions",
        "organizations_url": "https://api.github.com/users/Faless/orgs",
        "repos_url": "https://api.github.com/users/Faless/repos",
        "events_url": "https://api.github.com/users/Faless/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Faless/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-05T14:07:57Z",
    "updated_at": "2020-09-23T15:31:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIntegrating a technical demo (minimal 2D game) with the AirConsole (airconsole.com) service to see how feasible it is to bridge a Godot game with it. The service already supports Unity and Construct as well as a raw Javascript API.\r\nAirConsole is an online, local multiplayer gaming platform where the actual game runs in a web browser and players use their smartphones as gamepads to control the game. Gamepad-to-game communication goes over Internet and is totally managed by the service. A simple system of pairing codes allows players to quickly join without the need to install anything on their phones.\r\nThe transmission of \"key presses\" from players' smartphones goes through their system and arrives to the game through a JavaScript API.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI cannot directly call functions or events from the JavaScript world to the Godot HTML5 game.\r\nThe opposite (Godot to JavaScript function call) is possible by calling the appropriate GDScript singleton.\r\n\r\nAccording to some posts, there is a hacky way to overcome this by polling JS variable changes & reacting on it. But this limits the events possibility to the game loop framerate (60fps).\r\nIn the AirConsole paradigm, player input arrives through the JavaScript API. It would be better to process it in real time rather than waiting for the next game loop iteration.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI can pass input from the controllers to the game in near-realtime, and not use the hacky polling solution that limits the input framerate to 60fps.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nPrinciple is simple:\r\n\r\n- JS code calls the API function\r\n- Callback is received in the GDScript code, like an event (not tied to game loop iteration) and runs whatever code is desired\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nExposing an API that a JS can function can call, triggering a GDScript function call.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere is the polling possibility explained above. But requires overhead and limits input framerate.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nCan such integration of API be done using an add-on? It looks like a core communication principle.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/286/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/285",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/285/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/285/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/285/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/285",
    "id": 533005955,
    "node_id": "MDU6SXNzdWU1MzMwMDU5NTU=",
    "number": 285,
    "title": "Add autowrap field to RichTextLabel",
    "user": {
      "login": "Ev1lbl0w",
      "id": 6501975,
      "node_id": "MDQ6VXNlcjY1MDE5NzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6501975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ev1lbl0w",
      "html_url": "https://github.com/Ev1lbl0w",
      "followers_url": "https://api.github.com/users/Ev1lbl0w/followers",
      "following_url": "https://api.github.com/users/Ev1lbl0w/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ev1lbl0w/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ev1lbl0w/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ev1lbl0w/subscriptions",
      "organizations_url": "https://api.github.com/users/Ev1lbl0w/orgs",
      "repos_url": "https://api.github.com/users/Ev1lbl0w/repos",
      "events_url": "https://api.github.com/users/Ev1lbl0w/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ev1lbl0w/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-04T23:33:13Z",
    "updated_at": "2020-09-24T18:02:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPokemon-like Engine on Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLack of the `autowrap` field in RichTextLabel *(being present in Label)*\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nDue to the nature of text appearing in Pokemon games, I need to take control of most operation regarding RichTextLabel, to fully recreate the text flow. Because I use custom escape sequences *(like `\\|` to wait 1 second)*, some words might wrongfully wrap *(for example, suppose I have the string `\\|.\\|.\\|.interesting`, which the intended behaviour is to show the word **...interesting** only after 3 seconds. While I wait for the text to appear, Godot treats the data internally as one word. Thus, while the `\\|` aren't removed, it triggers wrapping of that word)*. Having this feature allows me to disable this behaviour and fix my problem.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nhttps://www.youtube.com/watch?v=iDeIxkgHeDo\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nImplement the same behaviour already present in the `label.cpp` with the `autowrap` variable\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI believe a workaround for this is just duck-tapping the problem.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is something that can only be implemented in the core, AFAIK",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/285/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/282",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/282/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/282/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/282/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/282",
    "id": 532629281,
    "node_id": "MDU6SXNzdWU1MzI2MjkyODE=",
    "number": 282,
    "title": "Editor project data should be stored in project folder, not in \\Godot Engine\\editor_data\\projects",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-12-04T11:39:18Z",
    "updated_at": "2020-09-28T13:56:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot applicable.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMoving around project folder and renaming it resets everything about project's editor state, as a new `editor_data\\projects` is generated based on path and name. This also makes it impossible to store that folder in VCS, which can be useful for personal projects.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt is a common practice among programming software to store state for each project inside the project folder, in a file, like `.editorconfig`, or under a subfolder, like `.idea`, `.vs`, `.git`, `.hg`, etc. This makes project folder a fully contained environment to start working on the project.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nNot applicable.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThere are two ways this can be implemented:\r\n\r\n* As a default behavior\r\n  1. When creating a new project, setup a `.godot` folder inside the project folder immediately\r\n  2. When opening an existing project, look for `.godot` folder inside the project folder\r\n  3. If none is present, check the old path `editor_data\\projects` for a pre-existent folder in old form\r\n\r\n* As a project setting\r\n  1. When creating a new project, allow user to check whether to store editor data locally or in `editor_data\\projects`, and create the corresponding folder (I suggest setting the checkbox to TRUE by default)\r\n  2. When opening an existing project, check `project.godot` for setting and then look for the corresponding folder\r\n  3. If the folder does not exist, create it\r\n  4. If the setting does not exist, assume default behavior, save setting and create the corresponding folder\r\n  5. When changing the setting from within the editor, move current folder's content into the new folder, save setting, then ask the user to restart the editor (I assume, this is required)\r\n\r\nI understand, there might be a problem when opening the same project with different versions of Godot, as currently each Godot folder stores its own settings for each project. If this is important, some sanity checks must be implemented, when working with local editor folder. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it's not a part of user space.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a part of internal editor logic.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/282/reactions",
      "total_count": 9,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/281",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/281/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/281/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/281/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/281",
    "id": 532062229,
    "node_id": "MDU6SXNzdWU1MzIwNjIyMjk=",
    "number": 281,
    "title": "AI Behavior Tree should be on Godot",
    "user": {
      "login": "wijat",
      "id": 8220843,
      "node_id": "MDQ6VXNlcjgyMjA4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8220843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wijat",
      "html_url": "https://github.com/wijat",
      "followers_url": "https://api.github.com/users/wijat/followers",
      "following_url": "https://api.github.com/users/wijat/following{/other_user}",
      "gists_url": "https://api.github.com/users/wijat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wijat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wijat/subscriptions",
      "organizations_url": "https://api.github.com/users/wijat/orgs",
      "repos_url": "https://api.github.com/users/wijat/repos",
      "events_url": "https://api.github.com/users/wijat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wijat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-03T15:22:50Z",
    "updated_at": "2019-12-27T23:19:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am making a level pass level game, have AI enemy and BOSS\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUnity and Unreal have AI Behavior Tree Editor, I come from Unreal, It is very important for a game maker to make a complex AI. Now I can only use plugin for this feature. Create an Editor to let game maker more easy to manager their Behavior Tree nodes. \r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf Godot has some kind of AI Behavior Tree Editor, It will more easy to make AI and change AI logic.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![external-content duckduckgo com](https://user-images.githubusercontent.com/8220843/70063424-b20b3700-1622-11ea-8c58-102322c2a88b.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can make it by script but should make many lines to do it. And cause a big mess up.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is very often meet when you make a game AI.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/281/reactions",
      "total_count": 27,
      "+1": 20,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/280",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/280/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/280/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/280/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/280",
    "id": 531756578,
    "node_id": "MDU6SXNzdWU1MzE3NTY1Nzg=",
    "number": 280,
    "title": "Improve asset importing and file renaming speeds for projects with a lot of files",
    "user": {
      "login": "MightyPrinny",
      "id": 18746022,
      "node_id": "MDQ6VXNlcjE4NzQ2MDIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18746022?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MightyPrinny",
      "html_url": "https://github.com/MightyPrinny",
      "followers_url": "https://api.github.com/users/MightyPrinny/followers",
      "following_url": "https://api.github.com/users/MightyPrinny/following{/other_user}",
      "gists_url": "https://api.github.com/users/MightyPrinny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MightyPrinny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MightyPrinny/subscriptions",
      "organizations_url": "https://api.github.com/users/MightyPrinny/orgs",
      "repos_url": "https://api.github.com/users/MightyPrinny/repos",
      "events_url": "https://api.github.com/users/MightyPrinny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MightyPrinny/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-03T06:30:36Z",
    "updated_at": "2020-01-31T03:17:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWe have a huge community made game maker project with assets from over 50 people + a lot of assets already in the base game, I wanted to see if we could move our engine to Godot for future games.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI added a lot of assets to a new project to see how Godot would handle it, I took the assets from our game maker project and since game maker stores every animation frame individually I ended up with thousands of files, importing everything took longer than loading the project in game maker(that takes very long too).\r\n\r\nGodot just couldn't handle that much, now adding new assets and renaming files takes several minutes,  between audio and image files I had 52960 files in total counting the .import files.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI could move the project over to Godot for future games if this wasn't an issue, I know that if we were to do that we would have much less files since sprites would be in sprite sheets, but I didn't include any of the the background files from our project and the project isn't finished, there's a lot to be done, so I'm not sure if it the engine could handle a project of that size even with sprite sheets.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI don't think it's necessary since it's about optimization.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nSorry, I can't help much with this.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nDefinitely not.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an optimization.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/280/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/279",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/279/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/279/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/279/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/279",
    "id": 531704142,
    "node_id": "MDU6SXNzdWU1MzE3MDQxNDI=",
    "number": 279,
    "title": "Allow creating arbitrary data structures in GDScript",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-03T04:08:23Z",
    "updated_at": "2020-12-20T07:59:10Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Games that require data structures beyond the built-in types. For example, [Vector4](https://github.com/aaronfranke/GodotExtraMath/blob/master/ExtraMath/Vector4.cs) (discussion in https://github.com/godotengine/godot-proposals/issues/629), [Basis25D](https://github.com/godotengine/godot-demo-projects/blob/master/mono/2.5d/addons/node25d-cs/Basis25D.cs), [complex numbers](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.complex), and as of writing, Vector2i/3i (will be in core in 4.0).\r\n\r\n**Describe the problem or limitation you are having in your project:** Currently, this is [not possible in GDScript](https://github.com/godotengine/godot-demo-projects/blob/master/misc/2.5d/addons/node25d/.broken-gdscripts/Basis25D.gd). You can still do the same math, but [not as neatly](https://github.com/godotengine/godot-demo-projects/blob/master/misc/2.5d/addons/node25d/node_25d.gd#L13).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nArbitrary data structures in GDScript would mean that core not having any given type would not be nearly as big of a deal. It would mean that users can simply download a `vector4.gd` file and then they would have Vector4 available in their project, without it needing to be part of the engine.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nImagine any of the above C# examples, but in GDScript.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nThere are many things that would need to be solved first in GDScript to achieve this.\r\n\r\n* Structures need to reference other instances of itself, so GDScript needs to not have issues with cyclic errors: https://github.com/godotengine/godot/issues/21461\r\n\r\n* ~~To allow for things like `Vector4.ONE`, structures need to have `static const` or readonly `static var` or similar depending on how it's implemented. https://github.com/godotengine/godot/issues/6840~~\r\n\r\n* Structures should have operator overloading, so you can specify things like multiplying a Vector4 times a float, equality checks with `==`, and array accessing such that `my_vector4_instance[0] == my_vector4_instance.x`. https://github.com/godotengine/godot/issues/23488 (The issue is closed because string conversion overloading was added, but the more general issue mentioned here isn't solved).\r\n\r\n* Of course, structures themselves need to be added. These should behave like C# or Godot's built-in types, pass-by-value (copies), no references/pointers. They would be declared with a keyword similar to `class_name` (`struct`? `struct_name`?), but do not `extend` anything. Icons might still be useful if GDScript structs were usable within VisualScript or something.\r\n\r\nSo, right now this would be a lot of work to implement, but it's certainly an idea worth discussing.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou can easily do it in C#, but not in GDScript. Of course one option is to just tell everyone to use C# if they need custom data structures, but I don't think that's an ideal solution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe point of this proposal is to keep bloat out of core, by allowing users to make their own structures.\r\n\r\nKind-of related: https://github.com/godotengine/godot-proposals/issues/209 and https://github.com/godotengine/godot-proposals/issues/22",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/279/reactions",
      "total_count": 21,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/278",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/278/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/278/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/278/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/278",
    "id": 531651032,
    "node_id": "MDU6SXNzdWU1MzE2NTEwMzI=",
    "number": 278,
    "title": "Add a single method to Node class to perform Make Local function of the Editor.",
    "user": {
      "login": "wyattbiker",
      "id": 930478,
      "node_id": "MDQ6VXNlcjkzMDQ3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/930478?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyattbiker",
      "html_url": "https://github.com/wyattbiker",
      "followers_url": "https://api.github.com/users/wyattbiker/followers",
      "following_url": "https://api.github.com/users/wyattbiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyattbiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyattbiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyattbiker/subscriptions",
      "organizations_url": "https://api.github.com/users/wyattbiker/orgs",
      "repos_url": "https://api.github.com/users/wyattbiker/repos",
      "events_url": "https://api.github.com/users/wyattbiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyattbiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-03T01:34:49Z",
    "updated_at": "2019-12-03T07:34:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGeneral scripting of Controls\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's not obvious but Make Local requires setting 2 properties to get it to work from script:\r\nI had asked for help in the Godot forum how to Make Local from script. It was suggested that I use the following code which worked. E.g.\r\n\r\n```\r\nsome_node.filename=''\r\nsome_node.owner=get_tree().get_edited_scene_root()\r\n```\r\n\r\nI propose to create a node method called `[some_node].make_local(Node: scene_owner)` to perform the same function as the menu Make Local.\r\n\r\n![image](https://user-images.githubusercontent.com/930478/70012100-5d43bf80-1541-11ea-8d77-0f771f8932cc.png)\r\n\r\nIt is hard to figure out unless one looks at the c++ source code which thankfully the reply did this. Here is the discussion with the c++ steps:\r\nhttps://godotengine.org/qa/56273/how-do-i-make-local-a-node-programmatically-via-script?show=56295#c56295\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWould save hours of trying to figure it out.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nn/a\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell the two lines above would do it. But it is not obvious nor documented anywhere.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nShould be core part of Node\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/278/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/277",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/277/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/277/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/277/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/277",
    "id": 530793703,
    "node_id": "MDU6SXNzdWU1MzA3OTM3MDM=",
    "number": 277,
    "title": "AStar function to get partial path if end point is unreachable",
    "user": {
      "login": "giulianob",
      "id": 92303,
      "node_id": "MDQ6VXNlcjkyMzAz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/92303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulianob",
      "html_url": "https://github.com/giulianob",
      "followers_url": "https://api.github.com/users/giulianob/followers",
      "following_url": "https://api.github.com/users/giulianob/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulianob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulianob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulianob/subscriptions",
      "organizations_url": "https://api.github.com/users/giulianob/orgs",
      "repos_url": "https://api.github.com/users/giulianob/repos",
      "events_url": "https://api.github.com/users/giulianob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulianob/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-12-01T20:52:46Z",
    "updated_at": "2020-11-09T11:42:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d tile based game where character primarily walks through point and click.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf the player clicks on a tile that they cannot reach the current A* implementation will just return an empty path. I would like the player to walk as close as possible to wherever was clicked instead. There is the \"get_closest_point\" function but it doesnt help when the player clicks on a point that is is the AStar grid but is not currently reachable from the player's position.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAStar will allow returning partial paths which would help the movement in my game tremendously. Right now I will probably have to replace with another AStar implementation that supports this.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![image](https://user-images.githubusercontent.com/92303/69920098-dc59ca80-1451-11ea-810a-ca7a4ef2a91c.png)\r\n\r\nAssume that the top-left green square is the player and the black squares are walls.\r\nIf I were to click on the bottom-right dark green square then currently AStar should just not return a path at all. Instead, I would like for it to return the path that leads the player to the purple square since that's the closest position that the player can reach.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI believe this is a matter of keeping track of the node with the lowest \"estimated cost\" during the `_solve` function of AStar and returning a path to that node if it doesn't find a path to the goal. This could be another function like `get_partial_point_path` or potentially a bool/enum passed into the current `get_point_path` function.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, I would have to re-implement or use a completely different A* implementation.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is just improved functionality on the current A* class.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/277/reactions",
      "total_count": 9,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/270",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/270/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/270/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/270/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/270",
    "id": 530550349,
    "node_id": "MDU6SXNzdWU1MzA1NTAzNDk=",
    "number": 270,
    "title": "Support Java 11 when building Android export templates",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/2",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2/labels",
      "id": 5482292,
      "node_id": "MDk6TWlsZXN0b25lNTQ4MjI5Mg==",
      "number": 2,
      "title": "4.1",
      "description": "This proposal is planned to be implemented in 4.1 or later",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2020-05-31T14:29:07Z",
      "updated_at": "2021-01-08T05:26:43Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 2,
    "created_at": "2019-11-30T08:31:36Z",
    "updated_at": "2020-09-18T21:20:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "\r\n\r\n**Describe the project you are working on:** I've written [scripts to help automate the building of Godot](https://github.com/aaronfranke/Linux-tools/blob/master/all-distros/build-godot-mono), and I'd like to do this with Android export templates, but I've hit an... inconvenience.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nhttps://docs.godotengine.org/en/latest/development/compiling/compiling_for_android.html\r\n\r\n>Android SDK (command-line tools are sufficient)\r\n>JDK 8 (either OpenJDK or Oracle JDK)\r\n>    JDK 9 or later are not currently supported\r\n\r\nIf I try to install the Android SDK through my package manager, it wants to install Java 11:\r\n\r\n```\r\n$ sudo apt install android-sdk\r\n...\r\nThe following additional packages will be installed:\r\n  default-jdk-headless default-jre-headless openjdk-11-jdk-headless openjdk-11-jre-headless\r\n```\r\n\r\nWhat I would like to do is have a script which uses a system-wide installation of the Android SDK, instead of having to manually download a ZIP archive of the SDK tools and modify every script to point to the SDK, or have the script download and manage its own copy of the SDK.\r\n\r\nUnfortunately, this isn't possible if the version installed by the package manager uses Java 11 and Godot doesn't support that.\r\n\r\nI would appreciate it if Godot updated its Android support to allow Java 11. Bonus points if we can support both Java 8 and Java 11 at the same time.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/270/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/269",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/269/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/269/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/269/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/269",
    "id": 530545007,
    "node_id": "MDU6SXNzdWU1MzA1NDUwMDc=",
    "number": 269,
    "title": "Choosing a project folder by minor version of Godot Engine",
    "user": {
      "login": "TheMoye",
      "id": 46683101,
      "node_id": "MDQ6VXNlcjQ2NjgzMTAx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46683101?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheMoye",
      "html_url": "https://github.com/TheMoye",
      "followers_url": "https://api.github.com/users/TheMoye/followers",
      "following_url": "https://api.github.com/users/TheMoye/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheMoye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheMoye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheMoye/subscriptions",
      "organizations_url": "https://api.github.com/users/TheMoye/orgs",
      "repos_url": "https://api.github.com/users/TheMoye/repos",
      "events_url": "https://api.github.com/users/TheMoye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheMoye/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-30T07:28:48Z",
    "updated_at": "2019-12-03T12:20:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAll my projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use several versions of Godot in parallel: 3.1, 3.1.1.1, 3.2 and 4.0.\r\nTo avoid incompatibility problems, each project is placed in a projects folder specific to the version of Godot used.\r\nUnfortunately, if the project manager makes a good distinction between projects in the \"Godot 4\" folder and the \"Godot 3.1\", \"Godot 3.1.1\", \"Godot 3.2\" folders, the three \"Godot 3.x\" folders are listed when I launch the project manager of a  3.x Godot version.\r\nEven if the full path of the project is indicated, the list of projects is unnecessarily poluted.\r\n\r\n![GodotPoluted2](https://user-images.githubusercontent.com/46683101/69897291-6159bc80-134a-11ea-818c-e90adb2c7d4f.jpg)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nSeparating projects created with different sub-versions of Godot would prevent inadvertently opening and modifying a project with a different version of Godot than the one planned.\r\nThis would make project management more readable.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIntroduce the same separation between projects created with Godot 3.x and 4.x.\r\n\r\n![GodotPoluted3](https://user-images.githubusercontent.com/46683101/69897363-5e130080-134b-11ea-8820-5628aef48833.jpg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/269/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/267",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/267/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/267/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/267/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/267",
    "id": 530350543,
    "node_id": "MDU6SXNzdWU1MzAzNTA1NDM=",
    "number": 267,
    "title": "Show the transform operation numbers in 2D",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-29T13:36:05Z",
    "updated_at": "2019-11-29T13:36:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe new ruler tool is very useful, but only when measuring distance. When it comes to moving objects, you still don't know how much you are moving them, which makes precise transformations difficult.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIn 3D editor, when you move/rotate/scale something, you get an information about how much it is moved/rotated/scaled. It would be extremely useful to have this in 2D too. I would know precisely how much I move things instead of relying on intuition.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![y41i88GVlD](https://user-images.githubusercontent.com/2223172/69872242-2ce7f100-12b5-11ea-9d65-99d8074baa63.gif)\r\n(imagine this is 2D)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nProbably porting code from 3D editor to 2D, with some changes like less dimensions etc.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis requires a plugin.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHaving this only in asset library would be a joke.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/267/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/266",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/266/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/266/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/266/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/266",
    "id": 530346781,
    "node_id": "MDU6SXNzdWU1MzAzNDY3ODE=",
    "number": 266,
    "title": "Move all polygon points / center them at origin",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-29T13:27:23Z",
    "updated_at": "2020-09-17T12:26:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGame with CollisionPolygons2D.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis actually does not apply to this particular project, but my overall experience with CollisionPolygons2D. Their (probably) biggest problem is that when you create a polygon, you are stuck with it. The points are always in the same relative position to origin, unless of course you move them manually one by one by the same offset. Which is most of the time unreasonable thing to do. It's also a shortcoming of not being able to select multiple points, but that's another thing.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nSo to alleviate that, I suggest that we should be able to change the polygon's \"offset\" relative to the origin. I mean, drag all the points at once, without changing the polygon's actual position. Also, there should be an option to automatically set the offset to value that makes the polygon's origin point be in the center of the shape.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![SowP01uy0L](https://user-images.githubusercontent.com/2223172/69871602-83ecc680-12b3-11ea-8b7c-f6e2c54e0246.gif)\r\n(imagine that the gizmo represent's this polygon's `position`.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nBeing able to move the polygon \"offset\" would be probably a new tool in Polygon2D editor. Also centering the polygon would be done with a button. Other than that it's some simple vector maths.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, you can move all the points using a script, but you can't do that using CanvasItem editor without a plugin, which is more complex to do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPolygon2Ds just need this built-in.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/266/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/265",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/265/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/265/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/265/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/265",
    "id": 530294085,
    "node_id": "MDU6SXNzdWU1MzAyOTQwODU=",
    "number": 265,
    "title": "TileSet Editor: Add more copy and paste functions",
    "user": {
      "login": "norton-corbett",
      "id": 58308005,
      "node_id": "MDQ6VXNlcjU4MzA4MDA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58308005?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/norton-corbett",
      "html_url": "https://github.com/norton-corbett",
      "followers_url": "https://api.github.com/users/norton-corbett/followers",
      "following_url": "https://api.github.com/users/norton-corbett/following{/other_user}",
      "gists_url": "https://api.github.com/users/norton-corbett/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/norton-corbett/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/norton-corbett/subscriptions",
      "organizations_url": "https://api.github.com/users/norton-corbett/orgs",
      "repos_url": "https://api.github.com/users/norton-corbett/repos",
      "events_url": "https://api.github.com/users/norton-corbett/events{/privacy}",
      "received_events_url": "https://api.github.com/users/norton-corbett/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-29T11:19:40Z",
    "updated_at": "2020-04-27T10:09:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNo project, just experiments\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSetting up complex autotiles is very time consuming, largely due to the absence of sensible copy and paste functions.\r\n\r\nIn a recent project for example, I set up the collision polygons for a large 3x3 autotile.\r\n\r\n- Many of the polygons were identical or very similar but needed to be redrawn for each individual tile. This took about 30 minutes.\r\n\r\n- The occlusion map I needed to set up was almost exactly the same as the collision map, with only minor adjustments. Since there's no way to copy and paste the collision map to the occlusion map (they both essentially consist of a set of PoolVector2Arrays),, the work is effectively doubled. (Another 30 minutes spent on something that could have been a few clicks with copy + paste)\r\n\r\n- Adding an alternative tileset texture with the exact same bitmask, collision and occlusion settings means redoing _everything_ for the new texture! (Another hour spent on something that could have been a few clicks).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would greatly reduce the work and time cost of configuring tilesets.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA good start would be to duplicate the Copy/Paste/Erase functions from the Bitmask editing page to Collision, Occlusion and Navigation pages:\r\n\r\n![image](https://user-images.githubusercontent.com/54586051/69864034-11b9b900-1296-11ea-9e79-1db94746b8e4.png)\r\n\r\nCopying from one page to another should be supported.\r\n\r\nWhen it comes to copying polygons to and from individual tiles, the interface already theoretically supports this, but it just doesn't work. (Selecting a polygon and attempting to \"Paste\" in the property inspector currently results in a \"This property can't be changed\" alert box).\r\n\r\n![image](https://user-images.githubusercontent.com/54586051/69864365-a8867580-1296-11ea-9bda-3c93b52d7f20.png)\r\n\r\n![image](https://user-images.githubusercontent.com/54586051/69864402-c18f2680-1296-11ea-8143-aa78fbc3e556.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNot sure I haven't had a proper look at the code yet. I am assuming the logic will be similar to the existing Bitmask copy/paste function. Copying to and from the different types of polygon I assume will be straightforward as they all use PoolVector2Array for the underlying data.\r\n\r\nAs for the property inspector issue I have no idea (perhaps this counts as a separate issue entirely?)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCopy and paste is already supported on the Bitmask page, so it's expected that it would be available on the other pages.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/265/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/264",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/264/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/264/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/264/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/264",
    "id": 530100908,
    "node_id": "MDU6SXNzdWU1MzAxMDA5MDg=",
    "number": 264,
    "title": "Add a \"loop\" property to the VideoPlayer node",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-11-28T23:39:30Z",
    "updated_at": "2019-11-30T21:19:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProject with Level selection, character selection, viewports that are supposed to show looping video.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to play short looping video in my projects at numerous places (think level selection, character selection, character ingame portraits like in Starcraft2), and love how amazingly good the VideoPlayer Node is for playing video, however it does not have a loop bool which is a shame.\r\nSo for every single VideoPlayer Node I have to connect the finished signal to a script to play the short video again. It's more than annoying to say the least.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWith a loop property I would not have to create and connect a management node/and script for VideoPlayer nodes that does nothing but start the video once it's finished.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA \"loop video\"checkbox in the Inspector.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI can't write C++ code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used by anyone who wants to loop video. Since most of us are making games, the VideoPlayer node is actually often used to play short files that need looping, not necessarily movie-length files that don't need looping as much.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a tiny small but very meaningful improvement to an already existing great Node in Godot.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/263",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/263/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/263/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/263/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/263",
    "id": 530055415,
    "node_id": "MDU6SXNzdWU1MzAwNTU0MTU=",
    "number": 263,
    "title": "Remove `GD.load()` in C# in favor of `ResourceLoader.load()`",
    "user": {
      "login": "Torguen",
      "id": 19652075,
      "node_id": "MDQ6VXNlcjE5NjUyMDc1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19652075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Torguen",
      "html_url": "https://github.com/Torguen",
      "followers_url": "https://api.github.com/users/Torguen/followers",
      "following_url": "https://api.github.com/users/Torguen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Torguen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Torguen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Torguen/subscriptions",
      "organizations_url": "https://api.github.com/users/Torguen/orgs",
      "repos_url": "https://api.github.com/users/Torguen/repos",
      "events_url": "https://api.github.com/users/Torguen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Torguen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-28T19:29:56Z",
    "updated_at": "2020-10-08T15:03:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nJust learning\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem is that there is GD.load and ResourceLoader.load and the two methods do the same.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nEliminating the most appropriate (I think only ResourceLoader should remain) will avoid confusion among newbies.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/260",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/260/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/260/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/260/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/260",
    "id": 529456506,
    "node_id": "MDU6SXNzdWU1Mjk0NTY1MDY=",
    "number": 260,
    "title": "Add a method for instancing of nodes to be immediately added to the scene tree",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2019-11-27T16:33:08Z",
    "updated_at": "2020-09-26T13:39:34Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Related feature proposals: #349, #435, godotengine/godot#6521.\r\n\r\n---\r\n\r\n**Describe the project you are working on:**\r\nTurn-based artillery combat game. Also imagine bullet-hell-like games perhaps.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have many cases where I need to create nodes to be added to scene tree while instancing them:\r\n```gdscript\r\nfunc explode():\r\n\tvar explosion = load(\"res://explosion.tscn\").instance()\r\n\tadd_child(explosion)\r\n\texplosion.global_position = impact.global_position\r\n```\r\n```gdscript\r\nfunc launch(p_weapon):\r\n\tif p_weapon == \"missile\":\r\n\t\tvar missile = load(\"res://missile.tscn\").instance()\r\n\t\tadd_child(missile)\r\n\t\tmissile.global_position = character.global_position\r\n\t# ... and many others\r\n```\r\n\r\nSome usages lead to annoying programming errors which could be easily avoided, see https://github.com/godotengine/godot-proposals/issues/260#issuecomment-559559176:\r\n```gdscript\r\nvar bomb = preload(\"res://bomb.tscn\").instance()\r\nbomb.fuse.wait_time = 5.0 # error: Invalid set index `time` on base `null`\r\nadd_child(bomb)\r\n```\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would better to have a shortcut for these particular use cases, something like:\r\n```gdscript\r\nvar missile = preload(\"res://missile.tscn\").instance_as_child(self)\r\nmissile.global_position = character.global_position\r\n```\r\nFor those who like one-liners and use global classes with static methods in them:\r\n```gdscript\r\nExplosion.get_scene().instance_as_child(self).global_position = impact.global_position\r\n```\r\nSome common programming mistakes can be avoided:\r\n```gdscript\r\nvar bomb = preload(\"res://bomb.tscn\").instance_as_child(self)\r\n# OK to reference onready vars now since they were initialized immediately.\r\nbomb.fuse.wait_time = 5.0\r\n```\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n1. godotengine/godot#33974 - `PackedScene` built-in\r\n2. godotengine/godot#33938 - `Node` built-in.\r\n\r\nAlternative proposals which could replace/help with this one:\r\n* https://github.com/godotengine/godot-proposals/issues/260#issuecomment-560004979 - godotengine/godot#23101\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, but I really don't want to reinvent the wheel across several projects. This could alleviate some of the prototyping hurdles.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nChild addition almost always follows scene instantiation in most use cases, which justifies the existence for such a method to be part of the core.\r\n\r\nQuote from some documentation request godotengine/godot-docs#3338:\r\n\r\n> This is really something very basic and a incredibly common operation even a beginner would want to do.\r\n\r\nThe addition is quite small, the burden of having to go to the asset library in hopes that you find such utility function (by chance) outweighs the potential shortcomings of having to maintain this in the core.\r\n\r\nSome community usages to justify this more objectively:\r\n- [spawn_instance](https://github.com/Oranjoose/GoGodot/blob/master/go.gd#L118-L133). The implementation is quite reminiscent to godotengine/godot#33974.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/260/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/259",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/259/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/259/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/259/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/259",
    "id": 529330669,
    "node_id": "MDU6SXNzdWU1MjkzMzA2Njk=",
    "number": 259,
    "title": "Add support for rendering to a floating-point texture",
    "user": {
      "login": "galmiza",
      "id": 8322431,
      "node_id": "MDQ6VXNlcjgzMjI0MzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8322431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/galmiza",
      "html_url": "https://github.com/galmiza",
      "followers_url": "https://api.github.com/users/galmiza/followers",
      "following_url": "https://api.github.com/users/galmiza/following{/other_user}",
      "gists_url": "https://api.github.com/users/galmiza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/galmiza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/galmiza/subscriptions",
      "organizations_url": "https://api.github.com/users/galmiza/orgs",
      "repos_url": "https://api.github.com/users/galmiza/repos",
      "events_url": "https://api.github.com/users/galmiza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/galmiza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-27T12:58:26Z",
    "updated_at": "2020-07-11T20:18:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a FPS and need to implement my own shadow rendering pipeline.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI need to render an accurate float representing depth to a texture.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nClass **Viewport** can add a parameter **texture_type** to choose between **RGBA** and **FLOAT** texture types.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI currently need to pack the float into the RGBA texture and can only reach a float accuracy of 24-bits (as ALPHA channel can't be used as Godot triggers some incompatible pipeline processing if it is written).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt must be core as it is low level.  \r\nOpenGL offers a lot of different texture types (see https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml).  \r\nI believe having just the two types RGBA and FLOAT is enough to cover most of the use cases.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/258",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/258/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/258/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/258/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/258",
    "id": 529303520,
    "node_id": "MDU6SXNzdWU1MjkzMDM1MjA=",
    "number": 258,
    "title": "Allow passing Matrix and Vector4 to shaders",
    "user": {
      "login": "galmiza",
      "id": 8322431,
      "node_id": "MDQ6VXNlcjgzMjI0MzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8322431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/galmiza",
      "html_url": "https://github.com/galmiza",
      "followers_url": "https://api.github.com/users/galmiza/followers",
      "following_url": "https://api.github.com/users/galmiza/following{/other_user}",
      "gists_url": "https://api.github.com/users/galmiza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/galmiza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/galmiza/subscriptions",
      "organizations_url": "https://api.github.com/users/galmiza/orgs",
      "repos_url": "https://api.github.com/users/galmiza/repos",
      "events_url": "https://api.github.com/users/galmiza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/galmiza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-11-27T12:01:58Z",
    "updated_at": "2020-08-02T22:28:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a 3d first person shooter for mobile.  \r\nI want to implement light space perspective shadow maps to optimise the use of the shadow maps.  \r\n(I had it working on my own rendering engine which I dropped to adopt Godot.)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI need to send a perspective matrix to a shader (mat4 shader type).  \r\nGodot doesn't support 4x4 matrices (just 4x3 matrices with class Transform).\r\nGodot doesn't support Vector4 either (note that class Color has some range limitations)\r\n\r\nI had to create my own simplified Matrix class (in GDScript) and pass it to the shader using 8 Vector2 uniforms that I merge in the shader code.\r\n\r\n```\r\nhighp mat4 uLookAtView = mat4(\r\n  vec4(uLookAtView_0a,uLookAtView_0b),\r\n  vec4(uLookAtView_1a,uLookAtView_1b),\r\n  vec4(uLookAtView_2a,uLookAtView_2b),\r\n  vec4(uLookAtView_3a,uLookAtView_3b));\r\n```\r\n\r\nThis also comes with performance impacts (and tons of side-coding).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThese features will simplify both GDScript codes and shader codes, and bring a performance boost.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nGodot should implement the classes Matrix and Vector4 in C++ to maximise performance.  \r\nIt should also be possible to pass them as shader uniforms in one line of GDScript.\r\n\r\n```\r\nmaterial.set_shader_param(\"uMyMatrix4x4\",Matrix.IDENTITY)\r\nmaterial.set_shader_param(\"uMyVector4\",Vector4.ONES)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI believe these features will be used mainly by game engineers who will eventually contribute to the improvement of the core Godot engine.  \r\nBut more importantly the lack of these feature is almost a no go for me. So it may be a definite no go for others who would.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nGodot says it let users write their own shaders.  \r\nThis is currently not true without these features. So yes, it should be implemented in the core besides Vector3 and Transform.  \r\nActually this is more a \"limitation removal request\" than a \"feature request\".",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/255",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/255/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/255/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/255/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/255",
    "id": 527747084,
    "node_id": "MDU6SXNzdWU1Mjc3NDcwODQ=",
    "number": 255,
    "title": "Display enum name next to its value in the Remote Inspector",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-24T19:50:05Z",
    "updated_at": "2020-12-29T16:41:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\n\r\nDuring debugging, it's slow to have to check what the value of an enum means in my code by searching for the enum declaration.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis feature would tell me instantly what a value of an enum means.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![Untitled-2](https://user-images.githubusercontent.com/7307968/69500473-abcadb80-0efb-11ea-96ec-b34f22c469dc.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot really, it's low level editor code I'm guessing.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThere are now drawback to this being core as far as I can see.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/255/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/254",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/254/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/254/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/254/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/254",
    "id": 527668421,
    "node_id": "MDU6SXNzdWU1Mjc2Njg0MjE=",
    "number": 254,
    "title": "Implement ItemList Pre-Draw Size Calculation",
    "user": {
      "login": "Spartan322",
      "id": 4315446,
      "node_id": "MDQ6VXNlcjQzMTU0NDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4315446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spartan322",
      "html_url": "https://github.com/Spartan322",
      "followers_url": "https://api.github.com/users/Spartan322/followers",
      "following_url": "https://api.github.com/users/Spartan322/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spartan322/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spartan322/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spartan322/subscriptions",
      "organizations_url": "https://api.github.com/users/Spartan322/orgs",
      "repos_url": "https://api.github.com/users/Spartan322/repos",
      "events_url": "https://api.github.com/users/Spartan322/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spartan322/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-24T08:56:33Z",
    "updated_at": "2019-12-01T06:13:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSelection Popup UI for a Simplistic 2D Space Combat RTS\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nItemList prevents accessing or determining item sizes and positions, and does not allow access to the list's height until after the draw call with autoheight. I seek to allow autoheight for the first 5 items in my list and then limit it beyond that so I can activate the item list scroll automatically, (by disabling autoheight and using min y size) however I can not know the height until after a draw and item list items don't allow me to retrieve nor easily guess the item's height, (the next alternative is rebuilding half the draw call for sizing) and I can't rely on waiting for draw because then it lags adding items to it or will overflow the list in a manner that gives it the same function as keeping autoheight enabled. The next alternative is requesting a draw after adding 5 objects but then I'm wasting an entire draw call just to rebuild the ItemList. (which it will do again regardless)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf I could have some manner of either more simply estimating or knowing the item sizes or list size without wasting through the entire draw or performing otherwise ineffective or inefficient hacks it could make performing some more dynamic behavior on ItemLists which includes being able to easily and effectively handle size growth limiting for the list.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it would require either rebuilding the vital aspects of the draw to be slightly more efficient, or adding objects to the ItemList until satisfied and then making a draw request. (which will also waste draws to the screen)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt can't capably be added to ItemList in an add-on, an add-on could be made that completely copies ItemList and just adds extra methods to either estimate item properties or request calculating the ItemList without drawing. (basically caching it for later) A calculation request would take longer to finish first time but it could be cached if the object doesn't change. Or you could just try to use the existing calculations, falling back on just recalculating it all should that be impossible which it already does when the shape changes anyway. At best there is a moderate reduced loss in efficiency compared to hacking with it, it the best scenario you construct the ItemList's new list ahead of the next draw, in the worst case you just double the algorithm's inefficiency regarding constructing the ItemList for every time you request it. (in my case I'd only need to request it once after adding some objects) In such a case, you lose nothing implementation or performance wise (least without specific use of the feature, and only marginally by itself) and increase flexibility of ItemList.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/254/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/252",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/252/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/252/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/252/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/252",
    "id": 527561360,
    "node_id": "MDU6SXNzdWU1Mjc1NjEzNjA=",
    "number": 252,
    "title": "Add background color to Viewports",
    "user": {
      "login": "BenMcLean",
      "id": 1747250,
      "node_id": "MDQ6VXNlcjE3NDcyNTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1747250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenMcLean",
      "html_url": "https://github.com/BenMcLean",
      "followers_url": "https://api.github.com/users/BenMcLean/followers",
      "following_url": "https://api.github.com/users/BenMcLean/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenMcLean/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenMcLean/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenMcLean/subscriptions",
      "organizations_url": "https://api.github.com/users/BenMcLean/orgs",
      "repos_url": "https://api.github.com/users/BenMcLean/repos",
      "events_url": "https://api.github.com/users/BenMcLean/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenMcLean/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-23T14:06:19Z",
    "updated_at": "2020-10-15T03:05:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nTrying to put a virtual computer screen with old school computer text on it inside a 3D game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt isn't readily apparent where the Viewport gets its background color from but evidently there isn't a way to set a different background color on different Viewports.\r\n\r\nRight now, the workaround for not having a way to set a background color for an individual Viewport is adding a ColorRect to its tree. I can use that for now but it is still annoying.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThere should be a property on the Viewport to let you set a background color. That would make Viewports easier to work with instead of requiring another object to clear the viewport with.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nA whole additional seemingly unnecessary object is required to do something Viewports should do on their own.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nLacking this feature seems like an oversight.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/252/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/250",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/250/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/250/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/250/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/250",
    "id": 527189795,
    "node_id": "MDU6SXNzdWU1MjcxODk3OTU=",
    "number": 250,
    "title": "Protection against accidental, script-triggered node deletion in tool mode (loss of work danger!)",
    "user": {
      "login": "davthedev",
      "id": 26961646,
      "node_id": "MDQ6VXNlcjI2OTYxNjQ2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26961646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davthedev",
      "html_url": "https://github.com/davthedev",
      "followers_url": "https://api.github.com/users/davthedev/followers",
      "following_url": "https://api.github.com/users/davthedev/following{/other_user}",
      "gists_url": "https://api.github.com/users/davthedev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davthedev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davthedev/subscriptions",
      "organizations_url": "https://api.github.com/users/davthedev/orgs",
      "repos_url": "https://api.github.com/users/davthedev/repos",
      "events_url": "https://api.github.com/users/davthedev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davthedev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-22T13:16:50Z",
    "updated_at": "2019-12-02T09:19:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 3D rail shooter game (think like Sega's House of the Dead)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOne of my nodes in the tree was suddenly disappearing from the editor when I opened the project. Like it remained for 2 seconds then vanished.\r\n\r\nThe node had an AnimationPlayer child in which I spent a whole afternoon editing animations. There was no problem getting the work saved. It is only when reopening the scene that the node disappeared. Then I hit Ctrl-S by reflex and all my work in the child nodes went missing, forever.\r\n\r\nAfter investigation, I found the culprit was some initialization code that reparents the said node in GDScript which is intended to execute at run-time only. A simple remove_child() call on the parent.\r\n\r\nBut the scene has tool mode enabled and I found later that I forgot to put a is_editor_hint() check before executing the reparenting code.\r\nAt the moment, it was too late. My work was lost and I had to recreate all the animations.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThe feature would be some kind of warning or optional disabling of \"dangerous\" methods by default in tool mode. Or a possible failsafe scene open option that disables the tool script _ready() call, letting an opportunity to fix the bug. There are multiple ways to implement such a protection.\r\n\r\nThis would prevent such loss of work.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThe idea is actually open to discussion as there are multiple solutions to make it. Here are these:\r\n\r\n*Idea 1, Fail-safe loading option:*\r\n\r\n- User right clicks on tscn file. In the popup menu, there is a \"Open scene in fail-safe mode\" entry.\r\n- User clicks on the entry.\r\n- The scene loads, but tool script is inhibited. A warning on the editor shows \"Scene is open in fail-safe mode, tool scripts may not run now\". It resembles a colored bar on the top side, a bit like the popup blocker notifications in web browsers.\r\n- Now, the user has its unaltered tree available and can fix & save its changes in the GDScript file.\r\n\r\n*Idea 2, Destructive call blocking by default:*\r\n\r\nIt can be suitable as I don't know many desired uses of deleting a node from script at edit-time. An option must still be available to take the protection off for advanced users.\r\n\r\n- In tool mode, all calls to remove_child() are no-ops.\r\n\r\nIdeas for the expert disable option:\r\n- Extra keyword in the GDScript file\r\n- Project settings\r\n- Different API methods for deleting a node at edit-time and run-time\r\n\r\n*Idea 3, Warning when node is going to be removed by script:*\r\n\r\n- User opens the scene file.\r\n- Godot starts loading the scene in the editor\r\n- The script has tool mode enabled, so it runs and reaches the _ready() method\r\n- Somewhere in the script, a call to remove_child() is encountered\r\n- Script execution pauses at that point. A warning popup is shown to the user with a message: \"The tool mode script is attempting to remove the following node from the scene tree. This can cause a loss of your work. Are you sure you wish to execute this operation?\"\r\n\r\nIn the dialog box, the affected node is highlighted. An excerpt of the GDScript code in context with line number where the call happens is also shown.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nOnce one realizes that the blunder happens, it is often too late. Best solution would be NOT to save the scene (it is so easy to hit Ctrl-S and not obvious to perceive the live change), close Godot and edit the .gd file using an external editor. This requires awareness of the destructive calls happening beforehand.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is a safeguard against loss of work. Which is priceless IMHO.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/250/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/248",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/248/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/248/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/248/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/248",
    "id": 526782683,
    "node_id": "MDU6SXNzdWU1MjY3ODI2ODM=",
    "number": 248,
    "title": "Add triangle / vertex count display for MeshInstances",
    "user": {
      "login": "lawnjelly",
      "id": 21999379,
      "node_id": "MDQ6VXNlcjIxOTk5Mzc5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21999379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lawnjelly",
      "html_url": "https://github.com/lawnjelly",
      "followers_url": "https://api.github.com/users/lawnjelly/followers",
      "following_url": "https://api.github.com/users/lawnjelly/following{/other_user}",
      "gists_url": "https://api.github.com/users/lawnjelly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lawnjelly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lawnjelly/subscriptions",
      "organizations_url": "https://api.github.com/users/lawnjelly/orgs",
      "repos_url": "https://api.github.com/users/lawnjelly/repos",
      "events_url": "https://api.github.com/users/lawnjelly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lawnjelly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-21T19:00:57Z",
    "updated_at": "2020-11-25T09:08:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSplitting and merging meshes for balancing draw calls / culling, and optimizing levels for fast rendering\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere doesn't appear to be an easy way to determine the poly count of a mesh from the IDE.\r\n\r\nSome other stats that are useful:\r\n* NumTris / Primitives\r\n* NumIndices\r\n* NumSourceVertices\r\n* Normals Yes / no\r\n* UVs Yes / no\r\n* Colors Yes / no\r\n* NumIndices / NumSourceVertices - to give a measure of how good vertex sharing is\r\n* Post Transform Vertex cache utilisation - calculated assuming a certain cache size (e.g. 16 / 32)\r\nhttps://www.khronos.org/opengl/wiki/Post_Transform_Cache\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI just asked on IRC in devel and none of us were aware of a current way of seeing this basic info. There were suggestions ranging from putting it in the inspector (when the mesh instance is selected) to putting it as a label in the 3d viewport.\r\n\r\nThere are actually 2 aspects here:\r\n1) Is an indication of stats of meshes that are currently being rendered (which the monitor already does to an extent)\r\n2) Purely information stats of the info in the mesh instances, which could be queried from the mesh instance directly\r\n\r\nOne advanced consideration might be if multiple nodes are selected, or only some are MeshInstances.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will probably be useful quite often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCould perhaps be made as an add-on (I'm not familiar with making IDE add-ons) but the consensus was that we should put it up here as a proposal as it might be widely useful functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/248/reactions",
      "total_count": 9,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/247",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/247/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/247/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/247/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/247",
    "id": 526645920,
    "node_id": "MDU6SXNzdWU1MjY2NDU5MjA=",
    "number": 247,
    "title": "Display node's properties in the Inspector when in Code Editor",
    "user": {
      "login": "rezgi",
      "id": 41618561,
      "node_id": "MDQ6VXNlcjQxNjE4NTYx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41618561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rezgi",
      "html_url": "https://github.com/rezgi",
      "followers_url": "https://api.github.com/users/rezgi/followers",
      "following_url": "https://api.github.com/users/rezgi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rezgi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rezgi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rezgi/subscriptions",
      "organizations_url": "https://api.github.com/users/rezgi/orgs",
      "repos_url": "https://api.github.com/users/rezgi/repos",
      "events_url": "https://api.github.com/users/rezgi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rezgi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-11-21T14:55:12Z",
    "updated_at": "2019-12-04T01:12:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCreating a custom node with exported variables.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe always need to toggle between the 2D (or 3D) view to check on the exported variables or modify them when coding. When we are in code editor, we only have access to the script's inspector properties, it would be nice to have the 2D/3D view properties at the same time as the script's parameters.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt's more of a time-saving and UX feature, as we would avoid constantly toggling between the 2 displays and keep losing focus on the code when programming.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWe would have this : \r\n![01](https://user-images.githubusercontent.com/41618561/69348688-dc4e1380-0c76-11ea-916f-c385f77f3df2.jpg)\r\n\r\nInstead of this : \r\n![02](https://user-images.githubusercontent.com/41618561/69348710-e708a880-0c76-11ea-922d-da5c3544259e.jpg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWell don't know about C++, but I guess it's just about telling the engine to display the node's 2D/3D view by only adding the script's parameters on top or bottom when the user is in the code editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope, it's about the engine GUI. The only workaround is to toggle with shortcuts or mouse, which makes us lose focus of the code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about UX improvement that would benefit all users and it's a heavy change, or maybe we could debate about how it makes the editor less focused ?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/247/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/888",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/888/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/888/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/888/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/888",
    "id": 624345797,
    "node_id": "MDU6SXNzdWU2MjQzNDU3OTc=",
    "number": 888,
    "title": "Viewport Transparent Bg does not allow adjustments / tonemapping",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-21T14:53:46Z",
    "updated_at": "2020-05-28T08:18:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d multiplayer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThis breaks in a game, when trying to achieve a specific look in Godot's PBR environment.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nViewport Transparent Bg does not allow adjustments / tonemapping.\r\n\r\n@clayjohn said that Post Processing doesn't apply when you use transparent bg and that most post-processing operations don't make sense except for adjustments.\r\n\r\nI think tone mapping and adjustments should be added back.\r\n\r\n> <clayjohn\\> https://github.com/godotengine/godot/blob/083d088de3fe7cd5d825cebebc46ce32fc87b4b0/drivers/gles3/rasterizer_scene_gles3.cpp#L3673\r\n\r\n> <clayjohn\\> Could add color grading to copyshader and add it here. https://github.com/godotengine/godot/blob/083d088de3fe7cd5d825cebebc46ce32fc87b4b0/drivers/gles3/rasterizer_scene_gles3.cpp#L3682\r\n\r\n**Steps to reproduce:**\r\nThe viewport adjustments and tone mapping do not apply when Viewport Transparent Bg is enabled.\r\n\r\n![Screenshot from 2019-11-21 06-48-49](https://user-images.githubusercontent.com/32321/69348504-25787600-0c2b-11ea-92c6-69bdcfb0bde0.png)\r\n\r\n**Minimal reproduction project:**\r\n\r\n[Adjustment Bug Project.zip](https://github.com/godotengine/godot/files/3875224/Adjustment.Bug.Project.zip)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's a bug / enhancement. Not sure how to solve.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nRendering problems are not easily solvable by a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNeed to modify the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/888/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/246",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/246/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/246/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/246/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/246",
    "id": 526317293,
    "node_id": "MDU6SXNzdWU1MjYzMTcyOTM=",
    "number": 246,
    "title": "Separate Texture clamp/repeat/mirror flags into an enum for each axis",
    "user": {
      "login": "nanaian",
      "id": 9429556,
      "node_id": "MDQ6VXNlcjk0Mjk1NTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9429556?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nanaian",
      "html_url": "https://github.com/nanaian",
      "followers_url": "https://api.github.com/users/nanaian/followers",
      "following_url": "https://api.github.com/users/nanaian/following{/other_user}",
      "gists_url": "https://api.github.com/users/nanaian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nanaian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nanaian/subscriptions",
      "organizations_url": "https://api.github.com/users/nanaian/orgs",
      "repos_url": "https://api.github.com/users/nanaian/repos",
      "events_url": "https://api.github.com/users/nanaian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nanaian/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-21T01:55:54Z",
    "updated_at": "2019-11-25T21:33:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Context\r\nI'm currently working on a [Paper Mario 64 map importer](https://twitter.com/nanaian_/status/1197323485703540736?s=20). It involves dynamically creating ImageTextures from texture images, which I cannot change. The game uses space-saving measures very often, ie. having a texture be repeated and then mapping vertices in that repeated space. This includes textures which are clamped in one axis and mirrored in another, which Godot doesn't support! 😮 \r\n\r\n![My scene rendered in Godot](https://pbs.twimg.com/media/EJ3AZWIWsAEAe5c?format=png&name=small)\r\n![The original texture](https://user-images.githubusercontent.com/9429556/69292818-f8ae6980-0bfe-11ea-93f1-fb8b9af81408.png)\r\n\r\nFor the particular texture above, yes, mirroring on both axes would be sufficient. However, my tool's dynamic nature _cannot work that out_; instead, I use parse texture config data like--\r\n\r\n```\r\ntex: kmr_wood_dtif\r\n{\r\n\timg: kmr_wood_dtif.png\r\n\t{\r\n\t\tformat: CI-4\r\n\t\thwrap: repeat\r\n\t\tvwrap: mirror\r\n\t}\r\n\tfilter: yes\r\n\tcombine: 8\r\n}\r\n```\r\n\r\n--which, you will note, sometimes has different values for `hwrap` and `vwrap`. Godot won't let me handle these values accurately as of right now.\r\n\r\nThe Texture class supports OpenGL's repeat/mirror/clamp in the 'flags' section, but doesn't let me specify modes for each axis - [despite support in OpenGL, Godot combines the axes into three flags](https://github.com/godotengine/godot/blob/083d088de3fe7cd5d825cebebc46ce32fc87b4b0/drivers/gles3/rasterizer_storage_gles3.cpp#L846-L860). I can't say I understand why such a decision was made, but there we go.\r\n\r\n\r\n### Proposal\r\n@clayjohn suggests [this enhancement is a candidate for 4.0](https://github.com/godotengine/godot/issues/33775#issuecomment-556688783). That means we can be a little more breaking:\r\n\r\nI propose moving clamp/repeat/mirror away from the `Texture.FLAG_XXX` enum. Especially because, right now, you can enable _both_ 'Repeat' and 'Mirrored Repeat' which results in the same behaviour as just enabling the latter. That shouldn't even be possible: they're mutually exclusive behaviours!\r\n\r\n![image](https://user-images.githubusercontent.com/9429556/69293175-0b756e00-0c00-11ea-9768-b2c48c245341.png)\r\n\r\n(Ticking neither of these boxes results in the `WRAP_CLAMP` mode described below.)\r\n\r\nInstead, these flags can be replaced with a pair of new properties, called `wrap_x` (horizontal), `wrap_y` (vertical), `wrap_z` ([depth](https://docs.godotengine.org/en/3.1/classes/class_texturelayered.html#class-texturelayered)), which each may hold one of the following values:\r\n\r\n```gdscript\r\nextends Texture\r\n\r\nenum WrapMode {\r\n  WRAP_CLAMP,\r\n  WRAP_REPEAT,\r\n  WRAP_MIRROR\r\n}\r\n\r\nvar wrap_x: WrapMode = WrapMode.WRAP_CLAMP\r\nvar wrap_y: WrapMode = WrapMode.WRAP_CLAMP\r\nvar wrap_z: WrapMode = WrapMode.WRAP_CLAMP # `extends TextureLayered` only\r\n```\r\n\r\nThese variants map cleanly to OpenGL's `GL_TEXTURE_WRAP_S` and `GL_TEXTURE_WRAP_T` texture parameters: GL_CLAMP_TO_EDGE, GL_REPEAT, GL_MIRRORED_REPEAT. The same variants are supported by Metal, and, more importantly for 4.0, Vulkan.\r\n\r\nAs a comparison, [Unity does something very similar](https://docs.unity3d.com/ScriptReference/Texture-wrapMode.html), but calls the properties `wrapModeU`, `wrapModeV`, and `wrapModeW` respectively. It also has a property for setting all three of these at once, which I argue doesn't need to be done in our implementation: it's incredibly easy to just set all three to the same value if desired, both in GDScript and in GUI.\r\n\r\n---\r\n\r\nThis enhancement could be worked around with a bunch of user-written shader code which implements separate-axis mirroring/repeating/clamping, but that's definitely not an elegant, efficient solution. The engine supporting this directly wouldn't impede on any existing users, nor is it going to bloat download size.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/245",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/245/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/245/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/245/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/245",
    "id": 525865194,
    "node_id": "MDU6SXNzdWU1MjU4NjUxOTQ=",
    "number": 245,
    "title": "Allow text multi-selection in the code editor",
    "user": {
      "login": "rezgi",
      "id": 41618561,
      "node_id": "MDQ6VXNlcjQxNjE4NTYx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41618561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rezgi",
      "html_url": "https://github.com/rezgi",
      "followers_url": "https://api.github.com/users/rezgi/followers",
      "following_url": "https://api.github.com/users/rezgi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rezgi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rezgi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rezgi/subscriptions",
      "organizations_url": "https://api.github.com/users/rezgi/orgs",
      "repos_url": "https://api.github.com/users/rezgi/repos",
      "events_url": "https://api.github.com/users/rezgi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rezgi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-11-20T15:11:29Z",
    "updated_at": "2020-10-22T17:17:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA code where I have to copy-paste code that has only one small variation in the variable and node name.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHaving to change every variable name one by one is really cumbersome, the workflow would get way faster if we could multi-select a selected part of the string, exactly like CTRL-D in Sublime Text. So for example if I select 'Name' in $nodeName, I can select all next (or previous) duplicates that also have 'Name' in it. And then modify them all at once.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWell it's a feature that's in all IDEs and we programmers got used to it, I'm quite surprised it's not available in Godot. Maybe I just missed it, but I've looked and asked and nothing was found, I also tried shortcuts like ctrl-D, alt-ctrl-D and stuff. So this enhancement is clearly about speeding the programming workflow as we often have to change a few similar strings. \r\n\r\nBy the way it's not really replaceable by Search-And-Replace since this one applies the change on all results in the document. Multi-Select allows to change only a few strings and not all of them, very useful for replacing variable or node names only in a function for example.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Screen Shot 2019-11-20 at 16 07 33](https://user-images.githubusercontent.com/41618561/69250453-f53fc180-0baf-11ea-965c-6b088124fdee.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nUm not experienced enough for this, but I guess it's a Regex trick where pressing the shortcut will search for the next matching string and so on ?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's not really a function used within the dev's code, but an editor tool for programmers to code faster. I think it will be used very often, like moving a line with alt-up and such.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAll programmers are lazy by nature, so are game'devs ^^ So we need it shipped with the code editor !",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/245/reactions",
      "total_count": 92,
      "+1": 69,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 23,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
