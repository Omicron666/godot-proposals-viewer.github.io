[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1010",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1010/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1010/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1010/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1010",
    "id": 630870503,
    "node_id": "MDU6SXNzdWU2MzA4NzA1MDM=",
    "number": 1010,
    "title": "Add the ability to update/re-render a Viewport manually",
    "user": {
      "login": "SIsilicon",
      "id": 34734122,
      "node_id": "MDQ6VXNlcjM0NzM0MTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/34734122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SIsilicon",
      "html_url": "https://github.com/SIsilicon",
      "followers_url": "https://api.github.com/users/SIsilicon/followers",
      "following_url": "https://api.github.com/users/SIsilicon/following{/other_user}",
      "gists_url": "https://api.github.com/users/SIsilicon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SIsilicon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SIsilicon/subscriptions",
      "organizations_url": "https://api.github.com/users/SIsilicon/orgs",
      "repos_url": "https://api.github.com/users/SIsilicon/repos",
      "events_url": "https://api.github.com/users/SIsilicon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SIsilicon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-06-04T14:23:03Z",
    "updated_at": "2020-08-11T16:24:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project concerning viewport wizardry (smoke simulation, multi pass blur, etc..)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes, you want to update a viewport multiple times per frame, such as during \"ping ponging\". You might have shaders that require multiple iterations to work properly, but the only work around at the time would be to make lots of viewports and chain then together. Obviously this can become resource intensive real quick.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that we give viewports a `render` function. That way we can update them whenever we want. It should only work when the viewport's update mode is never.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCurrently, all viewports set to update on the current frame are all drawn at once in one function. It shouldn't be too hard to separate some of the code into a function in VisualServer and use it in the Viewport node. Multi threading must be taken in consideration obviously.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI've tried to do it before, but there seems to be no other way of manually updating a viewport through scripting.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame reason as above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1010/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1009",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1009/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1009/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1009/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1009",
    "id": 630731896,
    "node_id": "MDU6SXNzdWU2MzA3MzE4OTY=",
    "number": 1009,
    "title": "Improving Position3D and Position2D identification",
    "user": {
      "login": "BraindeadBZH",
      "id": 3399852,
      "node_id": "MDQ6VXNlcjMzOTk4NTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3399852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BraindeadBZH",
      "html_url": "https://github.com/BraindeadBZH",
      "followers_url": "https://api.github.com/users/BraindeadBZH/followers",
      "following_url": "https://api.github.com/users/BraindeadBZH/following{/other_user}",
      "gists_url": "https://api.github.com/users/BraindeadBZH/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BraindeadBZH/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BraindeadBZH/subscriptions",
      "organizations_url": "https://api.github.com/users/BraindeadBZH/orgs",
      "repos_url": "https://api.github.com/users/BraindeadBZH/repos",
      "events_url": "https://api.github.com/users/BraindeadBZH/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BraindeadBZH/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-06-04T11:14:07Z",
    "updated_at": "2020-06-30T08:16:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot project related, could apply to any 3D or 2D games.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPosition nodes are meant to help in the editing process. When dealing with many of them, it becomes quickly a mess to know which one is which. Therefore, the more you use them the less they are useful.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo help with this issue, the Position nodes should become visually identifiable by:\r\n\r\n- Making possible to change their color, for example enemy spawners are red, starting position is blue, items spawners are green, ...\r\n- Making possible to display the Position node's name beside the cross, for example LeftWheelAttachment/RightWheelAttachment, EasyEnemySpawner/HardEnemySpawner, ...\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would be easy to use by:\r\n\r\n-  Adding a color properties the the Position nodes to change their visual appearance.\r\n-  Adding an entry in the View menu viewport to enable/disable showing the name beside the cross\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think this could be done easily in script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this should be core because it is a very basic feature that would help making the Position nodes more useful for everyone.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1009/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1008",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1008/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1008/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1008/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1008",
    "id": 630539948,
    "node_id": "MDU6SXNzdWU2MzA1Mzk5NDg=",
    "number": 1008,
    "title": "Process settings should take effect when called during _init() or _enter_tree()",
    "user": {
      "login": "avencherus",
      "id": 13004169,
      "node_id": "MDQ6VXNlcjEzMDA0MTY5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13004169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avencherus",
      "html_url": "https://github.com/avencherus",
      "followers_url": "https://api.github.com/users/avencherus/followers",
      "following_url": "https://api.github.com/users/avencherus/following{/other_user}",
      "gists_url": "https://api.github.com/users/avencherus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avencherus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avencherus/subscriptions",
      "organizations_url": "https://api.github.com/users/avencherus/orgs",
      "repos_url": "https://api.github.com/users/avencherus/repos",
      "events_url": "https://api.github.com/users/avencherus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avencherus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-04T06:12:27Z",
    "updated_at": "2020-06-19T12:24:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt isn't restricting, but it seems awkward that expressing intentions to initialize processing in an OFF state before `_ready()` will not be respected.\r\n\r\nIt has been the source of many unexpected bugs for me.  Took many hours out of development to learn and force myself to remember this very specific limitation.\r\n\r\nWhile this limitation is documented, because its a setter that works in most case as you'd expect, I failed to recall this exception, and had no immediate notion to go looking.  My expectation was to find a one line entry about what it does (the part that was understood already).\r\n\r\nIt might be analogous to something like:  \"hide() - Hides the canvas.  Can not be used inside of _draw()\"\r\n\r\n(Relocating this issue https://github.com/godotengine/godot/issues/31946#issuecomment-527776060 as a proposal here.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIt would be nice if these worked.\r\n```\r\nfunc _init():\r\n\tset_physics_process(false)\r\n\r\nfunc _enter_tree():\r\n\tset_process(false)\r\n\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo \"workaround\".\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's part of the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1007",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1007/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1007/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1007/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1007",
    "id": 630502810,
    "node_id": "MDU6SXNzdWU2MzA1MDI4MTA=",
    "number": 1007,
    "title": "Tileset Editor set tile origin",
    "user": {
      "login": "jurgel",
      "id": 2030889,
      "node_id": "MDQ6VXNlcjIwMzA4ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2030889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jurgel",
      "html_url": "https://github.com/jurgel",
      "followers_url": "https://api.github.com/users/jurgel/followers",
      "following_url": "https://api.github.com/users/jurgel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jurgel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jurgel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jurgel/subscriptions",
      "organizations_url": "https://api.github.com/users/jurgel/orgs",
      "repos_url": "https://api.github.com/users/jurgel/repos",
      "events_url": "https://api.github.com/users/jurgel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jurgel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-04T04:32:01Z",
    "updated_at": "2020-06-15T02:28:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTileset Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCan't set the tile origin (center point), it's doable using `texture_offset` at the inspector, but there's no feedback at the tileset editor.\r\nTile's origin is important, as it'll be used to calculate render order in YSort.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a button to set origin in the tileset editor (this will change `texture_offset` value)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/2030889/83714838-19e41e00-a656-11ea-8b02-60e101a234b7.png)\r\n(The crosshair is the tile origin)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can manually modify `texture_offset` at the inspector as a workaround.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a simple change to update the existing value (`texture_offset`) with GUI on the existing tileset editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1007/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1005",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1005/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1005/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1005/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1005",
    "id": 630431205,
    "node_id": "MDU6SXNzdWU2MzA0MzEyMDU=",
    "number": 1005,
    "title": "Add a wavy/squiggly underline + popup for code errors ",
    "user": {
      "login": "vnen",
      "id": 5599796,
      "node_id": "MDQ6VXNlcjU1OTk3OTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vnen",
      "html_url": "https://github.com/vnen",
      "followers_url": "https://api.github.com/users/vnen/followers",
      "following_url": "https://api.github.com/users/vnen/following{/other_user}",
      "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
      "organizations_url": "https://api.github.com/users/vnen/orgs",
      "repos_url": "https://api.github.com/users/vnen/repos",
      "events_url": "https://api.github.com/users/vnen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vnen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-06-04T01:03:58Z",
    "updated_at": "2020-12-28T20:14:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe GDScript compiler.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current way the GDScript code editor display errors is by highlighting the whole line with a red background:\r\n\r\n![gdscript-red error](https://user-images.githubusercontent.com/5599796/83703110-ecab5780-a5e4-11ea-949a-5b3ae465f98f.png)\r\n\r\nAlso it puts the error message at the bottom:\r\n\r\n![gdscript-error-bar](https://user-images.githubusercontent.com/5599796/83703152-09e02600-a5e5-11ea-9704-de92e308d359.png)\r\n\r\nThe problem is that it's too outstanding from the surrounding environment, making it grab too much attention, which you don't really want when you just stopped writing code for a few seconds (at which point you know it's wrong).\r\n\r\nThis also prevents showing more than one error at once, which will be possible with the new GDScript parser.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nUsing wavy (AKA squiggly) underline on detected errors is common in pretty much all modern code editors. This would be less attention grabbing and would allow reporting more errors at once.\r\n\r\nTo show the error details, a tooltip popup would show with the error message when the mouse hovers the offending code. This would allow the user to see each error message when it's needed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAn example of how Visual Studio Code deals with this:\r\n\r\n![wavy-lines](https://user-images.githubusercontent.com/5599796/83703364-bf12de00-a5e5-11ea-87cf-34fbec1915ff.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often and cannot be worked around AFAIK.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an integral part of the GDScript editor. It must be part of the code editor control.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1005/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1003",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1003/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1003/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1003/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1003",
    "id": 630104680,
    "node_id": "MDU6SXNzdWU2MzAxMDQ2ODA=",
    "number": 1003,
    "title": "APK export should include drawables for common tablet screen densities",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-03T15:40:50Z",
    "updated_at": "2020-09-18T21:19:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Copy of issue from https://github.com/godotengine/godot/issues/30322 as I couldn't find this when searching here earlier.\r\n\r\n**Describe the project you are working on:**\r\nMobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAndroid games exported from Godot do not include drawables for tablets (xxxhdpi). This gives a warning on the Play Store that the game is not designed for tablets, and excludes the game from being in the \"Designed for tablets\" store list.\r\n\r\n![](https://user-images.githubusercontent.com/25594670/60681012-da351500-9e8d-11e9-92ee-4dd32676afed.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExport template should be updated to include dummy assets for tablet resolutions.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can set up a custom build template and add these yourself, but it should really be included by default.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUpdate to existing core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1003/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1001",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1001/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1001/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1001/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1001",
    "id": 629913514,
    "node_id": "MDU6SXNzdWU2Mjk5MTM1MTQ=",
    "number": 1001,
    "title": "Make modules... modular at compiling project (not the engine)",
    "user": {
      "login": "Bethleem",
      "id": 17690275,
      "node_id": "MDQ6VXNlcjE3NjkwMjc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17690275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bethleem",
      "html_url": "https://github.com/Bethleem",
      "followers_url": "https://api.github.com/users/Bethleem/followers",
      "following_url": "https://api.github.com/users/Bethleem/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bethleem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bethleem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bethleem/subscriptions",
      "organizations_url": "https://api.github.com/users/Bethleem/orgs",
      "repos_url": "https://api.github.com/users/Bethleem/repos",
      "events_url": "https://api.github.com/users/Bethleem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bethleem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-03T11:22:08Z",
    "updated_at": "2020-10-07T15:02:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAn interactive fiction engine only-text, but the proposal will benefit all godot projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe release android apk is too big for a only-text project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSo, the idea is to to be able to discard modules at compiling time. In my case of use will be everything but 2d basic rendering and will decrease remarkably the output size while 84% of it is the engine. \r\nI know you can get a custom godot engine and templates if you recompile the whole enchillada engine source code. But, IMHO, this is a task only for advance users. Very advance. Your average indie developer might hit a wall when trying to get ride of some modules.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWell, I´m not your very advance user and don´t know even how to properly compile the engine (try and failed).\r\nBut the approach should be like the one used in Defold. You configure a simple manifest file and the engine include only the modules you want to in your project release.\r\nhttps://britzl.github.io/manifestation/\r\nIt will be a huge improvement in otrimization.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nFew lines, no. Recompile full engine and templates.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nStrip parts of the engine could only be done... by the engine itself? Don´t know for sure, as I said I´m not your very advance user, just an average indie developer.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1000",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1000/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1000/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1000/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1000",
    "id": 629835963,
    "node_id": "MDU6SXNzdWU2Mjk4MzU5NjM=",
    "number": 1000,
    "title": "Add an outline mode to the editor 3D viewport rendering modes to complement the wireframe mode",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-03T09:18:59Z",
    "updated_at": "2020-09-09T16:28:02Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nTo visualize a 3D scene's polygon layout, Godot currently offers a wireframe mode:\r\n\r\n![Wireframe mode for the 3D viewport](https://user-images.githubusercontent.com/180032/30556362-e57c2336-9caa-11e7-859c-008b9f82f994.png)\r\n\r\nHowever, this rendering mode can become difficult to read in more complex scenes due to the lack of occlusion. The background color can also make individual lines difficult to notice.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSimilar to what's offered in most Quake-derived engines (`r_showtris 1`), an outline mode could be added. It would keep the original scene's shading but draw colored lines on top (with occlusion provided by the original scene). The line color could be made configurable in the 3D viewport settings, ideally with an adjustable alpha component for translucent lines. The default color would probably be translucent white (or some shade of light gray if transparency isn't available).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![Outline mode example](https://user-images.githubusercontent.com/180032/30556407-0d331c04-9cab-11e7-85a5-7e0443160779.png)\r\n\r\nThis mode displays materials as usual, but displays a wireframe *on top* of them. The color should be settable by the user, but probably should default to a white or light gray color.\r\n\r\n*Example use case:* Displaying geometry complexity while still being able to freelook through a level easily. If this mode ends up being accessible during gameplay, it could be used to debug procedural geometry generation more efficient as well.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt would require a few hundreds of lines of script, if it's even possible (see below).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI don't think this is possible, especially in a performant way.\r\n\r\n___\r\n\r\n*PS: The screenshots come from [Cube 2: Sauerbraten](http://sauerbraten.org/). I'm not currently working on an implementation of these modes in Godot.*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1000/reactions",
      "total_count": 13,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 7,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/998",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/998/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/998/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/998/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/998",
    "id": 629470776,
    "node_id": "MDU6SXNzdWU2Mjk0NzA3NzY=",
    "number": 998,
    "title": "Allow getting the KinematicCollision `collider` when colliding with GridMap cells",
    "user": {
      "login": "jshlw",
      "id": 33421921,
      "node_id": "MDQ6VXNlcjMzNDIxOTIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/33421921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshlw",
      "html_url": "https://github.com/jshlw",
      "followers_url": "https://api.github.com/users/jshlw/followers",
      "following_url": "https://api.github.com/users/jshlw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshlw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshlw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshlw/subscriptions",
      "organizations_url": "https://api.github.com/users/jshlw/orgs",
      "repos_url": "https://api.github.com/users/jshlw/repos",
      "events_url": "https://api.github.com/users/jshlw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshlw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-02T19:51:29Z",
    "updated_at": "2020-11-22T15:25:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Minecraft-like game which uses lots of `GridMap` cells.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen the player collides to `GridMap` cells, `KinematicCollision` return `null` when getting properties such as `collider`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n`GridMap` cells could return some value, assuming I'm using `StaticBody` in the mesh library.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\n# Player.gd (KinematicBody)\r\nvar collision = get_slide_collision(0) # get collision with some `GridMap` cell\r\nvar collider = collision.collider # != null :D\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it would be hard to implemment a `GridMap` from scratch just to add collisions for its cells.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/997",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/997/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/997/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/997/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/997",
    "id": 629461950,
    "node_id": "MDU6SXNzdWU2Mjk0NjE5NTA=",
    "number": 997,
    "title": "C#: Allow exporting custom types (System.Object class or struct)",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "neikeq",
      "id": 7718100,
      "node_id": "MDQ6VXNlcjc3MTgxMDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neikeq",
      "html_url": "https://github.com/neikeq",
      "followers_url": "https://api.github.com/users/neikeq/followers",
      "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
      "organizations_url": "https://api.github.com/users/neikeq/orgs",
      "repos_url": "https://api.github.com/users/neikeq/repos",
      "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neikeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "neikeq",
        "id": 7718100,
        "node_id": "MDQ6VXNlcjc3MTgxMDA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/neikeq",
        "html_url": "https://github.com/neikeq",
        "followers_url": "https://api.github.com/users/neikeq/followers",
        "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
        "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
        "organizations_url": "https://api.github.com/users/neikeq/orgs",
        "repos_url": "https://api.github.com/users/neikeq/repos",
        "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/neikeq/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-06-02T19:36:18Z",
    "updated_at": "2020-12-05T22:31:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nJust looking forward to using godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, exporting a field with type of a custom class or struct just doesn't work, godot can't seem to handle it.\r\nThe output prints 'unknown exported member type: [xyz]'\r\nI tried to find workarounds, but just found more undesired behaviour.\r\nFirst i tried using GetPropertyList to maybe add an editorplugin to draw them myself. But the return value doesn't include the scripts values. This also ruled out serializing the custom fields value into another field that godot can serialize (unity-like workaround), plus overriding _GetPropertyList also doesn't work correctly (setting usage for the property to NoEditor does not hide the property, desired equivalent is unity's [SerializeField, HideInEditor] combination).\r\nAlso, inheriting from ISerializationListener, which sounded promising (like unity's ISerializationCallback) did nothing, the callbacks didn't get invoked, but maybe that's even by design, although still limiting.\r\nSo there seems to be no feasible workaround.\r\nThe problem is that in c# it's quite common and often even necessary to group data via objects (or structs) for serialization, messaging etc. . And property editors should aid in editing those too (like in other popular engines)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplementing serialization/editing/[Export]ing custom classes will benefit every c# developer.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt could work like regular property editing when presented to the user. Objects could be foldouts of properties when displayed in the inspector.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt doesn't seem to be possible to be worked around as described above.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis seems to requires changes in the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/997/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/996",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/996/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/996/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/996/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/996",
    "id": 629461686,
    "node_id": "MDU6SXNzdWU2Mjk0NjE2ODY=",
    "number": 996,
    "title": "Make the $ operator in GDScript cache node references",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 39,
    "created_at": "2020-06-02T19:35:50Z",
    "updated_at": "2020-10-28T14:44:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** https://github.com/godotengine/godot-demo-projects/ but this applies to any project made in GDScript.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nHere is a code snippet from Dodge the Creeps:\r\n\r\n![](https://user-images.githubusercontent.com/1646875/76044779-4e4a2000-5f29-11ea-96c3-161619caa301.png)\r\n\r\nThe problem is that this code looks elegant, but it isn't very performant. Every time this method is called, it has to call `get_node()` 6 times, and 2 of those times are getting the same node (HUD). We can reduce this from 6 to 5 by caching the HUD reference like this:\r\n\r\n![76044779-4e4a2000-5f29-11ea-96c3-161619caa301](https://user-images.githubusercontent.com/1646875/83560643-8ccd8780-a4e4-11ea-8af3-8bd40635e8bc.png)\r\n\r\nHowever, this method is still very inefficient, since it calls `get_node()` 5 times every time the method is ran. The best simple option that I can see is to use `onready var` like this:\r\n\r\n![76044779-4e4a2000-5f29-11ea-96c3-161619caa301](https://user-images.githubusercontent.com/1646875/83561043-2b59e880-a4e5-11ea-8b89-fe884dec06af.png)\r\n\r\nThis means that `get_node()` is only called 5 times once when this node is created, and this method does not have to call `get_node()` at all when the method is ran. However, now this code is ugly, since it is much longer than it could be and we've lost the green syntax highlighting in `new_game()` that tells us we're working with node children.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to make the `$` operator cache references on ready, so that user code looks like the top image, but behaves like the bottom image.\r\n\r\n* For projects currently caching references via `onready var`, this would make code more elegant. \r\n\r\n* For projects currently using `$` everywhere, this would increase performance.\r\n\r\nIn cases where `get_node()` needs to be called every time, such as if nodes are created and deleted, users can just use `get_node()` instead of `$`. As such, `$` would have different behavior from `get_node()`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee above for examples of user code, but @vnen would be the one handling the implementation.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around, but this is something that will be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, because it will be used often.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/996/reactions",
      "total_count": 34,
      "+1": 21,
      "-1": 4,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/995",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/995/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/995/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/995/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/995",
    "id": 629361608,
    "node_id": "MDU6SXNzdWU2MjkzNjE2MDg=",
    "number": 995,
    "title": "Support float values in \"if x in range\" expressions",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-02T16:57:27Z",
    "updated_at": "2020-06-02T19:53:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd have to type less, if this little feature was added.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf a value is in a range of 1 to 3, a font color of a label should be changed.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nYou should be able to do\r\n```\r\nif value in range(1,3):\r\nadd_color_override(\"font_color\", ColorN(\"green\"))\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes,\r\n```\r\nif value <= 3 and value >= 1:\r\nadd_color_override(\"font_color\", ColorN(\"green\"))\r\n```\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it's good for everyone, not for specific projects.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/994",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/994/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/994/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/994/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/994",
    "id": 629353199,
    "node_id": "MDU6SXNzdWU2MjkzNTMxOTk=",
    "number": 994,
    "title": "Add support for range comparisons and negation in `match` operations",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-02T16:44:09Z",
    "updated_at": "2020-11-22T15:22:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI want to change the color of a label text if a value is smaller/greater than another value.\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to use `match` instead of `if` and there's no possibility to compare with < or >, just with =, which you don't have to type.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere would be this possibility.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`match value:`\r\n>`< 3:`\r\n>>`print(\"smaller than 3\")`\r\n\r\n>`> 3:`\r\n>>`print(\"greater than 3\")`\r\n\r\n>`= 3:`\r\n>>`print(\"equals 3\")`\r\n\r\n>`3:`\r\n>>`print(\"equals 3\")`\r\n\r\n>`<= 3:`\r\n>>`print(\"smaller or equal to 3\")`\r\n\r\n>`>= 3:`\r\n>>`print(\"greater or equal to 3\")`\r\n\r\n> `not 3:`\r\n>>`print(\"anything else than 3\")`\r\n\r\n> `! 3:`\r\n>>`print(\"anything else than 3\")`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, with if statements, it would look like this:\r\n```\r\nif value1 > value2:\r\nadd_color_override(\"font_color\", ColorN(\"red\"))\r\nelif value1 < value2:\r\nadd_color_override(\"font_color\", ColorN(\"yellow\"))\r\nelse:\r\nadd_color_override(\"font_color\", ColorN(\"green\"))\r\n```\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, it would vastly improve the use of `match`.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/994/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/991",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/991/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/991/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/991/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/991",
    "id": 629053435,
    "node_id": "MDU6SXNzdWU2MjkwNTM0MzU=",
    "number": 991,
    "title": "Add headless / server mode support to all platforms as a DisplayServer",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 8,
    "created_at": "2020-06-02T09:34:16Z",
    "updated_at": "2020-12-24T10:31:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe Godot Engine ;)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHistorically, Godot's headless (no window/no rendering) platform was only supported on Linux/*BSD via the `platform=server` port, which was basically a copy of `platform=x11` with some changes to allow headless use. It was then extended to also support macOS, albeit still via `platform=server` (so the same platform code actually covers two platforms).\r\n\r\nOn Windows, only a `--no-window` flag is provided to avoid showing a window, but it's not a proper headless mode.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe hacky `server` platform should go away, as maintaining a custom platform port for this purpose is overkill.\r\n\r\nNow that we split `OS` from `DisplayServer` in the `master` branch, we can implement a headless `DisplayServer` backend that could be used on all support platform ports (notably Windows, but in theory also Android, iOS, etc.).\r\n\r\nMoreover, as this would be registered as an additional `DisplayServer` backend, it would no longer be necessary to have a custom binary for headless (CI/CD) and server workflows, as the native editor and template builds for the host platforms could be used, with a command line switch to disable window creation and rendering (and possibly automatic fallback on real headless systems that do not support the graphical `DisplayServer` implementations).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWe currently have a \"Dummy\" rasterizer and texture loader implemented in https://github.com/godotengine/godot/tree/master/drivers/dummy for the `server` platform.\r\n\r\nIt should be modified to be paired to a headless `DisplayServer` implementation (possibly implementation**s** if there are platform-specific requirements to handle) that can be enabled on Linux, macOS and Windows via the `--display-driver` switch (possibly other platforms later on if deemed relevant and technically possible).\r\n\r\nThe `platform/server` code should be removed.\r\n\r\nHelp welcome to flesh out this proposal with more technical details on the implementation. (CC @Faless)\r\n\r\nReplaces and supersedes https://github.com/godotengine/godot/issues/11389.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is about platform code, which is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/991/reactions",
      "total_count": 24,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/990",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/990/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/990/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/990/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/990",
    "id": 629028151,
    "node_id": "MDU6SXNzdWU2MjkwMjgxNTE=",
    "number": 990,
    "title": "Add support for the Wayland display server",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318904,
        "node_id": "MDU6TGFiZWwyMzU5MzE4OTA0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:linuxbsd",
        "name": "platform:linuxbsd",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 9,
    "created_at": "2020-06-02T08:57:48Z",
    "updated_at": "2020-10-25T15:02:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot's platform ports.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNone directly as X11 still works decently on recent Linux distros, but we need to add support for the more modern Wayland display server eventually.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWayland is a newer, more modern display server that can be used on Linux and likely some BSD-derived OSes too (now or in the future).\r\n\r\nMany Linux distros / DEs now run on Wayland by default, and Godot only works thanks to the `xwayland` compatibility layer.\r\n\r\nHaving builtin Wayland support will give us access to a much cleaner API as well as more advanced features for window management, etc.\r\n\r\nSupersedes https://github.com/godotengine/godot/issues/576 - see discussion there for relevant technical details.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not an expert on Wayland so I'll let others fill in and explain what are the gains we can expect from having built-in Wayland support.\r\n\r\nFrom a technical implementation point of view, the following points are important:\r\n- Implement Wayland support was intentionally kept on hold until we would split the OS and DisplayServer components, so that we can have a Linux/*BSD platform port with more than one DisplayServer implementations. This has now been done in the `master` branch, and thus Wayland support can be implemented for Godot 4.0. There's no intention to backport it to earlier releases.\r\n- There are many issues on all platforms following the DisplayServer split and implementation of multi-window support (https://github.com/godotengine/godot/issues/37734). It is recommended to wait for most of those issues to be fixed before starting implementing a new DisplayServer (though help is very welcome from Wayland aficionados to first fix the outstanding X11 issues after this refactoring).\r\n- Wayland and X11 support should be implemented in a way that works with a single Godot binary, i.e. the relevant libraries should probably be `dlopen`-ed so that the same binary can be used on systems with only X11, only Wayland, or both installed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis can only be done in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/990/reactions",
      "total_count": 38,
      "+1": 33,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/989",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/989/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/989/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/989/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/989",
    "id": 629021438,
    "node_id": "MDU6SXNzdWU2MjkwMjE0Mzg=",
    "number": 989,
    "title": "Add a way to declare functions as abstract in GDScript",
    "user": {
      "login": "cloewen8",
      "id": 1569808,
      "node_id": "MDQ6VXNlcjE1Njk4MDg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1569808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloewen8",
      "html_url": "https://github.com/cloewen8",
      "followers_url": "https://api.github.com/users/cloewen8/followers",
      "following_url": "https://api.github.com/users/cloewen8/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloewen8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloewen8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloewen8/subscriptions",
      "organizations_url": "https://api.github.com/users/cloewen8/orgs",
      "repos_url": "https://api.github.com/users/cloewen8/repos",
      "events_url": "https://api.github.com/users/cloewen8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloewen8/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-02T08:48:28Z",
    "updated_at": "2020-06-04T14:57:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nBasically Terraria or Starbound, but entirely exploration focused.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen overloading a function, I want to make sure the function is overridden in derived classes. I don't want to have myself or anyone else in the team wasting time looking for something as simple as not overriding a function.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIn other languages, I would do this by setting the function to be abstract or pure and leaving out the function body.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nHere is an example of what I tried to do a few seconds earlier:\r\n\r\n```python\r\nabstract func get_acceleration();\r\n```\r\n\r\nThis is how I expect it to work in most languages that allow for object oriented programming. If the function is not defined in the child class, an error is thrown immediately. It helps to find bugs early instead of some time later when the function is actually called (granted I remember to cause an error in the \"unimplemented\" version).\r\n\r\nI believe I heard recently that GDScript was being re-written for Godot 4. This is definitely something I would want to see added to help keep scripts a little more bug free.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI'd use this very often, but regardless, the alternative would be to define the function in the base class and hope it is overridden.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe this is something that should be built in to the language in the same way static type checking should be built in. It helps to identify and correct errors quickly. A benefit anyone who writes scripts could take advantage of, regardless of their project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/989/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/988",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/988/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/988/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/988/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/988",
    "id": 628641144,
    "node_id": "MDU6SXNzdWU2Mjg2NDExNDQ=",
    "number": 988,
    "title": "Add official Linux ARM/Raspberry Pi support and export templates",
    "user": {
      "login": "Schweini07",
      "id": 47503977,
      "node_id": "MDQ6VXNlcjQ3NTAzOTc3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/47503977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Schweini07",
      "html_url": "https://github.com/Schweini07",
      "followers_url": "https://api.github.com/users/Schweini07/followers",
      "following_url": "https://api.github.com/users/Schweini07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Schweini07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Schweini07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Schweini07/subscriptions",
      "organizations_url": "https://api.github.com/users/Schweini07/orgs",
      "repos_url": "https://api.github.com/users/Schweini07/repos",
      "events_url": "https://api.github.com/users/Schweini07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Schweini07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318904,
        "node_id": "MDU6TGFiZWwyMzU5MzE4OTA0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:linuxbsd",
        "name": "platform:linuxbsd",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 29,
    "created_at": "2020-06-01T18:32:41Z",
    "updated_at": "2021-01-02T19:48:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "***Bugsquad edit:** You can use https://github.com/hiulit/Unofficial-Godot-Engine-Raspberry-Pi until official builds are provided.*\r\n\r\n___\r\n\r\nThe re-open of https://github.com/godotengine/godot/issues/2671.\r\n\r\n**NOTE**: This issue is more about Godot 3.2, as Godot 3.0.6 and 3.1 are possible to get on the pi, with the costs of a few bugs, for more information read below.\r\n\r\nIf you have anything to add, please tell me.\r\n\r\n**Takeaways:**\r\n\r\n- Godot 3 works on the Raspberry Pi 4 due to the support for GLES3\r\n- A user named efornara got Godot 3.0.6/3.1 with GLES2 working on the Raspberry Pi 3 B+ trough compiling and other methods, see:\r\nhttps://github.com/godotengine/godot/issues/2671#issuecomment-452682275 (The error from compiling was apparently caused due to an upstream bug, see: https://github.com/godotengine/godot/issues/2671#issuecomment-452685013)\r\nhttps://github.com/godotengine/godot/issues/2671#issuecomment-453222752\r\n- There's a repo (https://github.com/efornara/frt) which let's the Pi support Godot 2.1/3.0/3.1 ~~BUT not~~ /3.2\r\n\r\n**Other interesting things I found:**\r\n\r\n- This website: http://raspbian.raspberrypi.org/raspbian/pool/main/g/godot/, which apparently has Godot 3.2 executables for the Pi\r\n- On https://repology.org/project/godot/versions, there's also apparently Godot 3.2 listed as an official raspbian package, it's not marked _Stable_ but as _Testing_.\r\n- When you want to install Godot trough `apt` on the Pi you write `apt install godot`, Godot 3.0.6 gets installed, as it's apparently the stable package (see link above).\r\n- Someone got export templates for Pi working on 2.1.4: https://github.com/crabcrabcam/godot/releases\r\n- This post: https://www.reddit.com/r/godot/comments/af1cji/compiling_godot_31_for_raspberry_pi/, where someone made instructions, on how to compile Gdot 3.1.1 for the Pi\r\n\r\n**Describe the project you are working on:**\r\nApplies to any project made on a Pi.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's hard perhaps even impossible, to get Godot 3.2 working on the Pi.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt's hard to tell why Godot 3.2 doesn't work with Pis below 4. My assumption is that it has to do something with the missing GLES3 or because the Pi has an ARM processor (https://godotengine.org/qa/13114/export-godot-project-for-raspberry-pi). I think it could help to look into: https://github.com/efornara/frt\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs I don't know the exact problems, I can't tell.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nA few lines of code probably won't do it, but Godot 3.2 is desired from Raspberry Pi users.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt isn't possible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/988/reactions",
      "total_count": 89,
      "+1": 60,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 17,
      "rocket": 0,
      "eyes": 8
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/987",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/987/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/987/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/987/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/987",
    "id": 628562090,
    "node_id": "MDU6SXNzdWU2Mjg1NjIwOTA=",
    "number": 987,
    "title": "Highlight the error line in the script editor minimap",
    "user": {
      "login": "bjr29",
      "id": 26935086,
      "node_id": "MDQ6VXNlcjI2OTM1MDg2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26935086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bjr29",
      "html_url": "https://github.com/bjr29",
      "followers_url": "https://api.github.com/users/bjr29/followers",
      "following_url": "https://api.github.com/users/bjr29/following{/other_user}",
      "gists_url": "https://api.github.com/users/bjr29/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bjr29/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bjr29/subscriptions",
      "organizations_url": "https://api.github.com/users/bjr29/orgs",
      "repos_url": "https://api.github.com/users/bjr29/repos",
      "events_url": "https://api.github.com/users/bjr29/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bjr29/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-01T16:17:18Z",
    "updated_at": "2020-06-01T20:25:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMaking a raymarcher for other projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLittle hard/ awkward to find the error sometimes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHighlight the sidebar, showing all of the code in the code editor, red on the line the error occured.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Example](https://user-images.githubusercontent.com/26935086/83429227-a2cb4180-a42b-11ea-87c2-37d004825f16.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts a small feature and don't think someone would really bother to make an add-on but it is a small quality of life thing I'd like and a few others will I think.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/987/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/986",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/986/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/986/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/986/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/986",
    "id": 628423759,
    "node_id": "MDU6SXNzdWU2Mjg0MjM3NTk=",
    "number": 986,
    "title": "Renaming a Node in parent scene should sync all scene that ineherit from it",
    "user": {
      "login": "Levrault",
      "id": 1162446,
      "node_id": "MDQ6VXNlcjExNjI0NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1162446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Levrault",
      "html_url": "https://github.com/Levrault",
      "followers_url": "https://api.github.com/users/Levrault/followers",
      "following_url": "https://api.github.com/users/Levrault/following{/other_user}",
      "gists_url": "https://api.github.com/users/Levrault/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Levrault/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Levrault/subscriptions",
      "organizations_url": "https://api.github.com/users/Levrault/orgs",
      "repos_url": "https://api.github.com/users/Levrault/repos",
      "events_url": "https://api.github.com/users/Levrault/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Levrault/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-01T13:06:12Z",
    "updated_at": "2020-06-01T20:18:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D pixel art platformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhile working on my interface, I saw that if I change a node name on a parent scene, al hisl ineherited scene would lost their content if this content was a child of the renamed node.\r\n\r\n![image](https://user-images.githubusercontent.com/1162446/83411268-309d3180-a418-11ea-81a4-b487d774cd5f.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImproving the scene and inheritance workflow. If a node is rename in the parent scene, it should be renamed on the child scene.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSince my current workaround is the manually renamed the node inside the tscn file, maybe the same thing could be automatized.\r\n\r\ne.g. if renaming a vboxcontainer to Page in the parent scene\r\n```\r\n[node name=\"Page\" type=\"VBoxContainer\" parent=\".\"]\r\nmargin_left = 20.0\r\nmargin_top = 15.0\r\nmargin_right = 460.0\r\nmargin_bottom = 255.0\r\nsize_flags_horizontal = 3\r\n```\r\nIt should reset the link of all the node of his child scene\r\n```\r\n[node name=\"Contents\" type=\"VBoxContainer\" parent=\"Page\"]\r\nmargin_top = 112.0\r\nmargin_right = 97.0\r\nmargin_bottom = 222.0\r\nsize_flags_horizontal = 0\r\ncustom_constants/separation = 10\r\n__meta__ = {\r\n\"_edit_use_anchors_\": false\r\n}\r\n\r\n[node name=\"Continue\" type=\"Button\" parent=\"Page/Contents\"]\r\nmargin_right = 97.0\r\nmargin_bottom = 20.0\r\ntext = \"ui_continue\"\r\nalign = 0\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCan be work \"by hand\" by opening the tscn file in a IDE and rename all by hand\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSince it directly touch the main core/feature of the ineherited scene and I think a lots of fellow developpers needs to rename some nodes, it could prevent lost of works and improve the workflow.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/986/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/985",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/985/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/985/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/985/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/985",
    "id": 628381669,
    "node_id": "MDU6SXNzdWU2MjgzODE2Njk=",
    "number": 985,
    "title": "Display viewport in UI with custom resolution and input support",
    "user": {
      "login": "FrenchKrab",
      "id": 14005967,
      "node_id": "MDQ6VXNlcjE0MDA1OTY3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14005967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FrenchKrab",
      "html_url": "https://github.com/FrenchKrab",
      "followers_url": "https://api.github.com/users/FrenchKrab/followers",
      "following_url": "https://api.github.com/users/FrenchKrab/following{/other_user}",
      "gists_url": "https://api.github.com/users/FrenchKrab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FrenchKrab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FrenchKrab/subscriptions",
      "organizations_url": "https://api.github.com/users/FrenchKrab/orgs",
      "repos_url": "https://api.github.com/users/FrenchKrab/repos",
      "events_url": "https://api.github.com/users/FrenchKrab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FrenchKrab/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-06-01T11:57:01Z",
    "updated_at": "2020-06-01T16:54:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA project that needs to display viewports with a custom resolution. These viewports should be able to receive inputs to be used as regular GUI for example.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere seems to be no way to display a UI with custom resolution and allowing it to receive user input (hover, click, etc).\r\nViewportContainer is probably what comes the closest with its \"shrink\" variable (but it has no way to set the resolution manually). Another thing that comes very close to it is the TextureRect with a ViewportTexture assigned.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA simple solution would be to add a \"adapt resolution\" variable in ViewportContainer. \r\nWhen it's checked on, the ViewportContainer behaves as it currently does.\r\nWhen it's checked off, the ViewportContainer do not automatically change the Viewport's resolution to match its own size, and just use the one currently set.\r\nThe \"stretch shrink\" variable could also have a special value (0 or -1).\r\n\r\nIt's also possible to allow the TextureRect to transmit its inputs to the Viewport it's linked to, but I guess that's not its purpose.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![godot windows tools 64_ML80jlcQsd](https://user-images.githubusercontent.com/14005967/83405882-c7b0bc00-a40d-11ea-84d7-6823a94e2645.png)\r\n\r\nWith this setting, the ViewportContainer would display the viewport as stretched , but wouldn't override its resolution.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTo make this work with a script, you have to replicate the behaviour of a ViewportContainer with a TextureRect.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think being able to control the game's resolution as wanted should be a core feature.\r\n\r\n**Additional note**\r\nHonestly I think TextureRect has useful attributes (stretch mode, flip) that are lacking on ViewportContainer and should definitely be added.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/983",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/983/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/983/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/983/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/983",
    "id": 628039358,
    "node_id": "MDU6SXNzdWU2MjgwMzkzNTg=",
    "number": 983,
    "title": "Improve accessibility features for keyboard navigation, UI scaling, TTS, voice recognition, colorblindness and subtitles",
    "user": {
      "login": "vnen",
      "id": 5599796,
      "node_id": "MDQ6VXNlcjU1OTk3OTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vnen",
      "html_url": "https://github.com/vnen",
      "followers_url": "https://api.github.com/users/vnen/followers",
      "following_url": "https://api.github.com/users/vnen/following{/other_user}",
      "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
      "organizations_url": "https://api.github.com/users/vnen/orgs",
      "repos_url": "https://api.github.com/users/vnen/repos",
      "events_url": "https://api.github.com/users/vnen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vnen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2020-05-31T20:37:03Z",
    "updated_at": "2020-08-25T21:39:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe Godot Engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAccessibility features might be required by law in some game projects. It's also nice to allow more people to play the games. Some accessibility features are not obvious or not possible to do only with the base engine and this needs to be improved.\r\n\r\nFor instance, the CVAA legislation covers anything with communication. So if your game features text or voice chat, you have to comply with the rules (assuming you are selling the game in the US, which most people are). Here's a blog post that covers how it is applicable to games: https://www.gamasutra.com/blogs/IanHamilton/20190123/334910/Demystifying_CVAA.php\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImproving documentation for existing features and implement missing features needed for providing greater accessibility in game projects. More details on what's needed are presented in the next section.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThere are a few important topics related to improving accessibility in general. I might even be missing something, as I'm not an expert in the area. If that's the case, let me know and I'll edit it in.\r\n\r\n### Input mapping\r\n\r\nGames should provide a way for the user to change the buttons needed to perform actions. Godot's InputMap feature can be used for this, but I'm not sure how difficult it is to make the menu in-game. At least we need a documentation page to describe the process with examples.\r\n\r\n### Keyboard navigation\r\n\r\nGodot can use keyboard to navigate between controls but there are still some issues. For instance, not all controls can receive focus which means they aren't target for keyboard navigation. Also, if you don't set the neighbors properly, navigation can reach a control.\r\n\r\nWhat could be done is improve default control focus and use either the tree or control position to determine neighbors for keyboard navigation.\r\n\r\nThis is important because some people can't operate a mouse and relies completely on keyboard for getting around.\r\n\r\n### Touch screen navigation\r\n\r\nMobile OSes provide gestures for blind users to navigate around the UI. Native apps follow this by default without effort when using the native SDKs. But when making a game, devs are using Godot's UI system which don't have the same capabilities AFAIK.\r\n\r\nThere should be away, preferably baked into the input system, to use the OS gestures to navigate around the game UI.\r\n\r\n### Font scaling\r\n\r\nThere must be a way to easily increase the size of all the text displayed. I do believe that if you are properly using themes you can do this by changing font only in a handful of places, but I haven't tested this.\r\n\r\nAt the very least, we need to improve documentation to show how you can use the available systems to make a global font size slider.\r\n\r\n### UI scaling\r\n\r\nIn a similar fashion to the previous point, the whole UI should be scalable. Using the `scale` property of controls is meant mostly for animations, and using that makes it difficult to correctly position everything.\r\n\r\nThis also includes making controls bigger so they can be an easy mouse target and also visible for people with low sight.\r\n\r\nWe should have a way to easily make everything bigger while maintaining defined positioning margins. Maybe there's no easy way to do this, but we need at least to try and make a documentation page about control scaling with correct positioning.\r\n\r\nHere's an example of this applied to a game: https://twitter.com/NateElCabro/status/1235290044866473984\r\n\r\n### Text-to-speech and speech-to-text\r\n\r\nThis is one of the most problematic topics. Adding a library to manage this in the base engine might be too much, especially since many games don't really *need* this.\r\n\r\nThe better possibility is to allow OS-level applications to properly read the screen. People who need a screen reader already have one installed and configured, so letting them use that is a good thing.\r\n\r\nSome systems might not have such OS-level applications, and need a custom solution (e.g. consoles) but in this case I believe it's okay to leave the burden to a third-party library. At least we need to make sure that GDNative is capable of binding such libraries, so plugins can be provided without the need of recompiling the engine.\r\n\r\nWe probably also need some description field for controls that don't have associated text, which would be used by screen readers. There's a long discussion (initiated by a blind developer) about this here: https://github.com/godotengine/godot/issues/14011\r\n\r\n### Color blind filters\r\n\r\nThis is more a \"nice-to-have\" than anything. The idea is to provide filters that simulate common types of color blindness, so developers can adapt their games to make elements distinct in all cases.\r\n\r\nThis is covered by #473 but I felt the need to include here. There's also a nice plugin that allows you to this already: https://github.com/paulloz/godot-colorblindness\r\n\r\nMaybe we should integrate or endorse such plugin.\r\n\r\n### Subtitling\r\n\r\nThis is also a \"nice-to-have\" which is meant to facilitate the addition of subtitles to games. Ideally anything that is said should also have a subtitle, including audio-description (especially when relevant to gameplay).\r\n\r\nThis one might be more suitable for a plugin, but I added here for completeness. For reference, see this subtitling plugin for the Unreal Engine: https://www.unrealengine.com/marketplace/en-US/product/yellow-subs-machine\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs it stands now it cannot be easily added with a few scripts (and should be used often).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMany points here are related on how the engine behave which should be standard, not modified by a plugin. Some of the points might be okay as plugins (we do need to make sure such plugins can be made).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/983/reactions",
      "total_count": 46,
      "+1": 35,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 11,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/982",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/982/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/982/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/982/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/982",
    "id": 628033478,
    "node_id": "MDU6SXNzdWU2MjgwMzM0Nzg=",
    "number": 982,
    "title": "Add method to set tree column title justification",
    "user": {
      "login": "Barugon",
      "id": 16503728,
      "node_id": "MDQ6VXNlcjE2NTAzNzI4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/16503728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Barugon",
      "html_url": "https://github.com/Barugon",
      "followers_url": "https://api.github.com/users/Barugon/followers",
      "following_url": "https://api.github.com/users/Barugon/following{/other_user}",
      "gists_url": "https://api.github.com/users/Barugon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Barugon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Barugon/subscriptions",
      "organizations_url": "https://api.github.com/users/Barugon/orgs",
      "repos_url": "https://api.github.com/users/Barugon/repos",
      "events_url": "https://api.github.com/users/Barugon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Barugon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-31T20:04:22Z",
    "updated_at": "2020-05-31T20:12:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHere's a link to the repository:\r\nhttps://github.com/Barugon/CotA\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to have Tree control column titles visible but there's no way to control the justification of the column title text. Center is the only justification and it doesn't look right.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a method to set the column title justification.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\ntree.set_column_title_align(0, ALIGN_LEFT)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo way to set it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIs that possible?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/980",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/980/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/980/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/980/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/980",
    "id": 627984027,
    "node_id": "MDU6SXNzdWU2Mjc5ODQwMjc=",
    "number": 980,
    "title": "C#: Merge methods that exist with and without underscore (virtual and non-virtual)",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-31T15:19:15Z",
    "updated_at": "2020-06-01T20:18:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's not intuitive that for example calling \"_GetPropertyList()\" returns null when it is meant to be overriden to return properties as list. Instead one has to use \"GetPropertyList()\".\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs the method with underscore is virtual it matches the common case in c# where logic is implemented in the base method and if desired the method is overridden with custom functionality. If the method returns values one can call base.Method() to retrieve them. This way both cases that currently seem to require 2 different but related Methods are handled.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nRemoving the non-virtual one and implementing its functionality in the other would do it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis part is not user-modifyable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's not user-modifyable",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/979",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/979/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/979/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/979/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/979",
    "id": 627932341,
    "node_id": "MDU6SXNzdWU2Mjc5MzIzNDE=",
    "number": 979,
    "title": "Give access to 3D position of mesh intersection for editor scripts",
    "user": {
      "login": "jitspoe",
      "id": 7751182,
      "node_id": "MDQ6VXNlcjc3NTExODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7751182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jitspoe",
      "html_url": "https://github.com/jitspoe",
      "followers_url": "https://api.github.com/users/jitspoe/followers",
      "following_url": "https://api.github.com/users/jitspoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jitspoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jitspoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jitspoe/subscriptions",
      "organizations_url": "https://api.github.com/users/jitspoe/orgs",
      "repos_url": "https://api.github.com/users/jitspoe/repos",
      "events_url": "https://api.github.com/users/jitspoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jitspoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-31T10:08:36Z",
    "updated_at": "2020-05-31T12:05:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** 2.5D platformer\r\n\r\n**Describe the problem or limitation you are having in your project:** Want tools to make level design and detailing faster.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** I'd like a way to, with an editor script, click in the 3D view and get the 3D position of the mouse cursor using mesh collision (like normal 3D selection works) so I can do things like spawn new meshes there.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** Basically want something like this function exposed to the editor/tool scripts: `bool EditorSpatialGizmo::intersect_ray(Camera *p_camera, const Point2 &p_point, Vector3 &r_pos, Vector3 &r_normal, int *r_gizmo_handle, bool p_sec_first)`\r\n\r\nConveniently takes the camera and 2D position (what's provided to the tool scripts currently), and returns a 3D pos and normal.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Not easily.  Seems the only way to do it is to generate a temporary collision and do a raycast or loop through every triangle and do a manual collision detection.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** This is effectively to make building add-ons easier.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/979/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/978",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/978/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/978/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/978/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/978",
    "id": 627904436,
    "node_id": "MDU6SXNzdWU2Mjc5MDQ0MzY=",
    "number": 978,
    "title": "Hiding parent node/mesh but mantaining children nodes visible.",
    "user": {
      "login": "jcarlosrc",
      "id": 8985409,
      "node_id": "MDQ6VXNlcjg5ODU0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8985409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcarlosrc",
      "html_url": "https://github.com/jcarlosrc",
      "followers_url": "https://api.github.com/users/jcarlosrc/followers",
      "following_url": "https://api.github.com/users/jcarlosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcarlosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcarlosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcarlosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/jcarlosrc/orgs",
      "repos_url": "https://api.github.com/users/jcarlosrc/repos",
      "events_url": "https://api.github.com/users/jcarlosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcarlosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-31T06:39:39Z",
    "updated_at": "2020-05-31T12:06:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nWorking on a simple test project in Godot 3.2.2 beta 3.\r\n\r\nEditing small child nodes gets difficult because parent meshes occlude them. Hiding parent node make all child to hide too.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe should have the option to hide only parent mesh without hiding child nodes.\r\n\r\nWe could have another button or an option on the right click mouse options list, or a key combination.\r\n\r\nIt is a core usability feature for general scene editing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/978/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/976",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/976/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/976/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/976/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/976",
    "id": 627900982,
    "node_id": "MDU6SXNzdWU2Mjc5MDA5ODI=",
    "number": 976,
    "title": "Adding multi-node scene editing such as child node addition.",
    "user": {
      "login": "jcarlosrc",
      "id": 8985409,
      "node_id": "MDQ6VXNlcjg5ODU0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8985409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcarlosrc",
      "html_url": "https://github.com/jcarlosrc",
      "followers_url": "https://api.github.com/users/jcarlosrc/followers",
      "following_url": "https://api.github.com/users/jcarlosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcarlosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcarlosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcarlosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/jcarlosrc/orgs",
      "repos_url": "https://api.github.com/users/jcarlosrc/repos",
      "events_url": "https://api.github.com/users/jcarlosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcarlosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-31T06:11:19Z",
    "updated_at": "2020-05-31T12:07:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nI am working in a basic project to get engine capabilities.\r\n\r\nI have many imported scenes from Blender. Some of them has many meshes.\r\n\r\nOnce nodes are selected, we should have options such adding a child node for all of them. This would enable us to to add kinematic body -> collision shapes for selected mesh instances nodes in scenes. Very useful for imported scenes.\r\n\r\nIt is a core feature that would increase general usability.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/975",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/975/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/975/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/975/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/975",
    "id": 627848561,
    "node_id": "MDU6SXNzdWU2Mjc4NDg1NjE=",
    "number": 975,
    "title": "Add a `LAYER` variable to spatial light shaders.",
    "user": {
      "login": "SIsilicon",
      "id": 34734122,
      "node_id": "MDQ6VXNlcjM0NzM0MTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/34734122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SIsilicon",
      "html_url": "https://github.com/SIsilicon",
      "followers_url": "https://api.github.com/users/SIsilicon/followers",
      "following_url": "https://api.github.com/users/SIsilicon/following{/other_user}",
      "gists_url": "https://api.github.com/users/SIsilicon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SIsilicon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SIsilicon/subscriptions",
      "organizations_url": "https://api.github.com/users/SIsilicon/orgs",
      "repos_url": "https://api.github.com/users/SIsilicon/repos",
      "events_url": "https://api.github.com/users/SIsilicon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SIsilicon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-30T23:37:20Z",
    "updated_at": "2020-08-11T19:44:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAnything involving the light shader.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes, we want to treat one light source different from the other in a shader, but we have no information on which light we are processing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that we pass the light's render layer mask to the shader. That way, we can treat each light differently.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nImplementation depends somewhat on the video driver. But I'll figure it out.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope. This a visual server thing.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame as above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/975/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/974",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/974/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/974/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/974/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/974",
    "id": 627845635,
    "node_id": "MDU6SXNzdWU2Mjc4NDU2MzU=",
    "number": 974,
    "title": "Make the `VERTEX` variable editable in spatial fragment shaders",
    "user": {
      "login": "SIsilicon",
      "id": 34734122,
      "node_id": "MDQ6VXNlcjM0NzM0MTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/34734122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SIsilicon",
      "html_url": "https://github.com/SIsilicon",
      "followers_url": "https://api.github.com/users/SIsilicon/followers",
      "following_url": "https://api.github.com/users/SIsilicon/following{/other_user}",
      "gists_url": "https://api.github.com/users/SIsilicon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SIsilicon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SIsilicon/subscriptions",
      "organizations_url": "https://api.github.com/users/SIsilicon/orgs",
      "repos_url": "https://api.github.com/users/SIsilicon/repos",
      "events_url": "https://api.github.com/users/SIsilicon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SIsilicon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-30T23:18:06Z",
    "updated_at": "2020-07-03T10:15:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA Signed distance field sphere tracer.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe lighting of the fragments do not match their positions calculated in the fragment shader.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt's simple really. Just allow the `VERTEX` built-in variable to be written to. That way, the lighting can be altered to conform to the fragment's \"virtual\" position.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe vertex is accessed as a varying in the fragment shader, so an intermediate variable must be used instead to allow the `VERTEX` to be written to. Also, it can work just how `MODULATE` was [implemented](https://github.com/godotengine/godot/commit/d8be5a9986ab4125316f086a309374dd35a89744).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAbsolutely not. This a visual server level change.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame reason as above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/974/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/973",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/973/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/973/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/973/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/973",
    "id": 627765486,
    "node_id": "MDU6SXNzdWU2Mjc3NjU0ODY=",
    "number": 973,
    "title": "Allow animation target switching",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-30T16:15:03Z",
    "updated_at": "2020-06-08T19:37:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\na 3d sokoban like with twisty puzzle mechanics\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI animated a mesh in blender imported that mesh and its animations, but I don't want those animations attached to the mesh. I want them attached to the kinematic body that mesh is a child of that way the collision box inherits the animation too. However I am struggling to switch the target. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to be able to either right click or double click the target of an animation to pop open the same object selection menu that pops up when you first choose the type of track you want to animate from which you could choose a new target. And perhaps an additional method to do the same in the inspector when selecting the track. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nShould be used often enough and you shouldn't have to do this through code. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause switching targets is probably really common",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/973/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/972",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/972/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/972/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/972/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/972",
    "id": 627694119,
    "node_id": "MDU6SXNzdWU2Mjc2OTQxMTk=",
    "number": 972,
    "title": "Add a `clear_output()` method that mimics pressing the Clear button in the Output tab",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-30T10:01:52Z",
    "updated_at": "2020-10-05T09:47:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(N/A) (Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere doesn't seem to be a way to clear the text in the Output tab via code.\r\n(You can press the _**Clear**_ button or use _**Control+Shift+K**_, but that isn't a solution.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a `clear_output()` function that mimics the behavior of pressing the **_Clear_** button would allow for quickly seeing only the relevant print statements after the `clear_output()` call.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc clear_output():\r\n\t<does whatever pressing the Clear button does>\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, but correct me if I'm wrong.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nProbably not possible with an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/972/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/971",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/971/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/971/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/971/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/971",
    "id": 627688199,
    "node_id": "MDU6SXNzdWU2Mjc2ODgxOTk=",
    "number": 971,
    "title": "Improve output log / enable filtering for warnings, errors and verbose messages",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-30T09:27:04Z",
    "updated_at": "2020-06-04T03:55:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe output log gets spammed with messages that are irrelevant to regular users for certain interactions with the editor, but they prevent easily catching actual errors that get pushed out of sight this way.\r\n\r\n![grafik](https://user-images.githubusercontent.com/8841352/83323405-da38c300-a25e-11ea-9cc0-d5c63d4bcf92.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an option to the output panel or editor settings that allows controlling the log types would help, like filter type toggles/mask or a log-type level dropdown.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFor example as type toggles:\r\n![V1](https://user-images.githubusercontent.com/8841352/83324683-520aeb80-a267-11ea-8021-191495bd6e5b.jpg)\r\nor\r\n![V2](https://user-images.githubusercontent.com/8841352/83324687-56370900-a267-11ea-9371-1a9b67566852.jpg)\r\nwhere i'd personally prefer the latter\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think it can without diving deep.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's not a big change, but it improves working with the engine. It may be hackable with editorplugins but it's such a basic functionality that most users would not now exists if distributed via assetlibrary, as it's typically expected to be part of the editor (as in other engines)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/971/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/966",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/966/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/966/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/966/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/966",
    "id": 627526957,
    "node_id": "MDU6SXNzdWU2Mjc1MjY5NTc=",
    "number": 966,
    "title": "Improve unintuitive tab - content view behaviour",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-29T20:41:39Z",
    "updated_at": "2020-05-31T22:40:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm new to godot so i act based on my intuition and found quirks i stumple upon quite often.\r\nWhen i have a scene open and decide to click the assetlib button at the top, browse it and want to close it again i intuitively click the 'x' in the tab which unfortunately and unexpectedly closes the open scene because it replaces the tab's content view without actually replacing the tab.\r\nSame with the script editor.\r\nThis confusion is shared with 2D/3D being 'global' buttons even though assetlib or scripteditor don't have those view modes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEither \r\n1- open the assetlib and script editor in a separate tab (see mockup below)\r\n2- have the close action move the window back into the last scene view state (2D or 3D)\r\n3- print a warning that this will not close the current view but the scene (suboptimal)\r\n\r\nand move the 2D/3D buttons into some panel or block inside the scene view where they make more sense.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Declutter](https://user-images.githubusercontent.com/8841352/83301907-b774c300-a1fa-11ea-889c-d816161541a5.jpg)\r\nHere i reordered a few elements. The script editor is a separate tab (as the assetlib would be), 2D/3D are moved into the sceneview as toggle between both modes (works well in unity, plus it can even be hidden if only 2D is used (editor feature)). This makes the top mostly free space. The assetlib button can be moved into the editor menu as its functionality will likely not be need so frequently to warrant such a global presence (again same as unity, where their store is even existential for their business). Following this the upper space is free to be used by expanded content views.\r\nThis way closing the script/assetlib panel does not collide with the sceneview, context-dependent functionality is visually and functionally linked to its context and more space is available.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt most likely cannot be added with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt potentially provides more intuitive interactions, so it's a gain in usability for every new godot user and changing this via editor plugins most likely requires very hackish workarounds if even possible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/966/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/965",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/965/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/965/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/965/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/965",
    "id": 627519510,
    "node_id": "MDU6SXNzdWU2Mjc1MTk1MTA=",
    "number": 965,
    "title": "Add support for exporting projects as live/interactive wallpapers ",
    "user": {
      "login": "johnnyjmcivorv",
      "id": 46433372,
      "node_id": "MDQ6VXNlcjQ2NDMzMzcy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/46433372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johnnyjmcivorv",
      "html_url": "https://github.com/johnnyjmcivorv",
      "followers_url": "https://api.github.com/users/johnnyjmcivorv/followers",
      "following_url": "https://api.github.com/users/johnnyjmcivorv/following{/other_user}",
      "gists_url": "https://api.github.com/users/johnnyjmcivorv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johnnyjmcivorv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johnnyjmcivorv/subscriptions",
      "organizations_url": "https://api.github.com/users/johnnyjmcivorv/orgs",
      "repos_url": "https://api.github.com/users/johnnyjmcivorv/repos",
      "events_url": "https://api.github.com/users/johnnyjmcivorv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johnnyjmcivorv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-29T20:26:45Z",
    "updated_at": "2020-06-13T10:10:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI am creating a series of interactive desktop wallpapers. They are 2D and employ ragdoll physics.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere doesn't seem to be any way to convert the project into a wallpaper. There is a way to do this in Unity, but it doesn't appear to be possible with Godot, as there are no tutorials online.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature would allow you to turn your application or project into a live wallpaper.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI do not know anything about programming. Maybe it would be some kind of plugin?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI do not know. You could possibly make a separate program for it, assuming that it is simple.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt doesn't have to be core, but I think a lot of people would use it as it's an easy way to make downloadable content that you could sell. Making a game takes months; making a wallpaper takes a few hours to a few days.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/965/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/964",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/964/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/964/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/964/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/964",
    "id": 627518399,
    "node_id": "MDU6SXNzdWU2Mjc1MTgzOTk=",
    "number": 964,
    "title": "Add dynamic GDScript method call and reflection support",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-29T20:24:33Z",
    "updated_at": "2020-05-30T09:49:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Reproduction of godotengine/godot#23066\r\n\r\n**Describe the project you are working on:**\r\nPlugin for skill system.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have nodes which spawn and manage an internal collection of other nodes. Sometimes, I want multiple methods, using a naming convention, to all be mirrored in the main node that spawns the children. Right now, I have to redefine each method, get the child node, and delegate the method call for every single one.\r\n\r\nIt's particularly annoying because I rather enjoy creating well-encapsulated code and keeping my code in scripts rather than in a scene. Defining the overall interface I want on the root node is easier when I can fully control what methods are exposed. I no longer have to expose an entire child node as a getter to simplify workflows or re-implement a collection of methods for no other purpose than mirroring other method calls. So, I do it often enough in my own projects that I'd prefer having a proper solution to it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt'd make the code a lot cleaner and more readable if I could just create overloads for `_get_method_list()` and `_callv()` just like I can for `_get_property_list()`/`_get()`/`_set()`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIdeally, mimic the workflow of the other property overrides, but apply it for method calls. I don't *think* there would be a lot of work necessary to do it. Just have it be something like...\r\n\r\n    func _callv(name: StringName, args: Array):\r\n        if name.begins_with(\"prefix_\"):\r\n            return get_node(\"Child\").callv(name, args)\r\n        push_error(\"Bad method call\")\r\n        return null\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around with a few lines of script, but the purpose is to improve usability to avoid having to produce N lines of code for every method call you want to delegate.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt cannot be solved with script code alone, so it would require changes to the GDScript implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/964/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/963",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/963/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/963/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/963/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/963",
    "id": 627499291,
    "node_id": "MDU6SXNzdWU2Mjc0OTkyOTE=",
    "number": 963,
    "title": "Project option to display stack trace for errors and warnings",
    "user": {
      "login": "pouleyKetchoupp",
      "id": 1075032,
      "node_id": "MDQ6VXNlcjEwNzUwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1075032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pouleyKetchoupp",
      "html_url": "https://github.com/pouleyKetchoupp",
      "followers_url": "https://api.github.com/users/pouleyKetchoupp/followers",
      "following_url": "https://api.github.com/users/pouleyKetchoupp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pouleyKetchoupp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pouleyKetchoupp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pouleyKetchoupp/subscriptions",
      "organizations_url": "https://api.github.com/users/pouleyKetchoupp/orgs",
      "repos_url": "https://api.github.com/users/pouleyKetchoupp/repos",
      "events_url": "https://api.github.com/users/pouleyKetchoupp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pouleyKetchoupp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-29T19:44:19Z",
    "updated_at": "2020-11-24T23:25:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot a project specific feature.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn case of errors, only the specific function and line are displayed in the log. It would be useful to be able to get a stack trace so you can track down the cause of errors in some situations.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nNew project setting to show call stacks for errors:\r\n`debug/settings/error_handler/max_call_stack`\r\n\r\nIt would allow to show a certain number of levels in the call stack, including gdscript if the error comes from scripts.\r\n\r\nBy default, it should be disabled because it can slow things down very badly when getting stack trace information.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWork in progress version:\r\nhttps://github.com/godotengine/godot/compare/master...nekomatata:error-handler-windows\r\n\r\nThis is a version I've implemented for my custom branch. It's Windows only and it should be compatible at least with Godot 3.2.\r\n\r\nHere are the remaining steps to finalize it:\r\n\r\n- [x] Rebase on 4.0 and make sure the code is compatible\r\n\r\n- [x] Windows implementation: refactor the crash handler code to be able to share the access to stack trace information between crash handler and error handler\r\n\r\n- [x] Make a cross-platform error handler class to manage some common logic/utils, like accessing scripts stack trace information and formatting the messages\r\n\r\n- [x] Add Linux implementation\r\n\r\n- [ ] Add macOS implementation\r\n\r\n- [ ] Add iOS implementation\r\n\r\n- [ ] Add Android implementation\r\n\r\n- [ ] Add HTML5 implementation\r\n\r\nI wouldn't mind working on at least the first 3 points if there's an interest in this feature.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt has to be part of the engine to work.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/963/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/961",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/961/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/961/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/961/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/961",
    "id": 627279055,
    "node_id": "MDU6SXNzdWU2MjcyNzkwNTU=",
    "number": 961,
    "title": "Sync to physics for KinematicBody3D (like in 2D)",
    "user": {
      "login": "fabriceci",
      "id": 6397893,
      "node_id": "MDQ6VXNlcjYzOTc4OTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6397893?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabriceci",
      "html_url": "https://github.com/fabriceci",
      "followers_url": "https://api.github.com/users/fabriceci/followers",
      "following_url": "https://api.github.com/users/fabriceci/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabriceci/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabriceci/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabriceci/subscriptions",
      "organizations_url": "https://api.github.com/users/fabriceci/orgs",
      "repos_url": "https://api.github.com/users/fabriceci/repos",
      "events_url": "https://api.github.com/users/fabriceci/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabriceci/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-29T13:44:18Z",
    "updated_at": "2020-05-29T14:21:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "*This issue [come from the main repository](https://github.com/godotengine/godot/issues/36483), I moved it here as suggested*\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n[Godot 3.1](https://godotengine.org/article/godot-31-will-get-many-improvements-kinematicbody) added the \"sync to physics\" checkbox to fix the following issue: when a body is on a platform, he slowly slides over it when the platform change direction (because the motion is a frame ahead than the physics)\r\n\r\n![2D Slide issue](https://godotengine.org/storage/app/uploads/public/5b4/de7/118/5b4de71180c66281786233.gif \"slide issue\")\r\n\r\nThere is the same issue in 3D but this feature was not added yet on the KinematicBody3D",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/960",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/960/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/960/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/960/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/960",
    "id": 627216882,
    "node_id": "MDU6SXNzdWU2MjcyMTY4ODI=",
    "number": 960,
    "title": "Implement a native WebView node",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-05-29T11:59:31Z",
    "updated_at": "2020-12-11T10:26:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA \"News\"/\"Release Notes\" section within game menus.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is not uncommon for games to rely on HTML-based content to display things like news, updates, release notes, help, EULA/TOS. Currently Godot provides no first-party option to integrate such content. This means that developers requiring such functionality either need to implement all of those using Godot systems, or provide a link that opens in another application and takes a user out of the game.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA WebView node can be introduced to allow display of both local and remote HTML documents. On many systems WebView is already a type of component that can be added as a part of UI, so this way it maps perfectly to how native apps are designed and fits Godot's node-based structure.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhile it is not impossible to introduce something like that using a third-party module and Chromium, this provides a challenge for first-time developers and designers with limited coding experience. We could make a first-party module with the same Chromium or WebKit based solution. but obviously, Godot **should not** rely on such things for a secondary feature. This would be an unnecessary bloat.\r\n\r\nHowever, many platforms provide a native WebView component, that can be integrated with some work by us or reliance on a third party library. Quick search yielded [zserge/webview](https://github.com/zserge/webview), though I'm not experienced enough to speak to its quality. Also, I don't see mobile platforms mentioned there.\r\n\r\nBut this library still demonstrates that it is possible to integrate native WebViews on all desktop platforms, while on mobile it is a given for both Android and iOS. So a `WebView` node would hide a native WebView component, that has platform-specific implementation. And for HTML5 exports it can be replaced with an `iframe` tag, for example.\r\n\r\nThe API such node should provide can be determined based on capabilities of various platforms, but it should at least support opening a web URI and a local HTML document (provided as a `res://` path or as a text content).\r\n\r\nIt should introduce signals for `DOMContentLoaded`, HTTP errors, navigation events, if navigation is supported. \r\n\r\nIt should probably be a Control-based node with a bounding rectangle that defines the viewport for the HTML document.\r\n\r\nI don't think that any data pass-through between a WebView and the parent application should be allowed. I believe this feature is beneficial for displaying content only. No `JavaScript.eval` and no callbacks.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nDefinitely not a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is possible to introduce this as a module, however given that we can make it a relatively small built-in module I'd opt for a solution available to everybody. Especially, given that HTML is much more accessible for first-time devs and general public, which can drastically reduce development time on some features for less experienced folks.\r\n\r\nPS. This proposal is totally not inspired by a thought to have [an HTML5 Godot Editor](https://godotengine.org/article/godot-editor-running-web-browser) running within a native Godot Editor. I promise!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/960/reactions",
      "total_count": 10,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/959",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/959/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/959/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/959/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/959",
    "id": 627021276,
    "node_id": "MDU6SXNzdWU2MjcwMjEyNzY=",
    "number": 959,
    "title": "Add a way to delete all breakpoints in a script",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-29T06:03:54Z",
    "updated_at": "2020-05-30T23:39:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nsokoban like with twisty puzzle mechanics\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nirritated by having to manually uncheck every breakpoint after debugging\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nin the debug drop down, have 2 options\r\n1. Delete break points in this script\r\n2. Delete all break points\r\nmaybe even give them shortcuts. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nwill be used often, cannot be worked around\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause everyone debugs.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/957",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/957/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/957/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/957/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/957",
    "id": 626926633,
    "node_id": "MDU6SXNzdWU2MjY5MjY2MzM=",
    "number": 957,
    "title": "More performant partial region updates to multimeshes",
    "user": {
      "login": "raymoo",
      "id": 5734399,
      "node_id": "MDQ6VXNlcjU3MzQzOTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5734399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raymoo",
      "html_url": "https://github.com/raymoo",
      "followers_url": "https://api.github.com/users/raymoo/followers",
      "following_url": "https://api.github.com/users/raymoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/raymoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raymoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raymoo/subscriptions",
      "organizations_url": "https://api.github.com/users/raymoo/orgs",
      "repos_url": "https://api.github.com/users/raymoo/repos",
      "events_url": "https://api.github.com/users/raymoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raymoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-29T01:03:42Z",
    "updated_at": "2020-10-18T21:33:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm working on a 2d shmup. I use instanced rendering with multimeshes to render bullets, since I found other methods not performant enough. To avoid constant reallocation of the multimesh, I allocate a maximum number of instances and limit rendering by setting the number of instances. Every frame I would go over each bullet, write out the instance data, then set the number of rendered instances to the number of bullets that were rendered.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMy initial approach was to write the instance data to a `Vector<float>` in a tight loop and then push it to the multimesh using `multimesh_set_buffer`. However, this had some performance issues due to `multimesh_set_buffer` only taking vectors with data for the whole buffer:\r\n* Requires copying of data for the whole buffer, even if I only want to write some of it (there are only a number of rendered instances equal to the number of bullets, and the rest is garbage data that will be changed when I actually have more bullets to render).\r\n* The whole buffer is pushed to the GPU every time, a similar issue to the above point, but between the GPU and CPU.\r\n\r\nIn addition, the AABB is recomputed across all instances, rather than just visible instances (https://github.com/godotengine/godot/blob/00949f0c5fcc6a4f8382a4a97d5591fd9ec380f8/servers/rendering/rasterizer_rd/rasterizer_storage_rd.cpp#L2984). This was actually the biggest performance sink found when I profiled.\r\n\r\nIn the end I ended up just eating the cost of the API calls and used `multimesh_instance_set_*` to write the instances out. These functions mark specific regions to be sent to the GPU, and also only compute the AABB over visible instances. This method was faster.\r\n\r\nThere are potentially also issues with reallocations when the `Vector<float>` changes size frequently, but I believe that is a more general issue. `LocalVector`, which does not reallocate on shrinking, was introduced in godotengine/godot#38386, but it is not used in many existing APIs, including `multimesh_set_buffer`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere are multiple issues and a couple different use cases that might require different fixes:\r\n* The AABB calculation can be made faster (in the case of partial rendering) by marking the AABB dirty as in the instance update functions like `multimesh_instance_set_transform`, so that only visible instances are included in the computation. Ideally AABB computation could be optionally omitted entirely in case the developer is sure that the multimesh will always be on screen (as in my use case).\r\n* For the other issues, it would be sufficient in my use case to allow `multimesh_set_buffer` to take an undersized buffer. This is because my usage pattern is to update only the visible prefix of the buffer, with no gaps. I wouldn't need to use the `multimesh_set_instance_*` functions, so no data cache would be necessary or helpful.\r\n* The more general case where regions are updated in the middle of the buffer may benefit from caching when multiple regions are updated in a frame (similar to `multimesh_set_instance_*`). This would require a different interface to allow specifying the start index of the region. I am not sure what a realistic use case would be for this since I don't need it myself, but it seems useful.\r\n\r\nPerformance may also improve in `CPUParticles2D` which has a similar usage pattern to mine. It would need to be changed to set undersized buffers.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI think the first two changes are mostly straightforward local code changes.  A general region update function could have some signature like the following:\r\n```\r\nvoid multimesh_set_region(RID p_multimesh, size_t start_index, const Vector<float> &p_data);\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo. I have described a workaround for the base issue above (using `multimesh_instance_set_*`), but this enhancement would improve performance further by avoiding doing the API calls in a loop and not having an extra cache to copy to.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt needs to touch core rendering APIs.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/957/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/956",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/956/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/956/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/956/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/956",
    "id": 626911625,
    "node_id": "MDU6SXNzdWU2MjY5MTE2MjU=",
    "number": 956,
    "title": "Support using multiple cameras in a single viewport",
    "user": {
      "login": "Mantissa-23",
      "id": 11467714,
      "node_id": "MDQ6VXNlcjExNDY3NzE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11467714?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mantissa-23",
      "html_url": "https://github.com/Mantissa-23",
      "followers_url": "https://api.github.com/users/Mantissa-23/followers",
      "following_url": "https://api.github.com/users/Mantissa-23/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mantissa-23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mantissa-23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mantissa-23/subscriptions",
      "organizations_url": "https://api.github.com/users/Mantissa-23/orgs",
      "repos_url": "https://api.github.com/users/Mantissa-23/repos",
      "events_url": "https://api.github.com/users/Mantissa-23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mantissa-23/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "reduz",
        "id": 6265307,
        "node_id": "MDQ6VXNlcjYyNjUzMDc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reduz",
        "html_url": "https://github.com/reduz",
        "followers_url": "https://api.github.com/users/reduz/followers",
        "following_url": "https://api.github.com/users/reduz/following{/other_user}",
        "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
        "organizations_url": "https://api.github.com/users/reduz/orgs",
        "repos_url": "https://api.github.com/users/reduz/repos",
        "events_url": "https://api.github.com/users/reduz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/reduz/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 8,
    "created_at": "2020-05-29T00:13:57Z",
    "updated_at": "2020-09-14T00:07:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA first-person shooter, making use of first-person viewmodels that are separate from third-person/worldspace models.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot currently only supports rendering one camera per viewport. This makes the following use-cases difficult to implement:\r\n- Secondary camera with fixed FOV for consistent viewmodel appearance despite changes to primary camera FOV\r\n- 3d \"skybox\" implementation where distant/background objects are rendered at a smaller scale in a separate scene.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllowing multiple cameras (with different render masks) to render to the same viewport would overcome this problem. For each use case:\r\n- A primary camera is used to render the world, with player-changeable FOV. A secondary camera is used to render viewspace objects, such as gun viewmodels, hands, grenades, etc.\r\n- A primary camera is used to render near objects; a secondary camera is used to render far objects which are stored in a separate 3d render layer.\r\n\r\nThis is a feature that is present in both Unreal and Unity, and is used for similar reasons.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCameras will have a `depth` field, which determines the order in which they render; pixels that reach the background of one camera (i.e. are not rendered) at a higher depth will be rendered by the next lowest camera.\r\n\r\nI don't have an understanding of Godot's rendering pipeline, and understand it is in flux for Godot 4.0. I have C++ experience, and with some pointers I'd be willing to implement this myself for 3.2.2 or 4.0.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI believe these can currently be implemented using a screen-space ViewportTexture and Viewport nodes, however, I haven't tested this, and I imagine the performance would be worse than rendering to the same, default Viewport from multiple cameras. If the performance would be similar, go ahead and close this issue.\r\n\r\nThat being said, I do believe using ViewportTextures is still less _intuitive_ than having multiple cameras rendering to a single Viewport.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis requires a change to the Camera node as well as how it interfaces with the rendering pipeline. I also cannot imagine it being a large change, either code-wise or size-wise.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/956/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/955",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/955/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/955/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/955/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/955",
    "id": 626852189,
    "node_id": "MDU6SXNzdWU2MjY4NTIxODk=",
    "number": 955,
    "title": "Make true copy and paste as well as Ctrl+C, Crtl+X, Ctrl+V throughout the editor a thing",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-28T22:18:59Z",
    "updated_at": "2020-11-26T15:03:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nSee original issue: https://github.com/godotengine/godot/issues/27280\r\nfor a whole range of related open issues and feature requests.\r\n\r\n**Describe the project you are working on:** Applies to all games and projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to quickly, easily and intuitively select something in the editor copy it with Ctrl +C and paste it with Ctrl+V.\r\nCurrent implementation is not consistent throughout the editor and often not even existing.\r\nSometimes you will find copy and paste only in a context menu, sometimes it's hidden in a drop down, sometimes it is called duplicate and not actually a true copy and paste, sometimes it copies as just reference, even though it says copy.\r\n\r\nIdeally also supply the same usability for Ctrl+X and Crtl+D\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nselect thing -> copy (Crtl+C) -> go to paste location -> paste (Ctrl+V)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/47016402/83199242-1ece3c80-a141-11ea-9a87-277ab0d48013.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImho this not just needs to be build in, deep into the core, I think the core of the editor should be invested with this functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/955/reactions",
      "total_count": 13,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/954",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/954/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/954/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/954/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/954",
    "id": 626843315,
    "node_id": "MDU6SXNzdWU2MjY4NDMzMTU=",
    "number": 954,
    "title": "Add code, script and node navigation & history controls using auxiliary (back/forward) mouse buttons",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2020-05-28T21:59:58Z",
    "updated_at": "2021-01-03T17:00:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Applies to all games and projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to quickly jump back and forth in the history of my code and script and node navigation. I use a 5 button mouse because it speeds up my web browsing to the tenfold. I would love the same speed and usability in Godot.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/26272\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n5th mouse button to jump back in cursor navigation history / previous script / last selected node, 4th mouse button to jump forward.\r\nProvide configuration options in the Editor to set custom keys/buttons or keyboard shortcuts and options to enable/disable jumping the cursor navigation history / script or node selection.\r\nThis way the user could use use the 4th and 5th mouse button to only jump between used scripts or between selected nodes or between cursor position in single script or any two of those options.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/47016402/83198154-f3e2e900-a13e-11ea-8e99-d354a9b71cb5.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUsability features should be built in, I believe.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/954/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/953",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/953/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/953/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/953/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/953",
    "id": 626832165,
    "node_id": "MDU6SXNzdWU2MjY4MzIxNjU=",
    "number": 953,
    "title": "Add a undo/redo history log",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-28T21:36:51Z",
    "updated_at": "2020-11-14T02:32:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** This applies to any game or project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't know which action I can undo and which action I can't undo. Jumping back and forth in the undo history is anything but transparent or user friendly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA panel with a history log for all undoable steps. Branching undo tree would be amazing, but a linear list would already be a great improvement.\r\nIssue moved here from https://github.com/godotengine/godot/issues/25919\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![undohistory](https://user-images.githubusercontent.com/47016402/83196093-8ed9c400-a13b-11ea-9f36-94cb14108e51.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core usability feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/953/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/950",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/950/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/950/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/950/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/950",
    "id": 626822206,
    "node_id": "MDU6SXNzdWU2MjY4MjIyMDY=",
    "number": 950,
    "title": "Allow AnimationPlayer tracks to target multiple Nodes",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T21:19:54Z",
    "updated_at": "2020-05-29T07:37:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:** 2D Action Adventure with stacked Sprites+spritesheet textures\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nComposing multiple Sprites with different spritesheets into one character is an ancient technique. In order to do this I need to apply the same Sprite animation track to multiple sprite nodes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA small plus icon that would allow me to add other existing nodes as track targets to my animation track, as long as they are of the same type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/47016402/83194474-fe9a7f80-a138-11ea-946f-f2391d1e4fff.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere are a few workarounds ([see here](https://github.com/godotengine/godot/issues/22421#issuecomment-634859730)), but they all have massive caveats. I believe this would be an enhancement not only very useful for composite sprites, but also for all kinds of other applications. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an enhancement of an existing core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/950/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/947",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/947/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/947/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/947/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/947",
    "id": 626751627,
    "node_id": "MDU6SXNzdWU2MjY3NTE2Mjc=",
    "number": 947,
    "title": "Update the default Android loading behavior so that the engine also looks for the exported .pck or .zip file in the assets folder.",
    "user": {
      "login": "dariuspranskus",
      "id": 15170614,
      "node_id": "MDQ6VXNlcjE1MTcwNjE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/15170614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dariuspranskus",
      "html_url": "https://github.com/dariuspranskus",
      "followers_url": "https://api.github.com/users/dariuspranskus/followers",
      "following_url": "https://api.github.com/users/dariuspranskus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dariuspranskus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dariuspranskus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dariuspranskus/subscriptions",
      "organizations_url": "https://api.github.com/users/dariuspranskus/orgs",
      "repos_url": "https://api.github.com/users/dariuspranskus/repos",
      "events_url": "https://api.github.com/users/dariuspranskus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dariuspranskus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T19:22:10Z",
    "updated_at": "2020-12-17T04:24:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project which requires export to Android\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is related to [#946](https://github.com/godotengine/godot-proposals/issues/946\r\n). Currently export to Android feature puts individual project files into assets folder on exported APK. Some of the files are exported as is in plain text. This allows easy retrieval of assets and other files.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nChange the default Android load behavior so that it looks for a pck or zip file for the project assets when the project is executed on a Android device.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDuring the load process, while executing the app on android device, the system will look for the .PCK file and loads all resources from it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEvery time when the project is executed on Android device.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is core Android load functionality",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/946",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/946/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/946/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/946/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/946",
    "id": 626745691,
    "node_id": "MDU6SXNzdWU2MjY3NDU2OTE=",
    "number": 946,
    "title": "Change the default Android export behavior so that a .pck or .zip file of the project is pushed to the assets folder instead of the project files.",
    "user": {
      "login": "dariuspranskus",
      "id": 15170614,
      "node_id": "MDQ6VXNlcjE1MTcwNjE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/15170614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dariuspranskus",
      "html_url": "https://github.com/dariuspranskus",
      "followers_url": "https://api.github.com/users/dariuspranskus/followers",
      "following_url": "https://api.github.com/users/dariuspranskus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dariuspranskus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dariuspranskus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dariuspranskus/subscriptions",
      "organizations_url": "https://api.github.com/users/dariuspranskus/orgs",
      "repos_url": "https://api.github.com/users/dariuspranskus/repos",
      "events_url": "https://api.github.com/users/dariuspranskus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dariuspranskus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T19:11:18Z",
    "updated_at": "2020-12-17T04:24:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny Godot project which needs to be exported to Android\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently export to Android feature puts individual project files into assets folder on exported APK. Some of the files are exported as is in plain text. This allows easy retrieval of assets and other files.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nChange the default Android export behavior so that a .pck or .zip file of the project is pushed to the assets folder instead of the project files. This will make the extraction o the asset and other project files more difficult \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAfter the change, the export to Android feature will create a pck file in the exported APK file of all the projects files. then the load behavior needs to be changed to look also for PCK file. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used every time the export to Android feature is used. No, it can't be easily worked around with a few lines of code\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause this is a core export functionality\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/946/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/945",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/945/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/945/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/945/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/945",
    "id": 626716193,
    "node_id": "MDU6SXNzdWU2MjY3MTYxOTM=",
    "number": 945,
    "title": "Allow to define center of mass and inertia tensor",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-28T18:20:40Z",
    "updated_at": "2020-09-08T12:55:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Continuation of https://github.com/godotengine/godot/issues/28062\r\nAnd https://github.com/godotengine/godot/issues/12353\r\n\r\n**Describe the project you are working on:**\r\nAny kind of physics-driven game, especially one where players can build. Attempted a prototype but had to stop due to lack of the feature.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot does not appear to calculate the center of mass properly, and does not have an API to choose where it is. It rather *defaults it* as the transform origin of the whole body, which is incredibly impractical. That works relatively well in simple cases and eventually on pre-constructed game elements, but as soon as the game allows to change the shape of the body through customization, building system or partial destruction in the middle of simulation, properly relocating the center of mass through teleportation of all its parts becomes a problem.\r\nInertia tensor is also something that can vary depending on the parts of the body, so I included it in this proposal.\r\n\r\nNote: this issue is mainly about 3D, but I believe 2D has the same problem.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTwo things:\r\n- Center of mass and inertia tensor should be properly computed based on the positionning and mass of its parts, if we want to. That could be a default for rigidbodies. \r\n- We should be able to override them, without having to shift everything around the root transform. This is useful in case some parts dynamically change in mass, get destroyed, or if you simply want something custom not following realistic dynamics.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI believe the visual transform being confounded with the center of mass is a side-effect of Godot taking the simplest path to sync with a physics engine. Sadly, this makes physics-based games a chore to create, and that's not how other engines work. Those should really be decoupled. I worked for a while on physics-based games and in these cases the visual transform doesn't even matter, it's controlled by the simulation anyways. We can even decide where it is for other use cases. When we need to associate the body with a logical position, we know we should use the center of mass anyways, and not its visual transform, because in that case they have different uses.\r\n\r\nI believe Bullet proposes a way to calculate center of mass and inertia tensor automatically. If not, we may provide a default implementation.\r\n\r\nThis breaks compatibility with physics-based games that worked around the COM being at transform origin, but then it can be handled easily specifically with a custom center of mass setting it just there, or by having an enum allowing to choose between `ORIGIN`, `AUTO` or `CUSTOM`, defaulting to `ORIGIN`. Although, I'd expect this only in 4.x when physics get reworked so breaking compat could be fine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs explained you can try to teleport all the parts to align them with the body's origin. However my previous experience with teleporting parts of a body has been a nightmare, and it is well known that rigidbodies don't like having their position set like that (performance and stability issues). So I really wish it wasn't required.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is part of how Godot synchronizes with its physics engine, and it introduces a new property representing the offset of the center of mass. A script can't change that, unless you reprogram all physics nodes using `PhysicsServer` and stop using built-in ones, which is far from a few lines of code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/945/reactions",
      "total_count": 22,
      "+1": 22,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/944",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/944/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/944/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/944/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/944",
    "id": 626688325,
    "node_id": "MDU6SXNzdWU2MjY2ODgzMjU=",
    "number": 944,
    "title": "Add support for sharing and preprocessing shader code (through `#include`, `#if`, `#ifdef`, …)",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-05-28T17:33:30Z",
    "updated_at": "2020-12-04T15:50:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Continuation from https://github.com/godotengine/godot/issues/11691\r\n\r\n**Describe the project you are working on:**\r\nA terrain plugin with lots of options\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEverytime I add a new kind of shader, or a variation of one (with less `uniforms` for example, or a different usage), I have to copy/paste the entire shader and alter the 10% specific parts. This is a burden to mainatin all the copies.\r\nBesides, even in other projects with shared dependencies, it is also mandatory to copy entire functions.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI need a way for a shader to specify other files containing code on which it depends on. It would allow to share at least functions and constants, so that would reduce code duplication a lot. It would make it much easier to create libraries as well.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like you can have a resource depend on another (i.e in GDScript you have `preload`), a new instruction can be added to shaders in order to include code in the final source to compile.\r\nThis is typically achieved with a preprocessor directive such as `#include \"path/to/shader.shader\"`.\r\nOf course, cyclic inclusion is forbidden, but nesting would work, and would be tracked recursively so if a shader included into another is edited, it would update shaders it is included from.\r\n\r\nOne problem is the fact shaders included in this way cannot really have the same structure. For example, you would not be able to use `render_mode`, `shader_type`, `fragment` or `vertex`, since they would collide with the \"root\" shader. You'd be able to define functions, constants, and perhaps even `uniform` and `varying`, since those are user-defined symbols.\r\nTo differenciate those \"includable\" shaders, they can be given a different extension, such as `shaderinc`, or `shaderlib`, which reflects their purpose.\r\n\r\nWhy not global shaders:\r\nI recall seeing a proposal of global shaders. They might be \"global\" for another reason, but if one goal is to have them share their functions with every other shader in the project, it has huge potential for name-space pollution and conflicts, so I would not recommend this. With targeted dependencies, you can decide where you get the shared code, keep it self contained and non-intrusive.\r\n\r\nVisual Shaders:\r\nthe same applies, as long as those shaders can declare functions, constants, varyings and uniforms. But since Visual Shaders are code generators under the hood, they might be able to do code sharing in their own way.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. You might be able to setup a tool pipeline with a plugin to make shader inclusion working, but it's a significant amount of work and I'm not sure if it will integrate well. It requires shader resources to have defined dependencies and plugins cannot add that. All they can do is to define different types of non-shaders for which they have to recode a whole editor for, and would bake final shaders which would then be read-only and not modifiable in realtime.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nQuality of life, basic feature, hard to integrate as a plugin. It's a recurring problem when your project starts having more than a few shaders, especially when you design a library for other people to use. Besides, as seen in the linked issue, it has been requested and PRed several times.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/944/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/942",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/942/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/942/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/942/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/942",
    "id": 626674886,
    "node_id": "MDU6SXNzdWU2MjY2NzQ4ODY=",
    "number": 942,
    "title": "Ability to pause ALL animated content within editor",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-28T17:10:41Z",
    "updated_at": "2020-08-29T12:07:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d open world game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have many particle emitters in the world. They have a noticeable effect on the in-editor FPS.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nPausing particle simulation in editor lets me work without FPS drops.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA button/switch in project/editor settings that pauses ALL animated content in editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWhile this is possible by setting emitting to false on particles, it requires attaching a tool script to EVERY particle emitter. The bigger the project, the less feasible this gets.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHow would an asset know what and when to pause? IIRC it needs core changes, plus assets can't add to project settings AFAIK.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/16397\r\n\r\nETA: It seems that the animated sprites and tiles suffer from the same problem, and especially for tiles, the workaround would be very involved.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/942/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/941",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/941/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/941/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/941/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/941",
    "id": 626670729,
    "node_id": "MDU6SXNzdWU2MjY2NzA3Mjk=",
    "number": 941,
    "title": "YAML support (parser)",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-28T17:03:44Z",
    "updated_at": "2020-07-03T07:52:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d space game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to use csv files for data, which have their own limitations/problems (https://github.com/godotengine/godot/issues/38957, https://github.com/godotengine/godot/issues/31749)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYAML is a popular data format that has one significant advantage over CSV/JSON - comments! Many of my data points are derived from others and comments would make it much more clear for any prospective contributors.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine similar to how built in JSON parsing works.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWriting a YAML parser, especially one supporting comments (which are the main draw of YAML), is definitely not 'a few lines' \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNew developers will not be aware of asset library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/941/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/940",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/940/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/940/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/940/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/940",
    "id": 626666721,
    "node_id": "MDU6SXNzdWU2MjY2NjY3MjE=",
    "number": 940,
    "title": "Autosaving (scenes/scripts)",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-28T16:58:07Z",
    "updated_at": "2020-07-02T16:48:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d open world game (but it doesn't really matter for this proposal)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf my computer hangs/crashes (e.g. because I wrote a bad shader or got a loop by mistake in a script), I lose progress.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAutosaving, e.g. every 5 minutes, is a standard in most game engines/IDEs and prevents losing progress.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAutosaving is often coupled with saving to .bak or some other file in addition to the main file, so that file content is not lost on I/O errors (see https://github.com/godotengine/godot/issues/38813 for one such report, and I am almost certain there was one more, too)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRequires core changes.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/6236\r\n\r\nRelated: https://github.com/godotengine/godot/issues/6231",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/940/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/938",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/938/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/938/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/938/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/938",
    "id": 626550913,
    "node_id": "MDU6SXNzdWU2MjY1NTA5MTM=",
    "number": 938,
    "title": "Save VisualScript in a text-based format instead of a binary format",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-28T14:19:19Z",
    "updated_at": "2020-11-03T15:32:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This supersedes [#16023](https://github.com/godotengine/godot/issues/16023).\r\n\r\n**Describe the project you are working on:**\r\n\r\nhttps://github.com/godotengine/godot-demo-projects/tree/master/visual_script\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe problem is that VisualScript files are saved as binary, not text.\r\n\r\n* Changing binary files in Git is a quick way to bloat the Git history.\r\n\r\n* It's extremely difficult to review changes to VisualScript files if people submit pull requests.\r\n\r\n* It's impossible to rebase and combine changess to VisualScript files in pull requests.\r\n\r\n* It's [impossible to share](https://github.com/godotengine/godot/issues/16023) VisualScript files in places that don't allow uploading binary files.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nStoring VisualScript files as text would fix all of these problems. It would take up less space in Git history when things are changed, it makes changes easy to review, it would become possible to combine changes, and it would allow sharing VisualScript files by pasting some text.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI propose the file format would be called `tvs`, and files would end in `.tvs`. It would behave like `tscn` or `tres`, with `tvs` simply being a text version of `vs`, and new files are saved as `tvs`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe only workaround is to [use built-in scripts](https://github.com/godotengine/godot/issues/16023#issuecomment-488029318).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nEven if it could be worked around, this kind of thing must be a part of the engine, because if you send a `.tvs` file then you'd also need to send the add-on, which defeats some of the point.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/938/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/937",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/937/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/937/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/937/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/937",
    "id": 626442182,
    "node_id": "MDU6SXNzdWU2MjY0NDIxODI=",
    "number": 937,
    "title": "Add per-face materials to CSG nodes",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-28T11:42:28Z",
    "updated_at": "2020-07-22T14:47:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d racing game that makes heavy use of CSG because of it's lowpoly nature\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCSG materials are all or nothing. Sometimes they fit perfectly on one face, but are stretched on another.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nPer face CSG materials would massively increase the utility of CSG shapes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMockup in original issue.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRequires changes in CSG module.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/22559",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/937/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/936",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/936/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/936/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/936/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/936",
    "id": 626436659,
    "node_id": "MDU6SXNzdWU2MjY0MzY2NTk=",
    "number": 936,
    "title": "Add WorldEnvironment custom material override",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T11:32:18Z",
    "updated_at": "2020-05-28T17:06:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d open world game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCustom world effects are difficult to pull off.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCustom material override would enable various effects, incl. debugging overlays.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee original issue for mockup.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think asset lib could do it, it is highly likely it requires core changes (but I could be wrong, I'm not a Godot developer)\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/20280\r\n\r\nRelated issue:  https://github.com/godotengine/godot/issues/27911",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/935",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/935/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/935/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/935/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/935",
    "id": 626198310,
    "node_id": "MDU6SXNzdWU2MjYxOTgzMTA=",
    "number": 935,
    "title": "Audio equalizer with variable band frequencies",
    "user": {
      "login": "kawa-yoiko",
      "id": 45892908,
      "node_id": "MDQ6VXNlcjQ1ODkyOTA4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45892908?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawa-yoiko",
      "html_url": "https://github.com/kawa-yoiko",
      "followers_url": "https://api.github.com/users/kawa-yoiko/followers",
      "following_url": "https://api.github.com/users/kawa-yoiko/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawa-yoiko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawa-yoiko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawa-yoiko/subscriptions",
      "organizations_url": "https://api.github.com/users/kawa-yoiko/orgs",
      "repos_url": "https://api.github.com/users/kawa-yoiko/repos",
      "events_url": "https://api.github.com/users/kawa-yoiko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawa-yoiko/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T04:10:32Z",
    "updated_at": "2020-05-28T07:52:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA demo where audio effects change with user interactions and the in-game environment.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe equalizer `AudioEffectEQ` provides only 3 presets with fixed bands, but I would like to customize them to create the response curve for a set environment more precisely, as well as change them on the fly for more dynamic effects. Interest also seen in godotengine/godot#27585.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCreate a new subclass of `AudioEffectEQ` allowing customization over the number of bands and their frequencies (aka a semi-parametric equalizer).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAlready implemented in godotengine/godot#30578, will address issues and rebase soon.\r\n\r\n**If this enhancement will not be used often (probably indeed), can it be worked around with a few lines of script?:**\r\nNo, presets are hard-coded and no interface is exposed to change parameters other than band gains.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSignal processing is performance critical and is better implemented with highly optimized code. The core already has it, and we only need to add a more flexible interface.\r\n\r\nThanks for your time and interest!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/934",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/934/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/934/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/934/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/934",
    "id": 626170992,
    "node_id": "MDU6SXNzdWU2MjYxNzA5OTI=",
    "number": 934,
    "title": "Add a export hint for NodePath and export Nodes",
    "user": {
      "login": "brndel",
      "id": 58010307,
      "node_id": "MDQ6VXNlcjU4MDEwMzA3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58010307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brndel",
      "html_url": "https://github.com/brndel",
      "followers_url": "https://api.github.com/users/brndel/followers",
      "following_url": "https://api.github.com/users/brndel/following{/other_user}",
      "gists_url": "https://api.github.com/users/brndel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brndel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brndel/subscriptions",
      "organizations_url": "https://api.github.com/users/brndel/orgs",
      "repos_url": "https://api.github.com/users/brndel/repos",
      "events_url": "https://api.github.com/users/brndel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brndel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-28T02:47:09Z",
    "updated_at": "2020-07-22T10:44:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nInventory system\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have an inventory control, that gets a reference to the inventory it shows using\r\n`export(NodePath) var inventory_path`\r\n`onready var inventory : Inventory = get_node_or_null(inventory_path)`\r\n\r\n1. this is unnecessarily complicated\r\n2. i can't be 100% sure, wether inventory_path refers to an Inventory\r\n3. if anyone else wants to use my Inventory system, i would need to add get_configuration_warning for every export of NodePath, so he knows, that he should only select Inventory Nodes\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExport hints for NodePath and direct export of Nodes would be easier and safer\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`export(NodePath, Spatial) var spatial_node`\r\nthis would only make Spatial nodes selectable in the 'Select a Node' dialog window\r\n\r\n`export(NodePath, Inventory) var inventory`\r\nthis would only make nodes with the Inventory script selectable in the 'Select a Node' dialog window\r\n\r\n`export(MeshInstance) var mesh_instance`\r\nthis would basically be the same as but simpler\r\n`export(NodePath, MeshInstance) var mesh_instance_path`\r\n`onready var mesh_instance : MeshInstance = get_node(mesh_instance_path)`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, exporting NodePaths is always a little bit risky\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis can't be achieved with add-ons\r\n\r\nI dont know wether this is hardcoded, but when creating a ViewportTexture this dialog shows up, where you are only able to select Viewport Nodes.\r\n![image](https://user-images.githubusercontent.com/58010307/83092121-f7259880-a09c-11ea-9c90-640bcc3405be.png)\r\nI think it shouldn't be much work connecting this with the export type",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/934/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/933",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/933/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/933/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/933/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/933",
    "id": 626151629,
    "node_id": "MDU6SXNzdWU2MjYxNTE2Mjk=",
    "number": 933,
    "title": "Move material attributes from shader code",
    "user": {
      "login": "endragor",
      "id": 2417849,
      "node_id": "MDQ6VXNlcjI0MTc4NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2417849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/endragor",
      "html_url": "https://github.com/endragor",
      "followers_url": "https://api.github.com/users/endragor/followers",
      "following_url": "https://api.github.com/users/endragor/following{/other_user}",
      "gists_url": "https://api.github.com/users/endragor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/endragor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/endragor/subscriptions",
      "organizations_url": "https://api.github.com/users/endragor/orgs",
      "repos_url": "https://api.github.com/users/endragor/repos",
      "events_url": "https://api.github.com/users/endragor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/endragor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T01:50:23Z",
    "updated_at": "2020-05-28T07:57:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSummon Age (https://www.summonage.com) and other mobile 3D games in RPG/MOBA genre.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe have to create many shaders that are basically the same, but only differ in their render_mode declarations (culling, blending, depth testing). Godot then also wastes time compiling these shaders, even though these are not shader differences and the resulting (GLES) shader code is identical.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMove the render_mode settings that are not really part of shader but rather a material parameter to be a material property.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe user will no longer have to create redundant shaders.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, and it will be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan't be implemented as an addon.\r\n\r\n-----\r\n\r\nSee https://github.com/godotengine/godot/issues/21105 for some earlier discussion of this feature. It also correctly notices that if stencil support is added to Godot in the future, it's better be as material parameters rather than within shader code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/933/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/932",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/932/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/932/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/932/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/932",
    "id": 626149412,
    "node_id": "MDU6SXNzdWU2MjYxNDk0MTI=",
    "number": 932,
    "title": "Allow specifying a partial order (batches) for opaque object rendering in 3D",
    "user": {
      "login": "31",
      "id": 331300,
      "node_id": "MDQ6VXNlcjMzMTMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/331300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/31",
      "html_url": "https://github.com/31",
      "followers_url": "https://api.github.com/users/31/followers",
      "following_url": "https://api.github.com/users/31/following{/other_user}",
      "gists_url": "https://api.github.com/users/31/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/31/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/31/subscriptions",
      "organizations_url": "https://api.github.com/users/31/orgs",
      "repos_url": "https://api.github.com/users/31/repos",
      "events_url": "https://api.github.com/users/31/events{/privacy}",
      "received_events_url": "https://api.github.com/users/31/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "reduz",
        "id": 6265307,
        "node_id": "MDQ6VXNlcjYyNjUzMDc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reduz",
        "html_url": "https://github.com/reduz",
        "followers_url": "https://api.github.com/users/reduz/followers",
        "following_url": "https://api.github.com/users/reduz/following{/other_user}",
        "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
        "organizations_url": "https://api.github.com/users/reduz/orgs",
        "repos_url": "https://api.github.com/users/reduz/repos",
        "events_url": "https://api.github.com/users/reduz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/reduz/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T01:43:34Z",
    "updated_at": "2020-08-31T01:18:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a game that targets VR where I need a \"window into a different world\" effect. This is similar to a portal effect, but much simpler. Here is a cube \"window\" into a red world with some cubes and donuts:\r\n\r\n![example](https://user-images.githubusercontent.com/331300/83086928-a8a0db80-a055-11ea-851e-dd3b176caa15.gif)\r\n\r\nBeyond the window, a set of \"other world\" objects are rendered, with correct perspective. If there are objects in the current world behind the window, you can't see them through the window. Note that this is a lot like a general portal effect, but my scenario has some quirks that mean I *don't* need a general portal effect:\r\n\r\n* The \"other world\" does not have anything between the camera and the window. This means I don't need to try to discard things that are in front of the window.\r\n* The \"current world\" objects have no gaps. The \"outer world\" objects are never located within the \"current world\". I don't need to worry about objects in the other world showing up through gaps in the geometry, or when there isn't a window around. (That is: I don't need a stencil.)\r\n* There's only the \"current world\" and the \"other world\". No recursive or dynamically-ordered windows.\r\n\r\nThe way I did this outside Godot (I switched over) was very simple:\r\n1. Render the other world.\r\n2. Render the window, but only to the z buffer. (The window surface itself is invisible.)\r\n3. Render the current world.\r\n\r\nI have this effect working in Godot using two Viewports to separate the worlds, synchronized Camera transforms for perspective correctness, and a shader on the window object, but **this approach doesn't work with the current VR plugin**. Project: https://github.com/31/example-arvr-viewports (just a repro--this is where the gif came from.)\r\n\r\nIn general, solutions that involve Viewports don't seem to work in the current VR plugin, because the plugin only renders per-eye perspectives for a *single* Viewport marked for ARVR. There isn't a way to first render one Viewport per eye, then use the eye-specific result to render each final per-eye image. Maybe this could be addressed on the VR plugin side to allow my Viewport workaround, but I would like to explore the Godot-side potential solutions first for a few reasons:\r\n* I suspect performance is worse with Viewports and viewport texture sampling. Or maybe memory usage is just higher?\r\n  * I don't know enough about graphics programming to intuitively know if this is something to be concerned about.\r\n* It seems that making the VR plugin work with eye-specific viewports would be a significant undertaking, and not something that would be likely to get merged given I know no other scenarios for this. (Purely subjective.)\r\n* It makes my scene fairly complicated to put the outside and inside worlds under specific Viewport nodes, synchronize cameras, and feed the \"outside\" Viewport texture into a shader.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm unable to group opaque objects to control the order they're rendered in, to use the simple solution I would use outside Godot. Ordering is possible for transparent objects using [`render_priority`](https://docs.godotengine.org/en/latest/classes/class_material.html#class-material-property-render-priority), but that explicitly doesn't do anything for opaque objects.\r\n\r\nThe Viewport workaround seems to work for desktop, but these \"windows\" are a critical feature for my game, and I'm very nervous about working on it in Godot when I can't check VR parity.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMy main priority with this proposal is to see if this will be possible with the 4.0 renderer, where more of the internals will be available to play with. For example, if I could change the current \"pipeline\" of `render all opaque objects at once, then transparent objects` to instead be `render three sets of opaque objects where the sets are in a specific order, then transparent objects`, that would work great. It seems like a natural thing to be extracted from the core rendering engine, to me.\r\n\r\nI haven't thought each of them all the way through, but I have some ideas of how to implement this if that won't be possible in 4.0--and these could potentially be implemented in a 3.2 fork:\r\n\r\n1. The Camera node lets me specify certain render layers that are batched and rendered before others.\r\n   * I say Camera because the layer cull mask is currently defined here, which is conceptually *kinda* similar.\r\n2. Same as (1), but as a project setting.\r\n   * I can imagine this kind of feature might need to be global to be feasible to implement. For me, this would give me the same end result.\r\n3. A new Material property `opaque_render_priority` (or similar) behaves like [`render_priority`](https://docs.godotengine.org/en/latest/classes/class_material.html#class-material-property-render-priority), but applies to opaque objects and doesn't sort back-to-front.\r\n4. The existing Material property `render_priority` applies to opaque objects. Opaque objects still all draw before any transparent objects do, but `render_priority` now means something for opaque objects. To preserve compatibility, this behavior could be enabled by a project settings flag.\r\n   * The compatibility issue and potential confusion makes this one seem iffy to me. It seems like it *might* be the easiest to implement, though, since it reuses existing concepts. I've dug a little into the astoundingly lengthy 3.2 `rasterizer_scene_gles3.cpp` 😅, and although I didn't manage to get anything working in a few hours, it seems feasible to implement in a fork. (I don't think I'd be able to implement suggestions 1-3 at all. (Let alone the 4.0 flexibility feature.))\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy main proposal is that the 4.0 pipeline be flexible enough to allow this. I don't know enough about the pipeline code to really suggest any APIs. (I built master locally, but I'm told none of the 4.0 flexibility is implemented yet.)\r\n\r\nIf any of the other ideas seem interesting I can try to expand on them, but I think at that point, it'd be better to write a more focused proposal and close this one.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is currently impossible with script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe it is currently impossible as an add-on.\r\n\r\n---\r\n\r\nThis is a scenario for one of the points from [Add support for Customizable/Scriptable Render Pipelines #644](https://github.com/godotengine/godot-proposals/issues/644), but for 3D, not 2D:\r\n\r\n> 4. Let the user decide the rules of each \"batch\" of object rendering, like rendering order, render targets, global shader properties, filtering, etc.\r\n\r\nI've had this VR parity problem simmering in my head and making me a little anxious for a couple of months now (before I heard about the plans to make the 4.0 pipeline more flexible, and before I saw the other issue), so I'm sorry if this is a wall of text now that I finally wrote it down as a proposal. 😄 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/932/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/931",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/931/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/931/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/931/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/931",
    "id": 626140165,
    "node_id": "MDU6SXNzdWU2MjYxNDAxNjU=",
    "number": 931,
    "title": "Support Uniform arrays in shader language",
    "user": {
      "login": "nobuyukinyuu",
      "id": 1023003,
      "node_id": "MDQ6VXNlcjEwMjMwMDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1023003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobuyukinyuu",
      "html_url": "https://github.com/nobuyukinyuu",
      "followers_url": "https://api.github.com/users/nobuyukinyuu/followers",
      "following_url": "https://api.github.com/users/nobuyukinyuu/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobuyukinyuu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobuyukinyuu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobuyukinyuu/subscriptions",
      "organizations_url": "https://api.github.com/users/nobuyukinyuu/orgs",
      "repos_url": "https://api.github.com/users/nobuyukinyuu/repos",
      "events_url": "https://api.github.com/users/nobuyukinyuu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobuyukinyuu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-28T01:14:09Z",
    "updated_at": "2020-10-07T20:31:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nOriginal issue:  https://github.com/godotengine/godot/issues/10751.  Originally from 2017 and was last flagged as a 4.0 release milestone.\r\n\r\n**Describe the project you are working on:**\r\nColor LUT shader.  Examples:  Palette shifting shaders, LUT adjustments for monitor profiles, etc.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, LUTs for interacting between shaders and the rest of Godot require converting them to a texture so they can be passed to a uniform Sampler2D. This adds extra processing overhead, is inconvenient, and makes shaders less portable without an associated tool node to assist the process.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUniform arrays reduce the overhead and glue necessary to make the above shader types work.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```glsl\r\nshader_type canvas_item;\r\nuniform vec4[][2] colorMap : hint_color;\r\n```\r\nThis would produce the standard \"array (size 0)\" context in the inspector, with a subcontext dropdown containing array (size 2) of color rows for each element.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSometimes.  Workarounds depend on whether the data can fit into a supported uniform type such as Vec4, mat4 or similar.  A more generalized workaround involves glue code in a tool script which can generate an ImageTexture suitable to be bussed and decoded from a uniform Sampler2D within a given shader.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe shading language cannot be user-extended.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/931/reactions",
      "total_count": 45,
      "+1": 45,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/930",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/930/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/930/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/930/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/930",
    "id": 626134906,
    "node_id": "MDU6SXNzdWU2MjYxMzQ5MDY=",
    "number": 930,
    "title": "\"Revert sub-resources to parent\" and \"Revert to Parent\" in Object Properties dropdown",
    "user": {
      "login": "nobuyukinyuu",
      "id": 1023003,
      "node_id": "MDQ6VXNlcjEwMjMwMDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1023003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobuyukinyuu",
      "html_url": "https://github.com/nobuyukinyuu",
      "followers_url": "https://api.github.com/users/nobuyukinyuu/followers",
      "following_url": "https://api.github.com/users/nobuyukinyuu/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobuyukinyuu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobuyukinyuu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobuyukinyuu/subscriptions",
      "organizations_url": "https://api.github.com/users/nobuyukinyuu/orgs",
      "repos_url": "https://api.github.com/users/nobuyukinyuu/repos",
      "events_url": "https://api.github.com/users/nobuyukinyuu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobuyukinyuu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T00:58:22Z",
    "updated_at": "2020-05-29T06:50:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nOriginally from https://github.com/godotengine/godot/issues/31397, related to #904 .\r\nAlso possibly related:  https://github.com/godotengine/godot/issues/32912\r\n\r\n**Describe the project you are working on:**\r\nGame with inherited AnimationPlayers where some Animations are shared between enemies and like objects and others which aren't.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen working with AnimationPlayers in inherited scenes, the consistency of \"Local to Scene\" resources is a bit spotty and Animations seem to prefer to *stay* local to scene once they've been specified once by the user to do so.  Normally, to revert a property value containing a Resource to its parent defaults, most resources in the inspector have a revert button next to them in their parent context. However, Animations are unique in that they can't be accessed directly from their parent but must instead be loaded into the inspector context from an option in the Animation tab.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy adding options to the object property menu in the inspector to revert all unique subresources to parent (or, for Resources themselves, having \"Revert to Parent\" in their property menu when the context allows it), a user can guarantee unique subresources exist. Unique subresources can be eliminated if necessary, such as when refactoring the object hierarchy, or when running into problems like the above one where \"Local to Scene\" created unexpected (and difficult to revert) results.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/1023003/83085781-8194da80-a052-11ea-9ce5-f6b80d34d272.png) \r\nThis context menu item would appear on Nodes and Resources both.  \r\n\r\n![image](https://user-images.githubusercontent.com/1023003/83086420-58754980-a054-11ea-8984-3e10d5ef3d3a.png)\r\n\r\nIn the context of Resources only (where the Object Properties menu has extra options for Save/Save As), options for *Make Unique* and *Revert to Parent* should probably appear in their own group, provided the inspector context is aware of the position in the hierarchy of the resource being edited (this seemed to be the case with the old inspector, since that was visible in the UI;  idk about the new one but the back/forward buttons seem to indicate this is still known).  *Make Unique* and *Revert to Parent* shouldn't be visible in Node contexts;  *Revert to Parent* should be disabled if a Resource in a given context is already identical to the one in the parent scene's hierarchy.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, as this deals with a part of the editor interface not directly accessible or modifyable through the add-on API.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/930/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/929",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/929/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/929/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/929/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/929",
    "id": 626115177,
    "node_id": "MDU6SXNzdWU2MjYxMTUxNzc=",
    "number": 929,
    "title": "OptionButton's popup should offset when showing so the selection is visible",
    "user": {
      "login": "nobuyukinyuu",
      "id": 1023003,
      "node_id": "MDQ6VXNlcjEwMjMwMDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1023003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobuyukinyuu",
      "html_url": "https://github.com/nobuyukinyuu",
      "followers_url": "https://api.github.com/users/nobuyukinyuu/followers",
      "following_url": "https://api.github.com/users/nobuyukinyuu/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobuyukinyuu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobuyukinyuu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobuyukinyuu/subscriptions",
      "organizations_url": "https://api.github.com/users/nobuyukinyuu/orgs",
      "repos_url": "https://api.github.com/users/nobuyukinyuu/repos",
      "events_url": "https://api.github.com/users/nobuyukinyuu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobuyukinyuu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-27T23:58:14Z",
    "updated_at": "2020-05-28T07:59:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nOriginally posted here:  https://github.com/godotengine/godot/issues/18689\r\n\r\n**Describe the project you are working on:**\r\nGamedev middleware\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn the original issue, the problem I was having was with scrolling large lists of palettes in a tile editor.  In my new project, the same issue crops up with selecting a note from a note list.  With large lists, the active item is remembered but the relative position of the popup is not adjusted to account for making sure the current item is visible within a viewport shorter than the popup.  This occurs when the popup's height combined with the selected index exceeds the viewport height.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRepositioning the popup automatically to make the current selection visible is a simple quality of life improvement for the user experience.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee below.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPossibly.  Here is the workaround I use in my current project:\r\n```gdscript\r\nfunc _on_Presets_pressed():\r\n\tvar popup = $Presets.get_popup()\r\n\tvar amt = max($Presets.selected * 16, -popup.rect_size.y + owner.rect_size.y)\r\n\tpopup.rect_position.y -= amt\r\n```\r\n\r\nThis makes an assumption on the height of a menu item (that they're all the same height) and isn't perfect but gets the job done for one of my use cases.  The specific list I use this code on is also always a constant size.  The offset isn't perfect and the position of the selected item is in a different position depending on its index, hinting that more work would need to be done for this code to work correctly in all instances.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is expected UI behavior on most operating systems and its absence is noticeable (and annoying).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/928",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/928/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/928/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/928/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/928",
    "id": 626039864,
    "node_id": "MDU6SXNzdWU2MjYwMzk4NjQ=",
    "number": 928,
    "title": "set_custom_mouse_cursor while set_mouse_mode(Input.MOUSE_MODE_HIDDEN)",
    "user": {
      "login": "ErwinBr",
      "id": 46350573,
      "node_id": "MDQ6VXNlcjQ2MzUwNTcz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46350573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ErwinBr",
      "html_url": "https://github.com/ErwinBr",
      "followers_url": "https://api.github.com/users/ErwinBr/followers",
      "following_url": "https://api.github.com/users/ErwinBr/following{/other_user}",
      "gists_url": "https://api.github.com/users/ErwinBr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ErwinBr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ErwinBr/subscriptions",
      "organizations_url": "https://api.github.com/users/ErwinBr/orgs",
      "repos_url": "https://api.github.com/users/ErwinBr/repos",
      "events_url": "https://api.github.com/users/ErwinBr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ErwinBr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-27T21:21:31Z",
    "updated_at": "2020-05-28T08:08:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA classic point & click adventure game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMy custom mouse cursor in my game changes by setting **set_custom_mouse_cursor** when hovering over interactive objects and hotspots. When the game is \"busy\" with displaying dialogue, for example, the mouse is hidden with **set_mouse_mode(Input.MOUSE_MODE_HIDDEN)**. Users can however still mouse around. Unfortunately this results in the wrong mouse cursor being displayed when we return to normal, as a hidden cursor does not seem to be updated. I now have to manage a lot of exception handling to mitigate the issue, and it's a pain to get it right.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSimply being able to change the custom mouse cursor while it's hidden would help tremendously.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nN/A\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI need to do a lot of exception handling resulting In messy code for something which could be easily solved. (I assume!)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe the nature of this feature/enhancement would lend more to a change in the core model rather than an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/928/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/925",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/925/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/925/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/925/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/925",
    "id": 625887222,
    "node_id": "MDU6SXNzdWU2MjU4ODcyMjI=",
    "number": 925,
    "title": "Display export variables for plugin scripts on the Plugins tab of the Project Settings",
    "user": {
      "login": "BanchouBoo",
      "id": 32691832,
      "node_id": "MDQ6VXNlcjMyNjkxODMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/32691832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BanchouBoo",
      "html_url": "https://github.com/BanchouBoo",
      "followers_url": "https://api.github.com/users/BanchouBoo/followers",
      "following_url": "https://api.github.com/users/BanchouBoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/BanchouBoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BanchouBoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BanchouBoo/subscriptions",
      "organizations_url": "https://api.github.com/users/BanchouBoo/orgs",
      "repos_url": "https://api.github.com/users/BanchouBoo/repos",
      "events_url": "https://api.github.com/users/BanchouBoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BanchouBoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-27T17:30:20Z",
    "updated_at": "2020-12-10T23:06:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "*reposted from https://github.com/godotengine/godot/issues/25628*\r\n\r\n### Problem\r\n---\r\nThere is no simple, unified way to have settings for a plugin, currently any plugin developer that wants to have configuration will have to put together their own solution for allowing user configuration, whether that be through a custom dock, a resource, directly editing the script, or whatever else they may think of.\r\n\r\n### My suggestion\r\n---\r\nExport variables for the plugin script could be displayed on the Plugins tab in the Project Settings window, the plugin itself could have a toggle to expand and collapse the list of variables to keep the window clean. Below is a rough mock-up of how I think it could be implemented. This would make setting up plugins easier and help prevent clutter with all the different implementations plugins may have with configuration while still allowing developers to implement more complex systems if they need to.\r\n\r\n![mockup](https://user-images.githubusercontent.com/32691832/52256051-401f6f80-28e3-11e9-8b02-5bf9a30cbf01.png)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/924",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/924/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/924/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/924/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/924",
    "id": 625841589,
    "node_id": "MDU6SXNzdWU2MjU4NDE1ODk=",
    "number": 924,
    "title": "VideoPlayer - stream from URL",
    "user": {
      "login": "shawkes",
      "id": 25094792,
      "node_id": "MDQ6VXNlcjI1MDk0Nzky",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25094792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shawkes",
      "html_url": "https://github.com/shawkes",
      "followers_url": "https://api.github.com/users/shawkes/followers",
      "following_url": "https://api.github.com/users/shawkes/following{/other_user}",
      "gists_url": "https://api.github.com/users/shawkes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shawkes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shawkes/subscriptions",
      "organizations_url": "https://api.github.com/users/shawkes/orgs",
      "repos_url": "https://api.github.com/users/shawkes/repos",
      "events_url": "https://api.github.com/users/shawkes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shawkes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-27T16:23:46Z",
    "updated_at": "2020-11-24T15:06:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nPreviously an issue and was scheduled for a milestone: https://github.com/godotengine/godot/issues/26127\r\n\r\n**Describe the project you are working on:**\r\nGroup game play with live streaming of host.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVideoplayer can only play local files. It cannot directly play videos from a url.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy being able to connect to a video stream (rather than play a file) I can stream a video.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nvideoPlayer.set_stream(https://example.com/livevid.mpd)\r\n\r\nvideoPlayer.play()\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere is no workaround for streaming video from a url.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTo quote @hpvb \r\n\r\n> This should be added to the VideoPlayer class, after that GDNative will also get it. I suggest this gets implemented using Godot's internal HTTP client to ensure that we use the same certificates etc for https streams.\r\n\r\n@hbina showed interest on working on the feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/924/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/923",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/923/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/923/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/923/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/923",
    "id": 625815310,
    "node_id": "MDU6SXNzdWU2MjU4MTUzMTA=",
    "number": 923,
    "title": "Improve usability of bitflag fields in GDScript",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-27T15:49:00Z",
    "updated_at": "2020-09-01T17:20:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Reproduction of godotengine/godot#17708\r\n\r\n**Describe the project you are working on:**\r\nRPG gameplay systems that involve defining bit flag enum values.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile it is efficient and useful to work with bit flag enums, inexperienced programmers (and even me sometimes) can find it difficult to parse code that uses bitwise operations to modify and/or evaluate the state of those enums.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be a more human-readable API for working with bit flag enums in GDScript:\r\n\r\n(This interface is courtesy of @romlok who commented on the original issue)\r\n\r\n```gdscript\r\nbitflag AttackType {\r\n    ATTACK_PHYSICAL,\r\n    ATTACK_FIRE,\r\n    ATTACK_COLD,\r\n    ATTACK_ACID,\r\n}\r\n# Similar to an enum, this would create:\r\nconst ATTACK_PHYSICAL = 1\r\nconst ATTACK_FIRE = 2\r\nconst ATTACK_COLD = 4\r\nconst ATTACK_ACID = 8\r\n# And the AttackType object, where you can reference the values\r\nvar my_attack = AttackType.ATTACK_PHYSICAL | AttackType.ATTACK_FIRE\r\n\r\n# BUT ALSO!\r\n# Can be instanced to expose meaningfully-named methods\r\nmy_attack = AttackType.new() # or maybe `AttackType()`?\r\nmy_attack = my_attack.set(ATTACK_PHYSICAL)\r\nmy_attack = my_attack.clear(ATTACK_FIRE)\r\nmy_attack = my_attack.toggle(ATTACK_ACID)\r\nvar is_frosty = my_attack.has(ATTACK_COLD)\r\nvar actual_int_value = my_attack.value\r\n# And maybe\r\nif ATTACK_FIRE in my_attack:\r\n    burn_stuff()\r\n```\r\n\r\nThe `.set()`, `.clear()`, `.toggle()`, and `.has()` methods would all be `vararg` operations that accept a comma-separated list of potential things to mutate/check.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Introduce new keyword in GDScript to differentiate typical enums from bitflag enums\r\n1. These would create a GDScript-specific backend class instance, similar to `GDNativeClass` (perhaps `GDBitFlag`?), that has an alternative API, but which evaluates as an int when prompted.\r\n\r\nOf course, these would only exist within GDScript code, so if you exported one of these, it would be exactly like if you'd exported a regular enum with the `FLAGS` hint.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would use it regularly, as I'm sure others would too. It *can* be worked around with a few lines of script (since you can resort to bitwise operations for all of this), but the usability and readability would suffer which is exactly the problem this proposal wants to resolve.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt *would* be possible for you to simply create a BitFlag Resource script that has most of these features, and then have exporting it generate an interface similar to that of the existing enum flag export. It's just that, the whole point is to improve the usability of GDScript as a language. And the entire selling point of GDScript *is* its usability, so to leave this idea as an addon rather than a built-in feature kind of defeats the point.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/923/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/922",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/922/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/922/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/922/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/922",
    "id": 625751885,
    "node_id": "MDU6SXNzdWU2MjU3NTE4ODU=",
    "number": 922,
    "title": "Add a generic EditorPlugin callback for Node configuration warnings",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-27T14:34:46Z",
    "updated_at": "2020-08-27T12:29:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI have a plugin that expects nodes matching certain criteria to be configured in specific ways. The nodes do not necessarily all share a script or base type.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf I want to have a configuration warning appear to notify users that the node(s) are configured incorrectly for use with the plugin, I need to add a code change to every script (or even to nodes that may not have a script) to implement the `_get_configuration_warning()` method.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEditorPlugin should have a generic callback that accepts a Node and returns a configuration warning string. The callback would get called on every node in the Scene dock and non-empty string values returned by it would generate warning icons just like the virtual method call per-script would.\r\n\r\nEdit: As an added bonus, this helps clean up script code as editor-specific code is now moved out of a script and into plugin code (potentially allowing a tool script to stop being a tool in the first place).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Implement an EditorPlugin `get_configuration_warning(Node p_node)` method. Check if the plugin's script implements the method, and if it does, get the string results and return it.\r\n1. Add a `get_configuration_warning(Node p_node);` public method to the EditorNode. Have it iterate through the list of EditorPlugins, and call their implementations of the same method. Concatenate the results with double newlines.\r\n1. Modify the Scene dock implementation to take into account not only a potential `_get_configuration_warning()` method on the script, but also the results from the EditorNode via concatenation (double newlines).\r\n\r\nIf a node's script and two plugins implement it, the resulting warning tooltip would look like...\r\n\r\n    node script message\r\n\r\n    plugin A message\r\n\r\n    plugin B message\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe entire point is to avoid having to reproduce multiple lines of script, and no, existing EditorPlugin features do not allow for this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRequires editor changes inaccessible to the existing scripting API.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/922/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/921",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/921/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/921/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/921/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/921",
    "id": 625691595,
    "node_id": "MDU6SXNzdWU2MjU2OTE1OTU=",
    "number": 921,
    "title": "Rework the way of changing current scene",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-27T13:21:03Z",
    "updated_at": "2020-09-11T19:44:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGames made with Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is actually an issue I used to have, but now it impacts me less. Still, I've seen some users having this problem and it was generally agreed that the system should change.\r\n\r\nRight now we have 2 methods to change scene: `change_scene` and `change_scene_to`. Their naming is already confusing for some people and there are a few problems with changing scenes that these methods don't solve.\r\n\r\nFirst, sometimes you want to setup the new scene. Right now it's impossible, because you don't have access to the newly changed scene in any way (`current_scene` doesn't point to the new scene immediately). So if you want to pass some data from old scene to the new one, you need to use singleton.\r\n\r\nSecond, sometimes you want to keep the old scene, e.g. when you open in-game menu and you want to restore game state later. Currently `change_scene` will automatically free the old scene.\r\n\r\nThe current workaround for both is changing the scenes manually, i.e. accessing scene tree, replacing root and setting the `current_scene`. I noticed that I actually do this quite frequently in my projects, which makes regular `change_scene` quite pointless, because it's not flexible enough. It might be alright for some prototypes or learning projects, but there aren't many games for which the current workflow is enough. Also official docs propose that you have a \"main node\" and keep the game state as a child of your node. This makes SceneTree root and `change_scene` methods even more useless xd\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe system that was proposed originally (I mean after my original issue and then discussion about the now-closed PR) is to have three methods:\r\n```\r\nchange_scene_path(path, keep_old = false)\r\nchange_scene_packed(packed_scene, keep_old = false)\r\nchange_scene_node(node, keep_old = false)\r\n```\r\nThe first one takes path to the scene resource, the second one takes a PackedScene and instances it and the third one uses an already existing node. Each of them has additional argument `keep_old`, which if true, makes the old scene not being freed automatically. That scene would be returned from the method. And if `keep_old` is false, the method would free the old scene and return null.\r\n\r\n*Alternatively, the methods could return the new scene. It has the advantage that all the methods would give you its reference (for third method you have the reference anyways, because you provide it as argument), but the downside is that you'd need to keep the old scene yourself.*\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhat I said above, but in C++ bruh\r\nThere was an old PR that added something similar: https://github.com/godotengine/godot/pull/26833\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, it can be worked around quite easily:\r\n```\r\nvar menu = preload(\"res://Menu.tscn\").instance()\r\nmenu.game = self\r\nget_node(\"/root\").add_child(menu)\r\nget_tree().current_scene = menu \r\nget_node(\"/root\").remove_child(self)\r\n```\r\nBut this code is not obvious to figure out for beginners in case they want to do either 1) or 2). Also this isn't really rarely used IMO.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it would replace the current `change_scene/to` methods.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/921/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/920",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/920/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/920/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/920/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/920",
    "id": 625615287,
    "node_id": "MDU6SXNzdWU2MjU2MTUyODc=",
    "number": 920,
    "title": "Playback Speed for VideoPlayer Node",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-27T11:30:55Z",
    "updated_at": "2020-05-27T12:50:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Racing Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm using inside game videos to follow other game car behaviours, and using Engine.TimeScale, but\r\nI was impressed why not videos are affected by it, if VideoPlayer Node has PlaybackSpeed variable I could adapt it to TimeScale myself.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a playbackspeed to VideoPlayer Node\r\nand/or make it be affected by Engine.TimeScale\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nyou can use\r\nVideoPlayer.set_playback_speed(0....X)\r\nVideoPlayer.affected_by_timescale(true/false)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNope, there's no way\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts an enhancement for a built-in node\r\n\r\n**PS**\r\nI want to metion this issue, since I'm using ubuntu and only was able to use webm videos under 30fps to avoid black video\r\n\r\nhttps://godotengine.org/qa/71720/why-do-webm-videos-stop-working-above-30fps-on-linux-ubuntu",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/920/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/919",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/919/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/919/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/919/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/919",
    "id": 625595381,
    "node_id": "MDU6SXNzdWU2MjU1OTUzODE=",
    "number": 919,
    "title": "Add built-in logging capabilities",
    "user": {
      "login": "pwab",
      "id": 19271185,
      "node_id": "MDQ6VXNlcjE5MjcxMTg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/19271185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pwab",
      "html_url": "https://github.com/pwab",
      "followers_url": "https://api.github.com/users/pwab/followers",
      "following_url": "https://api.github.com/users/pwab/following{/other_user}",
      "gists_url": "https://api.github.com/users/pwab/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pwab/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pwab/subscriptions",
      "organizations_url": "https://api.github.com/users/pwab/orgs",
      "repos_url": "https://api.github.com/users/pwab/repos",
      "events_url": "https://api.github.com/users/pwab/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pwab/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-27T11:00:44Z",
    "updated_at": "2020-05-27T14:06:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nN/A (generic issue)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI do use logging a lot to track things in the game and investigate bugs. But I don't believe that I do that in an efficient way (or that there's such way at all for GDScript) while simply using the print function.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSee original issue: https://github.com/godotengine/godot/issues/27958\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAn existing logger can be found here: https://github.com/hedin-hiervard/godot-logger\r\n(Or take some ideas from the [Unity logger](https://docs.unity3d.com/ScriptReference/Logger.html) maybe)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm pretty sure it would be used quite often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPrint-debugging is used all over the place. At least a simple logger would help to solve most of the problems mentioned in the original issue (formatting, categories, destination).\r\n\r\n**Original issue:** https://github.com/godotengine/godot/issues/27958",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/919/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/917",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/917/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/917/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/917/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/917",
    "id": 625480722,
    "node_id": "MDU6SXNzdWU2MjU0ODA3MjI=",
    "number": 917,
    "title": "Add a dynamic resolution setting for 3D viewports",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-27T08:15:50Z",
    "updated_at": "2020-10-26T15:44:37Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor. Nothing prevents this feature from being usable in the editor after all. It could be useful for heavy 3D projects on slower hardware :wink: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n- On slower hardware, the framerate can be inconsistent between light scenes and heavier scenes. This worsens the gameplay experience.\r\n- Players who don't have time or skills to change graphics settings are left with a slow game if their hardware doesn't follow the game's requirements.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nDynamic resolution adjustments can be performed to increase the FPS in heavier scenes during gameplay, without requiring the player to change their graphics settings. This approach has become increasingly popular in recent AAA games.\r\n\r\nThis feature is likely helpful for VR as well, where achieving framerates higher than 90 FPS is crucial to a good experience.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n*All the aspects below are well-described in [this video from Digital Foundry](https://www.youtube.com/watch?v=GS_PhWP9YQI), which also showcases the feature in action.*\r\n\r\nThe rendering scale factor represents the 3D viewport resolution and will vary depending on the current FPS (or milliseconds per frame, to be precise).\r\n\r\nFor instance, if using a 3840×2160 viewport with anamorphic scaling:\r\n\r\n- A rendering scale of 1.0 will render at  3840×2160.\r\n- A rendering scale of 0.75 will render at 1920×2160 (X decreases first, then Y, since this viewport is wider than it is tall).\r\n- A rendering scale of 0.5 will render at 1920×1080.\r\n\r\nNote that in any case, the viewport's physical *size* remains the same. Only its rendering resolution changes. Also, the viewport must use linear filtering for this to work, not nearest-neighbor filtering.\r\n\r\nWith isomorphic scaling, each axis would decrease in the same way. This could be exposed as an option, although having anamorphic scaling as the default is probably a better idea since the loss of quality is harder to notice this way.\r\n\r\nThe rendering scale could be allowed to go above 1.0 to create a supersampling effect on high-end hardware. The default values for dynamic resolution would likely contain the value between 0.5 and 1.0.\r\n\r\nThe rendering scale is decided this way:\r\n\r\n- If the FPS is above the target, slowly increase the rendering scale factor until it reaches the maximum specified factor.\r\n- If the FPS is below the target, slowly decrease the rendering scale factor until it reaches the minimum specified factor.\r\n\r\nSince tweaking the adjustment speed factor is more of an art than a science, it should also be configurable. More aggressive settings will help increase performance, at the cost of making resolution changes more noticeable during gameplay. The speed at which the rendering scale can drop should be adjustable separately from the speed at which it can raise.\r\n\r\nTo avoid interfering with 2D elements which should generally always be drawn at native resolution, this proposal will require setting up a custom viewport. A set of \"Dynamic Resolution\" properties could be added to Viewport. This way, anamorphic scaling can also be supported (it'll require engine changes to be done).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot really, as it takes a fair amount of effort to do it right. See also the performance issues described below.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt could be made as an add-on, *but* it's too slow to be worth the effort. I'm not sure if this can be alleviated with Vulkan. See [godot-dynamic-resolution-demo](https://github.com/Calinou/godot-dynamic-resolution-demo) where I attempted this in 3.2.1. The viewport creation costs made it slower than not using dynamic resolution in the first place :slightly_frowning_face: ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/917/reactions",
      "total_count": 14,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/916",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/916/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/916/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/916/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/916",
    "id": 625435538,
    "node_id": "MDU6SXNzdWU2MjU0MzU1Mzg=",
    "number": 916,
    "title": "Allow Unicode characters in GDScript identifiers",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2020-05-27T07:03:25Z",
    "updated_at": "2020-07-29T16:36:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d space game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCan't use scientific symbols or accented letters (and my native language has some, often creating minimal pairs with unaccented ones) in variable names (scientific symbols would massively shorten some variables I use)\r\n\r\nAnother example use case: https://github.com/godotengine/godot/issues/24785#issuecomment-495978331\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow unicode characters in GDScript identifiers\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope, requires core changes (parser)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot possible to do via add-on due to parser changes.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/24785\r\n\r\nIIRC this is not covered in @vnen's GDScript rework.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/916/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/915",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/915/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/915/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/915/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/915",
    "id": 625422367,
    "node_id": "MDU6SXNzdWU2MjU0MjIzNjc=",
    "number": 915,
    "title": "Per layer culling distance",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-27T06:39:08Z",
    "updated_at": "2020-05-27T07:29:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d open world game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSevere pop-in effects.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHaving per layer culling distance would make it possible to pop objects in gradually.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCustomizable near-far clipping planes per render layer. It's a feature in Unity, apparently.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHas to be part of core.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/26693",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/915/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/914",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/914/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/914/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/914/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/914",
    "id": 625394831,
    "node_id": "MDU6SXNzdWU2MjUzOTQ4MzE=",
    "number": 914,
    "title": "SailfishOS Support (export Sailfish app from Godot Editor)",
    "user": {
      "login": "savegame",
      "id": 16311332,
      "node_id": "MDQ6VXNlcjE2MzExMzMy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16311332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/savegame",
      "html_url": "https://github.com/savegame",
      "followers_url": "https://api.github.com/users/savegame/followers",
      "following_url": "https://api.github.com/users/savegame/following{/other_user}",
      "gists_url": "https://api.github.com/users/savegame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/savegame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/savegame/subscriptions",
      "organizations_url": "https://api.github.com/users/savegame/orgs",
      "repos_url": "https://api.github.com/users/savegame/repos",
      "events_url": "https://api.github.com/users/savegame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/savegame/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-27T05:41:30Z",
    "updated_at": "2020-05-29T09:31:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am using sources from two pull request \r\n - https://github.com/godotengine/godot/pull/16470\r\n - https://github.com/godotengine/godot/pull/9435  \r\n\r\nSources are here: \r\nhttps://github.com/savegame/godot/tree/3.2_sailfish_sdl2\r\n\r\nPR [here](https://github.com/godotengine/godot/pull/38642)\r\n\r\n**Describe the project you are working on:**\r\nthis need for any project, if developer want publish their app to SailfishOS platform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ncant export my game as native for SailfishOS. Sailfish - it linux for mobile phones, its use **rpm** as application  package. Need ability to build godot game directly to Sailfish RPM file form godot editor ( like APK file for android ) \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn my [PR](https://github.com/godotengine/godot/pull/38642) i allready add all what need for exporting Godot games to SailfishOS\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**. \r\nthis successfully new platfrom implementation for godot  \r\n*What is done*  \r\n- export from [Godot Editor](https://github.com/savegame/godot/releases/tag/v3.2.1-stable-sailfish) with SaiflishSDK to native for sailfish RPM package.\r\n- touch screen input\r\n- dynamic orientation events \r\n- dynamic orientation change\r\n- normal application life cycle \r\n- sound initialization\r\n- joypad (just compile already exists **libudev** implementation of LinuxJoypad, works nice )\r\n \r\n*What is not done*  \r\n- gyroscope/accelerometer events\r\n- disable screen blanking when application is open ( just need use some dbus interfaces from mce)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause need fixes in rendering of godot engine  (Saiflish dont support rotation of clients EGL context, client should dot this by himself )",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/914/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/913",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/913/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/913/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/913/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/913",
    "id": 625267421,
    "node_id": "MDU6SXNzdWU2MjUyNjc0MjE=",
    "number": 913,
    "title": "Enhancements regarding polygon boolean and polygon deflating geometry methods",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-26T23:39:39Z",
    "updated_at": "2020-10-01T17:41:48Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI've previously implemented polygon boolean operation methods in Godot: godotengine/godot#28987.\r\n\r\nI'm developing [Goost module](https://github.com/goostengine/goost) as an extension for Godot, it has geometry component which realizes my vision to a great extent when it comes to polygon-based operations, making most of the internal features as configurable as possible, so you can more easily compare my vision in relation to this proposal.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWith this proposal I'd like to summarize some of the inconsistencies, limitations and hurdles of using the geometry methods related to polygons at large.\r\n\r\n- [ ] Some parameters remain not configurable: godotengine/godot#29886.  (preliminary rejected by @reduz).\r\n- [ ] People requesting ability to merge polygons: godotengine/godot#29784 (also undecided by @reduz).\r\n- [ ] Some confusions regarding polygon deflating and inflating method names #777.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n## Polygon boolean operations\r\nKnowing that it's not really good to bloat the engine, I propose to do the following:\r\n\r\n1. Remove individual per-operation boolean methods (`merge_polygons_2d`, `clip_polygons_2d` etc) which accept only two polygons at a time currently.\r\n2. Instead, add a unified method to perform all polygon boolean operations above: `polygons_boolean_2d`, which would accept multiple polygons, basically godotengine/godot#35929. The rationale behind this is that I've seen people are oftentimes requesting a method to merge a list of polygons: https://github.com/godotengine/godot/issues/29784#issuecomment-502340297, but it does makes sense to provide the support of this for other boolean operations (I believe that even if some operations are not used as often, it's silly to deny the existence of elementary math operations).\r\n\r\nI guess `polylines_boolean_2d` might not be worth it, considering that there's only two types of operations supported for this: clip and intersect (aka `clip_polyline_with_polygon` etc).\r\n\r\nThis actually solves another issue of duplicate documentation which are spread between those individual methods.\r\n\r\n### Exposing parameters\r\n\r\nThe Clipper library provides a quite useful option which allows you to turn self-intersecting polygons into strictly-simple polygons. I'm leaving describing the actual use case for this to @HEAVYPOLY, the author of http://www.heavypoly.com/heavypaint. Depending on how those polygons can be simplified, it's also important to expose an enum specifying the fill rule (EvenOdd, NonZero etc).\r\n\r\nAlternatively, a dedicated method `simplify_polygons` could be added, but this would be just a wrapper for `merge_polygons(strictly_simple = true)`, so not much added gain.\r\n\r\n## Polygon deflating/inflating\r\n\r\nI've exposed the methods (`offset_polygon_2d` and `offset_polyline_2d`) along with boolean ones because that's what the underlying Clipper library provided. I'm not sure whether this is actually useful for most users. In fact this creates confusion as seen in #777, so it might be worth splitting the method to `deflate_polygon` and `inflate_polygon`. It's also possible to deflate a polyline which would turn into a polygon, so again it only makes sense to create `deflate_polyline` method (yet this wouldn't be used often anyways I guess).\r\n\r\n### Exposing parameters\r\n\r\nIt's also a question of whether it makes sense to expose other parameters like `miter_limit` and `arc_tolerance` there as seen in godotengine/godot#36369. I've stumbled upon an issue of having to bind more than 6 parameters. Circumventing this limitation is possible by including `method_bind_ext` header but I suppose this bloats the engine binary size unnecessarily. For that I've simply managed to combine the two existing enums used to configure the join and end types together, but again this kinda creates complexity.\r\n\r\n## Renaming methods\r\n\r\n~~It would be nice if we could split 2D and 3D geometry methods, as described in another subsidiary proposal: #640, but this is not critical.~~ approved.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGiven my previous conversations with @reduz regarding making this configurable (summary: not so enthusiastic), and nonetheless taking into account the request I've received from people, I **propose** the updated API similar to the following\r\n\r\n```gdscript\r\nGeometry2D.polygons_boolean(polys_a: Array, polys_b: Array = null, fill_rule = FILL_RULE_EVEN_ODD, strictly_simple = false) \r\nGeometry2D.clip_polyline_with_polygon(poly_a: Vector2Array, poly_b: Vector2Array)\r\nGeometry2D.intersect_polyline_with_polygon(poly_a: Vector2Array, poly_b: Vector2Array)\r\nGeometry2D.offset_polygons(polygons: Array, delta: float, join_type = JOIN_SQUARE, end_type = END_SQUARE, miter_limit = 2.0)\r\n```\r\n\r\nEvery method not on the list is proposed to be removed...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSome methods can be removed, but it's quite difficult to reimplement them via script, given the performance is quite critical when it comes to clipping polygons at 60 FPS.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlready part of core, too late. 😛\r\n\r\nNote that it's totally fine to leave everything as-is, I personally invite people who need specific features to use the aforementioned module which does provide an extensive solution. I've just created this proposal upon some requests I've received from the community.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/913/reactions",
      "total_count": 4,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/912",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/912/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/912/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/912/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/912",
    "id": 625232781,
    "node_id": "MDU6SXNzdWU2MjUyMzI3ODE=",
    "number": 912,
    "title": "Want to be able to open my original assets with their shell handler",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-26T22:12:25Z",
    "updated_at": "2020-05-27T08:21:40Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d multiplayer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWant to be able to drag my assets from Godot into Maya. This is a generalization of that.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nBe able to right click on the imported resource in the file system (section) and then have an option to open the original file. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nOpen the filesystem section and and then it uses https://docs.godotengine.org/en/stable/classes/class_os.html#class-os-method-shell-open to open the absolute path of fbx / gltf / dae / wav / imported resource using the system shell open.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a quality of life enhancement.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNew developers won't know what an asset library is.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/912/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/911",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/911/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/911/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/911/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/911",
    "id": 625215370,
    "node_id": "MDU6SXNzdWU2MjUyMTUzNzA=",
    "number": 911,
    "title": "Add illustrative image to godot-proposals readme",
    "user": {
      "login": "anakimluke",
      "id": 22756345,
      "node_id": "MDQ6VXNlcjIyNzU2MzQ1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22756345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anakimluke",
      "html_url": "https://github.com/anakimluke",
      "followers_url": "https://api.github.com/users/anakimluke/followers",
      "following_url": "https://api.github.com/users/anakimluke/following{/other_user}",
      "gists_url": "https://api.github.com/users/anakimluke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anakimluke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anakimluke/subscriptions",
      "organizations_url": "https://api.github.com/users/anakimluke/orgs",
      "repos_url": "https://api.github.com/users/anakimluke/repos",
      "events_url": "https://api.github.com/users/anakimluke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anakimluke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-26T21:37:42Z",
    "updated_at": "2020-10-10T14:19:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWriting this proposal.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUpon entering this repository link, I am presented with absence of neatness: Just plain black and white text.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA big image, maybe a logo, an inside joke, an alpaca or whatnot, right at the top of the repository landing page: the readme file.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere are 4 main ways this feature could be implemented:\r\n\r\n1. A maintainer takes the same image that is displayed on the godot development repository.\r\n2. A maintainer figures something by themselves, commits the image they made/chose, and closes this issue.\r\n3. After extensive discussion and design proposals, community members reach a consensus, and a pull request is created. Immediately after that, the pull request is merged.\r\n4. This feature request is dismissed, the issue is closed.[1]\r\n\r\nIt's clear from the options above that I don't want options 1 or 4 to happen :(\r\nThus, the optimal solutions are the options 2 or 3.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis *will* be used often.\r\nEven if it would't, the way around it would require a bunch of code:\r\nOne would make an uplifting drawing on a post-it and put it next to one's display so as to be looked at every time this repository is accessed, and to be reminded that life is good. But time, motors, batteries, electronics and hardware knowledge etc would be necessary; basically not feasible within the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would require a whole lot more work to create and publish an add-on in the asset library that changes the web page content to a desired image, rather than to simply opt for options 2 or 3 mentioned above. Not to mention that as an add-on, this feature won't benefit most feature-requesting users.\r\n \r\n[1]: [I would be outraged.](https://en.wikipedia.org/wiki/Law_of_triviality)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/911/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/910",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/910/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/910/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/910/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/910",
    "id": 625123661,
    "node_id": "MDU6SXNzdWU2MjUxMjM2NjE=",
    "number": 910,
    "title": "Focus editor camera when middle-click on any 3D surface",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-26T19:13:47Z",
    "updated_at": "2020-12-26T17:52:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Continuation from https://github.com/godotengine/godot/issues/17517\r\n\r\n**Describe the project you are working on:**\r\nA 3D game, a heightmap plugin\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOrbit and fly mode are useful to navigate scenes, but very often the focus point of the editor's camera is not exactly where I want it to be. This causes it to orbit the wrong point, and fly mode to move too fast. Adjusting this takes a bunch of maneuvers with the mouse and keyboard, or requires selecting an object that happens to be next to the point I want to be around and use F + zoom, if I'm lucky.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere is something I miss, which I found in Unity3D: point at a location in the scene, press middle click, and the editor camera will automatically focus on the surface hit by the mouse. This often has no visual impact, the camera stays at the same distance, so what Unity does is to also center the view on the clicked point (as if `F` was also pressed), which gives a nice feedback in line with the intent. It works best with a short tween (i.e inertia, which is already supported).\r\nThis is not necessarily collider-related, it works with any visible surface made of polygons, and is very handy to focus on a part of a scene by just pointing at it. It doesn't have to be a particular object, as objects can be very large anyways.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMiddle click without modifier should be enough, as long as the mouse does not move at the same time. Indeed, as I've seen in so many other software, dragging operations that could interfer with it only trigger after the mouse has moved for a few pixels, which is the threshold behind which we can consider \"it moved\" or not.\r\n\r\nI can imagine a few ways to do the actual raycast:\r\n- Capture a 1x1 depth render of the pixel under the mouse (excluding gizmos and grid), and convert it back into world coordinates. Adjust camera zoom and focus point based on these coordinates. *This has the advantage of working even with displaced geometry (like terrains), raymarched pixels, and animated models.*\r\n- Iterate every mesh of the scene and raycast against their mesh on the CPU. I don't like this one because it can be terribly slow and limited, as it will not work with displaced meshes (heightmap shaders, animated models).\r\n- Use physics colliders. Probably easiest to implement, but similarly, it is even more limited because it won't allow to focus on non-collidable surfaces, and will have poor precision.\r\n\r\nIf nothing was hit, or if the distance is unreasonably far away, nothing happens.\r\n\r\nNote: the first solution can also be used to implement very precise selection (eventually with some padding). To my experience, selecting things by clicking in 3D has always been imprecise or inoperant, due to how it is implemented.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, the states to modify are not accessible from the script API.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a simple editor-only behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/910/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/909",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/909/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/909/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/909/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/909",
    "id": 625108904,
    "node_id": "MDU6SXNzdWU2MjUxMDg5MDQ=",
    "number": 909,
    "title": "Conditional/Printing breakpoints",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-26T18:51:39Z",
    "updated_at": "2020-06-08T12:02:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Continuation from https://github.com/godotengine/godot/issues/6576\r\n\r\n**Describe the project you are working on:**\r\nAny game project. More precisely, situations where you have to debug a lot of data, or a real-time behavior that would break if the game was interrupted.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBreakpoints are a nice feature to debug, however they interrupt the entire game. There are known situations where you want a breakpoint to not always trigger. For example, in a tight loop iterating many element, a few of them named \"Yolo\" cause a bug. So you have to step a hundred times until \"Yolo\" shows up...\r\nAnother situation is printing in realtime. You could add a `print` to your source code, but this is assuming you can reliably reproduce the situation in a short amount of times.\r\nSome bugs can take a while to reproduce, and when you finally get to them, that's where you can place breakpoints and investigating, and being able to configure breakpoints can save time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nConditional breakpoints allow to filter situations when a breakpoint should actually trigger, without having to modify the code. Printing also allows to keep the code as it is. The point being, if you have a situation to debug right now, you can do it without having to restart the whole game. The top situation would then be debugging a game running remotely, on a device. It saves the burden of modifying code to print stuff, re-export to target and re-run reproduction steps.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nConditional breakpoints are standard on pretty much any serious debuggers I know (In C#, C++, Java, Javascript at least). After placing a breakpoint, right-click on it to choose extra settings.\r\n\r\nHere is a mockup:\r\n\r\n![image](https://user-images.githubusercontent.com/1311555/82938062-21863180-9f89-11ea-8465-e4c13a3e104e.png)\r\n\r\nBy default, nothing is checked and the breakpoint will \"break\".\r\nIf `Condition` is checked, the breakpoint will trigger only if the expression on the right evaluates to `true`.\r\nIf `Print` is checked, the breakpoint will not suspend the game, and instead will print a formatted string with access to the same variables available at the line where the breakpoint was added.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou would have to use `print`, which defeats the point. So not really. It's just more time-consuming.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe debugger is a core feature and cannot be modded with scripts.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/909/reactions",
      "total_count": 8,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/908",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/908/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/908/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/908/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/908",
    "id": 625107173,
    "node_id": "MDU6SXNzdWU2MjUxMDcxNzM=",
    "number": 908,
    "title": "NodePaths and their usages should be made more functional",
    "user": {
      "login": "manglemix",
      "id": 38180553,
      "node_id": "MDQ6VXNlcjM4MTgwNTUz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38180553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manglemix",
      "html_url": "https://github.com/manglemix",
      "followers_url": "https://api.github.com/users/manglemix/followers",
      "following_url": "https://api.github.com/users/manglemix/following{/other_user}",
      "gists_url": "https://api.github.com/users/manglemix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manglemix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manglemix/subscriptions",
      "organizations_url": "https://api.github.com/users/manglemix/orgs",
      "repos_url": "https://api.github.com/users/manglemix/repos",
      "events_url": "https://api.github.com/users/manglemix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manglemix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-26T18:48:48Z",
    "updated_at": "2020-05-27T19:28:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHey I'm working on a game for a game jam, and I was working on a save game feature. This involves me storing the paths of where some nodes are supposed to be\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHowever, let's say I'm reloading these nodes back when I open up the game. What I have are several node paths (and information about the node type and data), but I can't use the node path to just place a node at that location. I would need to find the parent of that node, so that I can add_child\r\n\r\nUnfortunately I would have to turn the NodePath into a string, find the index of the last slash, and take only the part of the string to the left of that index to get the path of the parent.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy suggestion is to make the API for NodePath identical to an Array. It would definitely make the experience with NodePaths much, much more intuitive. Lastly, there should be a place_child method so you can actually just add a child directly at the intended path, skipping all the above obstacles.\r\n\r\nLet's say I want to find the parent of the last node in a NodePath. I would like to do: path.get_parent() or path[-2] or path[path.size() - 2]\r\n\r\nI should also be able to slice a path just like an array:\r\npath.slice(0, 3) (if index slicing is added like in python that would also be great)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf this feature were not added, the only workaround would be to convert a NodePath to a string and do some string manipulation, or use the limited methods already provided. While it is technically possible to still code without this, it makes for much more verbose code that quickly loses understand-ability\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nObviously this should be added to the core and not an addon for the convenience of all developers out there.\r\n\r\nHowever, the added functionality can be all implemented in GDscript in a simple enough way (in fact it could be a good exercise to budding programmers). You could simply make a NodePathPlus class in a single script and distribute it as an addon.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/907",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/907/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/907/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/907/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/907",
    "id": 625093836,
    "node_id": "MDU6SXNzdWU2MjUwOTM4MzY=",
    "number": 907,
    "title": "Project-wide group management",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-26T18:27:03Z",
    "updated_at": "2020-05-27T20:06:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Continuation from https://github.com/godotengine/godot/issues/5744\r\n\r\n**Describe the project you are working on:**\r\nA game where scenes must be in groups to be treated differently by some gameplay features.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen adding a group to a node, it must be typed in manually. However those groups are well defined in my game, and there is a risk I do a typo, or even don't remember exactly which group I should use.\r\n\r\nA group management dialog has been merged to the engine already https://github.com/godotengine/godot/pull/16502, unfortunately it does not meet those requirements, and is quite confusing, because:\r\n\r\n- It only proposes groups that already exist in the scene. So if you want to add a new one which already exist in other scenes of your project, you have to remember and type groups again.\r\n- Despite being opened from the `Groups` tab, it does not relate to the selected node. Instead, it shows all nodes of the scene in a flat list (including those under instanced scenes), which is messy.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike collision layers, I would like to be able to declare a list of global groups that can be used in my game, in Project Settings. This would allow insert groups using a dropdown list / scroll list rather than having to type it each time.\r\nBesides, it also allows the editor to auto-complete in the script editor, because it will know which groups are globally available, not only those present in the current scene.  It helps self-documenting the project as well because important groups used by the project can be found in one place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPretty much what has been proposed in this PR: https://github.com/godotengine/godot/pull/24262\r\nIn ProjectSettings, a place where we can input a list of globally defined groups.\r\nThen in the `Node` dock, in addition to be able to type a group manually, we may be able to choose from a list of known groups.\r\n\r\nIt will still be allowed to make groups on the fly in the current scene or in code, and those can still be included in the proposed dropdown. The point is, there can also be a common set of groups that you don't need to re-define anymore in every new scene.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere has been an attempt to make a plugin related to this need: https://www.youtube.com/watch?v=inBR5-071ko\r\nBut it doesn't adress the same concerns and doesn't seem to integrate to the editor that much. Besides, I can't find such plugin on the assetlib (nothing with \"group\").\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGroups are a core basic feature, and are added/removed using very specific UIs of the editor. A plugin cannot modify that, and cannot alter script auto-completion either. All it can do is to add extra UIs that don't integrate with the existing ones.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/907/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/906",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/906/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/906/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/906/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/906",
    "id": 625084324,
    "node_id": "MDU6SXNzdWU2MjUwODQzMjQ=",
    "number": 906,
    "title": "More configurable/custom colors for visible collision shapes debug option",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-26T18:11:30Z",
    "updated_at": "2020-11-04T00:33:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A (generic issue)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDifficulty to pick out collision shapes, especially when they overlap (it's more pronounced in 2D than 3D)\r\nTangent: collision shapes and navmeshes/navpolys coexisting in the same project exacerbate the problem even further.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDifferent collision shape colors would help differentiate between shapes, esp. overlapping ones.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the original issue, @Calinou suggested either randomly selecting colors or exposing a custom_color option.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot possible to work around AFAIK.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan assets even touch debug collision shape setting in any meaningful way? IIRC no.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/31283\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/906/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/905",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/905/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/905/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/905/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/905",
    "id": 625009740,
    "node_id": "MDU6SXNzdWU2MjUwMDk3NDA=",
    "number": 905,
    "title": "Single click update of instanced properties back to source [3.2.0]",
    "user": {
      "login": "hlship",
      "id": 52660,
      "node_id": "MDQ6VXNlcjUyNjYw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/52660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hlship",
      "html_url": "https://github.com/hlship",
      "followers_url": "https://api.github.com/users/hlship/followers",
      "following_url": "https://api.github.com/users/hlship/following{/other_user}",
      "gists_url": "https://api.github.com/users/hlship/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hlship/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hlship/subscriptions",
      "organizations_url": "https://api.github.com/users/hlship/orgs",
      "repos_url": "https://api.github.com/users/hlship/repos",
      "events_url": "https://api.github.com/users/hlship/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hlship/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-26T16:17:49Z",
    "updated_at": "2020-09-13T23:25:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n2D arcade-like shooter.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt can be awkward to make changes to an instanced scene when you want to change the source scene, not the local instance.  This involves a lot of copying and clicking around to capture the changed properties, one-by-one, from the instanced scene into the original scene.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWhen using instanced scenes in the scene editor, sometimes I would like to make changes to properties (such as scale) and have an easy way to propagate that change backwards to the source scene.  It feels like this could be done with a new button or button behavior, rather than a multi-step manual process.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI would imagine that it could be implemented as an alt-click of the \"reset instanced property\" button that appears next to changed instance properties.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't believe so. Perhaps my knowledge of Godot is too limited.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis would be an editor and editor workflow change.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/905/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/904",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/904/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/904/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/904/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/904",
    "id": 624950600,
    "node_id": "MDU6SXNzdWU2MjQ5NTA2MDA=",
    "number": 904,
    "title": "Add indicator to resources that are unique",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-26T14:59:03Z",
    "updated_at": "2020-05-27T19:00:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A (generic issue)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI forget which resources are unique and which are not (easy when the project is big)\r\nThis is especially important for a) shaders (performance and/or unexpected effects) and b) collision shapes (we had many reports where people duplicated area2d/area3d and wondered why changing one's shape changed the other's, too)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTell us which resources are unique (since all resources are shared by default)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd an icon to the inspector for unique resources\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan't be done via add-on, as this changes the editor inspector.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/6922 (I reworded it to indicate unique resources instead of shared since all resources are shared by default)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/904/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/903",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/903/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/903/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/903/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/903",
    "id": 624863229,
    "node_id": "MDU6SXNzdWU2MjQ4NjMyMjk=",
    "number": 903,
    "title": "Color profile management",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-26T12:57:32Z",
    "updated_at": "2020-06-08T23:13:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d multiplayer game project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRewrote https://github.com/godotengine/godot/issues/26826 as a proposal. Thanks to @toasteater.\r\n\r\nExpected: Godot is aware of ICC profiles, and render correctly on wide-gamut displays.\r\nActual: Godot is not aware of ICC profiles. Colors are distorted and over-saturated.\r\n\r\nMany systems (including Windows and X11 platforms) do not have end-to-end color management, and it's up to applications to convert images to device gamuts for display.\r\n\r\nCurrently, Godot converts all output to *sRGB* and pushes that directly to the device. The colors are then interpreted as coordinates in the *device* color gamut, which is usually not exactly sRGB either, but significantly different in case of wide gamut displays. This causes major color distortions, both in the editor and in the exported games.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n* Wide gamut displays are commonplace among graphic designers and artists. An accurate representation of colors is critical for their work.\r\n* Many content creation applications have color correction, so assets would often look different to artists when imported to Godot. This has caused confusion before (e.g. #4816, note that one comment's author suggested to turn color management *off* in the other application, which is totally not a good idea) and will likely continue to.\r\n* Wide gamut displays are becoming [increasingly available to consumers](https://en.wikipedia.org/wiki/DCI-P3#History), which means that this affects not only developers, but players as well.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n* Create a ColorRect with a primary color (e.g. `ff0000`)\r\n* Observe it on a wide gamut display.\r\n* Compare output with the output of an ICC aware application with appropriate profiles assigned.\r\n\r\nExpected: Same color rendered.\r\nActual: The color rendered by Godot is much more saturate.\r\n\r\nUnfortunately, the effect is much less observable on a normal sRGB-ish display. On my device GIMP renders the sRGB `ff0000` as `d53b1a`, if that puts it into any perspective.\r\n\r\n![red](https://user-images.githubusercontent.com/48371905/54070104-38414b00-4254-11e9-97a5-890c23300acd.png)\r\n(Left: Godot, Right: GIMP w/ ICC profile. Screenshot interpreted as sRGB so the difference can be seen with ordinary displays. The actual saturation difference seen is much greater than what this image suggests.)\r\n\r\nWhile arbitrary gamut conversion can be nice, the most currently needed feature is conversion from sRGB to display gamut, in the editor. One possible way is to allow users to specify an ICC profile in preference, which will be used to generate a 3D LUT texture on load. This resulting texture will then be used to transform the entire editor interface as the last step of rendering. This should suffice for the current use case.\r\n\r\nPossible further improvements outside the scope of this feature proposal may include:\r\n\r\n* Loading monitor profiles from desktop environment if available.\r\n* Support gamut conversion in exported games.\r\n* Support arbitrary primaries (as opposed to sRGB/Rec709), allowing utilization of consumer wide gamut displays.\r\n\r\nIt's possible to take [LittleCMS](http://www.littlecms.com/) (MIT license) on as a dependency for this feature, which I understand won't be a very lightly made decision. ICC profiles are [rather complex](http://www.color.org/newiccspec.pdf), so writing one's own parser can be quite slow and error prone. I'm also not experienced with Godot's code base, so I'm seeking feedback before coding anything.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo. A workaround is possible, but significant work is required:\r\n\r\nIt's possible to use a [custom postprocessing](https://docs.godotengine.org/en/latest/tutorials/shading/advanced_postprocessing.html) shader and a LUT to convert sRGB (or Linear with sRGB primaries) to whichever color gamut desired. However, custom postprocessing is not currently very wieldy, and it does not apply to UI elements (e.g. color choosers) on the editor side. It's also requires users to somehow generate their own LUTs from ICC profiles.\r\n\r\nThe Color Correction option in Environment is not fit for this purpose, as it can't be used for 2D, and also conflicts with scene grading within the sRGB gamut.\r\n\r\nSee https://github.com/godotengine/godot/pull/26869 for a draft in 3.2.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nChanging the rendering pipeline is part of the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/903/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/902",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/902/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/902/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/902/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/902",
    "id": 624852784,
    "node_id": "MDU6SXNzdWU2MjQ4NTI3ODQ=",
    "number": 902,
    "title": "Ability to pass arguments to functions by name ",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-05-26T12:41:04Z",
    "updated_at": "2020-06-02T19:14:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAny project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nEach time I add/remove function parameters, change their order, or change which are mandatory, I have to manually hunt for all function calls and update them.\r\nEspecially in setup functions that have dependency injection, mode setting etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature allows calling parameters by name. \r\n\r\nThe future makes changing parameters less of a problem. For instance if I have function calls that use only one parameter of all available ones by name, changing their order or adding new non-mandatory ones does not break the function call.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe future is already existing in python, and works like this:\r\n\r\n```\r\nfunc foo(val1:String = \"c\", val2:String = \"c\"):\r\n    print(val1)\r\n    print(val2)\r\n\r\nfoo(val2 = \"a\") # prints \"c a\"\r\nfoo(val2 = \"a\", val1 = \"b\") # prints \"b a\"\r\n```\r\nMore detailed explanation: [https://treyhunner.com/2018/04/keyword-arguments-in-python/](https://treyhunner.com/2018/04/keyword-arguments-in-python/)\r\n\r\nHere is a practical example of usage:\r\n```\r\nfunc build_spacefighter(\r\n  hull:int, # Mandatory\r\n  engines:int,\r\n  front_gun:int = 0, # Optional\r\n  side_guns_1:int = 0,\r\n  side_guns_2:int = 0,\r\n  missiles_1:int = 0,\r\n  missiles_2:int = 0,\r\n  torpedo:int = 0,\r\n  targeting_system:int = 0,\r\n  cloak:int = 0,\r\n  shield_generator:int = 0,\r\n  ):\r\n  \r\n  # Rest of function\r\n  \r\nvar bomber = build_spacefighter(hull = Parts.HULL_A, engines = Parts.ENGINE_C, torpedo = Parts.TORPEDO_PHOTON)\r\n```\r\n\r\nSame code without this function:\r\n ``` \r\nvar bomber = build_spacefighter(Parts.HULL_A, Parts.ENGINE_C, 0, 0, 0, 0, 0, Parts.TORPEDO_PHOTON)\r\n```\r\n^ And adding new ship parts before the called ones means changing amount of zeroes in the function call every time.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's would be part of GDScript.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/902/reactions",
      "total_count": 20,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/901",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/901/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/901/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/901/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/901",
    "id": 624846643,
    "node_id": "MDU6SXNzdWU2MjQ4NDY2NDM=",
    "number": 901,
    "title": "Merge/batch different meshes at import-time",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-05-26T12:30:39Z",
    "updated_at": "2020-12-01T15:35:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d racing game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCollada files import as several meshes instead of one.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option to merge meshes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt could be an import-time switch, but a more generic solution (preferably exposed to GDScript so that I could merge already imported assets/scenes via tool scripts) would also be necessary.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImport-time switch cannot be done via an add-on. There *was* an asset that claimed to do the generic kind, but it crashed on Collada imported meshes, it only worked for Godot primitives.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/7844",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/901/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/900",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/900/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/900/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/900/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/900",
    "id": 624783313,
    "node_id": "MDU6SXNzdWU2MjQ3ODMzMTM=",
    "number": 900,
    "title": "Provide a keyword to differentiate between tool scripts and plugin code",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-26T10:38:37Z",
    "updated_at": "2020-05-26T11:53:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nVarious Editor UI plugins.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to the nature of the plugin implementation there is no guaranteed way to separate the code added with a plugin and running within plugin-added nodes from scripts in the `tool` mode. For a script to be able to execute in the editor environment it must be put in the `tool` mode. This is used for two distinct cases: to adjust how a scene is visible in the 3D/2D preview panel, and to make UI for editor plugins.\r\n\r\nHowever, issues arise from the fact that the development of said plugins is performed in the same way the regular scenes are developed in: within the same editor and with the same tools. This means that each scene or node created by a plugin has a script attached that is automatically executed in the 3D/2D preview without any intention by developer to do so. There are tricks to guess if the scene is running as a part of a plugin, down to the blunt approach of exposing `EditorPlugin` instance to the whole added tree. But it's cumbersome and not natural. This also causes unexpected changes to the scenes for inexperienced developers and forces experienced ones to write more code to prevent this from happening in each and every node they implement.\r\n\r\nSee more reasoning and discussion in the original issue godotengine/godot#17592.\r\nAlso related: #520.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere may be different ways to solve this problem, if we go deep enough. It is obvious that the issue is related to the way the plugins are implemented internally and a complete reinvention of the system may allow for a smarter and easier approach to solve this.\r\n\r\nBut as users we can suggest introduction of a new keyword, akin to `tool`. Let's say it is going to be called `plugin`. Adding such a word at the top of the script will allow it to be run by the editor within plugin code (or just editor UI in general), but not within the 3D/2D preview. This behavior should not overlap with the `tool` mode. Both keywords can be combined and used individually to achieve the desired behavior.\r\n\r\nIt would make sense to introduce an alternative to `Engine.editor_hint` as well, to allow some logic to happen only when in the editor environment, but not in a scene preview.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSince there are unlimited ways to introduce new UI to the editor by plugins (basically, any node can be used with an `add_child` call, and the editor would be none the wiser), we should probably concentrate on guarding such scripts from interacting with 3D/2D previews.\r\n\r\nI'm not sure of any further details, but @RandomShaper was offering to implement his vision of the solution in godotengine/godot#17592, so maybe he can describe it in more detail.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is extremely important for plugin developers, but out of our hands at this moment. No way to solve with any scripts, except for mentioned tricks to deduce needed conditions.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a part of the plugin system.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/900/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/899",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/899/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/899/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/899/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/899",
    "id": 624747091,
    "node_id": "MDU6SXNzdWU2MjQ3NDcwOTE=",
    "number": 899,
    "title": "Auto rename references - provide 'refactor' tooling ",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-26T09:40:56Z",
    "updated_at": "2020-08-08T16:59:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A (generic issue)\r\n**Describe the problem or limitation you are having in your project:**\r\nRenaming a variable in a script causes references to it in other script to be broken.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen renaming a variable, it should refactor/rename references too.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nQuoted from original issue:\r\nWhen renaming any kind of object in Godot, it should find all occurrences in scripts/editor\r\nand change that as well. This can be achieved by parsing script files, any matching names for the changed scene/node, like \"load(), preload(), set_script() get_node()..etc!) functions.\r\n\r\nThis should apply too to renaming variables, it would be great if when renaming a variable in script\r\nit changes all occurrences in the script file.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope. (Also I assume it will be used more often the bigger and more complex projects are)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHas to be done in script editor for variables use case, and in the editor itself (possibly Fix Dependencies dialog) for other use case.\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/3163",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/899/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/898",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/898/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/898/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/898/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/898",
    "id": 624711321,
    "node_id": "MDU6SXNzdWU2MjQ3MTEzMjE=",
    "number": 898,
    "title": "Stack multiple prints together",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-26T08:49:34Z",
    "updated_at": "2020-05-26T14:17:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A (generic issue)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPrinting the same thing over and over (e.g. to make sure the AIs are active)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe console is less flooded and therefore performs better in terms of speed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMockup in original issue.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it can be worked around outside of core (the workaround given in original issue is for server-side projects, but it's needed for non-server projects, too)\r\n\r\nOriginal issue: https://github.com/godotengine/godot/issues/19121",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/898/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/896",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/896/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/896/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/896/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/896",
    "id": 624471238,
    "node_id": "MDU6SXNzdWU2MjQ0NzEyMzg=",
    "number": 896,
    "title": "New TileSet editor and TileMap improvements",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2020-05-25T20:22:39Z",
    "updated_at": "2020-08-02T20:54:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA platformer game with tiles.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot's tilemaps have few inconveniences and missing features. The biggest issue is that TileSets are lists of tiles and when you want to draw tiles you have to look for the tile on the list, which is seemingly randomly ordered and just awful to use. I actually made a proposal once about tile palette, but since it's being closed, I decided to use this chance to make a bigger proposal for some tilemap/tileset overhaul.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n- So first thing, TileSet should store a tile palette. The palette would have a configurable size (i.e. number of rows and columns), something like this:\r\n![image](https://user-images.githubusercontent.com/2223172/53515457-524b9280-3aca-11e9-86b1-963b7272d542.png)\r\nYou'd create new tile by right-clicking a cell on the palette and selecting \"New Tile\" option and then selecting a texture region. This means the tiles wouldn't be bound to textures and texture regions, but rather each would have its spot on the palette, so the palette contains all tiles in the order you want it. When editing TileMap, the right panel with tiles would have a minimal width to show all columns of the palette.\r\n\r\n  - Would be useful if multiple tiles on the palette could use the same region, but be transposed/rotated. This would help with creating auto-tiles without duplicate graphics.\r\n\r\n  - Tiles should be able to be reordered or duplicated. Also each tile on palette could be selected and inspected normally, in case you want to do the transformations I mentioned in above point or some other customization.\r\n\r\n- To make creating multiple tiles for palette easier, the right-click menu would also have \"New Multiple Tiles\" option, where you could select a texture region and it would be automatically sub-divided into tiles and they would be added to the palette. Something like this\r\n![image](https://user-images.githubusercontent.com/2223172/82836883-cfc9a280-9ec7-11ea-9693-29c8a19124d5.png)\r\nThis would be very useful for autotiles. See, instead of defining autotiles as single tile, an autotile would be created from multiple tiles in the palette and each tile could have its bitmask set normally. The reason for this is that you don't always want to use auto-tilling and when you disable it normally, you get the standard ugly sub-tile list, which would also be incompatible with the palette. When auto-tilling is enabled, selecting any compatible tile from the palette would create the proper tiles in \"auto way\". This gives another possibility: my biggest problem with current autotiles is that you can't do proper slopes. You either have normal edges or sloped edges, due to bitmask limitations. Recently this got an option to randomize tile with matching bitmask, but it's still meh. But what if the selected tile would be favored? You'd have corners and slopes on the palette, with the same bitmask, but the one selected would be favored, so you would get autotilling and flexibility in one.\r\n\r\n  - There should be a shortcut to disable auto-tilling, if there isn't one already. It would make fine-tweaking auto-tiles even easier.\r\n\r\n  - The atlas tile would become probably obsolete with all above features.\r\n\r\n- Another thing that was requested many times is having ability to define \"scene tiles\", so placing objects as tiles instead of instancing everything manually. I know there's a workaround to replace certain tile ids with objects, but it has two problems: it's inconvenient (you need to configure it in code) and the bigger problem is that each \"scene tile\" needs an icon. I mean they have to still be represented as tiles somehow, so either you use basic placeholder, which makes your level visuals different in editor or spend too much time making icons. So why not make it built-in? For this we need new tile type: scene tile. Scene tiles would have 2 main properties: the scene (basically PackedScene resource) and offset. Offset, because you need to somehow fit the object inside a square tile, so to position it more easily, you could set offset for each object. Obviously you can use nodes bigger than tiles, the offset only affects the origin at which it is instanced relative to tile position. When you draw the scene tile, editor would fetch the preview (it already shows e.g. when you drop the scene file onto viewport), so you'd see visually where the object will be placed in the game. Convenient stuff.\r\n\r\n  - This however creates a minor issue with being unable to configure the tiles (in case someone wants). The easier way to do this would be allowing to instance individual scene tiles, which would create instance of the node as a sibling of Tilemap. However for easy mass-configuring, each scene-tile should be able to override exported properties of the scene (it would be done in the palette), which is obviously the more difficult way.\r\n\r\n  - The scene tiles would be visible in the palette as auto-generated small previews, or node icons in case there is no preview. Users could override the icon too.\r\n\r\n- Collisions. Right now making collisions is annoying af. Having the palette means that we can... draw them. This is example from RPG Maker:\r\n![image](https://user-images.githubusercontent.com/2223172/82838022-28e70580-9ecb-11ea-9725-5c3f3f91c1aa.png)\r\nIn Godot, instead of circles and crosses, the tiles would either be blue or normal. Also we could place slope collisions and any other collision. Just make one polygon (or set a predefined one) and then draw it over other tiles like with pencil.\r\nThis basically means that all interactions with tiles would be moved to the palette. The only thing done \"outside\" palette would be creating tile region. When tile has region (which can't be bigger than cell size, but that is irrelevant, check below), this region is drawn on the palette and then you operate on the tile in the palette. This basically allows things like drawing collisions over multiple tiles (internally of course the colliders would be polygons like now).\r\n\r\n- Multi-tile drawing. Having a tile palette makes this trivial to make. Basically when editing TileMap, select multiple tiles (by dragging your selection) and drawing would draw the whole selected pattern at once. This solves the problem of having \"bigger tiles\", so each tile could have same size without losing functionality.\r\n\r\n- Layers. I've seen it requested few times. The workaround is to stack multiple Tilemaps, but it's inconvenient™. You can't easily switch between tilemaps. Would be useful if TileMaps could have multiple layers and we would be able to easily switch between them, to draw background and foreground tiles more easily. The layers could have configurable z-index and collisions.\r\n\r\nSo this is my vision for new TileSet system. Related proposals that would this solve:\r\n#739 (drawing collisions would make it ultra convenient already)\r\n#265 (same as above)\r\n#352 (another collision issue, same as above xd)\r\n#310 (with easier tile selecting and auto-tile shortcut, this becomes non-issue)\r\n#88 (might be resolved by the same reason as above)\r\n#574 (might become irrelevant, because tiles would be unnamed and just part of palette)\r\n#771 (see the point about rotated tiles in palette)\r\n#893 (very similar to above)\r\n\r\nIt's possible I might not covered how all existing functionality could look in the new system, so feel free to ask. I actually have limited experience with Godot TileMaps, I took much inspiration from RPG Maker here.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically a rewrite of TileSet editor and partial rewrite of TileMap editor. The new TileSet editor would be more focused on tile palette and simplify the process of working with tiles, which instead of being some separate entities vaguely on top of some region, would instead be more organized and grouped/related together (if that makes sense).\r\n\r\nEDIT:\r\nI could probably put some mock-ups here in case the new editor is hard to visualize from the description 🤔\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEveryone would use it if it become the new editor :v\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe current tile workflow is meh.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/896/reactions",
      "total_count": 45,
      "+1": 31,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 12,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/895",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/895/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/895/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/895/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/895",
    "id": 624461716,
    "node_id": "MDU6SXNzdWU2MjQ0NjE3MTY=",
    "number": 895,
    "title": "Implement multi-pass post-processing shaders",
    "user": {
      "login": "seadra",
      "id": 9574367,
      "node_id": "MDQ6VXNlcjk1NzQzNjc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9574367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seadra",
      "html_url": "https://github.com/seadra",
      "followers_url": "https://api.github.com/users/seadra/followers",
      "following_url": "https://api.github.com/users/seadra/following{/other_user}",
      "gists_url": "https://api.github.com/users/seadra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seadra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seadra/subscriptions",
      "organizations_url": "https://api.github.com/users/seadra/orgs",
      "repos_url": "https://api.github.com/users/seadra/repos",
      "events_url": "https://api.github.com/users/seadra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seadra/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-25T19:52:04Z",
    "updated_at": "2020-12-10T19:23:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(This is issue [#862](https://github.com/godotengine/godot/issues/862) from Godot repo. On multiple occasions in that issue, @reduz mentioned that this is going to be implemented in a later version.)\r\n\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA 3D FPS game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCertain effects (such as [this](http://www.clicktorelease.com/code/npr-shading/) or [this](http://forums.tigsource.com/index.php?topic=40832.msg1027171#msg1027171)) require multiple passes (of the entire viewport, not per-material), each time with a different shader, either finally combining the outputs into a final one, or using the output of one pass as input to the next one.\r\n\r\nIn Unity, [Pass](http://docs.unity3d.com/Manual/ShaderTut2.html) allows to do this.\r\n\r\nRight now, it is impossible to do multiple passes with godot, so we are restricted to \"simple\" stuff that can only involve a single pass.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt will allow doing multi-pass post-process shaders.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nOne possibility (among potential alternatives) would be that it can work in a similar way as described in  [Unity documentation](http://docs.unity3d.com/Manual/ShaderTut2.html), which would require modifications to shading language.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis would require changes in the engine itself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/895/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/894",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/894/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/894/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/894/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/894",
    "id": 624426123,
    "node_id": "MDU6SXNzdWU2MjQ0MjYxMjM=",
    "number": 894,
    "title": "Have community-made custom splash logos for every new release",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-25T18:03:25Z",
    "updated_at": "2020-07-03T10:18:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA NES clone game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSome nice splash logo my game.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice if the project had a contest to use a custom logo the comunity could create, similar to how blender has custom splash screens in every release.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would be a comunity contest, where the godot devs pick the best splash animation, similar to this tweet:\r\nhttps://twitter.com/TheTransmogrify/status/1262054867302047747\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's more of a comunity improvement and aesthetical newer logos.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot really requires coding or addons, is more of a proposal to the comunity.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/894/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/893",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/893/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/893/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/893/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/893",
    "id": 624418998,
    "node_id": "MDU6SXNzdWU2MjQ0MTg5OTg=",
    "number": 893,
    "title": "Allow autotile to rotate/flip tiles when finding a matching bitmask",
    "user": {
      "login": "PeterJSFChaplin",
      "id": 6305593,
      "node_id": "MDQ6VXNlcjYzMDU1OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6305593?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PeterJSFChaplin",
      "html_url": "https://github.com/PeterJSFChaplin",
      "followers_url": "https://api.github.com/users/PeterJSFChaplin/followers",
      "following_url": "https://api.github.com/users/PeterJSFChaplin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PeterJSFChaplin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PeterJSFChaplin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PeterJSFChaplin/subscriptions",
      "organizations_url": "https://api.github.com/users/PeterJSFChaplin/orgs",
      "repos_url": "https://api.github.com/users/PeterJSFChaplin/repos",
      "events_url": "https://api.github.com/users/PeterJSFChaplin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PeterJSFChaplin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-05-25T17:43:41Z",
    "updated_at": "2020-08-26T01:46:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:***\r\nI have been learning to use autotiles for a 2d rpg and an isometric strategy game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen creating the texture for a tileset, I find myself spending a lot of time rotating/flipping tiles to create a full set. This results in texture files that are much larger than they need to be, and is especially a hassle when creating animated textures.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow the developer to specify what transformations can be applied to each subtile of an autotile set (e.g can the tile be flipped horizontally, can it be rotated, can it be flipped on either/both axes).\r\nThis would allow much smaller texture files — e.g. a functional tileset to be created with only four tile textures - one inner corner, one outer corner, one edge, and one filled tile.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have a pull request here: https://github.com/godotengine/godot/pull/39046\r\nSome examples:\r\n![image](https://user-images.githubusercontent.com/6305593/82833766-f206f480-9eb6-11ea-9735-5344e4935a38.png)\r\n![image](https://user-images.githubusercontent.com/6305593/82833795-05b25b00-9eb7-11ea-9127-ea1b38973dd8.png)\r\n![image](https://user-images.githubusercontent.com/6305593/82833810-1367e080-9eb7-11ea-9cef-e4ebfe9a0c3b.png)\r\n![image](https://user-images.githubusercontent.com/6305593/82833857-34c8cc80-9eb7-11ea-9de0-2fffe9418552.png)\r\n![image](https://user-images.githubusercontent.com/6305593/82833886-48743300-9eb7-11ea-9b93-aa0b01dfdc67.png)\r\nIt may be possible to add a configuration via gui, but I didn't feel confident enough to add that myself.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs far as I can tell, work-arounds would involve either creating a much larger texture file for the tileset, or manually selecting each tile without using the autotile functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe this would be used by many, possibly most, tilemaps if it was widely available as standard.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/893/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/892",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/892/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/892/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/892/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/892",
    "id": 624417231,
    "node_id": "MDU6SXNzdWU2MjQ0MTcyMzE=",
    "number": 892,
    "title": "Add support for double precision floats",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 27,
    "created_at": "2020-05-25T17:38:33Z",
    "updated_at": "2020-11-18T09:34:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This proposal is a summary and formalization of various past discussions about double support, especially [issue #288](https://github.com/godotengine/godot/issues/288) which this proposal directly supersedes.\r\n\r\n**Describe the project you are working on:**\r\n\r\nThis proposal affects any game working with large scale environments in 3D, meaning, any environment larger than a few kilometers. This proposal is especially important for games taking place [in the vastness of space](https://github.com/ivoyager/ivoyager_planetarium). The problem technically also exists in 2D, but it is far less of an issue.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAny 3D game in Godot with large scale environments will begin to experience jitter once the player moves more than a few kilometers away from the world origin. The problem is most noticeable in FPS games, since objects tend to be close to the camera, and jitter is more clearly visible. This is caused by the limitations of single-precision floats. There are some workarounds for some use cases, but the only proper fix is one that is done on the engine level.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe core issue is that single-precision floating point numbers have a limited amount of precision, which is unsuitable for games that use large scales. Single-precision floats have 23 significant binary digits (they are 32-bit, 8 of the bits are used for the exponent and 1 bit is used for positive/negative). First-person shooter games depend on the world having better than about half a millimeter of precision. The formula `0.0005 * (2^23)` shows us that errors big enough to notice appear approximately a few kilometers away from the world origin.\r\n\r\nThe solution, simply put, requires us to add more significant digits. Double-precision floats are 64-bit, with 52 of those bits being significant binary digits. This is 29 more significant binary digits than single-precision floats, which increases the maximum usable area by a factor of about half a billion, to about 2 Tm (2 billion km). We go from a fifth the length of Manhattan to an area greater than the orbital radius of Saturn, more than enough for 99.99% of games. (Of course, you don't have to use all that area up to see benefit, any game larger than a few kilometers will benefit from doubles).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor now, the plan is for this to be a **completely optional feature** which is not enabled by default, to maintain high performance on older devices. Anyone who needs double support can compile their own version of the engine from source. The rest of this section describes the details of how this will work.\r\n\r\nC++ has a keyword called `typedef` that allows aliasing of types. Godot already uses this for the `real_t` type used for vectors and many parts of the engine. Eventually, users will be able to compile the engine with `real_t` being aliased to `double`, which means that all vector math is done with doubles, including transformations and all physics code. [Pull request #21922](https://github.com/godotengine/godot/pull/21922) is a stepping stone towards double support, fixing many of the issues that currently exist when trying to compile with doubles.\r\n\r\nOn the CPU, for the most part, doubles are equally as fast as single-precision floats. The x86 architecture does not have circuits for single-precision floats, the FPU elevates all floating-point types to an 80-bit extended precision format internally, and truncates the result. Doubles take up twice the amount of memory, which can be an issue for architectures not optimized for moving around pieces of 64-bit data (such as 32-bit architectures), but otherwise the total memory usage of the engine does not change very much. There is also the matter of SIMD vector instructions, designed to perform math in parallel. Godot does not currently use these, but if it did, full acceleration would require AVX2 (256-bit for 4 * 64-bit), which means Intel CPUs from 2013 or later, and AMD CPUs from 2015 or later.\r\n\r\nIt's important to note that doubles cannot be used on the graphics card. Due to Nvidia intentionally crippling support for doubles on non-Quadro graphics cards, rendering has to be done with single-precision floats. The approach used by all games that use doubles is to do all of the CPU-side math in doubles, then take all coordinates and convert them to be relative to the camera, then pass this information to the GPU. The exact details of this will be left to @reduz to deal with.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, it cannot be worked around in a few lines of script. However, let's explore what could be done.\r\n\r\nA fair question to ask is how other games handle large scales.\r\n\r\n* Most games don't. It's true that this feature is only truly needed for a small amount of games, as the majority of games take place on scales smaller than a few kilometers. For games that need somewhat large scales, sometimes maps are designed around this constraint, to be square and approximately 4 kilometers in radius, such as [PlanetSide 2's Indar map](https://edge.alluremedia.com.au/m/k/2012/06/mapsize.jpg).\r\n\r\n* Kerbal Space Program (KSP) is a game created in Unity, which (like most engines) uses single-precision floats. The developers of KSP had to implement their own math types, doing a huge amount of calculations in user code. Even with all their effort, KSP struggled with floating-point issues for many years, and these issues came to be known as [The Kraken](https://wiki.kerbalspaceprogram.com/wiki/Deep_Space_Kraken). The ideal solution is for the engine to have first-class support.\r\n\r\n* A commonly cited technique is origin shifting. This involves moving the world around the player such that the player is always near the world origin. This technique can work, but it comes with many of its own limitations. For example, it doesn't always work for multiplayer, where the server needs to have precision for *all* players at once. There are many tricks to make this work better, but this heavily complicates things to the point that it's both easier and more efficient to use doubles.\r\n\r\n* Some games that use doubles for large scales include Star Citizen, Arma 3, Space Engineers, and Minecraft. Star Citizen uses a custom version of Amazon Lumberyard with double support added. Arma 3 uses their own in-house engine which they call \"Real Virtuality\" which uses doubles. Space Engineers and Minecraft both do not use an engine, but also, Minecraft in its early days (incorrectly) truncated the coordinates, which led to issues such as the jittering seen in [Far Lands or Bust](https://www.youtube.com/user/kurtjmac) (explained [here](https://old.reddit.com/r/mindcrack/comments/396z4m/why_exactly_is_it_jittering_in_flob_now_with_more/)). There's also Unigine, which is focused on being an engine for simulations, and Unigine can use doubles.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is by nature a core engine feature, and it cannot be an add-on. However, if anyone wishes to take the limited KSP approach, I do have [this repo](https://github.com/aaronfranke/GodotExtraMath) with some math types for C#.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/892/reactions",
      "total_count": 77,
      "+1": 44,
      "-1": 0,
      "laugh": 0,
      "hooray": 14,
      "confused": 0,
      "heart": 17,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/890",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/890/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/890/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/890/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/890",
    "id": 624377680,
    "node_id": "MDU6SXNzdWU2MjQzNzc2ODA=",
    "number": 890,
    "title": "Add macro support in documentation",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1849547975,
        "node_id": "MDU6TGFiZWwxODQ5NTQ3OTc1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:docs",
        "name": "topic:docs",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-25T15:54:12Z",
    "updated_at": "2020-10-15T15:19:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI sometimes write some docs for Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCheck these snippets from Godot class reference (from Control class):\r\n```\r\nReturns a color from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]type[/code]. \r\n\r\nReturns a constant from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]type[/code].\r\n\r\nReturns a font from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]type[/code]. \r\n\r\nReturns an icon from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]type[/code]. \r\n```\r\nAs you can see, the sentences are basically repeated with some words changed. This creates more work when documenting also translators will have more work translating.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nFor such cases, it wold be convenient to have macros with placeholders for putting words. Then we could just do this:\r\n```\r\n<macro=get_stuff>Returns %s from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]type[/code].</macro>\r\n\r\n<description>\r\n    [get_stuff]an icon[/get_stuff]\r\n</description>\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMacros would be defined at the top of documents and identified by names. When parsing document further, block tags with matching macro name would be replaced, taking the contents for placeholders (multiple words would be separated by semicolon). See above example for syntax.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, it can be worked around with more text, but the point is to avoid this .-.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about Godot's documentation.\r\n\r\nEDIT:\r\nFound another use case. RigidBody3D/Generic6DOFJoin (and probably similar nodes) have some descriptions repeated thrice, for each axis.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/890/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/889",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/889/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/889/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/889/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/889",
    "id": 624370594,
    "node_id": "MDU6SXNzdWU2MjQzNzA1OTQ=",
    "number": 889,
    "title": "Allow to do `a < val < c` to check if `val` is between two values",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-25T15:38:09Z",
    "updated_at": "2020-12-08T21:31:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nJust a game with many scripts.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is more annoyance but a limitation, but sometimes you want to check if a value is between two other values. Often you can just do `if a > b and a < c`, but sometimes `a` is a method call. In that case repeating it twice is not feasible, because it means calculating something twice needlessly, bruh. So you have to do `var temp_a = a()` and then use `temp_a` in your condition. The point is, it adds another line and it's just inconvenient (_bruh_).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMy proposal is to allow double comparison operator, so in this case I could just do `if b < a() < c`. This makes it easier to check if a value is between two values in a convenient way. Obviously you could use <= too, so there's no problem with bounds.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust allow `<` and `<=` operators to be used this way.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, you'd have to extend GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause add-on is impossible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/889/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/882",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/882/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/882/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/882/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/882",
    "id": 623923623,
    "node_id": "MDU6SXNzdWU2MjM5MjM2MjM=",
    "number": 882,
    "title": "Managed exception (from C#) should be printed to Output",
    "user": {
      "login": "van800",
      "id": 1482681,
      "node_id": "MDQ6VXNlcjE0ODI2ODE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1482681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/van800",
      "html_url": "https://github.com/van800",
      "followers_url": "https://api.github.com/users/van800/followers",
      "following_url": "https://api.github.com/users/van800/following{/other_user}",
      "gists_url": "https://api.github.com/users/van800/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/van800/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/van800/subscriptions",
      "organizations_url": "https://api.github.com/users/van800/orgs",
      "repos_url": "https://api.github.com/users/van800/repos",
      "events_url": "https://api.github.com/users/van800/events{/privacy}",
      "received_events_url": "https://api.github.com/users/van800/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "neikeq",
      "id": 7718100,
      "node_id": "MDQ6VXNlcjc3MTgxMDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neikeq",
      "html_url": "https://github.com/neikeq",
      "followers_url": "https://api.github.com/users/neikeq/followers",
      "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
      "organizations_url": "https://api.github.com/users/neikeq/orgs",
      "repos_url": "https://api.github.com/users/neikeq/repos",
      "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neikeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "neikeq",
        "id": 7718100,
        "node_id": "MDQ6VXNlcjc3MTgxMDA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/neikeq",
        "html_url": "https://github.com/neikeq",
        "followers_url": "https://api.github.com/users/neikeq/followers",
        "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
        "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
        "organizations_url": "https://api.github.com/users/neikeq/orgs",
        "repos_url": "https://api.github.com/users/neikeq/repos",
        "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/neikeq/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-24T18:56:05Z",
    "updated_at": "2020-05-26T07:46:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am supporting Rider integration with Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen some managed exception in GodotTools happens, its call-stack is not printed to output.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen other users post their issues like\r\n`WARNING: EditorSettings::_get - Property not found: mono/editor/editor_path_optional\r\nAt: editor/editor_settings.cpp:151:_get() - EditorSettings::_get - Property not found: mono/editor/editor_path_optional`\r\nIt is very hard to investigate without managed stack-trace.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nManaged stack-trace should be printed to output.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is used very often in Godot Mono.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is core functionallity.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/882/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/880",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/880/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/880/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/880/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/880",
    "id": 623835165,
    "node_id": "MDU6SXNzdWU2MjM4MzUxNjU=",
    "number": 880,
    "title": "Add a VehicleBody2D node",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-24T10:17:23Z",
    "updated_at": "2020-06-14T09:39:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA car racing game 2d\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNo way to simulate a good vehicle behaviour in side view 2d mode  the car seems to jump unecessarily and then the pinjoint used for the tyres start to behave abnormally\r\n![Vehicle Problem](https://user-images.githubusercontent.com/59492619/82751635-9ca0e980-9dc9-11ea-8470-97994ebb813b.PNG)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a vehicle body 2d node thats helps everyone to simulate very good vehicle physics\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe vehicle body 2d node can be ported from the 3d version node but this time simulating physics in the x and y axis only\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI tried that asked a lot of questions from pros they seem not to have an answer, So no it cant be worked around with a few lines of code\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere is already a vehicle body 3d node which is core and can be back ported for 2d\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/877",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/877/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/877/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/877/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/877",
    "id": 623749720,
    "node_id": "MDU6SXNzdWU2MjM3NDk3MjA=",
    "number": 877,
    "title": "Use OpenGL 3.3 for the low-end rendering backend",
    "user": {
      "login": "clayjohn",
      "id": 16521339,
      "node_id": "MDQ6VXNlcjE2NTIxMzM5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16521339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clayjohn",
      "html_url": "https://github.com/clayjohn",
      "followers_url": "https://api.github.com/users/clayjohn/followers",
      "following_url": "https://api.github.com/users/clayjohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/clayjohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clayjohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clayjohn/subscriptions",
      "organizations_url": "https://api.github.com/users/clayjohn/orgs",
      "repos_url": "https://api.github.com/users/clayjohn/repos",
      "events_url": "https://api.github.com/users/clayjohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clayjohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 130,
    "created_at": "2020-05-23T21:59:40Z",
    "updated_at": "2020-10-16T00:46:12Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "_edit: see https://github.com/godotengine/godot-proposals/issues/877#issuecomment-633826826 below for updates. Make sure to read both this post and the updates before responding._\r\n\r\n**Describe the project you are working on:**\r\nThe Godot engine renderer\r\n\r\n## The Problem\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nImplementing new 3D features is becoming increasingly difficult as we try to support modern workflows (e.g. HDR, PBR) while maintaining support for OpenGL 2.1/ES 2.0 devices. \r\n\r\nWe frequently have to sacrifice quality in our high-end rendering backend in order to support consistent workflows between the high-end (Vulkan) and low-end (OpenGL) backends.\r\n\r\nSome common issues that arise:\r\n1. Scenes look very different in GLES3 vs GLES2 because of the use of sRGB vs linear lighting\r\n2. Many optimizations are not possible in GLES2\r\n3. We have to rewrite many parts of core rendering code to support GLES2 devices of varying capabilities\r\n5. Many common post processing and material effects are just not possible in GLES2\r\n6. Common 3D engine features can't work in GLES2, so we don't support them (e.g. terrain, complex particle systems)\r\n7. Our rendering defaults have to be compatible with GLES2 and GLES3, leading to poor quality default scenes overall\r\n\r\n### Compatibility with older Devices\r\nRight now the GLES2 backend serves 2 purposes:\r\n1. Compatibility with older devices that only support GLES2\r\n2. Providing a lower-end renderer for lower-end devices and for users who value speed over modern features\r\n\r\nWhen we decided to add the GLES2 backend many devices only supported GLES2. At the time, 40% of Android devices only supported GLES2. Thankfully that is no longer true.\r\n\r\nOpenGL 2.1/ ES 2.0 only devices are becoming increasingly rare. On Android over [85% of devices now support GL ES 3.0  or higher](https://developer.android.com/about/dashboards#OpenGL). On iOS, every device supports ES 3.0. On Desktop the overwhelming majority of devices support GL 3.3+ (more than 99% support at least GL 3.3 according to the [Steam hardware survery](https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam))\r\n\r\nAs a result of the rapid adoption of OpenGL/ES 3.x+ the main purpose served by the GLES2 renderer is as a low-end renderer to maximize speed on high and low-end devices. Many users that are choosing to use GLES2 currently are not doing so because their device doesn't support OpenGL 3.3, they are doing so because their device doesn't like the high-end features that are in the Godot GLES3 renderer.\r\n\r\n## The Solution\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose dropping GLES2 support for 3D. For 2D, we can still use GLES2, but when 3D features are used, we will require GLES3.\r\n\r\nGiven that the main purpose behind the OpenGL backend will be supporting low-end devices, we will write the GLES3 renderer to target low-end devices. This means it won't have the feature set that that Godot 3.2 GLES3 renderer has, but it should run even faster than the current GLES2 renderer and look much better.\r\n\r\nThis change will both increase the perceived speed and quality of the low-end renderer, but it will also make development much smoother.\r\n\r\nWhat this allows us to:\r\n1. Standardize workflow between high-end (Vulkan) and low end (OpenGL) backends. This means you can expect a more uniform look when switching between backends.\r\n2. Implement optimizations not present in GLES2 (using instancing, texture arrays, and transform feedback)\r\n3. Have similar lightmap workflow between backends\r\n4. Greatly simplify our engine code which makes maintaining the engine easier\r\n5. Extend more post-processing/materials to the OpenGL backend\r\n6. Support more high-end features that have become standard in 3D engines (e.g. terrain, physical light units, HDR)\r\n\r\nThe one issue with this proposal is WebGL. WebGL 2.0 is not supported well yet. We will either have to work out a sort of compatibility mode for WebGL, or wait for more widespread adoption of the WebGL 2.0 API.\r\n\r\nIf we do drop 3D support for GLES2 in 4.0, it will mean that we will have to work harder to support 3.2.x for a long time. Users will still be able to make and export games using Godot 3.2.x and critical bugfixes will still be merged for 3.2.x. This seems to be a fair trade off. If the GLES2 renderer is ported to Godot 4.0, it won't have access to any of the additional features that come with 4.0.\r\n\r\nOne of the factors we considered when moving to Vulkan was the poor quality of OpenGL ES 3.0 drivers on mobile. At this point, OpenGL ES 3.0 drivers support seems to have improved substantially. Further, basic features are supported very well in the OpenGL ES 3.0 drivers. By limiting ourselves to a limited feature set (closer to GLES2) then we won't bump up against any of the features that are poorly supported by the drivers and we should be able to avoid any of the major problems we had before. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n_This section is edited based on comments below_\r\n\r\nUser will be able to choose between 4 backends:\r\n1. High-end (Vulkan)\r\n2. Low-end/mobile (Vulkan)\r\n3. GLES3 (more limited than current GLES3 backend, similar feature set to current GLES2 backend. Aims for maximum compatibility)\r\n4. GLES2 (2D only to start, may support very basic 3D eventually)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, this has to do with core engine functionality",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/877/reactions",
      "total_count": 78,
      "+1": 51,
      "-1": 4,
      "laugh": 0,
      "hooray": 10,
      "confused": 5,
      "heart": 0,
      "rocket": 8,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/875",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/875/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/875/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/875/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/875",
    "id": 623635274,
    "node_id": "MDU6SXNzdWU2MjM2MzUyNzQ=",
    "number": 875,
    "title": "Integration with the Modelica physics engine",
    "user": {
      "login": "goatchurchprime",
      "id": 677254,
      "node_id": "MDQ6VXNlcjY3NzI1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/677254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/goatchurchprime",
      "html_url": "https://github.com/goatchurchprime",
      "followers_url": "https://api.github.com/users/goatchurchprime/followers",
      "following_url": "https://api.github.com/users/goatchurchprime/following{/other_user}",
      "gists_url": "https://api.github.com/users/goatchurchprime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/goatchurchprime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/goatchurchprime/subscriptions",
      "organizations_url": "https://api.github.com/users/goatchurchprime/orgs",
      "repos_url": "https://api.github.com/users/goatchurchprime/repos",
      "events_url": "https://api.github.com/users/goatchurchprime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/goatchurchprime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-23T11:04:09Z",
    "updated_at": "2020-05-25T19:03:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSimulation of a [tensegrity](https://en.wikipedia.org/wiki/Tensegrity) structure (a hang-glider airframe) which is like a self-connecting network of springs and joints.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe Godot physics engine appears to be targeted at rigid bodies and a generalized joint defined by a huge number of parameters.  It's always going to be incomplete.  \r\n\r\nFor example, the body only has mass and no angular inertia settings, and the joints are assumed to be at pin-points, and not damped or controlled by an external hydraulic actuator like you see on a bulldozer or a humanoid robotic arm.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nModelica seems to be the industry standard for dynamical simulations.  It is primarily a programming language that is fundamental across the industry in the same way that OpenGL is fundamental to all graphics.\r\n\r\nIt is a state-of-the-art solution for physical models (other than FEA).  It works by converting the system into a flat list of first order differential equations, then analyses their dependencies and applies esoteric numerical methods to solve and accurately time-step them forward.\r\n\r\nA physics simulation that is converted to this form would be complete and future proof, and shift this difficult problem to where it has been solved by specialist experts -- in the same way that we use GPU shaders, and leave it to the good folks at NVidia to achieve the impossible job of implementing them.  \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Open Modelica Editor (OMEdit) has an interface for defining bodies and joints.  Most of this structure can be encoded in the Godot editor with its bodies and joints -- except that Modelica allows you to have loops in your structures (eg an object held up by two spring/wires, like a child's swing), because it has no limits, and no need to invent a category known as \"Inverse Kinematics\".  All kinematics are instead treated as simultaneous.\r\n\r\n![image](https://user-images.githubusercontent.com/677254/82727800-9f75de80-9ce4-11ea-88c8-e4d458a0d944.png)\r\n\r\nA Modelica checkbox on a node would cause the network of bodies and forces defined in the tree below it to automatically export the code to be used for the simulation.  As an example, the following is the code for the double-pendulum above.\r\n\r\n```\r\nmodel fff\r\n  Modelica.Mechanics.MultiBody.Parts.BodyBox boxBody1(r = {0.5, 0, 0}, width = 0.06) annotation(\r\n    Placement(visible = true, transformation(extent = {{-20, -10}, {0, 10}}, rotation = 0)));\r\n  inner Modelica.Mechanics.MultiBody.World world annotation(\r\n    Placement(visible = true, transformation(extent = {{-100, -10}, {-80, 10}}, rotation = 0)));\r\n  Modelica.Mechanics.MultiBody.Joints.Revolute revolute1(phi(fixed = true), useAxisFlange = true, w(fixed = true)) annotation(\r\n    Placement(visible = true, transformation(extent = {{-60, -10}, {-40, 10}}, rotation = 0)));\r\n  Modelica.Mechanics.Rotational.Components.Damper damper(d = 0.1) annotation(\r\n    Placement(visible = true, transformation(extent = {{-60, 30}, {-40, 50}}, rotation = 0)));\r\n  Modelica.Mechanics.MultiBody.Joints.Revolute revolute2(phi(fixed = true), w(fixed = true)) annotation(\r\n    Placement(visible = true, transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));\r\n  Modelica.Mechanics.MultiBody.Parts.BodyBox boxBody2(r = {0.5, 0, 0}, width = 0.06) annotation(\r\n    Placement(visible = true, transformation(extent = {{60, -10}, {80, 10}}, rotation = 0)));\r\nequation\r\n  connect(world.frame_b, revolute1.frame_a) annotation(\r\n    Line(points = {{-80, 0}, {-60, 0}, {-60, 0}, {-60, 0}}));\r\n  connect(revolute1.frame_b, boxBody1.frame_a) annotation(\r\n    Line(points = {{-40, 0}, {-20, 0}, {-20, 0}, {-20, 0}}));\r\n  connect(boxBody1.frame_b, revolute2.frame_a) annotation(\r\n    Line(points = {{0, 0}, {20, 0}, {20, 0}, {20, 0}}, color = {95, 95, 95}));\r\n  connect(revolute2.frame_b, boxBody2.frame_a) annotation(\r\n    Line(points = {{40, 0}, {62, 0}, {62, 0}, {60, 0}}, color = {95, 95, 95}));\r\n  connect(damper.flange_a, revolute1.support) annotation(\r\n    Line(points = {{-60, 40}, {-64, 40}, {-64, 14}, {-56, 14}, {-56, 10}, {-56, 10}}));\r\n  connect(damper.flange_b, revolute1.axis) annotation(\r\n    Line(points = {{-40, 40}, {-34, 40}, {-34, 18}, {-50, 18}, {-50, 10}, {-50, 10}}));\r\n\r\nannotation(\r\n    uses(Modelica(version = \"3.2.3\")));\r\nend fff;\r\n\r\n```\r\n\r\nYou can see the double pendulum in action (and other examples) here: https://youtu.be/k7lLBASaEJg?t=121\r\n\r\nIn the free implementation OpenModelica, this language is converted into C-code, compiled and then run as a process from the command line with all the settings (stepsize, tolerance, etc).  At the moment it is a batch process which produces an output file, but there's no reason it couldn't be streamed and be forced to take realtime parameter inputs.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAn early use-case could be for animation.  I am not an animator, but I am astonished at how labour-intensive it seems with every joint and every keyframe needing to be individually moved.  It's like doing artwork pixel-by-pixel before there were any photoshop tools.  \r\n\r\nModelica could be used to quickly generate neat pre-calculated animations of [Rube-Goldberg machines](https://en.wikipedia.org/wiki/Rube_Goldberg_machine) akin to the boardgame [Mousetrap](https://en.wikipedia.org/wiki/Mouse_Trap_(game)).  \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI know this is a highly speculative proposal.  However I don't think it's possible to rule out that it replaces the whole of the physics engine on day.  \r\n\r\nI am writing this down to give a heads-up about this technology to the folks who depend on and are developing the physics engine, because too few people know about it at the moment.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/875/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
