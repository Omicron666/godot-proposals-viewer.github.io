[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2114",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2114/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2114/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2114/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2114",
    "id": 785255600,
    "node_id": "MDU6SXNzdWU3ODUyNTU2MDA=",
    "number": 2114,
    "title": "Add methods to convert an ISO 8601 timestamp to a date dictionary and vice versa",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-13T16:32:36Z",
    "updated_at": "2021-01-13T16:33:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThere's no built-in method to convert [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamps to other date formats supported by Godot (date dictionaries and UNIX timestamps).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAdd `OS.get_iso8601_time_from_datetime()` and `OS.get_datetime_from_iso8601_time()` methods.\r\n\r\nWe already have similar methods to convert a date dictionary to an UNIX timestamp and vice versa.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nThese methods should be added in the OS singleton next to the other date conversion methods.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nIt can be implemented easily using a script:\r\n\r\n```gdscript\r\n## Parses an ISO-8601 date string to a datetime dictionary that can be parsed by Godot.\r\nfunc parse_date(iso_date: String) -> Dictionary:\r\n\tvar date := iso_date.split(\"T\")[0].split(\"-\")\r\n\tvar time := iso_date.split(\"T\")[1].trim_suffix(\"Z\").split(\":\")\r\n\r\n\treturn {\r\n\t\tyear = date[0],\r\n\t\tmonth = date[1],\r\n\t\tday = date[2],\r\n\t\thour = time[0],\r\n\t\tminute = time[1],\r\n\t\tsecond = time[2],\r\n\t}\r\n\r\nfunc _ready() -> void:\r\n    print(parse_date(\"2021-01-11T15:00:00Z\")\r\n```\r\n\r\nHowever, given that most people will need this when they interact with a REST API, I'd argue this should be present in core.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nOther programming languages such as JavaScript already feature this in their standard library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2113",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2113/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2113/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2113/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2113",
    "id": 785167615,
    "node_id": "MDU6SXNzdWU3ODUxNjc2MTU=",
    "number": 2113,
    "title": "Make the Lines in the TextureRegion Dock contrast the Texture's Color",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-13T14:47:29Z",
    "updated_at": "2021-01-13T15:52:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGame Project\r\n\r\n### Describe the problem or limitation you are having in your project\r\nRan into a minor inconvenience while working on a white (`#ffffff`) sprite that I was using in a `NinePatchRect`. While adjusting the Region Rect through the `TextureRegion Dock`, the lines that indicate the cut-off point for the NinePatch completely blend with the sprite itself, making it hard to read and work with. The same goes for the outline.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/104464815-a4f5a100-55b3-11eb-8f41-eef5411ad4e9.png)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nPerhaps it would be better to contrast the lines against the Texture instead. I'm not sure this would look better _(especially on textures with a large amount of different colours)_, but at least it would be clear. Although seeing as this only really happens with extremely white colours, perhaps inverting the colour of the line (or replacing the colour) on those sprites with that colour might be enough.\r\n\r\nI'm not really sure how to deal with the outline. It suffers from the same issues, but it needs to be both readable against the background, and against the sprite itself.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/104467042-28b08d00-55b6-11eb-94b0-234ad51ed3b2.png)\r\n\r\n_contrasting lines of a different colour on the sprite itself_\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nCannot be worked around, and I'd argue this happens fairly frequently, as little UI pieces are often implemented in `#ffffff` , so they can easily be modulated through Godot itself.\r\n\r\nI do get that adding this feature might be harder than it seems, and that the issue can still be worked with by looking at the variables or the lines on the background. However, I saw it fit to open a proposal for it either way. I am also sure this issue is also present in other (Texture editing) parts of the engine. If I find any, I'll post them in the comments below.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nCore: UX issue of a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2113/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2112",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2112/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2112/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2112/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2112",
    "id": 784942170,
    "node_id": "MDU6SXNzdWU3ODQ5NDIxNzA=",
    "number": 2112,
    "title": "Make a visual script box that ' spawns ' objects, with 'GPU' physics or, so . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2021-01-13T09:34:52Z",
    "updated_at": "2021-01-13T13:28:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider game . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI need to make stuff, like a gun or, machine rifle, that ' spits ' out bullets, and I'd like to use a particle system, to do it . . The problem is, particles are limited to, only 'working' each time the ' timer ' runs out, so a particle time, of 4 second, means if I press the button, to spawn bullets, fast . . then, it'll ' pause ' until ' the next four seconds . . alternatively I can write code, that ' spawns ' them, but I was wondering, since the GPU is better, if one could make a node or, code that spawns ' a particle ' ( object ), and runs it on the GPU . . GPUSpawner node or, so on . . I'm not sure, if this would work, and I think it'd need some special built-in methods and, property, to make sure it ' only ' does, what the GPU can do ( compared, to CPU particles ) . . but, this would potentially be a way of spawning massive amounts of particles or, objects, or so . . I need it, so when I pump out bullets, when a button is pressed or, such . . that it spawns as many, and as fast, as I need . . and, has minimum lag, so it's faster, as well . .\r\n\r\nIs this possible, and could this be a new way, of making games run faster, not sure <3\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWell, current particles don't work for stuff like ' bullets ', bec. they can only ' emit ', every time the timer hits the ' life ' time, for 4 seconds, it can ' being a ' spawn, at 4 seconds, 8 seconds, 12 seconds, so on . . but, I need it to spawn, at any, given time, and as FAST as possible, since many things only need GPU processing, CPU particles can do a few things, more, I think, not sure . . well, I was wondering if that might be good, in my case I guess simply coding a ' spawn ' using the normal code wouldn't matter, but supposed I need to spawn 100.000 particles or, objects, could the GPU do that . .\r\n\r\nI just want the game to run as fast, as possible, in real - time . .\r\n\r\nBut, it might be technical also, need to be written, for GDScript, not only visual script, or so . . even if people only spawned, say 10.000 fog particles, doing it via GPU, would still be faster, and over-all be more optimized = faster FPS, I hope, thanks <3 . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWell, a way to instantiate, using the GPU, instead of CPU, or so . . not sure how to code it, be nice if it was just something, that could be done, using GDScript, or visual script . . for stuff that could be run on CPU, like the bullets, it'd may-be still be faster, and give a frame - rate boost, over - all <3\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI can't re-program the engine, total beginner . . :OO . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is better left, to the engine devs, to figure out, was thinking it could work, like the ECTS system, in Unity, that allows 'spawning' of MANY objects, in parallel, or close <3\r\n\r\nThanks . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2111",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2111/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2111/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2111/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2111",
    "id": 784714968,
    "node_id": "MDU6SXNzdWU3ODQ3MTQ5Njg=",
    "number": 2111,
    "title": "Separate ' show grid ' and ' enable snap ' in Visual script . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2021-01-13T01:32:07Z",
    "updated_at": "2021-01-13T08:45:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb Raider game, with epic code and, even epicer beasts and, monsters . . <3 . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIn visual script, it's a bit annoying, when I disable the grid, that snapping also is turned off, and the boxes go sailing away, into the sky or, waters . . :O I was wondering, if in visual script, the ' show grid ' and, ' use snap ' could, not be made into separate icons, or somehow not be, connected, as it would make visual script, even nicer, to use ya ya . .\r\n\r\nMy new visual script theme, for Godot, personal gold, so cool . .\r\n\r\n![Skærmbillede (865)](https://user-images.githubusercontent.com/61069740/104394316-a8067800-5546-11eb-9c61-88dcb53cb768.png)\r\n\r\nNo stress, just fun . . But, now I need the last feature, to be able to turn off ' grid ', but still have snap, please . .\r\n\r\n![Skærmbillede (873)](https://user-images.githubusercontent.com/61069740/104394362-c53b4680-5546-11eb-9f84-573c4859b7b3.png)\r\n\r\n<img width=\"488\" alt=\"Skærmbillede (873)\" src=\"https://user-images.githubusercontent.com/61069740/104394429-e439d880-5546-11eb-8da5-af666a326a80.png\">\r\n\r\nThe LAST thing is, the ' grid ' size ( default 20 ), it would be cool if there was a place, to set that globally, for all visual scripts, right now, even after setting it, when re-opening the same script, it goes back to 20 ( default ), by accident . .\r\n\r\nPlease, fix these issues or, problems, I can't sleep or, think, until it's done, ya ya . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nJust the above, soon, or hurry . . More features, more code, or there riots . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nJust, the above two ' fixes ', to make the user - experience smooth, as silk, on a pillow, that's all . . . <3 :O . . .\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI can't change the engine, as a new user, not yet . . Please, consider . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, this is always difficult to answer, I'm not sure . . <3 <3 . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2109",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2109/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2109/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2109/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2109",
    "id": 784214644,
    "node_id": "MDU6SXNzdWU3ODQyMTQ2NDQ=",
    "number": 2109,
    "title": "Redesign how Undo/Redo works to make it more predictable",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-12T13:01:15Z",
    "updated_at": "2021-01-12T22:36:07Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot\r\n### Describe the problem or limitation you are having in your project\r\n\r\nUndoRedo is rather unfriendly, as it keeps all the history across edited scenes. This forces going back and forth scenes in a confusing way, also clears the history for everything when a scene is closed. \r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe main idea is to implement a per-scene UndoRedo. This has not been done before because some objects in Godot are shared across al scenes (such as resources), so editing them individually can break consistency. It's a difficult problem to solve.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nEach scene will have its own UndoRedo stack. To be able to do this, the following changes need to take part:\r\n\r\n* When editing a shared resource (resource saved on disk), an edition of this specific resource in a scene will trigger other scenes open to lose their undo-redo history up to the point they edit this object (if they didn't edit it, which is most likely the case, nothing is lost). This avoids consistency problems and is friendly enough that most users will not notice (as editing a shared resource from multiple scenes is not a common use case anyway). Additionally If it is known that a certain resource is harmless, we can add a hint to it so the editor knows it needs not to remove history.\r\nIf toggling resources between built-in and shared, you lose undo-redo history (or you lose it in other scenes I suppose).\r\n* Editing a built-in resource from a foreign scene can definitely break history consistency, so this should be blocked. As this can be useful many times (Specially for animation), we can introduce the concept of resource inheritance. This is similar to scene inheritance but for resources. The editor would just make a copy of this resource in the local scene.\r\n* Project settings or anything that edits the global settings, or editor settings, needs its own undo-redo separate from scenes.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is editor core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2109/reactions",
      "total_count": 52,
      "+1": 40,
      "-1": 0,
      "laugh": 0,
      "hooray": 6,
      "confused": 0,
      "heart": 0,
      "rocket": 6,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2108",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2108/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2108/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2108/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2108",
    "id": 784156073,
    "node_id": "MDU6SXNzdWU3ODQxNTYwNzM=",
    "number": 2108,
    "title": "Make an optional top - bar with ' large ' icons in the editor . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-12T11:33:09Z",
    "updated_at": "2021-01-12T13:28:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider game, with bullets and, many monsters <3\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI've been making my own 'custom' look editor, for making visual script, and been trying, to make the editor look, like a classic RPG - action game interface, like this . .\r\n<img width=\"960\" alt=\"2021-01-12 1217\" src=\"https://user-images.githubusercontent.com/61069740/104308147-823e8c00-54d0-11eb-9b17-e4cac382b67d.png\">\r\n\r\nSo, making a game, ' feels ' like PLAYING a game, a classic RPG or, an action - adventure game . . So far, I've got this, and am VERY happy, with how this is even possible, also a nice, classic look, for visual scripters, no hassle, or so, very clean and, neat . .\r\n![Skærmbillede (860)](https://user-images.githubusercontent.com/61069740/104308242-a69a6880-54d0-11eb-83e4-b4df42618b20.png)\r\n\r\nBut, there's one thing missing, so it feels like PLAYING a game, to MAKE it, and that's a TOP row, of icons, on the top bar >>\r\n<img width=\"1457\" alt=\"Skærmbillede (860)\" src=\"https://user-images.githubusercontent.com/61069740/104308409-e5c8b980-54d0-11eb-9b0f-d83eececf38e.png\">\r\n\r\nSo, the idea is, make an OPTION, in the theme settings, to replace the ' 2D, 3D, Script, Assetlib ', with some cool, new icons, for Godot 4 ya ya . . Like, this maybe, something a bit bigger, as an OPTION . .\r\n<img width=\"1457\" alt=\"Skærmbillede (864)\" src=\"https://user-images.githubusercontent.com/61069740/104308770-77382b80-54d1-11eb-8b38-d8959e476cc4.png\">\r\n\r\nBut, with some Godot specific icons, something really nice . .\r\n\r\nMaybe, like this . .>>\r\n![2021-01-12 1227](https://user-images.githubusercontent.com/61069740/104308892-9f278f00-54d1-11eb-8e0f-671af9d95ce1.png)\r\n\r\nBecause, in many amazing games, there is a ' top ' row of icons, that's why I need it, or ask . . . Like, for character screen, level-up screen, so on, and it's the last detail, that'd make Godot amazing and, just amazing, and it could be a nice ' look ' update, to Godot 4, really hope you can do it, so it's an OPTION in theme settings, and the engine looks pro, really inviting, especially to gamers, geeks and, code - monsters or, - beasts <3\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nIt's just something, that'd complete my user-experience of Godot, and make it ' just ' right, the ' last ' straw or, such . . But, I can't design icons, maybe someone could make a concept or, so, and not sure, but if one could add CUSTOM icons, like short cuts to folders, view-port configurations, and render ( in wire-frame, overlay, so on ), or maybe something, I had not thought of, well it'd make Godot shine, like a star, so, please, really, really like this, to make it ' Perfect ', for me <3 Thanks . . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nMaybe a new user-interface, at the top, or an option, as a test feature, in the menu settings, to make Godot just, stunning, world - class . . it already is, but we need more, of course <3 Thanks . .\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI can't do this, as noob, or beginner, at all . . \r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, it would give the amazing Godot 4 a new visual look, set it apart, visually, from older versions, maybe the icons could be small, medium or, large, so different resolution users, could enjoy them, really make the engine pop and, sweat, ya ya . .\r\n\r\nThanks, for your time, need I say, can't wait, can't wait . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2108/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2107",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2107/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2107/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2107/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2107",
    "id": 783878960,
    "node_id": "MDU6SXNzdWU3ODM4Nzg5NjA=",
    "number": 2107,
    "title": "Add to texture import settings \"Pixel Format\" option",
    "user": {
      "login": "Summersay415",
      "id": 71974498,
      "node_id": "MDQ6VXNlcjcxOTc0NDk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/71974498?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Summersay415",
      "html_url": "https://github.com/Summersay415",
      "followers_url": "https://api.github.com/users/Summersay415/followers",
      "following_url": "https://api.github.com/users/Summersay415/following{/other_user}",
      "gists_url": "https://api.github.com/users/Summersay415/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Summersay415/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Summersay415/subscriptions",
      "organizations_url": "https://api.github.com/users/Summersay415/orgs",
      "repos_url": "https://api.github.com/users/Summersay415/repos",
      "events_url": "https://api.github.com/users/Summersay415/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Summersay415/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-01-12T03:34:15Z",
    "updated_at": "2021-01-12T16:54:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAny\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen I am importing textures I can't select pixel format(e.g. \"L8, L8A8, RGB24, RGBA32, RGBA4444, RGBA5551, DXT1-DXT5\")\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd to texture import settings \"Pixel Format\" option with values \"L8, L8A8, RGB24, RGBA32, RGBA4444, RGBA5551, DXT1-DXT5\" and add correspond import.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAdd to texture import settings \"Pixel Format\" option with values \"L8, L8A8, RGB24, RGBA32, RGBA4444, RGBA5551, DXT1-DXT5\" and add correspond import.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis is import function and cannot be realized with script.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is import function.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2106",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2106/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2106/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2106/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2106",
    "id": 783866258,
    "node_id": "MDU6SXNzdWU3ODM4NjYyNTg=",
    "number": 2106,
    "title": "Expose the ModeFlags used to open a File",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-12T03:00:50Z",
    "updated_at": "2021-01-12T13:41:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nBuilding a plugin that wraps File.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThere is no way to query the `ModeFlags` (such as Read, Write etc) that were used to open a `File`. Whilst this probably isn't much of a problem in games where you control the File's full lifecycle, it becomes a problem if you are building a library that either extends or makes use of File objects. You have no way to tell if you can make a read or write without trying it and checking the error - and if it doesn't error, you just moved the cursor.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThis can be fixed by either exposing a `mode_flags` property on the `File` object, or perhaps more useful would be `can_read` and `can_write` properties instead. There probably isn't much extra value in knowing the file was opened to truncate.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo, it cannot be worked around.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nFile IO is part of core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2106/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2105",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2105/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2105/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2105/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2105",
    "id": 783566743,
    "node_id": "MDU6SXNzdWU3ODM1NjY3NDM=",
    "number": 2105,
    "title": "Implement `script action`/ `script command` system",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-01-11T17:37:29Z",
    "updated_at": "2021-01-12T18:55:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nplugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\n[`actions` mentioned in this proposal should not be confused with `Input actions`]\r\n\r\n---\r\n\r\nGodot plugin system is quite flexible, but in some cases the use of plugins may not be entirely appropriate.\r\n\r\n- I often want to create commands, which do one simple thing: select some nodes, open some `ProjectSettings` page, etc.\r\nYou've probably seen similar commands in `EditorSettings`-`Shortcuts`\r\n\r\n- I often want to have / create lightweight actions (instead of plugins, which are nodes). This is important to me as I am going to have hundreds of these actions in the project.\r\n\r\n- I would like these actions to be implemented as scripts (eg Gdscript) to achieve a great balance of flexibility, usability and simplicity.\r\n\r\n- I would like to be able to assign shortcuts to these actions/commands (both using the editor and plugins)\r\n\r\n- I would also like to be able to create toolbars (sets of buttons) and assign actions to their buttons (both using the editor and plugins)\r\n\r\n- I would like to call/run actions from plugins\r\n\r\n\r\n- I would like such actions / commands to be the foundation for creating other systems and tools, including UI tools, macros system etc\r\n\r\n- I would like to be able to create such actions from the editor and easily edit them like a normal script\r\n\r\n- [UPD] I would like to have `command palette` that could include such script actions to run them quickly and easily\r\n\r\n- I would not want to mess with `_enter_tree()` / `_exit_tree()` and many other `EditorPlugin` virtual methods (which of course are useful for making plugins);\r\nI also do not need a system for activating / deactivating such actions/commands, instead one \"main\" method is enough, for example `_run()`.\r\n\r\n\r\n- Finally, I would not want to create my own work-rounds, my own system of such script actions/commands:\r\n1) it would take quite long time\r\n2) even more time required to do that efficiently + conveniently\r\n3) is not a unified/centralized solution, which significantly limits the number of users with whom you can share these script commands.\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nImplementing `script actions` system would greatly solve the problems\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n ---\r\n\r\n**File:**\r\n\r\nEach action/command is a script `some_script.gd` + config file `some_script.cfg`\r\nThe config file contains the following information:\r\n- Action author\r\n- Description of the action\r\n- Action version\r\n\r\nConfig file could be next to the action file (same as config file for plugins)\r\n\r\nActions could be stored in the `res://script_actions` folder.\r\n\r\nIn order to avoid collision of script names of different authors / different versions, subfolders could be resolved.\r\n\r\n---\r\n\r\n**Editor:**\r\nIn `ProjectSettings` we could have a `Script Actions` tab with a list of all script actions in the project.\r\n\r\n![script_actions](https://user-images.githubusercontent.com/16458555/104211093-7661b400-5455-11eb-8e25-c31943a3e1e4.png)\r\n\r\n\r\nButtons:\r\n`Run` - runs the selected action\r\n`Edit` - edits the selected action in the ScriptEditor\r\n`Refresh` - rescans the actions folder (`res://script_actions`).\r\n`Create` is just a convenient way to create an action + add a config file next to it (as `Create a Plugin` does for example)\r\n\r\nButton to edit action shortcut\r\nButton to clear action shortcut\r\nSearch field (by command name)\r\n\r\n---\r\n~~**New Type: ScriptAction**~~ (see UPD)\r\n\r\nIt could have some `EditorPlugin` methods like `get_editor_interface()` \r\n\r\nWhat should `ScriptAction` inherit?\r\nI believe it should not inherit `Node`, instead, something more lightweight should be chosen as the parent class, for example `Reference`\r\n\r\nThe main method is `_run ():`\r\nThe virtual method `_run()` should be overriten by the script creator.\r\n\r\nProperties / signals?\r\nI don't see the need to have any properties / signals yet\r\n\r\nUPD: \r\nMaybe a better option would be using existing `EditorScript`.\r\n\r\n---\r\n\r\n**Get action by name vs by path vs persistent(?) id**\r\n\r\nAccess to the action from the plugin using the path (like `run_action(\"res://script_actions/some_action\")` might be ok for now.\r\nWhen changing the path, for example renaming a file, you just need to refresh the actions (press `Refresh` button).\r\n\r\nUPD:\r\n`run_action(\"res://script_actions/x\")` could be shortened to\r\n`run_action(\"x\")`\r\nand\r\n`run_action(\"res://script_actions/some_folder/x\")` to\r\n`run_action(\"some_folder/x\")`\r\n\r\n---\r\n\r\n**New plugin methods:**\r\n`EditorPlugin.run_action (path)`\r\n`EditorPlugin.refresh_actions ()`\r\n\r\n---\r\n\r\n**Assigning shortcuts.**\r\nWe could assign shortcuts to script actions, just like we do in Editor Shortcuts.\r\n\r\n---\r\n\r\n**Combining with Editor Shortcuts**\r\n- I don't think it's worth having in EditorSettings as this action system is not \"global\"\r\n- on the other hand, I see the convenience of having Editor actions next to script actions (for example nearby, but in different tabs).\r\n\r\n---\r\n\r\n**Not paramount for now**, a new proposal can be created for each one:\r\n- Installing Actions from AssetLib (and sharing with Godot comunity)\r\n- Calling actions using toolbars buttons (certainly would be cool).\r\n- Macros system (creating combinations of several actions etc.).\r\n- [UPD] Integrating script actions with Command Palette like #1444\r\n\r\n---\r\n\r\n**Conclusion** (kind of):\r\nWe could have a pretty promising and friendly action system based on which it's easy to create other useful systems/tools\r\nMaking tools could be easier and more intuitive.\r\nIt is certainly not a replacement for plugins, but a very nice addition to them.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nno it can't\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nsee above: (1), (2), (3)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2104",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2104/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2104/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2104/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2104",
    "id": 782857352,
    "node_id": "MDU6SXNzdWU3ODI4NTczNTI=",
    "number": 2104,
    "title": "Add `EditorInterface` `plugin_enabled` and `plugin_disabled` signals",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-10T16:47:05Z",
    "updated_at": "2021-01-11T21:59:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'm going to write a series of plugins that do something when a certain plugin X becomes active or inactive.\r\n\r\n- I could make work of plugins, where one plugin depends on another, safer.\r\nFor example, plugin `Y`, which depends on plugin `X`, might refuse to work once the user disables plugin `X`.\r\n\r\n- Another scenario would be to do something when any plugin is activated/deactivated:\r\n\"auto A when enabling a plugin\"\r\n\"auto B when disabling a plugin\"\r\netc\r\n\r\nThe problem is I can't seem to do it in an efficient way.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdding `plugin_enabled` and `plugin_disabled` signals would solve the problem.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscripts\r\nplugin_name:String plugin_enabled\r\nplugin_name:String plugin_disabled\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis would be inefficient\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThese signals could be used by the engine itself as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2103",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2103/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2103/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2103/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2103",
    "id": 782781188,
    "node_id": "MDU6SXNzdWU3ODI3ODExODg=",
    "number": 2103,
    "title": "Warn when the user is trying to disable an \"important\" plugin",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-01-10T09:43:16Z",
    "updated_at": "2021-01-11T20:52:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCurrently any plugin can be disabled at any time.\r\nThe problem is there are plugins that shouldn't be deactivated in most cases/ normal scenarios.\r\nAnd disabling such plugins can lead to unexpected consequences.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nShowing a warning/prompt popup when the user tries to disable the plugin would solve the problem in most cases.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nWhen the user presses `Enable` checkbox in `PluginsSettings` window (`ProjectSettings`->`Plugins`), a `ConfirmationDialog` warning should be popped up, with text like \r\n```\r\nThis plugin shouldn't be disabled. Disable anyway?\r\n```\r\nand 2 buttons: `Cancel` and `Disable`/`OK`\r\n\r\n![disable_plug](https://user-images.githubusercontent.com/16458555/104118880-d4a36f80-534d-11eb-94cf-f9edbd9aaccc.png)\r\n\r\n\r\nThis should happen only for plugins that are listed in ProjectSettings (`plugins` category, `warn_when_disabling` property [I think some better  property name should be chosen]).\r\n\r\nAdditionally, the warning/prompt dialog message could be set (customized) by plugin developer. Maybe this can be set in `ProjectSettings` as well.\r\n\r\nPS:\r\nI have concerns that this pop-up may still be not enough, but I have not yet come up with a better option.\r\nThis will at least partially prevent from plugin accidental deactivation and inform about the possible consequences of disabling the plugin.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nPlugin system related\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it makes no sense to implement this using plugins, because it is unreliable (a plugin that implements this could be easily disabled etc)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2102",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2102/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2102/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2102/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2102",
    "id": 782768588,
    "node_id": "MDU6SXNzdWU3ODI3Njg1ODg=",
    "number": 2102,
    "title": "Add an option to auto-activate a plugin on project startup",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-10T08:20:13Z",
    "updated_at": "2021-01-11T02:25:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCurrently any plugin can be disabled.\r\nAnd when the Godot Editor is reloaded, the disabled plugin remains disabled.\r\n\r\nThis can cause some problems/inconveniences:\r\n- there are plugins that should always be activated when the Editor starts up.\r\nThis would be important/critical, for example, if the plugin maintains a history of something, for example, a sequence of changes for a custom undo history, or to roll back to a recent state, etc.\r\n- there are plugins that you just would like to be enable automatically, without having to manually enable the plugin if the plugin was disabled during a recent session.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAn ability to auto-activate a plugin on a project startup would solve the problem.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nA list (`PoolStringArray`) of plugins to autoactivate on startup could be stored in `ProjectSettings`.\r\nThen the Editor starts up, it could activate all plugins in that list.\r\n\r\nThere is `EditorPlugins` `enabled` property, so `startup` property could be added there.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nPlugin system related\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it makes no sense to implement this using plugins, because it is unreliable\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2101",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2101/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2101/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2101/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2101",
    "id": 782760943,
    "node_id": "MDU6SXNzdWU3ODI3NjA5NDM=",
    "number": 2101,
    "title": "Add `EditorPlugin` `get_bottom_panel_recent_item()` method",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-10T07:23:21Z",
    "updated_at": "2021-01-10T09:21:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI'm creating a plugin that toggle shows/hides Godot editor `Bottom Panel` (panel with `Output`, `Debugger` buttons etc).\r\nThat is I want to hide the panel if it is visible (so that only the buttons are visible - exactly what `EditorPlugin.hide_botton_panel()` method does) and show it back if it is hidden\r\n\r\n### Describe the problem or limitation you are having in your project\r\nSo I need to do one of two actions, depending on `BottomPanel` current state - let's name them `hide_panel()` and `show_panel()`\r\nThere's no any problem with `hide_panel()` - I can simply use `EditorPlugin.hide_botton_panel()`.\r\nBut for showing the panel I only have `make_bottom_panel_item_visible(control)`\r\nas you can see it has `control` parameter but there is not any method to get BottomPanel controls.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nadding `get_bottom_panel_recent_item()` method could overcome the problem.\r\n\r\n[This would allow me to make the plugin (assuming [this](https://github.com/godotengine/godot-proposals/issues/2100) is also implemented)]\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nControl get_bottom_panel_recent_item()\r\nReturns control of recently shown/touched BottomPanel item.\r\n```\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNow this can be done using ugly hacks (getting the BottomPanel control in Editor tree, etc.).\r\nI would not recommend using these work rounds.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it makes more sense to have it in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2100",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2100/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2100/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2100/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2100",
    "id": 782757270,
    "node_id": "MDU6SXNzdWU3ODI3NTcyNzA=",
    "number": 2100,
    "title": "Add `EditorPlugin` `is_bottom_panel_visible()` method",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-01-10T06:53:40Z",
    "updated_at": "2021-01-12T04:12:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI'm creating a plugin that toggle shows/hides Godot editor `Bottom Panel` (panel with `Output`, `Debugger` buttons etc).\r\nThat is I want to hide the panel if it is visible (so that only the buttons are visible - exactly what `EditorPlugin.hide_bottom_panel()` method does) and show it back if it is hidden\r\n\r\n### Describe the problem or limitation you are having in your project\r\nOne of the methods I am missing is checking if the `BottomPannel` is currently hidden or not.\r\nThere are only `EditorPlugin` `hide_bottom_panel()` and `make_bottom_panel_item_visible(control)`.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdding `is_bottom_panel_visible()` method would solve the problem\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nbool is_bottom_panel_visible()\r\n```\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNow this can be done using ugly hacks (getting the BottomPanel control in Editor tree, etc.).\r\nI would not recommend using these work rounds.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it makes more sense to have it in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2099",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2099/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2099/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2099/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2099",
    "id": 782753696,
    "node_id": "MDU6SXNzdWU3ODI3NTM2OTY=",
    "number": 2099,
    "title": "Scroll to change number values in inspector",
    "user": {
      "login": "dazoe",
      "id": 989787,
      "node_id": "MDQ6VXNlcjk4OTc4Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/989787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dazoe",
      "html_url": "https://github.com/dazoe",
      "followers_url": "https://api.github.com/users/dazoe/followers",
      "following_url": "https://api.github.com/users/dazoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/dazoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dazoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dazoe/subscriptions",
      "organizations_url": "https://api.github.com/users/dazoe/orgs",
      "repos_url": "https://api.github.com/users/dazoe/repos",
      "events_url": "https://api.github.com/users/dazoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dazoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-10T06:22:11Z",
    "updated_at": "2021-01-10T13:05:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n  Learning godot following a tutorial creating a 2d ARPG game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n  Editing numbers in the inspector. Changing numbers via mouse drag is too fast for changing a frame number on an animation. holding shift to slow it down is still to fast to stop on a particular frame.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n  My feature request would be to add the ability to use the scroll wheel to change the numbers.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n  when mouse over number edit box and there is a scroll up / down event change number up or down\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n  This feature shouldn't need a work around. However there may be an issue when there are many properties in the inspector and you might be trying to use the mouse to scroll the whole inspector up/down and the mouse may end up inside a number field by accident so will need to have code to enable this feature only after the mouse explicitly moved into the field.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n  I'm new to godot and don't think an add-on can do this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2099/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2098",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2098/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2098/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2098/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2098",
    "id": 782753154,
    "node_id": "MDU6SXNzdWU3ODI3NTMxNTQ=",
    "number": 2098,
    "title": "Add ability to make a script read-only in ScriptEditor",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-10T06:17:26Z",
    "updated_at": "2021-01-10T09:24:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIn almost every project I have third-party plugins, the scripts of which I would never (or very rarely) want to change.\r\nI also have a set of my scripts/plugins, which I also would not want to modify in the current project (or modify very rarely).\r\nIt was unpleasant for me when I accidentally changed the scripts, in fact it is quite easy to do - you could be kind of distracted, either press some keys mechanically or in a hurry.\r\n\r\nUnfortunately, currently no one is immune from this.\r\n\r\nOn the one hand, the ability to change any script is useful if you want to customize the script and know what you are doing.\r\nBut on the other hand, you can accidentally modify the script, which can lead to unpredictable negative consequences.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAbility to make a script read-only could solve this problem:\r\n\r\nEveryone could specify scripts that should not be editable in the editor.\r\nSuch scripts would still be viewable.\r\nI think it would be convenient to have it as an option - that is, at any time you could set the script as readonly, or vice versa, make it editable again.\r\n\r\nI find it quite flexible, as based on this feature, tools and plugins could be implemented that make multiple scripts read-only at once and/or do it automatically:\r\n- Any script added from AssetLib could be read-only by default.\r\n- Plugins that set read-only for scripts on a specific basis, for example, for all scripts in a specific folder, could be created, etc.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n- A `PoolStringArray` with readonly script paths could be stored as a `ProjectSettings` property.\r\n- When opening a script in the `ScriptEditor`, Godot could check if the script is in the readonly array, and if so, the ScriptEditor would be set to `readonly`.\r\n- It should also make it unavailable to edit the code by clicking on the Edit menu items such as:\r\n`Undo`, `Redo`, `Cut`, `Paste` etc.\r\n- But I think it would be useful to `Select` and `Copy` the code.\r\n- For toggling on/off readonly mode from Godot Editor, an `Edit->Read-only` option/checkbox could be added in ScriptEditor menu and maybe in ScriptEditor right click context menu:\r\n\r\n![readonly menu checked](https://user-images.githubusercontent.com/16458555/104115703-de1fde00-5333-11eb-8682-96d55bcec602.png)\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nsee below\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think this could be implemented as a plugin, but\r\n- This would require some rather non-trivial and ugly hacks with ScriptEditor\r\n- I hope this would be used often - for example every time a new plugin is installed from the AssetLib Godot would automatically add all addon scripts to the readonly scripts list by default)\r\nI believe this could be used by the engine in some other cases as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2098/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2097",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2097/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2097/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2097/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2097",
    "id": 782714328,
    "node_id": "MDU6SXNzdWU3ODI3MTQzMjg=",
    "number": 2097,
    "title": "Create feature development surveys according to user need / priority",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2021-01-10T00:38:16Z",
    "updated_at": "2021-01-10T13:34:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSome ideas for our Godot community.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen I go in to observe the PR that exist to find out what the community wants and what direction Godot will take or to personally create one in the proposals repository, I see tons of PR and I feel a bit disoriented in a sea of ideas.\r\n\r\nAs a result I don't see clearly what people want in a general sense, what core developers think about it and what will happen with Godot in both the near future and in a long term, which worries me because it is my main work tool.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI think that the PR system is great and extremely active, but it does not allow to perceive clearly or on a large scale what is happening or what decisions are made. I love Godot's polls because they clearly show what the community does and wants. It is also reflected in quantity and in percentages which is wonderful.\r\n\r\nI propose to create surveys that remain open until a new version begins to develop. That the number of users, the number of features on request or the number of requests for the same feature is constantly increasing. Each user could create a new feature request or increase the priority of an existing one. These features could be delimited by fields such as PR, rendering, core, editor, etc. Or could be defined for major or minor versions.\r\n\r\nAnd the results of the surveys would show what the people really want and the priority / need of the community with numbers and percentages. Then both the community and the core developers can clearly see what is happening, what is needed, what is a priority and for how many. For the development of each version, a number x of features to be implemented could be defined, due to complexity, time or availability of developers, etc.\r\n\r\nThese are simply ideas to discuss as a starting point, if this PR is considered. :smiley: \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIt could be a web page, it could be a survey like the previous ones, it could be similar to the PR repository. It is subject to discussion.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt is intended as something apart of the editor.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nNeither part of the core nor as an asset.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2096",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2096/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2096/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2096/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2096",
    "id": 782700024,
    "node_id": "MDU6SXNzdWU3ODI3MDAwMjQ=",
    "number": 2096,
    "title": "Add a debugging button for toggling network connection in the Editor",
    "user": {
      "login": "icolwell",
      "id": 16585141,
      "node_id": "MDQ6VXNlcjE2NTg1MTQx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16585141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/icolwell",
      "html_url": "https://github.com/icolwell",
      "followers_url": "https://api.github.com/users/icolwell/followers",
      "following_url": "https://api.github.com/users/icolwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/icolwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/icolwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/icolwell/subscriptions",
      "organizations_url": "https://api.github.com/users/icolwell/orgs",
      "repos_url": "https://api.github.com/users/icolwell/repos",
      "events_url": "https://api.github.com/users/icolwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/icolwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-09T22:50:57Z",
    "updated_at": "2021-01-10T00:02:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nOnline multiplayer game with clients connecting to a server.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nIt is difficult to simulate loss of internet or intermittent connectivity between client and server.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe editor has an existing \"Network Profiler\" tab in the debugger which is helpful for viewing RPCs. It would be nice to include a toggle button on this tab that lets the user \"disconnect\" networking to the running game/app as they wish. \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nSimply a toggle button that enables/disables or allows/blocks networking on the running app.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo, external tools could possibly be used (I'm not aware of any at the moment), but this feature would be a huge gain in convenience compared to using external tools.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt relates to the core editor functionality.\r\n\r\n### Additional Notes\r\n\r\nThis was originally mentioned by https://github.com/godotengine/godot/issues/28582. That issue mentions other features like packet lag and loss rate which would also be great, but I think a simple network toggle is hugely useful and the first step in that direction.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2096/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2094",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2094/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2094/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2094/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2094",
    "id": 782670361,
    "node_id": "MDU6SXNzdWU3ODI2NzAzNjE=",
    "number": 2094,
    "title": "Add real-time fluid simulation",
    "user": {
      "login": "NHodgesVFX",
      "id": 11403345,
      "node_id": "MDQ6VXNlcjExNDAzMzQ1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11403345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NHodgesVFX",
      "html_url": "https://github.com/NHodgesVFX",
      "followers_url": "https://api.github.com/users/NHodgesVFX/followers",
      "following_url": "https://api.github.com/users/NHodgesVFX/following{/other_user}",
      "gists_url": "https://api.github.com/users/NHodgesVFX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NHodgesVFX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NHodgesVFX/subscriptions",
      "organizations_url": "https://api.github.com/users/NHodgesVFX/orgs",
      "repos_url": "https://api.github.com/users/NHodgesVFX/repos",
      "events_url": "https://api.github.com/users/NHodgesVFX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NHodgesVFX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-01-09T19:27:16Z",
    "updated_at": "2021-01-12T12:39:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n3rd person platformer thingy / realtime vfx for portfolio\r\n### Describe the problem or limitation you are having in your project\r\nCurrently it is possible to fake fluid using traditional techniques but other engines are rapidly advancing Realtime simulations as well. Would be great to have it available in Godot as well\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nRealtime fluid simulation is not impractical for games on modern high-end hardware provided the scale of the effect is limited. It would not be possible to simulate a whole ocean or lake for example but its reasonable to simulate splashing, pouring effects, filling a small tub of water, or even using this simulation to advect particles. \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n**Liquid:**\r\nCompute shaders (GPU) are the way to go when doing this. You can also do it cpu side but this really restricts particle counts and visual fidelity. SPH or PBF seems to be the most popular fluid simulation method although I have seen FLIP once as well. \r\n\r\nAlthough 3d is only available to high-end platforms 2d simulation can be done on low/medium end platforms. for 2d see pixeljunk shooter ultimate\r\n\r\nI mentioned this to reduz about adding sph or pbf to the particle simulator in godot 4 but he preferred it being its own node. Im fine with it being its own node as well. Godot 4 particles and SDF collisions have gotten us halfway to a liquid simulator already now all that needs to be done is SPH/PBF and rendering it.\r\n\r\n**Smoke:**\r\n Smoke has a really cool advantage in that it can be used at a very low resolution to advect particles or can be done in 2d to save compute costs. When used at a low res or in 2d smoke can be used even on low-end platforms like mobile. Smoke can also be done in 3d at a low-res then upscaled with noise for better performance. Smoke simulators tend to be a grid or voxel based\r\n\r\nBoth can work in 2d but smoke can be simulated in 2d with extra passes to make it look 3D so that it can be used convincingly in a 3d world https://twitter.com/TheMirzaBeig/status/1341897921831305217 (This one was baked to a texture first, more to show the rendering concept)\r\n\r\n**Some examples**\r\n**In the browser**\r\nSome of these run slow because they are cpu based in a browser native gpu is much faster.\r\n\r\nhttps://experiments.withgoogle.com/search?q=fluid\r\nhttps://paveldogreat.github.io/WebGL-Fluid-Simulation/\r\nhttps://haxiomic.github.io/GPU-Fluid-Experiments/html5/\r\nhttps://magnum.graphics/showcase/fluidsimulation2d/\r\nhttps://magnum.graphics/showcase/fluidsimulation3d/\r\n\r\n**Liquid:**\r\n  https://wickedengine.net/2018/05/21/scalabe-gpu-fluid-simulation/\r\n  https://www.youtube.com/watch?v=GoD2ZC8-Wqk\r\n  Nvidia FLEX (C++, UE4, Unity, and 3rd party godot support by @AndreaCatania  but its not not maintained/ Cant find the repo anymore?)\r\n\r\n  https://assetstore.unity.com/packages/tools/physics/obi-fluid-63067\r\n  http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.443.6926&rep=rep1&type=pdf\r\n  http://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf\r\n https://www.gdcvault.com/play/1012447/Go-With-the-Flow-Fluid\r\nhttps://www.gamasutra.com/blogs/RobWare/20151026/257309/Optimising_PixelJunk_Shooter_and_giving_it_the_Ultimate_look.php\r\n**Smoke:**\r\n  https://www.unrealengine.com/marketplace/en-US/product/fluidninja-vfx-tools\r\n  https://play.google.com/store/apps/details?id=games.paveldogreat.fluidsimfree&hl=en_US&gl=US\r\n  http://graphics.cs.cmu.edu/nsp/course/15-464/Spring11/papers/StamFluidforGames.pdf\r\n  https://developer.nvidia.com/nvidia-flow\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nProbably not this most likely will require modifying the engine is someway. There might be enough of the render pipeline exposed that it could be an addon though.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2094/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2093",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2093/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2093/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2093/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2093",
    "id": 782599473,
    "node_id": "MDU6SXNzdWU3ODI1OTk0NzM=",
    "number": 2093,
    "title": "Prefix C++ engine defines with `GODOT_`",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2587730880,
        "node_id": "MDU6TGFiZWwyNTg3NzMwODgw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:codestyle",
        "name": "topic:codestyle",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-01-09T12:36:48Z",
    "updated_at": "2021-01-09T21:11:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nDevelopers and contributors are sometimes confused on which defines come from where.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nPrefix all Godot-added defines such as `TOOLS_ENABLED` or `WINDOWS_ENABLED` with `GODOT_`. These would become `GODOT_TOOLS_ENABLED` and `GODOT_WINDOWS_ENABLED` respectively.\r\n\r\nThis has two upsides:\r\n\r\n- Makes it obvious whether a define is set by Godot or a third-party library.\r\n- Prevents conflicts with third-party libraries.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nRename all the defilns added in the SCons files to have a `GODOT_` prefix.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo, as this is core C++ buildsystem functionality.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core C++ buildsystem functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2093/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2092",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2092/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2092/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2092/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2092",
    "id": 782584044,
    "node_id": "MDU6SXNzdWU3ODI1ODQwNDQ=",
    "number": 2092,
    "title": "Rename properties for Color()",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2021-01-09T11:03:17Z",
    "updated_at": "2021-01-10T20:00:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\nThe Color() method has a bunch of properties which are all one single character:\r\nhttps://docs.godotengine.org/en/latest/classes/class_color.html\r\n\r\nThis is *terrible*. You shouldn't do this in personal code; you absolutely shouldn't do it in a public API except where there's unanimous understanding (i.e.: x, y for Vectors).\r\n\r\nWorse it's not even being consistent in its use of them. \"b\" means blue as a property; I'm guessing it doesn't mean that in `linear_interpolate(b,t)`?\r\n\r\nA user should be able to glance at their code and instantly know what it does, not wonder what `Color.v` represents.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nProperties with descriptive names. This includes in the methods (`linear_interpolate(b,t)`; b and t == ?)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```\r\ngreen\r\nblue\r\nred\r\nalpha\r\n\r\netc...\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2092/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 6,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2091",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2091/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2091/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2091/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2091",
    "id": 782572491,
    "node_id": "MDU6SXNzdWU3ODI1NzI0OTE=",
    "number": 2091,
    "title": "Separate user and third party plugins",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-01-09T09:43:55Z",
    "updated_at": "2021-01-10T09:30:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCurrently all plugins, whether user created or added from the asset lib, are installed in the addons folder.\r\n\r\nProblems:\r\n1) It's not possible to determine which plugins are third-party, and which are user ones from outside (for example, from a plugin/script) in order to do something with them\r\n\r\neg:\r\n\r\n- a plugin could add a checkbox in the `FileSystem` dock that would hide the third-party addons folder\r\nthis way the user could not accidentally move files there, etc.\r\n\r\n- a plugin could set a different icon/color for all third party scripts in the script list so that the user can more easily distinguish and not confuse scripts\r\n\r\n- a plugin could (optionally) set `readonly` for third-party scripts in the code editor, so third-party scripts would not be available.\r\nThis would prevent accidental modification of third party scripts by the user in Godot's built-in script editor.\r\n\r\n- a plugin could prohibit opening third-party scripts in the built-in script editor.\r\n\r\n- a plugin could create a separate tab to display a list of third-party scripts in the built-in script editor\r\n\r\netc.\r\n\r\n\r\n2) another problem is cluttering the user workspace with third-party scripts\r\nIt becomes more difficult for the user to find the folder with his plugin in the addons folder.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nSeparating user and third party plugins/addons seems logical to solve these problems.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nWe could have two folders:\r\n(a)\r\n`res://addons` - for user addons\r\n`res://third party addons` - for third party addons\r\n\r\n`third party addons` looks somewhat lengthy, so a different name might be chosen.\r\n\r\nor\r\n(b)\r\n`res://addons` - for third party addons\r\n`res://user addons` - for user addons\r\n\r\n\r\nAnother option is:\r\n(c)\r\n`res://addons` - for third-party addons\r\n`res://addons/user addons` - for user addons\r\n\r\nor vice versa:\r\n(d)\r\n`res://addons` - for custom addons\r\n`res://addons/third party` - for third party addons\r\n\r\nFinally, there might be `user` and `third party` subfolders in the `addons` folder:\r\n(e)\r\n`res://addons/user` - for custom addons\r\n`res://addons/third party` - for third party addons\r\n\r\n---\r\nAddons from `AssetLib` would be installed in `third-party addons` folder;\r\n\r\n`Create a Plugin` dialog should (at least by default) create plugins in `user addons` and so on\r\n\r\n---\r\nI'd like to note that using paths is not the only way to separate plugins into custom and third party: for this, for example, a config could be used (`plugin.cfg` could have information about whether the plugin is custom or third-party), but I think this would not solve problem (2).\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nplugin structure related\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nplugin structure related",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2090",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2090/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2090/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2090/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2090",
    "id": 782496355,
    "node_id": "MDU6SXNzdWU3ODI0OTYzNTU=",
    "number": 2090,
    "title": "Prohibit creating a plugin without specifying a subfolder",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-09T02:44:18Z",
    "updated_at": "2021-01-09T12:14:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot Editor plugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nWhen creating a plugin (using the \"Create a Plugin\" dialog), you can omit the subfolder. This means the plugin script file and config file will be added directly to the addons folder\r\n\r\nProblems:\r\n- the main problem imo is that adding a new plugin without specifying a subfolder will replace the config file of a previously created plugin, and as a result the previously created plugin will not be available.\r\n- even if the \"problem\" with the config is solved (for example, the config file will be named the same as the plugin file and thus it will be possible to have several plugins in one folder directly), then I still find such a system very inconvenient, since you cannot guarantee the uniqueness of the files names, it is difficult to determine which files belong to which plugin, and so on.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nPreventing a plugin creation without specifying a plugin subfolder would solve the problem.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n![create_a_plugin_required_subfolder](https://user-images.githubusercontent.com/16458555/104080819-354a8380-524c-11eb-8abe-dc25b9e4a3a7.png)\r\n\"Create\" button should be disabled until subfolder field specified.\r\nAlso Godot could ignore plugins/configs created directly in addons (`res://addons/plug.cfg`)\r\n\r\n\r\nFor better UX the fields to be filled could be highlighted:\r\n`plugin name`, `subfolder`, `script name`\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nplugin system related\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nplugin system related",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2088",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2088/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2088/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2088/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2088",
    "id": 782297368,
    "node_id": "MDU6SXNzdWU3ODIyOTczNjg=",
    "number": 2088,
    "title": "Make Tree Control Node More Usable",
    "user": {
      "login": "name-here",
      "id": 26884090,
      "node_id": "MDQ6VXNlcjI2ODg0MDkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26884090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/name-here",
      "html_url": "https://github.com/name-here",
      "followers_url": "https://api.github.com/users/name-here/followers",
      "following_url": "https://api.github.com/users/name-here/following{/other_user}",
      "gists_url": "https://api.github.com/users/name-here/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/name-here/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/name-here/subscriptions",
      "organizations_url": "https://api.github.com/users/name-here/orgs",
      "repos_url": "https://api.github.com/users/name-here/repos",
      "events_url": "https://api.github.com/users/name-here/events{/privacy}",
      "received_events_url": "https://api.github.com/users/name-here/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-08T17:55:23Z",
    "updated_at": "2021-01-11T22:00:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nA plugin that adds a panel with a list of my game's levels, so I can easily re-order, rename, edit, and run them, and it will automatically update a custom Resource with any changes\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nDespite all of these (re-order, rename, etc.) already being features of the Scene dock, as far as I can tell, most of the features I need aren't exposed to GDScript.  Missing features I'd expect include:\r\n- Getting the `TreeNode` at a particular index\r\n- Adding an already-constructed `TreeNode` object to the `Tree`, instead of having to add a blank one with `create_item()` and then copy all the attributes one by one\r\n- Relatedly, removing a TreeItem from the list without doing `.free()` (they don't have a `.duplicate()` function because they directly inherit `Object`)\r\n- Re-ordering `TreeNode`s (moving from one index to another)\r\n- Drag-and-drop functionality to let the user re-order `TreeNode`s (currently, you have to write your own functions for moving the nodes around, which is a pain because there's no function to re-order them through code, and the list isn't exposed for editing)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\n#### For re-ordering through script:\r\nI can think of any number of ways to do this, some better than others.  Here are a few:\r\n1. Expose the `next` and `previous` pointers on `TreeItem`s to GDScript, allowing the user to re-arrange the list to their liking (I think it's a linked list?).  This adds versatility, but IMO still requires too much work for the user, and leaves too much room for error in messing up the linked list.\r\n2. Just expose functions for adding an already-constructed `TreeItem` at an index, moving a `TreeItem` from one index to another, and getting the `TreeItem` for a given index.  Also helpful would be a way to get the index of a given `TreeItem`.  This is probably the easiest \"good\" solution, but others might make `Tree` match better with other parts of the engine.\r\n3. Make `TreeItem` inherit from `Node` (maybe even `Control`?), and have them actually be children of the `Tree`.  This is probably the most complex solution, and I'm not sure how the details would work out (`Control`s having their position set by a parent many levels up the `SceneTree`?), but it means `TreeItem` wouldn't have to duplicate all that functionality, and could be easily moved around just like other `Node`s.\r\n4. Put all of a `Tree`'s `TreeItem`s in an `Array`, where each `TreeItem` has an `Array` for its children (if it has any).  I think this would be a good fix for the accessing and re-ordering problems, but without statically typed arrays, there's nothing stopping something of the wrong type from being inserted into the list.\r\n\r\n#### For drag and drop:\r\nIt'd nice to be able to write your own custom drag-and-drop if you have special requirements for what can be dropped where and the like, but the fact that these functions (`get_drag_data()`, `can_drop_data()`, `drop_data()`) don't even have a default implementation is really frustrating.  I'd say there should be, at minimum, default implementations for all of those three, and a functional way to permanently set the drop mode flags from the editor.  It would also be nice to have a function that built a drag preview control for you from the dragged `TreeItem` (for `set_drag_preview()`).\r\n\r\n#### Other things:\r\n- `Tree` has an `item_edited()` signal…that doesn't tell you which item was edited.  And `get_edited()` and `get_edited_column()`, which seem like they might help, say \"This is only available for custom cell mode\" in the docs.  This at least shouldn't be a difficult fix, right?\r\n  - Likewise with `item_rmb_edited()`\r\n- This one's minor, but why doesn't the `item_selected()` signal just tell you which item it was?  Not a huge deal since `get_selected()` should work, but why not, when `multi_selected()` actually _does_ tell you?\r\n  - The signals `cell_selected()`, `item_activated()`, `item_custom_button_pressed()`, and `item_double_clicked()`are like this too.  When would I want to know _that_ something was clicked, activated, etc., but not _what_?\r\n- `Tree` has `are_column_titles_visible()` and `set_column_titles_visible()`.  These should be replaced with an exposed `colum_titles_visible` property with standard set and get functions.\r\n- `TreeItem`  has a bunch of per-column properties that are exposed only through `set_x(column, data)` and `get_x(column)` functions.  To me, this feels kind of messy.  Ideas:\r\n  - Have some datatype that holds all the data for a given column (maybe `TreeItemColumn` or something?), and give `TreeItem` an `Array` of those, one for each column, so ex. `set_icon(2, icon_texture)` becomes `columns[2].texture = icon_texture`\r\n  - Make each of those properties `Array`s, with one slot for each column, so ex. `set_icon(2, icon_texture)` becomes `icons[2] = icon_texture`\r\n- While we're at it, might as well rename `Tree`'s `columns` property to something like `column_count` to improve clarity to match the rest of the properties being renamed for `4.0`.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI think I've answered this one in a fair bit of detail above.  I'd need to familiarize myself more with how `Tree` is implemented in C++ to give any more specifics.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nIt can be worked around with *way, way* too many lines of script (about 100 for my limited implementation of drag-and-drop alone, and that took me hours to figure out), including a lot of manually iterating through `TreeItem`s and some ugly hacks.\r\n\r\nAlso, it would be used only slightly less frequently than `Tree` itself.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nImproving core `Control` nodes (and giving them basic functionality) should not have to be done by add-ons.  If you're going to have the node at all, why not make it useful out of the box?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2088/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2087",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2087/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2087/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2087/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2087",
    "id": 781929565,
    "node_id": "MDU6SXNzdWU3ODE5Mjk1NjU=",
    "number": 2087,
    "title": "Provide unified access to plugin settings",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-01-08T08:01:16Z",
    "updated_at": "2021-01-08T19:09:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot Editor plugins (GDScript)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThere are plugins that do not require UI (controls, docks, toolbars, etc.) to work, since they can perform main actions immediately when the plugin is activated. However, such plugins may still want to have a plugin settings window for the user.\r\nAnd in this case, finding a window with settings can be a non-trivial task for the user, sometimes it may require viewing the source code, or reading/writing plugin docs, etc.\r\nAlso the problem is that after getting used to one way of accessing the plugin settings, the user will find other ways unintuitive (which will be provided by other plugin developers).\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nProviding unified access to plugin settings could solve the problem.\r\n\r\nBy that I mean:\r\n\r\n- for the plugin user:\r\nthere might be a default, preferred way to open the settings window of any plugin (but this doesn't mean any plugin should have settings controls).\r\n\r\n- for the plugin developer:\r\nthere might be a way to specify the (settings) control to open when the settings window is opened.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nWe could use the EditorPluginSettings window as a window for accessing plugin settings.\r\n\r\n![plugin-editor](https://user-images.githubusercontent.com/16458555/103986315-55c30100-51ac-11eb-8706-afe4136b91ed.png)\r\n\r\nThe list of plugins is a Tree control, so we could add a new column with the title `Settings:` and display buttons (gear icon) in it, clicking on which would open a window with settings.\r\nSuch buttons could only be added for those plugins that explicitly indicate the settings window or how to access them.\r\n\r\n\r\n\r\nThat is, as you can see, plugin x has settings window.\r\n______\r\n\r\nHow the developer could specify (\"register\") a plugin settings window?\r\n\r\n`EditorPlugin` class could have virtual method `_get_settings_control()`\r\n\r\nThe plugin developer could override this method like this:\r\n```gdscript\r\n_get_settings_control ():\r\n    return settings_control\r\n```\r\nwhere `settings_control` could be any PopupMenu (with settings of course) or just a control that would be opened when user clicks on the gear icon (see image).\r\n\r\nAdditionally, there could be a more flexible virtual method \r\n`_get_settings()`,\r\nwhich would contain a sequence of actions that would open the settings window (in case this is a custom [not Popup] settings window or this window is already in some dock/tab, etc.).\r\n\r\nThus, we would get a unified and intuitive way to access any the settings window.\r\n\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nAny workaround would be ugly or have drawbacks imo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nImplementing this as an addon makes it much less useful and  definitely not a unified solution.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2087/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2086",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2086/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2086/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2086/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2086",
    "id": 781908488,
    "node_id": "MDU6SXNzdWU3ODE5MDg0ODg=",
    "number": 2086,
    "title": "Add so the new .glTF exporter can export entire scenes, not just one mesh . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "fire",
        "id": 32321,
        "node_id": "MDQ6VXNlcjMyMzIx",
        "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fire",
        "html_url": "https://github.com/fire",
        "followers_url": "https://api.github.com/users/fire/followers",
        "following_url": "https://api.github.com/users/fire/following{/other_user}",
        "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
        "organizations_url": "https://api.github.com/users/fire/orgs",
        "repos_url": "https://api.github.com/users/fire/repos",
        "events_url": "https://api.github.com/users/fire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fire/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2021-01-08T07:18:13Z",
    "updated_at": "2021-01-10T08:30:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider game, about defeating a god, of war, or so <3 . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe new .glTF exporter, with materials, textures is really amazing, but I was hoping it could be have feature, so one can export an entire SCENE, since I often have terrain, static objects, houses, cars in a single scene, with nothing else . . Having the ability to export all that stuff, into Blender, would be really amazing, thanks . . :O <3 . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWell, the new exporter, if it could support exporting a single mesh, a selection of meshes or, an ENTIRE scene, it would be nicer, or so . . Thanks . . Export selected and, export entire scene mode, or so . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nNot sure how new exporter works, but I'd really use that feature, a lot, adding exporting a complete scene, would be really, really cool or, so . .\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI can't code the engine, I can make a basic controller, and some levels, so I can't do this, atm . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, it's such a cool feature, I plan on using it for most of my games, as it is, but being able to send an entire scene into Blender, work on it, and then send it back, would be amazing . . perhaps even a Blender plug-in, that allows live updates, ie. it updates the meshes, that have been changed, not the entire ' scene ', so one has ' live ' level editing, Godot < - - > Blender, or so, thanks . . <3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2085",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2085/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2085/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2085/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2085",
    "id": 781818855,
    "node_id": "MDU6SXNzdWU3ODE4MTg4NTU=",
    "number": 2085,
    "title": "Make iterating over a vector give an error",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-01-08T03:42:52Z",
    "updated_at": "2021-01-10T19:55:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n(Applies to any project)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI had this vector:\r\n`vec := Vector2(2, 3)`\r\n\r\nI was trying to do this:\r\n```gdscript\r\n\tfor y in vec.y:\r\n\t\tfor x in vec.x:\r\n\t\t\tprint(Vector2(x, y))\r\n```\r\n\r\nBut accidentally did this:\r\n```gdscript\r\n\tfor y in vec:\r\n\t\tfor x in vec:\r\n\t\t\tprint(Vector2(x, y))\r\n```\r\n\r\nThis prints:\r\n```\r\n(2, 2)\r\n```\r\nTook me a while to realize my mistake.\r\nApparently `for i in <Vector2/3>` will run once and returns the x-coordinate.\r\nThis shouldn't work at all.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nMake `for i in <Vector2/3>` give an error.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nGive a similar error as when you have something like this:\r\n```gdscript\r\n\tfor i in GDScript:\r\n\t\tprint(\"WHAT?!\")\r\n```\r\n`Unable to iterate on object of type 'Object'.`\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is built-in keyword behavior",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2085/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2084",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2084/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2084/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2084/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2084",
    "id": 781639624,
    "node_id": "MDU6SXNzdWU3ODE2Mzk2MjQ=",
    "number": 2084,
    "title": "Display custom class icons in the Remote scene tree view",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-07T21:59:42Z",
    "updated_at": "2021-01-07T22:33:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nCard game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nHard to read Remote view.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nCustom class icons massively improve the readability of the scene tree, when it's used for logic (so mostly with scripts extending the Node class):\r\n\r\n![image](https://user-images.githubusercontent.com/7307968/103949278-51123480-513b-11eb-89e6-b2ab610d221a.png)\r\n\r\nAll that readability is lost in the Remote view though:\r\n\r\n![image](https://user-images.githubusercontent.com/7307968/103949512-a8b0a000-513b-11eb-8531-c301530dce41.png)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nThe proposal is for the Remote view to display custom class icons in the same way the Local view does.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt's core functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2084/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2083",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2083/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2083/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2083/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2083",
    "id": 781249706,
    "node_id": "MDU6SXNzdWU3ODEyNDk3MDY=",
    "number": 2083,
    "title": "Make CSG nodes able to generate collision using CSG primitives rather than a triangle mesh",
    "user": {
      "login": "addmix",
      "id": 38119387,
      "node_id": "MDQ6VXNlcjM4MTE5Mzg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38119387?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/addmix",
      "html_url": "https://github.com/addmix",
      "followers_url": "https://api.github.com/users/addmix/followers",
      "following_url": "https://api.github.com/users/addmix/following{/other_user}",
      "gists_url": "https://api.github.com/users/addmix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/addmix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/addmix/subscriptions",
      "organizations_url": "https://api.github.com/users/addmix/orgs",
      "repos_url": "https://api.github.com/users/addmix/repos",
      "events_url": "https://api.github.com/users/addmix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/addmix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-07T11:37:27Z",
    "updated_at": "2021-01-13T16:08:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI am working on a semi-realistic FPS, that focuses on player controls and ergonomics.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI want to be able to use CSG objects (specifically tori [torus plural]) for collision. There is no built in option for a torus collision shape, or being able to apply a CSG difference operation on collision shapes, without using mesh collision\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nCSG objects having their proper round collision shapes, along with combination CSG primitives in the physics engine, without using tri mesh collision\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nCSG objects are notorious for being easy to raycast, along with raymarching. There are a few papers from the 90s documenting CSG collision. CSG basics outline how boolean operations are handled.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nno\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nCSG is very common for prototyping, and is useful for approximate collision shapes of meshes. This should be a core functionality to the physics engine which can be hard to modify in this way, and keep efficiency without custom builds.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2083/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2082",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2082/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2082/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2082/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2082",
    "id": 781146935,
    "node_id": "MDU6SXNzdWU3ODExNDY5MzU=",
    "number": 2082,
    "title": "Make a LiquidBody and a DestructibleBody node for cool real-time destruction events . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2021-01-07T08:58:17Z",
    "updated_at": "2021-01-10T01:47:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider game, where I need amazing ' catastophic ' or, disaster events, running, in real-time . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI need to make some effects, that are sort of, like this . .\r\n![2021-01-06 1613](https://user-images.githubusercontent.com/61069740/103871638-9d269000-50cd-11eb-8ef4-efcc048801f5.gif)\r\n\r\nAnd . .\r\n![2021-01-06 1612](https://user-images.githubusercontent.com/61069740/103871649-a31c7100-50cd-11eb-9ded-305c4bb65abc.gif)\r\n\r\nAlso . . .\r\n![2021-01-07 0950](https://user-images.githubusercontent.com/61069740/103871742-bc252200-50cd-11eb-878e-c2ed6e35e824.gif)\r\n\r\nAnd, I need them to run in real-time, and cause destruction, mayhem . .\r\n\r\nI wanted to make a suggestion, that Godot maybe makes a ' custom ' physics engine, or new nodes, that can handle stuff, like this, call it, Armageddon Physics Motor, or worse . . I need to be able to simulate near -  global destruction events, in real-time . . This is probably very complex, but since it might be cool or, just fun, wanted to suggest it, really need it, for my game stuff . . Maybe it's super-technical, or so, but I really need it . .\r\n\r\nalso, smoke effects, like this, a real time example, from google . . I THINK the tech and, algorhithms for making such stuff is available, not sure . . I need something, that really kicks ass, hopefully . . As a complete game dev, code and, 3D effects noob, it might be just impossible, but maybe Godot, can pull it off, thanks . . .\r\n![2021-01-07 0953](https://user-images.githubusercontent.com/61069740/103872176-55543880-50ce-11eb-9387-f98dfe08b61e.gif)\r\n\r\nAlso, fog, and rain, like a big hurricane, massive ' billowing ' or, dynamic fog walls, so on, hope, it can be done . . . Thanks . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI'm not sure, maybe one could store the data on the SSD, and call them real time, the simulation data, maybe one would have to bake them or, pre-render them, but I need real-time stuff, for my game . . Might, be hopeless . . <3 . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe ability to create such effects, in real-time, using perhaps new nodes or, brand-new custom, state-of-the-art physics engine, unparalleled, using the latest real-time simulations or, code, thanks . . . <3\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo, idea, sry . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, maybe it's so ' big ', it could be an add-on, since not all games need it, either way, I need pro stuff, global destruction, chaos or, worse, bigger . . <3\r\n\r\nThanks, for your time, and all the help, I'm now beginner level Godot user, bec. of the amazing, wonderful community and, just all-round superb devs, mods and, community, thanks . . . <3 :DD :DD . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2082/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2081",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2081/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2081/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2081/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2081",
    "id": 780592721,
    "node_id": "MDU6SXNzdWU3ODA1OTI3MjE=",
    "number": 2081,
    "title": "Add EditorInterface `get_main_screen_editor()` method",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-06T14:29:18Z",
    "updated_at": "2021-01-06T14:44:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot editor plugins (gdscript)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'm creating plugins which do something depending on the active screen (2D, 3D, Script etc).\r\nI need to get current main screen editor name from plugin, but there is no such method.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdding method to get main screen editor name would completely solve the problem\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nString get_editor_interface().get_main_screen_editor()\r\n```\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n```gdscript\r\nfunc get_main_screen()->String:\r\n\tvar screen:String\r\n\tvar base:Panel = get_editor_interface().get_base_control()\r\n\tvar editor_head:BoxContainer = base.get_child(0).get_child(0)\r\n\tif editor_head.get_child_count()<3:\r\n\t\t# may happen when calling from plugin _init()\r\n\t\treturn screen\r\n\tvar main_screen_buttons:Array = editor_head.get_child(2).get_children()\r\n\tfor button in main_screen_buttons:\r\n\t\tif button.pressed:\r\n\t\t\tscreen = button.text\r\n\t\t\tbreak\r\n\treturn screen\r\n```\r\nAs you can see this is a hacky workaround, I don't like it because it depends on UI tree and UI states (like `Button.pressed`).\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBecause this method is necessary for creating this kind of plugins.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2080",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2080/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2080/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2080/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2080",
    "id": 779838198,
    "node_id": "MDU6SXNzdWU3Nzk4MzgxOTg=",
    "number": 2080,
    "title": "Give properties a block for export logic",
    "user": {
      "login": "cgbeutler",
      "id": 9751923,
      "node_id": "MDQ6VXNlcjk3NTE5MjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9751923?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgbeutler",
      "html_url": "https://github.com/cgbeutler",
      "followers_url": "https://api.github.com/users/cgbeutler/followers",
      "following_url": "https://api.github.com/users/cgbeutler/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgbeutler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgbeutler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgbeutler/subscriptions",
      "organizations_url": "https://api.github.com/users/cgbeutler/orgs",
      "repos_url": "https://api.github.com/users/cgbeutler/repos",
      "events_url": "https://api.github.com/users/cgbeutler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgbeutler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-06T01:24:50Z",
    "updated_at": "2021-01-06T01:53:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPlugin with lots of variable exports.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen exporting, it's sometimes nice to have a bit of logic. The editor will do this occasionally. (For example, when changing one value in the inspector, other properties will sometimes get shown/hid.) Godot can currently do this with the `_get_property_list`, `_get`, and `_set` virtual functions.\r\n\r\nOverriding `_get_property_list`, `_get`, and `_set` gets kinda... gross. It can bloat fast and can separate properties from their logic. These functions were somewhat patterned after the C++ code. With GDScript, the `_get` and `_set` functions are, in a way, able to be short-cut with getters and setters. The only way to short-cut `_get_property_list` is to use export annotations, which lack logic. This means that if you need any logic for an export, you'll have to give up a lot of sort-cut syntax and override `_get_property_list`, `_get`, and `_set`.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI propose adding a third item to the setter/getter stuff called `export`. This would allow properties to have logic when exporting, much like you can do in `_get_property_list`. If this new `export` block returns null, then the property is skipped. If it returns an `ExportProperty` object or a dictionary (in a similar form to what `_get_property_list` uses), then it is exported. (I would prefer using a new `ExportProperty` object, so I can have auto-completion.)\r\n\r\nIn short, adding an `export` block to a property adds logic while keeping the code attached to the property it relates to.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nIn v4 it would probably look something like this:\r\n```coffeescript\r\n# Optional item is only exported if the condition is true\r\nvar __optional_item = null\r\nvar optional_item:\r\n    export:  return null  if not some_condition else  ResourceExport.new(\"Texture\")\r\n    get:  return __optional_item\r\n    set(value):  __optional_item = value\r\n```\r\nThis would allow some logic to exist on the property for exporting.\r\n\r\nI would love to see actual objects be what you return from the function, but I could also see just using a dictionary like what is used in `_get_property_list`.\r\n```coffeescript\r\nvar optional_item:\r\n    export:\r\n        if some_condition:  return { type = TYPE_OBJECT, hint = PROPERTY_HINT_RESOURCE_TYPE }\r\n        return null\r\n    ...\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis enhancement is not _necessary_. At the end of the day, the current options with `@export` and `_get_property_list` do work. If this proposal doesn't happen, I'll live.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt would require changes to GDScript itself",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2079",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2079/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2079/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2079/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2079",
    "id": 779537986,
    "node_id": "MDU6SXNzdWU3Nzk1Mzc5ODY=",
    "number": 2079,
    "title": "Make nodes inherit custom multiplayer",
    "user": {
      "login": "udit",
      "id": 6249061,
      "node_id": "MDQ6VXNlcjYyNDkwNjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6249061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/udit",
      "html_url": "https://github.com/udit",
      "followers_url": "https://api.github.com/users/udit/followers",
      "following_url": "https://api.github.com/users/udit/following{/other_user}",
      "gists_url": "https://api.github.com/users/udit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/udit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/udit/subscriptions",
      "organizations_url": "https://api.github.com/users/udit/orgs",
      "repos_url": "https://api.github.com/users/udit/repos",
      "events_url": "https://api.github.com/users/udit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/udit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-05T20:34:36Z",
    "updated_at": "2021-01-06T15:59:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nAn online multiplayer where a single server executable will host several rooms using `custom_multiplayer` override\r\n<br>\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI think current process to setup multiplayer branches [as shown here in the example](https://github.com/LudiDorici/gd-custom-multiplayer/blob/master/script/custom_multiplayer.gd) can be simplified and optimized.\r\n<br>\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nUser will initialize the `custom_multiplayer` in the `_init()` callback of the desired node and set it as root node. Child nodes should set their `custom_multiplayer` from parent when it enters tree.\r\n<br>\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nFollowing code in the `_init()` of root multiplayer node should suffice to create a multiplayer branch:\r\n```\r\ncustom_multiplayer = MultiplayerAPI.new()\r\ncustom_multiplayer.set_root_node(self)\r\n```\r\nThen, the engine can set the `custom_multiplayer` of child nodes or dynamically added nodes from the parent.\r\n<br>\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nTo get this to work in script, you will have to copy paste the following code to each and every node in the project which is not convenient:\r\n```\r\nfunc _enter_tree():\r\nif custom_multiplayer == null:\r\n    custom_multiplayer = get_parent().custom_multiplayer\r\n```\r\n<br>\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis can't be achieved through add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2075",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2075/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2075/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2075/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2075",
    "id": 779008418,
    "node_id": "MDU6SXNzdWU3NzkwMDg0MTg=",
    "number": 2075,
    "title": "Geometry Shader - for subd of dyn mesh",
    "user": {
      "login": "JeffGillin",
      "id": 15804689,
      "node_id": "MDQ6VXNlcjE1ODA0Njg5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/15804689?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeffGillin",
      "html_url": "https://github.com/JeffGillin",
      "followers_url": "https://api.github.com/users/JeffGillin/followers",
      "following_url": "https://api.github.com/users/JeffGillin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeffGillin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeffGillin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeffGillin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeffGillin/orgs",
      "repos_url": "https://api.github.com/users/JeffGillin/repos",
      "events_url": "https://api.github.com/users/JeffGillin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeffGillin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-01-05T13:11:47Z",
    "updated_at": "2021-01-10T06:38:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nAny game with lots of dynamic mesh generation. \r\n\r\n### Describe the problem or limitation you are having in your project.\r\n\r\nSubdivision of dynamic mesh (subdivision would be too slow if cpu bound).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nGeometry shaders to subd a mesh within shader instead of godot code\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAnother shader function named \"geometry()\" that would allow you to add/remove mesh data.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nCould probably be worked around with gpu compute, but then dealing with 2 passes to gpu (one to compute subd, and one to render). Geometry shader wouldn't require second call.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nYeah, part of the shader language ...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2075/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2074",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2074/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2074/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2074/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2074",
    "id": 778456455,
    "node_id": "MDU6SXNzdWU3Nzg0NTY0NTU=",
    "number": 2074,
    "title": "Add angular analogs of `move_toward()`",
    "user": {
      "login": "UnwarySage",
      "id": 9922379,
      "node_id": "MDQ6VXNlcjk5MjIzNzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9922379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UnwarySage",
      "html_url": "https://github.com/UnwarySage",
      "followers_url": "https://api.github.com/users/UnwarySage/followers",
      "following_url": "https://api.github.com/users/UnwarySage/following{/other_user}",
      "gists_url": "https://api.github.com/users/UnwarySage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UnwarySage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UnwarySage/subscriptions",
      "organizations_url": "https://api.github.com/users/UnwarySage/orgs",
      "repos_url": "https://api.github.com/users/UnwarySage/repos",
      "events_url": "https://api.github.com/users/UnwarySage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UnwarySage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-04T23:51:51Z",
    "updated_at": "2021-01-05T20:54:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA top-down game, with automation of combatants through player made behavior trees.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'm making movement code for my top down characters, and I keep finding that Vector2 `move_toward()`\r\nfunction is handy when moving kinematic bodies towards a point, but making them look at a point smoothly is hard.\r\nlook_at snaps something instantly, which isn't desired in this case.\r\nImplementing and getting the wrapping logic took a chunk of brain power, to make sure it wasn't going to have subtle bugs with larger rotations, or negative ones.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdding two functions to the core GDScript namespace, with the following WIP names.\r\n`rotate_toward(angle_a, angle_b, amount)`:\r\nThis takes three angles as floats, and returns angle_a, rotated towards angle_b, by amount, or less if angle_b can be reach in less than amount. This would perform wrapping around TAU, and moving along the shortest arc between a and b.\r\n\r\n`rotate_toward_degrees` would be as above, but wrapping around 360 degrees instead, and could potentially be omitted.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nConsider a topdown games turret. Having it move smoothly to look at a target could thus be.\r\n\r\n```\r\nvar target_angle = (target_position - global_position).angle()\r\n$TurretBase.global_rotation = rotate_toward($TurretBase.global_rotation, target_angle, turret_turn_speed)\r\n```\r\nSimilar example could be used for top down vehicles, or burrowing/flying platformer enemies.\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt wouldn't be hard to write around with scripts, but it would be easy to get subtly wrong, and would potentially have to be repeated in many file throughout a project.,\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nImporting an add-on for this would be comparable to the amount of work required to do it in the first place. This aims to solve a papercut, like [#42976 ](https://github.com/godotengine/godot/pull/42976)did.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2074/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2073",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2073/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2073/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2073/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2073",
    "id": 778382885,
    "node_id": "MDU6SXNzdWU3NzgzODI4ODU=",
    "number": 2073,
    "title": "Enable \"Add Type Hints\" in the script editor completion by default",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-01-04T21:34:31Z",
    "updated_at": "2021-01-04T22:05:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\nAutocomplete creates \"low quality\" code by default\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem\r\nI was writing a ticket to suggest autocomplete includes types, but then discovered it already exists! (Completion>Add Type Hints). But for some reason it's not default.\r\n\r\nI'd like to strongly suggest the default be to include types. It produces better and more readable code. If devs start seeing them they may also get into the good habit of using them themself.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2073/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2072",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2072/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2072/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2072/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2072",
    "id": 778341548,
    "node_id": "MDU6SXNzdWU3NzgzNDE1NDg=",
    "number": 2072,
    "title": "Toggle debug visible collision shapes at runtime",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-04T20:23:43Z",
    "updated_at": "2021-01-04T20:48:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nrhino simulator\r\n\r\n### Describe the problem or limitation you are having in your project\r\nDebugging collision problems is difficult and you don't always know when they occur or how to easily get back to that point or recreate it upon enabling collision shapes and restarting the code. Lesser, but similarly, when you have collisions on it makes the screen very cluttered and there are many times when you want to turn collision shapes off as you want to test something else while still running the code.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI presume there is a reason for this omissions, but you cannot enable/disable collision shapes from the Debug menu when the code is running.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWhen the menu item is clicked in debug it informs the remote window to turn on collisions\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's basic debugging aid.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2072/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2071",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2071/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2071/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2071/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2071",
    "id": 778332852,
    "node_id": "MDU6SXNzdWU3NzgzMzI4NTI=",
    "number": 2071,
    "title": "Allow Sprite's \"Convert to Mesh2D\", \"Convert to Polygon2D\" etc be callable in script.",
    "user": {
      "login": "Xascoria",
      "id": 59613709,
      "node_id": "MDQ6VXNlcjU5NjEzNzA5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59613709?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xascoria",
      "html_url": "https://github.com/Xascoria",
      "followers_url": "https://api.github.com/users/Xascoria/followers",
      "following_url": "https://api.github.com/users/Xascoria/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xascoria/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xascoria/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xascoria/subscriptions",
      "organizations_url": "https://api.github.com/users/Xascoria/orgs",
      "repos_url": "https://api.github.com/users/Xascoria/repos",
      "events_url": "https://api.github.com/users/Xascoria/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xascoria/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2021-01-04T20:09:56Z",
    "updated_at": "2021-01-05T13:36:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n(Irrelevant) A game with a world map\r\n\r\n### Describe the problem or limitation you are having in your project\r\nAfter Creating individuals sprite from a colored country sheet (on runtime), I'm unable to create Area2D that I need to be used for detecting mouse position since I can't create a CollisionShape2D at runtime from a sprite.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nExpose the following functions to be callable in script:\r\nSprite: Convert to Mesh2D\r\nSprite: Convert to Polygon2D\r\nSprite: Create CollisionPolygon2D Sibling\r\nSprite: Create LightOccluder Sibling\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n`var mesh = Sprite_ref.convert_to_mesh2d()` or something along that light\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nPretty much impossible to worked around for some of them, like for example `Create CollisionPolygon2D Sibling` can only be worked around if you use custom vectorization algo on the sprite and then converts them to positional points\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThe functions are already in the core engine, no reason they shouldn't be accessible via script",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2071/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2070",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2070/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2070/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2070/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2070",
    "id": 778222811,
    "node_id": "MDU6SXNzdWU3NzgyMjI4MTE=",
    "number": 2070,
    "title": "Invert Y Axis. UP should increase, not decrease",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2021-01-04T16:47:57Z",
    "updated_at": "2021-01-10T08:25:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(This is a rephrasing of https://github.com/godotengine/godot-proposals/issues/2048 - it's evident from the responses and why it was closed that I failed to express myself clearly)\r\n\r\nThis ticket is **absolutely NOT** about:\r\n\t* Right/Left-Handedness.\r\n\t* Which axis is used for FORWARD/UP/RIGHT.\r\n\r\nThese things are utterly irrelevent to the proposal.\r\n\r\nTo keep things simple, I am mostly only going to talk about the Y axis here.\r\n\t\r\n### Describe the project you are working on\r\nn/a\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGodot has flipped the Y axis so that it is upside down. This is a problem because it's not how most people think of axis, it's inconsistent with how the X axis is treated, and it's not how all other game engines deal with the Y axis (see other ticket (  https://github.com/godotengine/godot-proposals/issues/2048 ) for references proving this).\r\n\r\nOr put another way, in Godot you have the following:\r\n\r\n```\r\nVector2.UP == (0,-1)\r\nVector2.DOWN == (0,1)\r\n```\r\n\r\nIn every other game engine, and in the real world, this is:\r\n```\r\nVector2.UP == (0,1)\r\nVector2.DOWN == (0,-1)\r\n```\r\n\r\nIf I say \"Start at 5, go UP 3\", what number are you now thinking off? Yep, 8.\r\nNow, lets try another: \"Start at 20, go DOWN 6\", what number are you thinking of now? Yep, 14.\r\n\r\nThat's because UP and DOWN have meaning, and reversing that meaning makes no sense (exception: drawing software also reverse it, but that doesn't mean it makes sense).\r\n\r\n\r\nThis also applies to FORWARD/BACK (Z axis) being reversed. In fact, they do the exact *opposite* of the Number Line concept you learn at school - https://en.wikipedia.org/wiki/Numberline:\r\n![image](https://user-images.githubusercontent.com/72134064/103556209-57897d80-4ea9-11eb-9464-37bc1fbda6c4.png)\r\n\r\n\"Start at 3, go FORWARD 1\" what number are you at now? For Godot FORWARD means to -1, so you should get 2. Not even slightly intuitive.\r\n\r\nFurther, this is inconsistent with the X axis, for which Right (+1) and left (-1), do what you'd expect despite those being more cultural.\r\n\r\nThis will also serve to make the origin point bottom-left, from the current top-left.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe ability for the user to specify what whether the Y axis is swapped to \"human-normal\" or \"Godot specific\".\r\nThis could be either a Project setting or an Engine Setting.\r\n\r\nI expect this should be invisible to most addons, and irrelevant for tutorials (there are tons of other Project/Editor settings that can invisibly break tutorials but people don't worry about them).\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAs above\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nDoesn't seem to be any consistent way to switch it around at the script level.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's an engine thing\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2070/reactions",
      "total_count": 10,
      "+1": 0,
      "-1": 7,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2069",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2069/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2069/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2069/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2069",
    "id": 778192962,
    "node_id": "MDU6SXNzdWU3NzgxOTI5NjI=",
    "number": 2069,
    "title": "Enable GitHub Discussions in GIP as an alternative to making a formal proposal",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-04T15:59:08Z",
    "updated_at": "2021-01-04T16:31:14Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\nDiscussing new features for Godot development.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nSee proposed changes such as #1476. The problem is that there might be a lot of ideas which might not be good fit for Godot development specifically, and makes it problematic and creates unnecessary maintenance burden for the core developers. I believe a lot of proposals in GIP won't be implemented in core, but this doesn't mean that features cannot be implemented via modules and plugins by the rest of the community members.\r\n\r\nMost people do not even properly answer the \"**Describe the project you are working on**\" question, and even the core developers choose to omit it just by typing: \"Godot Engine\"...\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nGitHub has recently implemented [Discussions](https://docs.github.com/en/free-pro-team@latest/discussions/collaborating-with-your-community-using-discussions/about-discussions) feature which can be enabled for GIP repository. Enabling this feature allows to better focus on proposals which truly matter for Godot, because:\r\n1. Non-technical proposals are going to end up in Discussions.\r\n2. Discussions can be used both as pre-approval stage and a place for gaining feedback/interest in the community before writing technical proposals and further approved, which would naturally increase the approval rate significantly. See also #2055.\r\n\r\nAnd yes, there's still maintenance involved with moderating discussions, but I believe it's just a matter of properly organizing the existing workflow (which is messy currently, if you ask me).\r\n\r\nIt's also going to be different from [Godot Forums](https://godotforums.org/) because the platform shouldn't be used to ask for programming help, but to figure out whether it's possible to do something in the first place (due to limitation of the existing feature or the absence of a feature). If not, that's where a proposal can be created which would be already based on a **use case**, the very thing which \"**Describe the project you are working on**\" question was written for.\r\n\r\nIn fact, there are many similar proposals which keep popping up if you look at godot-extended-libraries/godot-ideas#15. So before making such proposals, it would be better to discuss those use cases first. If people come up with enough of concrete use cases, that's where a potential contributor can write a proposal to fulfil those use cases directly in core, or allow people to overcome limitations via script.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nGo to [Settings](https://github.com/godotengine/godot-proposals/settings) in this repository and enable \"Discussions\":\r\n\r\n![image](https://user-images.githubusercontent.com/17108460/103552784-1a2aed00-4eb5-11eb-9f41-1a89a1706233.png)\r\n\r\nIf you'd like to see how it looks in action, I've enabled [Discussions in Goost](https://github.com/goostengine/goost/discussions) for the same reason.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nConsider merging #1476, to have discussions maintained \"unofficially\".\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThere's no need to wait for Godot!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2069/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2068",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2068/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2068/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2068/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2068",
    "id": 778136896,
    "node_id": "MDU6SXNzdWU3NzgxMzY4OTY=",
    "number": 2068,
    "title": "Further Expose EditorSpinSlider to GDScript",
    "user": {
      "login": "DeadlyLampshade",
      "id": 29586664,
      "node_id": "MDQ6VXNlcjI5NTg2NjY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/29586664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DeadlyLampshade",
      "html_url": "https://github.com/DeadlyLampshade",
      "followers_url": "https://api.github.com/users/DeadlyLampshade/followers",
      "following_url": "https://api.github.com/users/DeadlyLampshade/following{/other_user}",
      "gists_url": "https://api.github.com/users/DeadlyLampshade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DeadlyLampshade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DeadlyLampshade/subscriptions",
      "organizations_url": "https://api.github.com/users/DeadlyLampshade/orgs",
      "repos_url": "https://api.github.com/users/DeadlyLampshade/repos",
      "events_url": "https://api.github.com/users/DeadlyLampshade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DeadlyLampshade/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-01-04T14:33:43Z",
    "updated_at": "2021-01-08T20:45:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI like to consider a plugin/addon developer for Godot, I am often experimenting on ideas for addons.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nEditorSpinSlider is a class used internally by Godot for basically everything that uses a spinbox, it's similar to the generic SpinBox objects with a few feature differences.\r\n\r\n1. There's a label drawn alongside it, this label is usually colored, like we see for exported Vector Classes.\r\n2. It has a slider which can be turned on or off.\r\n3. EditorSpinSliders can only be instanced in the editor.\r\n\r\nThe main problem is that from the features I've listed, changing the color of the label, and turning on and off the slider, are completely inaccessible to GDScript, despite everything else basically being exposed to the editor.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nTo put it simply, I want properties such as custom_label_color and hide_slider to be exposed to the editor, so that we can use it to create better plugins.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nNot the biggest expert on C++, but...\r\n```C++\r\nvoid EditorSpinSlider::setup_custom_label_color(bool p_use_custom_label_color, Color p_custom_label_color) {\r\n\tuse_custom_label_color = p_use_custom_label_color;\r\n\tcustom_label_color = p_custom_label_color;\r\n}\r\n\r\nvoid EditorSpinSlider::set_use_custom_label_color(bool p_use_custom_label_color) {\r\n\tuse_custom_label_color = p_use_custom_label_color;\r\n}\r\n\r\nbool EditorSpinSlider::using_custom_label_color() {\r\n\treturn use_custom_label_color;\r\n}\r\n\r\nvoid EditorSpinSlider::set_custom_label_color(Color p_custom_label_color) {\r\n\tcustom_label_color = p_custom_label_color;\r\n}\r\n\r\nColor EditorSpinSlider::get_custom_label_color() {\r\n\treturn custom_label_color;\r\n}\r\n\r\nvoid EditorSpinSlider::_bind_methods() {\r\n\tClassDB::bind_method(D_METHOD(\"set_label\", \"label\"), &EditorSpinSlider::set_label);\r\n\tClassDB::bind_method(D_METHOD(\"get_label\"), &EditorSpinSlider::get_label);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"set_read_only\", \"read_only\"), &EditorSpinSlider::set_read_only);\r\n\tClassDB::bind_method(D_METHOD(\"is_read_only\"), &EditorSpinSlider::is_read_only);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"set_flat\", \"flat\"), &EditorSpinSlider::set_flat);\r\n\tClassDB::bind_method(D_METHOD(\"is_flat\"), &EditorSpinSlider::is_flat);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"set_use_custom_label_color\", \"use_custom_label_color\"), &EditorSpinSlider::set_use_custom_label_color);\r\n\tClassDB::bind_method(D_METHOD(\"using_custom_label_color\"), &EditorSpinSlider::using_custom_label_color);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"set_hide_slider\", \"hide_slider\"), &EditorSpinSlider::set_hide_slider);\r\n\tClassDB::bind_method(D_METHOD(\"is_hiding_slider\"), &EditorSpinSlider::is_hiding_slider);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"set_custom_label_color\", \"custom_label_color\"), &EditorSpinSlider::set_custom_label_color);\r\n\tClassDB::bind_method(D_METHOD(\"get_custom_label_color\"), &EditorSpinSlider::get_custom_label_color);\r\n\t\r\n\tClassDB::bind_method(D_METHOD(\"_gui_input\"), &EditorSpinSlider::_gui_input);\r\n\t\r\n\tADD_PROPERTY(PropertyInfo(Variant::STRING, \"label\"), \"set_label\", \"get_label\");\r\n\tADD_PROPERTY(PropertyInfo(Variant::COLOR, \"custom_label_color\"), \"set_custom_label_color\", \"get_custom_label_color\");\r\n\tADD_PROPERTY(PropertyInfo(Variant::BOOL, \"use_custom_label_color\"), \"set_use_custom_label_color\", \"using_custom_label_color\");\r\n\tADD_PROPERTY(PropertyInfo(Variant::BOOL, \"hide_slider\"), \"set_hide_slider\", \"is_hiding_slider\");\r\n\tADD_PROPERTY(PropertyInfo(Variant::BOOL, \"read_only\"), \"set_read_only\", \"is_read_only\");\r\n\tADD_PROPERTY(PropertyInfo(Variant::BOOL, \"flat\"), \"set_flat\", \"is_flat\");\r\n}\r\n```\r\n\r\nThe biggest problem would be rewriting all 12 EditorProperty's that uses custom label colors to use:\r\n```C++\r\nspin[i]->setup_custom_label_color(true, c);\r\n```\r\ninstead of set_custom_label_color.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYou would have to write an entirely new class that extends Range or SpinBox to do the exact same thing, so no.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's a very small, simple change that that would reduce the need for a more expansive SpinBox addon for EditorInspectorPlugin's",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2068/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2064",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2064/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2064/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2064/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2064",
    "id": 777646266,
    "node_id": "MDU6SXNzdWU3Nzc2NDYyNjY=",
    "number": 2064,
    "title": "Make a node so one can write text on a skewed 3D surface . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1849547975,
        "node_id": "MDU6TGFiZWwxODQ5NTQ3OTc1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:docs",
        "name": "topic:docs",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-01-03T14:14:20Z",
    "updated_at": "2021-01-04T07:08:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider, exploration game, or so . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nOkay, this is tough . . I have some 2D UI elements, that look like ' 3D objects ', and I really need to be able to print text on them . . Here's an example . .\r\n![2021-01-03 1503](https://user-images.githubusercontent.com/61069740/103480506-1f186f80-4dd5-11eb-8321-d8c9a2ec88a2.jpg)\r\n\r\nI can make them, as a 3D object, and place it in front of the screen, or the camera . . But, that will mean that all the text has to be written into images, and be difficult to edit later, and having the text in var string, is a lot cooler . . I don't know if this is difficult to make, but I was hoping it was possible to have something like this, where one can place the four points, on a 2D element, and then the text gets ' projected ' on the surface, from strings, instead of having 2000 images, that have to be re-made, to fix any errors in the text, later, so on . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWell, just a new Node 2D, that one can 'write' text on, and where one can create perspective, by moving the four corners, so the text is ' written ' on that, or so . . maybe it's really a 3D node, but I want my UI to be pixel perfect, and hope it COULD be a 2D node, Thanks . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSo, one can place each corner, so one can get this effect . .\r\n![2021-01-03 1503](https://user-images.githubusercontent.com/61069740/103480669-d9a87200-4dd5-11eb-89f9-1a1b865d1b8d.jpg)\r\n\r\nThat's all . . <3\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt can made in 3D, by making each image in Blender, with text on it, but later editing becomes a problem, fixing grammar errors, or 'bad' dialogue, etc . . Especially important, since my game is text heavy, lots of dialogue, etc . . . Thanks . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, not sure, I think it's missing, that's all . . But, maybe it should be an add-on, don't really know, sorry . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2063",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2063/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2063/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2063/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2063",
    "id": 777555390,
    "node_id": "MDU6SXNzdWU3Nzc1NTUzOTA=",
    "number": 2063,
    "title": "Reorganize a subset of Editor features into a module of reusable nodes and resources to complement `/scene`",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-03T01:38:26Z",
    "updated_at": "2021-01-03T07:12:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nLiterally any plugin that adds GUI elements to the Godot Editor, e.g. a potential plugin for satisfying #13 (which I started thinking about now that godotengine/godot#44879 is in a good place).\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe Godot Editor has many tools built into it that are valuable for editing data related to Godot projects.\r\n\r\n- Custom editors for various types of resources (like curves, shapes, scene trees, etc.).\r\n- Utilities for searching the class architecture and building instances (like CreateDialog).\r\n- The Inspector which can generate a competent GUI for editing data purely from a selected Object and its list of property metadata.\r\n- All EditorPlugins that add special interfaces or overlays to the Viewport.\r\n- The Godot Asset Library and its ability to list, select, search, and fetch data related to remote web endpoints.\r\n- Many more custom tools that are exclusive to the Godot Editor.\r\n\r\nAll of these are, generally speaking, \"basic\" reusable classes and features that are useful for building all sorts of GUIs associated with Godot projects.\r\n\r\n- Creating options menus for games.\r\n- Creating applications designed to work with a viewport and live-edited data (Pixelorama, Material Maker, BlastFX, Wonderdraft, etc.). Many EditorPlugins in the editor code could easily be used in such projects.\r\n- Creating level editors within a game.\r\n- Creating separate modding tools for one's own game.\r\n- Creating plugins for the Godot Editor in script code, without access to the Editor's internal C++ types.\r\n\r\nThis is a vast, ready-made collection of community-maintained and battle-tested tools that no one can use for their plugins or projects simply because they aren't exposed to the scripting API, so everyone has to needlessly reinvent the wheel with custom assets.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI propose that much of the Godot Editor is refactored into a larger collection of more generically written tool nodes and resources which the current `/editor` codebase then builds upon by extending those classes and customizing them for the Godot Editor we know and love today. BUT, these generically written tool nodes are, like `/scene` directory, exposed to the scripting API, so everything outside of the Editor can also use them.\r\n\r\nThis would expand the out-of-the-box features available to those who use the engine *without* significantly bloating it since all you're really doing is moving around and re-contextualizing *what is already there*.\r\n\r\nIn addition, it stands to greatly improve the future of the Editor itself by refactoring it to be more flexible. For example, the entire Godot Editor assumes only one instance of the Inspector exists. Or that there is only one Viewport into the game world. Or that you only have a single edited scene, etc. These kinds of assumptions limit the Editor from supporting more use cases than it should be able to. If you refactor most features to work with a generic collection of nodes, then it forces the removal of all of those assumptions.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI don't know the *exact* form this would take in the codebase build-system. Perhaps a separate top-level subfolder that builds on `/scene`, is used by `/editor` and `/modules`, and can *also* be toggled off like any other module, except that it's on by default and is forced on if you compile with `tools=yes`? Or maybe it's just a regular module that's a special case in the build system. Idk.\r\n\r\nSo, unlike `/modules`, the Godot Editor would be able to directly depend on classes defined there, just like `/scene`. And unlike `/scene`, users would be able to optionally remove the entire collection of types from their engine build just like they can any other module.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThe point is that the Godot Editor itself is a massive suite of tools, and anyone wanting to build anything remotely similar to the Godot Editor has to write it all themselves with a huge amount of script code. So no, it's the antithesis of a few lines of code. And it would be used by a massive number of Godot projects.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nAgain, these are things *already in core*. They simply need to be exposed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2063/reactions",
      "total_count": 17,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2062",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2062/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2062/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2062/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2062",
    "id": 777517239,
    "node_id": "MDU6SXNzdWU3Nzc1MTcyMzk=",
    "number": 2062,
    "title": "Add way to detect system dark mode in GDScript",
    "user": {
      "login": "Sosasees",
      "id": 66305550,
      "node_id": "MDQ6VXNlcjY2MzA1NTUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/66305550?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sosasees",
      "html_url": "https://github.com/Sosasees",
      "followers_url": "https://api.github.com/users/Sosasees/followers",
      "following_url": "https://api.github.com/users/Sosasees/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sosasees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sosasees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sosasees/subscriptions",
      "organizations_url": "https://api.github.com/users/Sosasees/orgs",
      "repos_url": "https://api.github.com/users/Sosasees/repos",
      "events_url": "https://api.github.com/users/Sosasees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sosasees/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-02T20:05:36Z",
    "updated_at": "2021-01-02T21:13:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nA game whiches visual style is suited perfectly for both Light Mode and Dark Mode. All that's needed is a color swap,\r\nand both modes look equally natural.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nI must assume wether most players will use Light Mode or Dark Mode and then set that as the default for my game, instead of letting the game read the system setting to be sure. Additionally, I must make the game's Dark/Light setting separate from the system's.\r\n\r\nThis is acceptable for OSs without a system-wide dark mode toggle. But by today, most OSs Do have such a toggle.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nWith a way to read the system setting for Dark/Light mode, I can use this value as a condition for wether to change to Light visuals or Dark visuals. This would mean that I can set the system setting as a Default, with the visuals still changing accordingly when the system setting changes.\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI'd expect the light/dark mode detection to be codable approximately like this in GDScript:\r\n```\r\nif OS.is_dark_theme():\r\n    theme_dark()  # custom local method\r\nelse:\r\n    theme_light() # custom local method\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nI don't know of a way to do so,\r\neven after I searched.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nSomething like `OS.dark_mode` being an add-on would be totally unexpected. But this could be alleviated by stating it in the documentation page for OS, in a way where you'd find it by [Ctrl][F] searching the term \"dark\".\r\n\r\nBut I still think it should be Core because if \"Trivial line of code features like this being Add-Ons only\" pile up,\r\ninstalling All these Add-Ons every time you install Godot will become really annoying really fast.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2062/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2061",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2061/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2061/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2061/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2061",
    "id": 777500743,
    "node_id": "MDU6SXNzdWU3Nzc1MDA3NDM=",
    "number": 2061,
    "title": "Provide an option for collision nodes to re-trigger themselves",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-02T18:02:01Z",
    "updated_at": "2021-01-02T23:07:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nplatform\r\n\r\n### Describe the problem or limitation you are having in your project\r\nOnce a collision, whether it is a raycast, a collision block, an area entered, etc. is triggered it is never triggered again.\r\n\r\nExamples include an enemy giving repeat damage once they enter a players area, a collision not being required because the fsm is in one state (e.g. falling) but when the environment changes and the state changes (e.g. an enemy slides to the bottom and is no longer falling) the collisions are never retriggered.\r\n\r\nCurrent workarounds used by most people (and it is quite a frequent thing if you ever watch /look at other games) is to disable the collision box/monitoring state, start a timer, then reenable. This is repeated for every unique type of node created.\r\n\r\nOne good example is this:\r\nhttps://youtu.be/1MO8DtnxSQs?list=PL9FzW-m48fn2SlrW0KoLT4n5egNdX-W9a&t=413\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nProvide an option for collision nodes to retrigger themselves.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nOn collision, if property is set to 'momentary' then the monitoring/monitorable or disabled state turns itself off then on\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nit is a frequently used pattern requiring a fair bit of boilerplate code. The cost penalty will be known, but no worse than doing it currently.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2060",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2060/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2060/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2060/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2060",
    "id": 777492404,
    "node_id": "MDU6SXNzdWU3Nzc0OTI0MDQ=",
    "number": 2060,
    "title": "Cropping and Offset fields for single Animations or Frames of Animations in the SpriteFrames Resource",
    "user": {
      "login": "m0rtis0",
      "id": 65440078,
      "node_id": "MDQ6VXNlcjY1NDQwMDc4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65440078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m0rtis0",
      "html_url": "https://github.com/m0rtis0",
      "followers_url": "https://api.github.com/users/m0rtis0/followers",
      "following_url": "https://api.github.com/users/m0rtis0/following{/other_user}",
      "gists_url": "https://api.github.com/users/m0rtis0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m0rtis0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m0rtis0/subscriptions",
      "organizations_url": "https://api.github.com/users/m0rtis0/orgs",
      "repos_url": "https://api.github.com/users/m0rtis0/repos",
      "events_url": "https://api.github.com/users/m0rtis0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m0rtis0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-02T17:05:37Z",
    "updated_at": "2021-01-03T17:49:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI am working on a small 2D platformer game in pixelart style with Animations composed of Frames as png files\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen using the SpriteFrames Resource to add animations to my main character I cannot specify any offset or cropping\r\nfor one animation or one frame. To crop or offset the frame I have to go to a program like GIMP for each frame and do it manually\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nHaving separate fields for Offset and Cropping in the SpriteFrames dock will make importing Animations that are not cropped/offset perfectly much easier \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIn the SpriteFrames dock there should be editing possibilities for these values, for example beside the \"FPS\" option or in the inspector\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot really, this would be implemented as a core editor functionality, however it is entirely optional to use, because if the values are left in the default state (no cropping, no offset) they do not affect the outcome in any way\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nChanges to core editor nodes/systems like the SpriteFrames and the AnimatedSprite are a bit impractical for addons to tweak.\r\n\r\n### Reference ###\r\nI am going to reference the original request in the main repo's issues here for further information and convenience:\r\n[Reference](https://github.com/godotengine/godot/issues/27328)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2060/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2059",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2059/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2059/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2059/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2059",
    "id": 777481810,
    "node_id": "MDU6SXNzdWU3Nzc0ODE4MTA=",
    "number": 2059,
    "title": "Allow disabling the built-in script editor when using an external script editor",
    "user": {
      "login": "BenMcLean",
      "id": 1747250,
      "node_id": "MDQ6VXNlcjE3NDcyNTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1747250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenMcLean",
      "html_url": "https://github.com/BenMcLean",
      "followers_url": "https://api.github.com/users/BenMcLean/followers",
      "following_url": "https://api.github.com/users/BenMcLean/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenMcLean/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenMcLean/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenMcLean/subscriptions",
      "organizations_url": "https://api.github.com/users/BenMcLean/orgs",
      "repos_url": "https://api.github.com/users/BenMcLean/repos",
      "events_url": "https://api.github.com/users/BenMcLean/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenMcLean/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-01-02T15:57:54Z",
    "updated_at": "2021-01-02T17:32:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nWolfenstein 3-D VR remake https://github.com/BenMcLean/WOLF3D-Godot\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGodot keeps opening my C# scripts and saving over them when it shouldn't. I have to keep undoing the changes it makes to my code indentation. (of tabs vs spaces)\r\n\r\nI don't want to use the Godot editor as a code editor. I use Visual Studio Community 2019. Yes, I know it's unsupported [for now](https://github.com/godotengine/godot-csharp-visualstudio), but it has good accessibility features for my bad eyesight and all my plugins and addons. I use it daily for C# coding at work and just don't want to switch when it's time to code games.\r\n\r\nI believe the problem I'm having would affect anyone using any unsupported code editor.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nGodot should allow disabling code editing in the editor as an option.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nUnder Editor settings... -> Mono -> Editor -> External Editor, the \"External Editor\" setting should just be called \"Code Editor\" instead and the choice that's currently called \"Disabled\" should be called \"Internal\" and a new \"Disabled\" setting should simply not open anything when it's time to edit code.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot really.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's part of the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2059/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2058",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2058/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2058/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2058/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2058",
    "id": 777168704,
    "node_id": "MDU6SXNzdWU3NzcxNjg3MDQ=",
    "number": 2058,
    "title": "Add Editor Setting to disable large Arrays/Dictionaries being split into Pages",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-01-01T00:50:23Z",
    "updated_at": "2021-01-01T23:30:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGame Project\r\n\r\n### Describe the problem or limitation you are having in your project\r\nAny exported array with more than 10 entries is automatically split into multiple pages. The pages aren't all that clearly indicated, which often leads me to forget about them. Especially while working with arrays with sizes of 11 or 12, I tend to forget to check the next page. Pages also make it more work to add resources to an array/dictionary, since it requires additional clicks to switch page.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/103431600-e7da7080-4bd2-11eb-9422-907a637e5926.png)\r\n\r\nI would like a setting to **disable the creation of pages on exported Arrays/Dictionaries**\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAn editor setting in `Editor Settings > Interface > Inspector` which allows disabling the pages, and instead lists the entire array/dictionary as one long list. The Inspector can already be scrolled, so that shouldn't be a large issue.\r\n\r\nAlternatively, if this is deemed a bad idea in case someone makes an extremely long array and exports it: Add a similar setting that allows us to set the `Entries per Page`. If I can make the amount of entries per page 50 or so, that'll fix any issues I'm having as well.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSee above\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nCan be worked around by using the Page-system. I think most developers would like to see more than 10 entries per page, if not all entries, by default.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nCore: Setting for a Core feature's UI",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2057",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2057/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2057/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2057/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2057",
    "id": 777118972,
    "node_id": "MDU6SXNzdWU3NzcxMTg5NzI=",
    "number": 2057,
    "title": "Add access to more file properties such as creation date",
    "user": {
      "login": "Bruce200",
      "id": 53529192,
      "node_id": "MDQ6VXNlcjUzNTI5MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/53529192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bruce200",
      "html_url": "https://github.com/Bruce200",
      "followers_url": "https://api.github.com/users/Bruce200/followers",
      "following_url": "https://api.github.com/users/Bruce200/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bruce200/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bruce200/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bruce200/subscriptions",
      "organizations_url": "https://api.github.com/users/Bruce200/orgs",
      "repos_url": "https://api.github.com/users/Bruce200/repos",
      "events_url": "https://api.github.com/users/Bruce200/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bruce200/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-31T19:25:37Z",
    "updated_at": "2020-12-31T19:45:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\nPlease fill in *all* the questions below and don't remove any of them.\nProposals not following the template below will be closed immediately.\n-->\n\n### Describe the project you are working on\nI am working on a quick file management tool to sort picture and other files into folders based on creation date. Godot's easy visual aspect made me want it, rather than having to write some UI myself.\n\n### Describe the problem or limitation you are having in your project\nGodot supports getting the time at which a file was modified through use of File.get_modified_time(), but does not support the retrieval of any other file properties. These include getting the original creation date, which my entire program is based on.\n\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\nAdding either more functions similar to get_modified_time() or a more general-purpose File.get_property(property) would allow users to access more file properties. It would allow the programmer to get things like the creation date of a file and do more with files using Godot.\n\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\nFile.get_property() will take in an int of the property to retrieve from a file's properties. Enums will be implemented to make these codes easier to remember. If the file has not been given the desired property, the function can return an empty string.\n```file = File.new()\nfile.open(\"my-file.txt\")\ncreation_date = file.get_property(FILE_CREATION_DATE)\nif creation_date != \"\":\n     print(\"File was create on \" + OS.get_datetime_from_unix_time(creation-date))\nelse:\n     print(\"File did not have a creation date\")\n```\n\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\nTo the best of my knowledge there is no way in GDScript to do this. I believe the only way to do what this would allow for would be through GDNative C++ using special headers, but have not tried this route.\n\n### Is there a reason why this should be core and not an add-on in the asset library?\nThis feature would be a very useful one, and would allow creators using Godot to work with files in a whole new way. This expands the potential of Godot past being a game engine, as many programs use things like \"Date Created\" in places like their project menus and properties editors. This is also quite a small feature, making adding it to the Asset Library seem like overkill in a sense.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2057/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2055",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2055/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2055/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2055/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2055",
    "id": 777109290,
    "node_id": "MDU6SXNzdWU3NzcxMDkyOTA=",
    "number": 2055,
    "title": "Provide a better platform for polling community about features",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-31T18:42:49Z",
    "updated_at": "2021-01-02T23:40:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot engine 🎉 \r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhile the proposals are supposed to be the way to discuss things that the community wants in future versions of the engine, and measure the level of support from said community for each particular feature, it seems that the core team is relying more and more on their Twitter followers to gather public opinion about a proposed change.\r\n\r\nThis is a bad way to do it. First of all, the obvious and shared between all such instances problem is the audience. I'm sure a lot of people follow Reduz, Akien, and other members of the core team. However, Twitter is just one social platform. Not everyone uses it, so not everyone notices those polls or has an ability to cast a vote even if they get a direct link. The system is also easily abused and it harms the openness of the process.\r\n\r\nSecondly, Twitter is not designed to discuss things in an organized manner, neither it is designed to provide clear comparisons between options. Two times in the recent history people were dissatisfied with how the information was presented about proposed changes, which skewed opinions towards one option or the other.\r\n\r\nAnd just to make it clear that I am not angry that *my favorite* changes are getting rejected, the first time I am referring to has been about the float and integer division, where I stand with the core team on the final decision. But it doesn't mean that the way the information has been gathered hasn't affected the votes. There were several complaints that not everything about the options was obvious from the initial posts. And for every person who have complained there are several who just vote without realizing there is a problem with the presentation.\r\n\r\nThe second time I am referring to has been in the last couple of days with the editor coding font change. People were supposed to make a decision about a coding font based on a pair of blurry and compressed images which were hard to flip through without using external help. And some people even admitted to comparing those pictures on their phones. How good of a decision can a person make about their coding font preferences, when they check pictures of fonts on their phones?\r\n\r\nBut, despite the stated downsides, Twitter is still used as a platform to gather public opinions with dry numbers as opposed to weighted comments and arguments. In fact, it is the cases where there are weighted comments and arguments that provoke Twitter polls to appear.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSo in the current decision making process there is a clear desire to poll a large group of people to make as inoffensive decision as possible. I'd argue that this is not a good way to proceed, but that's beyond the point of this proposal. Here let's discuss an implementation of a platform that would be more suited for PRs and proposals to be evaluated against masses.\r\n\r\nArguably, Github's reaction feature could be utilized to track thumbs up and thumbs down, but Twitter polls are used on top of it already, and even despite of it. So maybe we need more ease of use and accessibility with our polls. After all, not everyone has a GitHub account just like not everyone uses Twitter. So we need a platform that would use OAuth to allow users to authorize with any social account they want to cast a vote. Maybe such a platform already exists, but I am not aware of it. Besides, I think it should be hosted as a part of the official website and be a part of the open process of discussing the proposed changes.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nA webpage can exist that allows users of all social (Facebook, Twitter, Reddit, etc) and development (GitHub, GitLab, StackOverflow, etc) websites to cast a signed vote in a poll in support or against of something. There doesn't need to be an account system or anything. OAuth can be used to sign votes and that's it. We wouldn't even need to store their emails or other tokens, if this is implemented properly.\r\n\r\nEach proposed change would have its own page linking to the issue on GitHub. The options would need to be clearly presented by the author of the poll. As such, the page should allow not only for text, but for code blocks and images. A feature to compare with a click of a button two code blocks or two images would also be nice, as it would allow for a lot of subtle differences to pop out. Pretty sure there are libraries and services out there that could be utilized to implement this with minimal effort.\r\n\r\nI'd also propose that a creator of the GitHub proposal or PR could make such a poll themselves, but that would require more work to implement securely, and would most likely result in a lot of unneeded polls. So keeping the right to create polls reserved to the core team and people with the website control panel access may be a better option still.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis is a meta proposal.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is a meta proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2055/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2054",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2054/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2054/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2054/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2054",
    "id": 777107436,
    "node_id": "MDU6SXNzdWU3NzcxMDc0MzY=",
    "number": 2054,
    "title": "Add functions to get more locale/regionalisation information such as date/time/number format",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-31T18:32:55Z",
    "updated_at": "2020-12-31T18:37:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Describe the problem or limitation you are having in your project\r\nIt doesn't seem to be possible to get a lot of local/regionalisation information from OS.\r\n\r\nBy using Godot to get this information from the OS, it's possible to have games automatically be correctly localised, i.e. by using the user's preferred currency symbol and date format.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or \r\n\r\nMake further information about the systems regionalisation settings available to the user.\r\n* Preferred Date format\r\n* Preferred Time format\r\n* Preferred number format\r\n* Currency symbol\r\n\r\nThese are all things that are available from the OS, at least on Windows, and I expect *nix, Macs.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWhat Microsoft C# calls Culture Info:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=net-5.0\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI'd suggest it belongs in the core library of any game engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2053",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2053/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2053/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2053/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2053",
    "id": 777106020,
    "node_id": "MDU6SXNzdWU3NzcxMDYwMjA=",
    "number": 2053,
    "title": "Add a templated singleton class which singletons (e.g. EditorFileSystem) would inherit from",
    "user": {
      "login": "KiritoAM",
      "id": 64373952,
      "node_id": "MDQ6VXNlcjY0MzczOTUy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/64373952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KiritoAM",
      "html_url": "https://github.com/KiritoAM",
      "followers_url": "https://api.github.com/users/KiritoAM/followers",
      "following_url": "https://api.github.com/users/KiritoAM/following{/other_user}",
      "gists_url": "https://api.github.com/users/KiritoAM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KiritoAM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KiritoAM/subscriptions",
      "organizations_url": "https://api.github.com/users/KiritoAM/orgs",
      "repos_url": "https://api.github.com/users/KiritoAM/repos",
      "events_url": "https://api.github.com/users/KiritoAM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KiritoAM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-31T18:25:40Z",
    "updated_at": "2020-12-31T21:04:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nAny project\r\n\r\n### Describe the problem or limitation you are having in your project\r\nEach singleton class currently has to have it's own `get_singleton()` method created.\r\nAlso I have noticed that a lot of singletons are created and referenced in global vars in certain files (to be deleted when necessary in `ThisClass::cleanup()` etc). For example, in `godot/main/main.cpp` there are various static objects at the top of the file (e.g. `static PackedData *packed_data = nullptr;`). \r\nThen in `Main::setup()`, we create the singleton if it doesn't exist (which I don't think it will for many):\r\n```cpp\r\npacked_data = PackedData::get_singleton();\r\nif (!packed_data) {\r\n    packed_data = memnew(PackedData);\r\n}\r\n```\r\nand we handle it's deletion in Main::cleanup\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe singleton class would have static create and destroy methods to avoid the design pattern outlined above.\r\nThere would also be another class (AutomaticSingleton) alongside the singleton class (ManualSingleton). The point of this class would be for situations where we want to create the singleton when `get_singleton()` is first called, rather than finding a place in code to manually create it via `create_singleton()`\r\nAdditionally, the singleton classes can prevent singleton class from being copied by deleting the copy constructor \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAn example of ManualSingleton being used: \r\n```cpp\r\nclass EditorFileSystem : public ManualSingleton\\<EditorFileSystem>, public Node {\r\n```\r\n\r\nA rough idea of the class implementations would be the below:\r\n\r\n```cpp\r\ntemplate\\<typename TYPE>\r\nclass MANUAL_SINGLETON\r\n{\r\npublic:\r\n\tstatic bool is_available();\r\n\tstatic void create_singleton();\r\n\tstatic TYPE* get_singleton();\r\n\tstatic void destroy_singleton();\r\n\r\nprotected:\r\n        inline static TYPE* singleton{ nullptr };\r\n};\r\n\r\ntemplate<typename TYPE>\r\nclass AUTOMATIC_SINGLETON : public MANUAL_SINGLETON<TYPE>\r\n{\r\nclass CREATOR\r\n{\r\nCREATOR()\r\n{\r\nMANUAL_SINGLETON<TYPE>::create_singleton();\r\n}\r\n\r\n~CREATOR()\r\n{\r\nMANUAL_SINGLETON<TYPE>::destroy_singleton();\r\n}\r\n};\r\n\r\npublic:\r\n\tstatic TYPE& get_singleton(); //!< Will create the singleton on first call using static instance of CREATOR. Will call MANUAL_SINGLETON<TYPE>::get_singleton\r\n\r\nprivate:\r\n\tusing MANUAL_SINGLETON<TYPE>::create_singleton;\r\n        using MANUAL_SINGLETON<TYPE>::destroy_singleton;\r\n};\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis enhancement is an c++ architectural change, which wouldn't be implementable in script.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis enhancement is an c++ architectural change for core.\r\n\r\n\r\nNote: happy to do this myself",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2051",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2051/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2051/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2051/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2051",
    "id": 776524615,
    "node_id": "MDU6SXNzdWU3NzY1MjQ2MTU=",
    "number": 2051,
    "title": "Add numpad 0,2,4,6,8,9 to viewport camera options",
    "user": {
      "login": "robbertzzz",
      "id": 7684647,
      "node_id": "MDQ6VXNlcjc2ODQ2NDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7684647?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robbertzzz",
      "html_url": "https://github.com/robbertzzz",
      "followers_url": "https://api.github.com/users/robbertzzz/followers",
      "following_url": "https://api.github.com/users/robbertzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/robbertzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robbertzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robbertzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/robbertzzz/orgs",
      "repos_url": "https://api.github.com/users/robbertzzz/repos",
      "events_url": "https://api.github.com/users/robbertzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robbertzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-30T16:00:50Z",
    "updated_at": "2020-12-31T10:09:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAny 3D game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe ability to quickly view objects from all sides like in Blender\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nGodot already has implemented the keys 1, 3, 5, 7 like they function in blender, but these only allow me to view the scene from the front, top and right and switching between orthographic/perspective. I'd like to have some more options for easier navigation just like they are in Blender.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIt should work exactly like in Blender, just like the 1, 3, 5 & 7 keys that already have been implemented. 2, 4, 6, 8 to spin around in the directions of the arrows on the keys, 9 to swap the view to the other side (which I _think_ is a 180 degree spin around the camera's local up axis), 0 to toggle camera view on and off (which should be the camera set to current). Even more ideal would be to also toggle it when the current camera is in a child scene.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nDoesn't make a lot of sense to write a script for something that's already partially implemented.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt improves an existing editor feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2051/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2049",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2049/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2049/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2049/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2049",
    "id": 776337147,
    "node_id": "MDU6SXNzdWU3NzYzMzcxNDc=",
    "number": 2049,
    "title": "Implement static objects and batching in Godot",
    "user": {
      "login": "Arnklit",
      "id": 4955051,
      "node_id": "MDQ6VXNlcjQ5NTUwNTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4955051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arnklit",
      "html_url": "https://github.com/Arnklit",
      "followers_url": "https://api.github.com/users/Arnklit/followers",
      "following_url": "https://api.github.com/users/Arnklit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arnklit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arnklit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arnklit/subscriptions",
      "organizations_url": "https://api.github.com/users/Arnklit/orgs",
      "repos_url": "https://api.github.com/users/Arnklit/repos",
      "events_url": "https://api.github.com/users/Arnklit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arnklit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-12-30T08:34:54Z",
    "updated_at": "2021-01-03T17:26:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nVarious 3D projects\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCreating large scenes with many identical objects in Godot is not performant due to the lack of batching.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI think Godot should have the concept of static objects that are automatically batched by the engine.\r\n\r\nI have heard that the reason Godot does not have the concept of static objects is that it is seen as confusing for beginners. I'd like to argue against that, there is inherently quite a bit of complexity in getting into 3D, but the idea of static objects is not more complicated than the concept of MultiMeshInstances or merging meshes with scripts and understanding how doing so incorrectly might make performance even worse due to lack of culling.\r\n\r\nCurrently when a new Godot user tries to make a big 3D scene and starts having issues. Rather than telling them. Set your static objects. We end up with discussions of how people should write their own complicated systems to handle MMIs or merge objects - not very user friendly.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nA \"static object\" checkbox on MeshInstances. Then the renderer should handle the batching for the user.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis enhancement would be used often.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nGood performance in 3D scenes should be built into the engine, not reliant on third party assets that might not be up to date.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2049/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2047",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2047/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2047/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2047/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2047",
    "id": 775929051,
    "node_id": "MDU6SXNzdWU3NzU5MjkwNTE=",
    "number": 2047,
    "title": "Add an icon indicating that the sub-resource tree is clickable in the Inspector",
    "user": {
      "login": "Omicron666",
      "id": 23405122,
      "node_id": "MDQ6VXNlcjIzNDA1MTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/23405122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Omicron666",
      "html_url": "https://github.com/Omicron666",
      "followers_url": "https://api.github.com/users/Omicron666/followers",
      "following_url": "https://api.github.com/users/Omicron666/following{/other_user}",
      "gists_url": "https://api.github.com/users/Omicron666/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Omicron666/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Omicron666/subscriptions",
      "organizations_url": "https://api.github.com/users/Omicron666/orgs",
      "repos_url": "https://api.github.com/users/Omicron666/repos",
      "events_url": "https://api.github.com/users/Omicron666/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Omicron666/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-29T14:45:57Z",
    "updated_at": "2020-12-29T18:20:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAny\r\n### Describe the problem or limitation you are having in your project\r\nConsistency/usability of hidden drop-drown submenu tree list with no visual hint\r\n\r\n![image](https://user-images.githubusercontent.com/23405122/103290793-a25b4f00-49ea-11eb-81ab-05419cda5c24.png)\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd same icon\r\n\r\n![image](https://user-images.githubusercontent.com/23405122/103290832-b69f4c00-49ea-11eb-8302-74c037106a2d.png)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAdd icon anchored to right side of title of dropdown menu, like down for other ui element. Since other drop down lists have it, it might just be a boolean to toggle, I don't know.\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is inspector itself",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2047/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2046",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2046/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2046/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2046/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2046",
    "id": 775879622,
    "node_id": "MDU6SXNzdWU3NzU4Nzk2MjI=",
    "number": 2046,
    "title": "Add optional `translation_name` argument to `tr()`",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-29T12:57:35Z",
    "updated_at": "2020-12-29T22:53:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Disclaimer\r\nI am not sure how impactful this request would be, since I'm not sure exactly whether our localization setup is common, nor how performance heavy translation is. If this addition would be more effort than it is worth, feel free to ignore the request.\r\n\r\n### Describe the project you are working on\r\nProject with localization\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWe decided to split up our `.translation files` in multiple, categorized sheets. That way it would be easier for us to organize translation keys, and handle possibly outsourcing translation/community translation. So we have a separate CSV sheet for 'resources', for 'ui_localization', for 'buildings', for 'tutorials' etc. That way we give each key some context as well, which might aid translation.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/103284964-07a84380-49dd-11eb-9c05-91f03d328faf.png)\r\n\r\nDue to that setup, it often happens that I already know which of the files needs to be checked to handle a certain translation. After all, any `tr()` of a string in `resource.gd` will never handle anything to do with buildings or tutorials, only with resources. So it would (to my expectation), be more optimized to be able to indicate this when using the tr() function, to avoid having to check through ALL files.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nBeing able to specify which file should be checked, would likely be more efficient. Especially as more files, and more keys get added over the course of development.\r\n\r\n_As a small, (very!) niche, benefit, it could also help avoid with taking translations from the wrong file, if there are duplicate words/keys that need to be translated differently. 'logs' in resources will have a different translation to 'logs' in the settings menu. One refers to parts of a tree, while the other might refer to chat-logs. Specifying a specific file to take a translation from can avoid this issue._\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAdd an _optional_ argument to the `tr()` function. A string that can be added to indicate the filename of the translation, for example \"resources\" to **only** check translations in the file `resources.currentlocale.translation`.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/103284670-1fcb9300-49dc-11eb-8f67-a7a94429d70b.png)\r\n_The translation function with an optional argument. \"resources\" makes sure only a specific translation file is accessed to look for a translation_\r\n\r\nI am not sure what the best syntax for the argument would be. `translation_name` or `translation_filename` would be descriptive, but they are also a bit long.\r\n\r\nLastly this request obviously overlooks the automatic translations done on `labels` throughout the project. Being able to indicate the same on those would be just as useful, but for the sake of this request I am keeping this at the `tr()` function only, since that seems less of a stretch.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nAs said above, I'm not sure if this is a common setup for translation files. Neither am I sure whether adding such an argument would cause enough of an optimization, to make it worth the effort.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nCore: modification of a core function\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2046/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2045",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2045/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2045/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2045/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2045",
    "id": 775851540,
    "node_id": "MDU6SXNzdWU3NzU4NTE1NDA=",
    "number": 2045,
    "title": "Profiler update suggestions",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-29T11:47:26Z",
    "updated_at": "2020-12-29T18:18:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n2d platformer\r\n\r\n### Describe the problem or limitation you are having in your project\r\nProfiler limitations\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nUsing the profiler I'm finding features I wish was there as they're slowing things down or simply missing from what I'd hope most people would like in the profiler.\r\n\r\n1. Provide ability to profile more than 10 seconds as it seems to wrap just the last 10 seconds\r\n2. Provide a zoom so you can more easily go to the exact frames you want as sometimes with the screen constraints it's quite small\r\n3. Automatic profiling to filter or highlight sections that consume large amounts of frame time making it easier to find 'self' problems\r\n4. A lot of the time the fault is not in own code, e.g. I get 900% 'physics' for the first half second of loading a scene, it would be nice to have a breakdown of what is happening inside the system entries, e.g. what is actually taking up 900% physics other than simply showing the ':O' emoji ;-)\r\n\r\nAs example below, it's hard to go to the exact lag spike visually, there is nothing to tell me what the system is doing with 616% physics time and I'm limited to 10 seconds of view time.\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/103281838-e3903680-49cb-11eb-8270-f58b71be8ced.png)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAs above, updated profiler abilities\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\ndebugging lag is hard, the profiler is the only tool and is lacking.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2045/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2044",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2044/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2044/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2044/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2044",
    "id": 775830968,
    "node_id": "MDU6SXNzdWU3NzU4MzA5Njg=",
    "number": 2044,
    "title": "Hide the 3D selection box when View Gizmos is disabled in the 3D editor viewport",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-29T10:57:14Z",
    "updated_at": "2020-12-29T11:44:26Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Continuing discussion from https://github.com/godotengine/godot/issues/44779.*\r\n\r\n### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThe 3D selection box can get in the way when you want to preview 3D materials. This has always been an issue, but it became more noticeable with the [new 3D selection box appearance](https://github.com/godotengine/godot/pull/40106) that was merged in the `master` and `3.2` branches (for 3.2.4).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAdd a way to *temporarily* hide the 3D selection box while still having something selected (so you can edit it).\r\n\r\nNow that https://github.com/godotengine/godot/pull/44782 is merged, it's easy to hide the 3D selection box *permanently*, but this is rarely desired.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nOne way to temporarily hide the 3D selection box would be to make it obey the **View Gizmos** setting which can be toggled in the 3D viewport's **Perspective** menu.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core editor functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2044/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2043",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2043/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2043/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2043/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2043",
    "id": 775756953,
    "node_id": "MDU6SXNzdWU3NzU3NTY5NTM=",
    "number": 2043,
    "title": "Remove `rect_` prefix from Control node properties (for compatibility with Node2D)",
    "user": {
      "login": "LotsaBugs",
      "id": 52873190,
      "node_id": "MDQ6VXNlcjUyODczMTkw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/52873190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LotsaBugs",
      "html_url": "https://github.com/LotsaBugs",
      "followers_url": "https://api.github.com/users/LotsaBugs/followers",
      "following_url": "https://api.github.com/users/LotsaBugs/following{/other_user}",
      "gists_url": "https://api.github.com/users/LotsaBugs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LotsaBugs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LotsaBugs/subscriptions",
      "organizations_url": "https://api.github.com/users/LotsaBugs/orgs",
      "repos_url": "https://api.github.com/users/LotsaBugs/repos",
      "events_url": "https://api.github.com/users/LotsaBugs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LotsaBugs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-29T07:54:19Z",
    "updated_at": "2020-12-30T14:46:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Preface\r\nThis is not so much an actual proposal, but rather an invitation for discussion.\r\nSeeing that there seems to be demand for renaming `translation` to `position` for 3D nodes for consistency with 2D nodes, I would like to point out a frustrating issue I have come across in my own projects regarding `Node2D` and `Control` nodes.\r\n\r\n### Describe the project you are working on\r\n(Applies to any project)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe fact that there exists 2 different property names between `Control` nodes `Node2D` nodes for the same thing can be a real headache.\r\n`Control`: `rect_scale`, `rect_position`, `rect_global_position`\r\n`Node2D`: `scale`, `position`, `global_position`\r\n\r\nThe problem arises when you are setting up your project to use (for example) `TextureRects` for displaying images, but then later decide to use `Sprite` nodes instead, to make use of the `z_index` property in `Node2Ds`. \r\n(adding a `z_index` property to `Control` nodes is another topic of debate)\r\n\r\nNow all of your code that had previously been written with `rect_*` needs to be edited to remove the `rect_` prefix for the code to work. (Or vice-versa when converting from `Node2D` to `Control` nodes).\r\nThis is annoying at best.\r\n\r\nThere are workarounds, such as using the `_set_position(...)`, `get_position()`, `_set_size(...)`,  and `get_size()` etc.,  functions, which both `Control` and `Node2D` share, but this is not the first thing that comes to mind to a new user, especially because of the fact that there is no autocomplete for these setter/getter functions. The user has to copy/paste the names of these functions from the documentation to use them.\r\n\r\nAnother workaround which I've used is to create a function which checks the type of the node (`Control` or `Node2D`), and uses the relevant property name to get/set it.\r\nBut now you have a new set of functions that you have to remember to use in order to avoid this problem.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSimply remove the `rect_` prefix for properties of `Control` nodes, so that they match the names of `Node2D` nodes.\r\nThat way, the code doesn't break if you later decide to switch to using a different type of node in your scene.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n(See above)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis would be used in any project that makes heavy use of `Node2D` and `Control` nodes.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis would be a change to the built-in property name of `Control` nodes.\r\n\r\n### Note\r\nThere may be a good reason for why `Control` nodes use a `rect_` prefix for everything, but I'm not aware of it.\r\nThis seems like an unnecessary differentiation between `Node2D` nodes with no obvious benefit, but I would like to hear your thoughts.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2042",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2042/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2042/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2042/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2042",
    "id": 775603801,
    "node_id": "MDU6SXNzdWU3NzU2MDM4MDE=",
    "number": 2042,
    "title": "\"Ignore\" logging items via the Debugger>Errors list.",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-28T22:00:54Z",
    "updated_at": "2020-12-28T22:18:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\n\"Errors\" that are not errors in the Debugging Error log are often spurious and can obscure genuine errors. For example: https://github.com/godotengine/godot/issues/44771\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\n* Add the \"Ignore\" ability to the Debugger>Errors list. This functionality already exists on the bottom-of-script error panel, but adding it to the error console too will make it easier to access and more obvious.\r\n\r\nI had other logging suggestions, but it seems they've already been suggested:\r\nhttps://github.com/godotengine/godot/issues/19122\r\nhttps://github.com/godotengine/godot/issues/7095\r\n\r\nThere's also a promising PR:\r\nhttps://github.com/godotengine/godot/pull/41321\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAs above.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nn/a\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nn/a\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2042/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2041",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2041/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2041/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2041/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2041",
    "id": 775573487,
    "node_id": "MDU6SXNzdWU3NzU1NzM0ODc=",
    "number": 2041,
    "title": "Add descriptions/tooltips to properties in the Import dock",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-28T20:25:28Z",
    "updated_at": "2020-12-28T20:27:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*See also #1339 and #1955.*\r\n\r\n### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nProperties in the Import dock currently can't have any descriptions:\r\n\r\n![Import dock tooltip for `flags/repeat`](https://user-images.githubusercontent.com/180032/103241305-10ecce00-4953-11eb-8b26-fcaeebb4c947.png)\r\n\r\nA lot of properties don't behave in an obvious manner (such as lossy compression quality for textures). This makes it important to document those properties in an easily accessible way.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nWhen hovering a property in the Import dock, display a tooltip with documentation.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nFigure out a way to document import properties in the class reference by exposing them somehow. Maybe expose dummy classes for each imported resource type so they can be listed in the class reference?\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo, as this is core editor/documentation system functionality.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core editor/documentation system functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2041/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2040",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2040/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2040/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2040/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2040",
    "id": 775561737,
    "node_id": "MDU6SXNzdWU3NzU1NjE3Mzc=",
    "number": 2040,
    "title": "Add a `get_buttons()` method to AcceptDialog",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-28T19:52:15Z",
    "updated_at": "2020-12-29T10:42:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nReaction game\r\n### Describe the problem or limitation you are having in your project\r\nI cannot access a Button of a ConfirmationDialog without creating a variable.\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI could access a Button and so change the text or generally do something with it.\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAcceptDialog `get_buttons()`\r\nReturns an Array of the existing Buttons.\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nYes, it is useful for every sort of project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2037",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2037/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2037/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2037/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2037",
    "id": 775256160,
    "node_id": "MDU6SXNzdWU3NzUyNTYxNjA=",
    "number": 2037,
    "title": "Add a 'mute' button beside audio nodes on the scene tree",
    "user": {
      "login": "ShawkMusic",
      "id": 48574225,
      "node_id": "MDQ6VXNlcjQ4NTc0MjI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48574225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShawkMusic",
      "html_url": "https://github.com/ShawkMusic",
      "followers_url": "https://api.github.com/users/ShawkMusic/followers",
      "following_url": "https://api.github.com/users/ShawkMusic/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShawkMusic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShawkMusic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShawkMusic/subscriptions",
      "organizations_url": "https://api.github.com/users/ShawkMusic/orgs",
      "repos_url": "https://api.github.com/users/ShawkMusic/repos",
      "events_url": "https://api.github.com/users/ShawkMusic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShawkMusic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-28T07:39:21Z",
    "updated_at": "2020-12-29T01:05:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSomething that has audio\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI want to quickly mute some audio nodes, the same way I can hide/unhide visual nodes by clicking on the Eye icon on the scene tree\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nA toggle mute button next to audio based nodes (AudioStreamPlayer, AudioStreamPlayer2D, AudioStreamPlayer3D and any other audio nodes I might be forgetting or that might be added later on), the same way there's a toggle visibility node next to visual nodes to quickly show/hide them.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe mute icon, on and off, with a visual node having it's visibility turned on and off as well for reference (it would work the same but audibly instead of visibly)\r\n![Screenshot (132) edited](https://user-images.githubusercontent.com/48574225/103197998-2e6b5a80-48b5-11eb-8af0-d026c1417825.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nSame reason the visibility toggle isn't. It's very convenient and probably won't bloat the engine, considering it's just a simple button that changes a value.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2037/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2036",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2036/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2036/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2036/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2036",
    "id": 775147249,
    "node_id": "MDU6SXNzdWU3NzUxNDcyNDk=",
    "number": 2036,
    "title": "Allow implementing and loading custom PCK file formats",
    "user": {
      "login": "Isolemma",
      "id": 76670045,
      "node_id": "MDQ6VXNlcjc2NjcwMDQ1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/76670045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Isolemma",
      "html_url": "https://github.com/Isolemma",
      "followers_url": "https://api.github.com/users/Isolemma/followers",
      "following_url": "https://api.github.com/users/Isolemma/following{/other_user}",
      "gists_url": "https://api.github.com/users/Isolemma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Isolemma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Isolemma/subscriptions",
      "organizations_url": "https://api.github.com/users/Isolemma/orgs",
      "repos_url": "https://api.github.com/users/Isolemma/repos",
      "events_url": "https://api.github.com/users/Isolemma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Isolemma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-28T01:37:42Z",
    "updated_at": "2020-12-28T01:45:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nA 2D game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThe PCK file contains plain texts and easily extractable resources.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nProvide interfaces to process data before writing/after reading the PCK file, so that the file format is essentially customized.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI find that the PCK file format is only read in PackedSourcePCK::try_open_pack, but is written in two places: EditorExportPlatform::save_pack and PCKPacker::flush.\r\n\r\nIf the two writing routines are unified, then it's easy to add pre/post-processing interfaces.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nI don't think so.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt's easy to implement and has no real performance impact.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2036/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2034",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2034/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2034/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2034/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2034",
    "id": 775068154,
    "node_id": "MDU6SXNzdWU3NzUwNjgxNTQ=",
    "number": 2034,
    "title": "Auto adjust tree width if icons from toolbar and node name overlap",
    "user": {
      "login": "MaaaxiKing",
      "id": 60623532,
      "node_id": "MDQ6VXNlcjYwNjIzNTMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/60623532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MaaaxiKing",
      "html_url": "https://github.com/MaaaxiKing",
      "followers_url": "https://api.github.com/users/MaaaxiKing/followers",
      "following_url": "https://api.github.com/users/MaaaxiKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaaaxiKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MaaaxiKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaaaxiKing/subscriptions",
      "organizations_url": "https://api.github.com/users/MaaaxiKing/orgs",
      "repos_url": "https://api.github.com/users/MaaaxiKing/repos",
      "events_url": "https://api.github.com/users/MaaaxiKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MaaaxiKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-27T16:31:22Z",
    "updated_at": "2020-12-27T18:34:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nTycoon Game\r\n### Describe the problem or limitation you are having in your project\r\nI could not read the name of a node.\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe tree would automatically adjust its width, so the node name would be readable.\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![Godot_Auto_Adjust_Tree_proposal](https://user-images.githubusercontent.com/60623532/103175258-e7f00e80-4868-11eb-88bb-84e865fa343b.png)\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nFirst, it will be used often. The automatical adjustment can not be worked around since it is core but manually, one could pull the window bigger.\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nYes, it's easy to implement and useful for everyone.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2033",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2033/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2033/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2033/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2033",
    "id": 775067553,
    "node_id": "MDU6SXNzdWU3NzUwNjc1NTM=",
    "number": 2033,
    "title": "Give CollisionShape2D the same tooling as Sprites in the editor for manipulation",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-27T16:27:23Z",
    "updated_at": "2020-12-27T16:59:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "It's subjective if this is a bug (inconsistency) or feature request.\r\n\r\n3.2.3\r\n\r\nCollisionShape2D only has a subset of editor features for manipulating it\r\n\r\nIf you add a Sprite to a project, the sprite has the following settings:\r\n* You can select all of the corners to resize it\r\n* you can select all of the sides to resize it\r\n* You can set Centered\r\n* You can set Offset\r\n* You can set Flip H\r\n* You can set Flip V\r\n\r\nConversely, a CollisionShape2D Rectangle only has the following:\r\n* Only the top right corner is adjustable\r\n* Only the top and right sides are adjustable\r\n\r\nThis inconsistency in tooling between them makes aligning them difficult. Especially the lack of not-Centred and inability to adjust via most of the vertices/sides.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nPort the Sprite stuff to CollissionShape2D - at least the Centered flag and the ability to select the other sides/vertices.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nn/a\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nn/a",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2033/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2031",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2031/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2031/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2031/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2031",
    "id": 774920998,
    "node_id": "MDU6SXNzdWU3NzQ5MjA5OTg=",
    "number": 2031,
    "title": "Add a Polygon3D node (equivalent to Polygon2D)",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-26T19:19:35Z",
    "updated_at": "2020-12-26T21:17:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nFirst person dungeon rpg.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nPoligon2D with all its tools is **great** for puppet-like animations and since i plan to make simple puppet-like animations but in 3D it would be awesome to have those functionalities, without those tools i have to make them in Blender(but it's cumbersome honestly) or directly in Godot but simpler(without deformation) or with Polygons2D rendered on a RenderTexture.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI simply want the 3d version of Polygon2D and its tool, it would make everything easier and faster.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAgain just a 3D version of Polygon2D and its tools.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI'm thinking of using Polygon2Ds for the sprites and then render them into a Sprite3D with a RenderTexture, you can understand it's not a great solution.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nAn add-on would be a good solution but since Polygon2D is integrated in Godot in my opinion it would be only natural for a Polygon3D to be integrated too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2031/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2030",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2030/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2030/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2030/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2030",
    "id": 774918707,
    "node_id": "MDU6SXNzdWU3NzQ5MTg3MDc=",
    "number": 2030,
    "title": "Make the emission visible outside of the albedo visible area",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-26T19:00:34Z",
    "updated_at": "2020-12-27T11:44:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nFirst person dungeon rpg\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI wanted to make the eyes of enemies glow in the dark but the glow is limited to the visible parts of the albedo texture.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe glow is usually bigger than the emitter, so it makes sense that the non-transparent area of the emitter is smaller than the one of the glow, hence it should be possible to specify the alpha for both the albedo and the emission, also a mix mode in addition to add and multiply would be good too.\r\n\r\nAlternative and more advanced/complex solution: the emission texture specifies the shape and color of the emitter, not the glow, while Godot calculates the glow thanks to other parameters like glow range and attenuation curve similar to a Spotlight.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSimply make Godot take into account the alpha of the emission texture so it's visible outside of the albedo texture visible area, also a mix mode would be nice too.\r\n\r\nFor the alternative and more advanced/complex solution: there would be the emission texture representing the emitter, a range parameter and an attenuation curve similar to Spotlight to generate the glow\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI'm actually using static Sprite3D so in my case a simple workaround is to use 2 sprites, one for the shaded albedo and one unshaded with the emission texture used as albedo, but it's not a good solution especially because i'll probably add small animations to the sprites, and definitively it's not good at all for meshes.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt seems to me this is a core issue, but i would also be happy with an add-on or other solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2030/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2029",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2029/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2029/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2029/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2029",
    "id": 774915308,
    "node_id": "MDU6SXNzdWU3NzQ5MTUzMDg=",
    "number": 2029,
    "title": "Add a \"Preview Bake\" button for BakedLightmap for quick preview bakes",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-26T18:30:43Z",
    "updated_at": "2020-12-26T18:34:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nWith https://github.com/godotengine/godot/pull/44628 and in the `master` branch, BakedLightmap can make great-looking scenes. However, the bake time is often too long to quickly iterate on. This is especially true as your scene gets more complex.\r\n\r\nThe user can temporarily switch to lower quality settings in the BakedLightmap node, but this is cumbersome and you risk accidentally committing the new settings to version control. This can cause difficult-to-diagnose issues down the line.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nWhen baking lightmaps, allow using low-quality settings in a *temporary* manner that doesn't affect the BakedLightmap's quality properties.\r\n\r\nThis kind of feature has been available for decades in various 3D modellers and map editors such as [GtkRadiant](http://icculus.org/gtkradiant/), so there's a fair amount of track record for it.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nWhen a BakedLightmap node is selected, show 2 buttons in the 3D viewport context menu instead of one:\r\n\r\n- **Preview Bake.** This bakes using low-quality settings defined in the editor settings (or perhaps project settings, for consistency across project members).\r\n- **\"Final\" Bake** (name is subject to change). This uses the quality settings defined in the BakedLightmap node.\r\n\r\nMake sure to add tooltips to each button to explain the difference.\r\n\r\nIf the user has performed a preview bake, there should be some kind of watermark on the 3D viewport to inform the user when the BakedLightmap node is selected. This is to make sure people don't ship preview bakes to production :slightly_smiling_face: \r\nStill, saving the scene with a preview bake should be allowed so that you can run your project to preview the lightmap.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThis can likely be implemented in an add-on, but it's not exactly trivial.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is about improving the user experience by decreasing iteration times, so I'd argue it's important to have this in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2029/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2028",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2028/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2028/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2028/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2028",
    "id": 774903495,
    "node_id": "MDU6SXNzdWU3NzQ5MDM0OTU=",
    "number": 2028,
    "title": "GDNative: View custom docs from the editor.",
    "user": {
      "login": "LennyPhoenix",
      "id": 57148878,
      "node_id": "MDQ6VXNlcjU3MTQ4ODc4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/57148878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LennyPhoenix",
      "html_url": "https://github.com/LennyPhoenix",
      "followers_url": "https://api.github.com/users/LennyPhoenix/followers",
      "following_url": "https://api.github.com/users/LennyPhoenix/following{/other_user}",
      "gists_url": "https://api.github.com/users/LennyPhoenix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LennyPhoenix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LennyPhoenix/subscriptions",
      "organizations_url": "https://api.github.com/users/LennyPhoenix/orgs",
      "repos_url": "https://api.github.com/users/LennyPhoenix/repos",
      "events_url": "https://api.github.com/users/LennyPhoenix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LennyPhoenix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-12-26T16:57:36Z",
    "updated_at": "2020-12-27T23:12:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nA Discord Game SDK wrapper for Godot, written in C using nativescript.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nAlthough, nativescript 1.1 gives us the ability to set class, method, signal and property documentation via `nativescript_1_1_api->godot_nativescript_set_X_documentation`, there is no way to view these docs other than calling `CLASSNAME.get_X_documentation()` in GDScript.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAllow the built-in script editor to display these custom-defined docs.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nHere is a mockup using the [GDNative example from the docs](https://docs.godotengine.org/en/stable/tutorials/plugins/gdnative/gdnative-c-example.html)\r\n\r\nDocs definition from C:\r\n```c\r\n    godot_string string;\r\n\r\n    api->godot_string_new(&string);\r\n    api->godot_string_parse_utf8(&string, \"<My class docs>\");\r\n    nativescript_1_1_api->godot_nativescript_set_class_documentation(p_handle, \"Simple\", string);\r\n    api->godot_string_destroy(&string);\r\n\r\n    api->godot_string_new(&string);\r\n    api->godot_string_parse_utf8(&string, \"<My method docs>\");\r\n    nativescript_1_1_api->godot_nativescript_set_method_documentation(p_handle, \"Simple\", \"get_data\", string);\r\n    api->godot_string_destroy(&string);\r\n```\r\n\r\nMockup of the docs in the editor: (Made in GIMP)\r\n![mockup](https://user-images.githubusercontent.com/57148878/103155867-45b62500-479b-11eb-9b92-a62ba414a635.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot that I know of.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThere is no way the add-on can interact with this as far as I know, that is the point of this proposal.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2028/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2027",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2027/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2027/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2027/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2027",
    "id": 774870737,
    "node_id": "MDU6SXNzdWU3NzQ4NzA3Mzc=",
    "number": 2027,
    "title": "Add an OS method to get the machine's hostname",
    "user": {
      "login": "Khaos66",
      "id": 4013009,
      "node_id": "MDQ6VXNlcjQwMTMwMDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4013009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Khaos66",
      "html_url": "https://github.com/Khaos66",
      "followers_url": "https://api.github.com/users/Khaos66/followers",
      "following_url": "https://api.github.com/users/Khaos66/following{/other_user}",
      "gists_url": "https://api.github.com/users/Khaos66/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Khaos66/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Khaos66/subscriptions",
      "organizations_url": "https://api.github.com/users/Khaos66/orgs",
      "repos_url": "https://api.github.com/users/Khaos66/repos",
      "events_url": "https://api.github.com/users/Khaos66/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Khaos66/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-26T12:55:08Z",
    "updated_at": "2020-12-27T12:55:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA small network game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe game should diaplay the IP and local machine name for others to be able to connect via machine name\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWith this change GDScript is able to aquire the local machine name and display it in an UI\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI prepared the change in my fork:\r\nhttps://github.com/KhaosCoders/godot-pg2/commit/d309c205f019839bf982195356018c9a3fb58c9c\r\n(windows only, I don't have another system to test)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot sure. Maybe if system environment variables are readable?\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nAccess of system property",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2027/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2026",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2026/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2026/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2026/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2026",
    "id": 774868411,
    "node_id": "MDU6SXNzdWU3NzQ4Njg0MTE=",
    "number": 2026,
    "title": "Expose thread IDs to scripting",
    "user": {
      "login": "Khaos66",
      "id": 4013009,
      "node_id": "MDQ6VXNlcjQwMTMwMDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4013009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Khaos66",
      "html_url": "https://github.com/Khaos66",
      "followers_url": "https://api.github.com/users/Khaos66/followers",
      "following_url": "https://api.github.com/users/Khaos66/following{/other_user}",
      "gists_url": "https://api.github.com/users/Khaos66/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Khaos66/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Khaos66/subscriptions",
      "organizations_url": "https://api.github.com/users/Khaos66/orgs",
      "repos_url": "https://api.github.com/users/Khaos66/repos",
      "events_url": "https://api.github.com/users/Khaos66/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Khaos66/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-12-26T12:34:55Z",
    "updated_at": "2020-12-27T16:57:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA small network game with multiple threads\r\n\r\n### Describe the problem or limitation you are having in your project\r\nLogging in multi-threaded environment is difficult.\r\nI want to be able to see which message was posted by which thread.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAllow GDScript to access the current thread ID\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI prepared the change in my fork:\r\nhttps://github.com/KhaosCoders/godot-pg2/commit/1feed85a46866981717633d3d7de13d3ba37c369\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n \r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBasic functionallity\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2026/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2024",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2024/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2024/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2024/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2024",
    "id": 774814787,
    "node_id": "MDU6SXNzdWU3NzQ4MTQ3ODc=",
    "number": 2024,
    "title": "Allow plugins to register shortcuts (and settings?) in the editor menu",
    "user": {
      "login": "dark-penguin",
      "id": 16963337,
      "node_id": "MDQ6VXNlcjE2OTYzMzM3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16963337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dark-penguin",
      "html_url": "https://github.com/dark-penguin",
      "followers_url": "https://api.github.com/users/dark-penguin/followers",
      "following_url": "https://api.github.com/users/dark-penguin/following{/other_user}",
      "gists_url": "https://api.github.com/users/dark-penguin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dark-penguin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dark-penguin/subscriptions",
      "organizations_url": "https://api.github.com/users/dark-penguin/orgs",
      "repos_url": "https://api.github.com/users/dark-penguin/repos",
      "events_url": "https://api.github.com/users/dark-penguin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dark-penguin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-12-26T03:22:05Z",
    "updated_at": "2020-12-30T14:11:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nAn editor plugin (a better Git integration attempt).\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI have a shortcut that opens the plugin window (and probably other shortcuts in the future). Currently, I have to either hard-code it, or create a Settings dialog with all the interface to customize the shortcut.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nBeing able to register at least shortcuts and maybe also settings would make them easier to implement, and also easier for the user to find all shortcuts in one place. We already have a \"Shortcuts\" menu and a \"Settings\" in the editor; we should not be having separate \"Shortcuts\" and \"Settings\" menus for each plugin.\r\n\r\nAlso, if we get #831 that helps make addons \"a part of the editor\", then this would greatly improve usability and the experience that addons really feel like an optional part of the editor.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWe could have `get_editor_interface().register_shortcut(myshortcut, \"self.show\")` that adds a new shortcut to the list of editor shortcuts under a separate \"My plugin\" group.\r\n\r\nThe same goes for settings. We could have `get_editor_interface().register_setting(\"Auto-add new files\", TYPE_BOOL, self.autoadd)` to register the plugin settings, which would then be added to the editor settings in a \"My plugin\" group.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nWe can create \"Settings\" dialogs in each plugin, and find a way to let the user find them easily, while the user is not even intuitively aware that there are more settings than in the editor settings menu. Then we have to code a shortcut picker, which has no way to detect clashes with other registered shortcuts. This is more then \"a few lines\", but it's possible.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIf such things were possible to implement with an addon, this wouldn't have been a problem in the first place. :)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2024/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2023",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2023/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2023/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2023/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2023",
    "id": 774791588,
    "node_id": "MDU6SXNzdWU3NzQ3OTE1ODg=",
    "number": 2023,
    "title": "Add a method to zero-initialize Pool*Arrays",
    "user": {
      "login": "Demindiro",
      "id": 17316999,
      "node_id": "MDQ6VXNlcjE3MzE2OTk5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17316999?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Demindiro",
      "html_url": "https://github.com/Demindiro",
      "followers_url": "https://api.github.com/users/Demindiro/followers",
      "following_url": "https://api.github.com/users/Demindiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/Demindiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Demindiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Demindiro/subscriptions",
      "organizations_url": "https://api.github.com/users/Demindiro/orgs",
      "repos_url": "https://api.github.com/users/Demindiro/repos",
      "events_url": "https://api.github.com/users/Demindiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Demindiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-12-25T22:20:52Z",
    "updated_at": "2020-12-29T18:21:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI'm working on a project that uses a large `PoolByteArray` for a grid.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI use the elements in the array as an index for another array. However, because `resize()` doesn't zero-initialize the array I get garbage data that causes out of bounds errors.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nOne way to fix it would be to have `resize()` zero-initialize the new elements, but this may have a significant performance impact in other code (e.g. code that overwrites the garbage data anyways). Instead I propose that another method is added that can be called if needed.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI suggest adding `zero_initialize()`*, which simply calls `memset` on the array.\r\n\r\nUsage:\r\n\r\n```gdscript\r\nvar arr := PoolByteArray()\r\narr.zero_initialize()\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nJust don't use it.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt cannot be done efficiently in GDScript and GDNative is impractical for this purpose.\r\n\r\n\r\n<sup>\\* I don't think this is a good name but I can't think of a better one right now.</sup>",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2023/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2022",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2022/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2022/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2022/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2022",
    "id": 774773582,
    "node_id": "MDU6SXNzdWU3NzQ3NzM1ODI=",
    "number": 2022,
    "title": "Provide a way to pass variables from fragment to light shader function",
    "user": {
      "login": "Chaosus",
      "id": 3036176,
      "node_id": "MDQ6VXNlcjMwMzYxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3036176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chaosus",
      "html_url": "https://github.com/Chaosus",
      "followers_url": "https://api.github.com/users/Chaosus/followers",
      "following_url": "https://api.github.com/users/Chaosus/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chaosus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chaosus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chaosus/subscriptions",
      "organizations_url": "https://api.github.com/users/Chaosus/orgs",
      "repos_url": "https://api.github.com/users/Chaosus/repos",
      "events_url": "https://api.github.com/users/Chaosus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chaosus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 23,
    "created_at": "2020-12-25T19:03:27Z",
    "updated_at": "2020-12-27T14:30:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nNot me, but the original issue from https://github.com/godotengine/godot/issues/18460\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIt's impossible to pass a variable from fragment to light. The analog of this is varying but it would work from vertex->fragment/light and this proposal is for fragment->light. Since light internally called from the fragment function I think it's completely possible to compile it with arguments.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThere are multiple ways to solve it by introducing new mechanics, which described below.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI came up with these ways, of course, they may not be ideal and other contributors may provide their own solutions:\r\n\r\n1) By introducing a local varying mechanism to be used inside fragment function:\r\n\r\n```\r\nvoid fragment() {\r\n\tvarying vec3 v = vec3(1, 1, 1);\r\n}\r\n\r\nvoid light() {\r\n\tDIFFUSE_LIGHT = v;\r\n}\r\n```\r\n\r\n2) By implementing optional parameters parsing in the light function:\r\n\r\n```\r\nvoid fragment() {\r\n\tv = vec3(1, 1, 1);\r\n}\r\n\r\nvoid light(vec3 v) {\r\n\tDIFFUSE_LIGHT = v;\r\n}\r\n```\r\n\r\n3) A separate hint for actual varyings:\r\n\r\n```\r\nvarying vec3 v : hint_fragment_to_light;\r\n\r\nvoid vertex() {\r\n   v = vec3(1, 1, 1); // ERROR - initialization of this varying is only available in fragment function\r\n}\r\n\r\nvoid fragment() {\r\n\tv = vec3(1, 1, 1);\r\n}\r\n\r\nvoid light() {\r\n\tDIFFUSE_LIGHT = v;\r\n    v = vec3(1, 1, 1); // setting here is also possible\r\n}\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNope\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nNo way to do it outside\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2022/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2021",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2021/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2021/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2021/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2021",
    "id": 774750438,
    "node_id": "MDU6SXNzdWU3NzQ3NTA0Mzg=",
    "number": 2021,
    "title": "Allow pre-rendering character sets in DynamicFont to avoid stalls during gameplay",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-25T15:38:18Z",
    "updated_at": "2020-12-27T13:45:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nDynamicFont can introduce stalls during gameplay when new characters are used, since they need to be rendered on the fly. These stalls are mainly noticeable on mobile/web platforms due to their slow CPUs.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAllow pre-rendering character sets in a DynamicFont to avoid stalls during gameplay. This moves the rendering cost to happen before anything in the game has started, which is arguably less annoying than stalls during gameplay.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAdd a \"Prerender Character Set\" enum property to DynamicFont with the following values:\r\n\r\n- Disabled\r\n- Numbers + Symbols (`0-9` + common symbols: `+ - * / : ; ,`)\r\n- ASCII (includes the above numbers and symbols, sufficient for English)\r\n- Latin-1 (includes characters required for English, French, German, Spanish, …)\r\n- Some way to specify a custom character set? It's not exactly reasonable to prerender the whole Unicode character set due to its size.\r\n\r\nWider character sets allow for better language support at the cost of longer prerendering times and higher memory usage.\r\n\r\nThe old BitmapFont importer in Godot 2.1 also offered similar functionality to restrict character sets (including a way to reference a text file that contained the characters you wanted to render).\r\n\r\nA question that remains is: Should we enable prerendering by default? I'd argue we should use ASCII prerendering by default (since it's very likely to help against jank in almost all situations), but there may be reasons not to do so.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThanks to https://github.com/godotengine/godot/pull/40491 (cc @RandomShaper), it can be worked around decently, but I'd still argue this should be a built-in feature to ensure a jank-free experience out of the box.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2021/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2020",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2020/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2020/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2020/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2020",
    "id": 774727422,
    "node_id": "MDU6SXNzdWU3NzQ3Mjc0MjI=",
    "number": 2020,
    "title": "Add a `_network_process()` method to complement `_process()` and `_physics_process()`",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-12-25T12:54:52Z",
    "updated_at": "2020-12-30T21:27:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Related to https://github.com/godotengine/godot-proposals/issues/236, https://github.com/godotengine/godot-proposals/issues/439, https://github.com/godotengine/godot-proposals/issues/1936, and https://github.com/godotengine/godot-proposals/issues/1939.*\r\n\r\n### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThere is no built-in way to send network data at a different rate than the physics update rate. However, you may want to do that to have accurate/low-latency client-side prediction but keep the network bandwidth usage low.\r\n\r\nWhile 60 Hz network updates are a good baseline nowadays, large-scale/MMO games may have to settle for 30 Hz or even 20 Hz updates to keep the bandwidth usage manageable.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nLike `_process(delta)` and `_physics_process(delta)`, call `_network_process(delta)` every `1 / network_fps` seconds if it's present in a node script.\r\n\r\nExposing the network FPS as a global value also allows easily changing the value to accomodate server load or playing conditions. This is often done in battle royale games to increase network smoothness as the number of alive players decreases.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAdd `Engine.network_fps` (integer) to complement `Engine.physics_fps`. Also add the associated project setting like for physics FPS.*\r\n\r\n*: If we rename `Engine.physics_fps` to `Engine.physics_ticks_per_second`, we should name `Engine.network_fps` `Engine.network_ticks__per_second` instead.\r\n\r\nThe default value would be 60 (identical to the physics FPS in 3.2.x). Unlike physics FPS, it will not vary depending on the monitor's refresh rate (if support for that is implemented in 4.0).\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nYes, but it's not exactly trivial to do so over a whole codebase. For instance, you could use the following code:\r\n\r\n```gdscript\r\nfunc _physics_process(delta):\r\n    # Only send our player position every two frames (30 Hz if physics run at the default 60 Hz).\r\n    if Engine.get_physics_frames() % 2 == 0:\r\n        rset(\"position\", Vector2(12, 34))\r\n```\r\n\r\nOn top of that, the above code snippet will break if variable physics update rate is implemented in 4.0.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core engine functionality that can't be implemented at low-level by an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2020/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2019",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2019/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2019/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2019/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2019",
    "id": 774579901,
    "node_id": "MDU6SXNzdWU3NzQ1Nzk5MDE=",
    "number": 2019,
    "title": "Add an easing property to 3D transform animation keyframes",
    "user": {
      "login": "vybr",
      "id": 10262137,
      "node_id": "MDQ6VXNlcjEwMjYyMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10262137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vybr",
      "html_url": "https://github.com/vybr",
      "followers_url": "https://api.github.com/users/vybr/followers",
      "following_url": "https://api.github.com/users/vybr/following{/other_user}",
      "gists_url": "https://api.github.com/users/vybr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vybr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vybr/subscriptions",
      "organizations_url": "https://api.github.com/users/vybr/orgs",
      "repos_url": "https://api.github.com/users/vybr/repos",
      "events_url": "https://api.github.com/users/vybr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vybr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-24T23:18:52Z",
    "updated_at": "2020-12-25T03:05:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nMaking a demo project to test a 3D workflow\r\n\r\n### Describe the problem or limitation you are having in your project\r\nTrying to animate a walk cycle for a 3D character made up of blocks with the animation tool. A key part of making animations look realistic and satisfying is with easing which is not present in the editor for 3D transform keys.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd an easing property to the editor for 3D transform keyframes just like it is available for property value keyframes/tracks. Unless there's a technical reason why it cannot be added.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![image](https://user-images.githubusercontent.com/10262137/103108265-2a81d300-463e-11eb-8fd6-dfdaf9b47dcc.png)\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nWell, track_set_key_transition() exists. Though I don't know if it works with transform keys, it would be tedious to manually edit every key for every animation with code.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIf it's a missing feature I'm not sure how it could be added with an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2018",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2018/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2018/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2018/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2018",
    "id": 774318640,
    "node_id": "MDU6SXNzdWU3NzQzMTg2NDA=",
    "number": 2018,
    "title": "Improve readability of Dictionaries in the inspector",
    "user": {
      "login": "haaldor",
      "id": 18580752,
      "node_id": "MDQ6VXNlcjE4NTgwNzUy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18580752?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haaldor",
      "html_url": "https://github.com/haaldor",
      "followers_url": "https://api.github.com/users/haaldor/followers",
      "following_url": "https://api.github.com/users/haaldor/following{/other_user}",
      "gists_url": "https://api.github.com/users/haaldor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haaldor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haaldor/subscriptions",
      "organizations_url": "https://api.github.com/users/haaldor/orgs",
      "repos_url": "https://api.github.com/users/haaldor/repos",
      "events_url": "https://api.github.com/users/haaldor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haaldor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-24T10:28:57Z",
    "updated_at": "2020-12-24T14:22:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on:\r\nGeneric 2D platformer player controller.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nUsing dictionaries for creating categories in exported variables.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nIt's few small propositions of Quality of Life changes - it doesn't necessarily change functionality, but is more visual help.\r\nAs (as far as I know) we can't make categories in inspector, using dictionaries would help us work around this issue.\r\nMoreover, I believe using dictionary for settings makes code much clearer.\r\nSmall changes that would help readability of dictionary in Inspector:\r\n\r\n- Option to remove possibility to add new keys to dictionary and change type of existing values in inspector. Could be accomplished by simply not showing the following:\r\n![image](https://user-images.githubusercontent.com/18580752/103081697-be20b880-45d8-11eb-831d-50e3eb4fccae.png)\r\n![image](https://user-images.githubusercontent.com/18580752/103082752-2375a900-45db-11eb-97f3-3bba608d3f6d.png)\r\n\r\n- Option to show String keys without quotes (by using option in project, creating dictionary with only String keys or by any other way). It helps readability.\r\n- If dictionary contains dictionary, the \"inside\" dictionary could be shifted slightly to the right to show which options are \"inside\". On following example, keys in red rectangles should be shifted to the right:\r\n![image](https://user-images.githubusercontent.com/18580752/103081990-69317200-45d9-11eb-9b8e-12efa5179daf.png)\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSadly I don't know GDscript engine from it's inside point of view, so I don't know what way of implementing this would be easiest/best.\r\nIn Script probably it would look something  like:\r\nexport const myDictionary = {\r\n   \"key\": value,\r\n   \"insideDict\": {\r\n      \"insideKey\": value\r\n   }\r\n}\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot really, as those are Quality of Life improvements. Possibly could create categories instead, but in this case we can't use one dictionary for settings, which is the target here.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nRight now dictionaries are so unreadable in the inspector, that they aren't useful. Making them as readable as other variables would make it consistent.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2017",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2017/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2017/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2017/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2017",
    "id": 774141259,
    "node_id": "MDU6SXNzdWU3NzQxNDEyNTk=",
    "number": 2017,
    "title": "Add transparency to the editor UI",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-12-24T02:38:28Z",
    "updated_at": "2020-12-27T17:08:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSome 3D art projects in VR and multiple projections.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nAlthough every project is done inside the engine, I often feel that the engine and my work are two visually isolated things. I would like them to be visually integrated.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe idea is to provide transparency to the interface and at the same time blur the background image. With this feature the main viewport is extended to the entire screen making Godot and the project visually integrated.\r\n\r\nThe idea also includes that the image of the viewport, both 2D or 3D, also persists in the text editor and that the user feels programming on the project that he is doing, not in an isolated text.\r\n\r\nI think it can be an option that can be turned on or off, as well as the amount of transparency / opacity and blur could be tweaked.\r\n\r\nThe images below, intended only to illustrate the idea, are made in GIMP and are presented as a starting point.\r\n\r\nthe actual editor:\r\n![actual](https://user-images.githubusercontent.com/42384785/103051987-f223bb80-458f-11eb-92cc-e8977b27d369.jpg)\r\n\r\n80% opacity:\r\n![03](https://user-images.githubusercontent.com/42384785/103052023-02d43180-4590-11eb-90ef-1fc000829fb4.jpg)\r\n\r\n50% opacity:\r\n![02](https://user-images.githubusercontent.com/42384785/103052050-11224d80-4590-11eb-8296-7492b60fd092.jpg)\r\n\r\n25% opacity:\r\n![05](https://user-images.githubusercontent.com/42384785/103052074-20090000-4590-11eb-9c8f-915b83ae2268.jpg)\r\n\r\n10% opacity:\r\n![06](https://user-images.githubusercontent.com/42384785/103052079-27c8a480-4590-11eb-91d5-0782697840d5.jpg)\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI am not a programmer\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI guess it is not so complicated to do, but I don't know.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it is core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2017/reactions",
      "total_count": 6,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 5,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2016",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2016/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2016/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2016/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2016",
    "id": 774124492,
    "node_id": "MDU6SXNzdWU3NzQxMjQ0OTI=",
    "number": 2016,
    "title": "Add `is_key_just_pressed()` to the Input singleton",
    "user": {
      "login": "TheRealBenjiLi",
      "id": 12452249,
      "node_id": "MDQ6VXNlcjEyNDUyMjQ5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12452249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheRealBenjiLi",
      "html_url": "https://github.com/TheRealBenjiLi",
      "followers_url": "https://api.github.com/users/TheRealBenjiLi/followers",
      "following_url": "https://api.github.com/users/TheRealBenjiLi/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheRealBenjiLi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheRealBenjiLi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheRealBenjiLi/subscriptions",
      "organizations_url": "https://api.github.com/users/TheRealBenjiLi/orgs",
      "repos_url": "https://api.github.com/users/TheRealBenjiLi/repos",
      "events_url": "https://api.github.com/users/TheRealBenjiLi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheRealBenjiLi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-24T01:36:32Z",
    "updated_at": "2020-12-24T16:14:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI am working on a PC platformer game where the player's controls change to different keys on the keyboard. So while one level may have \"A\" as moving left, the next level might have it at \"U\". \r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen I was creating a jump command, I wanted to use something like `is_key_just_pressed` to run some code when the jump key is pressed. \r\n\r\n``` \r\nif (Input.is_key_just_pressed(SPACE)):\r\n    // do something here\r\n```\r\nBut *le gasp* the function does not exist! 😮 \r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nBy including `is_key_just_pressed`, which would return true the instance a key is pressed, the above code can run without too many adjustments. \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWe have an example to use when we implement this: `is_action_just_pressed`!\r\n\r\nActions are defined [like this](https://github.com/godotengine/godot/blob/169159c8aac5807725594145bf029c0ff7ac8ef1/core/input/input.h#L115-L122). When `is_action_just_pressed` is called (code is [here](https://github.com/godotengine/godot/blob/169159c8aac5807725594145bf029c0ff7ac8ef1/core/input/input.cpp#L241-L252)), we know if a key is pressed based on the action's `physics_frame` matches the engine's. \r\n\r\nTo match this, we can build something similar for keys: make a `Keys` struct that includes physics frames, record keys in a new `key_state` map, and finally implement `is_key_just_pressed` similar to `is_action_just_pressed`.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes it can. You currently have two options: check with event handling or use actions. \r\n\r\nThe event handling approach is documented [here](https://docs.godotengine.org/en/latest/tutorials/inputs/inputevent.html). \r\n\r\nAnother approach is to make a new action for every key you wanted to record, and then use `is_action_just_pressed`. \r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWe have `is_action_pressed` and `is_key_pressed`. We have `is_action_just_pressed`, but no `is_key_just_pressed`. Let's make `is_key_just_pressed` a reality! 🥳 ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2015",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2015/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2015/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2015/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2015",
    "id": 773919727,
    "node_id": "MDU6SXNzdWU3NzM5MTk3Mjc=",
    "number": 2015,
    "title": "Clarify which scenes are referenced as AutoLoads in the scene tree dock",
    "user": {
      "login": "junkajii",
      "id": 25551525,
      "node_id": "MDQ6VXNlcjI1NTUxNTI1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25551525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/junkajii",
      "html_url": "https://github.com/junkajii",
      "followers_url": "https://api.github.com/users/junkajii/followers",
      "following_url": "https://api.github.com/users/junkajii/following{/other_user}",
      "gists_url": "https://api.github.com/users/junkajii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/junkajii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/junkajii/subscriptions",
      "organizations_url": "https://api.github.com/users/junkajii/orgs",
      "repos_url": "https://api.github.com/users/junkajii/repos",
      "events_url": "https://api.github.com/users/junkajii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/junkajii/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-23T16:32:50Z",
    "updated_at": "2020-12-24T16:14:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPuzzle game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI got stuck in a problem that a scene needed 2 clicks to close, I lost some time to solve it thinking that the problem was with pressed () signal and func _input () I tried to change the code a few times ... BUT! 🤦‍♂️. The problem was that the scene I was working on was an autoload, and it's not clear if the scene is autoloaded, I run a lot with F6 just the scene I'm working on.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nPut a icon in autoload scenes, to clearfy and remenber the developers about this.\r\n\r\nAditional feature (Not necessary to close this proposal):\r\n- Maybe disable the autoload just clicking in this new icon.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nPut a icon in scene tree, for autoload scenes.\r\n![image](https://user-images.githubusercontent.com/25551525/103015210-c4eaf500-451e-11eb-8c6a-fb12998f1160.png)\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n[Yes I got stuck](https://www.youtube.com/watch?v=OX8-9VMJVzk) ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2015/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2014",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2014/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2014/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2014/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2014",
    "id": 773876687,
    "node_id": "MDU6SXNzdWU3NzM4NzY2ODc=",
    "number": 2014,
    "title": "Make a LOD auto system that removes levels of sub-division or, so . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 24,
    "created_at": "2020-12-23T15:16:20Z",
    "updated_at": "2020-12-28T05:53:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider exploration -story title, with action . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI've seen the new LOD system, and it's REALLY good, I also heard Unreal has a similar system, and I'm literally mind-blown, that it's auto, and just amazing . . However, the algorhithm it uses, sort of ' removes ' vertices, in a way that's chaotic, a bit . . I often make high-poly meshes, by sub-dividing a simpler shape, like for a wall, or a rock, so on, and then bake the normal details, to the lower-poly version . .\r\n\r\nMy proposal is, we get a second LOD auto - method, that sort of removes, one level of sub-division, if possible . . it would work REALLY well, for many shapes, and objects, but it might be very complex, to ' tell ' the algorhitm where, to ' remove ' vertices, not sure . .\r\n\r\n<img width=\"1381\" alt=\"Skærmbillede (759)\" src=\"https://user-images.githubusercontent.com/61069740/103010728-0d171100-4539-11eb-8590-b745cf986027.png\">\r\n\r\n<img width=\"1216\" alt=\"Skærmbillede (760)\" src=\"https://user-images.githubusercontent.com/61069740/103010737-10aa9800-4539-11eb-8ae5-00c3cb7c13cc.png\">\r\n\r\nSorry, if the images are bad, but having such a more ' math ' based LOD system, would maybe look really nice, and makes a lot of sense, to a nerd . . But, it might be a bad idea, or ' too ' complex, to program, I have no idea . . Want, to suggest it, as I often makes rocks, walls, and terrain this way, and it'd be a cool method, I think . . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSee the above images, hope it's clear, maybe it could be programmed, or one could insert the ' LOD's ' in a manual system, but if it was done automatically, and one could have this ' other ' algorhitm, for such use cases, it'd be amazing, I think . .\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSee the images, it'd work really well for rocks, walls, terrain, and other meshes, where one has sub-divided it, for instance a human character, where one sub-divides, to add a high-detail mesh . .\r\n\r\nThis is, bad example, my 3D models are super - noob . .\r\n\r\n<img width=\"1470\" alt=\"Skærmbillede (761)\" src=\"https://user-images.githubusercontent.com/61069740/103011228-dee60100-4539-11eb-9d39-2da9619b941d.png\">\r\n\r\nSince it's very easy to add, a sub-div modifier, in Blender, a lot of beginners could use this method, to make ' instant ' high-poly models, with a very efficient, geometry - preserving LOD effect, or so <3\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nWell, if one could manually ' input ' the lower LOD's, that'd work, as well, but having an ' auto ' - method, would rock, so much <3 Thx . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWell, for SOME models, and especially for 3D beginners, this would be a good way, of setting up a simple hierarchy, for detailed 3D models, or so . . but, I'm not sure it's easy, since it might ' remove ' the wrong ' point or, vertix . . But, it'd be so cool, amazing <3 <3 . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2013",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2013/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2013/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2013/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2013",
    "id": 773572906,
    "node_id": "MDU6SXNzdWU3NzM1NzI5MDY=",
    "number": 2013,
    "title": "AudioEffectStream: attach a scriptable audio processing pipeline to a bus.",
    "user": {
      "login": "lyuma",
      "id": 39946030,
      "node_id": "MDQ6VXNlcjM5OTQ2MDMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39946030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyuma",
      "html_url": "https://github.com/lyuma",
      "followers_url": "https://api.github.com/users/lyuma/followers",
      "following_url": "https://api.github.com/users/lyuma/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyuma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyuma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyuma/subscriptions",
      "organizations_url": "https://api.github.com/users/lyuma/orgs",
      "repos_url": "https://api.github.com/users/lyuma/repos",
      "events_url": "https://api.github.com/users/lyuma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyuma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-23T08:13:50Z",
    "updated_at": "2020-12-23T18:06:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot Speech, a VoIP module for Godot\r\n\r\n### Describe the problem or limitation you are having in your project\r\nPreviously, there was no way to capture microphone input, or the output of an audio bus, in a reliable and performant way.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThis proposal is to expose a simple interface: attach a AudioEffectStream to the effect bus. The audio is shared via an internal RingBuffer to a StreamAudio node, and the application can then collect AudioFrame's in bulk from a callback such as _process(), or from a dedicated thread, and process them as needed.\r\n\r\nThis solves the problem as it has bridged the gap from the audio effect bus (with mic input or the result of other in-game sounds) and application processing code such as a VoIP engine.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nTo start with, I will point at an existing implementation of this system for Master.\r\nGodot engine master branch with the following changes applied:\r\nhttps://github.com/lyuma/godot/tree/audio_effect_stream (An implementation of this propsal)\r\nhttps://github.com/lyuma/godot/tree/godot_speech_master (A port of our GDNative plugin to a godot module, as GDNative is currently non-functional in master. Thanks, fire for the help!)\r\nand godotengine/godot#44604 to fix a GDScript crash I could not work around.\r\n\r\nThen, the example project available here: https://github.com/lyuma/godot_voip_experimental (godot4 branch)\r\nTo run, play multiple copies of the project. Have one copy host, and the other copy join. You should see the other client in the room and audio should transmit.\r\n\r\n**About the proposal itself:**\r\n\r\nAudioEffectStream is an AudioEffect reference type which basically contains a ring buffer. When attached to the bus, it will begin collecting frames in its internal ring buffer.\r\n\r\nStreamAudio is the node counterpart to the AudioEffectStream, extensible by GDScript and accessible in the main thread. Audio is collected by AudioEffectStream and exposed via StreamAudio through use of a shared RingBuffer reference.\r\n\r\nViewed as a sort of \"audio pipe\", the AudioEffectStream is the write end of the pipe, collecting audio frames from the attached bus, and the StreamAudio node is the read end of the pipe, interacting with application nodes and code.\r\n\r\nApplication code (usually GDNative or a Godot Module) will then consume data from this ring buffer and process it as needed, possibly providing application defined effects, or transmitting it over the network.\r\n\r\nDue to the low-latency tolerances and demand of VoIP and other real-time audio processing scenarios, here is how this solution approaches these problems:\r\n- reliable: Using a ring buffer permits application code to safely process audio frames outside of the audio effect bus, with no risk of locking the AudioServer threads.\r\n- Additionally, the ring buffer is of fixed size, and will not consume infinite memory if misused.\r\n- performant: we use a non-locking ring buffer to allow audio frames to be transmitted in bulk from the audio server to application code.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThe closest workaround is to mis-use the AudioEffectRecord for this purpose. It is a misuse because the primary function of AudioEffectRecord is to record to a file on disk.\r\n\r\nAudioEffectRecord is also unreliable and even crash-prone, as it was not designed for infinite length data streams, and was also not designed for data to be polled in real time.\r\n\r\nWe have found no other way to access the audio bus in a safe way. Even when considering usage of a Godot module to provide this functionality, we would need at a minimum, the implementation of AudioEffectStream and some receiving RingBuffer.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nRealtime audio processing is a necessity for some game genres. Additionally, VoIP is a common requirement or usecase in many multiplayer games.\r\n\r\nWhile VoIP itself might not be desirable as a core feature, this proposal would be needed as core, as it would enable the creation of VoIP frameworks as a custom module or built using a combination of GDScript and GDNative and distributed via the Asset Library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2013/reactions",
      "total_count": 4,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2012",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2012/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2012/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2012/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2012",
    "id": 773340645,
    "node_id": "MDU6SXNzdWU3NzMzNDA2NDU=",
    "number": 2012,
    "title": "Gui styles should draw focus behind text",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-23T00:52:49Z",
    "updated_at": "2020-12-24T21:47:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nWin32 theme\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGodot's themes just isn't flexible enough to recreate it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nRender focus style under text and have separate text colors for each state instead.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![image](https://user-images.githubusercontent.com/2453707/102946671-2acf7200-4476-11eb-9524-447ed003fd7c.png)\r\nthe button on the far left can't be emulated in godot\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt would be used end of story and no\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nGodot's theming system is severally limited and devs don't seem to think so.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2011",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2011/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2011/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2011/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2011",
    "id": 773339900,
    "node_id": "MDU6SXNzdWU3NzMzMzk5MDA=",
    "number": 2011,
    "title": "GUI styles should be able to have separate focus style for keyboard and mouse",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-23T00:50:03Z",
    "updated_at": "2020-12-24T21:42:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nWin32 theme\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGodot's themes just isn't flexible enough to recreate it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSeparate keyboard/gamepad and touch/mouse focus styles\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![image](https://user-images.githubusercontent.com/2453707/102946690-36bb3400-4476-11eb-95a4-327b089fb1d3.png)\r\nthe button on the far left can't be emulated in godot\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt would be used end of story and no\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nGodot's theming system is severally limited and devs don't seem to think so.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2010",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2010/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2010/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2010/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2010",
    "id": 773217610,
    "node_id": "MDU6SXNzdWU3NzMyMTc2MTA=",
    "number": 2010,
    "title": "Legacy Specular workflow issues",
    "user": {
      "login": "RevoluPowered",
      "id": 748770,
      "node_id": "MDQ6VXNlcjc0ODc3MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/748770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RevoluPowered",
      "html_url": "https://github.com/RevoluPowered",
      "followers_url": "https://api.github.com/users/RevoluPowered/followers",
      "following_url": "https://api.github.com/users/RevoluPowered/following{/other_user}",
      "gists_url": "https://api.github.com/users/RevoluPowered/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RevoluPowered/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RevoluPowered/subscriptions",
      "organizations_url": "https://api.github.com/users/RevoluPowered/orgs",
      "repos_url": "https://api.github.com/users/RevoluPowered/repos",
      "events_url": "https://api.github.com/users/RevoluPowered/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RevoluPowered/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-22T20:12:30Z",
    "updated_at": "2020-12-23T09:37:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot FBX Importer\r\n### Describe the problem or limitation you are having in your project\r\n- I want 100 percent compatibility with most materials.\r\n- Assets like NVIDIA ORCA all use the Specular workflow, this is a problem for us because we would like these scenes to look nice but with assets made using specular mapping.\r\n- Assets in sketchfab rarely use metalness, some do, some don't\r\n- Default in the industry is specular unfortunately, I hate this but it's true.\r\n- Conversion process is lossy if you don't know the basis from the source assets: https://marmoset.co/posts/pbr-texture-conversion/#spectometal\r\n- Even with Specular to Roughness conversions you're losing data and not using all the specular fields:\r\n  - Reflectivity, Shininess, Specular, SpecularColor, ShininessExponent, ReflectionFactor, specularRoughness\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n- I think we should consider adding a specular workflow to Godot core, as the conversion process doesn't actually work correctly.\r\n- we can add Reflectivity, Shininess components too\r\n- ideally we just make both metalness and specular work nicely.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n- We could make a specific shader for the specular workflow \r\n- We would need to improve shader compilation time, this was noted by @Calinou \r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNope, I tried.\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2010/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2007",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2007/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2007/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2007/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2007",
    "id": 771838884,
    "node_id": "MDU6SXNzdWU3NzE4Mzg4ODQ=",
    "number": 2007,
    "title": "Add a TileSet method for assigning current tile to draw with in the editor",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-21T04:59:53Z",
    "updated_at": "2020-12-21T14:09:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSRPG framework\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThere doesn't seem to be a way to assign a particular tileset texture as 'selected' so that you can use it to draw with in the editor via code.\r\nYou have to manually click the `TileMap` node, and then click on the tile icon to draw with it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd this function to the `TileSet` class:\r\n\r\n```\r\nvoid tile_set_current_draw_tile(id: int)\r\n\tSets the current tile to be drawn in the editor\r\n```\r\nI have a tool script with an export texture variable.\r\nWhen you drop a texture onto it, it gets added to the tileset as an autotile with bitmasks and collision boxes assigned.\r\n\r\nIf this function is added, I can automatically switch to the newly generated autotile and begin drawing.\r\nI'm sure there would be other use cases for this as well, such as setting certain tiles as 'favorites', and using an export var to quickly switch between them.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWhenever the function above is called, just have it do the same thing that happens when you click `TileMap` -> `<tile icon>`\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI couldn't find a built-in function for this.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI don't know how this would work as an add-on if there is no GDScript function for this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2007/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2005",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2005/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2005/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2005/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2005",
    "id": 771722655,
    "node_id": "MDU6SXNzdWU3NzE3MjI2NTU=",
    "number": 2005,
    "title": "Improve comment toggle behaviour ",
    "user": {
      "login": "iwek7",
      "id": 9964886,
      "node_id": "MDQ6VXNlcjk5NjQ4ODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9964886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iwek7",
      "html_url": "https://github.com/iwek7",
      "followers_url": "https://api.github.com/users/iwek7/followers",
      "following_url": "https://api.github.com/users/iwek7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iwek7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iwek7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iwek7/subscriptions",
      "organizations_url": "https://api.github.com/users/iwek7/orgs",
      "repos_url": "https://api.github.com/users/iwek7/repos",
      "events_url": "https://api.github.com/users/iwek7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iwek7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-20T22:13:08Z",
    "updated_at": "2020-12-20T22:21:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Not sure if this is new feature or fits more of the bugfix but here I go.\r\n\r\n### Describe the project you are working on\r\nbunch of solo projects, irrelevant\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI have issue with behavior of comment toggle in script editor - it only uncomments code if very first sign of the line is comment sign, however I often comment lines manually putting # after indentation and in such case untoggle does not work. This gif from current 4.0 branch demonstrates it:\r\n\r\n![gif_comment_toggle_old](https://user-images.githubusercontent.com/9964886/102724258-a44c5080-430e-11eb-9324-ed92972b62c0.gif)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI propose to alter behavior of comment toggle a bit:\r\n- when there is no selection and comment token is first non white sign on line with cursor untoggle line by removig #\r\n- when there is selection treat line with indented comment as regural commended line, so if all lines in selection are commented uncomment them, if at least one is not commented then comment them all - this means that line with indented # will get another # at beginning which ensures that if you toggle big block of code with comment in the middle it will not mess up comment.\r\n\r\nGifs below showcase new mechanics. \r\n\r\n![gif_comment_toggle_fixed](https://user-images.githubusercontent.com/9964886/102724561-b929e380-4310-11eb-811e-a75b4849a25b.gif)\r\n\r\nThere is some another multiline example\r\n\r\n![comment_toggle_new_multiline](https://user-images.githubusercontent.com/9964886/102725527-a7980a00-4317-11eb-803b-3be2d6a6c30c.gif)\r\n\r\n### Describe how\r\nSome changes in code_editor logic. Proposed PR:  https://github.com/godotengine/godot/pull/44557\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nWorkaround is to simply remove comment manually but it kind of kills the point of the toggle. With proposed changes comment toggle should be a bit more \"smart\" and work as in most IDEs (for instance Jetbrains products).\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's editor feature\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2004",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2004/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2004/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2004/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2004",
    "id": 771626703,
    "node_id": "MDU6SXNzdWU3NzE2MjY3MDM=",
    "number": 2004,
    "title": "Implement the format string features (str.format) available in python",
    "user": {
      "login": "Dragoncraft89",
      "id": 11162205,
      "node_id": "MDQ6VXNlcjExMTYyMjA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11162205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dragoncraft89",
      "html_url": "https://github.com/Dragoncraft89",
      "followers_url": "https://api.github.com/users/Dragoncraft89/followers",
      "following_url": "https://api.github.com/users/Dragoncraft89/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dragoncraft89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dragoncraft89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dragoncraft89/subscriptions",
      "organizations_url": "https://api.github.com/users/Dragoncraft89/orgs",
      "repos_url": "https://api.github.com/users/Dragoncraft89/repos",
      "events_url": "https://api.github.com/users/Dragoncraft89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dragoncraft89/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-20T16:32:30Z",
    "updated_at": "2020-12-20T23:20:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nNot relevant to this feature\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThere exist two different ways to format strings in gdscript, the `%` syntax and the `str.format` method. Both are borrowed from python, but `str.format` has less features available than the `%` counter part.\r\n\r\nAn example would be fixed width strings: `\"%02d\" % 5` gives `05`.\r\nThe python `str.format` equivalent is `\"{0:02}\".format([5])`, but this is not yet implemented in gdscript. In fact none of the formatting options are implement for `str.format`\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nImplement the features in the [python format string specification](https://docs.python.org/3/library/string.html#formatstrings)\r\n\r\nMaybe not all features need to be supported (for example conversion specifier: `{object:!r}`, which calls `repr(object)` before the string is formatted), but the most common ones definitely should.\r\n\r\nThese are (in my opinion) the most common use cases:\r\n* Padding: `{n:20}`\r\n* Padding with zeros: `{n:020}`\r\n* Float precision: `{n:.6}`\r\n* Sign: `{n:+}` for always print sign (even for positive numbers), `{n:-}` only for negative numbers (default), and `{n: }` to print a sign for negative numbers and  a space for positive numbers (so they take up the same width)\r\n\r\nNice to have features, but not 100% necessary:\r\n* Alignment `{n:>10}` for right align, `{n:<10}` for left align, `{n:^10}` center (in padding)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe same as before, just with more options available:\r\n```gdscript\r\nprint(\"This is padded: {number:05}\".format({\"number\": 13})) # \"This is padded: 00013\"\r\nprint(\"This is left aligned: {s:<10}\".format({\"s\": \"Godot\"})) # \"This is left aligned: Godot     \"\r\nprint(\"This is right aligned: {s:<10}\".format({\"s\": \"Godot\"})) # \"This is right aligned:      Godot\"\r\n```\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYou can implement your own format function, but depending on the number of features you need, it could become a bit large.\r\n\r\nYou could use the `%` syntax as well, but there may be reasons, why you can't. An example would be format strings in translations. The formatting arguments may not be needed in the same order for different languages, that's why you need to use named arguments, which can't be done with `%` formatting.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nWe already have `str.format` in core. It would only be logical to make it feature complete instead of providing a string operations library in the asset lib",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2004/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2003",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2003/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2003/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2003/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2003",
    "id": 771564461,
    "node_id": "MDU6SXNzdWU3NzE1NjQ0NjE=",
    "number": 2003,
    "title": "Horizontal Scrolling linked to \"Move CanvasItem\" instead of \"Scroll To Pan\"",
    "user": {
      "login": "pterodactyl256",
      "id": 76389767,
      "node_id": "MDQ6VXNlcjc2Mzg5NzY3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/76389767?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pterodactyl256",
      "html_url": "https://github.com/pterodactyl256",
      "followers_url": "https://api.github.com/users/pterodactyl256/followers",
      "following_url": "https://api.github.com/users/pterodactyl256/following{/other_user}",
      "gists_url": "https://api.github.com/users/pterodactyl256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pterodactyl256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pterodactyl256/subscriptions",
      "organizations_url": "https://api.github.com/users/pterodactyl256/orgs",
      "repos_url": "https://api.github.com/users/pterodactyl256/repos",
      "events_url": "https://api.github.com/users/pterodactyl256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pterodactyl256/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-20T11:05:29Z",
    "updated_at": "2020-12-20T14:21:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nThe ability to use horizontal scrolling for panning in the Godot editor.\r\n### Describe the problem or limitation you are having in your project\r\nAs of the current version of Godot, it doesn't seem possible to use horizontal \"Scroll To Pan\" without having the horizontal axis mapped to \"Move CanvasItem\" with no way to redirect it to panning instead (meaning it's not possible to scroll 360 degrees in the editor with more advanced mice). It's also unclear to me why the horizontal scrolling has been mapped to such a strange function. I could not locate any documentation as to why this is the default behaviour.\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWith redirecting horizontal scrolling to the pan function, it will then be possible to use 360 degree panning and will no longer be stuck to \"Move CanvasItem\" (which can sometimes accidentally be triggered with a mouse that has horizontal scrolling capabilities):\r\n![movecanvasitembug](https://user-images.githubusercontent.com/76389767/102711350-35231d80-4276-11eb-9c7d-0190e326b3fc.png)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nImplementing the fix could have another Scroll To Pan option for switching horizontal scrolling to the panning function instead of \"Move CanvasItem\":\r\n![horizontalpanfix](https://user-images.githubusercontent.com/76389767/102711423-d7430580-4276-11eb-8da2-5d9c85174dd4.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt looks like it's possible to rewrite the BUTTON_WHEEL_LEFT/BUTTON_WHEEL_RIGHT code to mimic the vertical direction. However, I'm not certain if this is a bug or a feature as the existing code seems to imply that the button wheel *should* be able to pan horizontally.\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nScrolling is a primary function, and it's not been documented anywhere why as to why horizontal scrolling has been mapped to \"Move CanvasItem\".",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2001",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2001/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2001/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2001/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2001",
    "id": 771167414,
    "node_id": "MDU6SXNzdWU3NzExNjc0MTQ=",
    "number": 2001,
    "title": "Add a FPS limit for unfocused and minimized windows to decrease CPU/GPU usage",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-18T21:01:29Z",
    "updated_at": "2020-12-23T19:14:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThe Godot editor already limits itself to 20 FPS when the window is unfocused. This helps decrease CPU and GPU usage significantly, whicn in turn saves power/battery and decreases heat/noise emissions.\r\n\r\nHowever, exported projects do *not* have any kind of FPS limitations when unfocused or minimized. This is problematic as it harms the \"default\" experience for exported projects, in a way similar to https://github.com/godotengine/godot-proposals/issues/1923. We should aim to have a out-of-the-box experience as good as possible, even for casual/gamejam games.\r\n\r\nMany other game engines offer this feature by default. Likewise, many AAA games also limit the game's framerate when the window is minimized or unfocused.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nBy default, limit the FPS of exported projects to a relatively low value when their window is unfocused or minimized. Engines that support this feature often default to ~20 FPS.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAdd two project settings:\r\n\r\n- `application/run/max_fps_when_minimized` (integer), defaults to 20. If set to 0, the limit is disabled.\r\n- `application/run/max_fps_when_unfocused` (integer), defaults to 20. If set to 0, the limit is disabled.\r\n\r\nHaving two project settings instead of just one allows for more granularity. For instance, you can disable the FPS limit while the window is unfocused but leave it enabled while the window is minimized.\r\n\r\nWe could set `max_fps_when_minimized` to an even lower value like 10 after doing some testing. This should decrease CPU/GPU usage even more. Since Godot doesn't mix audio in the render thread, low FPS limits shouldn't cause audio stuttering.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nTechnically, yes, but the project will need to be modified for it (see below). Also, implementing this functionality with a script will not make this option easy to discover as it won't be standardized across all Godot projects.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt can technically be an add-on, but the point here is that this functionality must be built-in to achieve the desired goal (which is, decreasing CPU/GPU usage on any project made with Godot).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2001/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2000",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2000/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2000/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2000/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/2000",
    "id": 770468759,
    "node_id": "MDU6SXNzdWU3NzA0Njg3NTk=",
    "number": 2000,
    "title": "Add getters and setters to control nodes' theme items",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-12-18T00:16:16Z",
    "updated_at": "2020-12-20T10:45:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nPlatform game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI had to search on the internet just to simply figure out how to change a font's colour and other settings because the popup help nor documentation made it easy to figure out (that there was no getter/setter and in the Label in my case, there is literally nothing in the documentation for any of the 'custom' values), but that's not the point really.\r\n\r\n```\r\nset(\"custom_colors/font_color\",Color(1,0,0))\r\n```\r\n\r\nHaving to call a set (or get) method with a string is not really an ideal method, it's a bit like taking every single getter/setter from every node and saying, sorry please use hard coded strings and triple check you didn't use the wrong slash or use the American and not British spelling :)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nMake Control node custom entries first class citizens somehow please, at least for the most commonly used controls and properties...\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```\r\n$Label.font_colour=XXX\r\n$Label.custom_colours.font_colour=XXX\r\n```\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nOnly if you know how and remember not to make any spelling mistakes\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nSetting things like label colours, etc should be simple and intuitive\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/2000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1999",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1999/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1999/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1999/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1999",
    "id": 770168459,
    "node_id": "MDU6SXNzdWU3NzAxNjg0NTk=",
    "number": 1999,
    "title": "Add animation support from Sprite to TextureRect",
    "user": {
      "login": "trommlbomml",
      "id": 1698003,
      "node_id": "MDQ6VXNlcjE2OTgwMDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1698003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trommlbomml",
      "html_url": "https://github.com/trommlbomml",
      "followers_url": "https://api.github.com/users/trommlbomml/followers",
      "following_url": "https://api.github.com/users/trommlbomml/following{/other_user}",
      "gists_url": "https://api.github.com/users/trommlbomml/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trommlbomml/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trommlbomml/subscriptions",
      "organizations_url": "https://api.github.com/users/trommlbomml/orgs",
      "repos_url": "https://api.github.com/users/trommlbomml/repos",
      "events_url": "https://api.github.com/users/trommlbomml/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trommlbomml/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-17T16:00:40Z",
    "updated_at": "2020-12-22T00:23:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nPixel-Art oriented 2.5 Game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nAnimate Texture Rect controls with spritesheets.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe TextureRect control would be extended to have the \"Animation\" section properties of sprite, which are:\r\n\r\n- Vframes\r\n- Hframes\r\n- Frame\r\n- Frame Coords\r\nIt would allow to animate TextureRect nodes the same as sprites with the advantage that you can use anchors to scale/fit it for different resolutions.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nFor ideal I would expect you can simply take the logic from the Sprite node and take it over 1:1 to the TextureRect node.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nYou can workaround it by manually resizing the sprite and repositioning it, but I think that is a task of a UI control and not the user.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nBecause you would make the TextureRect more usable and flexible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1999/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1998",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1998/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1998/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1998/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1998",
    "id": 769965419,
    "node_id": "MDU6SXNzdWU3Njk5NjU0MTk=",
    "number": 1998,
    "title": "Rename OptionButton to DropDownList",
    "user": {
      "login": "madmiraal",
      "id": 9253928,
      "node_id": "MDQ6VXNlcjkyNTM5Mjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9253928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madmiraal",
      "html_url": "https://github.com/madmiraal",
      "followers_url": "https://api.github.com/users/madmiraal/followers",
      "following_url": "https://api.github.com/users/madmiraal/following{/other_user}",
      "gists_url": "https://api.github.com/users/madmiraal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madmiraal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madmiraal/subscriptions",
      "organizations_url": "https://api.github.com/users/madmiraal/orgs",
      "repos_url": "https://api.github.com/users/madmiraal/repos",
      "events_url": "https://api.github.com/users/madmiraal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madmiraal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2020-12-17T12:28:44Z",
    "updated_at": "2020-12-17T16:43:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot engine\r\n\r\n### Describe the problem or limitation you are having in your project\r\nAs originally mentioned in https://github.com/godotengine/godot/issues/6558, the [`OptionButton`](https://docs.godotengine.org/en/stable/classes/class_optionbutton.html) is actually a [Drop-down List](https://en.wikipedia.org/wiki/Drop-down_list).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nRename `OptionButton` to `DropDownList`.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAs above.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nN/A\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nN/A\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1998/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1997",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1997/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1997/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1997/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1997",
    "id": 769834302,
    "node_id": "MDU6SXNzdWU3Njk4MzQzMDI=",
    "number": 1997,
    "title": "Allow change UI focus continuously by holding navigation key",
    "user": {
      "login": "univeous",
      "id": 40604180,
      "node_id": "MDQ6VXNlcjQwNjA0MTgw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/40604180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/univeous",
      "html_url": "https://github.com/univeous",
      "followers_url": "https://api.github.com/users/univeous/followers",
      "following_url": "https://api.github.com/users/univeous/following{/other_user}",
      "gists_url": "https://api.github.com/users/univeous/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/univeous/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/univeous/subscriptions",
      "organizations_url": "https://api.github.com/users/univeous/orgs",
      "repos_url": "https://api.github.com/users/univeous/repos",
      "events_url": "https://api.github.com/users/univeous/events{/privacy}",
      "received_events_url": "https://api.github.com/users/univeous/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-12-17T10:30:09Z",
    "updated_at": "2020-12-17T13:44:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA JRPG game\r\n### Describe the problem or limitation you are having in your project\r\nFor now, If I want to change UI focus in game, I need to press and release the UI navigation key. I think it's very unnatural.\r\n\r\nI have a backpack system in my game, and if I want to check items in my backpack, I need to press and release up and down a lot of times. \r\n\r\nI checked recent games and software in my steam library, They are [Tales of Maj'Eyal](https://store.steampowered.com/app/259680/Tales_of_MajEyal/), [DARK SOULS III](https://store.steampowered.com/app/374320/DARK_SOULS_III/), [Aseprite](https://store.steampowered.com/app/431730/Aseprite/), and the most recently, The [Godot](https://store.steampowered.com/app/404790/Godot_Engine/) Editor itself, They all can change UI focus continuously by holding the navigation key. But in games made by Godot, by default they can't. \r\n\r\nMaybe I'm wrong, but I did some research and I think they are hard-coded in the engine.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI think we can add an option in project settings to allow change UI focus continuously by holding the navigation key.\r\n\r\nBy default, it's disabled, so game will work as before(I personally think it should be enabled by default though):\r\n\r\n![image](https://user-images.githubusercontent.com/40604180/102461058-cf227480-4082-11eb-8ec1-e2d68effb466.png)\r\n\r\n![ftqMlL9Dlw](https://user-images.githubusercontent.com/40604180/102461373-3e986400-4083-11eb-8027-b90e259e725f.gif)\r\n\r\nIf it's enabled then we can change UI focus continuously by holding the navigation key:\r\n\r\n![image](https://user-images.githubusercontent.com/40604180/102461185-042ec700-4083-11eb-9cdc-4aef27c7ce7f.png)\r\n\r\n![nAKWXeiieE](https://user-images.githubusercontent.com/40604180/102461387-422beb00-4083-11eb-8c1d-e30fdcecdfd5.gif)\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI did something like this and I think it works well:\r\n\r\nhttps://github.com/univeous/godot/blob/6bddcee049ac65eb5c169eb6337255a94bacda03/scene/main/viewport.cpp#L2381-L2421\r\n\r\nI don't know if it will cause any side effects though.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI don't think so.\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's very hard to create an add-on to implement this.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1997/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1995",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1995/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1995/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1995/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1995",
    "id": 768885312,
    "node_id": "MDU6SXNzdWU3Njg4ODUzMTI=",
    "number": 1995,
    "title": "Add a `placeholder` property to TextEdit (like LineEdit already has)",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-16T13:44:29Z",
    "updated_at": "2020-12-16T19:09:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nTextEdit can't have placeholder text. Placeholder text can be used to improve UX to hint what should be entered in a field:\r\n\r\n![Text fields with placeholders](https://user-images.githubusercontent.com/180032/102356336-5e5d5880-3fad-11eb-8e62-e2cd776375dc.png)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAllow TextEdit to have placeholder text, just like LineEdit already supports.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAdd a `placeholder` property that is displayed as translucent text if the TextEdit is empty. Translate it automatically as well.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nDrawing a placeholder for TextEdit might be feasible using custom drawing or even a Label node as a child of the TextEdit, but it requires more than a few lines of script. Also, we'll need this in the editor in many places (https://github.com/godotengine/godot/issues/44413).\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core GUI system functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1995/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1994",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1994/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1994/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1994/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1994",
    "id": 768677131,
    "node_id": "MDU6SXNzdWU3Njg2NzcxMzE=",
    "number": 1994,
    "title": "Standardise names for boolean properties, getters and setters",
    "user": {
      "login": "madmiraal",
      "id": 9253928,
      "node_id": "MDQ6VXNlcjkyNTM5Mjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9253928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madmiraal",
      "html_url": "https://github.com/madmiraal",
      "followers_url": "https://api.github.com/users/madmiraal/followers",
      "following_url": "https://api.github.com/users/madmiraal/following{/other_user}",
      "gists_url": "https://api.github.com/users/madmiraal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madmiraal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madmiraal/subscriptions",
      "organizations_url": "https://api.github.com/users/madmiraal/orgs",
      "repos_url": "https://api.github.com/users/madmiraal/repos",
      "events_url": "https://api.github.com/users/madmiraal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madmiraal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2587730880,
        "node_id": "MDU6TGFiZWwyNTg3NzMwODgw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:codestyle",
        "name": "topic:codestyle",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-16T10:17:19Z",
    "updated_at": "2020-12-16T17:17:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot engine\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nGodot properties have underlying methods that can also be used to retrieve and change the property value called the getter and setter. Assuming a property is well named i.e. appropriately describes the value it holds, the `property_name` has a standard getter and setter: `get_property_name()` and `set_property_name()`.\r\n\r\nHowever, with `bool` (`true` or `false`) properties this structure is awkward and complicated by the standard for retrieving `bool` values using `is_*` or `has_*`, etc. rather than `get_*`. For example, for a property named `enabled`, the getter should be `is_enabled()` not `get_enabled()`. The problem is, what should the setter be called: the natural `enable()` or the more awkward `set_enabled()`? This is further complicated by methods that have natural opposites eg. `pause()` and `resume()` to control the property `paused`.\r\n\r\nFurthermore, although it's already been agreed (https://github.com/godotengine/godot/issues/16863) that `bool` properties should be named positively to avoid double negatives, there are a number of `bool` properties that determine what the `Object` will do when it's created e.g. `loop`. This creates an awkward getter: `is_loop()`. Instead it would be better if the property were named for what it will be doing when it's created: `looping`, which has the better getter: `is_looping()`.\r\n\r\nHowever, there is a further complication. The property may be read-only once it is created i.e. there shouldn't be a setter. In other words, there is sometimes a need for two properties: one for controlling what the object will be doing and one for what it is doing. For example, `start` has a natural property called `started` that is read-only i.e. it only has a getter: `is_started()`. The question is, what should the property to determine whether or not the `Object` should automatically `start` when created be called: `start`, `auto_start`, `auto_started` or, as is often done, something completely different e.g. `playing`?\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n1. Ensure `bool` properties have names that describe what the `Object` will be or is doing e.g. use `looping` and not `loop`.\r\n2. Ensure `bool` properties don't use negative names (which can be hard to spot) e.g. use `looping` and not not `one_shot`. (Yes, the double negative is deliberate.)\r\n3. Use the standard `set_*()` and `get_*()` for the properties in addition to `is_*()` which maps to `get_*()`.\r\n4. If the property needs two values: one to describe what it will be doing when it's created and one to describe what it is doing, but is read only, use `auto_*` with an action verb for the former and the [gerund](https://en.wikipedia.org/wiki/Gerund) i.e. `*ing` for the latter e.g. `auto_play` and `playing` respectively. Note: since `playing` is read-only it will not be exposed as a property, but only have the method `is_playing()`.\r\n5. If the `bool` property has a natural setter and \"unsetter\", they can be created as helper functions that map to `set_*(true)` and `set_*(false)`. For example `enabled` should have `enable()` mapped to `set_enabled(true)` and and `disable()` mapped to `set_enabled(false)`, `paused` should have `pause` mapped to `set_paused(true)` and `resume()` mapped to `set_paused(false)`.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nDescribed above.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nN/A\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nN/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1994/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1993",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1993/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1993/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1993/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1993",
    "id": 768438218,
    "node_id": "MDU6SXNzdWU3Njg0MzgyMTg=",
    "number": 1993,
    "title": "Specify hostname for self-signed certificates for ENet clients",
    "user": {
      "login": "etables",
      "id": 57273212,
      "node_id": "MDQ6VXNlcjU3MjczMjEy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/57273212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etables",
      "html_url": "https://github.com/etables",
      "followers_url": "https://api.github.com/users/etables/followers",
      "following_url": "https://api.github.com/users/etables/following{/other_user}",
      "gists_url": "https://api.github.com/users/etables/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etables/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etables/subscriptions",
      "organizations_url": "https://api.github.com/users/etables/orgs",
      "repos_url": "https://api.github.com/users/etables/repos",
      "events_url": "https://api.github.com/users/etables/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etables/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-16T04:26:39Z",
    "updated_at": "2020-12-20T22:25:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nMultiplayer battle royale style game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'm hosting my Godot game servers on arbitrary AWS EC2 instances. As such, for DTLS, I can't use CA-signed TLS certs since these instances are behind arbitrary IP addresses, not a domain. My only option is to provide a self-signed cert in the client app, and its corresponding private key in the dedicated server on EC2. Right now, the issue with using self-signed certs is that clients don't verify their connection using the public key they're given. Clients rely on receiving the public key (X509cert) from the server, which is susceptible to MitM attacks - anyone can provide the client with their own self signed cert.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nClients should have the option to verify their DTLS connection by using the self-signed cert they're packaged and distributed with. Obviously, you can't verify self-signed certs with CAs. Rather, the client should have the option to check whether the public key it's packaged with matches the public key of the server. A simple way to do this would be to encrypt some secret with the X509cert provided in the client, and sending that ciphertext to the server. If the server truly has the authority to establish a DTLS connection with the client, it should be able to decrypt the ciphertext using its private key. Since MitMs don't have access to the server's private key, they won't be able to decrypt anything encrypted using the server's public key, which is the same as the X509cert provided in the client app.\r\n\r\nWith this method, it's given that the client must download the app from a trusted source (e.g. Google Play Store/Apple App Store). Since the client's app comes bundled with the cert, if they can't download the app safely, then their DTLS connection will be screwed.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI have no idea how this can be implemented in C++. It's possible that this sort of thing is too low level, in which can we can close this proposal. I think it would be best if this were implemented in the handshake, before any communication of sensitive data.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo idea, but I doubt it.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nDTLS is part of the core of Godot now, so this should be part of the core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1992",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1992/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1992/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1992/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1992",
    "id": 768365384,
    "node_id": "MDU6SXNzdWU3NjgzNjUzODQ=",
    "number": 1992,
    "title": "Add Object virtual `_can_instance()` for managing the ability to instantiate a class",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-16T01:30:52Z",
    "updated_at": "2021-01-01T20:48:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot plugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nFor my plugins I use (often) `Util` classes, that shouldn't be instantiated and (sometimes) `Singletons` (not autoload ones) that should be instantiated only once.\r\nThe problem is the plugin user may not know that so `.new()` objects can be accidentally created by user which may be unexpected/dangerous.\r\n\r\nBut this is not only feature for plugin devs. I think everyone is interested in creating reliable foolproof scripts, which always requires setting lots of restrictions. And one of them is managing the possibility of creating class instances.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAbility to specify how many class \"instances\" can be created would solve the problem.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI think the most flexible way is to have `Object` virtual `_can_instance()` method.\r\n\r\n```gdscript\r\nbool _can_instance() virtual\r\nReturns true if the script can be instanced.\r\n```\r\nThis allows to flexiblly dynamically manage the ability to instantiate classes.\r\n\r\nso when I created my Util class and I don't want it to be instantiated I could write:\r\n```gdscript\r\nextends Reference\r\nclass_name MyClass\r\n\r\nfunc _can_instance():\r\n    return false\r\n```\r\nSo `MyClass.new()` would give error/warning like \r\n```\r\nMyClass shouldn't be instantiated\r\n```\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nit seems there's no good way to do this.\r\nIt's possible to override static new():\r\n```gdscript\r\nstatic func new():\r\n    pass\r\n```\r\nbut I really don't think this is a good idea, and also not flexible at all\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nSee above. Hopefully this will make (Gd)scripts more reliable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
