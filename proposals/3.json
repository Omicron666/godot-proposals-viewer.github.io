[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1849",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1849/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1849/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1849/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1849",
    "id": 744493587,
    "node_id": "MDU6SXNzdWU3NDQ0OTM1ODc=",
    "number": 1849,
    "title": "Allow disconnecting Node Signals via 'Connections to method' Dialog.",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-17T07:44:09Z",
    "updated_at": "2020-11-17T19:20:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nDoing some UI work for my game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFrankly more of an UX inconvenience than a problem or limitation, but worthy of a proposal nevertheless.\r\n\r\nWhile working on some UI I wanted to disconnect a few signals from some functions I had made, and to do this I needed to find back the specific Control node that the signal originated from. Since I didn't quite remember which node it was, I checked the 'Connections to Method' dialog to find the name. When looking at the UI I realized that **adding a disconnect button for each Connection** in that Dialog would be a way faster and way more intuitive way to disconnect a Signal.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest a simple 'x' is added at the end of each entry in the `Connections to Method` Dialog. Clicking it will ask for confirmation that this Connection should be severed. This would make it a lot quicker to disconnect nodes while you're scripting (since there is no need to switch out of the Script Mode, or have to track down a node in a large Scene Tree), and would, in my opinion, also be a logical and intuitive place to add any functionality/controls to do with Signals.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/99359130-db15ed80-28ae-11eb-93d9-63da76381a00.png)\r\nWasn't quite sure that 'x' was the best fit, but something along these lines should work.\r\n\r\nAlternatively a `context menu` could be opened when right clicking the entry, exactly as is done when a connected `Signal` is right clicked in the `Node Dock`. \r\n\r\n![image](https://user-images.githubusercontent.com/10502115/99359653-b1a99180-28af-11eb-8ab5-a269dd90c8c0.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI kinda described this in the step above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around fairly easily (by going to the Scene Tree and disconnecting the signal), but adding a disconnect option here would probably become the main way to disconnect signals while scripting.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUX improvement on a Core Feature.\r\n\r\n\r\nPS. I think technically the \"method\" in the title of the \"Connections to method:\" `Dialog` should be Capitalized: \"Connections to Method:\"",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1849/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1848",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1848/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1848/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1848/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1848",
    "id": 744290841,
    "node_id": "MDU6SXNzdWU3NDQyOTA4NDE=",
    "number": 1848,
    "title": "Resource's Local to Scene is counter-intuitive and should be improved or removed",
    "user": {
      "login": "gcardozo123",
      "id": 9798466,
      "node_id": "MDQ6VXNlcjk3OTg0NjY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9798466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcardozo123",
      "html_url": "https://github.com/gcardozo123",
      "followers_url": "https://api.github.com/users/gcardozo123/followers",
      "following_url": "https://api.github.com/users/gcardozo123/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcardozo123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcardozo123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcardozo123/subscriptions",
      "organizations_url": "https://api.github.com/users/gcardozo123/orgs",
      "repos_url": "https://api.github.com/users/gcardozo123/repos",
      "events_url": "https://api.github.com/users/gcardozo123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcardozo123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-11-16T23:49:23Z",
    "updated_at": "2020-11-18T10:23:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA basic 2D project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEverytime I use \"Instance Child Scene\" and try to customize something on that \"instance\" I have to be super careful to make sure every customizable resource has \"Local to Scene\" checked, otherwise I end up messing the original scene. Since you're supposedly creating an instance of a scene, I feel that having to check every \"Local to Scene\" resource is counter intuitive. Why \"Local to Scene\" `true` isn't the default?\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI feel that \"Local to Scene\" `true` should be the default and I imagine there's a pre-existing reason to not do that. Maybe it would duplicate the resources? If that's the case, why not cache the original scene resources so that they can be re-used on instances that don't customize those resources?\r\nThere might be a way to completely remove the \"Local to Scene\" checkbox and let the engine figure out the optimal situation by itself. \r\nI also feel that customizing an instance should never modify the original scene. Both the instance and the original scene could have an \"Apply changes to all instances\" button, other option would be letting changes on the original scene be completely ignored by pre-existing instances (because they can be customized instances).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSumming up, speaking about Godot's editor:\r\n- Remove the \"Local to Scene\" checkbox, the editor should decide that by itself;\r\n- Instanced scenes modifications should *never* affect the original scene;\r\n- Changes on the original scene should be only applied to instances via an \"Apply changes to: \" button, which could have options \"all instances\" or \"non customized instances\" button. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCan't be worked around without modifying the editor behaviour.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, after looking at the community forum and reddit I would say that the new behaviour is more intuitive.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1848/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1846",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1846/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1846/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1846/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1846",
    "id": 743913907,
    "node_id": "MDU6SXNzdWU3NDM5MTM5MDc=",
    "number": 1846,
    "title": "Add `set_environment()` method in `OS`",
    "user": {
      "login": "YakoYakoYokuYoku",
      "id": 39890836,
      "node_id": "MDQ6VXNlcjM5ODkwODM2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/39890836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YakoYakoYokuYoku",
      "html_url": "https://github.com/YakoYakoYokuYoku",
      "followers_url": "https://api.github.com/users/YakoYakoYokuYoku/followers",
      "following_url": "https://api.github.com/users/YakoYakoYokuYoku/following{/other_user}",
      "gists_url": "https://api.github.com/users/YakoYakoYokuYoku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YakoYakoYokuYoku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YakoYakoYokuYoku/subscriptions",
      "organizations_url": "https://api.github.com/users/YakoYakoYokuYoku/orgs",
      "repos_url": "https://api.github.com/users/YakoYakoYokuYoku/repos",
      "events_url": "https://api.github.com/users/YakoYakoYokuYoku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YakoYakoYokuYoku/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-16T15:09:43Z",
    "updated_at": "2020-11-16T15:39:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA [Cargo plugin](https://gitlab.com/YakoYakoYokuYoku/cargo-lifter) for the editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTrying to set an environment variable in Godot without using the system shell is impossible, something that might not be desired in some cases.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a `void set_evironment(String env_var, String value)` method to the `OS` class provides a simpler and cleaner way to set the variables.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs environment variables have strings as their values the `set_environment()` method must take the variable (`env_var`) and the value (`value`). Then assigns `value` to `env_var`. E.g.:\r\n```gdscript\r\nOS.set_environment(\"FOO\", \"bar\")\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n```gdscript\r\nOS.execute(<\"export\" for UNIX, \"set\" for Windows>, [\"FOO=bar\"])\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nConsidering many programming languages provides the method/functionality in their standard libraries and Godot has the `get_environment()` method, this proposal brings a solution to the problem without any workarounds.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1846/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1844",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1844/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1844/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1844/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1844",
    "id": 743345206,
    "node_id": "MDU6SXNzdWU3NDMzNDUyMDY=",
    "number": 1844,
    "title": "Add pseudo-localization to better spot untranslated strings and unexpected layout changes caused by long strings",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-15T21:08:22Z",
    "updated_at": "2020-11-16T22:40:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n- When running your project, there's no way to immediately see which strings are translatable and which ones aren't. You have to fully translate the project to a language before you can detect non-translatable strings.\r\n- Unexpected layout changes can also occur when translators use strings that are too long to fit in existing buttons/labels.\r\n- Moreover, if you're translating to a language which only uses a Latin-1 character set, it might be difficult to notice that your font doesn't support the full character set required to support some languages out there. This may be a problem if you plan to localize to more languages in the future.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe 3 problems above can be detected early on by using *pseudo-localization* while developing the project. It performs two things:\r\n\r\n- Replace characters with special characters while keeping the original strings readable.\r\n- Add a constant prefix and suffix to each string to make them longer.\r\n\r\nFor instance, `Account Settings` could be turned into `[!!! Àççôûñţ Šéţţîñĝš !!!]`.\r\n\r\n### Without pseudo-localization\r\n\r\n![Without pseudo-localization](https://symfony.com/uploads/assets/blog/pseudolocalization-symfony-demo-disabled.png)\r\n\r\n### With pseudo-localization\r\n\r\n![With pseudo-localization](https://symfony.com/uploads/assets/blog/pseudolocalization-symfony-demo-enabled.png)\r\n\r\nIt looks pretty cursed at first, but this technique is actually known to improve the internationalization workflow :slightly_smiling_face: \r\n\r\nMore information can be found in [this Symfony blog article](https://symfony.com/blog/new-in-symfony-5-2-pseudo-localization-translator).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThere could be a project setting and method in the TranslationServer to toggle this feature.\r\n\r\nNote that this should work *in addition* to the existing localization. This way, if you use CSV translation keys, you still get to see the translated strings in your own language, except they'll be altered as mentioned above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't think a script can hook into the TranslationServer this way. Ideally, it should work with all `tr()` calls in addition to the automatic localization performed in Control nodes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1844/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1843",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1843/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1843/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1843/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1843",
    "id": 743331419,
    "node_id": "MDU6SXNzdWU3NDMzMzE0MTk=",
    "number": 1843,
    "title": "Add self-shadowing to parallax occlusion mapping in StandardMatereial3D",
    "user": {
      "login": "NHodgesVFX",
      "id": 11403345,
      "node_id": "MDQ6VXNlcjExNDAzMzQ1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11403345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NHodgesVFX",
      "html_url": "https://github.com/NHodgesVFX",
      "followers_url": "https://api.github.com/users/NHodgesVFX/followers",
      "following_url": "https://api.github.com/users/NHodgesVFX/following{/other_user}",
      "gists_url": "https://api.github.com/users/NHodgesVFX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NHodgesVFX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NHodgesVFX/subscriptions",
      "organizations_url": "https://api.github.com/users/NHodgesVFX/orgs",
      "repos_url": "https://api.github.com/users/NHodgesVFX/repos",
      "events_url": "https://api.github.com/users/NHodgesVFX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NHodgesVFX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-15T19:54:06Z",
    "updated_at": "2020-11-23T12:59:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA demo scene and a 3rd person game\r\n**Describe the problem or limitation you are having in your project:**\r\nI got POM to work which was was nice although the effect is not as convincing as I hoped because it lacks shadows and still exhibits banding.\r\n\r\nNotice in the photo you can see the banding and there are no shadows.\r\n![pom_issue](https://user-images.githubusercontent.com/11403345/99195389-506cab80-2753-11eb-80c7-fb255cab7d5d.JPG)\r\n\r\nShadows cast onto POM also don't look correct, it looks like the shadow is floating.\r\n![ezgif-1-7e356977e2aa](https://user-images.githubusercontent.com/11403345/99195653-ec4ae700-2754-11eb-96e1-cef881dbf899.gif)\r\n\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd the ability for POM to cast self shadows, smooth the banding. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhere are some papers and topics on POM which show it can and how to improve it.\r\nhttp://web.engr.oregonstate.edu/~mjb/cs557/Projects/Papers/Parallax_Occlusion_Mapping.pdf\r\nhttps://developer.amd.com/wordpress/media/2012/10/I3D2006-Tatarchuk-POM.pdf - same paper as above with slight differences\r\nhttps://stackoverflow.com/questions/55089830/adding-shadows-to-parallax-occlusion-map\r\n\r\nThe main thing I think need improving is banding and shadowing but other improvements can be made such as silhouette POM\r\n\r\nhttp://developer.amd.com/wordpress/media/2012/10/Dachsbacher-Tatarchuk-Prism_Parallax_Occlusion_Mapping_with_Accurate_Silhouette_Generation%28SI3D07%29.pdf\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits a improvement to a feature in core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1843/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1842",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1842/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1842/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1842/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1842",
    "id": 743328267,
    "node_id": "MDU6SXNzdWU3NDMzMjgyNjc=",
    "number": 1842,
    "title": "Remove the `class_name` keyword and use only `class`",
    "user": {
      "login": "dmitryuck",
      "id": 20966824,
      "node_id": "MDQ6VXNlcjIwOTY2ODI0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/20966824?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dmitryuck",
      "html_url": "https://github.com/dmitryuck",
      "followers_url": "https://api.github.com/users/dmitryuck/followers",
      "following_url": "https://api.github.com/users/dmitryuck/following{/other_user}",
      "gists_url": "https://api.github.com/users/dmitryuck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dmitryuck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dmitryuck/subscriptions",
      "organizations_url": "https://api.github.com/users/dmitryuck/orgs",
      "repos_url": "https://api.github.com/users/dmitryuck/repos",
      "events_url": "https://api.github.com/users/dmitryuck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dmitryuck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-11-15T19:36:24Z",
    "updated_at": "2020-11-19T17:50:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot important\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nfor declaring the name of the class we use \"class_name MyClass\"\r\nbut for declaring internal classes keyword \"class InternalClass\"\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\nthe idea is to remove \"class_name\" and use only \"class\"\r\nBy doing this we can throw out one keyword\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf we want to set a name for a class we can check if there is no class body declaration then it is setting a name for the class\r\n\r\nclass MyClass #this obviously that it is giving a name to the class\r\n\r\nclass InternalClass:\r\n  func MyFunc:\r\n   pass\r\n\r\nthis is an internal class declaration so no confusing\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nrelated to GDScript syntax\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1842/reactions",
      "total_count": 7,
      "+1": 4,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1839",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1839/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1839/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1839/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1839",
    "id": 743174420,
    "node_id": "MDU6SXNzdWU3NDMxNzQ0MjA=",
    "number": 1839,
    "title": "Exclude projects build during exporting",
    "user": {
      "login": "Rubyroidas",
      "id": 5562799,
      "node_id": "MDQ6VXNlcjU1NjI3OTk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5562799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rubyroidas",
      "html_url": "https://github.com/Rubyroidas",
      "followers_url": "https://api.github.com/users/Rubyroidas/followers",
      "following_url": "https://api.github.com/users/Rubyroidas/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rubyroidas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rubyroidas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rubyroidas/subscriptions",
      "organizations_url": "https://api.github.com/users/Rubyroidas/orgs",
      "repos_url": "https://api.github.com/users/Rubyroidas/repos",
      "events_url": "https://api.github.com/users/Rubyroidas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rubyroidas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-15T03:59:37Z",
    "updated_at": "2020-11-15T14:08:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use mono version of Godot. I have set up the CI/CD for my project. I added several projects which are logic libraries and tests for them (for reuse cases and purity of code). All was ok until I added a project into solution which is the Windows XAML App. My CI/CD pipeline became broken therefore I figured out why is so. The problem was in the following: `godot --export` is building the whole solution, not only the game project. I solved that problem with rewriting my Windows XAML App using [Avalonia framework](https://avaloniaui.net/). From now on CI/CD is in good condition.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBuild only game project or make it possible to specify which one is the game project in the solution.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt only makes possible to maintain complicated .NET project infrastructure be consistent and kept in the single repository without using external NuGet repositories and build everything from one place.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think no. Godot export CLI option has no such parameters.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it's the core functionality not game code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1836",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1836/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1836/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1836/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1836",
    "id": 742932882,
    "node_id": "MDU6SXNzdWU3NDI5MzI4ODI=",
    "number": 1836,
    "title": "Ability to send audio sources to multiple buses",
    "user": {
      "login": "ShawkMusic",
      "id": 48574225,
      "node_id": "MDQ6VXNlcjQ4NTc0MjI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48574225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShawkMusic",
      "html_url": "https://github.com/ShawkMusic",
      "followers_url": "https://api.github.com/users/ShawkMusic/followers",
      "following_url": "https://api.github.com/users/ShawkMusic/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShawkMusic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShawkMusic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShawkMusic/subscriptions",
      "organizations_url": "https://api.github.com/users/ShawkMusic/orgs",
      "repos_url": "https://api.github.com/users/ShawkMusic/repos",
      "events_url": "https://api.github.com/users/ShawkMusic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShawkMusic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-14T05:42:29Z",
    "updated_at": "2020-12-19T04:37:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** I'm trying to process one audio stream through 2 different effect chains (AKA busses)\r\n\r\n**Describe the problem or limitation you are having in your project:** I can only send an audio source to one bus at a time\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** When I click on the \"bus\" property in an AudioStreamPlayer or the \"send\" under a Bus, instead of bringing a dropdown menu that only allows me to select one bus at a time, it should give each bus option a checkbox, so that I can send the audio to multiple busses at once.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBefore and after, on an AudioStreamPlayer's Bus property:\r\n![Screenshot (123) edited](https://user-images.githubusercontent.com/48574225/99138525-3621b900-25ff-11eb-82d3-373708668bd0.png)\r\n\r\nBefore and after, on a bus's send:\r\n![Screenshot (124) edited](https://user-images.githubusercontent.com/48574225/99138527-3b7f0380-25ff-11eb-8781-c1742da18306.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It would most likely need to change how the Bus and Send properties work, which I don't think is possible to do with addons.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1836/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1835",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1835/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1835/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1835/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1835",
    "id": 742913879,
    "node_id": "MDU6SXNzdWU3NDI5MTM4Nzk=",
    "number": 1835,
    "title": "Unify disabling of nodes",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 70,
    "created_at": "2020-11-14T03:26:44Z",
    "updated_at": "2020-11-19T21:02:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany users (specially those who come from Unity I guess) complain that it's not so easy to turn off objects like they do over there.\r\n\r\nIn Godot, you can turn on and off most types of objects:\r\n* Visual 2D and 3D objects can be hidden\r\n* Physics objects can be disabled\r\n* Animation player can stop their processing\r\n* process functions in script can be turned on and off via process property.\r\n* etc\r\n\r\nBut its kinda not unified nor always easily available from the UI, so this can be a hassle. I understand that in Godot you don't really need to do pooling like you do in Unity, so you can just create and free objects without much of a performance hit or GC unpredictability, but I still think having this may be of interest.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis proposal is about providing a way to unify this from the UI for most cases, so it's easier to toggle things off and on.\r\nThe proposal will consist of a few features working together\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis will be implemented via the following features:\r\n\r\n**Feature 1: Disable when hidden**\r\n\r\n The first feature will be a new property on 2D and 3D nodes: **\"disable_when_hidden\"**\r\n\r\nThe property will be enabled by default, and it will result in:\r\n* nodes that are hidden will no longer receive process or global input events.\r\n* physics objects will just go disabled and stop affecting collision or areas\r\n\r\n**Feature 2: Expose Process**\r\n\r\nFor nodes that are neither 2D or 3D (or nodes that use scripts with the process function), if they can be inactivated, they will show a small gear icon instead of the eye in the scene tree, which will do a simliar function. If parents nodes are hidden, this will also \r\ndeactivate:\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/99138520-eac3d680-260f-11eb-97f0-a8b42fe547c0.png)\r\n\r\n\r\n**Please keep answers strictly on-topic or I will delete the comment. if you want to request or discuss a completely unrelated feature, open a separate proposal**",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1835/reactions",
      "total_count": 59,
      "+1": 40,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 8,
      "rocket": 0,
      "eyes": 8
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1834",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1834/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1834/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1834/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1834",
    "id": 742850996,
    "node_id": "MDU6SXNzdWU3NDI4NTA5OTY=",
    "number": 1834,
    "title": "Add support for virtual/sparse/mega textures",
    "user": {
      "login": "jonbonazza",
      "id": 1424843,
      "node_id": "MDQ6VXNlcjE0MjQ4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonbonazza",
      "html_url": "https://github.com/jonbonazza",
      "followers_url": "https://api.github.com/users/jonbonazza/followers",
      "following_url": "https://api.github.com/users/jonbonazza/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonbonazza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonbonazza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonbonazza/subscriptions",
      "organizations_url": "https://api.github.com/users/jonbonazza/orgs",
      "repos_url": "https://api.github.com/users/jonbonazza/repos",
      "events_url": "https://api.github.com/users/jonbonazza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonbonazza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/2",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2/labels",
      "id": 5482292,
      "node_id": "MDk6TWlsZXN0b25lNTQ4MjI5Mg==",
      "number": 2,
      "title": "4.1",
      "description": "This proposal is planned to be implemented in 4.1 or later",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2020-05-31T14:29:07Z",
      "updated_at": "2021-01-08T05:26:43Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-11-13T23:34:57Z",
    "updated_at": "2020-11-14T02:12:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nLarge open world games\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen working with large, open world games, it's important that level streaming be employed in order to reduce the amount data that is loaded into both RAM and GPU memory at any given time. Level streaming itself already solves this problem by only loading in chunks of a scene that is immediately relevant to the player and unloading those that aren't, and mesh LODs help reduce the strain on the GPU for distant meshes that are still loaded. The former can be implemented today, and the latter will be supported in Godot 4.0, but there is still one problem that hasn't been addressed but is important to tackle for large open world games: textures.\r\n\r\nLarge open world games often contain _A LOT_ of textures. For hi res games, these textures are often huge as well. Constantly loading and unloading all of these different textures is extremely inefficient and makes the level streaming process slower and more \"spiky\".\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA popular solution to this is virtual textures (also called Sparse or Mega textures). Unity and Unreal both offer these already and I believe that Godot could also benefit from them. Essentially, with virtual texturing, you have a few extremely large textures that usually contain multiple textures, but when the texture data is uploaded to the GPU, only the pieces of the texture that are relevant to what is currently being rendered is uploaded. This means that the actual texture data can reside in memory for longer periods of times, reducing loading/unloading contention during level streaming, but significantly reduces the amount of GPU memory that is used when rendering the textures, since only a small portion is actually uploaded.\r\n\r\nRelated: \r\nhttps://github.com/godotengine/godot-proposals/issues/1197\r\nhttps://github.com/godotengine/godot/issues/17470\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA good explanation of virtual textures can be found in this video: https://www.youtube.com/watch?v=MejJL87yNgI\r\n\r\nAn additional feature of the VT implementation should be the support for asynchronous loading of textures in order to assist in reducing contention when steaming these large textures from disk during level streaming. I think this might already be planned in Godot 4.0 via StreamTextures, but I haven't looked too much into them to really know how relevant they are here.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTexturing is a core component of Godot's rendering pipeline. In Godot 4.0 it might be something that can be added as a plugin, depending on what the rendering APIs end up looking like, but at least in 3.X, it must be core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1834/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1833",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1833/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1833/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1833/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1833",
    "id": 742837157,
    "node_id": "MDU6SXNzdWU3NDI4MzcxNTc=",
    "number": 1833,
    "title": "Use cJSON for JSON (un)marhsalling instead of a custom implementation",
    "user": {
      "login": "jonbonazza",
      "id": 1424843,
      "node_id": "MDQ6VXNlcjE0MjQ4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonbonazza",
      "html_url": "https://github.com/jonbonazza",
      "followers_url": "https://api.github.com/users/jonbonazza/followers",
      "following_url": "https://api.github.com/users/jonbonazza/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonbonazza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonbonazza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonbonazza/subscriptions",
      "organizations_url": "https://api.github.com/users/jonbonazza/orgs",
      "repos_url": "https://api.github.com/users/jonbonazza/repos",
      "events_url": "https://api.github.com/users/jonbonazza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonbonazza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-13T22:54:58Z",
    "updated_at": "2020-11-13T23:37:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny game that uses JSON (especially online games that communicate with webapis). Also relevant for the Godot engine code itself.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile fleshing out unit tests for Godot's JSON facilities, @Calinou has found several issues with the Godot JSON parser not being conformant to spec ([PR Link](https://github.com/godotengine/godot/pull/43517)) **(TODO: Link to tracking issue once created)**. This is very bad in my opinion, especially for online games that rely on communications with various webapis (first and 3rd party) for various auxiliary (read: non-gameplay) functionality, such as matchmaking, database apis, commerce, etc... since these apis almost always use JSON for their content types. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nFrom my understanding, Godot's JSON facilities are fairly ancient, and have existed long before Godot was even open sourced. Since then some very tiny, well reputed, battle tested, and portable json libraries have sprung up. One of such libs, [cJSON](https://github.com/DaveGamble/cJSON) has pretty much become the defacto JSON library for anything written in C or C++. It's used pretty much everywhere is incredibly tiny, fast and easy to use, is as portable as can be, and is 100% conformant to spec.\r\n\r\nI suggest we add cjson as a Godot core dependency and use it for Godot's JSON needs.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nGodot's JSON apis are already very isolated, so changing them to use cjson would be extremely easy. As I already mentioned, cjson is as portable as portable can be, and since most (all?) consoles and platforms already support or use it anyway, this should be enough. If we _really_ wanted to be safe, however, we could make the json stuff part of the platform specific code, which would allow us to implement different json backends depending on platform, but I really don't think this is necessary.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. JSON is a core feature\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTechnically speaking, there's nothing stopping someone from creating a GDNative plugin for cjson, however since JSON is so integral to gamedev--especially online games as mentioned before, I believe that this makes the most sense as an enhancement to core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1833/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1830",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1830/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1830/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1830/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1830",
    "id": 742629340,
    "node_id": "MDU6SXNzdWU3NDI2MjkzNDA=",
    "number": 1830,
    "title": "Support undo-ing file deletion",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-13T17:21:42Z",
    "updated_at": "2020-11-19T23:18:10Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on:\r\nGodot Test Project\r\n\r\n### Describe the problem or limitation you are having in your project:\r\n![image](https://user-images.githubusercontent.com/14253836/99101606-7141cf00-25a2-11eb-8a2e-3c2e60c4c464.png)\r\n\r\nI guarantee that the vast majority of people deleting with the keyboard shortcut \"Del\" just immediately hit enter without looking at the dialogue- it's just muscle memory. Therefore, for most cases the popup doesn't even do it's job of making sure accidental deletions don't occur. \\\r\n**[+] Therefore, it is nice to have an extra layer of security for deleting files**\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation:\r\n~~First of all, this popup should be removed. It's just an annoyance and as stated earlier rarely truly does its job.~~\r\n\r\nWe should support restoring these deleted files. Simply `CTRL+Z` or Scene->Undo should do the operation.\r\n\r\n### Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\r\n\r\nThere are two possible ways that I think this could be implemented.\r\n\r\n1. **.godot/deleted folder**.\r\n- Pro: Already a good spot thanks to https://github.com/godotengine/godot/pull/38607\r\n- Pro: We don't need to worry about native support for trash can\r\n\r\n2. **System trash can**\r\n- Pro: Seemingly Intuitive for users\r\n- Pro: If working with temporary projects - [proposed here](https://github.com/godotengine/godot-proposals/issues/227#issuecomment-563152659)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\nThis is used very often\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?:\r\nIt would help everyone\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1830/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1829",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1829/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1829/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1829/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1829",
    "id": 742374102,
    "node_id": "MDU6SXNzdWU3NDIzNzQxMDI=",
    "number": 1829,
    "title": "Add an offset argument to `Control.set_drag_preview()`",
    "user": {
      "login": "liryu1973",
      "id": 64412290,
      "node_id": "MDQ6VXNlcjY0NDEyMjkw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/64412290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liryu1973",
      "html_url": "https://github.com/liryu1973",
      "followers_url": "https://api.github.com/users/liryu1973/followers",
      "following_url": "https://api.github.com/users/liryu1973/following{/other_user}",
      "gists_url": "https://api.github.com/users/liryu1973/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liryu1973/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liryu1973/subscriptions",
      "organizations_url": "https://api.github.com/users/liryu1973/orgs",
      "repos_url": "https://api.github.com/users/liryu1973/repos",
      "events_url": "https://api.github.com/users/liryu1973/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liryu1973/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-13T11:15:10Z",
    "updated_at": "2020-11-26T18:10:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCreating an Inventory\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to fine-tune the position of the preview image.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is a quick and easy preview feature, but it's a pain to adjust the position. It appears in the lower right corner of the cursor, so if you want to change it to the center of the cursor, you have to create a new ControlNode, add a TextureRect to its child, adjust the position, and then set it to set_drag_preview. It would be easier to adjust the position if you can specify an offset as an argument.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![bbb](https://user-images.githubusercontent.com/64412290/99064730-b2a99d00-25e9-11eb-8a0d-880ec1713990.PNG)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's avoidable, but I had quite a bit of trouble figuring out how to make it happen.\r\nI've found several of the same problems on the internet and I'm sure many people will continue to be confused.\r\nhttps://www.reddit.com/r/godot/comments/bzptrt/how_can_i_set_drag_previews_offset/\r\nhttps://www.reddit.com/r/godot/comments/j0bf8g/changing_set_drag_preview_offset/\r\nhttps://www.reddit.com/r/godot/comments/j0o11y/how_can_i_change_the_position_of_the_drag_preview/\r\nhttps://www.reddit.com/r/godot/comments/j0zh49/set_drag_preview_and_rect_pivot_offset_not_working/\r\nhttps://www.reddit.com/r/godot/comments/82yrku/can_i_center_the_mouse_cursor_on_the_inbuilt_set/\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think the preview function needs an offset.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1829/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1828",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1828/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1828/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1828/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1828",
    "id": 742232204,
    "node_id": "MDU6SXNzdWU3NDIyMzIyMDQ=",
    "number": 1828,
    "title": "Use 0-frame delay for syncing physics transforms to render transforms (instead of 1-frame delay)",
    "user": {
      "login": "huhund",
      "id": 15182033,
      "node_id": "MDQ6VXNlcjE1MTgyMDMz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15182033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/huhund",
      "html_url": "https://github.com/huhund",
      "followers_url": "https://api.github.com/users/huhund/followers",
      "following_url": "https://api.github.com/users/huhund/following{/other_user}",
      "gists_url": "https://api.github.com/users/huhund/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/huhund/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/huhund/subscriptions",
      "organizations_url": "https://api.github.com/users/huhund/orgs",
      "repos_url": "https://api.github.com/users/huhund/repos",
      "events_url": "https://api.github.com/users/huhund/events{/privacy}",
      "received_events_url": "https://api.github.com/users/huhund/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-13T07:42:33Z",
    "updated_at": "2020-11-16T13:21:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\n\r\nAny game that uses physics and requires minimal lag. However, this would only work for single threaded physics using Godot physics. (It can't be applied to Bullet because of how Bullet handles pretick).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt would be nice if physics xforms are applied immediately to render xforms after a physics tick. Currently they are applied one frame late.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nE.g. It would make games more responsive to joystick input. Also beneficial to multiplayer games, e.g. if a server runs at 30fps it would reduce overall lag with 33ms.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCurrent update looks like this:\r\n1. PhysicsServerSW::flush_queries -> RigidBody::_direct_state_changed -> sync xforms to render\r\n2. PhysicsServer::step -> StepSW::step -> BodySW::integrate_velocities\r\n3. Render frames\r\n\r\nAs we see the render frames still have the old xforms. \r\n\r\nSuggestion is to have something like this:\r\n1. PhysicsServerSW::flush_queries -> RigidBody::_direct_state_changed\r\n2. PhysicsServer::step -> StepSW::step -> BodySW::integrate_velocities\r\n3. PhysicsServer::end_sync -> sync xfroms to render\r\n4. Render frames\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is part of the main loop in main.cpp\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is part of the main loop in main.cpp\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1827",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1827/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1827/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1827/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1827",
    "id": 741965593,
    "node_id": "MDU6SXNzdWU3NDE5NjU1OTM=",
    "number": 1827,
    "title": "Add sound mixing mode for `AudioStreamPlayer.play()`",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-12T22:12:36Z",
    "updated_at": "2020-11-12T22:48:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCalling `$AudioStreamPlayer.play()` again truncates the audio being played if it hasn't finished yet. This is fine for music, but very inconvenient when you are implementing repetitive sound effects (e.g. gunshots, typewriter sounds, etc.). See also godotengine/godot#23541.\r\n\r\n> The old Godot 2 sample players had the ability to play multiple sounds at once, using the same node.\r\nNow, in Godot 3, one AudioStreamPlayerXX can only play one stream at a time.\r\n\r\n![](https://user-images.githubusercontent.com/47700418/98998724-a5d46d00-2547-11eb-9e72-127944b928db.png)\r\n_1\\. The previous sound ends before the next one begins.\r\n2.1\\. The previous sound is cut off (current behavior).\r\n2.2\\. The next sound is mixed with the previous one(s) (the behavior I want to achieve)._\r\n\r\nIt is not trivial to work around this problem (you need to either create an `AudioStreamPlayer` every time (and then delete it), or keep the `AudioStreamPlayer`s pool).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI see two options:\r\n1. Add a sound mixing mode that changes the behavior of the `AudioStreamPlayer.play()` method.\r\n2. Add method `AudioServer.play_sound(stream: AudioStream, bus_idx: int = 0, volume_db: float = 0.0)`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, the workaround is either complicated or has less performance.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is often used in many games.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1827/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1826",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1826/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1826/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1826/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1826",
    "id": 741942446,
    "node_id": "MDU6SXNzdWU3NDE5NDI0NDY=",
    "number": 1826,
    "title": "Allow us to assign groups to individual tiles",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-12T21:32:29Z",
    "updated_at": "2020-11-12T22:31:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nRougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to easily add event based collision logic to tiles through groups.\r\nI don't want to have to make a new tilemap layer for each type of intractable tile.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow us to assign groups to tiles for a flag based system.\r\nFor example I might have tiles that contain a group called 'solid' or 'chest' which allows be to implement a custom solidity check for certain types of tiles.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nYou would be able to add and remove a tile from a group in the tileset editor like you can with nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be much more optimized and flexable way for checking against tile collisions as tiles don't need to hold onto a collision shape and they can check against more then just solids.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTile collision seems to be very limited right now without having to create a new layer for each type of tile Xd\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1826/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1825",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1825/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1825/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1825/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1825",
    "id": 741915479,
    "node_id": "MDU6SXNzdWU3NDE5MTU0Nzk=",
    "number": 1825,
    "title": "Improve AnimatedTexture resource",
    "user": {
      "login": "MuktadaCreations",
      "id": 57871912,
      "node_id": "MDQ6VXNlcjU3ODcxOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/57871912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MuktadaCreations",
      "html_url": "https://github.com/MuktadaCreations",
      "followers_url": "https://api.github.com/users/MuktadaCreations/followers",
      "following_url": "https://api.github.com/users/MuktadaCreations/following{/other_user}",
      "gists_url": "https://api.github.com/users/MuktadaCreations/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MuktadaCreations/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MuktadaCreations/subscriptions",
      "organizations_url": "https://api.github.com/users/MuktadaCreations/orgs",
      "repos_url": "https://api.github.com/users/MuktadaCreations/repos",
      "events_url": "https://api.github.com/users/MuktadaCreations/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MuktadaCreations/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-12T20:43:33Z",
    "updated_at": "2020-12-08T14:28:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D low poly FPS horror game with very low Texture (Albedo, Normal, Rough)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe limitations of the resource \"Animatedtexture\" is the problem, I see the Animatedtexture as an amazing resource and an extremely useful one, But it has very limited control (255 framesh, 2 methods, 4 properties, etc)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI dont have a solid idea of how to specifcly fix it or make it better but I could say make it have mych much more controls like animationplayer, E.G having a func called PlayFrom(\"Frame\") to play the animated texture from the frame the user give, and so on\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGiving the animatedtexture more methods and properties to work with should be it and maybe some visual controls like the animationplayer \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nKinda yeah, What Im doing now in fact is replacing the animatedtexture with an animationplayer node and making it change the texture of the object every XX sec in the timeline and every XX I added a new frame which takes a lot of time to make each frame but it is a work around and somtimes when u want multiable objects to have the same Animatedtexture this work around will fail\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nmaking the animatedtexture much more friendly and giving the user more control over should make the workflow much faster with way fewer limitation.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1824",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1824/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1824/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1824/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1824",
    "id": 741866911,
    "node_id": "MDU6SXNzdWU3NDE4NjY5MTE=",
    "number": 1824,
    "title": "Add an octant visualization gizmo for GridMaps",
    "user": {
      "login": "jamie-pate",
      "id": 682658,
      "node_id": "MDQ6VXNlcjY4MjY1OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/682658?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamie-pate",
      "html_url": "https://github.com/jamie-pate",
      "followers_url": "https://api.github.com/users/jamie-pate/followers",
      "following_url": "https://api.github.com/users/jamie-pate/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamie-pate/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamie-pate/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamie-pate/subscriptions",
      "organizations_url": "https://api.github.com/users/jamie-pate/orgs",
      "repos_url": "https://api.github.com/users/jamie-pate/repos",
      "events_url": "https://api.github.com/users/jamie-pate/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamie-pate/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-12T19:25:46Z",
    "updated_at": "2020-11-12T22:35:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn office layout that uses gridmaps to draw the walls, floors and ceilings\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTrying to light the space is a nightmare because the octant sizing is not clear. The current 3.2.3 GLES3 renderer places restrictions on the number of lights that can be used for each VisualInstance, and the GridMap node groups tiles by octant size to send them to the VisualServer, but none of this information is presented to the designer.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nToggle or permanently show a gizmo that visualizes the octant size as it's calculated based on the cell size and octant size settings. This would allow designers to easily visualize how many lights may be placed in one area, and how the engine is grouping the tiles they placed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Editor would gain a new gizmo 'Gridmap Octants' which can be shown/hidden based on gridmap selection etc. The gizmo would draw cubes for each octant so that designers can easily see the boundaries and the effect of changing the cell size and octant size.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt possibly could be implemented as a plugin which adds a new gizmo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be useful for anyone using GridMaps, especially with the current 3.2 limitation on the number of lights allowed to affect the single MultiMeshInstance that's created for each octant. This lighting restriction is supposed to be removed in the Vulcan renderer, but will also it be removed from the OpenGL renderer for 4.0? It'd also be a great way to visualize the complexity of the gridmap because it's currently difficult to guess what happens when you change cell size and octant size without reading the engine source code.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1823",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1823/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1823/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1823/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1823",
    "id": 741827109,
    "node_id": "MDU6SXNzdWU3NDE4MjcxMDk=",
    "number": 1823,
    "title": "Redesign 3D asset import workflow",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 45,
    "created_at": "2020-11-12T18:27:00Z",
    "updated_at": "2021-01-06T20:03:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere are several complaints about the current 3D import workflow\r\n\r\n* It's confusing that scenes imported can be opened but not edited\r\n* Inheriting scenes to edit them is error prone, users put their nodes together with those of the imported scene, and if they are renamed or moved, their changes go away.\r\n* Configuring what is imported is difficult, the import settings are too cramped together in the import dock, and there is no way to select what happens to imported assets, specifically on a per resource (mesh, material, etc) basis.\r\n* Imported scenes generally have scale issues (root is scaled), so putting user content in there can be easily distorted.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe idea is to do some fundamental changes to the workflow to make it more streamlined and less confusing.\r\n\r\n* Fist of all, editing (opening) the imported scene **should no longer be allowed**. This is confusing and serves no real purpose.\r\n* Double clicking an imported scene will open a window where this scene is shown and previewed, and all import aspects of it can be configured, node by node and resource by resource, such as generation of collision, generation of lightmap, bake mode, generation of LODs, whether you want to use the material that comes with the file or an externally supplied one, etc. **All tweaks on how the scene is imported will go in this new dialog**, moved from the import dock. The import dock will just have a button \"Edit settings\" and it will open this same window.\r\n* Offering the user to \"inherit\" the scene **should no longer exist**. As we have seen, editing an inherited scene that comes from the 3D DCC is prone to making mistakes. While we will offer features to compensate for these (see further points), the idea is to still discourage inheriting. If users still want to do it, they can still do it from the scene menu (new inherited scene), but it won't be facilitated anymore.\r\n* Instead, to use imported scene in projects, users will be encouraged to **instantiate them in their own scenes**. Instancing is preferred to inheritance because its just simpler (and still allows editing if required), but as user added nodes happen on the new scene and not the inherited scene less problems are prone to happen, because the imported scene is no longer the root node.\r\n* Additionally, for inherited or instantiated scene, if a node was renamed or removed in the original imported file and it contained local modifications, **\"Dummy\" nodes will be created** containing the transform and the local modifications, so they can be adapted to whatever the scene has changed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAfter a scene is imported, it won't be possible to open it anymore. Doubleclicking it will open its import settings instead. Additionally, the Import dock for this scene will allow opening these import settings, which replace most of the existing ones.\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/98979581-4734d200-24fa-11eb-8fc8-b1830e624b51.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/98981290-86642280-24fc-11eb-8fbf-18a9c68f232a.png)\r\n\r\n\r\nThe above is a really bad mockup, but the idea is that you can edit in detail what happens to every node, material, mesh, animation. The Node editor will allow what do with with each node such as:\r\n\r\n* Determine whether or not you want to import this node (and children).\r\n* Determine whether to create a separate importable file (put part of the scene in a separate scene file), so you can import to multiples scenes if desired.\r\n* Select bake mode\r\n* Turn on Unwrap UV for lightmap\r\n* Generate static collision on import\r\n* Generate dynamic collision on import\r\n* Generate navmesh\r\n* Generate impostors (for distance LOD)\r\netc\r\n\r\nThe mesh editor, will have options such as:\r\n\r\n* Edit and previsualize LODs \r\n* Select settings such as make the mesh streamable or not, etc\r\n\r\nThe Material editor will have options such as\r\n\r\n* Decide what to do, replace by a custom one or use this one\r\n* Save it to a file and use, or keep built int\r\n* etc.\r\n\r\nThe Animation editor will have options such as\r\n\r\n* Control optimization\r\n* Slice large animation in smaller ones\r\n* etc\r\n\r\nThis way, instead of just opening the scene for the sake of it like before, you open an editor where you can actually check the scene and adjust and fine-tune all import settings.\r\n\r\n**added by suggestion of @Jummit**\r\n\r\nA script section can be added where users can add add one or more import scripts, and scripts can export arguments for tweaking the import process better.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1823/reactions",
      "total_count": 103,
      "+1": 66,
      "-1": 0,
      "laugh": 5,
      "hooray": 10,
      "confused": 0,
      "heart": 10,
      "rocket": 6,
      "eyes": 6
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1822",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1822/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1822/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1822/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1822",
    "id": 741585475,
    "node_id": "MDU6SXNzdWU3NDE1ODU0NzU=",
    "number": 1822,
    "title": "Add official binaries with Address, Leak and Undefined sanitizers",
    "user": {
      "login": "qarmin",
      "id": 41945903,
      "node_id": "MDQ6VXNlcjQxOTQ1OTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41945903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qarmin",
      "html_url": "https://github.com/qarmin",
      "followers_url": "https://api.github.com/users/qarmin/followers",
      "following_url": "https://api.github.com/users/qarmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/qarmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qarmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qarmin/subscriptions",
      "organizations_url": "https://api.github.com/users/qarmin/orgs",
      "repos_url": "https://api.github.com/users/qarmin/repos",
      "events_url": "https://api.github.com/users/qarmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qarmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-12T13:06:48Z",
    "updated_at": "2020-11-12T13:06:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCurrently I'm trying to implement CI in godot-demo-projects which will speed up finding regressions with engine and test projects - https://github.com/godotengine/godot-demo-projects/pull/552\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nFor now to check for most type of leaks, I must compile Godot from scratch to get binary which would find leaks.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nProviding official binaries, would allow to speedup CI checking in my case.\r\nThis build will allow to more precisely point where engine crashes etc. and probably will also allow users to find reason for some mysterious crashes or undefined behaviors in their projects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis will only require building one additional binary more(only for Linux with additional flags `target=debug use_asan=yes use_ubsan=yes`) and also putting them to https://downloads.tuxfamily.org/godotengine/\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nGodot can be easily manually compiled with this flags, but this solution isn't suitable for CI due to time of compiling and most of users doesn't know how to compile Godot. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n-- NOT RELATED --",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1821",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1821/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1821/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1821/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1821",
    "id": 741532011,
    "node_id": "MDU6SXNzdWU3NDE1MzIwMTE=",
    "number": 1821,
    "title": "Add Alembic support for mesh cache import",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-12T11:45:59Z",
    "updated_at": "2020-11-12T17:45:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSome 3D projects in Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to import fluid and cloth simulations and it is currently impossible.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe ideal would be to be able to import this type of file and obtain within Godot a scene as usual with an AnimationPlayer that contains an animation and that frame by frame changes the mesh automatically. Although perhaps another possibility is to set a parameter as a shape-key in the inspector that corresponds to the interchange interval of the mesh in relation to the time that should be animated.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI am not a programmer\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\ncould be an addon",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1821/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1820",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1820/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1820/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1820/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1820",
    "id": 741325516,
    "node_id": "MDU6SXNzdWU3NDEzMjU1MTY=",
    "number": 1820,
    "title": " Reformat Transform(2D) matrix display in the inspector",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-12T06:39:57Z",
    "updated_at": "2020-12-02T10:48:28Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently, transform matrix displaying and editing in the inspector is a bit of a mess. Columns are displayed horizontally, rows are displayed vertically, for Node3D there is repeated information (the translation), for Node2D you can't access the raw `Transform2D` at all just with the inspector, and labels are non-unique (`x` and `x` and `x` and `x` is confusing).\r\n\r\n![1](https://user-images.githubusercontent.com/1646875/98903653-0ac78e80-2486-11eb-9a25-7bc54d5f33de.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to make the following changes:\r\n\r\n* For Node3D, remove the duplicated translation information by displaying the `Basis` instead of the `Transform`.\r\n\r\n* For Node3D, rename \"Matrix\" to \"Raw Matrix\" to better convey that this is how Godot works under-the-hood, and to slightly discourage users who don't know what it is from touching it.\r\n\r\n* For Node2D, show the Transform2D similarly to Node3D, so that you can edit the transformation matrix from the inspector.\r\n\r\n* For all matrix types, transpose them so that they correctly have columns displayed vertically and rows displayed horizontally.\r\n\r\n* For all matrix types, change the labels to be unique for each field. I propose a system such that the label `x.y` is column-major and corresponds to `transform.x.y` in code, because I think it is nice to have consistency with how you access it in code, which is also column-major. However, in math classes, matrix elements are usually numbered row-major, such that the label `yx` would correspond to `transform.x.y` instead of the label `x.y`.\r\n\r\n![2](https://user-images.githubusercontent.com/1646875/98904571-dd7be000-2487-11eb-94b2-093fcd2b41ad.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/transform-editor\r\n\r\nPR: https://github.com/godotengine/godot/pull/32068\r\n\r\nEverything in that PR should be good to go right now, except that the labeling is controversial. Tagcup is very adamant about the label being row-major. I added an option in editor settings to make it row-major, which is disabled by default, but it could be argued to do it the other way and have it be row-major by default and have a setting for column-major.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, there are ways to work around this. For 3D, you can just remember to transpose it in your head. For 2D the only way to edit the matrix directly is if you use a `tool` script, which is very un-ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe inspector is core, and these data structures are core, so how the structures are displayed in the editor should be core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1820/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1819",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1819/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1819/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1819/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1819",
    "id": 741312396,
    "node_id": "MDU6SXNzdWU3NDEzMTIzOTY=",
    "number": 1819,
    "title": "Reformat structure string operators",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-11-12T06:15:12Z",
    "updated_at": "2020-11-25T12:24:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** This applies to any project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe way data structures are printed out is currently a bit inconsistent, and it could be improved.\r\n\r\nExplanation in bullets below each set of outputs. Test code:\r\n\r\n```gdscript\r\nfunc _ready():\r\n\tprint(\"Vector2\")\r\n\tprint(Vector2())\r\n\tprint(\"Vector3\")\r\n\tprint(Vector3())\r\n\tprint(\"Color\")\r\n\tprint(Color())\r\n\tprint(\"Quat\")\r\n\tprint(Quat())\r\n\tprint(\"Plane\")\r\n\tprint(Plane())\r\n\tprint(\"AABB\")\r\n\tprint(AABB())\r\n\tprint(\"Rect2\")\r\n\tprint(Rect2())\r\n\tvar t = Transform2D()\r\n\tt.x = Vector2(1, 5)\r\n\tprint(\"Transform2D\")\r\n\tprint(t)\r\n\tvar b = Basis()\r\n\tb.x = Vector3(1, 5, 0)\r\n\tprint(\"Basis\")\r\n\tprint(b)\r\n\tprint(\"Transform\")\r\n\tprint(Transform(b))\r\n```\r\n\r\nOutput with current master:\r\n\r\n```\r\nVector2\r\n(0, 0)\r\nVector3\r\n(0, 0, 0)\r\nColor\r\n0,0,0,1\r\nQuat\r\n(0, 0, 0, 1)\r\nPlane\r\n0, 0, 0, 0\r\nAABB\r\n0, 0, 0 - 0, 0, 0\r\nRect2\r\n(0, 0, 0, 0)\r\nTransform2D\r\n((1, 5), (0, 1), (0, 0))\r\nBasis\r\n((1, 0, 0), (5, 1, 0), (0, 0, 1))\r\nTransform\r\n1, 0, 0, 5, 1, 0, 0, 0, 1 - 0, 0, 0\r\n```\r\n\r\nThe current output is a bit confusing and inconsistent:\r\n\r\n* Color is lacking spaces after the commas.\r\n\r\n* AABB and Transform both contain a dash, which can be mistaken for a minus sign.\r\n\r\n* Some things have parenthesis, some don't, and Basis/Transform2D have nested parenthesis.\r\n\r\n* Transform2D prints out column-major, while Basis prints out row-major, and Transform is row major except the origin is last.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to change the behavior of the above code so that the output looks like this:\r\n\r\n```\r\nVector2\r\n(0, 0)\r\nVector3\r\n(0, 0, 0)\r\nColor\r\n(0, 0, 0, 1)\r\nQuat\r\n(0, 0, 0, 1)\r\nPlane\r\n(0, 0, 0), 0\r\nAABB\r\n(0, 0, 0), (0, 0, 0)\r\nRect2\r\n(0, 0), (0, 0)\r\nTransform2D\r\n[X: (1, 5), Y: (0, 1), O: (0, 0)]\r\nBasis\r\n[X: (1, 5, 0), Y: (0, 1, 0), Z: (0, 0, 1)]\r\nTransform\r\n[X: (1, 5, 0), Y: (0, 1, 0), Z: (0, 0, 1), O: (0, 0, 0)]\r\n```\r\n\r\n* No dashes anywhere, parenthesis used for grouping with commas for separation.\r\n\r\n* Transforms and Basis are now printed consistently and with explicit labels to avoid any confusion.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/to-string\r\n\r\nPR: https://github.com/godotengine/godot/pull/34668\r\n\r\nOne remaining question is whether or not we want to show trailing decimals, since these are floats (`real_t`). Currently they are omitted, but it could be argued that it would be better to show them. This could also be done in a follow-up proposal or PR.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis will be used often, and yes it can be worked around, but this should be in core.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is about changing how core data types work, so it's already in core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1819/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1818",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1818/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1818/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1818/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1818",
    "id": 741304823,
    "node_id": "MDU6SXNzdWU3NDEzMDQ4MjM=",
    "number": 1818,
    "title": "Flip 2D icon to match Godot's 2D handedness",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-12T05:59:03Z",
    "updated_at": "2020-11-12T14:11:24Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** 2D projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n![old](https://user-images.githubusercontent.com/1646875/76601616-aa8be180-64df-11ea-86d7-b30c0ed04e74.png)\r\n\r\nIn the 2D icon, the Y axis arrow points upwards. This is fine-ish, but Godot's 2D coordinate system has Y pointing down. The icon as it currently is can be a bit misleading if people don't know that Y is down in 2D, so users could be confused and think that Y is up like they teach in schools. I think it's important to convey to the user that Y is down in 2D.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to flip the icon so that the Y axis arrow points down:\r\n\r\n![new](https://user-images.githubusercontent.com/1646875/76601619-ac55a500-64df-11ea-8c0e-64420bf73ad2.png)\r\n\r\nThis may look a bit weird, but it makes more sense in context:\r\n\r\n![3](https://user-images.githubusercontent.com/1646875/76601827-1e2dee80-64e0-11ea-97b4-ffd77061f154.png)\r\n\r\nThere are already other icons shaped in this way, such as all the curve icons and GraphEdit:\r\n\r\n![Screenshot from 2020-11-12 01-03-53](https://user-images.githubusercontent.com/1646875/98902148-21201b00-2483-11eb-80b5-29da7aef2f87.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis SVG image: https://raw.githubusercontent.com/aaronfranke/godot/2d-flip/editor/icons/2D.svg\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/2d-flip\r\n\r\nPR: https://github.com/godotengine/godot/pull/37013 (also https://github.com/godotengine/godot-design/pull/51)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe workaround is to ignore the problem and accept the current icon.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis can't be an add-on in the asset library.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1818/reactions",
      "total_count": 11,
      "+1": 9,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1817",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1817/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1817/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1817/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1817",
    "id": 741273065,
    "node_id": "MDU6SXNzdWU3NDEyNzMwNjU=",
    "number": 1817,
    "title": "Rename many enums relating to input, especially Button to MouseButton",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-11-12T04:40:46Z",
    "updated_at": "2020-11-12T04:40:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThis affects any project using these input enums.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe names of these enums are somewhat inconsistent/confusing and can use some improvements.\r\n\r\nWith the input enums, we currently have `ButtonList`, `KeyList`, `JoyButtonList`, `JoyAxisList`, and `MidiMessageList`. However, most enums in Godot don't have the `List` suffix. As seen [here](https://docs.godotengine.org/en/stable/classes/class_@globalscope.html), `Margin`, `Corner`, `Orientation`, `HAlign`, `VAlign`, `KeyModifierMask`, `Error`, `PropertyHint`, `PropertyUsageFlags`, `MethodFlags`, `Variant.Type`, and `Variant.Operator` do not contain the `List` suffix. Additionally, other enums not listed there like `Vector3::Axis` do not contain the `List` suffix.\r\n\r\nThe biggest issue is specifically with `ButtonList` which has members starting with `BUTTON_`. Just from the name, it's hard to tell what this actually is. Keyboard buttons? Controller buttons? UI buttons on your screen? It actually refers to mouse buttons, like left click and right click. The only way you would know that this is referring to mouse buttons is if you're already familiar with Godot.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf we remove the `List` suffix from the input enums, they will be consistent with the other enums.\r\n\r\nIf we renamed `ButtonList` to `MouseButton` and have the members start with `MOUSE_BUTTON_`, then it will be more clear that this enum is for mouse buttons.\r\n\r\nSince this is a rename, this breaks compatibility, so it should be decided on before Godot 4.0 comes out.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/enums\r\n\r\nPR: https://github.com/godotengine/godot/pull/38054\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThese are used often. The workaround is to use the current names.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThese are core enums, so they are already in core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1817/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1816",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1816/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1816/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1816/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1816",
    "id": 741268598,
    "node_id": "MDU6SXNzdWU3NDEyNjg1OTg=",
    "number": 1816,
    "title": "Make the inspector tab responds accordingly when the user clicks at the Visual Script's members",
    "user": {
      "login": "kreaninw",
      "id": 1403194,
      "node_id": "MDQ6VXNlcjE0MDMxOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1403194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kreaninw",
      "html_url": "https://github.com/kreaninw",
      "followers_url": "https://api.github.com/users/kreaninw/followers",
      "following_url": "https://api.github.com/users/kreaninw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kreaninw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kreaninw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kreaninw/subscriptions",
      "organizations_url": "https://api.github.com/users/kreaninw/orgs",
      "repos_url": "https://api.github.com/users/kreaninw/repos",
      "events_url": "https://api.github.com/users/kreaninw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kreaninw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-12T04:28:53Z",
    "updated_at": "2020-11-12T04:44:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 3D endless runner game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe project's code is quite complex than I originally thought. Therefore as the project grows, there are a lot of functions that I want to add more arguments, and a lot of variables that I want to modify their default value or adding some hints. \r\n\r\nHowever, I can't do that with efficiency due to the fact that the inspector tab is not responded to the members at all. Therefore if I want to edit the function's arguments, I will have to:\r\n\r\n1. Double click at their name in the members' window to go to the function node.\r\n2. Click at the function node to make changes in the inspector tab.\r\n\r\nThat's the unnecessary steps if I could just click at the function in the members' window and modify it in the inspector tab right away.\r\n\r\nIt's even worse with the variable's situation regarding this issue, as in order to edit the default value, change their data type, or add some hints, etc., I will have to:\r\n\r\n1. Click or right-click on their name in the members' window.\r\n2. Hit ctrl+e or click on the menu, depending on the 1st step, to open the variable's small and cramped edit window.\r\n\r\nThat's the unnecessary steps and moreover, editing the variable in the inspector tab which has a much bigger space to work with and also resizable would be a lot more intuitive as far as UX goes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature I am proposing will definitely make the Visual Script's workflow a lot better than it currently is, as this enhancement reduces the required steps for the same task and it also doesn't break any current implementation due to little changes in the editor's current behaviors. \r\n\r\nCurrently, the inspector tab just doing nothing while eating the screen space when the user interacts with various functions or variables in the members' window. \r\n\r\n**EDIT:** Adding an obvious benefit of this enhancement which I forgot to mention earlier. It would be a lot easier to fast peek at the function's arguments, and especially the variable's values of the array and dictionary data type in the inspector tab than anywhere else in the editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake the inspector tab responds accordingly when the user clicks at the Visual Script's members.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement will be used all the time and it can't be worked around with a few lines of script as it's the core feature of the engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is the core functionality.\r\n![2020-11-12 01-23-05](https://user-images.githubusercontent.com/1403194/98895743-2c287a80-2486-11eb-910a-39a39620edc5.gif)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1814",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1814/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1814/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1814/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1814",
    "id": 741259604,
    "node_id": "MDU6SXNzdWU3NDEyNTk2MDQ=",
    "number": 1814,
    "title": "Rename Transform to Transform3D for Godot 4.0",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 1,
    "created_at": "2020-11-12T04:04:20Z",
    "updated_at": "2020-11-12T07:44:03Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** This applies to any 3D game in Godot 4.0+.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe currently have this situation in the master branch (which will eventually become Godot 4.0):\r\n\r\n* `Node2D` has a `Transform2D`\r\n\r\n* `Node3D` has a `Transform`\r\n\r\nTo me, this seems inconsistent.\r\n\r\nWhen talking about transforms, there is some confusion caused by the word \"Transform\" being simultaneously:\r\n\r\n* A data structure (https://docs.godotengine.org/en/latest/classes/class_transform.html).\r\n\r\n* A property (in GDScript it's `transform` but in C# it's `Transform`, so we have both `Transform` and `Transform` in C#).\r\n\r\n* An action (\"to transform\", \"transforming\", etc).\r\n\r\n* A generic word for transformations (including Transform2D).\r\n\r\nAlso, there is an inconsistency with `RemoteTransform3D` being a remote `Transform` instead of a remote `Transform3D`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf we renamed `Transform` to `Transform3D`, then we would have this situation:\r\n\r\n* `Node2D` has a `Transform2D`\r\n\r\n* `Node3D` has a `Transform3D`\r\n\r\nThere would be less confusion when discussing transforms, because then \"Transform\" by itself has one fewer possible meaning, and if you say \"Transform3D\" then you know it has to be referring to the data structure `Transform3D`. The C# code wouldn't have the problem of `Transform` vs `Transform` anymore, and `RemoteTransform3D` would be a remote `Transform3D`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis proposal can be implemented by renaming `Transform` to `Transform3D`.\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/transform3d\r\n\r\nPR: https://github.com/godotengine/godot/pull/38430 (gets conflicts often, very important to rebase right before merging)\r\n\r\nAnother name to consider brought up by @AndreaCatania is `Transform3` (and then making `Transform2D` be `Transform2`). However, I personally would prefer `Transform3D`. This is of course up for discussion.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe enhancement will be used often, as Transform(3D) is used by every 3D project.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis can't be an add-on in the asset library, Transform(3D) is a core data structure.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1814/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1813",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1813/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1813/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1813/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1813",
    "id": 741254102,
    "node_id": "MDU6SXNzdWU3NDEyNTQxMDI=",
    "number": 1813,
    "title": "Allow creating .gitignore and .gitattributes when creating a new project",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-11-12T03:48:05Z",
    "updated_at": "2020-12-11T04:57:01Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThis is relevant for any project that uses Git for version control. It would be nice for myself to have these automatically created, however I am also concerned about other people's projects (see next point).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n`.gitignore` files are (practically but not technically) necessary for Git repositories if you want to prevent Git from tracking and committing generated files. Also, `.gitattributes` is nice to have since we can tell Git to handle line endings properly. I always remember to add these files in my own projects, but it would be nice if it wasn't necessary.\r\n\r\nI am a maintainer on the Godot Asset Library. I often see people forgetting to put proper gitignore files in their projects when posting their projects on GitHub and accidentally committing files they shouldn't like the `.import/` folder. Also, I occasionally see people accidentally having carriage returns in their projects, which is a mistake caused by having Git configured incorrectly.\r\n\r\nThere was also [some concern about possible confusion](https://github.com/godotengine/godot-proposals/issues/1521#issuecomment-697575796) with the `.godot/` folder.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe can solve all of the above issues by having Godot automatically create these files when creating new projects. It will be easier for users who know about these files since Godot will handle it for you and you don't need to copy anything manually, it will make it harder for users who don't know about these files to forget them since (again) Godot will handle it for you, and it will avoid confusion of what should and shouldn't be ignored because (yet again) Godot will handle it for you.\r\n\r\nFor people who aren't using Git, these files are useless, but also they are harmless and extremely small (total 116 bytes) and of course it's super easy to delete them. We can also allow disabling their creation (as the below PR does).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/gitignore-create\r\n\r\nPR: https://github.com/godotengine/godot/pull/42447\r\n\r\n3.2 backport (may or may not actually end up in 3.2): https://github.com/aaronfranke/godot/tree/3.2-gitignore-create\r\n\r\nThe PR makes the creation of these files be optional in the project creation dialog. You can also create them from inside an existing project using the new \"Create Version Control Metadata\" button.\r\n\r\nI also threw in the ability to disabling the creation of the default environment, since it was in mostly the same part of the code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis can be easily worked around by copying the appropriate files into your project.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSince this ideally would happen in every project when creating new projects, it would be best to do in core. Of course, it can be worked around easily for each individual project, but some users will forget to do this.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1813/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1812",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1812/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1812/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1812/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1812",
    "id": 741244862,
    "node_id": "MDU6SXNzdWU3NDEyNDQ4NjI=",
    "number": 1812,
    "title": "Move generated translation files into res://.godot/translations",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-11-12T03:25:01Z",
    "updated_at": "2020-11-12T03:25:01Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** A project with translations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe problem is that these `*.translation` files are generated by Godot and therefore don't need to be committed to a Git repository.  Currently users can ignore these files, but this isn't ideal, as described in the next section.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWith Godot 4.0, we will have the `.import/` folder and the `.mono/` folder moved inside of a general-purpose `.godot/` folder, done in https://github.com/godotengine/godot/pull/38607 and https://github.com/godotengine/godot/pull/38704. The idea is that we should also use this folder to store generated translation files, so that you can ignore a single folder, `.godot/`, and have all generated files in Godot 4.0 be ignored.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/translation-dotgodot\r\n\r\nPR: https://github.com/godotengine/godot/pull/42392 (see here for specific implementation details)\r\n\r\nThe above PR moves the generated `.translation` files into a subfolder of `res://.godot` called `res://.godot/translations`.\r\n\r\nNote that projects need to be manually updated, since `project.godot` explicitly references the translation files. For example, the translation demo contains the text `res://text.en.translation` in `project.godot`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nHaving `*.translation` in the gitignore will prevent them from being committed, which is the most important part, though they are still visible in the file browser when they don't really need to be. So this can be mostly worked around with a single gitignore line.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nTranslation files are generated by the core engine, so where they go is a core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1812/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1810",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1810/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1810/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1810/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1810",
    "id": 741224274,
    "node_id": "MDU6SXNzdWU3NDEyMjQyNzQ=",
    "number": 1810,
    "title": "Allow the mouse to be both confined and hidden by changing the MouseMode enum to be bitwise",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-11-12T02:47:21Z",
    "updated_at": "2020-12-27T08:51:05Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA game where a confined and hidden mouse is desired.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently, the mouse cursor can be one of four states via the [MouseMode enum](https://docs.godotengine.org/en/stable/classes/class_input.html#enumerations):\r\n\r\n* Visible (free to move around anywhere)\r\n\r\n* Hidden (free to move around anywhere)\r\n\r\n* Captured (also makes it hidden)\r\n\r\n* Confined (and visible)\r\n\r\nThere is currently no option to make it *both confined and hidden at the same time*.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to change this enum to be bitwise, so that being hidden can simply be toggled on or off by choosing if the number is odd or not. This will allow us to get Confined with Hidden by simply using the bitwise OR `|` on the two values.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBranch: https://github.com/aaronfranke/godot/tree/mouse-mode-bitwise\r\n\r\nPR: https://github.com/godotengine/godot/pull/43450 \r\n\r\nBecause Hidden/Captured are both hidden, and Visible/Confined are both visible, and Visible/Hidden are both free, and Captured/Confined are both restricted, the current logic is a bit overcomplicated since it usually has to check multiple cases rather than if specific bit(s) are enabled. This change will simplify the code in some areas. For example, `if (mouse_mode != MOUSE_MODE_VISIBLE && mouse_mode != MOUSE_MODE_CONFINED)` can be replaced with `if (mouse_mode & MOUSE_MODE_HIDDEN)`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou could try using confined with a transparent cursor, but [this isn't working right now](https://github.com/godotengine/godot/issues/21745). You can try to work around it by setting the mouse cursor texture to a 1 pixel image or something, but this is still visible so it's not ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHandling the mouse cursor is a core feature. Hiding is already a core feature, and confining is already a core feature, so it would make sense to allow doing both of these things at the same time.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1810/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1809",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1809/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1809/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1809/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1809",
    "id": 741218351,
    "node_id": "MDU6SXNzdWU3NDEyMTgzNTE=",
    "number": 1809,
    "title": "Allow creating/removing `.gdignore` files using the FileSystem dock",
    "user": {
      "login": "Skaruts",
      "id": 6277234,
      "node_id": "MDQ6VXNlcjYyNzcyMzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6277234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Skaruts",
      "html_url": "https://github.com/Skaruts",
      "followers_url": "https://api.github.com/users/Skaruts/followers",
      "following_url": "https://api.github.com/users/Skaruts/following{/other_user}",
      "gists_url": "https://api.github.com/users/Skaruts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Skaruts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Skaruts/subscriptions",
      "organizations_url": "https://api.github.com/users/Skaruts/orgs",
      "repos_url": "https://api.github.com/users/Skaruts/repos",
      "events_url": "https://api.github.com/users/Skaruts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Skaruts/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-12T02:31:20Z",
    "updated_at": "2020-11-13T14:20:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(I merged sections of the proposal where it wasn't clear to me how I could describe one thing and not the other at the same time.)\r\n\r\n**Describe the project you are working on:**\r\nWhile this isn't specific to a project, I've recently came across some annoyances with `.gdignore` while playing around with the [Qodot addon's examples](https://github.com/Shfty/qodot-plugin/tree/master/addons/qodot/example_scenes/0-visuals), where each example map comes in its own folder (because it's more than one file). When editing a map in *TrenchBroom* (the map editor), an *autosave* subfolder is created by it in that map's folder, and that folder has to be ignored so that Godot doesn't import the autosaved map versions. This will happen for every map, so it becomes unwieldy to deal with `.gdignores`. This is a case where I can't use a single `.gdignore` in a folder in order for all its subfolders to be ignored. In this case it's only some specific ones. \r\n\r\nIn the case of personal maps, I'd create a `.gdignore` whenever needed, but in the case of the addon, I had to go back and forth, copy/pasting one around, before I started Godot...\r\n\r\nAnother annoyance is caused by Windows 7, where I can't so readily create dot-files. I think this may also be true on some other systems, but I can't verify it. (And since this is a *create-and-forget* kind of file, a user looking to copy/paste an existing one may have to dig around for where they created one before.)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSo, to summarize, the problem has three facets that I can think of:\r\n1. Some systems don't allow starting file names with a `.`, so naturally users need another way to create them. This can be done using other editors, or maybe terminals, but that's unlikely to be obvious to new users, or even perhaps to anyone that hasn't ever created a dot-file before.\r\n2. When working with many folders that require ignoring, it can become quite unwieldy to deal with. \r\n3. When it comes to new users, it's not even obvious that ignoring folders is a thing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGodot could support creating `.gdignores` in the editor. I think a good place to put it would be the right-click popup menu from the `FileSytem` docker, with an ***\"ignore folder\"*** option. When clicking that option, Godot would create the `.gdignore` in the selected folder. I think that's naturally where users would look for it, and as far as new users are concerned, it's a likely place to come across it.\r\n\r\nHowever, if the editor supports creating a `.gdignore`, then I think it should also support deleting it. Either it should keep a list of ignored folders accessible in the Project Settings (or the Project menu), where the user could change it back, or by still showing the ignored folders in the `FileSystem` (with the icon in a different color), and alternating the ***\"ignore folder\"*** option with ***\"include folder\"*** or something along those lines, and Godot would create or delete the respective `.gdignore` file. I'm personally more fond of the latter. (And there could be an icon on the FileSystem docker to toggle showing hidden folders.)\r\n\r\nI would propose that `.gdignore` could also be improved by making it work more like `.gitignore` does. This has several advantages: only a single file is required per project, everything is in one place, the project structure is cleaner, and it could even be extended to ignore files rather than just folders. In the case of the above-mentioned *autosave* folders, a simple mention of `\"autosave\"` in the `.gdignore` would be enough to automatically ignore all the existing *autosave* folders, as well as any that might be created in the future.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know how often anyone uses this. It's probably dependent on personal workflow. But I suppose this would fall under core editor functionalities, and as more than just a nice-to-have. And besides, as an addon it would remain mostly obscured, especially to new users, and not be as helpful as it could be. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1807",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1807/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1807/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1807/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1807",
    "id": 741124153,
    "node_id": "MDU6SXNzdWU3NDExMjQxNTM=",
    "number": 1807,
    "title": "Add per-viewport `pre_draw` and `post_draw` signals",
    "user": {
      "login": "Astrono2",
      "id": 8162008,
      "node_id": "MDQ6VXNlcjgxNjIwMDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8162008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Astrono2",
      "html_url": "https://github.com/Astrono2",
      "followers_url": "https://api.github.com/users/Astrono2/followers",
      "following_url": "https://api.github.com/users/Astrono2/following{/other_user}",
      "gists_url": "https://api.github.com/users/Astrono2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Astrono2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Astrono2/subscriptions",
      "organizations_url": "https://api.github.com/users/Astrono2/orgs",
      "repos_url": "https://api.github.com/users/Astrono2/repos",
      "events_url": "https://api.github.com/users/Astrono2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Astrono2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-11T22:50:35Z",
    "updated_at": "2020-11-11T23:15:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a portal add-on.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm rendering the portals with viewports and extra cameras. My current problem is that each camera's view through a portal is obstructed by the portal itself (I've disabled back face culling for two-sided portals). It would be easy to solve this problem using layers and cull masks, but that would require anyone using my add-on to have a free layer for each portal, which scales poorly when adding more portals, and it makes the add-on clunkier to use.\r\nThe implementation I (as many others) am basing mine on ([Sebastian Lague's](https://youtu.be/cWpFZbjtSQg?t=157)) hides the portal plane before rendering the view form the camera and then shows it again, which he can do because he's rendering manually, which currently isn't possible in Godot.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding per-viewport pre_draw and post_draw signals wouldn't be as intrusive or big of a change as adding manual rendering, but it would still allow developers to hide and show objects before and after rendering a certain viewport.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe already existing frame_pre_draw and frame_post_draw signals, get emitted at the beggining and end of the [VisualServerRaster::draw](https://github.com/godotengine/godot/blob/adf2dabbde23fdd89803871e26dd1d33ca20bf77/servers/visual/visual_server_raster.cpp#L97) and [RenderingServerRaster::draw](https://github.com/godotengine/godot/blob/a6d4484e57f54ac4570a4f6fa5a13f7bf4933004/servers/rendering/rendering_server_raster.cpp#L97) methods in 3.2 and master respectively. My proposal is to add two signals (pre_draw and post_draw) to the Viewport class and emit them at the beginning and end of [VisualServerViewport::_draw_viewport](https://github.com/godotengine/godot/blob/adf2dabbde23fdd89803871e26dd1d33ca20bf77/servers/visual/visual_server_viewport.cpp#L78) and/or [RenderingServerViewport::_draw_viewport](https://github.com/godotengine/godot/blob/a6d4484e57f54ac4570a4f6fa5a13f7bf4933004/servers/rendering/rendering_server_viewport.cpp#L90) methods (again, 3.2 and master respectively).\r\nI haven't checked any signal related code in the source, and was worried that emitting two different signals at the beginning and end of a method wouldn't work. But since that's how frame_pre_draw and frame_post_draw work, it seems like it's that easy, if people are interested I can make the pull request.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs far as I know, no. For my project I'm gonna try to make a hacky workaround, since I want it to work without using a custom build. But I'm still thinking about how to do it, I'm open to suggestions. Maybe I'll just try to achieve the same result with a different approach, but I figure these two signals would be pretty useful for other projects anyway.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know if it can be done with an add-on at all. I'm going to try, but even if it works, it's not going to be pretty. Implementing this in core is the easier alternative.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1807/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1806",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1806/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1806/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1806/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1806",
    "id": 741038737,
    "node_id": "MDU6SXNzdWU3NDEwMzg3Mzc=",
    "number": 1806,
    "title": "Add Vignette from list World Environment",
    "user": {
      "login": "UnknownS1024",
      "id": 17591539,
      "node_id": "MDQ6VXNlcjE3NTkxNTM5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17591539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UnknownS1024",
      "html_url": "https://github.com/UnknownS1024",
      "followers_url": "https://api.github.com/users/UnknownS1024/followers",
      "following_url": "https://api.github.com/users/UnknownS1024/following{/other_user}",
      "gists_url": "https://api.github.com/users/UnknownS1024/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UnknownS1024/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UnknownS1024/subscriptions",
      "organizations_url": "https://api.github.com/users/UnknownS1024/orgs",
      "repos_url": "https://api.github.com/users/UnknownS1024/repos",
      "events_url": "https://api.github.com/users/UnknownS1024/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UnknownS1024/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-11T20:11:38Z",
    "updated_at": "2020-11-11T20:30:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ntesting demo 3D for Godot 4.0\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI see textures on my desktop it's too inconvenient to insert godot and I don’t want independent shaders, because you need ready-made ones inside the World Environment to completely full so that users can make post process effects faster prototype\r\n\r\n![image](https://user-images.githubusercontent.com/17591539/98856003-fc6d7880-246d-11eb-9796-7f6ba6591577.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhere GLSL code for vignette [link youtube](https://www.youtube.com/watch?v=caQZKeAYgD8) it's just not difficult\r\n![image](https://user-images.githubusercontent.com/17591539/98858748-30e33380-2472-11eb-9a0c-f5256f0b4428.png)\r\n\r\n\r\ncustomize any vignette suitable game style desire\r\n\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nyes inside the core of godot",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1805",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1805/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1805/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1805/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1805",
    "id": 740919594,
    "node_id": "MDU6SXNzdWU3NDA5MTk1OTQ=",
    "number": 1805,
    "title": "Make a node that allows for anaglyph ( red- cyan ) SBS 3D effect . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 63,
    "created_at": "2020-11-11T16:56:12Z",
    "updated_at": "2021-01-12T13:45:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, now also have Oculus Quest 2 VR head-set, and got some red-cyan 3D glasses . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWell, I've been wanting for a cheap, reliable, hardware-independent way, of making the 3D effect, like on 3D tv's, and it turns out there are anaglyph glasses, passive polarized glasses, and active shutter 3D glasses . . The last two require a special screen, but anaglyph glasses work, right away, on any standard monitor . . I thought the 3D effect would be really bad, but after watching a 3D anaglyph movie, on youtube, it is as good, or better, than the cinema, but many or, some of the videos, are not so good . . I was wondering if Godot could maybe get a setting, to turn on anaglyph 3D rendering, looks like this image . .\r\n\r\n![2020-11-11 1743](https://user-images.githubusercontent.com/61069740/98839076-658cc600-2445-11eb-8ce4-fb5d9f16236a.jpg)\r\n\r\nThe cost of such glasses are 10 - 12 dollars, for two pairs, and they work on ALL monitors, and TV's, connected with a cable, also . . One can also download SBS 3D movies, and play them in VLC player, and there's the movie 3D effect . . If you have the time, or so, try and get some red-cyan 3D glasses, and watch this movie, it's really amazing, really cool . .\r\n\r\nhttps://www.youtube.com/watch?v=e00N024D7Lg\r\n\r\n3D is a bit, of a gimmick, or so . . But, that movie, and a few other on youtube look REALLY good, even better than the 3D movies, except for the slight tinge effect, towards yellow, greenish, from the colored glass . . Since this works really well, and is a super-cheap way for people to experience 3D, I was hoping you could make a special AnaglyphCamera3D, it require two cameras nearly side-by-side, and over-laying the two perspectives, seen it done, in a shader, but since this is very, very cheap, as in 10 - 12 dollars, for TWO glasses, it seems a fitting way, for people to have a bit of silly fun, with 3D in Godot, and doesn't require a special monitor, projector, or polarized screen . . . If you try and get some of these glasses, they look like this, watch the youtube video, I think you'll agree, the effect is stunning, for such a low cost . .\r\n\r\n![2020-11-05 0359](https://user-images.githubusercontent.com/61069740/98839615-09767180-2446-11eb-8eed-2b124e60dd4a.jpg)\r\n\r\nSince Godot is totally free software, and looking at youtube videos, one needs to really tweak the settings, to get the right look, not sure if the distance between the two side-by-side cameras is individual, so maybe there should be a setting, for this . . Anyway, it's a really cool way to get a nice 3D effect, and I think you'll have your minds blown, if you watch the above video . . It's dirt-cheap, fun, and doesn't require special hard-ware, IF Godot was to get some sort of 3D effect, on any monitor, this would be a good place to start, so I hope we could get an AnaglyphCamera3D, that's basically two cameras, side-by-side, with the images rendered, so they look, like this . .\r\n\r\n![2020-11-11 1750](https://user-images.githubusercontent.com/61069740/98839895-6f62f900-2446-11eb-9807-f70e83c76a28.jpg)\r\n\r\nIt's so cheap, I see no reason it can't be a camera, or, a node, in Godot, and it takes 20 minutes to code it, but one needs to know how to do shader stuff, so I can't do it, it's simply too difficult, but the video I saw, I think to get the optimal effect, one needs to add some different settings, like maybe eye-distance, or so . . Was thinking Godot could get this, or so, for fun . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n3D is sort of, cool and, nice, or such . . Would really like to have a new node, maybe in Godot 4, or so, that renders a 3D viewpoint, in anaglyph setting, but a really well - implemented version, so it looks like the above video, which is pretty amazing <3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not sure how to do this, but it'd be a nice thing, in Godot, since it's so cheap, glasses cost 10 dollars, or less, it works on any monitor, down to the cheapest, also tv sets and, then people can have some fun with 3D, or so . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it could be cool, if it was really well implemented, since 3D is pretty amazing, but so far isn't supported, with a quick feature, or so . . It actually looks amazing, if you could get some of these glasses, and see the Bunny Buck video, it's actually the full 3D effect, of modern cinemas, but basically available to all, regardless of monitor, hard-ware platform, etc, and it could be fun to play a 3D game, made in Godot, where the only hardware required, is some 8 - 10 dollar glasses, from internet . . <3\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, bec. 3D is cool, and sort of fits the 3D game engine, very well <3 . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1805/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1804",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1804/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1804/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1804/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1804",
    "id": 740829310,
    "node_id": "MDU6SXNzdWU3NDA4MjkzMTA=",
    "number": 1804,
    "title": "Add \"Create Collision Polygon Sibling\" to Polygon2D",
    "user": {
      "login": "AnilBK",
      "id": 17506575,
      "node_id": "MDQ6VXNlcjE3NTA2NTc1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17506575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnilBK",
      "html_url": "https://github.com/AnilBK",
      "followers_url": "https://api.github.com/users/AnilBK/followers",
      "following_url": "https://api.github.com/users/AnilBK/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnilBK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnilBK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnilBK/subscriptions",
      "organizations_url": "https://api.github.com/users/AnilBK/orgs",
      "repos_url": "https://api.github.com/users/AnilBK/repos",
      "events_url": "https://api.github.com/users/AnilBK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnilBK/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-11T14:54:28Z",
    "updated_at": "2020-11-12T02:17:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nVarious Test Projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGeneration of _Collision Polygon_ From Polygon2D.\r\nPolygon2D makes for quick design and level prototyping.\r\nHowever, you have to manually add points create the Collision Polygon2D.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd \"_Create Collision Polygon Sibling_\" to Polygon2D, like how Sprite2D has.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe \"Collision Polygon2D\" node already generates collision polygons from points.\r\nIt just needs to be added to Polygon2D inspector.\r\n![concept2](https://user-images.githubusercontent.com/17506575/98824786-cd4e0b80-245b-11eb-9755-2a8674f8096d.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTool Script, maybe. Could be manually done, too.\r\nI have seen people making games with just Polygon2D. It would be useful for them too.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be uniform with other nodes like Sprite2D and MeshInstance, which has functions to generate collision siblings too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1804/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1802",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1802/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1802/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1802/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1802",
    "id": 740105018,
    "node_id": "MDU6SXNzdWU3NDAxMDUwMTg=",
    "number": 1802,
    "title": "Add a `rect_max_size` property to Control nodes",
    "user": {
      "login": "MattUV",
      "id": 13215043,
      "node_id": "MDQ6VXNlcjEzMjE1MDQz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13215043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MattUV",
      "html_url": "https://github.com/MattUV",
      "followers_url": "https://api.github.com/users/MattUV/followers",
      "following_url": "https://api.github.com/users/MattUV/following{/other_user}",
      "gists_url": "https://api.github.com/users/MattUV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MattUV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MattUV/subscriptions",
      "organizations_url": "https://api.github.com/users/MattUV/orgs",
      "repos_url": "https://api.github.com/users/MattUV/repos",
      "events_url": "https://api.github.com/users/MattUV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MattUV/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-10T17:30:38Z",
    "updated_at": "2020-11-10T18:00:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on an English language training software for French ATCs (it mostly uses Control nodes and is not a game).\r\nBased on radio exchanges and their transcripts, ATCs must solve some English exercises, designed by a teacher within the software.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy software requires users to read lots of texts. On larger screens, it is not comfortable to have the texts take the whole screen width. Hence I have to manually adapt the maximum width of my nodes if they get too large.\r\nIt is working, but as I use many Control objects, it stutters a lot when resizing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to add a rect_max_size on control nodes that would work like rect_min_size.\r\nIt would be transparent to the user, and help with complex UI by gaining a lot of time.\r\n\r\n**Without this feature**\r\n![sans](https://user-images.githubusercontent.com/13215043/98709298-7e807300-2382-11eb-9a4e-71a2f37cd035.gif)**\r\n\r\n**With this feature**\r\n![avec](https://user-images.githubusercontent.com/13215043/98709294-7de7dc80-2382-11eb-8ed8-b2aa7b864644.gif)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen a Control node \"tries\" to be bigger than what is defined in rect_max_size, it cannot be enlarged anymore.\r\nIt would be the same behavior as rect_min_size, but inversed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around by adding a MarginContainer (SpanLimiter) and use this piece of code\r\n\r\n```gdscript\r\nfunc _on_SpanLimiter_resized():\r\n\t_limit_span()\r\n\r\nfunc _limit_span():\r\n\tif SpanLimiter.rect_size.x > MAX_SPAN:\r\n\t\tvar half_margin = (SpanLimiter.rect_size.x - MAX_SPAN) / 2\r\n\t\t\r\n\t\tSpanLimiter.set(\"custom_constants/margin_left\", half_margin)\r\n\t\tSpanLimiter.set(\"custom_constants/margin_right\", half_margin)\r\n\t\r\n\telse:\r\n\t\tSpanLimiter.set(\"custom_constants/margin_left\", 5)\r\n\t\tSpanLimiter.set(\"custom_constants/margin_right\", 5)\r\n```\r\n\r\nHowever, using it in many scenes is not convenient. Plus, it forces to add a MarginContainer and modify the Nodes hierarchy only for that feature. It is also not really efficient (it stutters and shows black bars when resizing)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt looks a lot like rect_min_size, and seems more natural to be integrated.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1802/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1801",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1801/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1801/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1801/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1801",
    "id": 740042583,
    "node_id": "MDU6SXNzdWU3NDAwNDI1ODM=",
    "number": 1801,
    "title": "`PackedScene.instance()` should not cause lag or a different way to instance interactively should be provided",
    "user": {
      "login": "winston-yallow",
      "id": 44872771,
      "node_id": "MDQ6VXNlcjQ0ODcyNzcx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/44872771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winston-yallow",
      "html_url": "https://github.com/winston-yallow",
      "followers_url": "https://api.github.com/users/winston-yallow/followers",
      "following_url": "https://api.github.com/users/winston-yallow/following{/other_user}",
      "gists_url": "https://api.github.com/users/winston-yallow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winston-yallow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winston-yallow/subscriptions",
      "organizations_url": "https://api.github.com/users/winston-yallow/orgs",
      "repos_url": "https://api.github.com/users/winston-yallow/repos",
      "events_url": "https://api.github.com/users/winston-yallow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winston-yallow/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-11-10T16:09:56Z",
    "updated_at": "2021-01-01T13:49:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWe are working on a small open world game. The world is mostly auto generated but large, and the player can move around freely.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe world grew to a size where it began to lag so we implemented chunk loading/unloading. This works smoothly, but every time we call `.instance()` we get a small lag of about 40ms to 60ms. A reproduction project can be found in godotengine/godot#43439\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding a non blocking way to instance scenes would allow us to load chunks more smoothly.\r\n\r\nFrom a user perspective I see two possible solutions:\r\n\r\n1. When generating a `PackedScene` (for example with `ResourceInteractiveLoader`) everything should already be loaded so far that instancing is fast. This allows the user to preload the scene smoothly with `ResourceInteractiveLoader` as currently advertised for background loading.\r\n2. `PackedScene` could provide a method `instance_interactive()` which works in a similar way to `ResourceLoader.load_interactive()`. This allows the user to poll each frame to check if the loading has finished yet.\r\n\r\nI think Option 2 would be easier to implement as it does not require a change of what `PackedScene` stores internally.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI can only describe this from the user perspective. Code using approach number 2 could look like this:\r\n```gdscript\r\nvar scene: PackedScene = preload('Scene.tscn')\r\nvar instancer: InteractiveInstancer\r\n\r\nfunc _ready() -> void:\r\n    instancer = scene.instance_interactive()\r\n\r\nfunc _process(_delta: float) -> void:\r\n    match instancer.poll():\r\n        InteractiveInstancer.FINISHED:\r\n            var node := instancer.get_node()\r\n            add_child(node)\r\n            set_process(false)\r\n        InteractiveInstancer.OK:\r\n            pass # Continue instancing\r\n        InteractiveInstancer.ERROR:\r\n            push_error(instancer.get_error())\r\n            set_process(false)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would require more than just a few lines. One could use `PackedScene._bundled` to create the nodes one by one.\r\nI am not sure if this should be done as `_bundled` seems more like an implementation detail that should not be relied on.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nScene instancing is a core feature of godot that should (in my personal opinion) provide a way of loading & instancing scenes seamlessly.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1801/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1799",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1799/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1799/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1799/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1799",
    "id": 739313433,
    "node_id": "MDU6SXNzdWU3MzkzMTM0MzM=",
    "number": 1799,
    "title": "Add DynamicFont support to localization remap",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-09T19:46:01Z",
    "updated_at": "2020-11-10T14:58:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nhttps://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe build-in localization system don't have support to remap Font Data .ttf files only the bitmap font files making it not useful to use Remap with dynamic fonts.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd ttf to the list of remap assets.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nwill be used in any localized project.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1798",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1798/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1798/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1798/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1798",
    "id": 739152469,
    "node_id": "MDU6SXNzdWU3MzkxNTI0Njk=",
    "number": 1798,
    "title": "Add a \"Add Camera from view\" button and shortcut in the 3D editor",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-11-09T16:00:42Z",
    "updated_at": "2020-11-11T12:17:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI need this in every 3D prototype, even the simplest scenes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAdding a new camera is always incredibly tedious.\r\nWhen working on my project, I live in the perspective view 99% of the time. I import and arrange assets and when it finally comes to saving the scene I want to add a camera. Currently this means pointless clicks through menus, dragging the camera from it's zero position, rotating it around until it finally is close to the perfect location I had in my perspective view already.\r\nI am frustrated and annoyed by this because I have to repeat this mindless task with every scene again and again, when there is a camera (perspective view) at the exact location and rotation I want already.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA single click instead of repeatedly wasting minutes of clicking and dragging to approximate what was already there.\r\nThis would also make it a million times easier to place cameras for cutscenes, and 3D in 2D viewports.\r\n![add_camera](https://user-images.githubusercontent.com/47016402/98578669-ef118c00-22bd-11eb-86d2-c48dcf0caaf1.png)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like in Maya I would really wish for a button and a shortcut that immediately adds a 3D Camera to the scene (to the last known scene tree position), at the precise translation and rotation of my perspective view.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would not know how. Even it is was possible, it's a much needed usability feature, I think anyone needs to have at their fingertips when they use the 3D editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's not a usability improvement if it is behind the barrier of an optional download.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1798/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1797",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1797/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1797/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1797/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1797",
    "id": 739113579,
    "node_id": "MDU6SXNzdWU3MzkxMTM1Nzk=",
    "number": 1797,
    "title": "Switch from SCons to Meson to improve Godot's build performance",
    "user": {
      "login": "RevoluPowered",
      "id": 748770,
      "node_id": "MDQ6VXNlcjc0ODc3MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/748770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RevoluPowered",
      "html_url": "https://github.com/RevoluPowered",
      "followers_url": "https://api.github.com/users/RevoluPowered/followers",
      "following_url": "https://api.github.com/users/RevoluPowered/following{/other_user}",
      "gists_url": "https://api.github.com/users/RevoluPowered/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RevoluPowered/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RevoluPowered/subscriptions",
      "organizations_url": "https://api.github.com/users/RevoluPowered/orgs",
      "repos_url": "https://api.github.com/users/RevoluPowered/repos",
      "events_url": "https://api.github.com/users/RevoluPowered/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RevoluPowered/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-11-09T15:14:37Z",
    "updated_at": "2020-12-16T21:54:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot engine development / FBX Importer\r\n**Describe the problem or limitation you are having in your project:**\r\nRebuild times are quite slow, also we have no option to swap to shared linking\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe were going to try using meson as it claims to be much faster than scons for intermediate rebuild times.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWe'd port to meson tool which is written in python.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo,\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes it won't work in a module.\r\n\r\nSo @Calinou and I were thinking of throwing a prototype build together for the editor only.\r\n\r\nWe'd port the existing behaviour to meson and see how much editor build times are improved by, then ask the core devs to look at the prototype.\r\n\r\nWe chose meson because its close to scons but with better performance overall, and it's not going to be outright refused like CMAKE would be since CMAKE is poorly explained and poorly documented.\r\n\r\nNoteworthy a lot of projects use MESON it's very maintained and used for Mesa.\r\n\r\nI believe that reduz previously mentioned that he likes scons because it can create reproducible builds, and meson supports this by default.\r\n\r\nhttps://mesonbuild.com/Reproducible-builds.html\r\n\r\nMeson also gives us the ability to run the build on multiple machines using ninja without hooking back into meson each time for each call, meaning the build environment won't change and cause a rebuild.\r\n\r\nA prototype would include:\r\n- editor build Linux\r\n- standard options debug_symbols=yes/no \r\n- ninja support out of the box @fire  (https://mesonbuild.com/Quick-guide.html) :heart: \r\n- clearly defined dependencies for modules\r\n- the ability to disable more modules and enable them as required without breaking the engine since we can make a clear dependency tree\r\n- the ability to swap live between shared libs and static-libs for modules like #1796\r\n- code generated headers could be rebuilt once and made so that it won't rebuild every time, allowing even further caching advantages in the compilation process\r\n- we can half our link times by not including debug symbols when you only need to test some code fast!\r\n- **we can make our rebuild times faster than CMAKE, SCONS and pretty much everything else https://mesonbuild.com/Simple-comparison.html**\r\n- We would get much better .sln generation for MSVC.\r\n\r\nI think it would be better to swap, but swapping IS not for the faint of heart, but a worthwhile endeavour and I believe it would also improve the build times for higher core count computers since we can take advantage of ninja files.\r\n\r\nWe should maybe make a prototype just to decide to see if we want to use it going forward.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1797/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1796",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1796/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1796/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1796/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1796",
    "id": 739069733,
    "node_id": "MDU6SXNzdWU3MzkwNjk3MzM=",
    "number": 1796,
    "title": "Add a SCons option to compile modules as shared libraries for faster rebuilds",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-09T14:21:24Z",
    "updated_at": "2020-11-09T14:27:09Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Related to https://github.com/godotengine/godot/issues/41271 and https://github.com/godotengine/godot/issues/42048.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nEven on a high-end CPU, performing an incremental build of Godot can take a long time compared to other codebases of a similar size. This is in part due to slow linking times. Thanks to [LLD](https://lld.llvm.org/)'s performance, using `use_llvm=yes use_lld=yes` helps on Linux, but it's still relatively slow.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a `linking` SCons option which accepts the `static` (default) or `shared` values. The current behavior is `static`, so we'd have to implement the required logic in SCons to build shared libraries when using `linking=shared`.\r\n\r\nSince the libraries will be smaller and relinked only when needed, this allows the linker to do less work to provide an incremental build of Godot. This could also help speed up core builds since the core binary will be smaller.\r\n\r\nUsing shared libraries will likely only be supported for development purposes, not in release builds.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nWe have some [documentation](https://docs.godotengine.org/en/latest/development/cpp/custom_modules_in_cpp.html#improving-the-build-system-for-development) on using dynamic linking for third-party modules, but we still have to figure out how to apply this on a more global scale. For example, this could be applied to all built-in modules.\r\n\r\nEither way, adding support for dynamic linking won't be an easy task. It'll likely require rewriting significant portions of our SCons logic.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core buildsystem functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core buildsystem functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1796/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1795",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1795/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1795/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1795/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1795",
    "id": 738864740,
    "node_id": "MDU6SXNzdWU3Mzg4NjQ3NDA=",
    "number": 1795,
    "title": "Optimize setting large amounts of GridMap cells by adding a batching property",
    "user": {
      "login": "mrjustaguy",
      "id": 50302479,
      "node_id": "MDQ6VXNlcjUwMzAyNDc5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50302479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjustaguy",
      "html_url": "https://github.com/mrjustaguy",
      "followers_url": "https://api.github.com/users/mrjustaguy/followers",
      "following_url": "https://api.github.com/users/mrjustaguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjustaguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjustaguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjustaguy/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjustaguy/orgs",
      "repos_url": "https://api.github.com/users/mrjustaguy/repos",
      "events_url": "https://api.github.com/users/mrjustaguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjustaguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-09T09:41:32Z",
    "updated_at": "2020-11-09T13:31:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nEndless 3D Noise\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGridmap Causes 1-2 Second delay when 100 set_cell_item calls are applied in a single frame, while the calls themselves (all 100 of them combined) take a ms\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCell Batching, I suspect the reason for the massive slowdown is because each call is processed separated from each other, and as such batching having the ability to batch the calls into a single call would give a solid speedup in these types of scenarios.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd a property to GridMap (Tilesets are probably affected too) that is a Bool \"Batching\" (or some such)\r\nIf \"Batching\" is set to true in script, set_cell_item just accumulates it's data (Coords, item, orientation, so the stuff passed really) in an array.\r\nWhen set_cells (or some such) is called Iterate over the accumulated data, setting cells according to it in one go.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, as any way of setting cells has to individually add cells using set_cell_item, which just leads back to the problem.\r\nOnly alternative is to use something like https://github.com/Zylann/godot_voxel which requires recompiling the engine, and might not be as flexible as desired (for example can't have different types of meshes, which -might- in some cases be desired)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGridMap is part of core, and any add-on using Gridmap would have the issue of not being able to send a single call for updating cells, as it would really just be a whole bunch of set_cell_item calls that are the problem in the first place.. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1795/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1794",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1794/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1794/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1794/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1794",
    "id": 738572556,
    "node_id": "MDU6SXNzdWU3Mzg1NzI1NTY=",
    "number": 1794,
    "title": "Auto-Complete ':' on Func line if Auto Brace Complete is on",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-08T22:52:54Z",
    "updated_at": "2020-11-09T10:15:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCreating a game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAlright, get ready for the most nit-picky request ever.\r\n\r\nI have started using `auto brace complete`, and it has helped a lot with my habit of forgetting braces and `\"`s. However, it has lead to another habit. Forgetting to place the `:` at the end of a function line.\r\nWhenever I am adding a new `func something` line, it auto completes the last brace, but doesn't also add the `:` at the end. This then means I need to remember to move one to the right, and add the `:` manually. I tend to forget this constantly, because I subconsciously expect the auto brace complete to finish the line for me, and my brain has moved on to the meat & potatoes of the function.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like the `auto brace complete` setting to be expanded to automatically add the `:` at the end of the line, whenever a `(` is placed on a line that starts with `func` (unless it is already there).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![autobracecompletefunction](https://user-images.githubusercontent.com/10502115/98486363-33991b00-221d-11eb-8f08-9c42bf4f2756.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around in exactly 2 button presses. But placing that final `)` can be worked around in 1, so... 😄 \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nFrankly I would be ashamed to request this, if it wasn't for the fact that Auto Brace Complete already exists, and is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1794/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1793",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1793/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1793/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1793/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1793",
    "id": 738336035,
    "node_id": "MDU6SXNzdWU3MzgzMzYwMzU=",
    "number": 1793,
    "title": "Add a horizontal slider to the scene view",
    "user": {
      "login": "Syraleaf",
      "id": 13417427,
      "node_id": "MDQ6VXNlcjEzNDE3NDI3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13417427?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Syraleaf",
      "html_url": "https://github.com/Syraleaf",
      "followers_url": "https://api.github.com/users/Syraleaf/followers",
      "following_url": "https://api.github.com/users/Syraleaf/following{/other_user}",
      "gists_url": "https://api.github.com/users/Syraleaf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Syraleaf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Syraleaf/subscriptions",
      "organizations_url": "https://api.github.com/users/Syraleaf/orgs",
      "repos_url": "https://api.github.com/users/Syraleaf/repos",
      "events_url": "https://api.github.com/users/Syraleaf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Syraleaf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-11-07T23:22:11Z",
    "updated_at": "2020-11-12T14:21:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm currently working on a city builder game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe other designer made a UI mock up but I am unable to select all the nodes. As shown in the image below, I simply cannot see most of the children. \r\n![image](https://user-images.githubusercontent.com/13417427/98453266-9aec9780-2157-11eb-9c80-e3f636a74fcb.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a horizontal slider at the bottom would allow me to move the view in the window to the right so I can select the desired nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/13417427/98453304-fb7bd480-2157-11eb-8bdc-a8932d4d3573.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe way to work around this issue is making a lot of different scenes. This would require us to save all the components of the UI before we actually know if we want to keep them. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure. it could be an add-on? Just feels a bit weird if we'd have to download one for this type of issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1793/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1792",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1792/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1792/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1792/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1792",
    "id": 738334817,
    "node_id": "MDU6SXNzdWU3MzgzMzQ4MTc=",
    "number": 1792,
    "title": "LineEdit.editable and TextEdit.readonly should have identical naming scheme.",
    "user": {
      "login": "SviatoslavVilkovych",
      "id": 7716864,
      "node_id": "MDQ6VXNlcjc3MTY4NjQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7716864?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SviatoslavVilkovych",
      "html_url": "https://github.com/SviatoslavVilkovych",
      "followers_url": "https://api.github.com/users/SviatoslavVilkovych/followers",
      "following_url": "https://api.github.com/users/SviatoslavVilkovych/following{/other_user}",
      "gists_url": "https://api.github.com/users/SviatoslavVilkovych/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SviatoslavVilkovych/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SviatoslavVilkovych/subscriptions",
      "organizations_url": "https://api.github.com/users/SviatoslavVilkovych/orgs",
      "repos_url": "https://api.github.com/users/SviatoslavVilkovych/repos",
      "events_url": "https://api.github.com/users/SviatoslavVilkovych/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SviatoslavVilkovych/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-07T23:12:01Z",
    "updated_at": "2020-11-12T14:23:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt is a personal project for the university. I am making a financial calculator. Not a perfect case for Godot, but I want to learn Godot so I am trying to use it everywhere.\r\n**Describe the problem or limitation you are having in your project:**\r\nI replaced TextEdit with LineEdit and noticed that present in TextEdit [**readonly**](https://docs.godotengine.org/en/stable/classes/class_textedit.html#class-textedit-property-readonly) property is not present in LineEdit. Instead of it, LineEdit has [**editable**](https://docs.godotengine.org/en/stable/classes/class_lineedit.html#class-lineedit-property-editable). Looking into the documentation of both, I think they identical:\r\n\r\n> ...existing text cannot be modified and new text cannot be added...\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to have a single naming for this functionality unless such a different naming scheme intended for something else (but that's up to Godot team, I just want to bring awareness).\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy proposed enhancement will help clients of Godot to learn faster and better understand API.\r\nWhen writing your code, you will know that either `editable` or `readonly` responsible for making node **uneditable**, so it will be possible to have an array of nodes and disable input to all of them when needed.\r\n```\r\nvar array_of_lineEditsAndTextEdits = [textEdit1, textEdit2, lineEdit1, lineEdit2]\r\nfor node in array_of_lineEditsAndTextEdits:\r\n   node.readonly = true # or it can be node.editable = false\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOf course, this can be avoided by having an if-statement in this loop or splitting the array into two.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis enhancement proposal related to naming in Godot and can not be changed by the asset library.\r\n\r\nThank you for your attention!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1792/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1791",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1791/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1791/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1791/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1791",
    "id": 738333888,
    "node_id": "MDU6SXNzdWU3MzgzMzM4ODg=",
    "number": 1791,
    "title": "Improve theme editor",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-07T23:04:12Z",
    "updated_at": "2020-11-10T01:29:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nZorin OS GTK Theme for Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIts very hard to go through all the controls and try to find out what does what\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest adding all the controls to this panel (even sub controls)\r\n![image](https://user-images.githubusercontent.com/2453707/98452717-ab285680-2106-11eb-89e3-51445a6f8596.png)\r\n\r\nThen I suggest instead of this massive list\r\n![image](https://user-images.githubusercontent.com/2453707/98452738-d448e700-2106-11eb-9c25-e9954dc69ee1.png)\r\nIt would show something like this for the control you have selected...\r\n![image](https://user-images.githubusercontent.com/2453707/98453018-884b7180-2109-11eb-826c-20095e23fae1.png)\r\n\r\n\r\nEach control would have these properties and icons would in a icon group for press hover, focus, normal, and disabled\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee above\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis might be able to be worked around but why?\r\nThis systems is better and makes theme editing mush easier\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt a improvement over the existing one",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1791/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1789",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1789/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1789/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1789/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1789",
    "id": 738315409,
    "node_id": "MDU6SXNzdWU3MzgzMTU0MDk=",
    "number": 1789,
    "title": "OS Theme resources",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-11-07T20:48:03Z",
    "updated_at": "2020-12-09T21:09:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNone right now\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNone with my project but more so with the editor.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCan we have a theme resource which takes the current windows, mac, or linux theme and translates it for godot?\r\n\r\nWindows < 10: Win32 themes\r\nWindows == 10: UWP themes\r\nMac: aqua?\r\nLinux: Gtk\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess it would be a type of theme resource where we just plug into godot or our root control and it makes it looks like a native app.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think the current theming support is good enough right now so it would have to be improved for this.\r\nIt also would not take just a few lines of script\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI realize this might require alot of code maybe it could be a official plugin?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1788",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1788/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1788/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1788/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1788",
    "id": 738264470,
    "node_id": "MDU6SXNzdWU3MzgyNjQ0NzA=",
    "number": 1788,
    "title": "Add a local rotation function to Transform",
    "user": {
      "login": "AlexanderPruss",
      "id": 8113473,
      "node_id": "MDQ6VXNlcjgxMTM0NzM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8113473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexanderPruss",
      "html_url": "https://github.com/AlexanderPruss",
      "followers_url": "https://api.github.com/users/AlexanderPruss/followers",
      "following_url": "https://api.github.com/users/AlexanderPruss/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexanderPruss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexanderPruss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexanderPruss/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexanderPruss/orgs",
      "repos_url": "https://api.github.com/users/AlexanderPruss/repos",
      "events_url": "https://api.github.com/users/AlexanderPruss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexanderPruss/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-07T15:38:02Z",
    "updated_at": "2020-11-13T11:59:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a 2.5D isometric tactics game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI wanted to add an input allowing the user to rotate the isometric camera 45 degrees left or right, like you can do in the XCOM series. I naively called `Transform.rotate()` on the Spatial node holding my camera, expecting the node to rotate in place, i.e. to rotate around `Transform.origin`. Instead, the node rotated around the global origin. \r\n\r\nIt was surprising for me that `rotate` was not a local operation, and that there was a global `rotate` but no local `rotate` in `Transform`. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding a `Transform.rotate_local()` would make it easier to rotate transforms locally, and make it clear on code-completion which of the rotate functions is local and which isn't.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nTwo implementations of `Transfrom.rotate_local()` come to mind.\r\n\r\n1. Multiply the basis by the rotation matrix directly -\r\n`var rotationMatrix = getRotationMatrix(axis, rotationDegrees)`\r\n`transform.basis = transform.basis * rotationMatrix`\r\n\r\n2. Alternatively, just call the Basis's `rotated` function.\r\n`transform.basis = transform.basis.rotated(axis, rotationDegrees)`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis enhancement can be worked around by just rotating the basis of the Transform directly. Adding the enhancement would aim chiefly at making the methods of Transform self-document. A newcomer to Godot can't know if `Transform.rotate()` does a local or a global rotation. But if there's also a `Transform.rotate_local()` function, then the purpose of both functions becomes immediately clear.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe purpose of the enhancement is to make the code self-documenting and make it slightly easier to use. This is helpful for everyone, but especially for newer users, who probably don't have add-ons installed.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1787",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1787/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1787/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1787/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1787",
    "id": 738092762,
    "node_id": "MDU6SXNzdWU3MzgwOTI3NjI=",
    "number": 1787,
    "title": "Expose cryptography operations on Ed25519",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-06T23:06:54Z",
    "updated_at": "2020-11-23T00:14:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI wanted to verify a Ed25519 public key signed signature for a PoolByteArray to determine if it is correct for downloaded archives.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nLike: https://github.com/godotengine/godot/pull/39755\r\n\r\nImplement Ed25519:\r\n```gdscript\r\n\r\nextends Node\r\n\r\nvar crypto = Crypto.new()\r\n\r\nfunc _ready():\r\n\t# Generate new Ed25519 key.\r\n\tvar key = crypto.generate_ed25519()\r\n\t# Save key and certificate in the user folder.\r\n\tkey.save(\"user://key.key\") # Save private key\r\n\tkey.save(\"user://key.pub\", true) # Save public key only.\r\n\t_load_and_test()\r\n\r\nfunc _load_and_test():\r\n\tvar priv = load(\"user://key.key\")\r\n\tvar pub = load(\"user://key.pub\")\r\n\tassert(pub.is_public_only())\r\n\t# Encryption\r\n\tvar data = \"Some data\"\r\n\tvar encrypted = crypto.encrypt(pub, data.to_utf8())\r\n\t# Decryption\r\n\tvar decrypted = crypto.decrypt(priv, encrypted)\r\n\t# Signing\r\n\tvar signature = crypto.sign(HashingContext.HASH_SHA256, data.sha256_buffer(), priv)\r\n\t# Verifying\r\n\tvar verified = crypto.verify(HashingContext.HASH_SHA256, data.sha256_buffer(), signature, pub)\r\n\t# Checks\r\n\tassert(verified)\r\n\tassert(data.to_utf8() == decrypted)\r\n```\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nTo be determined.\r\n\r\nSwapping for Crypto for https://github.com/randombit/botan is hard to justify.\r\n\r\nPlumb the code for operations on Ed25519.\r\n\r\nDo not want to use an outdated fork of mbedtls: https://github.com/VirgilSecurity/mbedtls/tree/virgil-security-ed25519\r\n\r\nCannot use https://github.com/DavyLandman/compact25519/releases/tag/v1.0.2. Does not support certificate format.\r\n\r\nCannot use https://github.com/arvidn/libtorrent/tree/0f0afec8c8025cb55dfd2f36612d4bf61a29ff8a/src/ed25519 from bittorrent. This requires many libtorrent internals.\r\n\r\nMbedtls implementation is stalled as of 2020-11-06. We can revisit later. https://github.com/ARMmbed/mbedtls/issues/2452\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot a few lines of script in complexity.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nInvolves mbedtls which is a core library and is not exposed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1787/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1786",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1786/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1786/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1786/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1786",
    "id": 737997480,
    "node_id": "MDU6SXNzdWU3Mzc5OTc0ODA=",
    "number": 1786,
    "title": "Add Time stamp to Output",
    "user": {
      "login": "DisDoh",
      "id": 10052295,
      "node_id": "MDQ6VXNlcjEwMDUyMjk1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10052295?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DisDoh",
      "html_url": "https://github.com/DisDoh",
      "followers_url": "https://api.github.com/users/DisDoh/followers",
      "following_url": "https://api.github.com/users/DisDoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/DisDoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DisDoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DisDoh/subscriptions",
      "organizations_url": "https://api.github.com/users/DisDoh/orgs",
      "repos_url": "https://api.github.com/users/DisDoh/repos",
      "events_url": "https://api.github.com/users/DisDoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DisDoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-06T19:39:59Z",
    "updated_at": "2020-11-06T20:56:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking on Web/BlueTooth Poker 8\r\n**Describe the problem or limitation you are having in your project:**\r\nWould be helpful to see the timestamp in the ouptut console of Godot,\r\nTo compare some data when the have been printed in the output console.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt could help for example the last build was and you just have to look at the timestamp to see it.\r\nBut i have to admit it's quite fancy so not a really improvement but a detail improvement.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe timestamp could be in this format:\r\nhh:mm-DD-MM-YYYY : Output log\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nyes , it's console related so it should be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1786/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1785",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1785/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1785/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1785/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1785",
    "id": 737978008,
    "node_id": "MDU6SXNzdWU3Mzc5NzgwMDg=",
    "number": 1785,
    "title": "Add interpolation and separate vectors to the RemoteTransform node",
    "user": {
      "login": "JustYourAverageJosh",
      "id": 47060866,
      "node_id": "MDQ6VXNlcjQ3MDYwODY2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/47060866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustYourAverageJosh",
      "html_url": "https://github.com/JustYourAverageJosh",
      "followers_url": "https://api.github.com/users/JustYourAverageJosh/followers",
      "following_url": "https://api.github.com/users/JustYourAverageJosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustYourAverageJosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustYourAverageJosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustYourAverageJosh/subscriptions",
      "organizations_url": "https://api.github.com/users/JustYourAverageJosh/orgs",
      "repos_url": "https://api.github.com/users/JustYourAverageJosh/repos",
      "events_url": "https://api.github.com/users/JustYourAverageJosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustYourAverageJosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-06T19:02:16Z",
    "updated_at": "2020-11-09T11:55:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n---\r\nI am working on any 3D project, using the InterpolatedCamera as a smooth way to follow my main player. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n---\r\nSince InterpolatedCamera  is depreciating in 4.0, I've been looking at alternate ways to interpolate the camera, _without using code_. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n---\r\nAdding an interpolation option (and interpolate amount) to RemoteTransform could resolve this issue, with the added benefit that ANY node could now be interpolated with the RemoteTransform node! \r\n-To take it further, there could be an option to enable/disable each separate Vector of transform, rotation, and scale (x,y,z)!\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n---\r\n**LERP**: Add an option for \"Linear Interpolation\" to the RemoteTransform properties. Under that option, add a slider from 0 to 1 for the speed.\r\n**Vectors**: Under the current \"Update\" property, there are options Position, Rotation, and Scale, with the option top turn on and off. We could add sub options for each, X,Y, and Z, which would be turned on and off separately. If sub properties can't be done, perhaps Position, Rotation, and Scale could be their own property each with the options of X, Y, and Z.\r\n  -NOTE: This should be done RemoteTransform2D as well, just remove the Z option of course.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n---\r\nAlthough I believe it would be used often, if not that yes, it can be worked around easily\r\n```\r\nnode.translation=node.translation.linear_interpolate(translation,lerp_amount)\r\nnode.rotation_degrees=node.rotation_degrees.linear_interpolate(rotation_degrees,lerp_amount)\r\n```\r\nHowever, I believe this is irrelevant because RemoteTransform as it is now can also be worked around with a few lines of script \r\n```\r\ntransform=node.transform, rotation_degrees=node.rotation_degrees, scale=node.scale\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n---\r\nThe same reason RemoteTransform is a currently a node, for a convenience that I believe everybody would want and use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1785/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1782",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1782/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1782/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1782/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1782",
    "id": 737642706,
    "node_id": "MDU6SXNzdWU3Mzc2NDI3MDY=",
    "number": 1782,
    "title": "Make `HTTPRequest.request()` return the response instead of emitting a signal",
    "user": {
      "login": "Tyrannosaurus1234",
      "id": 36250109,
      "node_id": "MDQ6VXNlcjM2MjUwMTA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/36250109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tyrannosaurus1234",
      "html_url": "https://github.com/Tyrannosaurus1234",
      "followers_url": "https://api.github.com/users/Tyrannosaurus1234/followers",
      "following_url": "https://api.github.com/users/Tyrannosaurus1234/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tyrannosaurus1234/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tyrannosaurus1234/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tyrannosaurus1234/subscriptions",
      "organizations_url": "https://api.github.com/users/Tyrannosaurus1234/orgs",
      "repos_url": "https://api.github.com/users/Tyrannosaurus1234/repos",
      "events_url": "https://api.github.com/users/Tyrannosaurus1234/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tyrannosaurus1234/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-06T10:20:30Z",
    "updated_at": "2020-12-11T07:52:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A web crawler/interface for an internet forum.\r\n\r\n**Describe the problem or limitation you are having in your project:** Because HTTPRequest.request() emits a signal containing the response to the request instead of the response itself, it's very cumbersome to make sequential requests. Instead of simply doing `var response = http.request(url)` and using it as necessary, you have to:\r\n\r\n1. connect the HTTPRequest node to a receiver function that may vary based on the type of request\r\n2. in the receiver function, either pass the response back to the function the request was initiated from, or make it a global\r\n3. if you now want to use that HTTPRequest node for a different request that has to be interpreted a different way (i.e. it would have a different receiver function), you now have to disconnect it from the previous receiver function and connect it to the new one.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** It makes the process of multiple sequential requests entirely less cumbersome and confusing to manage, and brings it in line with how HTTP libraries in other languages (python `requests` for example) usually operate.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nvar response = http.request(url)\r\nprint(response.body)\r\n```\r\nDepending on how HTTPRequest.request() was implemented behind the scenes, it could be non-blocking and thus require a `yield` or 4.0 `await` to apply sequentially, e.g.:\r\n```\r\nvar response1 = yield(http.request(url), \"completed\")\r\nprint(response1.body)\r\nvar response2 = yield(http.request(url), \"completed\")\r\nprint(response2.body)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Anyone who uses the HTTPRequest node would be using this constantly, and if there's a simple workaround, I'm not aware of it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It is a fundamental change to a built-in node.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1782/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1781",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1781/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1781/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1781/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1781",
    "id": 737413991,
    "node_id": "MDU6SXNzdWU3Mzc0MTM5OTE=",
    "number": 1781,
    "title": "Several different font styles (light, bold, italic etc.) and colors in one single TextEdit",
    "user": {
      "login": "Kukuschi",
      "id": 64613417,
      "node_id": "MDQ6VXNlcjY0NjEzNDE3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/64613417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kukuschi",
      "html_url": "https://github.com/Kukuschi",
      "followers_url": "https://api.github.com/users/Kukuschi/followers",
      "following_url": "https://api.github.com/users/Kukuschi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kukuschi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kukuschi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kukuschi/subscriptions",
      "organizations_url": "https://api.github.com/users/Kukuschi/orgs",
      "repos_url": "https://api.github.com/users/Kukuschi/repos",
      "events_url": "https://api.github.com/users/Kukuschi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kukuschi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-06T02:50:49Z",
    "updated_at": "2020-11-06T17:13:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nStory outlining and writing tool: One can write text snippets, compare and edit them\r\n and arrange them in different ways (utilizing a custom tree structure). \r\nOne starts with a rough sketch and refine it in different stages. The program collects and presents all data that is needed in a certain scene and presents it to the writer when he needs them.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe TextEdit node does not allow different font styles or font colors. \r\nDifferent styles are needed. e.g. italics for inner monologues and different colors to mark text that needs revision etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInstead of one font, several fonts (same font in different styles) can be added to the TextEdit (best would be to not limit the amount as there can be many different thinkable styles: bold, italic, small caps, underlined, etc. + all thinkable combinations of those). \r\nOne can switch between the different styles and colors of text while writing or change a style of selected text. (like in most basic word processors).\r\nHaving the ability to have different font sizes within one TextEdit would be a nice addition.\r\nMaybe doable with a subset of BBCode?\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDifferent fonts can be added to the them of an element or maybe (less limiting?) via code:\r\n\r\n```\r\nvar bold = false\r\nvar italic = false\r\n...\r\nvar fontsize = 0\r\nvar fontcolor = Color(0, 0, 0, 0)\r\n\r\nfunc _ready():\r\n   var dynamic_font_italic = DynamicFont.new() \r\n   dynamic_font_italic.font_data = load(\"res://Fonts/Font-Italic.ttf\")\r\n   var dynamic_font_bold = DynamicFont.new()\r\n   dynamic_font_bold.font_data = load(\"res://Fonts/Font-Bold.ttf\")\r\n   ...\r\n\r\nfunc _process(delta):\r\n   #get the actual style combination,  fontsize an color from some radio buttons/input fields or something like that and write the following text accordingly into Textedit (maybe via BBCode) \r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can hardly be worked around.\r\nOne very clumsy workaround would be to overlay a RichTextLable over a TextEdit (font color = background color) that does ignore mouse and transfer text on the fly to it by adding BBCode. \r\nThe alignment is a mess and it gets unusable when the text gets longer than the TextEdit (scroll bar).\r\nAlso selecting text is ugly etc. pp.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImho that is self-evident. TextEdit like it is seems more like a emergency solution and basic formatting (styles, color, maybe size) seem to be very basic features for such a node. \r\n\r\n\r\nP.S. Syntax highlighting is no solution to this as it is not about highlighting keywords automatically but highlighting/changing text manually.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1781/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1780",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1780/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1780/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1780/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1780",
    "id": 737246721,
    "node_id": "MDU6SXNzdWU3MzcyNDY3MjE=",
    "number": 1780,
    "title": "Add an ability to search for a function and a variable in Visual Script by double-clicking at their name in the members window",
    "user": {
      "login": "kreaninw",
      "id": 1403194,
      "node_id": "MDQ6VXNlcjE0MDMxOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1403194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kreaninw",
      "html_url": "https://github.com/kreaninw",
      "followers_url": "https://api.github.com/users/kreaninw/followers",
      "following_url": "https://api.github.com/users/kreaninw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kreaninw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kreaninw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kreaninw/subscriptions",
      "organizations_url": "https://api.github.com/users/kreaninw/orgs",
      "repos_url": "https://api.github.com/users/kreaninw/repos",
      "events_url": "https://api.github.com/users/kreaninw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kreaninw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-05T20:31:28Z",
    "updated_at": "2020-11-05T20:59:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 3D endless runner game. The project's code is quite complex than I originally thought.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen my coding in Visual Script is becoming more and more complex, I lost track of many functions and variables due to being unable to locate and find them, thus making my debug process a non-practical working pipeline.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe ability to search for a function and a variable is very essential in the coding process, no matter what the programming language. \r\n\r\nCurrently, in Visual Script, the user can only search for a function by double-clicking at the function name in the members' window. However, it's being limited to the function's flow itself, not including when the function is being called elsewhere, for instance, if the function is being called in other functions, the user wouldn't know at all due to being unable to search and find them.\r\n\r\nAnd the situation of the variable regarding this issue is even worse than the function because the user can't search for the variable that is being in use in the script at all. For instance, only 1 mistake connection can ruin the entire script, especially when it doesn't crash the script with an upfront error but just causing many weird/undesired behaviors that can't be detected by the engine's debugger. This could cost days to debug instead of just a few minutes if the user could search for the variable.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image20](https://user-images.githubusercontent.com/1403194/98292528-9a9fa100-1f8b-11eb-891e-18dc2a60b9d9.png)\r\n\r\nMy attached mock-up is consisting of 3 things: \r\n\r\n1. Double-click at the function or the variable for searching.\r\n2. A popup appears with the corresponding function/variable name. \r\n- In this popup, the user can search for the function, starting at the function's flow (current implementation when the user double-clicked at the function name), then the nearest function that's being called in other places. \r\n- For the variable, the user can search for the nearest variable that's being used in every function. \r\n- And for the variable that the user only declared its default value but not using it anywhere, the resulting number will be shown as 0 results.\r\n3. Highlight/focus corresponding to the function or the variable in the searching, the same as the current implementation.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement will be used as often as the ability to find text (ctrl+f) in GDScript. It's impossible to replicate this functionality with a few lines of script as it's at the engine core level.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is the core functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1780/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1779",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1779/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1779/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1779/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1779",
    "id": 737229437,
    "node_id": "MDU6SXNzdWU3MzcyMjk0Mzc=",
    "number": 1779,
    "title": "Add an option for custom shader functions to materials",
    "user": {
      "login": "Lexpartizan",
      "id": 48552343,
      "node_id": "MDQ6VXNlcjQ4NTUyMzQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48552343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexpartizan",
      "html_url": "https://github.com/Lexpartizan",
      "followers_url": "https://api.github.com/users/Lexpartizan/followers",
      "following_url": "https://api.github.com/users/Lexpartizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexpartizan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexpartizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexpartizan/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexpartizan/orgs",
      "repos_url": "https://api.github.com/users/Lexpartizan/repos",
      "events_url": "https://api.github.com/users/Lexpartizan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexpartizan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-05T20:03:31Z",
    "updated_at": "2020-11-05T20:59:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a rain shader.\r\nhttps://github.com/Lexpartizan/Godot_rain_shader\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a lot of standard materials that should get wet in the rain.\r\nAnd now I need to manually alter all these environment materials to fit my shader. And this can be quite complex materials, painstakingly customized by artists.\r\nI think this problem will arise wherever you need to have some kind of shader effects for many game entities with different materials.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think the material in the engine is still converted to a shader. At least I think so. I suggest adding the \"additive shader\" option to the material settings, where you can specify a resource containing custom Shader code. It should look like this: when adding such a resource, its variables are added after the existing list of variables main shader. Commands from the vertex resource function to the end of the vertex function of the main shader, and so on. \r\nThis will allow you to access ALBEDO to get the albedo value, perform calculations, and write the new value to ALBEDO. And thus make a darkening for a wet surface, for example.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis could be implemented using the #include preprocessor directives. \r\nThis could work with the existing next_pass option, but unfortunately it is not possible to get the values of ALBEDO, ROUGHNESS, etc from previous pass. So these are slightly different concepts.\r\nI have no experience with other game engines and I do not know how this problem is solved there.\r\nThere may be a better way.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can simply replace dozens or hundreds of materials with shaders, but this is not as convenient as standard materials.\r\n\r\nThere is a similar proposal https://github.com/godotengine/godot-proposals/issues/944 , but mine is a little different. I would like to keep the standard appearance of the material (it is more familiar and easier to configure), just by specifying a link to the code with additional features, such as exposure to rain, burning, and so on..\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is a growth problem that the engine will face sooner or later, as a lot of users will want to use different effects on a lot of different objects with different materials.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1779/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1777",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1777/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1777/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1777/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1777",
    "id": 736896095,
    "node_id": "MDU6SXNzdWU3MzY4OTYwOTU=",
    "number": 1777,
    "title": "Add a way to hide default values from properties in the documentation",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1849547975,
        "node_id": "MDU6TGFiZWwxODQ5NTQ3OTc1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:docs",
        "name": "topic:docs",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-05T12:34:38Z",
    "updated_at": "2020-11-06T13:50:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extenstion.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSee godotengine/godot#43317. While the original issue is resolved for eliminating diffs coming from random values in VCS by adding `ADD_PROPERTY_DEFAULT` for each of the properties, the general issue still persists. Some property values might be:\r\n- random in nature (like in `RandomNumberGenerator.seed`).\r\n- platform-dependent\r\n- may be too verbose (like default `code` written as `String`).\r\n\r\nI have to provide the same default values in derived classes as well (see `Random2D` ← `Random` ← `RandomNumberGenerator`). The fact that `RandomNumberGenerator` doesn't randomize the seed automatically means that I also have to `ADD_PROPERTY_DEFAULT(\"seed\", 0)` in derived classes for base classes if I do want to randomize the seed automatically (in singletons, not local instances, see goostengine/goost#35). It means that the more properties you add to the class, the more properties you have to provide defaults for in derived classes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a way to selectively hide default values from properties in the documentation. This should improve the potential lack of intuitiveness as described by Akien in https://github.com/godotengine/godot/issues/43317#issuecomment-722031199:\r\n\r\n> Is there a specific reason why you're using properties to get randomized values, instead of `get_` methods? That seems pretty non-intuitive from a API user point of view.\r\n\r\nSo, instead of this:\r\n\r\n![godot_default_seed](https://user-images.githubusercontent.com/17108460/98240639-61a70280-1f72-11eb-82d8-bf7e3616a0fa.png)\r\n\r\nThe user will see this:\r\n\r\n![godot_default_seed_hide](https://user-images.githubusercontent.com/17108460/98240717-826f5800-1f72-11eb-835e-1e17973889f3.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe above issues can be avoided by adding:\r\n- `PROPERTY_USAGE_NON_DETERMINISTIC` or `PROPERTY_USAGE_HIDE_DEFAULT` property usages\r\n- add an option for `ADD_PROPERTY_DEFAULT` or create a similar one such as `HIDE_PROPERTY_DEFAULT`.\r\n\r\nI'd personally prefer the property usage approach because:\r\n- most developers used to engine development are familiar with such workflow: reports such as godotengine/godot#43317 could be potentially avoided;\r\n- can be useful for anything else, not just hiding default values in the documentation;\r\n- looking at the source in Godot 4.0 dev, the `ADD_PROPERTY_DEFAULT` is used quite rarely, and may be used exactly for this purpose instead:\r\n![godot_default_property_override](https://user-images.githubusercontent.com/17108460/98239968-6f0fbd00-1f71-11eb-8675-a2a0e2776f74.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nHave to use `ADD_PROPERTY_DEFAULT` each time in `Random` classes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about the core documentation feature itself.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1777/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1776",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1776/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1776/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1776/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1776",
    "id": 736839470,
    "node_id": "MDU6SXNzdWU3MzY4Mzk0NzA=",
    "number": 1776,
    "title": "Add shorthand `expr$NodePath` for `expr.get_node(\"NodePath\")`",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-11-05T11:09:41Z",
    "updated_at": "2020-11-06T13:20:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I want to create `onready` variables for nested nodes, I have to repeat the path prefix:\r\n\r\n```gdscript\r\nonready var item1 = $Scroll/Grid/Item1\r\nonready var item2 = $Scroll/Grid/Item2\r\nonready var item3 = $Scroll/Grid/Item3\r\n```\r\n\r\nObviously, this is not good. For example, the path to the `Grid` node may change and must be changed in all variables.\r\n\r\nI can replace this with\r\n\r\n```gdscript\r\nonready var grid = $Scroll/Grid\r\nonready var item1 = grid.get_node(\"Item1\")\r\nonready var item2 = grid.get_node(\"Item2\")\r\nonready var item3 = grid.get_node(\"Item3\")\r\n```\r\n\r\nBut I would like to use a more compact syntax.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd shorthand `expr$NodePath` for `expr.get_node(\"NodePath\")`. Then we can do this:\r\n\r\n```gdscript\r\nonready var grid = $Scroll/Grid\r\nonready var item1 = grid$Item1\r\nonready var item2 = grid$Item2\r\nonready var item3 = grid$Item3\r\n```\r\n\r\n![](https://user-images.githubusercontent.com/47700418/98241329-da5e8c80-1f7b-11eb-850b-2275fc3e5aac.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI haven't looked at how this is implemented, so I don't know.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is possible to attach the script directly to the `Grid` node, but this option is not always acceptable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis cannot be done with an add-on, because it affects the GDScript syntax.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1776/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1775",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1775/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1775/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1775/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1775",
    "id": 736680009,
    "node_id": "MDU6SXNzdWU3MzY2ODAwMDk=",
    "number": 1775,
    "title": "Control EventPropagation options rather than MouseFilter",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-05T07:18:42Z",
    "updated_at": "2020-11-05T13:49:18Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Original: https://github.com/godotengine/godot/issues/16863#issuecomment-716896423\r\nWIP: https://github.com/nathanfranke/godot/tree/event-propagation\r\n\r\n**Describe the project you are working on:**\r\nParticularly UI focused applications.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOften, input events are captured without one knowing, especially using container nodes. The mouse filter workflow is generally confusing and needs a change of some sort.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nModification of the mouse filtering system with some key behavioural changes.\r\n\r\nEVENT_PROPAGATION_NONE - Same as MOUSE_FILTER_STOP\r\nEVENT_PROPAGATION_PARENT - Same as MOUSE_FILTER_PASS\r\nEVENT_PROPAGATION_ALL - Similar to MOUSE_FILTER_IGNORE, but the event is still passed to this control. If a user doesn't want to process inputs on this control, that shouldn't be done here; one should use `set_process_input`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNew Control Input Group:\r\n![image](https://user-images.githubusercontent.com/14253836/98206022-cde81e80-1efe-11eb-804b-78706171f9ed.png)\r\n\r\nExample using this hierarchy:\r\n- Scene\r\n--- Red (Propagation All, shouldn't matter)\r\n------ Green (Propagation All)\r\n------ Blue (Propagation Parent)\r\n![image](https://user-images.githubusercontent.com/14253836/98209526-b0b64e80-1f04-11eb-8fd5-79044ffdcc7d.png)\r\n\r\nHovering over Blue should yield \"Blue->Red\"\r\nIf Blue Propagation is set to All, it should yield \"Blue->Green->Red\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis should be used often, plus it is a modification to an existing API\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMouse Filter is already core\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1775/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1774",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1774/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1774/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1774/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1774",
    "id": 736351972,
    "node_id": "MDU6SXNzdWU3MzYzNTE5NzI=",
    "number": 1774,
    "title": "Automatically call `randomize()`  in GDScript upon running a project",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2020-11-04T19:00:35Z",
    "updated_at": "2020-11-27T16:53:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't, but users do:\r\n- godotengine/godot#1605\r\n- godotengine/godot#4050\r\n- godotengine/godot#28689\r\n- godotengine/godot#35894\r\n- godotengine/godot#43128\r\n\r\nI can likely find a bunch of other examples.\r\n\r\nI recall stumbling upon the same limitation when I first started using the engine (like 4 years ago), with mostly lack of programming experience. So, I think this is mostly confusing to beginners.\r\n\r\nSee also #1590:\r\n\r\n> The global RNG has to be randomized implicitly, as in many other scripting programming languages.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCall `randomize()` in the engine automatically for global RNG, so this is mostly about GDScript and built-in `Math::random()` usages in the engine. This should not affect local instances of `RandomNumberGenerator` classes.\r\n\r\nTests in C++ should use `RandomNumberGenerator` locally instantiated for reproducible random results (for stress tests), and of course in GDScript for similar use cases if you *do* need to control the seed, like procedural generation.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's a matter of calling `randomize()` somewhere in the engine. This breaks compatibility, but it's the perfect time for Godot 4.0.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSure, just call `randomize()` in GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlready part of core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1774/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1772",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1772/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1772/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1772/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1772",
    "id": 736078034,
    "node_id": "MDU6SXNzdWU3MzYwNzgwMzQ=",
    "number": 1772,
    "title": "Make a CompositeAnimationPlayer node for making cut-scenes and dialogue more easily . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-11-04T12:31:21Z",
    "updated_at": "2020-11-07T00:35:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, with magic system, a bit more . . . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI really want to make cinematics, video sequences, so on, but right now I have to code it, and it's very difficult . . My interest in Godot is telling stories and, the artistic side, and I've seen Unity has something called Timeline, it's a drag-and-drop program, where one can drag video sequences ( similar, to AnimationPlayer stuff ), and trigger Audio events, and place camera animations . . It's a very simple ' sub-program ', but it really helps visually oriented teams put their animations, audio, and 2D text ( sub-titles ) in a composite animation, ie. one calls the player walk animation, for 2 seconds, while the camera, is panning over, the animation, and one can call 2D elements, like text-dialogue boxes, and also audio, from AudioStreamPlayer nodes, so one can quickly set up a linear animation, audio, and UI element sequence . . I know it's technically more correct, to CODE it, but as a visual script user, it would really help me ' churn ' out animations, cinematics, or prototype them . . It would work like this, or so . .\r\n\r\n<img width=\"1920\" alt=\"Skærmbillede (649)\" src=\"https://user-images.githubusercontent.com/61069740/98111000-423fa500-1ea0-11eb-8287-483bfa9934d0.png\">\r\n\r\nIt would look something, like so . .\r\n<img width=\"1628\" alt=\"Skærmbillede (648)\" src=\"https://user-images.githubusercontent.com/61069740/98111468-f04b4f00-1ea0-11eb-9436-71cd885ec220.png\">\r\n\r\nSo, one could drag and drop animationplayer node animations ( that could trigger animations, but also trigger particlesystems on, so on, or dialogue boxes as visible, or so ), and play them side-by-side, with AudioStreamPlayer stuff, or such . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'm a visual story-teller, mostly, and my use-case for Godot is, the telling of stories, through dialogue, animations, sound, so on, this feature would really help me use the engine, as a beginner, and technically it'd just be a node, that can combine or, composite several animationplayer animations, and audiostreamplayer sounds, in a visual graph, a bit easier, for artists . . It would allow me to do about 80 - 90 % of animation problems or, situations I could ever want, and it'd really help me, and would help less code-oriented teams do, the same, very fast . . I know it's a noob solution, to coding it, but for me, that is very difficult, having such a node, would really help me, especially if the different events or, so were represented with different colored bars ( maybe one could select a custom color, for each event, or so, would, be nice . . ) Since Godot is getting such amazing graphics, just stunning, for ME, and maybe many others, this would be a nice way to create linear cut-scenes, in a user-friendly way, similar to Unity's current 'Timeline' program . . .\r\n\r\nhttps://www.youtube.com/watch?v=G_uBFM3YUF4\r\n\r\nAlso, I think this would help many beginners, that are unfamiliar with code, to make their first project, with nice animation sequences, or so . . Maybe it could be called a SequencePlayer node, or an EventPlayer node, not sure . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee the above chart, a more drag-and-drop based method, as an alternative to hard-coding animations, audio events, that for me as a visual scripter, is very difficult, as a total beginner . . Thanks . . . <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure, I'm not SO good at code yet, I feel I can do this, confidently, right now, Thanks . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it'd be a simple node, and not that complex, a help to visual artists, or prototype animators, etc, that want to see what their amazing blender work looks like, combined with audio, and camera movement, almost, immediately . . .\r\n\r\nThanks, just, an idea . . . <3 <3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1772/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1769",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1769/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1769/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1769/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1769",
    "id": 735542266,
    "node_id": "MDU6SXNzdWU3MzU1NDIyNjY=",
    "number": 1769,
    "title": "Rework tilemaps and tilesets",
    "user": {
      "login": "groud",
      "id": 6093119,
      "node_id": "MDQ6VXNlcjYwOTMxMTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6093119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/groud",
      "html_url": "https://github.com/groud",
      "followers_url": "https://api.github.com/users/groud/followers",
      "following_url": "https://api.github.com/users/groud/following{/other_user}",
      "gists_url": "https://api.github.com/users/groud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/groud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/groud/subscriptions",
      "organizations_url": "https://api.github.com/users/groud/orgs",
      "repos_url": "https://api.github.com/users/groud/repos",
      "events_url": "https://api.github.com/users/groud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/groud/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 116,
    "created_at": "2020-11-03T18:23:27Z",
    "updated_at": "2021-01-07T21:34:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTilemap/Tileset UX is bad\r\n\r\n# Draft proposal\r\n\r\nThis proposals aims at improving the tilset/tilemap UX with a big refactor. This proposal thus lists a lot of changes.\r\n\r\n## Global changes\r\n\r\n- Merging the tilemap and the tilset inside the same place, at the bottom.\r\n\r\n## Tilemap node update\r\n\r\nMove those properties to tilesets/tileset layers:\r\n  - Mode (tile shape), then add new options (\"offset square\" and \"hexagon\")\r\n  - Cell size\r\n  - Y sort and tile origin\r\n  - Collision and occluder related properties (moved to their respective tilset layers, see below)\r\n  - Cell clip UV (while it does not seem doing something, it is apparently useful for tilsets with filtered textures)\r\n\r\nRemove:\r\n  - Compatibility mode\r\n  - Centered texture (not sure for what it is useful for)\r\n  - Custom transform (Replaced by a skew parameter for all modes)\r\n  - Half offset = replaced by new \"offset square\" and \"hexagon\" tile modes.\r\n\r\nThe rotation, translation, etc... of individual tiles is now handled inside the tileset, with the possibility to create \"alternative versions\" of each tile\r\n\r\nI plan to add dragable handles to increase/decrease the size of the working area, similar to what LEd implements. It should make it easier to work with the bucket fill for example.\r\n\r\n## Tilemap editor\r\n\r\n![2020-11-04-101734_1146x671_scrot](https://user-images.githubusercontent.com/6093119/98092601-1fed5d80-1e87-11eb-9d75-e8ac8f535007.png)\r\n![2020-11-04-101747_1148x671_scrot](https://user-images.githubusercontent.com/6093119/98092613-24197b00-1e87-11eb-9c67-53504088543c.png)\r\n![2020-11-04-101759_1145x669_scrot](https://user-images.githubusercontent.com/6093119/98092615-254aa800-1e87-11eb-8d88-47825a2b0d62.png)\r\n\r\n\r\nWith this proposal, the two editors get merged at the bottom. Consequently a switch allows switching between the tilemap and the tileset editor.\r\nIn the tilemap editor, the common tools to edit tilemaps are present (paint, rectangle, bucket fill, etc...) in a toolbar.\r\nWith possibly some tool-specific options in the toolbar too.\r\n\r\nProposals:\r\n- Add the possibility to select multiple tiles at the same time in the bottom panel, to paint a pattern,\r\n- With the \"use random tiles\" option, instead of painting the pattern, the tool used randomly choose tiles out of the selected ones,\r\n- When selecting a tile, a panel on the right appears where you can select alternative tiles,\r\n- You can either paint \"tiles\", \"terrains\" or \"scenes\". Once configured correctly, terrains are basically acting like autotiles.\r\n\r\nThe scenes tabs is missing on the picture, but the idea would be to have a list of scenes to paint as if they were tiles.\r\n\r\n## The tileset editor\r\n\r\nWith a button on the top right of the tileset editor, you can open the tileset resouce in the inspector.\r\nThis allow modifying properties global to the tileset (tile mode, cell size, etc...).\r\n\r\n### The source panel\r\n\r\n![2020-11-04-102117_1081x634_scrot](https://user-images.githubusercontent.com/6093119/98092880-778bc900-1e87-11eb-8824-0be83fed60f8.png)\r\n\r\nThe source tab in the bottom tilset editor simply allows to use textures in the tilset. For each source, you have two properties:\r\n- Offset: offset at the origin of the texture,\r\n- Separation: space between each tile in the texture. \r\nNo need to choose a tile size, this is defined by the tileset's size property.\r\n\r\nPossibly, this panel might be also used to:\r\n- remove some unused tiles from each source,\r\n- create some alternative tiles for each tile, by potentially rotating or flipping them.\r\n\r\n### The tileset layers\r\n\r\nThe new tileset editor introduces the concept of Tileset Layers. A tileset layer is simply a way to add a set of properties assigned to each tile.\r\nAll tileset layers are optionally added to a tileset, each added layer provides a single feature to the tileset. For example, adding a \"Tilset collision layer\" to a tileset allows it to handle collisions.\r\nOcclusion or navigation have also their dedicated tileset layers.\r\n\r\nTileset layers are global to the whole tileset resource, whatever the source image you use, the tileset layers are the same.\r\n\r\nTileset layer properties are edited in a dedicated tab in the Tileset tileset editor. There, you can edit a set of properties global to the whole layer, and add or remove layers. This is an example where the Terrain layer would be edited:\r\n\r\n![2020-11-04-103431_1081x633_scrot](https://user-images.githubusercontent.com/6093119/98094248-51672880-1e89-11eb-8669-87ab4f376262.png)\r\n\r\nHere follows the list of possible tileset layers.\r\n\r\n#### Collision layer\r\n\r\n![2020-11-04-104330_1082x631_scrot](https://user-images.githubusercontent.com/6093119/98095273-a35c7e00-1e8a-11eb-9c05-4760fc10b859.png)\r\n\r\n*Info:*\r\n\r\nHandle collisions for one type of physic objects\r\n\r\nLimited to 1 layer for now, but possibly we could add more, for each type of phisycal material to handle (like \"water\" only slowing down the player while \"wall\" would block them)\r\n\r\n*Layer properties:*\r\n- is area (?)\r\n- collision mask\r\n- collision layer\r\n- friction\r\n- bounce\r\n- use kinematic\r\netc...\r\n\r\n*Tile properties for this layer:*\r\n- A shape\r\n\r\n#### Occlusion layer\r\n\r\n*Info:*\r\n\r\nHandle occlusion for one light layer.\r\n\r\nLimited to 1 layer for now, but possibly we could add more if it is uselful ?\r\n\r\n*Layer properties:*\r\n- layer\r\n\r\n*Tile properties for this layer:*\r\n- A shape\r\n\r\n#### Navigation layer\r\n\r\n*Info:*\r\n\r\nHandles navigation.\r\n\r\nLimited to 1 layer for now, but possibly we could add more if it is uselful ?\r\n\r\n*Layer properties:*\r\nNone\r\n\r\n*Tile properties for this layer:*\r\n- A shape\r\n\r\n#### Probability layer\r\n\r\n*Info:*\r\n\r\nAllow assigning probabilities to tiles when they are picked randomly to be placed.\r\nThis is used either when using the \"select random tiles\" options or when tiles are automatically picked by the terrain painting tools.\r\nWhen several tiles are possible to be placed, the higher the probability value, the higher the chances for this tile to be picked.\r\n\r\nLimited to 1 layer.\r\n\r\n*Layer properties:*\r\nNone\r\n\r\n*Tile properties for this layer:*\r\n- A float value\r\n\r\n#### Z-Index layer\r\n\r\n*Info:*\r\n\r\nAllow assigning a z-index to tiles.\r\n\r\nLimited to 1 layer.\r\n\r\n*Layer properties:*\r\nNone\r\n\r\n*Tile properties for this layer:*\r\n- An integer value\r\n\r\n#### Terrain layers (several types of layers: 2-edges, 2-corners, 3x3, or even special patterns for half-offset and hexagons)\r\n\r\n![2020-11-04-104341_1082x631_scrot](https://user-images.githubusercontent.com/6093119/98095311-af484000-1e8a-11eb-8d25-6bcc32a7c02a.png)\r\n\r\n*Info:*\r\n\r\nThis layer allows to create autotiles. A set of terrain types (water, sand and grass for example) are needed, then applied to part of tiles.\r\nThis would work like what Tiled does, and is very similar to bitmaps we have now.\r\n\r\nAll tiles marked of a given terrain then might be picked by the corresponding painted terrain in the tilemap painting mode.\r\n\r\nWhile the previous system handled autotiles separately, now all tiles can take part in autotiling. Also, the terrain thing allows mixing different autotiles.\r\n\r\nLimited to 1 layer per type of autotiling (usually you don't have to mix them but it might happen).\r\n\r\n*Layer properties:*\r\nA set of terrain types, needing each:\r\n- A name\r\n- An icon (this likely shoud be picked automatically by selecting the tile with the highest amount of corresponding terrains)\r\n- A color -> this is needed to identify the terrain on the tileset\r\n\r\n*Tile properties for this layer:*\r\n- A pattern identifying which part of the tile are of which terrain.\r\n\r\n#### Metadata layers\r\n\r\n![2020-11-04-104354_1078x635_scrot](https://user-images.githubusercontent.com/6093119/98095333-b7a07b00-1e8a-11eb-847d-af851ff87edf.png)\r\n\r\n*Info:*\r\n\r\nAllow assigning custom metadata to tiles.\r\n\r\nUnlimited amount of layers.\r\n\r\n*Layer properties:*\r\n- Type of the metadata\r\n\r\n*Tile properties for this layer:*\r\n- Value of the metadata\r\n\r\n### The scene tabs\r\n\r\nIn the tileset editor, you can also define a set of scenes to be used as tiles. For consistency, those scenes act as normal tiles, so both a scene and a normal tile can't be present on the same place at the same time. You need two tilemaps for stacking a scene on a normal tile. There, you can also provide an offset to position your scene correctly.\r\n\r\n![2020-11-04-104818_1079x629_scrot](https://user-images.githubusercontent.com/6093119/98095738-3b5a6780-1e8b-11eb-92ad-6d359bfb16b9.png)\r\n\r\nEven if the mockup does not display it, I hope to be able to have a preview for each scene.\r\n\r\n### Editing tile's properties\r\n\r\nAs you can see from the pictures above, each layer has its own dedicated way of editing the tiles properties.\r\nThe common approach is to have a value selection on a left panel (with the possibility to save favorite values), then paint this value on the tileset.\r\nOnly the terrain editor will likely add the possibility to paint directly with autotiles sub-tiles, it would be annoying to have to choose a shape for the whole tile everytime.\r\n\r\n\r\n---\r\nPersonal notes on eventual use cases to support:\r\n- godotengine/godot#31003\r\n- #310",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1769/reactions",
      "total_count": 130,
      "+1": 56,
      "-1": 0,
      "laugh": 8,
      "hooray": 14,
      "confused": 0,
      "heart": 33,
      "rocket": 11,
      "eyes": 8
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1767",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1767/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1767/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1767/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1767",
    "id": 735384488,
    "node_id": "MDU6SXNzdWU3MzUzODQ0ODg=",
    "number": 1767,
    "title": "Implement Bones as Nodes that are Children of Skeleton in the Scene Hierarchy (in 3D [and maybe 2D?])",
    "user": {
      "login": "jejay",
      "id": 4773902,
      "node_id": "MDQ6VXNlcjQ3NzM5MDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4773902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jejay",
      "html_url": "https://github.com/jejay",
      "followers_url": "https://api.github.com/users/jejay/followers",
      "following_url": "https://api.github.com/users/jejay/following{/other_user}",
      "gists_url": "https://api.github.com/users/jejay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jejay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jejay/subscriptions",
      "organizations_url": "https://api.github.com/users/jejay/orgs",
      "repos_url": "https://api.github.com/users/jejay/repos",
      "events_url": "https://api.github.com/users/jejay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jejay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-03T14:49:54Z",
    "updated_at": "2020-11-09T22:35:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n3D human animation and vision research\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNo easy way to manipulate/edit/handle bones. There is something I call a \"path to a solution\" on the way: https://github.com/godotengine/godot/pull/36409 but this still does not add gizmos (see https://github.com/godotengine/godot-proposals/issues/584)\r\n\r\nWouldn't skeleton-bone-nodes save (have saved) a lot of re-implementing (gizmos/handles/scene tree in the inspector)?\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nOnce you have bones nodes, you get free handles, gizmos, etc and a nice tree view in the scene hierarchy.\r\n\r\nEven if https://github.com/godotengine/godot/pull/36409 was finished and fully functional I still think bones in the scene hierarchy are less cumbersome and fit Godot better. There is no need to hide bones away in an inspector because in Godot you use scenes for abstraction. Put your character with the skeleton in its own scene, if you never want to see the skeleton again. Also, no one who uses skeletal animations will be afraid of seeing bones, there is no need for hiding them from beginners.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake skeleton bones nodes and thus part of the scene hierarchy.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo.\r\n\r\n(Edit: yeah sorry, I have no clue how it works in 2D)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1767/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1765",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1765/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1765/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1765/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1765",
    "id": 735009089,
    "node_id": "MDU6SXNzdWU3MzUwMDkwODk=",
    "number": 1765,
    "title": "Add a `files_dragged` signal to SceneTree",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-03T04:34:06Z",
    "updated_at": "2020-11-14T02:32:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nEditor plugins (gdscript)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBefore dropping files from OS to game window, in many cases I would like to know that _files are dragged to the game window_ (that is they may not be dropped, just dragged).\r\nThat is what many modern apps like Discord or browsers like Chrome have.\r\nThis provides better UX when drag&drop files from OS, \r\notherwise I can't even change the cursor to the corresponding icon then dragging files\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n`files_dragged` signal would solve the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```gdscript\r\nSceneTree  files_dragged(screen:int)\r\n```\r\nIn many cases it would be enough just to have a signal that some files have been dragged into the game window.\r\nBut in some cases it would also be great to know **which** files were dropped.\r\nSo `files_dragged` signal could have an argument with a PoolStringArray of files, as well as `files_dropped` has \r\n```gdscript\r\nSceneTree  files_dragged(files: PoolStringArray, screen: int))\r\n```\r\n\r\nAlthough the proposed name for this signal might cause confusion, so maybe a more accurate / common name for the signal could be chosen.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt seems it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n`SceneTree` feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1765/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1764",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1764/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1764/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1764/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1764",
    "id": 734948379,
    "node_id": "MDU6SXNzdWU3MzQ5NDgzNzk=",
    "number": 1764,
    "title": "Allow compiling godot scripts and scenes to C# library",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-03T01:22:20Z",
    "updated_at": "2020-11-23T21:34:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA C# Game Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to make a set of tools using C#  and compile it to a library\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow us to build C# libraries with C# scripts and scenes\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess we would be able to compile our project to a library through visual studio by referencing a godot nuget package\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know for other people but I would use it to make a my own dedicated game engine\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts wouldn't be in core since it would be a nuget package\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1763",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1763/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1763/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1763/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1763",
    "id": 734897388,
    "node_id": "MDU6SXNzdWU3MzQ4OTczODg=",
    "number": 1763,
    "title": "Add a way to temporarily disable error printing in the engine",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-02T23:06:12Z",
    "updated_at": "2020-11-03T16:06:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI happen to write unit test in GDScript using GUT, and this works well for most cases. I also want to test for failure paths from within GDScript itself for best coverage (like testing bad index to prevent crashes). The problem is that these kind of erroneous operations produce error prints in the debugger and console:\r\n\r\n```gdscript\r\nfunc test_choice_empty():\r\n\t# Should not crash.\r\n\tassert_null(Random.choice(\"\"))\r\n\tassert_null(Random.choice([]))\r\n\r\n```\r\n\r\n![goost_err_catch_ok](https://user-images.githubusercontent.com/17108460/97927839-75821700-1d6e-11eb-9710-b8e5d78ab210.png)\r\n\r\nThe above problem can be seen in goostengine/goost#31.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding a method which allows to dynamically enable and disable error printing. Having ability to temporarily disable those errors allows to filter out the noise coming from \"expected failures\" seen in tests.\r\n\r\nI've even written unit testing documentation describing this technique in [Testing failure paths](https://docs.godotengine.org/en/latest/development/cpp/unit_testing.html#testing-failure-paths) section when writing unit tests in C++. The same thing should be possible to do from within Godot to work both in the console and the editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe approach would be similar to existing `ERR_PRINT_ON` and `ERR_PRINT_OFF` test macros in `tests/test_macros.h`. The method can be added to `OS` singleton, such as `OS::set_error_print_enabled()`. The missing part is that it should also apply to Godot's debugger in the editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nImpossible to prevent error prints in the debugger *selectively*. It's possible to disable error printing via `application/run/disable_stderr` project setting, but that only prevents terminal output, and the idea here is that it should be possible to do this at run-time as well.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan only be done on the engine level.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1763/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1762",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1762/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1762/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1762/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1762",
    "id": 734885614,
    "node_id": "MDU6SXNzdWU3MzQ4ODU2MTQ=",
    "number": 1762,
    "title": "Add a method to return a list of `Color` constants",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-02T22:42:21Z",
    "updated_at": "2020-11-09T13:36:14Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to randomize colors for debugging purposes. The problem is that randomizing colors with `randf()` is problematic in some cases, as it yields either too dark or too light colors (HSV can be used, but it still could return too similar colors):\r\n\r\n![goost_too_similar_colors](https://user-images.githubusercontent.com/17108460/97929743-7ae16080-1d72-11eb-8319-6694795d0108.png)\r\n\r\nThe idea here is that the color constants should be distinguishable enough to ease the debugging process involving the visual aspect.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd `Color.get_constants()` to retrieve a list of all color constants. Having such a method allows to create various utility randomization/debugging scripts such as:\r\n\r\n```gdscript\r\nstatic func rand_color():\r\n    var color = Color()\r\n    var constants: Dictionary = color.get_constants()\r\n    var rand_name = constants.keys()[randi() % constants.size()]\r\n    var rand_color = constants[rand_name]\r\n    return rand_color\r\n```\r\n\r\nThis way, we can have a better distribution of human-perceivable colors which are easier to identify.\r\n\r\nThe proposed solution is similar to https://stackoverflow.com/a/55334738/2564620.\r\n\r\nIf we add this, `ColorN()` method available at global scope can be removed as well: #1590.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI propose adding `Color.get_constants()`, preferably as a static method of `Color()` (yet static methods is currently not a feature in the engine).\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou have to manually rewrite all color constants back into a script. I want to avoid doing exactly that, because there are *a lot* of them.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a matter of exposing what's already there in the engine, else you have to dig into the engine source and expose a list of constants yourself, not trivial.\r\n\r\nI can implement this proposal myself.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1762/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1761",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1761/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1761/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1761/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1761",
    "id": 734694219,
    "node_id": "MDU6SXNzdWU3MzQ2OTQyMTk=",
    "number": 1761,
    "title": "Expose editor nodes and types in the Create Dialog to better design editor plugins",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-02T17:34:47Z",
    "updated_at": "2020-11-02T20:00:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot editor plugins.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I want to design custom editors for the inspector or for custom docks it is very annoying and time consuming to reimplement the functionality that Godot already provides in the inspector or in other parts of the editor.\r\nThis is one of the points I listed here: https://github.com/godotengine/godot-proposals/issues/300\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExpose the editor nodes and types, like the subclasses of EditorProperty, various dialogs/containers (to select a property from a node or resource, to select a method, to create a Node/Resource, etc) in the Create Dialog window when needed.\r\nThere can be a switch to enable editor nodes or something like that.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen the editor nodes are active in the Create Dialog, they could easily be created inside a scene to quickly design custom editors and UIs that behave the way the default Godot ones do.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEditors can be created in scripts, but it is a very long and unintuitive process.\r\nNodes are better organized and configured inside the scene editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt enables more tools to better design future add-ons.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1761/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1760",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1760/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1760/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1760/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1760",
    "id": 734370800,
    "node_id": "MDU6SXNzdWU3MzQzNzA4MDA=",
    "number": 1760,
    "title": "Unit/integration testing: Testing graphical and UI code.",
    "user": {
      "login": "bruvzg",
      "id": 7645683,
      "node_id": "MDQ6VXNlcjc2NDU2ODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7645683?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bruvzg",
      "html_url": "https://github.com/bruvzg",
      "followers_url": "https://api.github.com/users/bruvzg/followers",
      "following_url": "https://api.github.com/users/bruvzg/following{/other_user}",
      "gists_url": "https://api.github.com/users/bruvzg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bruvzg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bruvzg/subscriptions",
      "organizations_url": "https://api.github.com/users/bruvzg/orgs",
      "repos_url": "https://api.github.com/users/bruvzg/repos",
      "events_url": "https://api.github.com/users/bruvzg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bruvzg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-02T10:08:03Z",
    "updated_at": "2021-01-07T20:03:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUnit testing was introduced in godotengine/godot#40148, but currently there's no possibility to automatically test any GUI and rendering related code.\r\n\r\nRelated proposal: #1307 (testing contexts), #1533 (old tests had at least some rendering and UI tests)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplement off-screen `DisplayServer` for use on headless CI, and make it compatible with software Vulkan (SwiftShader) / OpenGL (OSMesa) implementations to run on CI without GPU, and add testing framework context with active rendering pipeline (initialized display and rendering servers, and normal project main loop).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. Testing framework render small, simple scenes for the isolated graphical features (materials, shaders, lighting/shadows e.t.c.) or reaction of the GUI elements to the simulated input event, with a fixed time steps for deterministic behavior.\r\n2. It takes screenshots at the predefined moments of time (for testing multiple rendering steps successively and testing particles/animations), and store them (probably downscaled, to avoid too big files and smooth out).\r\n3. Screenshots are compared (by the engine or external script) to the reference images, and marked for manual inspection if they substantial differences (by adding a thick, red border to the image for example).\r\n4. Screenshots are uploaded as the build artifact (as archive with the one image per test suite).\r\n\r\n![gr_test](https://user-images.githubusercontent.com/7645683/97850155-4cc13980-1cfc-11eb-8cc3-73291a3780f6.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be used as part CI to detect rendering, physics and GUI regressions, and can be used to quickly test specific hardware or driver versions for rendering issues (the same context should be usable with normal `DisplayServer`s as well).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt should be possible to achieve this with module or GDScript project, but probably better to have testing related stuff in the core for cleaner CI configs and to avoid duplicate code in multiple test projects.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1760/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1759",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1759/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1759/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1759/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1759",
    "id": 734220489,
    "node_id": "MDU6SXNzdWU3MzQyMjA0ODk=",
    "number": 1759,
    "title": "Ability to connect signals in the editor with drag-and-drop and name search",
    "user": {
      "login": "chepulis",
      "id": 11724303,
      "node_id": "MDQ6VXNlcjExNzI0MzAz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11724303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chepulis",
      "html_url": "https://github.com/chepulis",
      "followers_url": "https://api.github.com/users/chepulis/followers",
      "following_url": "https://api.github.com/users/chepulis/following{/other_user}",
      "gists_url": "https://api.github.com/users/chepulis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chepulis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chepulis/subscriptions",
      "organizations_url": "https://api.github.com/users/chepulis/orgs",
      "repos_url": "https://api.github.com/users/chepulis/repos",
      "events_url": "https://api.github.com/users/chepulis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chepulis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-02T06:21:26Z",
    "updated_at": "2020-11-02T15:36:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with many plates/buttons connecting to many gates and things of various kinds. Think of companion cube dropping onto plates in Portal, but way more convoluted and with less production value.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSignal rigging is very slow because it's hard to find the right node to connect the signal to.\r\n\r\nThe dialog doesn't have name search. Even if it did, names of entities are usually very generic (_Plate26_) and out of order (if duplicated out of order), a process of finding them before rigging the signal is an unnecessary step. There's already a name search in the scene tree; this proposal would allow to use that existing interface instead of duplicating functionality.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. Drag-n-drop signals from the Signals tab into nodes in the Scene Tree tab.\r\n2. Drag-n-drop signals from the Signals tab into the instanced entities in the editor window (does it have a proper name? Canvas? idk). This will allow for rigging without interacting with the SceneTree or name search, which would yield the best UX.\r\n3. Keep the selected node selected when performing a word search (even if it got filtered out by that search) in the scene tree, allowing to drag-n-drop selected node's signal into the found target.\r\n\r\nMultiple connections:\r\n4. Selecting multiple nodes that have the same signal to rig multiple connections at once. This part is simple enough.\r\n5. Selecting multiple targets somehow. I don't know how to implement that in interface.\r\n\r\nAdditional possible visual interface improvements:\r\n6. When the signal dragging starts, it would be beneficial to highlight the connectable nodes (the ones with scripts) in the scene tree and entities in the editor window. Like, reduce opacity of the non-connectable nodes. Also, extra-highlight the ones that are about to receive the drop\r\n7. Display signal connections in the editor window when somehow prompted by drawing color lines (coded for signal name/scene type) between entities. This is more of a dream than a proposal. Maybe a plugin?\r\n\r\nAfter the dragging is dropped just open the good ol' reguar signal connection dialog with the right node selected.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI made [a video where i demonstrate the problem and pointlessly wave the mouse imitating the drag-n-drop solution](https://www.youtube.com/watch?v=I0zhLJ9qPGk).\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUX improvement for signal rigging. Signal rigging happens a lot.\r\n\r\nLet's ballpark for a decently-sized game with many of these connections (my case): 120 levels × 100 uses (not all are permanent, level design is iterative) = 12 000 uses. If the current workflow involves a minute of scrolling to find the right node with the right name in the dialogue window and this proposal cuts it down to a relatively negligible time, that's 12 000 minutes, or 200 hours of annoying gruntwork gone. Per that decently-sized game. Seems **often** enough for this type of game. Will improve UX for all other types of games, just not as dramatically, but still, in a meaningful way.\r\n\r\nThis could be worked around by creating your own editor inside the game. That's not a solution, that's a symptom of a lacking Godot editor functionality and another way to spend the 200 hours, (provided one has the skills to take that advanced path).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUX improvement for existing core functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1759/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1758",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1758/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1758/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1758/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1758",
    "id": 734104714,
    "node_id": "MDU6SXNzdWU3MzQxMDQ3MTQ=",
    "number": 1758,
    "title": "Allow passing multiple scripts when running in standalone mode with the `--check-only` option",
    "user": {
      "login": "Speedphoenix",
      "id": 22801009,
      "node_id": "MDQ6VXNlcjIyODAxMDA5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22801009?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Speedphoenix",
      "html_url": "https://github.com/Speedphoenix",
      "followers_url": "https://api.github.com/users/Speedphoenix/followers",
      "following_url": "https://api.github.com/users/Speedphoenix/following{/other_user}",
      "gists_url": "https://api.github.com/users/Speedphoenix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Speedphoenix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Speedphoenix/subscriptions",
      "organizations_url": "https://api.github.com/users/Speedphoenix/orgs",
      "repos_url": "https://api.github.com/users/Speedphoenix/repos",
      "events_url": "https://api.github.com/users/Speedphoenix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Speedphoenix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-02T00:43:53Z",
    "updated_at": "2020-11-02T13:53:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA project with a large amount of scripts, and that requires the use of CI \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to check the validity of every script before committing, and on every pull request. If Godot returns a parse error on a script I need to abord the commit or pull request.  \r\nThankfully, Godot comes with some sweet standalone tools, so I use\r\n```\r\ngodot --script my_script.gd --check-only\r\n```\r\nAnd godot will give a parse error if `my_script.gd` is invalid.  \r\nHowever only one script can be passed at once, which means that godot needs to be started again for every .gd file I want to check, which adds complexity to my CI pipeline, and slows the whole process\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe `-s` or `--script` parameter should accept a list of files if `--check-only` is used at the same time, and an option should be added to ignore script preloads\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWe could for example check all `.gd` files in the scripts folder at once:\r\n```\r\n$ godot --check-only -s scripts/*.gd\r\n```\r\nAnd if one of the files has an error\r\n```\r\n$ godot --check-only -s scripts/*.gd\r\nSCRIPT ERROR: GDScript::reload: Parse Error: ':' expected at end of line.\r\n   At: res://scripts/my_script.gd:4.\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around either:\r\n- With a shell script that loops every `.gd` script and calls `godot check-only -s` every time\r\n- By having a separate `.gd` script that is not used by the game, but preloads every other script. You can then use `godot --check-only -s` on that script. If an error is found in one of those preloaded scripts, a parse error is thrown.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would be part of the standalone command line tools",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1756",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1756/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1756/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1756/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1756",
    "id": 733984921,
    "node_id": "MDU6SXNzdWU3MzM5ODQ5MjE=",
    "number": 1756,
    "title": "Add `merge_with()` and `intersect_with()` methods to the Array and Dictionary classes",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-11-01T14:53:36Z",
    "updated_at": "2020-11-04T21:37:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now, no. But I may need it in the future or someone else needs it now.\r\nSee also: godotengine/godot#11073, #1718\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe can add `merge_with()` and `intersect_with()` methods (maybe we need other names) for `Array` and `Dictionary` classes. We can also add operators `|` and `&` (as shorthand) for these data types.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\nvar arr1 = [1, 2]\r\nvar arr2 = [2, 3]\r\n\r\n# print(arr1 + arr2)\r\nprint(arr1.append_array(arr2)) # [1, 2, 2, 3]\r\n\r\n# print(arr2 + arr1)\r\nprint(arr2.append_array(arr1)) # [2, 3, 1, 2]\r\n\r\n# print(arr1 | arr2)\r\nprint(arr1.merge_with(arr2)) # [1, 2, 3]\r\n\r\n# print(arr2 | arr1)\r\nprint(arr2.merge_with(arr1)) # [2, 3, 1]\r\n\r\n# print(arr1 & arr2)\r\nprint(arr1.intersect_with(arr2)) # [2]\r\n\r\nvar dict1 = {a = 1, b = 2}\r\nvar dict2 = {b = 3, c = 4}\r\nvar dict3 = {b = 2, d = 5}\r\n\r\n# print(dict1 | dict2)\r\nprint(dict1.merge_with(dict2)) # {a: 1, b: 2, c: 4}\r\n\r\n# print(dict2 | dict1)\r\nprint(dict2.merge_with(dict1)) # {b: 3, c: 4, a: 1}\r\n\r\n# print(dict1 & dict2)\r\nprint(dict1.intersect_with(dict2)) # {}\r\n\r\n# print(dict1 & dict3)\r\nprint(dict1.intersect_with(dict3)) # {b: 2}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMaybe. But I think anyone who needs these functions will be happy if these functions are already implemented out of the box.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is basic functionality that is also available in some programming languages.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1756/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1755",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1755/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1755/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1755/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1755",
    "id": 733967073,
    "node_id": "MDU6SXNzdWU3MzM5NjcwNzM=",
    "number": 1755,
    "title": "Add block volumetric fog",
    "user": {
      "login": "UnknownS1024",
      "id": 17591539,
      "node_id": "MDQ6VXNlcjE3NTkxNTM5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17591539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UnknownS1024",
      "html_url": "https://github.com/UnknownS1024",
      "followers_url": "https://api.github.com/users/UnknownS1024/followers",
      "following_url": "https://api.github.com/users/UnknownS1024/following{/other_user}",
      "gists_url": "https://api.github.com/users/UnknownS1024/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UnknownS1024/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UnknownS1024/subscriptions",
      "organizations_url": "https://api.github.com/users/UnknownS1024/orgs",
      "repos_url": "https://api.github.com/users/UnknownS1024/repos",
      "events_url": "https://api.github.com/users/UnknownS1024/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UnknownS1024/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2020-11-01T13:32:04Z",
    "updated_at": "2020-11-04T18:18:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot 4 experiment for demo\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ni only do grid modeling the result looks sad and not good volumetric fog\r\n\r\nvideo -> https://youtu.be/UctZ4BThrqQ\r\n\r\n![image](https://user-images.githubusercontent.com/17591539/97802968-061a0380-1c58-11eb-8756-d7300681172a.png)\r\nthe problem of grid modeling is still visible it is impossible to block the fog and it is not convenient through Add Node -> MeshInstance3D -> PlaneMesh\r\n\r\n![image](https://user-images.githubusercontent.com/17591539/97803187-7f662600-1c59-11eb-89fd-42093c2f758c.png)\r\n\r\ndown without MeshInstance 3D looks awful still visible\r\n![image](https://user-images.githubusercontent.com/17591539/97803201-9442b980-1c59-11eb-9bf8-d6c3f9e0aa5d.png)\r\n\r\nonly need to block volumetric fog without shadow , UE4 is already there too\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\ni thought that @reduz  seems to have forgotten not added block volumetric fog :)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1754",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1754/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1754/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1754/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1754",
    "id": 733821017,
    "node_id": "MDU6SXNzdWU3MzM4MjEwMTc=",
    "number": 1754,
    "title": "Create a new Node called AnimatedTextureRect",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-31T22:46:27Z",
    "updated_at": "2020-11-01T13:24:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWorking on a top-down shooter 2D\r\n \r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI Want to animate the HUD icons, but the current way is very inconvenient:\r\n\r\nI Could use AnimatedTexture, but it doesnt support AtlasTexture, so I would have to cut my spritesheet into many pieces and reimport them, and configure AnimatedTexture.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCreating a AnimatedTextureRect node that supports:\r\n* AtlasTexture\r\n* Works Like Sprite Node\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nWhen dealing with animated stuff 2D Nodes are awesome has a excellent workflow, but the same is not true for Control-derived nodes, things are more tricky. For example, in my case I would like to animate hud this includes these two nodes:\r\n\r\n* TextureRect\r\n* TextureProgress\r\n\r\nIf I was working with 2D I just have to configure spriteframes and voilla:\r\n![image](https://user-images.githubusercontent.com/58845030/97791422-f4315580-1bb0-11eb-951c-75288fd72817.png)\r\n\r\nOr even easier, Sprite3D Nodes has an awesome feature :\r\n![image](https://user-images.githubusercontent.com/58845030/97791432-08755280-1bb1-11eb-8404-3e1e41286028.png)\r\n\r\n so I think this should be considered for those Control-Derived nodes\r\n\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWell, Before Making this topic, I tried to animate a TextureProgress by defining a const array with the region rects and them changing this array's index to each frame, the region changes, but the sprite doesnt update.\r\n\r\nSo as Far as I know this must be modified on Core.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis can improve the user's workflow",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1753",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1753/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1753/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1753/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1753",
    "id": 733735207,
    "node_id": "MDU6SXNzdWU3MzM3MzUyMDc=",
    "number": 1753,
    "title": "Support for custom clipping planes in 3D",
    "user": {
      "login": "bluenote10",
      "id": 3620703,
      "node_id": "MDQ6VXNlcjM2MjA3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3620703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluenote10",
      "html_url": "https://github.com/bluenote10",
      "followers_url": "https://api.github.com/users/bluenote10/followers",
      "following_url": "https://api.github.com/users/bluenote10/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluenote10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluenote10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluenote10/subscriptions",
      "organizations_url": "https://api.github.com/users/bluenote10/orgs",
      "repos_url": "https://api.github.com/users/bluenote10/repos",
      "events_url": "https://api.github.com/users/bluenote10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluenote10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-31T14:43:28Z",
    "updated_at": "2020-11-18T14:34:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nVarious experiments.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nA common problem I run into is to clip some geometry/mesh against some custom clipping boundaries. Currently I see two possible solutions:\r\n- Use dynamic geometry to, i.e., update the meshes dynamically to achieve the clipping. Con: Updating meshes dynamically is costly.\r\n- Achieve clipping by using `discard` in fragment shader. Con: This requires to use a custom shader for everything that should be affected by the clipping (as suggested in https://github.com/godotengine/godot/issues/3499#issuecomment-602129675).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI am not an expert, and don't know how state of the art solutions to the problem would look like. I'm mainly opening this issue to follow up on the previous discussions on the topic over at https://github.com/godotengine/godot/issues/3499. Perhaps Vulkan opens new possibilities here?\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNo plan yet.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nBy doing it manually as described above.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nNot really, it would be mainly a matter of convenience.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1753/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1750",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1750/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1750/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1750/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1750",
    "id": 732776572,
    "node_id": "MDU6SXNzdWU3MzI3NzY1NzI=",
    "number": 1750,
    "title": "Make to_global function usable with transform datatype in Visual Script.",
    "user": {
      "login": "kreaninw",
      "id": 1403194,
      "node_id": "MDQ6VXNlcjE0MDMxOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1403194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kreaninw",
      "html_url": "https://github.com/kreaninw",
      "followers_url": "https://api.github.com/users/kreaninw/followers",
      "following_url": "https://api.github.com/users/kreaninw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kreaninw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kreaninw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kreaninw/subscriptions",
      "organizations_url": "https://api.github.com/users/kreaninw/orgs",
      "repos_url": "https://api.github.com/users/kreaninw/repos",
      "events_url": "https://api.github.com/users/kreaninw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kreaninw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-30T00:23:22Z",
    "updated_at": "2020-10-30T09:46:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 3D endless runner game. The player character in the game needs to lock onto an enemy in order to perform an attack.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLocking onto the freely moving enemy in 3D will usually require the transform functionality. However, even though Godot's Visual Script provides the transform function, it is incomplete as there is no way to get or set the **global value** of the transform function. ([read about it here](https://docs.godotengine.org/en/stable/tutorials/3d/using_transforms.html#introducing-transforms) and [here is the equivalence GDScript function](https://docs.godotengine.org/en/stable/classes/class_spatial.html?highlight=global_transform#class-spatial-property-global-transform)).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy adding the ability to set, get, or convert the local transform value to the global transform value into Visual Script, I can access the global value of the transformed scene. Currently, it is impossible to access the global transform value with Visual Script.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAn ability to convert the local value of the scene is already presented in the **to_global** node which can be used to convert the local Vector3 value to its global value. It would be nice for this node to be able to convert the local transform value to its global value as well.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement function (convert / access the global value) will be used very often. But it is currently impossible in Visual Script. The possible workaround I can think of is to use the _get_parent_ function over and over again until I can get to the scene in the global space to get the global value. However, the code will be very prone to break and I am not sure about the performance impact. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe ability to access a scene's value is (and should be) the core of the engine.\r\n\r\n![to_global function](https://user-images.githubusercontent.com/1403194/97645882-e0f57d00-1a2c-11eb-851c-e27e701122b6.jpg)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1750/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1749",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1749/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1749/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1749/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1749",
    "id": 732768072,
    "node_id": "MDU6SXNzdWU3MzI3NjgwNzI=",
    "number": 1749,
    "title": "Add Cesium streaming 3D Tiles geospatial world mapping technology",
    "user": {
      "login": "goatchurchprime",
      "id": 677254,
      "node_id": "MDQ6VXNlcjY3NzI1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/677254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/goatchurchprime",
      "html_url": "https://github.com/goatchurchprime",
      "followers_url": "https://api.github.com/users/goatchurchprime/followers",
      "following_url": "https://api.github.com/users/goatchurchprime/following{/other_user}",
      "gists_url": "https://api.github.com/users/goatchurchprime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/goatchurchprime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/goatchurchprime/subscriptions",
      "organizations_url": "https://api.github.com/users/goatchurchprime/orgs",
      "repos_url": "https://api.github.com/users/goatchurchprime/repos",
      "events_url": "https://api.github.com/users/goatchurchprime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/goatchurchprime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-30T00:14:26Z",
    "updated_at": "2020-12-01T05:01:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA simple flight simulator for training hang-glider and paraglider pilots to get to know the terrain in VR before they fly it for real.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no way to embed geographical terrain into a game.  It was once almost possible to hack something into google-earth, but now quite.  It's better to bring the images into the games engine, rather than rebuild a games engine into the map viewing system.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTerrain should be available as it is for the best of games engines.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAn open source cesium plugin for Unreal Engine has been announced as under development here.  \r\nhttps://cesium.com/blog/2020/06/04/cesium-for-unreal-engine/\r\nPerhaps the work on that could be reused.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf the glider is far away from the ground it may be possible to make a spherical texture video in a separate executable that takes GPS coordinates and returns a sky/ground rendering that can be plotted in the game at a slow enough frame rate because it is not changing very fast.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUnknown.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1749/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1748",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1748/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1748/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1748/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1748",
    "id": 732493627,
    "node_id": "MDU6SXNzdWU3MzI0OTM2Mjc=",
    "number": 1748,
    "title": "File name mistype detection",
    "user": {
      "login": "Echua36",
      "id": 45130922,
      "node_id": "MDQ6VXNlcjQ1MTMwOTIy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/45130922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Echua36",
      "html_url": "https://github.com/Echua36",
      "followers_url": "https://api.github.com/users/Echua36/followers",
      "following_url": "https://api.github.com/users/Echua36/following{/other_user}",
      "gists_url": "https://api.github.com/users/Echua36/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Echua36/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Echua36/subscriptions",
      "organizations_url": "https://api.github.com/users/Echua36/orgs",
      "repos_url": "https://api.github.com/users/Echua36/repos",
      "events_url": "https://api.github.com/users/Echua36/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Echua36/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-29T17:01:44Z",
    "updated_at": "2020-10-30T16:54:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ni'm working on a game, horror like, build for intel/low end computer\r\n**Describe the problem or limitation you are having in your project:**\r\nthere's no limitation to my project, but there's typing error problem\r\nthis is the bug report:https://github.com/godotengine/godot/issues/43172, as you can see i got my files named wrongly, and i can't founds out what's wrong without someone pointing out \"You've got the names for your scenes wrong.\"\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nthis is good because, easier to debug the wrong name, and less \"why my code won't work?\"\r\nand there's already \"if node existed\". and why not add \"if file existed\" too\r\n![Godot_v3 2 3-stable_win64_nHim7PJLKQ](https://user-images.githubusercontent.com/45130922/97606392-b2869a80-1a4a-11eb-82e2-26cb76f46ef4.png)\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\ni don't understand the question\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit can work around by delete the 'wrong name' and drag the correct resouce in the Gdscript it, but i found tedious doing it\r\nand, i don't even know the file's name are wrong in first place\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nthe reason is improve the Gdscript's type error detection for everyone including me",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1747",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1747/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1747/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1747/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1747",
    "id": 732399362,
    "node_id": "MDU6SXNzdWU3MzIzOTkzNjI=",
    "number": 1747,
    "title": "Check for Shader Precision Support",
    "user": {
      "login": "ATryder",
      "id": 10942031,
      "node_id": "MDQ6VXNlcjEwOTQyMDMx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10942031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ATryder",
      "html_url": "https://github.com/ATryder",
      "followers_url": "https://api.github.com/users/ATryder/followers",
      "following_url": "https://api.github.com/users/ATryder/following{/other_user}",
      "gists_url": "https://api.github.com/users/ATryder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ATryder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ATryder/subscriptions",
      "organizations_url": "https://api.github.com/users/ATryder/orgs",
      "repos_url": "https://api.github.com/users/ATryder/repos",
      "events_url": "https://api.github.com/users/ATryder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ATryder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-29T15:08:58Z",
    "updated_at": "2020-10-29T16:08:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCross-platform sci-fi turn based strategy\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have an options menu that will allow a player to select from low, medium, high and extra-high shader quality for some of the effects in my game for performance reasons. On mobile platforms the three highest quality  shader options require high precision floating point operations. When running on devices that don't support high precision floats these shaders can look pretty terrible.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd like to be able to check if the device supports GLSL high precision floats from GDScript when the option menu is displayed. If not supported I would hide the material quality option and just load the lowest quality shaders.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nif !gl_precision(PRECISION_FLOAT_HIGH):\r\n    #hide options here\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDoesn't seem like the type of thing one would write an add-on for.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1746",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1746/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1746/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1746/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1746",
    "id": 732395480,
    "node_id": "MDU6SXNzdWU3MzIzOTU0ODA=",
    "number": 1746,
    "title": "Add `get_action_name()` method in UndoRedo",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-29T15:04:29Z",
    "updated_at": "2020-11-25T13:41:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm trying to create undo history plugin that shows undo history list and allows to go to some undo point (this feature is in many apps for example in Blender).\r\n\r\n![get_action_name](https://user-images.githubusercontent.com/16458555/97589143-024f6c80-1a1f-11eb-986f-e8ca0c6a55e5.JPG)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem is I can't get names of all undo points (actions/versions).\r\nThere is only `get_current_action_name()` but this is not enough for the task.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nadding `UndoRedo` `get_action_name()` by version index would solve the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`String` `get_action_name(version:int)`\r\nGets the name of action by version number.\r\n\r\nalso when implementing this method it would be logical and convenient to have [the count of all versions](https://github.com/godotengine/godot-proposals/issues/1745)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think this is possible\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n`EditorPlugin` feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1746/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1745",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1745/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1745/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1745/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1745",
    "id": 732154077,
    "node_id": "MDU6SXNzdWU3MzIxNTQwNzc=",
    "number": 1745,
    "title": "Add `get_version_count()` method in UndoRedo",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-29T09:35:53Z",
    "updated_at": "2020-11-25T13:41:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm creating a plugin, where I need to know current `UndoRedo` version count\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt seems thee's no way to get version count.\r\nThe lack of this feature limits creating plugins which use `UndoRedo`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding `UndoRedo` `get_version_count()` would solve the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`int get_version_count()`\r\n`get_version_count()` = `get_version()`+ Σ can_redo\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nnot possible\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n`EditorPlugin` feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1744",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1744/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1744/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1744/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1744",
    "id": 731986959,
    "node_id": "MDU6SXNzdWU3MzE5ODY5NTk=",
    "number": 1744,
    "title": "Allow local port control on net_socket connections",
    "user": {
      "login": "dam-coder",
      "id": 52492723,
      "node_id": "MDQ6VXNlcjUyNDkyNzIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/52492723?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dam-coder",
      "html_url": "https://github.com/dam-coder",
      "followers_url": "https://api.github.com/users/dam-coder/followers",
      "following_url": "https://api.github.com/users/dam-coder/following{/other_user}",
      "gists_url": "https://api.github.com/users/dam-coder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dam-coder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dam-coder/subscriptions",
      "organizations_url": "https://api.github.com/users/dam-coder/orgs",
      "repos_url": "https://api.github.com/users/dam-coder/repos",
      "events_url": "https://api.github.com/users/dam-coder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dam-coder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-29T04:25:31Z",
    "updated_at": "2020-10-29T13:05:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSimple game with local and online multiplayer capabilities.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need control over the local port used in the network connections so I can connect players in peer-to-peer (no server-in-the-middle) mode. To do so I need to use NAT traversal techniques that require me to be able to:\r\n- specify which local port I want to use;\r\n- know which local port is being used.\r\n\r\nAlthough `NetworkedMultiplayerENet` already allows to specify the local port to be used, you might want to get a random port to avoid choosing an unavailable one. In such case there's no way to know which one got assigned to you.\r\n\r\nOne last note: Since this is a fast-paced game, it is very sensitive to network delays which motivated me to use a peer-to-peer connection between the players.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis limitation can be overcome with two features:\r\n- allow to state which local port the connection will use;\r\n- provide a way to know which local port is currently being used by the connection.\r\n\r\nSuch will allow greater control and the ability to perform NAT traversal.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI've implemented the proposed features and created a pull request for `master` branch: [godotengine/godot#43174](https://github.com/godotengine/godot/pull/43174)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMy understanding is that this will be used often and it cannot be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis seems to be a core feature as it needs to interact with the underlying mechanisms of the net_socket.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1743",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1743/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1743/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1743/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1743",
    "id": 731513519,
    "node_id": "MDU6SXNzdWU3MzE1MTM1MTk=",
    "number": 1743,
    "title": "Lock script property option and show deleted script icon in scene tree pane",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-28T14:49:03Z",
    "updated_at": "2020-10-28T14:57:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 2d retro game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nScripts are treated like any other property and can be deleted and changed on a per instance/inherited node basis like all others.\r\n\r\nHowever, usually you never want to change this and clearing a script (e.g. via the detach script icon) by mistake can make fault finding pretty difficult, and it's very easy to click 'detach' as you don't even get a prompt.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. Add a prompt on clicking detach so it isn't done by mistake or a facility to lock the script property so that it cannot be cleared or detached, e.g. via the dropdown menu in the script property inspector, or simply as a default\r\n2. If a node has it's script cleared, instead of just removing the node make it more obvious, e.g. keep it but have it red.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs steps above\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's usually a mistake to clear a specific instances script code and helping prevent this will aid projects.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1741",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1741/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1741/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1741/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1741",
    "id": 730949385,
    "node_id": "MDU6SXNzdWU3MzA5NDkzODU=",
    "number": 1741,
    "title": "Instantiate `RandomNumberGenerator` at global scope as `Random` singleton, or the functionality behind it",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-27T23:37:09Z",
    "updated_at": "2020-10-29T15:58:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGDScript doesn't provide a full set of methods of [`RandomNumberGenerator`](https://docs.godotengine.org/en/3.2/classes/class_randomnumbergenerator.html), such as:\r\n- `randfn()`\r\n- `randi_range()`\r\n- `randv_circle()`: godotengine/godot#43103. 🙂\r\n\r\nSee also #1590, the global scope currently pollutes the global namespace unnecessarily with general names such as `seed` or `randomize`.\r\n\r\nSee also https://github.com/godotengine/godot/pull/22314#issuecomment-717872712.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that a global instance of `RandomNumberGenerator` has to be created to be available globally via script.\r\n\r\nLikely helps to properly scope random-based methods/implementations, like with #1654.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis is quite possible to do, see goostengine/goost#29 as `Random` singleton, extending `RandomNumberGenerator`:\r\n\r\n```gdscript\r\nRandom.randomize()\r\nRandom.seed = hash(\"Godot\")\r\nvar i = Random.randi() % 100\r\nvar f = Random.randf_range(-1.0, 1.0)\r\nvar v = Random.randv_circle()\r\n```\r\n\r\nWhat I propose is similar to Unity's [Random](https://docs.unity3d.com/ScriptReference/Random.html) API, which has some static methods in it.\r\n\r\nOf course, this can be made alternative to GDScript built-in randomization methods, but I'd expect that we add more useful stuff, like `Color` randomization, which is likely better added to `RandomNumberGenerator` or similar.\r\n\r\nOne of the limitations I've stumbled upon is that it may be a bit problematic to create a *local* instance of `RandomNumberGenerator`, because if you register the same class as a singleton, the `.new()` operator won't be available for such as class, because the name of the *instance* shadows the name of the *class* in GDScript. Instead, I've just added `new_instance()` to circumvent this, but technically `ClassDB.instance(\"RandomNumberGenerator\")` can also be used.\r\n\r\nRegistering the class as an `Engine` singleton in C++ under a different name seems to solve it, but then the class is not highlighted as seen in godotengine/godot#37319, and this may create further problems with C# bindings, as seen in godotengine/godot#37922.\r\n\r\nPerhaps making methods in `RandomNumberGenerator` static could help this as well, as proposed in #1101 similarly, but that likely doesn't apply because we actually need an instance of the class (`RandomPCG` is the core behind RNG in Godot).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSure, just instantiate a local instance of `RandomNumberGenerator` every time you want to generate random data with methods not available in GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about accessibility, consistency, and the ease of use of existing randomization features in Godot. I'd prefer that we implement all future randomization features under `RandomNumberGenerator` class (or just `Random` as implemented in goostengine/goost#29), preventing Godot from explosion of the core API in existing classes with randomization methods. 💥🐱 \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1741/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1740",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1740/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1740/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1740/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1740",
    "id": 730745616,
    "node_id": "MDU6SXNzdWU3MzA3NDU2MTY=",
    "number": 1740,
    "title": "Ability to mark resources as json and other types",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-10-27T19:24:24Z",
    "updated_at": "2020-10-29T14:05:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMario game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to be able to mark a resource as json so that I can implement modding support\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow us to mark resources and custom resources as json so they can be edited outside of the godot editor\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess it would be a option in the import tab.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used for modding and not without fighting the editor\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit improves modding support.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1739",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1739/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1739/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1739/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1739",
    "id": 730734382,
    "node_id": "MDU6SXNzdWU3MzA3MzQzODI=",
    "number": 1739,
    "title": "Import as raw",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-10-27T19:08:39Z",
    "updated_at": "2020-10-30T20:29:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMario game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to make a editor where people can modify the sprites of a object\r\n\r\nFiles imported in godot are converted to .res files which are not good for things like modding.\r\nThe issue with this is if someone wants to edit a sprite they need a editable image format so they can open it up and modify it in a image editor.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest a import as raw option be added to the godot importer for all types.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically if your image is a png its is imported as .png if its a obj file its imported as .obj\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used for modding and It can be worked around but it requires fighting the engine and takes more then a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit would improve modding support.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1739/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1738",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1738/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1738/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1738/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1738",
    "id": 730688234,
    "node_id": "MDU6SXNzdWU3MzA2ODgyMzQ=",
    "number": 1738,
    "title": "Add user:// folder for files to be exported on game run",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-27T18:00:59Z",
    "updated_at": "2020-10-27T22:48:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMario Bros 1 Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to export some files to user:// while allowing them to be used in the editor\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest adding a user:// folder to go along side of res:// so that we can export files we want people to be able to edit  \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAnything placed in the user:// folder will be available when running the game from the editor similar to res:// files, \r\nHowever when the game is ran from executable if the files do not exist they are created in the user:// folder.\r\n\r\nSo all you need to do is include your modding files in the user:// directory and load them like so..\r\n`my_resource = load(\"user://path to resource\")` and it works both in editor and from executable \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used for modding and it can be worked around but its not very trivial as you have to treat user and res files differently depending on whether your running from editor or from executable\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it would be easier to do this way and would be easier to understand.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1735",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1735/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1735/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1735/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1735",
    "id": 730235748,
    "node_id": "MDU6SXNzdWU3MzAyMzU3NDg=",
    "number": 1735,
    "title": "Suggestion on how to make visual script more user-friendly, fast and, robust . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-10-27T08:37:41Z",
    "updated_at": "2020-10-30T02:57:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb raider game, traversal, puzzle, so on . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use visual script for making games, atm, and I am often frustrated, that it's not possible to do ' everything ' the boxes do, in the boxes, or at least one can see important settings there . . I made a suggestion, that one could have an expandable panel or, dock on the bottom, but if that isn't enough, one could have a second one, under that . . In there, one would have all the common tools needed, for game dev, and it'd make sense to learn them first, so important stuff should be put there . . It could be settings, or a _processPRINT, _physicsprocessPRINT, _readyPRINT, and other important stuff . . This is my last suggestion, for making visual script better, the issue is often people that work in visual script, want the work done, almost entirely, in the visual script area, without having to use settings, menus, in the Inspector dock, etc . . Ideally, the whole thing would be click, drag-and-drop, enter values, and done completely, if possible ' in ' the boxes, no menus, total ' visual ' work or, so . . <3 That won't always be possible, for very advanced boxes, but having some common use-case ' icons ', under each box, one would know, if one can't make a box work, one should start there, as a good starting point, or so . .\r\n\r\n<img width=\"882\" alt=\"2020-10-27 0932\" src=\"https://user-images.githubusercontent.com/61069740/97276304-4a139f80-1837-11eb-9598-7471c47b913e.png\">\r\n\r\nAn advantage of having this, is that the MOST often used features, would be right there, so one could work almost entirely, with visual script, or so . . To save space, one would prob. use classic icons, or so, from other software, cogs, for settings, ' ? ' question mark, to go to documentation, etc etc . .\r\n\r\n![2020-10-27 0925](https://user-images.githubusercontent.com/61069740/97276437-76c7b700-1837-11eb-8ed0-24a813ee7186.jpg)\r\n\r\nI've made other suggestions before, but I think doing it this way, would 'complete' visual script, as a ' visual ' ONLY alternative, to written code, and new users would never have to worry, about where to look, when they add a new box, for what they need, etc . . . <3 :O :O . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would allow visual script coding to OPTIONALLY be done only in the script canvas, by clicking the boxes, expanding settings, etc etc . . It would help visual coders and, game makers get things done faster, and make visual script into what it is ' supposed ' to be, a full alternative, not replacement of course, for WRITTEN code, where everything is done, or 99 %, visually . . . <3 <3 . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee the above example, there's an error in the last picture, with the ' collapse toggle ', or so . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs a new user, there's no way I can alter the engine, like this, and it makes sense, to have it . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it'd sort of ' finish ' visual scripting, as an complete and, working alternative, to written code, and doing it this way, whenever one makes a new box, one won't realistically need more, for almost all cases, than what's in the boxes, no need to go to settings dock, inspector dock, so on . . Simply, a near - 100 % drag-and-drop, click and, ' work with ' boxes work-flow, or so . . .\r\n\r\nThanks <3 :O :O . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1734",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1734/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1734/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1734/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1734",
    "id": 730109883,
    "node_id": "MDU6SXNzdWU3MzAxMDk4ODM=",
    "number": 1734,
    "title": "Add 'Color' Resource",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-10-27T05:03:53Z",
    "updated_at": "2020-10-31T19:04:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMaking a game that makes a lot of use of Control nodes and a few key colors that are used throughout.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn my current project we're using certain colors extensively throughout all our UI to signal things to the player. Green is a positive stat, red is a negative stat, et cetera. I have been trying to set up my project in such a way to easily allow these important colors to be adjustable for players, to aid any player that might have issues differentiating between certain colours. However I have yet to find a way that makes it easy to create such settings.\r\n\r\nThe main issue I have been having is that colors can be used in a lot of different places (font, stylebox materials, modulation variables) and the only way to adjust all of them, would be to keep track of them in a singular place and adjust the color in all instances through a script. The other way I can think of is to make a screen-wide shader that changes selected colors into others. However that seems a bit extreme for simply wanting to adjust all instances of a single color throughout your UI, and likely a lot heavier on performance too.\r\n\r\nMaybe I have missed something, but I don't think there currently is a good way to adjust a specific color through all instances of the project where this color is used (in the same way that a PNG or material can be adjusted).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to see a new resource added: **the 'Color' resource**. This would be a file that is saved and holds the information of a single color. This resource could then be used in any location where a Color input is required, to make a reference to the saved resource. Think of font_color entries, StyleBox Materials for panels, Modulation/Self_Modulation values.\r\n\r\nThat way, if during development the color needs to be changed, it can be changed in the set-up resource, rather than in every individual scene, manually. The same way that making changes to a PNG or a Scene would update all instances in which that resource is used. These resources could then also be used for (accessibility) settings, such as to allow players to easily adjust the font colors throughout all UI scenes, or to allow players to adjust colors they might have difficulty seeing due to colorblindness. (Think of the green & red I am currently using to indicate positive & negative stats throughout my project).\r\n\r\nEssentially I want a resource akin to saving a Stylebox material, but only for a single color, so it can be used and referenced throughout the editor where Color inputs are required.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI hope I have made this clear in my examples and explanation. If required I will make a mock-up, but I think the functionality would be in line with all other resources that can currently be made and used throughout the Godot Engine. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI haven't found a way to properly adjust Color references throughout a project, and I think this will be used a lot by developers that use Control nodes in their projects, as those are the places that Color inputs are most often needed.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe use of Color inputs throughout the editor makes me feel like this should be a core part of the engine.\r\n\r\nThank you!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1734/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 1,
      "confused": 1,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1732",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1732/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1732/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1732/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1732",
    "id": 729911161,
    "node_id": "MDU6SXNzdWU3Mjk5MTExNjE=",
    "number": 1732,
    "title": "Tabs windows should shrink and show icons when the header text is clipped in anyway.",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-26T21:11:17Z",
    "updated_at": "2020-11-08T20:04:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Roguelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes I watch youtube tutorials and need to move all my tab windows to one side.\r\nHowever tabs move offscreen and their header text gets clipped making it hard to know what tab is what\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSomething like this.\r\n![image](https://user-images.githubusercontent.com/2453707/97228702-87732100-1794-11eb-8a5a-fa2934b03e06.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen a tab window is shrunk each tab on that panel takes up `panel width/number of tabs` width,\r\nWhen this happens each tab is checked to see if its header's text is clipped, if it is then it shows icons for all tabs, if it doesn't then it shows text.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used for smaller screens and no\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt improves the editor\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1731",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1731/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1731/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1731/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1731",
    "id": 729644533,
    "node_id": "MDU6SXNzdWU3Mjk2NDQ1MzM=",
    "number": 1731,
    "title": "Add methods to generate random `Vector2`/`Vector3` points with uniform distribution in a circle/sphere",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-26T15:04:27Z",
    "updated_at": "2020-11-12T22:49:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\nSee original feature request at godotengine/godot#34301.\r\nSee other related issues: godotengine/godot#7199, godotengine/godot#28264.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe issue is mainly with `rand_range()`, if you want to generate a bunch of points within a circle (not a square) with a proper *uniform distribution* rather than *normal distribution*, without even having to normalize the vectors.\r\n\r\nSnippet from https://github.com/godotengine/godot/issues/34301#issue-536876258:\r\n```gdscript\r\nfunc new_direction() -> Vector2:\r\n   var new_dir: = Vector2()\r\n   new_dir.x = rand_range(-1, 1)\r\n   new_dir.y = rand_range(-1, 1)\r\n   return new_dir.normalized()\r\n```\r\nThe same applies to `Vector3`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis can be added to `Geometry` singleton (`Geometry2D` and `Geometry3D` in Godot 4.0 now) or `RandomNumberGenerator`.\r\n\r\nFor me, this is mainly quite useful for:\r\n- randomizing motion direction;\r\n- randomizing gravity direction;\r\n- restricting objects spawn area to circle/ring;\r\n- randomizing shots and explosions for various types of weapons (to simulate lack of accuracy);\r\n- shaking the camera by feeding random `camera.offset`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFor 2D, see godotengine/godot#43103, or less complex alternative godotengine/godot#43343\r\n\r\nAlso, I've recently implemented a bunch of methods for this in goostengine/goost#28, which mostly rely on `Math::random()` functionality:\r\n```gdscript\r\nrand_point_in_circle(radius)\r\nrand_point_on_circle(radius)\r\nrand_point_in_ring(min_radius, max_radius)\r\n```\r\n~~I've actually added those to [`GoostGeometry2D`](https://goost.readthedocs.io/en/gd3/classes/class_goostgeometry2d.html) singleton which is equivalent to `Geometry` singleton.~~ In [`Random2D`](https://goost.readthedocs.io/en/gd3/classes/class_random2d.html) singleton now.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSure. Here's a minimal implementation in GDScript for `rand_point_in_circle()`:\r\n```gdscript\r\nstatic func rand_point_in_circle(p_radius = 1.0): # Unit length by default.\r\n\tvar r = sqrt(rand_range(0.0, 1.0)) * p_radius\r\n\tvar t = rand_range(0.0, 1.0) * TAU\r\n\treturn Vector2(r * cos(t), r * sin(t))\r\n```\r\n\r\nBut if you need to generate thousands of points, you'll hit performance bottleneck with GDScript.\r\n[`Geometry.is_point_in_circle()`](https://docs.godotengine.org/en/3.2/classes/class_geometry.html#class-geometry-method-is-point-in-circle) could be used to help this on the script level by filtering out points which lie outside of a circle, but the distribution won't be uniform anymore.\r\n\r\ngodotengine/godot#31667 can also be easily worked around via script, but nonetheless it's in the engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere's no reason to bloat Godot, but perhaps we could come up with some minimal core functionality which could solve most use cases. Other engines like Unity or Unreal Engine provide this out of the box, though:\r\n- [Unity: Random](https://docs.unity3d.com/ScriptReference/Random.html)\r\n- [Unreal Engine: FMath::VRand](https://docs.unrealengine.com/en-US/API/Runtime/Core/Math/FMath/VRand/index.html)\r\n- [Unreal Engine: FRandomStream::GetUnitVector](https://docs.unrealengine.com/en-US/API/Runtime/Core/Math/FRandomStream/GetUnitVector/index.html)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1731/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1730",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1730/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1730/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1730/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1730",
    "id": 729456044,
    "node_id": "MDU6SXNzdWU3Mjk0NTYwNDQ=",
    "number": 1730,
    "title": "Implement skinning with MultiMeshInstance",
    "user": {
      "login": "Arnklit",
      "id": 4955051,
      "node_id": "MDQ6VXNlcjQ5NTUwNTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4955051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arnklit",
      "html_url": "https://github.com/Arnklit",
      "followers_url": "https://api.github.com/users/Arnklit/followers",
      "following_url": "https://api.github.com/users/Arnklit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arnklit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arnklit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arnklit/subscriptions",
      "organizations_url": "https://api.github.com/users/Arnklit/orgs",
      "repos_url": "https://api.github.com/users/Arnklit/repos",
      "events_url": "https://api.github.com/users/Arnklit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arnklit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-26T10:48:43Z",
    "updated_at": "2020-10-26T12:11:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA fur add-on https://github.com/Arnklit/ShellFurGodot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTo generate the fur I'm using a shell method of generating many copies of the mesh. When the mesh is static I can use MultiMeshInstance and it works great, but when it's a skinned mesh I currently need to generate a single mesh of many copies of the original mesh and bind them all to the skeleton. This means I end up with really heavy skinning and I'm not getting the benefits of MMI where you can choose to only display some of the instances and I'm not able to use blendshapes, since that would make the generated mesh size even worse.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would make my fur tool much more efficient and able to handle blendshapes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMultiMeshInstance could simply have the same options as MeshInstance with skeleton, skin and blendshapes or it could be hidden and just available through API.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think there is any way to work around it. As far as I can tell there is no way to manually manipulate the mesh being given to the MMI in the same way as the MeshInstance deforms it with the skeleton.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure about this, maybe it would be possible to do a GDNative or module version where I make my own version of MMI that supports this, but I wouldn't know how at this point.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1730/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1729",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1729/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1729/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1729/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1729",
    "id": 729370802,
    "node_id": "MDU6SXNzdWU3MjkzNzA4MDI=",
    "number": 1729,
    "title": "Make `Node.get_node()` pause editor execution if it can't find the node",
    "user": {
      "login": "ShalokShalom",
      "id": 6344099,
      "node_id": "MDQ6VXNlcjYzNDQwOTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6344099?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShalokShalom",
      "html_url": "https://github.com/ShalokShalom",
      "followers_url": "https://api.github.com/users/ShalokShalom/followers",
      "following_url": "https://api.github.com/users/ShalokShalom/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShalokShalom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShalokShalom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShalokShalom/subscriptions",
      "organizations_url": "https://api.github.com/users/ShalokShalom/orgs",
      "repos_url": "https://api.github.com/users/ShalokShalom/repos",
      "events_url": "https://api.github.com/users/ShalokShalom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShalokShalom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-26T08:43:54Z",
    "updated_at": "2020-10-26T12:14:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nApplies to all projects, GDScript. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGet_node can get the current node on an empty NodePath\r\nLots of bugs and confusion behavior occurs because of that.\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nYield an error, instead of accepting confusing behavior \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAlready implemented: https://monnef.gitlab.io/golden-gadget\r\n\r\n![Screenshot_2020-10-26-09-26-03-66](https://user-images.githubusercontent.com/6344099/97151248-85e33200-176f-11eb-8062-17588b3231b5.jpg)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is similar to the nil issue and solved in some way that is always beneficial and never technically disadvantageous. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1729/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1727",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1727/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1727/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1727/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1727",
    "id": 729326143,
    "node_id": "MDU6SXNzdWU3MjkzMjYxNDM=",
    "number": 1727,
    "title": "More input signals",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-26T07:34:34Z",
    "updated_at": "2020-10-26T10:29:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Rougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI find working with the input event is a little too generic and was hard until I realized I had to check events with the 'is operator'  \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest adding more concreate input events and moving existing ones to node\r\n\r\nhere are some I can think of..\r\n- mouse_move\r\n- mouse_down\r\n- mouse_up\r\n- key_down\r\n- key_up\r\n- touch_move\r\n- touch_down\r\n- touch_up\r\n- action_down\r\n- action_up\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess it would look something like this..\r\n```\r\nfunc _on_mouse_move(event): # InputEventMouseMotion\r\n  pass\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used more often then the input signal if done right\r\nwhile you can just use the input signal its not ideal for beginners\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think its a more beginner friendly system then what we have now.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1727/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1725",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1725/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1725/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1725/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1725",
    "id": 729159896,
    "node_id": "MDU6SXNzdWU3MjkxNTk4OTY=",
    "number": 1725,
    "title": "Render the project offscreen and present it using DirectX or Vulkan to solve NVIDIA Optimus stuttering",
    "user": {
      "login": "EIREXE",
      "id": 3101690,
      "node_id": "MDQ6VXNlcjMxMDE2OTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3101690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EIREXE",
      "html_url": "https://github.com/EIREXE",
      "followers_url": "https://api.github.com/users/EIREXE/followers",
      "following_url": "https://api.github.com/users/EIREXE/following{/other_user}",
      "gists_url": "https://api.github.com/users/EIREXE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EIREXE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EIREXE/subscriptions",
      "organizations_url": "https://api.github.com/users/EIREXE/orgs",
      "repos_url": "https://api.github.com/users/EIREXE/repos",
      "events_url": "https://api.github.com/users/EIREXE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EIREXE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-26T00:51:50Z",
    "updated_at": "2020-10-28T14:48:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA rhythm game in Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nOpenGL software has stuttering issues in some NVIDIA Optimus setups, this is universal and the only solution is to either not use OpenGL or to render the OpenGL buffer offscreen and present it using DirectX or Vulkan and forcing v-sync to be on.\r\n\r\nVulkan is preferred, as that leads to the least amount of problems in my experience using ANGLE.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAn option that allows the game to render offscreen and be presented by Dx11 or Vulkan.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI suppose the best way would be to do this in the Windows OS code, possibly overriding something in the GL context code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere is no solution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is a fairly low level change that can't be done from an asset.\r\n\r\nP.S:\r\n\r\nIt is obvious this change would only apply to 3.2 and the GLES2 renderer in 4.0.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1724",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1724/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1724/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1724/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1724",
    "id": 729063561,
    "node_id": "MDU6SXNzdWU3MjkwNjM1NjE=",
    "number": 1724,
    "title": "Add a button to reverse `Gradient` in the editor",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 1,
    "created_at": "2020-10-25T16:56:54Z",
    "updated_at": "2020-10-25T17:28:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSee godotengine/godot#42855 and godotengine/godot-proposals#1677.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSee https://github.com/godotengine/godot/pull/42855#issuecomment-716173277.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest that the editor should have a way to reverse color offsets, just like in image editing software.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![Screenshot 2020-10-25 195052](https://user-images.githubusercontent.com/17108460/97113449-1def0600-16f3-11eb-9eaf-c0e8743952c4.png)\r\n\r\nPicture from https://graphicdesign.stackexchange.com/a/57225.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTrivial (but painful) for black and white gradients by switching leftmost and rightmost grabbers manually, *not* trivial for anything else.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlready part of core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1724/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1723",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1723/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1723/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1723/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1723",
    "id": 729028567,
    "node_id": "MDU6SXNzdWU3MjkwMjg1Njc=",
    "number": 1723,
    "title": "[Discussion] About js interop",
    "user": {
      "login": "Thaina",
      "id": 1042507,
      "node_id": "MDQ6VXNlcjEwNDI1MDc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1042507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thaina",
      "html_url": "https://github.com/Thaina",
      "followers_url": "https://api.github.com/users/Thaina/followers",
      "following_url": "https://api.github.com/users/Thaina/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thaina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thaina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thaina/subscriptions",
      "organizations_url": "https://api.github.com/users/Thaina/orgs",
      "repos_url": "https://api.github.com/users/Thaina/repos",
      "events_url": "https://api.github.com/users/Thaina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thaina/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-25T14:06:59Z",
    "updated_at": "2020-10-25T16:39:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWeb game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing any asynchronous operation in js side, any library, especially third party\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI wish to have official and homogenous way any godot project would handling async js interop. Both promise and listener. And centralized the object handling into one system\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis could not be a small system. I have trying to made it myself right now. But I wish godot would accept this into official engine. So I don't need to reinvent the wheel or using the most efficient route godot could provide internally, instead of me trying to hack things around inefficiently\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere would be some system that need to implement to work together\r\n\r\n### Centralize object handler\r\n\r\nNot sure this should be put in `Module` or `Window` or godot's engine internal object. But I wish godot would initial one `map` that would be a collection to handle any value and object we need to use in godot side (from now on I would use C# as it was my preferred language)\r\n\r\n```C#\r\npublic class Handle\r\n{\r\n\tstatic Handle()\r\n\t{\r\n\t\tJavaScript.Eval(\"window.GodotJSInteropMap = {}\");\r\n\t}\r\n\r\n\tpublic readonly string ID;\r\n\tpublic Handle(string id)\r\n\t{\r\n\t\tID = id;\r\n\t}\r\n\r\n\tpublic void SetValue(string code)\r\n\t{\r\n\t\tJavaScript.Eval(\"window.GodotJSInteropMap[\" + ID + \"] = \" + code);\r\n\t}\r\n\tpublic object GetValue(string code)\r\n\t{\r\n\t\tstring eval = \"window.GodotJSInteropMap[\" + ID + \"]\" + code;\r\n\t\tvar value = JavaScript.Eval($@\"\r\nvar val = window.GodotJSInteropMap[{ID}].{code};\r\nif(val == null)\r\n  return null;\r\nvar type = typeof val;\r\nif(type == \\\"Number\\\" || type == \\\"Boolean\\\")\r\n  return val;\r\n\r\nif(type == \\\"String\\\")\r\n  return JSON.stringify(val);\r\n\r\nvar id = GenerateUniqueID();\r\nwindow.GodotJSInteropMap[id] = val;\r\nreturn JSON.stringify({ ID : id });\r\n\");\r\n\t\tif(value == null || !(value is string text))\r\n\t\t\treturn value;\r\n\r\n\t\tvar jtoken = JToken.Parse(text);\r\n\t\tif(jtoken is JValue jv)\r\n\t\t\treturn jv.Value;\r\n\r\n\t\t// should be object with ID\r\n\t\treturn new Handle(value[\"ID\"].ToString());\r\n\t}\r\n\r\n\t~Handle()\r\n\t{\r\n\t\tJavaScript.Eval(\"delete window.GodotJSInteropMap[\" + ID + \"]\");\r\n\t}\r\n}\r\n```\r\n\r\nIf godot would incorporate Handle object like this officially, `JavaScript.Eval` itself might be able to return `Handle` object without my complicate parsing\r\n\r\n### Eval injection script\r\n\r\nWith centralize object handler above, we then could reference js object with handle in godot side. So we should be able to have `eval` with complex referencing\r\n\r\nSo I would like to propose an overload method for `JavaScript.Eval` to that receive custom lookup callback and could write javascript with injection marker\r\n\r\nSuppose the injection marker is `%%name%%`\r\n\r\n```C#\r\nJavaScript.Eval($@\"\r\n\tconsole.log(%%pi%%); // marker name `pi`\r\n\tconsole.log(%%sometext%%.length); // marker name `sometext`, should be string\r\n\tconsole.log(%%someaction%%(\\\"Run Action Here\\\"));\r\n\",(key) => {\r\n\tswitch(key)\r\n\t{\r\n\t\tcase \"pi\":\r\n\t\t\treturn Math.PI;\r\n\t\tcase \"sometext\":\r\n\t\t\treturn \"Random text just for sending string\";\r\n\t\tcase \"someaction\":\r\n\t\t\treturn Handle.Eval(\"alert\"); // eval that could return handle as above\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t}\r\n});\r\n```\r\n\r\nThis new function is just 2 step parser. In will inject a value in the place of marker, if value is handle it will inject `window.GodotJSInteropMap[idOfHandle]`. And then it would run a normal `JavaScript.Eval` after that\r\n\r\nFrom above example it would be the same as\r\n\r\n```C#\r\nJavaScript.Eval($@\"\r\n\twindow.GodotJSInteropMap[\\\"UniqueIDGeneratedForAlert\\\"] = alert;\r\n\");\r\nJavaScript.Eval($@\"\r\n\tconsole.log(3.141592653589793);\r\n\tconsole.log(\\\"Random text just for sending string\\\".length);\r\n\tconsole.log(window.GodotJSInteropMap[\\\"UniqueIDGeneratedForAlert\\\"](\\\"Run Action Here\\\")); // cache alert from above so just emit alert normally\r\n\");\r\n```\r\n\r\nWith these system we could eval async function smoothly\r\n\r\n```C#\r\nvar someCallBackHandler = Handle.Eval(\"alert\");\r\n\r\nJavaScript.Eval($@\"\r\n    thirdPartyPromise.then((data) => %%_%%(data));\r\n\",(key) => someCallBackHandler);\r\n```\r\n\r\n### Anything else?\r\n\r\nI think this should cover many use case we normally used with js eval code but there would be much more. Anyone have any thought about this?\r\n\r\nBTW, Currently now my most important blockage issue is ability to call C# code from JS side\r\n\r\nEven just ability to call static function is lacking\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1723/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1721",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1721/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1721/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1721/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1721",
    "id": 728983168,
    "node_id": "MDU6SXNzdWU3Mjg5ODMxNjg=",
    "number": 1721,
    "title": "Add Convolution Reverb audio effect that takes a WAV Impulse Response file as input",
    "user": {
      "login": "Chlipouni",
      "id": 6040545,
      "node_id": "MDQ6VXNlcjYwNDA1NDU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6040545?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chlipouni",
      "html_url": "https://github.com/Chlipouni",
      "followers_url": "https://api.github.com/users/Chlipouni/followers",
      "following_url": "https://api.github.com/users/Chlipouni/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chlipouni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chlipouni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chlipouni/subscriptions",
      "organizations_url": "https://api.github.com/users/Chlipouni/orgs",
      "repos_url": "https://api.github.com/users/Chlipouni/repos",
      "events_url": "https://api.github.com/users/Chlipouni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chlipouni/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-25T09:49:56Z",
    "updated_at": "2020-10-26T10:19:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a rhythm game that uses an electric guitar as audio record stream.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe default sound is clean and I tried to use existing audio effects in Godot to generate a distorded sound but it is hard to simulate existing guitar AMPs and Cabinets.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a new effect based on Convolution Reverb algorithm and WAV Impulse Response files as input would be a great solution to simulate Guitar AMPs and Cabinets.\r\n\r\nThis can also be used to transform every sound or music in games by applying a specific athmosphere (hall, cathedral, small room, ...). The developer effort is just to get a small WAV file that contains the Impulse Responses (those files can be found on the Web).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA new audio effect must be added in Godot.\r\nThere are existing projects on GitHub.\r\nExamples : \r\n - https://github.com/micbuffa/WebAudio-Guitar-Amplifier-Simulator-3 (MIT License)\r\n    Very impressive project using WebAudio and Javascript (low latency with direct guitar input)\r\n    Live Demo at : https://wasabi.i3s.unice.fr/ampsim3/\r\n - https://github.com/HiFi-LoFi/KlangFalter (GPL License)\r\nSorry, but I don't have enough skills in C++ to work on a prototype.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis effect must be added in core due to performance reasons and to limit the audio latency between input and output.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1720",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1720/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1720/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1720/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1720",
    "id": 728899757,
    "node_id": "MDU6SXNzdWU3Mjg4OTk3NTc=",
    "number": 1720,
    "title": "Can't convert Vector2 to Vector3 due to y axis differences",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-24T23:33:31Z",
    "updated_at": "2020-10-25T19:51:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D rouglelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nsomething like this don't work due to y axis facing down in 2d and up in 3d\r\n```\r\nfunc v2_to_v3(vector:Vector2)->Vector3:\r\n\treturn Vector3.FORWARD.rotated(Vector3.UP, vector.angle())\r\n```\r\n\r\n```\r\nfunc check_move(dir:Vector2)->bool:\r\n\tif has_node(\"RayCast\"):\r\n\t\tvar raycast = get_node(\"RayCast\")\r\n\t\traycast.cast_to = v2_to_v3(dir).rotated(Vector3.UP, rotation.y)\r\n\t\traycast.force_raycast_update()\r\n\t\treturn not raycast.is_colliding()\r\n\treturn true\r\n```\r\n\r\n\r\nI have a camera with no rotate except -90 degress on the x axis to make it face down and a ray cast with the same parent as the camera\r\n\r\nVector.UP\r\n![image](https://user-images.githubusercontent.com/2453707/97095541-adbe8280-1615-11eb-8b74-9211a2b676f7.png)\r\nVector2.DOWN\r\n![image](https://user-images.githubusercontent.com/2453707/97095561-d181c880-1615-11eb-80dd-9a3a9a119a2b.png)\r\nVector2.LEFT\r\n![image](https://user-images.githubusercontent.com/2453707/97095547-bdd66200-1615-11eb-8f9f-413d2dc36ac1.png)\r\nVector2.RIGHT\r\n![image](https://user-images.githubusercontent.com/2453707/97095551-c75fca00-1615-11eb-905f-efdb3f52bc34.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest a option be added to invert the 3d y axis so that it matches the 2d counterpart\r\nI also suggest making it the default option for future projects\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhat should be happening is this..\r\nVector2.LEFT\r\n![image](https://user-images.githubusercontent.com/2453707/97095551-c75fca00-1615-11eb-905f-efdb3f52bc34.png)\r\nVector2.RIGHT\r\n![image](https://user-images.githubusercontent.com/2453707/97095547-bdd66200-1615-11eb-8f9f-413d2dc36ac1.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would make things so much easier for people to convert between 3d and 2d vectors and while it might be doable with script its not very easy to understand and do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would simplify rotations and make them easier to understand\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1719",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1719/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1719/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1719/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1719",
    "id": 728868875,
    "node_id": "MDU6SXNzdWU3Mjg4Njg4NzU=",
    "number": 1719,
    "title": "Add method to get vector from angle",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-24T20:19:38Z",
    "updated_at": "2020-10-25T12:26:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2D game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe have `Vector2.angle()` which is useful to get an angle in radians from a vector, my problem is that there's no opposite method. It's rather simple to write one, but let's say you want to do `velocity.angle().rotated(1)` and then get a directional vector again. You are forced to store the angle value into a variable. And then do maths. But what maths? `velocity = Vector2(sin(angle), cos(angle))`? `velocity = Vector2(cos(angle), -sin(angle))`? See? It's not obvious what combination of sin/cos will yield a vector that will be consistent with the built-in `angle()` method. I use this quite often, but not often enough to remember what to use xd\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe could add a `angle_to_vector()` method, which would convert an angle to normalized Vector2() in a way that `angle_to_vector(vec.angle())` would be equal to `vec.normalized()`. This is just for convenience.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nVector2 angle_to_vector(float p_angle) {\r\n    return Vector2(sin(p_angle), cos(p_angle))\r\n}\r\n```\r\nor something\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is used quite often. But yes, can be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt just feels like the current set of math methods is missing this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1719/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1716",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1716/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1716/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1716/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1716",
    "id": 728626430,
    "node_id": "MDU6SXNzdWU3Mjg2MjY0MzA=",
    "number": 1716,
    "title": "Allow offsetting built in mesh types",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-24T01:33:00Z",
    "updated_at": "2020-10-24T17:31:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Roguelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to offset cubes by half a unit for gridmaps\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI was wondering of a offset parameter could be added to meshes so that we can offset the vertices for gridmaps\r\n\r\nthis issue covered it but was closed due to a fix that didn't fix the issue  [#24602](https://github.com/godotengine/godot/issues/24602)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nsomething like size which is a vector3 under the mesh properties but for vertices offsets \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would mostly be used for gridmaps and yes through a script but we shouldn't need to attach a script to every mesh just to offset it because gridmaps don't respect position\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library\r\nits useful to easily be able to create block based 3d maps",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
