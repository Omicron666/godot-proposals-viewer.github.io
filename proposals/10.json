[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/874",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/874/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/874/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/874/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/874",
    "id": 623561840,
    "node_id": "MDU6SXNzdWU2MjM1NjE4NDA=",
    "number": 874,
    "title": "Change array \"identity\" to work like dictionaries and objects (for `==` operator and dictionary indexing)",
    "user": {
      "login": "charliewhitfield",
      "id": 41218520,
      "node_id": "MDQ6VXNlcjQxMjE4NTIw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41218520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/charliewhitfield",
      "html_url": "https://github.com/charliewhitfield",
      "followers_url": "https://api.github.com/users/charliewhitfield/followers",
      "following_url": "https://api.github.com/users/charliewhitfield/following{/other_user}",
      "gists_url": "https://api.github.com/users/charliewhitfield/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/charliewhitfield/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/charliewhitfield/subscriptions",
      "organizations_url": "https://api.github.com/users/charliewhitfield/orgs",
      "repos_url": "https://api.github.com/users/charliewhitfield/repos",
      "events_url": "https://api.github.com/users/charliewhitfield/events{/privacy}",
      "received_events_url": "https://api.github.com/users/charliewhitfield/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-23T02:26:37Z",
    "updated_at": "2020-10-18T09:11:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI have a large [solar system simulation](https://github.com/ivoyager) where bodies are generated procedurally (from data tables) and can be saved/loaded using our Procedural Saver/Loader ([in the Asset Library](https://godotengine.org/asset-library/asset/439)). \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIf `a` and `b` are arrays, I need a GDScript method to test if `a` and `b` are the same array. (Currently, `a == b` tests whether they have the same content.) Also, if `a`, `b`, `c` are different arrays, I need to be able to use them (or some value derived from them) as unique dictionary keys.\r\n\r\nThe reason I need this is to generalize our Procedural Saver/Loader to handle arrays that are referenced in >1 location. I'm all set for objects and dictionaries (since different objects or dictionaries act as unique dictionary keys) but I'm stuck on arrays.\r\n\r\nThis limitation is discussed in [issue #33627](https://github.com/godotengine/godot/issues/33627). But it's labeled as discussion, not bug. And no workarounds have been proposed there. \r\n\r\nHere's some code to show the different treatment of arrays and dictionaries.\r\n```\r\n\tprint([] == []) # prints true\r\n\tprint({} == {}) # prints false\r\n\tvar a := []\r\n\tvar b := []\r\n\tvar dict_w_array_keys := {}\r\n\tdict_w_array_keys[a] = 1\r\n\tdict_w_array_keys[b] = 2\r\n\tprint(dict_w_array_keys.size()) # prints 1\r\n\tvar c := {}\r\n\tvar d := {}\r\n\tvar dict_w_dict_keys := {}\r\n\tdict_w_dict_keys[c] = 1\r\n\tdict_w_dict_keys[d] = 2\r\n\tprint(dict_w_dict_keys.size()) # prints 2\r\n\r\n\t# objects behave like dictionaries in all tests above\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMy preference is for `==` to work for arrays as it does for dictionaries and objects. That is, an identity test, not a content test. Relatedly, two different arrays should act as unique keys in a dictionary, regardless of content.\r\n\r\nAlternatively, without changing the way \"identity\" currently works in arrays, I propose methods to test true array identity and to obtain unique array identifiers suitable for use as dictionary keys.\r\n\r\nEither of these approaches will allow me to generalize Procedural Saver/Loader to operate on arrays the way it currently does for objects. Specifically, we can know if we are looking at a non-yet-encountered array versus an already-saved array in our save code.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nMy preferred solution will break existing projects:\r\n* Change `==` for arrays to be an identity test (not content test) as it is for dictionaries & objects.\r\n* Change arrays to act as unique keys in a dictionary (regardless of content) as is presently the case for dictionaries & objects.\r\n* Add @GDScript `is_equivalent_arrays(a, b)` to test array content, replacing existing `==` functionality.\r\n\r\nAlternative solution (non-breaking):\r\n* Add @GDScript `is_same_array(a, b)` to test array identity.\r\n* Add `Array.get_id()` or `Array.get_ref()` that provides some sort of unique identifier for each array. I don't care what that identifier is as long as it works as a unique dictionary key. I believe that is what the original poster in [issue #33627](https://github.com/godotengine/godot/issues/33627) is asking for by an array \"reference\".\r\n* [**If** dictionaries are changed to work like arrays] Analogous methods for dictionaries so that identity testing remains possible.\r\n\r\n**Note:** the 2nd point above is really the key to Procedural Saver/Loader's operation. It uses dictionary indexing to know when it is looking at a not-yet-encountered object versus an already-saved object during a game save event. To generalize this to work for arrays too, I'd need the same capacity.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWell, sort of. I can **make** arrays identifiable by appending an id to every array in the project, then removing that id when Procedural Saver/Loader is done. It's inelegant and inefficient for a large save with many 1000s of arrays.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI don't think it's possible to add this capability as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/874/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/873",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/873/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/873/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/873/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/873",
    "id": 623234732,
    "node_id": "MDU6SXNzdWU2MjMyMzQ3MzI=",
    "number": 873,
    "title": "Increase the size of the script editor breakpoint gutter's clickable area",
    "user": {
      "login": "Gigabitten",
      "id": 24787321,
      "node_id": "MDQ6VXNlcjI0Nzg3MzIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24787321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gigabitten",
      "html_url": "https://github.com/Gigabitten",
      "followers_url": "https://api.github.com/users/Gigabitten/followers",
      "following_url": "https://api.github.com/users/Gigabitten/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gigabitten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gigabitten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gigabitten/subscriptions",
      "organizations_url": "https://api.github.com/users/Gigabitten/orgs",
      "repos_url": "https://api.github.com/users/Gigabitten/repos",
      "events_url": "https://api.github.com/users/Gigabitten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gigabitten/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-22T14:05:37Z",
    "updated_at": "2020-06-02T18:56:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a simple game where you're a frog and you hop around and stick to surfaces and stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFiguring out how to use breakpoints is unintuitive. Apparently you can press F9 or put the word \"breakpoint\" or click in the region to the left of a line, but there's no immediately apparent UI option under debug for it, and the region to click is very narrow. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImprove the size and positioning of the region to press to put down a breakpoint so that it's consistent with other editors, add a UI option or a tooltip somewhere obvious or something, and probably update the documentation as well with this functionality.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\n------------        -----\r\n| O        |   ->   | O |\r\n------------        -----\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around with zero, but this is just a good design thing.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame answer as the last one. It's just better design. \r\n\r\nSorry if this seems a bit silly, but I really did have trouble figuring out how to make a breakpoint at all since you seriously have to click on the left third of the box to get it to activate, and although there's some pretty detailed documentation on the basics of debugging, it doesn't once mention how to actually make a breakpoint. Figured I'd take the time to put this in, even if it is quite a small fix for the amount of typing I need to do.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/870",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/870/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/870/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/870/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/870",
    "id": 622973291,
    "node_id": "MDU6SXNzdWU2MjI5NzMyOTE=",
    "number": 870,
    "title": "Add support for recording and sending VoIP data",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2020-05-22T06:03:16Z",
    "updated_at": "2020-10-02T00:50:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiplayer shooting game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to send sound packets over the network to the other player so as to better my multiplayer game interaction\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a Sound Recorder to record sounds  and save them as temporary .wav or any other supported audio format files to send over the internet and other networks and can be useful for other purposes\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA SoundRecorder node would have able to save sounds like voice data which could be useful in sending greetings over a network by different players instead of having to type a message during game play , Voice data would also be useful in the authentication of users so as to prevent data manipulation by hackers and give better security for users\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nA few lines a code wouldn't cut it\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere are different platforms that have different sound recorder classes creating a sound recorder node will allow acess to all those platforms at once without having to rewrite the code for different platforms. A plugin wouldnt be able to manage that\r\n![Sound1](https://user-images.githubusercontent.com/59492619/82636245-12eef180-9bfa-11ea-967f-d672173e8f90.PNG)\r\n![Sound2](https://user-images.githubusercontent.com/59492619/82636322-3f0a7280-9bfa-11ea-84fc-c0dbeac15006.PNG)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/870/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/869",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/869/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/869/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/869/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/869",
    "id": 622950672,
    "node_id": "MDU6SXNzdWU2MjI5NTA2NzI=",
    "number": 869,
    "title": "Center AnimationTree bottom panel when clicking \"Expand Bottom Panel\" or pressing Shift+F12",
    "user": {
      "login": "brainard52",
      "id": 1023838,
      "node_id": "MDQ6VXNlcjEwMjM4Mzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1023838?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brainard52",
      "html_url": "https://github.com/brainard52",
      "followers_url": "https://api.github.com/users/brainard52/followers",
      "following_url": "https://api.github.com/users/brainard52/following{/other_user}",
      "gists_url": "https://api.github.com/users/brainard52/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brainard52/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brainard52/subscriptions",
      "organizations_url": "https://api.github.com/users/brainard52/orgs",
      "repos_url": "https://api.github.com/users/brainard52/repos",
      "events_url": "https://api.github.com/users/brainard52/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brainard52/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-22T04:59:28Z",
    "updated_at": "2020-05-22T22:57:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm using AnimationTree to model animation of sprites and hit/hurt boxes in a side-scroller brawler game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen expanding the bottom panel, the nodes in my animation tree are not centered. Instead, they maintain the same amount of space between the top and the nodes as when the panel was not expanded. This is a minor workflow problem for me as I tend to re-center everything with the vertical scrollbar every time I work on the tree. After, when I click the button to return the bottom panel to normal, the same problem occurs and all of my nodes are off-screen.\r\n\r\nI've demonstrated the issue here: https://www.youtube.com/watch?v=bBW7RjOqg9g\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCentering of the nodes when expanding or closing the bottom panel would eliminate unnecessary steps in the workflow.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCurrent:\r\nMake viewport bigger\r\nAdd space below nodes\r\n\r\nProposed:\r\nMake viewport bigger\r\nFind center of nodes,\r\nAdd space to top and bottom to center\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI believe this would be used every time somebody uses AnimationTree\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is an adjustment to a core feature. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/869/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/868",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/868/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/868/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/868/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/868",
    "id": 622927095,
    "node_id": "MDU6SXNzdWU2MjI5MjcwOTU=",
    "number": 868,
    "title": "Allow direct pixel access in Image",
    "user": {
      "login": "Wavesonics",
      "id": 406473,
      "node_id": "MDQ6VXNlcjQwNjQ3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/406473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wavesonics",
      "html_url": "https://github.com/Wavesonics",
      "followers_url": "https://api.github.com/users/Wavesonics/followers",
      "following_url": "https://api.github.com/users/Wavesonics/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wavesonics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wavesonics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wavesonics/subscriptions",
      "organizations_url": "https://api.github.com/users/Wavesonics/orgs",
      "repos_url": "https://api.github.com/users/Wavesonics/repos",
      "events_url": "https://api.github.com/users/Wavesonics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wavesonics/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-05-22T03:40:26Z",
    "updated_at": "2020-05-24T08:16:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nFalling sand type of game:\r\nhttps://en.wikipedia.org/wiki/Falling-sand_game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently access to the pixel data in `Image` requires you to go through accessors such as:\r\n`get_pixel()` and `set_pixel()`\r\nAnd you must use `Color` instead of treating them as raw bytes. This extra overhead is a problem for Falling Sand style games.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow GDNative and GDScript access to the Image pixel data array.\r\nI believe `Image::ptr` is the pointer we need access to, and using `bytePixelStride` we can index the array manually.\r\n\r\nOnce modified, the dirty regions can be re-uploaded to the GPU texture using existing features.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHow to expose this to GDNative is the big question that I don't know how to accomplish. The normal data types such as PackedByteArray are all COW as far as I'm aware, and that really wouldn't work for performance critical applications that this is trying to enable.\r\n\r\nSo long story short, I don't know how it would work...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think you could get around it using an Engine Plugin?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSharing Engine Plugins is hard.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/868/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/867",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/867/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/867/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/867/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/867",
    "id": 622815933,
    "node_id": "MDU6SXNzdWU2MjI4MTU5MzM=",
    "number": 867,
    "title": "Implement Hashset primitive to complement Dictionary & Array",
    "user": {
      "login": "RabbitB",
      "id": 6007524,
      "node_id": "MDQ6VXNlcjYwMDc1MjQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6007524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RabbitB",
      "html_url": "https://github.com/RabbitB",
      "followers_url": "https://api.github.com/users/RabbitB/followers",
      "following_url": "https://api.github.com/users/RabbitB/following{/other_user}",
      "gists_url": "https://api.github.com/users/RabbitB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RabbitB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RabbitB/subscriptions",
      "organizations_url": "https://api.github.com/users/RabbitB/orgs",
      "repos_url": "https://api.github.com/users/RabbitB/repos",
      "events_url": "https://api.github.com/users/RabbitB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RabbitB/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-21T21:58:07Z",
    "updated_at": "2020-09-16T02:02:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAn old-school match-three game, although I've encountered the need for a Hashset on other projects, and I can foresee its need on future projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes what you care about most is the relationship between data, even more so than the data itself. In my case, I care about the _set_ of data I have, and I want to easily perform traditional set operations on it, such as checking if a value exists in my collection of data, or if one set overlaps, is a subset/superset of another set, etc.\r\n\r\nMy explicit example and what prompted me to open an issue, is that in finding matches for items on my game board, I need to quickly check if an item already belongs to another match that was found, determine if that type of item has already been handled by any matches, and determine if different matches overlap so that I can properly merge them. As well as numerous other little things that require the same functionality.\r\n\r\nI'm working around this by using Dictionary and only making use of the keys (just set the values to 0) when doing my checks, but what I'd ideally have access to is a Hashset. A data structure that doesn't store values, only keys, explicitly for performing fast set operations upon.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is related to proposal #821, but where it's concerned with adding set operations to existing primitives, I'd like to see an actual Hashset implemented, as it's best suited to situations where you explicitly need the lookup characteristics of a Dictionary, but do not have key:value pairs to store.\r\n\r\nAs you can see from the conversation in proposal #821, there is some ambiguity in set operations on Dictionaries, whereas there is none on a Hashset, since it stores only keys.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI haven't dug enough into the Godot source to say how Dictionary and other primitives are implemented, but I would imagine it would be much like Dictionary in execution, but with the ability to store values removed and set operation functions as discussed in #821 added.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nA Hashset could be developed in GDScript, but it would be slow and not a primitive like Array or Dictionary. There is no way to work around that in GDScript. For how often it would be used, I would imagine semi-regularly. Many people (including myself) tend to design their code around the [available] data-structure that best fits what you're trying to do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't believe it's possible to add primitive types through GDScript or GDNative, so this can only be added into the core engine itself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/867/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/866",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/866/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/866/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/866/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/866",
    "id": 622400383,
    "node_id": "MDU6SXNzdWU2MjI0MDAzODM=",
    "number": 866,
    "title": "Data types with different precision",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-21T10:19:18Z",
    "updated_at": "2020-06-15T08:49:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm actually into the multiplayer coding and only now i realized that there are no precision choices for the data types, i was probably thinking about glsl data types... anyway having the possibility to lower the precision of the data would make the transmission of data faster and cheaper.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike in other languages i want the possibility to choose the precision of at least int and float, after all while int and float are 64bit the float components of the vector types are 32 bit, so there are already different precisions in gdscript.\r\nSmaller data would lead to less network usage and i guess faster encryption/decryption, save/load and so on.\r\nI'm using int variables mostly as indices so they have relatively low values, using a 64bit integer for such a thing could be a waste in my case.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would work by writing something like float64, float32, float16 or maybe the same keywords used in glsl lowp, mediump and highp before the type, or whatever you think is best.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is about core Godot data types, so it can't be an addon i guess.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/866/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/863",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/863/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/863/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/863/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/863",
    "id": 621721594,
    "node_id": "MDU6SXNzdWU2MjE3MjE1OTQ=",
    "number": 863,
    "title": "Configurable zoom speed in 2D Scene Editor",
    "user": {
      "login": "ExoidAgent",
      "id": 65504654,
      "node_id": "MDQ6VXNlcjY1NTA0NjU0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65504654?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ExoidAgent",
      "html_url": "https://github.com/ExoidAgent",
      "followers_url": "https://api.github.com/users/ExoidAgent/followers",
      "following_url": "https://api.github.com/users/ExoidAgent/following{/other_user}",
      "gists_url": "https://api.github.com/users/ExoidAgent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ExoidAgent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ExoidAgent/subscriptions",
      "organizations_url": "https://api.github.com/users/ExoidAgent/orgs",
      "repos_url": "https://api.github.com/users/ExoidAgent/repos",
      "events_url": "https://api.github.com/users/ExoidAgent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ExoidAgent/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-05-20T12:27:50Z",
    "updated_at": "2020-07-29T13:14:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA regular project involving the creation and editing of 2D tilemaps.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I work on a tilemap (or on any Scene, for that matter), I zoom in and out frequently so that I can quickly evaluate the looks both on a smaller and a larger scale. For that to happen routinely, I use the mousewheel to zoom in and out frequently.\r\n\r\nIt takes a lot of time, however, feeling slow. While a relatively small feature, my impression is that it has a huge impact in case zooming is prevalent. The Scene Editor has an option to reset Zoom to 100%, but it helps only in case of zooming in, not out.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA numeric configuration parameter added to Editor Settings called `Zoom speed`, similar to the currently existing `Pan speed`.\r\n\r\nThe value of this option would be bound to the zooming functions applied in the Scene Editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine the perfect location of the new option to be `Editor Settings > Editor > 2D`. Here, a new config added with an integer value.\r\n\r\nAfter some quick research, I found that `editor/plugins/canvas_item_editor_plugin.cpp::CanvasItemEditor::_gui_input_zoom_or_pan` is the function where the main logic is to be changed. Of course, it would mean that zooming with the mousewheel and using the GUI icons by clicking would be equally faster or slower, depending on the configuration.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs with many configuration settings, chances are many people won't change them in the long run. However, since it depends on the interaction between an input and the response of the interface based on it, I'm not convinced a script solution is feasible.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is an option in the Editor Settings. Affects every 2D editor ever used in a project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/861",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/861/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/861/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/861/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/861",
    "id": 621292186,
    "node_id": "MDU6SXNzdWU2MjEyOTIxODY=",
    "number": 861,
    "title": "Add range normalization functions for OpenSimplex",
    "user": {
      "login": "milesturin",
      "id": 31150941,
      "node_id": "MDQ6VXNlcjMxMTUwOTQx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/31150941?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milesturin",
      "html_url": "https://github.com/milesturin",
      "followers_url": "https://api.github.com/users/milesturin/followers",
      "following_url": "https://api.github.com/users/milesturin/following{/other_user}",
      "gists_url": "https://api.github.com/users/milesturin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milesturin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milesturin/subscriptions",
      "organizations_url": "https://api.github.com/users/milesturin/orgs",
      "repos_url": "https://api.github.com/users/milesturin/repos",
      "events_url": "https://api.github.com/users/milesturin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milesturin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-19T21:19:55Z",
    "updated_at": "2020-05-20T23:13:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA project that uses noise to randomly generate terrain.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen using noise, it is common to use different value ranges for different things. For example, if you were using noise as a terrain heightmap, you could designate different kinds of terrain based on the noise value: values above 0.8 are snow, about 0.7 are mountain, above 0.4 are grass, etc. The issue is that OpenSimplex does not give consistent values between -1 and 1, its common range varies greatly depending on the octave settings. This makes it very difficult to do meaningful things with the noise.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that OpenSimplex offers a setting that adjusts sampled values to better fit a consistent range.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe most common workaround for this issue is this:\r\n```GDScript\r\nvar noise := OpenSimplexNoise.new()\r\nnoise.octaves = 4\r\nnoise.persistence = 0.8\r\nnoise.period = 17.0\r\nnoise.seed = randi()\r\nvar n_max := 0.0\r\nfor i in range(100000):\r\n\tvar n = abs(noise.get_noise_2d(randi(), randi()))\r\n\tif n > n_max:\r\n\t\tn_max = n\r\n```\r\nnow, every time you sample noise, divide it my n_max in order to get a normalized value. This is a sloppy, time consuming method, that still leaves a decent variance in sampled values. I believe that this problem could be solved within the implementation of OpenSimplex itself.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe existing workaround is a poor one, and the documentation surrounding this problem is sparse. I believe that it would be a very helpful addition to Godot.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, this issue is prevalent with almost all applications of noise, and should be part of the standard functionality of noise in Godot. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/861/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/860",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/860/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/860/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/860/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/860",
    "id": 621040337,
    "node_id": "MDU6SXNzdWU2MjEwNDAzMzc=",
    "number": 860,
    "title": "Add `current_force` and `current_torque` properties for physics joints",
    "user": {
      "login": "Laihela",
      "id": 31377771,
      "node_id": "MDQ6VXNlcjMxMzc3Nzcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/31377771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Laihela",
      "html_url": "https://github.com/Laihela",
      "followers_url": "https://api.github.com/users/Laihela/followers",
      "following_url": "https://api.github.com/users/Laihela/following{/other_user}",
      "gists_url": "https://api.github.com/users/Laihela/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Laihela/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Laihela/subscriptions",
      "organizations_url": "https://api.github.com/users/Laihela/orgs",
      "repos_url": "https://api.github.com/users/Laihela/repos",
      "events_url": "https://api.github.com/users/Laihela/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Laihela/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-19T14:49:00Z",
    "updated_at": "2020-05-20T23:14:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA physics sandbox / flight simulator game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to have joints break when they're overstressed.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy having the ability to measure the current stress a joint is experiencing, I can have joints break when they exceed an arbitrary maximum stress value.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```swift\r\nfunc _physics_process(_delta):\r\n    for joint in joints:\r\n        if joint.current_force > break_force or joint.current_torque > break_torque:\r\n            joint.queue_free()\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs far as I know, there is currently no way to measure stress forces on a joint.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI feel like this is a basic feature that would be useful in other physics applications as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/857",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/857/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/857/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/857/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/857",
    "id": 620817870,
    "node_id": "MDU6SXNzdWU2MjA4MTc4NzA=",
    "number": 857,
    "title": "Add `to_global_basis()` and `to_local_basis()` to Spatial/Node2D",
    "user": {
      "login": "Cykyrios",
      "id": 53737317,
      "node_id": "MDQ6VXNlcjUzNzM3MzE3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/53737317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Cykyrios",
      "html_url": "https://github.com/Cykyrios",
      "followers_url": "https://api.github.com/users/Cykyrios/followers",
      "following_url": "https://api.github.com/users/Cykyrios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Cykyrios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Cykyrios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Cykyrios/subscriptions",
      "organizations_url": "https://api.github.com/users/Cykyrios/orgs",
      "repos_url": "https://api.github.com/users/Cykyrios/repos",
      "events_url": "https://api.github.com/users/Cykyrios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Cykyrios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-19T09:19:15Z",
    "updated_at": "2020-11-23T14:17:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis proposal is not related to any particular project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTransforming direction vectors from local space to global space (or the other way around) can be cumbersome and unintuitive, with calls such as `spatial.get_global_transform.basis.xform_inv(vector3)`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding a `to_global_basis(vector3)` method (and the equivalent to_local_basis) to Spatial nodes. This is mainly for convenience, similar to the already available `to_global` method. For Node2D, I am not sure whether `to_global_basis` or `to_global_rotation` would make more sense.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have already added these methods in the following way:\r\n```C++\r\nVector3 Spatial::to_global_basis(Vector3 p_local) const {\r\n  return get_global_transform().get_basis().xform(p_local);\r\n}\r\nVector3 Spatial::to_local_basis(Vector3 p_local) const {\r\n  return get_global_transform().get_basis().xform_inv(p_global);\r\n}\r\n\r\nPoint2 Node2D::to_local_rotation(Point2 p_global) const {\r\n  return get_global_transform().basis_xform_inv(p_global);\r\n}\r\nPoint2 Node2D::to_global_rotation(Point2 p_local) const {\r\n  return get_global_transform().basis_xform(p_local);\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis can of course be worked around easily, the point of this proposal is to add convenience to manipulation of vectors, which could be used often, especially by beginners.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAgain, this is mainly for convenience, in the same way `to_global` and `to_local` have already been made available, but are only suitable for position vectors.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/857/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/856",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/856/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/856/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/856/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/856",
    "id": 620324453,
    "node_id": "MDU6SXNzdWU2MjAzMjQ0NTM=",
    "number": 856,
    "title": "Add edit all children button",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-18T15:57:13Z",
    "updated_at": "2020-08-04T17:45:32Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n3d game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMake instanced scene and all children editable because it is a quality of life problem with many nested scenes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a button called \"make all children editable\".\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe button will be added to the right click menu. This button will go through the nested childs of the scene and make that and the instanced scene editable.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is an editor feature and is expected to be accessible to new developers.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nDownloading the asset from the library means you'll need to explain the asset store and that is not common for new developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/856/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/855",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/855/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/855/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/855/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/855",
    "id": 620322527,
    "node_id": "MDU6SXNzdWU2MjAzMjI1Mjc=",
    "number": 855,
    "title": "Add a filter/search bar to the FileSystem dock in the editor",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-18T15:54:46Z",
    "updated_at": "2020-08-04T16:32:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n3d game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe node tree is hard to understand.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nYou can filter the scene tree by type. You can filter by favourites, or a specific node type including class names.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCreate a drop down bar that has \"Search files\". Clicking on the bar will have the standard preset. Click on custom will allow you to select the exact custom node. Confirmation will toggle the tree to be filtered. De-selection is by selecting a none filter (has a message saying there's no filter).\r\n\r\nHere's a mockup from reduz.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88086180-c7928a00-cb3b-11ea-85d1-c1a16a1ea77e.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is an editor feature and is expected to be accessible to new developers.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nDownloading the asset from the library means you'll need to explain the asset store and that is not common for new developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/855/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/854",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/854/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/854/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/854/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/854",
    "id": 620319583,
    "node_id": "MDU6SXNzdWU2MjAzMTk1ODM=",
    "number": 854,
    "title": "Node categories in the scene tree",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-18T15:52:16Z",
    "updated_at": "2020-05-19T18:33:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n3d game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nNested nodes are hard to understand\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n![image](https://user-images.githubusercontent.com/32321/82233364-c26b5180-98e4-11ea-95b5-9777989ac540.png)\r\n\r\nCreate series of icons that lists the type of the nodes and its count.\r\n\r\nClicking will give a menu sorted by alphabetic? recency? tree order?:\r\n\r\n* Search text field\r\n* Node 0\r\n* Node 1\r\n* Node N\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n* Add a section aligned at the end of the scene tree section. \r\n* Start a list of the most popular categories and count the instances. \r\n* Display the count.\r\n* When the icon is clicked on show the search\r\n* Add a way to click to go to the node from the search.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is an editor feature and is expected to be accessible to new developers.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nDownloading the asset from the library means you'll need to explain the asset store and that is not common for new developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/854/reactions",
      "total_count": 7,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/852",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/852/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/852/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/852/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/852",
    "id": 619880366,
    "node_id": "MDU6SXNzdWU2MTk4ODAzNjY=",
    "number": 852,
    "title": "Better Inspector using attribute system",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-18T03:25:07Z",
    "updated_at": "2020-07-16T19:31:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nnothing right now however I do plan on continuing my spaceship game at some point in the future\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nmostly just the lack of customization over the inspector. \r\nright now its pretty limited to what it can do.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI was wondering if something like [this](https://assetstore.unity.com/packages/tools/utilities/odin-inspector-and-serializer-89041) could be added for the godot engine.\r\n\r\npeople seem to like the idea of annotation and I think this would be a good use for them. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically it would just be a much more customizable and clean looking inspector.\r\n\r\nbut basically it would work like this...\r\n\r\n```\r\n[@tag_group(\"vector2_tab_group\"), @table_layout(\"vector2_tab_group/layout\")]\r\nVector2 field1\r\nVector2 field2\r\nVector2 field3\r\n\r\n[@tag_group(\"float_tab_group\"), @table_layout(\"float_tab_group/layout\")]\r\nfloat field1\r\nfloat field2\r\nfloat field3\r\n``` \r\n\r\nI would like godot do vectors and lists like what this unity extension does has its alot more cleaner look.\r\n\r\n![image](https://user-images.githubusercontent.com/2453707/82171376-fc543d80-987b-11ea-8a61-93a9b6f8ea49.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2453707/82171434-24dc3780-987c-11ea-9092-072b77a4cc03.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2453707/82171445-2efe3600-987c-11ea-800d-5dd5d699c31b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2453707/82171461-3a516180-987c-11ea-932e-576a2b82f4bd.png)\r\n\r\n[here](https://odininspector.com/attributes/tab-group-attribute) is the attribute documentation if you want to see how more things look\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used alot by big time game developers and it can't just be worked around with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit would improve workflow and then godot would have a better inspector then unity ;)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/852/reactions",
      "total_count": 16,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/851",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/851/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/851/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/851/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/851",
    "id": 619843474,
    "node_id": "MDU6SXNzdWU2MTk4NDM0NzQ=",
    "number": 851,
    "title": "Live Multi Person Editing in Godot",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-05-18T01:14:45Z",
    "updated_at": "2020-11-08T15:28:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNon right now but I would like to work on a project with my older brother and show him godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMe and my brother live in two different countries and I would like to start a rouge lite game with him and introduce him to godot.\r\n\r\nthe problem is I would like to have live interaction developing this game with him and while git is good it doesn't really acheave the feeling of building something together\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest that the godot editor gets live networked editing similar to what [superpowers](http://superpowers-html5.com/index.en.html) did and [SMBX](https://www.supermariobrosx.org/) tried to do.\r\n\r\nthis would allow people to work together to build games in a really cool way.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically when one user would edit a file or a property the other users would see the changes on the other end.\r\n\r\nthe way I see this would be something like git being used to save daily work while this would be used to save immediate work.\r\n\r\nI would guess that when you connect to someone it does the following..\r\n- lets you choose project if one doesn't have source control it makes you create one\r\n- lets you choose a source control branch. each branch might have different people working on it.\r\n- when something changes for example a property or file it update it in the editor for each person working on that branch (only the changes).\r\n- finally when people are done for the day commits are made to the currently work on branch.  and if everything is implemented right it won't let you commit if your out of sync with others.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nidk if people would use this but it sounds like it could be the next big source control\r\nalso it couldn't be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nif implemented right it would speed up development and while it could be implimented as a asset library its very unlikely someone would do something this big ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/851/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/850",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/850/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/850/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/850/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/850",
    "id": 619831785,
    "node_id": "MDU6SXNzdWU2MTk4MzE3ODU=",
    "number": 850,
    "title": "Add style inheritance for theme items",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-18T00:22:10Z",
    "updated_at": "2020-09-13T23:40:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nBasic project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have styles for button normal, pressed, hover, etc. If I want to change 1 shared parameter (e.g. border color), I have to do it all manually on each of them. Kind of a problem if I decide I want a major UI style change for many controls.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInheritable styles\r\n\r\nStyle A is the base style (StyleBoxFlat).\r\nStyle B (StyleBoxFlat) inherits Style A.\r\nChanging a parameter on Style A also changes it on style B, unless it has been overriden.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI tried doing this with GD Script with a custom inspector and an exported property. I could get the base style to work, and the child style to 'inherit' it... but the issue was that I could not update the child when the base was updated. There was no easy signal to connect to when the base was changed. I didn't go very far with this trial... Maybe it needs a custom type for both 'base' and 'inheritable' classes, but at this stage I would say it could be easier to implement natively.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure - see above comments. Maybe it could... but useful to have it as native functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee comments above - this is debatable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/850/reactions",
      "total_count": 14,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/849",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/849/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/849/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/849/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/849",
    "id": 619668767,
    "node_id": "MDU6SXNzdWU2MTk2Njg3Njc=",
    "number": 849,
    "title": "Background building of project solution",
    "user": {
      "login": "martinruefenacht",
      "id": 825164,
      "node_id": "MDQ6VXNlcjgyNTE2NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/825164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinruefenacht",
      "html_url": "https://github.com/martinruefenacht",
      "followers_url": "https://api.github.com/users/martinruefenacht/followers",
      "following_url": "https://api.github.com/users/martinruefenacht/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinruefenacht/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinruefenacht/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinruefenacht/subscriptions",
      "organizations_url": "https://api.github.com/users/martinruefenacht/orgs",
      "repos_url": "https://api.github.com/users/martinruefenacht/repos",
      "events_url": "https://api.github.com/users/martinruefenacht/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinruefenacht/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-17T10:42:40Z",
    "updated_at": "2020-05-17T13:09:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a management based game with the frontend written in GDscript, but the backend written in C#.\r\n\r\nThis applies to any C# utilising project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently this is not a huge issue, but the build time could start getting very annoying since the building forces a panel \"Building project solution\". This is essentially a useless panel and blocks any kind of work in the editor.\r\n\r\n<img width=\"547\" alt=\"screen\" src=\"https://user-images.githubusercontent.com/825164/82142276-0271fc00-9833-11ea-8760-06916edcfdb2.png\">\r\n\r\nThis is related to #241. These panels are (in my opinion) useless and distracting.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMove the building of the project into a background process and show the status (if required at all) to the mono builds panel with a progress bar, such that the editor can be used as normal.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSimply remove the project building panel or have a non-interrupting method of displaying the build progress. The same as #241.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI don't think this is accessible by a plug in.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/849/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/848",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/848/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/848/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/848/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/848",
    "id": 619605188,
    "node_id": "MDU6SXNzdWU2MTk2MDUxODg=",
    "number": 848,
    "title": "RigidBody(2D)s body_entered function to provide collision information",
    "user": {
      "login": "jgrauman0",
      "id": 65253131,
      "node_id": "MDQ6VXNlcjY1MjUzMTMx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65253131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgrauman0",
      "html_url": "https://github.com/jgrauman0",
      "followers_url": "https://api.github.com/users/jgrauman0/followers",
      "following_url": "https://api.github.com/users/jgrauman0/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgrauman0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgrauman0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgrauman0/subscriptions",
      "organizations_url": "https://api.github.com/users/jgrauman0/orgs",
      "repos_url": "https://api.github.com/users/jgrauman0/repos",
      "events_url": "https://api.github.com/users/jgrauman0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgrauman0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-17T04:14:57Z",
    "updated_at": "2020-05-19T00:39:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am designing a multiplayer 2D Space shooter which extensively uses Normal Maps and Lights to achieve 2.5D.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor example, when RigidBody2Ds collide, there is no way (that I've discovered) to figure out the energy of the collision to be able to determine damage done. There is no way to get the speed of a body immediate before and then after the collision to calculate the kinetic energy. It seems like since the physics engine has to update the speed of the bodies, that it should be able to provide signals to send this information. \r\n\r\nFurthermore other information like the collision point and collision normal are difficult to access. In the _on_body_entered() function, I have to do a Physics2DTestMotionResult to do a new motion and see what the collision would be. This often results in slight (or large) errors because I am testing a new motion, not actually getting the collision point and normal for the motion that already happened that caused the signal to be sent. So if the bodies were moving very rapidly, they may have turned direction and the test motion may fail. \r\n```\r\nvar p = Physics2DTestMotionResult.new()\r\nif(test_motion(last_linear/10, false, 1.0, p)):\r\n\tvar normal = p.collision_normal\r\n\tvar point = p.collision_point\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIdeally, the body_entered(Node body) function would simply provide another class with more information about the collision that caused the signal to be sent.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would suggest that the body_entered(Node body) function has another argument that provides additional information about the collision such as body_entered(Node body, CollisionInformation info). That class would have CollisionInformation.collision_normal, CollisionInformation.collision_point, CollisionInformation.collision_velocity_before, CollisionInformation.collision_velocity_after, CollisionInformation.collision_energy, etc. I'm totally fine if another way is made to access the information, but the information about the collision should be about *the collision that caused the signal* to report and include more information than is currently available (like collision energy).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. As far as I'm aware there is no way to access this information.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't believe it would be possible to add this in an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/848/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/847",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/847/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/847/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/847/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/847",
    "id": 619512570,
    "node_id": "MDU6SXNzdWU2MTk1MTI1NzA=",
    "number": 847,
    "title": "Change script icons throughout the editor to be consistent",
    "user": {
      "login": "marcospb19",
      "id": 38900226,
      "node_id": "MDQ6VXNlcjM4OTAwMjI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38900226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcospb19",
      "html_url": "https://github.com/marcospb19",
      "followers_url": "https://api.github.com/users/marcospb19/followers",
      "following_url": "https://api.github.com/users/marcospb19/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions",
      "organizations_url": "https://api.github.com/users/marcospb19/orgs",
      "repos_url": "https://api.github.com/users/marcospb19/repos",
      "events_url": "https://api.github.com/users/marcospb19/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcospb19/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-05-16T16:44:52Z",
    "updated_at": "2020-08-18T03:01:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Problematic:\r\n`Script icons` are _inconsistent_ in the **editor**.\r\n\r\n![image](https://user-images.githubusercontent.com/38900226/82125161-8320f180-977a-11ea-94e2-d63132d30630.png)\r\n\r\nWhen creating a `folder` or `scene` the icons shown match to what is shown in the `FyleSystem Dock`, but the `script` icon _does not_:\r\n\r\n![image](https://user-images.githubusercontent.com/38900226/82125212-d2672200-977a-11ea-9abd-52c8b9deea0f.png)\r\n\r\nAnd in the `Scene Dock` (scene tree):\r\n\r\n![image](https://user-images.githubusercontent.com/38900226/82125254-0a6e6500-977b-11ea-8ccd-9c1ab1ada42e.png)\r\n\r\nEdit: Also in the top of the editor\r\n![image](https://user-images.githubusercontent.com/38900226/82480501-46bb0180-9aaa-11ea-89df-08ce6b5fb324.png)\r\n\r\n---\r\n## Suggestion:\r\nMake the `script` _icon_ unique through the **editor**.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/847/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/846",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/846/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/846/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/846/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/846",
    "id": 619510666,
    "node_id": "MDU6SXNzdWU2MTk1MTA2NjY=",
    "number": 846,
    "title": "Rename the editor \"Scene\" dock to \"SceneTree\"",
    "user": {
      "login": "marcospb19",
      "id": 38900226,
      "node_id": "MDQ6VXNlcjM4OTAwMjI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38900226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcospb19",
      "html_url": "https://github.com/marcospb19",
      "followers_url": "https://api.github.com/users/marcospb19/followers",
      "following_url": "https://api.github.com/users/marcospb19/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions",
      "organizations_url": "https://api.github.com/users/marcospb19/orgs",
      "repos_url": "https://api.github.com/users/marcospb19/repos",
      "events_url": "https://api.github.com/users/marcospb19/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcospb19/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-16T16:34:44Z",
    "updated_at": "2020-08-14T00:37:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI have a small personal projects, it's a 2d arcade space shooter.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe naming of `Scene Dock` to refer to the Scene Tree is misleading mainly counterintuitive.\r\n\r\nSee the engine UI:\r\n\r\n![image](https://user-images.githubusercontent.com/38900226/84442209-8bead300-ac13-11ea-8011-00687d4e6fe0.png)\r\n\r\nIf I had to explain the editor to someone new, I would say that we have scene tree at the left, and the scene contents at the right.\r\n\r\nAt the left we have the hierarchy of the nodes in the tree, at the right we have how the scene is arranged, what is the position of the sprites, where the spaceship guns are.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest that the `Scene` dock should be renamed to `Scene Tree` to better indicate what it represents.\r\n\r\n`Scene Tree` is a more intuitive name to this dock, the file associated with this dock is called `scene_tree_dock.cpp` already!!!!\r\n\r\n(This change requires editing documentation appearances to match it.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAccording to the simplicity of it, I don't think it's necessary.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be worked around with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt cannot be implemented as an addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/840",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/840/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/840/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/840/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/840",
    "id": 618768405,
    "node_id": "MDU6SXNzdWU2MTg3Njg0MDU=",
    "number": 840,
    "title": "Manually select shadow atlas quadrant for SpotLights and OmniLights",
    "user": {
      "login": "hoontee",
      "id": 5272529,
      "node_id": "MDQ6VXNlcjUyNzI1Mjk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5272529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hoontee",
      "html_url": "https://github.com/hoontee",
      "followers_url": "https://api.github.com/users/hoontee/followers",
      "following_url": "https://api.github.com/users/hoontee/following{/other_user}",
      "gists_url": "https://api.github.com/users/hoontee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hoontee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hoontee/subscriptions",
      "organizations_url": "https://api.github.com/users/hoontee/orgs",
      "repos_url": "https://api.github.com/users/hoontee/repos",
      "events_url": "https://api.github.com/users/hoontee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hoontee/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-15T07:44:26Z",
    "updated_at": "2020-10-20T05:58:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm building a 3D horror game with the intent of optimizing for low-end hardware.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, the shadow resolution for SpotLights is too high and for OmniLights, too low. I have no way of balancing them out.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nManually selecting the shadow atlas quadrant for SpotLights and OmniLights will allow me to make them match. After that, I can safely increase the shadow atlas size without worrying about wasted bandwidth on excessively detailed SpotLight shadows.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAtlasQuadrant **shadow_atlas_quadrant** (Light > Shadow > Atlas Quadrant)\r\nenum **AtlasQuadrant**:\r\n**QUADRANT_0** = **0**\r\n**QUADRANT_1** = **1**\r\n**QUADRANT_2** = **2**\r\n**QUADRANT_3** = **3**\r\n**AUTO** = **4** (Editor Default)\r\n\r\nSince DirectionalLight inherits from Light, you will need to add a disclaimer that this property won't work with it. Alternatively, you can split this property into two separate ones for both SpotLight and OmniLight.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis isn't possible through a script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis isn't possible through an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/840/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/839",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/839/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/839/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/839/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/839",
    "id": 618533180,
    "node_id": "MDU6SXNzdWU2MTg1MzMxODA=",
    "number": 839,
    "title": "Adding Z Ordering for Control Nodes and/or for Dialogs",
    "user": {
      "login": "Harutami",
      "id": 58604290,
      "node_id": "MDQ6VXNlcjU4NjA0Mjkw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/58604290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Harutami",
      "html_url": "https://github.com/Harutami",
      "followers_url": "https://api.github.com/users/Harutami/followers",
      "following_url": "https://api.github.com/users/Harutami/following{/other_user}",
      "gists_url": "https://api.github.com/users/Harutami/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Harutami/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Harutami/subscriptions",
      "organizations_url": "https://api.github.com/users/Harutami/orgs",
      "repos_url": "https://api.github.com/users/Harutami/repos",
      "events_url": "https://api.github.com/users/Harutami/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Harutami/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-14T21:01:47Z",
    "updated_at": "2020-11-19T23:44:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** I am working on a PC Simulator with WindowDialogs in it.\r\n\r\n**Describe the problem or limitation you are having in your project:** For all Control nodes you can't set a z order. That's especially problematic with Dialogs. (I've tried it with putting a Node2D as a parent of a dialog and then trying to z order but that didn't work probably because it orders the z axis in the order of the Nodetree).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Adding z ordering into Control nodes or at least for the Dialogs like with Node2D (And maybe a CheckButton class if you want to disable the ordering with the Nodetree).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** I don't know how it could be done because I am not familiar with the Engine, but I think that it could be built like the Node2D.\r\n\r\n(I don't know if this is a good reference)\r\nhttps://github.com/godotengine/godot/blob/master/scene/2d/node_2d.cpp\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I don't think so because it would be an enhancement to the core of control nodes and/or dialogs.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Because I think that adding z ordering for Control Nodes can be helpful in many ways (not only in dialogs) and many people seem to have problems with it.\r\n\r\n\r\nHere is a discussion about it. I've tried it with those possible solutions but it didn't work either way.\r\nhttps://github.com/godotengine/godot/issues/7692\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/839/reactions",
      "total_count": 22,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/838",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/838/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/838/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/838/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/838",
    "id": 618532839,
    "node_id": "MDU6SXNzdWU2MTg1MzI4Mzk=",
    "number": 838,
    "title": "Expose a setter for IsEcho on InputEvent or InputEventAction",
    "user": {
      "login": "cgbeutler",
      "id": 9751923,
      "node_id": "MDQ6VXNlcjk3NTE5MjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9751923?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgbeutler",
      "html_url": "https://github.com/cgbeutler",
      "followers_url": "https://api.github.com/users/cgbeutler/followers",
      "following_url": "https://api.github.com/users/cgbeutler/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgbeutler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgbeutler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgbeutler/subscriptions",
      "organizations_url": "https://api.github.com/users/cgbeutler/orgs",
      "repos_url": "https://api.github.com/users/cgbeutler/repos",
      "events_url": "https://api.github.com/users/cgbeutler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgbeutler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-14T21:01:05Z",
    "updated_at": "2020-05-15T07:14:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlatformer with some custom input and event stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen sending custom Input events, it is currently not possible to set the echo status of an InputEvent. It would be nice to have that value expose a setter, so I can construct custom a InputEventAction that is an echo of a previous one.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis would allow me to forward input to actions as an echo and have all ui and things work the same as they do with standard keyboard input.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe feature would just expose a setter for the echo. The you could make a new Event like so (pardon my C#):\r\n```csharp\r\n    Godot.Input.ParseInputEvent( new InputEventAction{\r\n        Action = \"ui_left\",\r\n        Pressed = value,\r\n        IsEcho = true        // <=== New!\r\n    } );\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI have found no workaround and have been unable to figure one out.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think there is a way to add it as an asset... I could be wrong, but this seems kinda like a core thing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/837",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/837/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/837/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/837/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/837",
    "id": 618358659,
    "node_id": "MDU6SXNzdWU2MTgzNTg2NTk=",
    "number": 837,
    "title": "Add function to stringify GDScript symbols",
    "user": {
      "login": "Sirosky",
      "id": 2752448,
      "node_id": "MDQ6VXNlcjI3NTI0NDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2752448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sirosky",
      "html_url": "https://github.com/Sirosky",
      "followers_url": "https://api.github.com/users/Sirosky/followers",
      "following_url": "https://api.github.com/users/Sirosky/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sirosky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sirosky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sirosky/subscriptions",
      "organizations_url": "https://api.github.com/users/Sirosky/orgs",
      "repos_url": "https://api.github.com/users/Sirosky/repos",
      "events_url": "https://api.github.com/users/Sirosky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sirosky/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-05-14T16:15:22Z",
    "updated_at": "2020-06-02T19:43:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am creating a tooltip for debugging purposes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no way to stringify GDScript symbols. For example, I would like the tooltip to display all of `muh_array = [1,2,3]`. It's easy enough to display the contents of the array itself, but _not_ the name of the array. You have to do it manually.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd some global function to use reflection and fetch the name of a variable. It would eliminate the need to pass on the name as a string manually.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUsing muh_array is an example:\r\n\r\n`print(muh_array.get_name())`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, just one extra line haha.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis touches upon the core of how GDScript works, and could be a very useful debugging option.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/837/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/836",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/836/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/836/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/836/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/836",
    "id": 617811108,
    "node_id": "MDU6SXNzdWU2MTc4MTExMDg=",
    "number": 836,
    "title": "Add a sort option to sort by date or size in FileDialog/EditorFileDialog",
    "user": {
      "login": "awalone995",
      "id": 26692947,
      "node_id": "MDQ6VXNlcjI2NjkyOTQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/26692947?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awalone995",
      "html_url": "https://github.com/awalone995",
      "followers_url": "https://api.github.com/users/awalone995/followers",
      "following_url": "https://api.github.com/users/awalone995/following{/other_user}",
      "gists_url": "https://api.github.com/users/awalone995/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awalone995/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awalone995/subscriptions",
      "organizations_url": "https://api.github.com/users/awalone995/orgs",
      "repos_url": "https://api.github.com/users/awalone995/repos",
      "events_url": "https://api.github.com/users/awalone995/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awalone995/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-13T23:10:42Z",
    "updated_at": "2020-05-14T07:26:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ni've just downloaded the engine\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ni mean i was even shocked at first \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\na simple dropdown like \"sort by:: name|date|size\" menu in the file//resource selection window will do\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\ni'm not really into how the editor works but there's a lot of free space in that window \r\nthere's a built-in thing for dropdown menus already right\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nthat's such a basic feature i can't even imagine how hilarious it would be to see it as an asset",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/836/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/835",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/835/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/835/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/835/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/835",
    "id": 617681141,
    "node_id": "MDU6SXNzdWU2MTc2ODExNDE=",
    "number": 835,
    "title": "Add texture inputs for clouds, moon, starfields to PhysicalSkyMaterial",
    "user": {
      "login": "Lexpartizan",
      "id": 48552343,
      "node_id": "MDQ6VXNlcjQ4NTUyMzQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48552343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexpartizan",
      "html_url": "https://github.com/Lexpartizan",
      "followers_url": "https://api.github.com/users/Lexpartizan/followers",
      "following_url": "https://api.github.com/users/Lexpartizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexpartizan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexpartizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexpartizan/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexpartizan/orgs",
      "repos_url": "https://api.github.com/users/Lexpartizan/repos",
      "events_url": "https://api.github.com/users/Lexpartizan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexpartizan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 26,
    "created_at": "2020-05-13T18:59:56Z",
    "updated_at": "2020-07-12T21:25:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI'm working on a project https://github.com/Lexpartizan/Godot_sky_shader\r\nthis is shader sky with day\\night cycle.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\ni write own shader. it is difficult.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nPhysical Sky Material is an implementation of the atmospheric scattering algorithm and allows you to implement physically correct sky colors depending on the position of the Sun, that is, the time of day. That is, it is necessary for the day and night cycle. However, for the sky, one color is not enough, there are present clouds in the sky, and at night there are stars. Therefore, in order for this material to have practical value, you need to add inputs for the textures of clouds, a star field, and possibly the moon(its dificult, becouse panorama). They can be either static or outputs from viewports with other shaders working. To avoid unnecessary texture calls due to performance penalties, you might want to use a checkbox that allows you to use textures.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```glsl\r\ncld.rgb *=attenuation; //lighten the clouds depending on the height of the Sun\r\nsky = mix(sky, cld.rgb/(0.0001+cld.a), cld.a); //This code mixing clouds and sky without black borders\r\n// if texture empty, cld.a = 0.0, so the result of the operation will be unchanged, sky.\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nTo do this on their own, the user needs to be well versed in shader programming. Any novice can specify the texture with clouds. This useful.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause the Physical Sky Material is already in Godot. But there's no such thing as an empty sky, so it's less useful right now for novice. \r\nYou can use it as a Shader for atmospheric scattering as base and add new functions yourself, but this requires qualification. My proposal will significantly expand the possibilities for creating a realistic sky for beginners who are not familiar with shader programming.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/835/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/833",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/833/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/833/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/833/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/833",
    "id": 617470806,
    "node_id": "MDU6SXNzdWU2MTc0NzA4MDY=",
    "number": 833,
    "title": "Can AnimationTree Track Make Use of Arbitrary Nodes Instead of Just Bones?",
    "user": {
      "login": "Lucrecious",
      "id": 4584511,
      "node_id": "MDQ6VXNlcjQ1ODQ1MTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4584511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lucrecious",
      "html_url": "https://github.com/Lucrecious",
      "followers_url": "https://api.github.com/users/Lucrecious/followers",
      "following_url": "https://api.github.com/users/Lucrecious/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lucrecious/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lucrecious/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lucrecious/subscriptions",
      "organizations_url": "https://api.github.com/users/Lucrecious/orgs",
      "repos_url": "https://api.github.com/users/Lucrecious/repos",
      "events_url": "https://api.github.com/users/Lucrecious/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lucrecious/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-13T13:55:41Z",
    "updated_at": "2020-05-13T14:01:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a 2D pixel animation project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to track the transformation of root node so I can match the running steps to the floor. With the AnimationTree, there's a way to do this with bones but not with regular nodes it seems.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think It'd be an improvement if the \"Track\" property allowed for regular nodes with transformations and just simply ignored them, but allow the coder to access that delta.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNothing interface wise needs to change just the \"Track\" property on the AnimationTree would also work on regular nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it's possible to do this already with the AnimationPlayer, but it seems hacky at best. There's no good way to \"ignore\" tracks, if I disable it I lose the motion information, but if I enable it, the actual root node moves. The only way I can think of doing this in a \"nice\" way, would be to preprocess the frames from the transformation portions of the animation, disable the track and calculate the delta myself by checking the frames of the current animation. However, I don't think this is suitable solution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis just simply expands the nodes that you can \"track\" transformations from. I think there are tons and tons of uses for this that do not involve using bones specifically.\r\n\r\nAnother example in my game is that when the character swings his sword, he takes a step forward. It'd be nice to track that motion with the AnimationTree. \r\n\r\nWhen my player gets hurt, a designed knockback instead of an arbitrary \"force\" applied would be nice.\r\n\r\nI mean, there are just tons of animations that could benefit from this since a lot of them would look nicer if they matched motion.\r\n\r\nI think this tracking motion feature in Godot is really awesome, and I'd just like to use it my project is all.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/832",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/832/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/832/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/832/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/832",
    "id": 617346798,
    "node_id": "MDU6SXNzdWU2MTczNDY3OTg=",
    "number": 832,
    "title": "Mechanism for late signal connectors",
    "user": {
      "login": "RandomShaper",
      "id": 11797174,
      "node_id": "MDQ6VXNlcjExNzk3MTc0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11797174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomShaper",
      "html_url": "https://github.com/RandomShaper",
      "followers_url": "https://api.github.com/users/RandomShaper/followers",
      "following_url": "https://api.github.com/users/RandomShaper/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandomShaper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandomShaper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandomShaper/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomShaper/orgs",
      "repos_url": "https://api.github.com/users/RandomShaper/repos",
      "events_url": "https://api.github.com/users/RandomShaper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandomShaper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-13T10:50:19Z",
    "updated_at": "2020-05-19T07:59:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMid/big sized 3D networked application.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe have added an implementation of futures to the framework our project runs on top of. You are expected to use them like this:\r\n```\r\nvar future = yield(do_something_asynchronous(), \"finished\")\r\n```\r\n\r\nThe problem is that, depending on multiple factors, the result may be immediately available. Therefore, the signal may be emitted before `yield()` has the chance to connect to it. The result is that the wait never finishes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhat we need is a way to have late connectors to a signal receiving it.\r\n\r\nThere are several options to support this (only one of them would need to be implemented).\r\n\r\n## a)\r\n`Object` gets a new callback: `_signal_target_connected(signal: String, target: Object, method: String) -> void`.\r\n\r\nThis is called on the any `Object` that declares signals whenever any other `Object` connects to one of those.\r\n\r\nThe signal emitter can therefore handle this callback to call the target method if it needs to do so. In our case, that would be calling the target if the signal has been already emitted so the target object can get it anyway.\r\n\r\n## b)\r\n`Object` supports a new notification, `NOTIFICATION_SIGNAL_TARGET_CONNECTED`.\r\n\r\nAn `Object` that declares signals get it whenever any other `Object` connects to one of those.\r\n\r\nTo base the logic of handling it in the details of the specific signals and targets, some methods already existing in `Object` can be used. This is less convenient than approach **a)**, but may be seen as way to get the same in a way that is less intrusive to the core code base.\r\n\r\nFor the case of late connector, the existing connections would need to be tracked to check what's the newly added connection and call the target if conditions met. As said, way less convenient.\r\n\r\n## c)\r\nSignals get a new feature: replayability. `Object` API gets extended with these methods:\r\n- `set_signal_replay_enabled(signal: String, enabled: bool) -> void`: Enables/disables replay for the specified signal. If enabled, any `Object` that connects to it will get in a row all the calls corresponding to all the emission history. If it's disabled, the stored emission history is cleared.\r\n- `clear_signal_replay_history(signal: String) -> void`: Clears the stored emission history for the specified signal so newly connected `Object`s only get called about future emissions. New emissions will keep being stored in the history, as long as replay is enabled.\r\n\r\nIt's easy to see how this is exactly a way to allow late connectors and how that helps in our use case of futures.\r\n\r\nThis option is quite like the replay operator in `Observable`s, present in other languages.\r\n\r\nFurthermore, this approach can be implemented by script on top of **a)** or **b)**, but if it's thought of as the common use case, having it builtin in the engine can be the way to go.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI think enough detail has been given in the previous reply. If I'm wrong, please ask for more.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nFor something like this --having an implementation of futures in Godot 3.x, before any improvement comes to GDScript in 4.0 adding builtin support for async functions, or something similar-- any project that wants to benefit from it would need this change.\r\n\r\nWe considered doing a deferred call to emit the signal, but that would only cover the case when `yield()` happens in the same idle or physics frame. The solution needed to make this solid needs something better than that, to guarantee the result from the future can be caught at any later execution point.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo, because, as explained above, this needs to be implemented as an addition to the mechanics of signals.\r\n\r\n---\r\n**This disquisition is generously donated by IMVU.**",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/832/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/831",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/831/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/831/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/831/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/831",
    "id": 617247892,
    "node_id": "MDU6SXNzdWU2MTcyNDc4OTI=",
    "number": 831,
    "title": "Add support for global plugins/universal addons",
    "user": {
      "login": "mrjustaguy",
      "id": 50302479,
      "node_id": "MDQ6VXNlcjUwMzAyNDc5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50302479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjustaguy",
      "html_url": "https://github.com/mrjustaguy",
      "followers_url": "https://api.github.com/users/mrjustaguy/followers",
      "following_url": "https://api.github.com/users/mrjustaguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjustaguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjustaguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjustaguy/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjustaguy/orgs",
      "repos_url": "https://api.github.com/users/mrjustaguy/repos",
      "events_url": "https://api.github.com/users/mrjustaguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjustaguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-05-13T08:24:35Z",
    "updated_at": "2020-12-26T04:48:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nFor this the specific project doesn't matter, what matters is that I'm using the same addon for several of my projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n I see it useful for people (like me) who use a ton of the same addons across different projects because it would speed up things if it auto loaded the addons from some directory i set for the engine (much like you set the engines default project directory)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be a feature that would allow for automatic addon placement in a new project, thus speeding things up for people who use a ton of addons and make a ton of projects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea is simple, the user can make a Directory that you label as the universal addon directory in the editor settings (much like you set a directory for default project location), so for every new project when it is created the editor will automatically put the addons (or it could ask which addons you want to put from the directory in when the project is created)\r\n\r\nthe pseudocode would look something like:\r\n1. Grab editor setting \"Universal addon\" (or some such name)\r\n2. Gets the new project directory\r\n2. (Upon project creation, optional) popup a list of addons from the directory that can be toggled on/off\r\n3. (in case of 2 implementation) When ok is pressed copy all of the addons toggled on\r\n4. Grabs the addons, places them in the new project directory as an addon\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around by making a directory where you store addons and you can just copy them over to the project, so it's not that big of a deal, this would just shave off a few steps making this quicker.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it's an improvement to the add-on/asset library and one couldn't make an add-on for Godot that would do this (I'm fairly sure atleast)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/831/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/830",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/830/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/830/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/830/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/830",
    "id": 617140864,
    "node_id": "MDU6SXNzdWU2MTcxNDA4NjQ=",
    "number": 830,
    "title": "Allow for linking from GDScript to functions in C-compatible binary objects, as Resources",
    "user": {
      "login": "MichaelMacha",
      "id": 7585255,
      "node_id": "MDQ6VXNlcjc1ODUyNTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7585255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MichaelMacha",
      "html_url": "https://github.com/MichaelMacha",
      "followers_url": "https://api.github.com/users/MichaelMacha/followers",
      "following_url": "https://api.github.com/users/MichaelMacha/following{/other_user}",
      "gists_url": "https://api.github.com/users/MichaelMacha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MichaelMacha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MichaelMacha/subscriptions",
      "organizations_url": "https://api.github.com/users/MichaelMacha/orgs",
      "repos_url": "https://api.github.com/users/MichaelMacha/repos",
      "events_url": "https://api.github.com/users/MichaelMacha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MichaelMacha/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-05-13T04:55:45Z",
    "updated_at": "2020-08-07T06:54:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am currently working on a web-based metroidvania with a fairly complicated dynamic map.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGDScript is great for basic code, but tends to fall short for broader tasks. I recently went through a number of issues when attempting to subclass my map grid to use a mask; and finding that alterations had to be made to my original Grid class to get it to work. This would be OK for simple things—Bethesda's Papyrus isn't much better, nor is Lua or Squirrel—but I found myself wishing I could simply build this specific feature in another language and link it in…\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen I use D, I can link to functions declared in any C-compatible assembly. This is very helpful when I need to interface with C, C++, or any other C-compatible language and don't want to rewrite the code or build a massive proxy for it. (I build onto my home LAN server like this all the time, it's pretty easy.)\r\n\r\nIt would be great if GDScript could also call functions from compiled, but not linked, objects (the *.o or *.obj files spat out before the executable is) that are C-compatible. They could be loaded as a type of built-in Resource. As GDScript is an interpreted language, not an actual machine binary, I imagine this would simply involve an internal method to find the function by name and pass data to it. This would expand Godot's wonderful language-agnosticism quite a bit, and would allow for many new avenues of improvement.\r\n\r\nAdditionally, when working on an algorithm that requires, or benefits from, a more full-featured language, virtually any systems language could be used. Moreover, occasions when the interpreted-language slowdown becomes a critical problem could become optimized with it; though I know this isn't common. (This could also, in theory, occur for desktop game development.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSuppose we had a basic C program. I'll borrow one from Dlang's documentation.\r\n\r\n```\r\n#include <stdio.h>\r\nvoid say_hello(void) \r\n{\r\n    puts(\"Hello from C!\");\r\n}\r\n```\r\n\r\nCompile this to an object file; we'll call it `hello.o`. Store it in a Godot project as a resource.\r\n\r\nIn GDScript, load this object as a Resource subclass.\r\n\r\n```\r\nvar hello = preload(\"res://objects/hello.o\")\r\n```\r\n\r\nCall the function with an internal method for finding functions by name. Something like this.\r\n\r\n```\r\nhello.get_function(\"say_hello(void)\").call()\r\n```\r\n\r\nAnd accordingly, we would get `puts(\"Hello from C!\")` executed and printed out on Godot's (or the game's) stdout, if it has one.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI have my doubts. Godot has a number of reasonable restrictions against making system calls from WebAssembly, as do modern browsers. For desktop stuff, it could maybe be done with some piping but I'm not convinced it wouldn't still require more than a few lines and potentially extra dependencies, along with testing on each target platform. For WebAssembly, it may actually require a web request (like AJAX did), which opens up all kinds of complications. If these objects could be treated as resources, code-as-data-style, it would get around all of this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf it can be made as an add-on asset, that would work for my purposes, as long as it could successfully be integrated with an HTML5 game. My vision is that in the end, any action of the linked object would appear to be a native decision by the game, including any permissions it might need.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/830/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/829",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/829/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/829/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/829/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/829",
    "id": 616926828,
    "node_id": "MDU6SXNzdWU2MTY5MjY4Mjg=",
    "number": 829,
    "title": "Animate CollisionPolygon2D (Generate CollisionPolygon2D array from Spritesheet)",
    "user": {
      "login": "jgrauman0",
      "id": 65253131,
      "node_id": "MDQ6VXNlcjY1MjUzMTMx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65253131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgrauman0",
      "html_url": "https://github.com/jgrauman0",
      "followers_url": "https://api.github.com/users/jgrauman0/followers",
      "following_url": "https://api.github.com/users/jgrauman0/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgrauman0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgrauman0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgrauman0/subscriptions",
      "organizations_url": "https://api.github.com/users/jgrauman0/orgs",
      "repos_url": "https://api.github.com/users/jgrauman0/repos",
      "events_url": "https://api.github.com/users/jgrauman0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgrauman0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-12T20:08:54Z",
    "updated_at": "2020-06-03T19:54:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am designing a multiplayer 2D Space shooter which extensively uses Normal Maps and Lights to achieve 2.5D.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have several RigidBody2D items (like asteroids) that are animated using a Sprite (with  Spritesheets for the texture and normal maps) and an AnimationPlayer to change the frames. However, I need the CollisionPollygon2D to be animated along with the Sprite so that items will collide with the asteroid properly. I need a way to generate the PoolVector2Array of the CollisionPolygon2D for each frame of the animation.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently, Godot can generate a CollisionPolygon2D for a Sprite, but not for a Spritesheet. I suggest that the editor allows generating an array of PoolVector2Arrays, one for each frame of the Spritesheet. Then when the frame changes, Godot can change the the CollisionPolygon2D data as well.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWith my proposal, no changes would be necessary in a client's code, only to the editor. Currently when you select \"Create CollisionPolygon2D sibling\" under the Sprite menu, when the Sprite is a Spritesheet you simply get an error. I propose that since Godot knows that this sprite is a spritesheet, that it simply generates a whole array of CollisionPolygon2D arrays, one for each frame and handles changing the CollisionPolygon2D data when the frame changes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a very difficult feature to implement without changing the Godot Engine. First you would need an external program to generate the polygon data from a Spritesheet. Then, you would have to save all this data into code, embed this code into your program, and write code to change the CollisionPolygon2D data with each frame. You could no longer use the AnimationPlayer, but would have to animate everything yourself from code. I'm unsure how the physics Engine would react to changing the CollisionPolygon2D data, so other changes to the engine *may* be necessary.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this could be a very useful feature in all kinds of 2D games. Being able to animate 2D sprites and have the animations mimic physical changes allows all kinds of new interactions in a game. Imagine a spaceship that can animate opening its wings. It would be great if while the animation is playing the extent of the object is correct in the physics engine. Almost any kind of game that animates 2D sprites will benefit from having the correct CollisionPolygon2D.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/829/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/827",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/827/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/827/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/827/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/827",
    "id": 616753022,
    "node_id": "MDU6SXNzdWU2MTY3NTMwMjI=",
    "number": 827,
    "title": "Store current editor feature profile in project.godot and automatically set it",
    "user": {
      "login": "arkology",
      "id": 43543909,
      "node_id": "MDQ6VXNlcjQzNTQzOTA5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/43543909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arkology",
      "html_url": "https://github.com/arkology",
      "followers_url": "https://api.github.com/users/arkology/followers",
      "following_url": "https://api.github.com/users/arkology/following{/other_user}",
      "gists_url": "https://api.github.com/users/arkology/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arkology/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arkology/subscriptions",
      "organizations_url": "https://api.github.com/users/arkology/orgs",
      "repos_url": "https://api.github.com/users/arkology/repos",
      "events_url": "https://api.github.com/users/arkology/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arkology/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-12T15:32:32Z",
    "updated_at": "2020-05-12T20:27:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMultiple projects at the same time (2d/3d/plugin).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrenty it's annoying to switch the current feature profile when opening another project.\r\nFor example, I disable all 3d stuff when work with 2d only. And when I switch to another project with 3d stuff, I have to reset current profile. When I return to 2d project, I set 2d profile back. It's not very convenient and spends a little time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nPer-project editor features profile (not new peature profile for each project)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nStore current feature profile in project.godot and automatically set editor profile to it if profile exists in Godot profiles folder. If can not find profile - use default profile.\r\nI'm 100% sure this will be great continuation of current editor feature profiles system.\r\nAlso there's no need to do new setting in project settings for this feature to be optional - editor will use all features as current default state.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n> If this enhancement will not be used often\r\n\r\nAs often as custom editor feature profiles\r\n> can it be worked around with a few lines of script\r\n\r\nAs I know there's no API for it in GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf it will work as i described - it is fine to have this feature as a plugin... but Godot doesn't have global plugin system right now. Anyway it's much more convenient being core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/827/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/826",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/826/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/826/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/826/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/826",
    "id": 616209280,
    "node_id": "MDU6SXNzdWU2MTYyMDkyODA=",
    "number": 826,
    "title": "Add an universal Text node to supersede Label and RichTextLabel",
    "user": {
      "login": "rdmtt",
      "id": 49587900,
      "node_id": "MDQ6VXNlcjQ5NTg3OTAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/49587900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdmtt",
      "html_url": "https://github.com/rdmtt",
      "followers_url": "https://api.github.com/users/rdmtt/followers",
      "following_url": "https://api.github.com/users/rdmtt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdmtt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdmtt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdmtt/subscriptions",
      "organizations_url": "https://api.github.com/users/rdmtt/orgs",
      "repos_url": "https://api.github.com/users/rdmtt/repos",
      "events_url": "https://api.github.com/users/rdmtt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdmtt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-11T21:45:23Z",
    "updated_at": "2021-01-07T23:51:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA story rich, dialogue heavy RPG game / framework.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n- _RichTextLabel_ has bbcode and custom effects but doesn't have auto-wrap option, ignores grow property, does not resize it's parent container, etc.\r\n\r\n- _Label_ can do all above things but does not support bbcode formatting and effects.\r\n\r\nBoth those nodes lack something. Moreover, I can see how they might be really confusing for newcomers, as there is no explanation why Godot needs two nodes for essentially the same job - showing text on screen.\r\n\r\nhttps://i.imgur.com/UfZZK2O.png\r\n![image](https://user-images.githubusercontent.com/8281454/81620151-2b0a8800-9426-11ea-9e34-71a30e57d95c.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe need one, universal and consistent node for showing text on the screen.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCodes for Label and RichTextLabel should be merged under a new Control node - simply named **_Text_**.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n1. I think showing gui text is something developers do a lot.\r\n2. My workaroud: I made a custom text node (.tscn) that consists of Label as the scene root and RichTextLabel as the child. In the root I add clean text (without bbcode) to let the node figure out it's margins, size, etc. and in the child I add the whole text (with bbcode). Then I make Label invisible (self modulate alpha set to 0). That way I can have Label's margins, grow directions and auto-wrap, and RichTextLabels' bbcode.\r\nThis sort of works. But it's clearly too much fiddling for such a simple thing as _showing text on the screen_.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's not just about adding the Text node but also cleaning up nodes. The engine will be easier to use and **code easier to maintain** with this new node replacing the old ones.\r\n\r\n**Additonal notes:**\r\nThere is a big difference between the amount of code lines in Label.cpp and RichTextLabel.ccp (725 vs 3005) which leads me to believe that there must be a good reason why these nodes were created separately. But I still think that combining these nodes would simply lead to less confusion and more understanding from newcomers.\r\nAlso, there are things like, the same properties are called differently in label and richtextlabel: \r\nhttps://i.imgur.com/stvDyS2.png\r\n![image](https://user-images.githubusercontent.com/8281454/81620168-3198ff80-9426-11ea-9c03-c433f7ba12d2.png)\r\n\r\nThey are overall so confusing.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/826/reactions",
      "total_count": 30,
      "+1": 24,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/825",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/825/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/825/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/825/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/825",
    "id": 616201345,
    "node_id": "MDU6SXNzdWU2MTYyMDEzNDU=",
    "number": 825,
    "title": "Node2d and Node3d simulate_at function",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-11T21:29:26Z",
    "updated_at": "2020-05-25T22:22:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to simulate physics, collision, graphics and sound at the edge of the screens.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nplease add a simulate_at function for node2d and node3d\r\n\r\nbasically it would be a function that would simulate or copy the node to a location when called but only for that frame.\r\n\r\nit would basically be a way to update it at another location without moving it\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc _process():\r\n   var sprite    = $Sprite;\r\n\r\n   #Draws sprite at these locations\r\n   sprite.simulate_at(position.x-get_screen_width(), position.y-get_screen_height())\r\n   sprite.simulate_at(position.x,                    position.y-get_screen_height())\r\n   sprite.simulate_at(position.x+get_screen_width(), position.y-get_screen_height())\r\n   sprite.simulate_at(position.x-get_screen_width(), position.y)\r\n   sprite.simulate_at(position.x+get_screen_width(), position.y)\r\n   sprite.simulate_at(position.x-get_screen_width(), position.y+get_screen_height())\r\n   sprite.simulate_at(position.x,                    position.y+get_screen_height())\r\n   sprite.simulate_at(position.x+get_screen_width(), position.y+get_screen_height())\r\n\r\n   #Or\r\n\r\n   #Simulate whole instance\r\n   simulate_at(position.x-get_screen_width(), position.y-get_screen_height())\r\n   simulate_at(position.x,                    position.y-get_screen_height())\r\n   simulate_at(position.x+get_screen_width(), position.y-get_screen_height())\r\n   simulate_at(position.x-get_screen_width(), position.y)\r\n   simulate_at(position.x+get_screen_width(), position.y)\r\n   simulate_at(position.x-get_screen_width(), position.y+get_screen_height())\r\n   simulate_at(position.x,                    position.y+get_screen_height())\r\n   simulate_at(position.x+get_screen_width(), position.y+get_screen_height())\r\n\r\n```\r\n\r\nnote the simulation would be tried to the object you simulate so you could simulate rigid body collisions\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe would be used in any sort of seamless wrapping game and I don't think it can be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits useful for simulating nodes without duplicating them",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/823",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/823/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/823/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/823/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/823",
    "id": 616039509,
    "node_id": "MDU6SXNzdWU2MTYwMzk1MDk=",
    "number": 823,
    "title": "Add offset for TextureProgress progress texture",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-11T17:07:37Z",
    "updated_at": "2020-08-04T03:43:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D mobile game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSo, I have 3 textures like this:\r\n![previu](https://user-images.githubusercontent.com/2223172/81588513-ed234a80-93b8-11ea-9d15-10bed21b0a34.png)\r\nI'm using them for TextureProgress node. First and third texture have a size of 544x198, the middle one is 362x70. Here's what it looks like when I put it in the node:\r\n![badstuff](https://cdn.discordapp.com/attachments/477544613511692358/709448956488187975/unknown.png)\r\nAs you can see, the `progress` texture is aligned in the corner and there's no way to center it. I can't make it the same size as other textures, because the transparent pixels are counted in progress to, so it would make the bar inaccurate.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be a way to offset the `progress` texture. Other textures can easily be aligned in image editing software, but the progress can't, because it needs to contain solely the part that will show the progress. I've ran into this problem multiple times and it makes it impossible to make fancy TextureProgress nodes. Offset for progress texture would fix this.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the `Texture` section of TextureProgress, there could be an additional Vector2 property called `progress_offset`, which would move the progress texture from the corner.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis can be worked around by using other nodes as over and under textures, but it kills the purpose of TextureProgress. IMO this is a common need for this node.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about core node.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/823/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/822",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/822/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/822/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/822/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/822",
    "id": 615900140,
    "node_id": "MDU6SXNzdWU2MTU5MDAxNDA=",
    "number": 822,
    "title": "Add alpha support for ETC1 textures",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-11T13:48:51Z",
    "updated_at": "2020-11-22T16:33:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMobile game, targeting GL ES 2.0 devices\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe ETC1 format does not support alpha channels in textures. Currently the only way around this in Godot (whilst maintaining ES 2 support) is to use a a non VRAM compression format e.g. Godot's Lossy setting. This gives the packed asset a smaller file size, but does nothing for the VRAM needed at runtime. Using any format other than ETC1 becomes prohibitive if you have a moderately large amount of assets with transparency and are targeting mid/low end mobile devices.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere are a number of techniques that make it possible to use ETC1 w/ an alpha channel. Including:\r\n\r\n1. Designating a specific color (such as bright pink) to represent fully transparent. This is the simplest to implement and may be useful to get some initial support out the door quickly. This would just need an editor setting and no additional tooling to extract alpha channel.\r\n2. Generating alpha channel data in an additional texture and combining them (a good reference can be found at https://web.archive.org/web/20160624152133/http://malideveloper.arm.com/resources/sample-code/etcv1-texture-compression-and-alpha-channels/). This is the more flexible solution.\r\n\r\nBoth methods imply using an additional shader to apply the channel. Not all textures would need this, so it would make sense to either have this as an additional import option, or even automatic if ETC1 is selected and an alpha channel is in the imported texture.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCovered above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou could manually extract an alpha channel from your images (there are tools to do this), and apply a shader to every texture to implement the channel. It would be pretty unfriendly to manage this (and a massive pain to re-extract the alpha channels on any image change). It's a nasty combination of more code and more tooling.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nES 2.0 support is here to stay, and forms a core part of Godot's mobile offering (along with Vulkan when ES 3 support is eventually dropped). Working with textures is an integral part of any game engine, and to me it makes sense to have equal texture support on all target platforms.\r\n\r\nIt is not clear to me how many mobile games are being developed in Godot at the moment - though we clearly have aspirations of increasing that number, and better support is needed if we are to continue to do that. \r\n\r\nAs a reference point, Unity decided to implement this as a core part of their offering.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/820",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/820/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/820/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/820/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/820",
    "id": 615487737,
    "node_id": "MDU6SXNzdWU2MTU0ODc3Mzc=",
    "number": 820,
    "title": "Add support for immutable/one-time assignable variables",
    "user": {
      "login": "Wavesonics",
      "id": 406473,
      "node_id": "MDQ6VXNlcjQwNjQ3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/406473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wavesonics",
      "html_url": "https://github.com/Wavesonics",
      "followers_url": "https://api.github.com/users/Wavesonics/followers",
      "following_url": "https://api.github.com/users/Wavesonics/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wavesonics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wavesonics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wavesonics/subscriptions",
      "organizations_url": "https://api.github.com/users/Wavesonics/orgs",
      "repos_url": "https://api.github.com/users/Wavesonics/repos",
      "events_url": "https://api.github.com/users/Wavesonics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wavesonics/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-05-10T22:12:46Z",
    "updated_at": "2020-07-11T13:18:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nvideo game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't enforce a varriable only being assigned once\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding a new keyword to GDScript: `val` in addition to the existing `var` for declaring variables. This would force the variable to only be assigned once.\r\n\r\nKotlin, ECMA6, and Swift all have a feature similar to this.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\ndeclaring a variable as `val` will throw a error if the variable is assigned more than once. It allows for a few nice conventions:\r\n1) It allows for a sort of scoped constant (currently constants can only be global)\r\n2) It prevents accidental re-assignments for varriables that weren't intended to change. It makes maintaining the code less error prone.\r\n3) It can enforce a variable only gets assigned once in an if/else chain or match statement:\r\n```gdscript\r\n# This is valid\r\nval x: int\r\nif foo > 2:\r\n    x = 42\r\nelse:\r\n   x = -5\r\n```\r\n\r\n```gdscript\r\n# This is valid\r\nval x := 42\r\n```\r\n```gdscript\r\n# This is NOT valid\r\nval x: int = 42\r\nx = -5\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCan't be worked around\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan't, it's a language level feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/820/reactions",
      "total_count": 10,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/817",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/817/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/817/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/817/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/817",
    "id": 615377930,
    "node_id": "MDU6SXNzdWU2MTUzNzc5MzA=",
    "number": 817,
    "title": "Very unintuitive editor for LineShape2D",
    "user": {
      "login": "MCrafterzz",
      "id": 19669673,
      "node_id": "MDQ6VXNlcjE5NjY5Njcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19669673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCrafterzz",
      "html_url": "https://github.com/MCrafterzz",
      "followers_url": "https://api.github.com/users/MCrafterzz/followers",
      "following_url": "https://api.github.com/users/MCrafterzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCrafterzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCrafterzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCrafterzz/subscriptions",
      "organizations_url": "https://api.github.com/users/MCrafterzz/orgs",
      "repos_url": "https://api.github.com/users/MCrafterzz/repos",
      "events_url": "https://api.github.com/users/MCrafterzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCrafterzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-05-10T12:06:30Z",
    "updated_at": "2020-05-21T16:50:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "![image](https://user-images.githubusercontent.com/19669673/81498721-dac8e400-92c6-11ea-83e7-7e1af7b2a079.png)\r\n\r\nFrom my experience being new to this component it does feel very unintuitive to use the handles. First of all for all other shapes the blue area represents the collision area so this make it look like the collision is a T shape which I guess it's not. Secondly you can move the line away from the origin and rotate it but there seams to be no way to change the length of it as the handles normalize the normal resulting in you having to use the inspector to change the line length. So what do I propose?\r\n\r\n1. Use something else than a blue area for the normal to make it clear what's part of the collision shape and what's not.\r\n2. Make it possible to use the rotation dot to also change the length of the line.\r\n\r\nLet me know your thoughts! And depending on what you say I'll send a pr.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/816",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/816/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/816/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/816/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/816",
    "id": 615376404,
    "node_id": "MDU6SXNzdWU2MTUzNzY0MDQ=",
    "number": 816,
    "title": "Rename WorldMarginShape3D to InfinitePlane3D",
    "user": {
      "login": "MCrafterzz",
      "id": 19669673,
      "node_id": "MDQ6VXNlcjE5NjY5Njcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19669673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCrafterzz",
      "html_url": "https://github.com/MCrafterzz",
      "followers_url": "https://api.github.com/users/MCrafterzz/followers",
      "following_url": "https://api.github.com/users/MCrafterzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCrafterzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCrafterzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCrafterzz/subscriptions",
      "organizations_url": "https://api.github.com/users/MCrafterzz/orgs",
      "repos_url": "https://api.github.com/users/MCrafterzz/repos",
      "events_url": "https://api.github.com/users/MCrafterzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCrafterzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-10T11:57:43Z",
    "updated_at": "2020-07-03T10:24:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The name makes absolutely no sence to me, can someone describe why it's named as it is. I could send a pr to change it but want to ask first.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/816/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/813",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/813/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/813/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/813/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/813",
    "id": 615297764,
    "node_id": "MDU6SXNzdWU2MTUyOTc3NjQ=",
    "number": 813,
    "title": "Add support for WebRTC MediaStreams for real-time voice chat",
    "user": {
      "login": "Wavesonics",
      "id": 406473,
      "node_id": "MDQ6VXNlcjQwNjQ3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/406473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wavesonics",
      "html_url": "https://github.com/Wavesonics",
      "followers_url": "https://api.github.com/users/Wavesonics/followers",
      "following_url": "https://api.github.com/users/Wavesonics/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wavesonics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wavesonics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wavesonics/subscriptions",
      "organizations_url": "https://api.github.com/users/Wavesonics/orgs",
      "repos_url": "https://api.github.com/users/Wavesonics/repos",
      "events_url": "https://api.github.com/users/Wavesonics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wavesonics/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-10T02:02:38Z",
    "updated_at": "2020-12-11T10:01:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nRealtime Voice chat for multiplayer using WebRTC\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWebRTC is an obvious choice for implementing voice chat inside of Godot, but the current WebRTC implementation is missing one key feature: Media Steams\r\n\r\nWithout them doing a true real-time voice chat would not be possible with WebRTC\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nFrom Faless over on the `webrtc-native` repository:\r\n> some form of WebRTCMediaStream/WebRTCMediaSteamTrack class will have to be added to core. Then appropriate implementation for JS and GDNative interface will have to be added in modules/webrtc, a couple of signals and method will have to be added to RTCPeerConnection and finally the GDNative plugin in this repository will have to be updated.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFaless explains what would be required better than I can:\r\nhttps://github.com/godotengine/webrtc-native/issues/13#issuecomment-578773968\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot possible.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot possible to do as a library as far as I can figure.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/813/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/812",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/812/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/812/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/812/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/812",
    "id": 615043955,
    "node_id": "MDU6SXNzdWU2MTUwNDM5NTU=",
    "number": 812,
    "title": "Add margins and padding to Control nodes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 49,
    "created_at": "2020-05-08T23:59:18Z",
    "updated_at": "2020-10-30T09:09:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nSpace ship game that requires gamepad and keyboard input.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI keep running into the problem where I have to modify my theme or style or having to create additional padding nodes to position controls within a container.\r\n\r\nI have tried using things like margin containers but this doesn't always work and requires a extra node just to position the control\r\n\r\nthese things start to add up and in no time I have 3 layers of containers to get the flow, position, size and clip I need for only one control.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest allowing us to specify a margin and padding for controls that is separate from its rect.\r\n\r\nthis allows us to make gui easier since we don't have to search through a bunch of container children\r\n\r\nI would also suggest that like the anchor a padding and margin rect be added to the godot editor to ease of use.\r\n \r\n![image](https://user-images.githubusercontent.com/2453707/81457291-54879300-914a-11ea-8a17-7a1be615efde.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically it would be similar to winforms but alot less buggy in which containers still position and resize their controls but users are allowed to adjust how they do it.\r\n\r\n![image](https://user-images.githubusercontent.com/2453707/81457848-a29d9600-914c-11ea-9ef3-8ab40f02e34d.png)\r\n\r\n \r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis enhancement would be use alot more then the current system. while it allows for bypassing a bunch of nested container controls it they would also still be useful for alignment.\r\n\r\nI don't think this can be worked around due to how containers position their controls but if it can be it would require quire a bit of knowledge about the godot engine and some people just want to make a gui.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nthis would be added in the core because currently the gui system can be bit infuriating to work with\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/811",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/811/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/811/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/811/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/811",
    "id": 615042846,
    "node_id": "MDU6SXNzdWU2MTUwNDI4NDY=",
    "number": 811,
    "title": "Overwriten methods should default to the same return type as the super class's method",
    "user": {
      "login": "DrAlta",
      "id": 25010423,
      "node_id": "MDQ6VXNlcjI1MDEwNDIz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25010423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrAlta",
      "html_url": "https://github.com/DrAlta",
      "followers_url": "https://api.github.com/users/DrAlta/followers",
      "following_url": "https://api.github.com/users/DrAlta/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrAlta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrAlta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrAlta/subscriptions",
      "organizations_url": "https://api.github.com/users/DrAlta/orgs",
      "repos_url": "https://api.github.com/users/DrAlta/repos",
      "events_url": "https://api.github.com/users/DrAlta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrAlta/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-08T23:54:31Z",
    "updated_at": "2020-05-10T03:54:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMaking small programs to learn GDscript\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI couldn't figure out why I couldn't change how my object was printed. I had forgotten to type return before the string.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf _to_string had a default return type I would have cough the error immediately.\r\n \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n_to_string should give an error if it doesn't return a string. I assume it could use the mechanisms that are used to catch mixmatch returns with declared return types. \r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I know of.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's most useful to new programmers that would have the experience to look for and install an addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/810",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/810/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/810/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/810/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/810",
    "id": 614925686,
    "node_id": "MDU6SXNzdWU2MTQ5MjU2ODY=",
    "number": 810,
    "title": "Add automatic scrolling and toggleable scrollbars to ScrollBar and ScrollContainer",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-08T19:03:35Z",
    "updated_at": "2020-05-08T21:40:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace ship project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to manually code keyboard based scrolling and I have to supply empty textures for scrollbars to hide them\r\n \r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n2 things\r\n- make scrollbars and scroll containers automatically scroll to `none`, `top`, `middle`, or `end` focused child\r\n- allow us to disable scrollbars for scrollbars and scroll containers \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nso when you are using non mouse or touch based controls godot will scroll to the focused control based on the focus scroll mode\r\n\r\ndisabling the scrollbars would only disable mouse scroll bar focus based scrolling would still work\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nyes but something like this we shouldn't have to code around its something most gui libraries have\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\ncurrently godots ui system needs some love especially for non mouse based interaction",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/810/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/805",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/805/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/805/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/805/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/805",
    "id": 614451822,
    "node_id": "MDU6SXNzdWU2MTQ0NTE4MjI=",
    "number": 805,
    "title": "Allow MeshLibrary Export to export MeshInstances with a custom origin",
    "user": {
      "login": "Poobslag",
      "id": 5902413,
      "node_id": "MDQ6VXNlcjU5MDI0MTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5902413?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Poobslag",
      "html_url": "https://github.com/Poobslag",
      "followers_url": "https://api.github.com/users/Poobslag/followers",
      "following_url": "https://api.github.com/users/Poobslag/following{/other_user}",
      "gists_url": "https://api.github.com/users/Poobslag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Poobslag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Poobslag/subscriptions",
      "organizations_url": "https://api.github.com/users/Poobslag/orgs",
      "repos_url": "https://api.github.com/users/Poobslag/repos",
      "events_url": "https://api.github.com/users/Poobslag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Poobslag/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-08T02:04:04Z",
    "updated_at": "2020-05-08T21:40:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A 3D platformer game where you navigate an environment which includes 2D sprites.\r\n\r\n**Describe the problem or limitation you are having in your project:** As reported [here](https://godotforums.org/discussion/20338/is-it-possible-to-change-a-meshinstances-point-of-origin), any 3D objects created in Godot for use in a MeshLibrary have their origin centered upon export. It does not matter if you offset them in the scene they are exported from, or if you give them a parent object. This means you cannot create a library using, a CubeMesh rotated 45°, or a QuadMesh which sits vertically on the floor.\r\n\r\nThe only workaround I have found is to avoid using Godot's built-in meshes. You can instead create cubes/planes/spheres in Blender which have a different point of origin, and export those objects into Godot. Godot respects the origin of imported objects, it does not center them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Allowing 3D objects created in Godot to have a different point of origin would reduce the amount of 3D meshes we need to store. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** The MeshLibrary exporter could normalize top-level objects, but preserve child objects. This way you could make a mesh a child of a Spatial object if you wanted its point of origin to change, or keep your mesh as a top-level object if you wanted it to be centered.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** To my knowledge, the enhancement can only be worked around by ignoring Godot's MeshLibrary Export functionality, or by ignoring Godot's primitive meshes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** No - If this could be implemented as an add-on, that would be workable.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/805/reactions",
      "total_count": 6,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 6,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/804",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/804/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/804/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/804/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/804",
    "id": 614364845,
    "node_id": "MDU6SXNzdWU2MTQzNjQ4NDU=",
    "number": 804,
    "title": "Add an \"Inverse Sort\" property to BoxContainer",
    "user": {
      "login": "donut-on-ice",
      "id": 7197252,
      "node_id": "MDQ6VXNlcjcxOTcyNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7197252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donut-on-ice",
      "html_url": "https://github.com/donut-on-ice",
      "followers_url": "https://api.github.com/users/donut-on-ice/followers",
      "following_url": "https://api.github.com/users/donut-on-ice/following{/other_user}",
      "gists_url": "https://api.github.com/users/donut-on-ice/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donut-on-ice/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donut-on-ice/subscriptions",
      "organizations_url": "https://api.github.com/users/donut-on-ice/orgs",
      "repos_url": "https://api.github.com/users/donut-on-ice/repos",
      "events_url": "https://api.github.com/users/donut-on-ice/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donut-on-ice/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-07T21:45:49Z",
    "updated_at": "2020-05-08T17:31:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSimple GUI with symmetric horizontal lists of overlapping components.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen using the property \"Separation\" of a Box Container with negative values the right/bottom item overlaps the left/top one. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be a checkbox to inverse sort items in Box Containers so that the items higher in the list will be placed in the right/bottom and not just left/top.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLets say there are 3 items in a VBoxContainer in this order: \"(1) (2) (3)\"\r\nLets say the Separation is set to -2/3 of an item's length.\r\nInverse Sort [  ] -> Box Container will function just like it does now and will display \"(((3)\"\r\nInverse Sort [x] -> Box Container will place direct children from the end of the rectangle to the beginning and will display \"(3)))\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nProbably with 2 lines of code and flipping the resource images but since there is no \"z\" for control items it seems more natural to have this option in a Box Container\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nJust that an user would expect this option to be in a Box Container when he would realize there is no \"z\" property for control items and he would need to keep the order of the items on screen",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/804/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/802",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/802/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/802/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/802/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/802",
    "id": 613952168,
    "node_id": "MDU6SXNzdWU2MTM5NTIxNjg=",
    "number": 802,
    "title": "Add a way to have @ in custom node names",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-07T10:37:29Z",
    "updated_at": "2020-05-07T13:26:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nPlugin to help with networking.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen replicating node spawning, I need to replicate the name as well. This is not possible for names that have an @ in them, because they get removed.\r\n\r\nExample:\r\n```gdscript\r\nnode.name = \"@Bullet@2@\"\r\nprint(node.name)\r\n# prints Bullet2\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA method to set the name of a node without validating it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nA `Node::set_node_name_without_validation` function or something. Just https://github.com/godotengine/godot/blob/49a1e3db12a5543ab9e512ad04c478d9d5ef77c7/scene/main/node.cpp#L1021-L1042 without `_validate_node_name`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThat's exactly the problem, it can't be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's not possible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/802/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/801",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/801/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/801/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/801/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/801",
    "id": 613488545,
    "node_id": "MDU6SXNzdWU2MTM0ODg1NDU=",
    "number": 801,
    "title": "Hide `*.import` files on Windows",
    "user": {
      "login": "VitaZheltyakov",
      "id": 5693437,
      "node_id": "MDQ6VXNlcjU2OTM0Mzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5693437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VitaZheltyakov",
      "html_url": "https://github.com/VitaZheltyakov",
      "followers_url": "https://api.github.com/users/VitaZheltyakov/followers",
      "following_url": "https://api.github.com/users/VitaZheltyakov/following{/other_user}",
      "gists_url": "https://api.github.com/users/VitaZheltyakov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VitaZheltyakov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VitaZheltyakov/subscriptions",
      "organizations_url": "https://api.github.com/users/VitaZheltyakov/orgs",
      "repos_url": "https://api.github.com/users/VitaZheltyakov/repos",
      "events_url": "https://api.github.com/users/VitaZheltyakov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VitaZheltyakov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-06T17:28:37Z",
    "updated_at": "2020-05-09T10:27:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMMORPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy project has a lot of assets. As a result, the project has a lot of files `.import`. I use the Windows operating system, so I see these files. It is sometimes very difficult to find the right asset for editing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSimply create files `.import` hidden in the Windows system.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is logical. On a Linux system, these files are invisible. They must be invisible in the Windows system.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/801/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/800",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/800/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/800/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/800/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/800",
    "id": 613232317,
    "node_id": "MDU6SXNzdWU2MTMyMzIzMTc=",
    "number": 800,
    "title": "Add a dialog to display the owners of all resources",
    "user": {
      "login": "VitaZheltyakov",
      "id": 5693437,
      "node_id": "MDQ6VXNlcjU2OTM0Mzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5693437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VitaZheltyakov",
      "html_url": "https://github.com/VitaZheltyakov",
      "followers_url": "https://api.github.com/users/VitaZheltyakov/followers",
      "following_url": "https://api.github.com/users/VitaZheltyakov/following{/other_user}",
      "gists_url": "https://api.github.com/users/VitaZheltyakov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VitaZheltyakov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VitaZheltyakov/subscriptions",
      "organizations_url": "https://api.github.com/users/VitaZheltyakov/orgs",
      "repos_url": "https://api.github.com/users/VitaZheltyakov/repos",
      "events_url": "https://api.github.com/users/VitaZheltyakov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VitaZheltyakov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-06T11:00:59Z",
    "updated_at": "2020-05-09T20:38:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMMORPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy project has a lot of assets. Sometimes it is necessary to determine which assets in which scenes are used. It is also necessary to determine which assets are not used.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGodot has a tool to determine the owner of the asset (\"View owner\"). But this tool is very inconvenient, since it shows only the owner of the selected asset.\r\n![Снимок](https://user-images.githubusercontent.com/5693437/81169336-c1175c00-8fa9-11ea-9dc5-167574883b78.PNG)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would be more convenient for owners of all assets to be viewed in one menu.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is an important tool for developing big games",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/800/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/798",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/798/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/798/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/798/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/798",
    "id": 612980598,
    "node_id": "MDU6SXNzdWU2MTI5ODA1OTg=",
    "number": 798,
    "title": "Accessing different viewport buffers through ViewportTextures ",
    "user": {
      "login": "SIsilicon",
      "id": 34734122,
      "node_id": "MDQ6VXNlcjM0NzM0MTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/34734122?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SIsilicon",
      "html_url": "https://github.com/SIsilicon",
      "followers_url": "https://api.github.com/users/SIsilicon/followers",
      "following_url": "https://api.github.com/users/SIsilicon/following{/other_user}",
      "gists_url": "https://api.github.com/users/SIsilicon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SIsilicon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SIsilicon/subscriptions",
      "organizations_url": "https://api.github.com/users/SIsilicon/orgs",
      "repos_url": "https://api.github.com/users/SIsilicon/repos",
      "events_url": "https://api.github.com/users/SIsilicon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SIsilicon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 28,
    "created_at": "2020-05-06T00:47:36Z",
    "updated_at": "2020-07-25T18:08:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis proposal applies to any project involving screen space shaders.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nYou see, what I'd like to access the depth texture of the scene for a shader of mine. However, because shader is so expensive, I wanted to render the effect at half or even quarter resolution to composite on top of the scene. But then I would have no access to the depth texture as it would not be accessible from any other viewport.\r\nPlus, I have another project that requires access to the material buffers (normal, metalness, etc.) for a screenspace effect, but those aren't accessible period!\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhat I propose is that user should be given access to these buffers from viewport textures, maybe like give viewport textures a `buffer_mode` (with color being the default). This way, a lot more 3D visual effects can be achieved, such as screen space global illumination, and the ability to use a viewport's depth texture from another viewport.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nStarting from this function:\r\nhttps://github.com/godotengine/godot/blob/4d2c8ba922085a94ab7e963d23289fb8ed9c1f08/drivers/gles3/rasterizer_storage_gles3.cpp#L7530-L7540\r\nwe could expose the buffers to the front end. However, I also see that the buffers are set as Renderbuffer Objects. They would need to be initialized as textures in order to be accessible.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, 'cause this requires low level access to the rendering API.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause of the reason above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/798/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/797",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/797/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/797/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/797/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/797",
    "id": 612768659,
    "node_id": "MDU6SXNzdWU2MTI3Njg2NTk=",
    "number": 797,
    "title": "Add support for importing non-scene meshes with formats other than Wavefront OBJ",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-05T17:23:20Z",
    "updated_at": "2020-05-08T18:20:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNot a specific project. I'm just tinkering with 3D and VR stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't import a mesh with a second UV, since Wavefront only stores one UV, and is the only available format for mesh import. Right now I am obliged to work around the limitation by opening my glTF mesh as a scene, saving the Mesh resource of the MeshInstance in the scene as .mesh, then importing it in my scene.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMesh import for formats other than Wavefront should be available. The workflow of making the scene in a DCC then importing it into Godot isn't always suitable, such as when using a GridMap in the scene, which is a Godot-specific object.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt will probably use the same importers already available in core for scene import, but instead import into a mesh resource in the same way the Wavefront importer works.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot in a way that I know of, at least.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs far as I understand, importing meshes is a core functionality, and since scene import with other formats is already possible in core, it should be possible to add mesh import with those formats.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/797/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/794",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/794/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/794/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/794/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/794",
    "id": 611469583,
    "node_id": "MDU6SXNzdWU2MTE0Njk1ODM=",
    "number": 794,
    "title": "Tweak editor node icons to be distinguishable without relying on color (colorblind-friendly)",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-05-03T17:56:06Z",
    "updated_at": "2020-08-09T13:42:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhile I'm not colorblind myself, we should try to make the editor as accessible as possible. A significant part of the population is colorblind.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nColorblind users may have a hard time distinguishing different editor node icons, especially if they're used in the same scene. This is particlarly noticeable with \"primary\" nodes such as Node2D, Node3D and Control.\r\n\r\nIn https://github.com/godotengine/godot-design/issues/54, starry-abyss posted screenshots of the editor with various colorblind simulation modes:\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n![2020-01-23_20-50](https://user-images.githubusercontent.com/11571820/73009759-3196d480-3e22-11ea-9bdd-ea6a45a602e4.png)\r\n\r\n![2020-01-23_20-36](https://user-images.githubusercontent.com/11571820/73008808-64d86400-3e20-11ea-8032-50f83711fc99.png)\r\n\r\n![2020-01-23_20-36_1](https://user-images.githubusercontent.com/11571820/73008822-686beb00-3e20-11ea-9c69-c6e90c3d779d.png)\r\n\r\n![2020-01-23_20-51](https://user-images.githubusercontent.com/11571820/73009771-36f41f00-3e22-11ea-8015-c637d99a2c8c.png)\r\n</details>\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis proposal is intended to gather design ideas. We should find subtle, but noticeable ways to distinguish 2D and 3D node icons. Distinguishing resource icons as well is a plus, but is not required for this proposal to be fulfilled.\r\n\r\nPerhaps changing the node colors could improve the current situation without requiring changes to icon designs. However, keep in mind not all colors may be usable with a light editor theme due to contrast rate requirements.\r\n\r\nFeel free to suggest icons (either by uploading a SVG or just a mockup) :slightly_smiling_face: \r\n\r\nFor reference, here's a non-exhaustive list of node/resource icons which are only distinguished by their color (click to view at full size):\r\n\r\n![image](https://user-images.githubusercontent.com/180032/80921617-86c67880-8d77-11ea-8dca-a844d9fa2f3d.png)\r\n\r\n(Disregard the DirectionalLight3D icon in there, I accidentally left it in.)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as the engine must be recompiled to change editor icons.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nEditor icons can't be replaced by an add-on.\r\n\r\n*Keywords: accessibility, a11y*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/794/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/793",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/793/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/793/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/793/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/793",
    "id": 611382105,
    "node_id": "MDU6SXNzdWU2MTEzODIxMDU=",
    "number": 793,
    "title": "Add .NET Core support",
    "user": {
      "login": "Maratonec",
      "id": 44904443,
      "node_id": "MDQ6VXNlcjQ0OTA0NDQz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/44904443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Maratonec",
      "html_url": "https://github.com/Maratonec",
      "followers_url": "https://api.github.com/users/Maratonec/followers",
      "following_url": "https://api.github.com/users/Maratonec/following{/other_user}",
      "gists_url": "https://api.github.com/users/Maratonec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Maratonec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Maratonec/subscriptions",
      "organizations_url": "https://api.github.com/users/Maratonec/orgs",
      "repos_url": "https://api.github.com/users/Maratonec/repos",
      "events_url": "https://api.github.com/users/Maratonec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Maratonec/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-05-03T10:41:38Z",
    "updated_at": "2020-11-06T21:03:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSupport .NET core and also Mono for different types of games\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn issues 2 years old you said that .NET core is too young, but now after to years you should implement it, because of better performance and platform independent.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMicrosoft is now saying that .NET core is the main implementation of C# so it should be great to implement it. It is also easier for users because Visual Studio now comes with .NET core.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUser will choose type of project and there will be .NET core that will support its compilers and libraries and also writing code in Visual Studio.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, I am sure many users will be very happy if you implement it so it will be used very much and sadly for you this implementation of .NET core will not be few lines of code for you.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI thing t would be impossible to implement this in assets library because of it’s size.\r\n\r\nThanks,\r\nMartonec",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/793/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/791",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/791/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/791/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/791/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/791",
    "id": 611309189,
    "node_id": "MDU6SXNzdWU2MTEzMDkxODk=",
    "number": 791,
    "title": "[SCENE TAB] Scene-Tree Meta Elements",
    "user": {
      "login": "nokarma33",
      "id": 32589981,
      "node_id": "MDQ6VXNlcjMyNTg5OTgx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32589981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nokarma33",
      "html_url": "https://github.com/nokarma33",
      "followers_url": "https://api.github.com/users/nokarma33/followers",
      "following_url": "https://api.github.com/users/nokarma33/following{/other_user}",
      "gists_url": "https://api.github.com/users/nokarma33/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nokarma33/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nokarma33/subscriptions",
      "organizations_url": "https://api.github.com/users/nokarma33/orgs",
      "repos_url": "https://api.github.com/users/nokarma33/repos",
      "events_url": "https://api.github.com/users/nokarma33/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nokarma33/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-05-03T01:23:24Z",
    "updated_at": "2020-05-13T12:55:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "# Scene-Tree Meta Elements\r\n> Proposals aiming to help organize nodes without worrying too much *(also you can direcly jump to the **PROPOSALS** section )*\r\n\r\n# PREAMBLE\r\nHello everyone 👋! Sorry if my issue is a duplicate, or if it's a little bit over-the-top.\r\n\r\nThe node system is one of the best advantages of Godot Engine.\r\nBut the Scene Tab only shows the strict minimum of what the objects are.\r\n> A string representing a name that is also the ID of the node. A simple circle for icon most of the time. White = basic node, red = 3d node, green = canvas/2d node... \r\n>\r\n> You see what i mean, and it's great as it is. Or is it ?\r\n\r\nThis proposition tries to give some tools ideas to improve greatly the Scene tree experience.\r\n> Since I'm certainly not the first one to ask for that, i may as well propose multiple little things that i think could improve the editor, or at least give ideas to people. I'm sorry if it's not the way to do, and if you ask me i can make it into separated issues and delete this one.\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a simple RPG game that requires a certain amount of nodes - for example the famous Finite State Machine's states.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI found myself having too much possible states, and had to break some working code to separate them in different node folders, also limiting my overview of the possible states.\r\n\r\n# PROPOSALS\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis issue proposes multiple solutions, since i don't know which individual one would go with another, or which one would be more hard to implement.\r\n\r\n**INDEX:**\r\n- COMMENTS NEXT TO NODES NAMES\r\n  > Gray comments edited via the inspector.\r\n- VERTICAL NODE *CATEGORY*\r\n  > Node that acts as a folder, but not as a node.\r\n\r\n***Here is the original image, using sub-nodes to organize the States:***\r\n![image](https://user-images.githubusercontent.com/32589981/80893564-c045a800-8cd3-11ea-9672-c2a2cce71ebc.png)\r\n\r\n## COMMENTS NEXT TO NODES NAMES\r\nDisplays a comment text next to the node's name, in italic and with distinct but non-catchy font color (gray maybe).\r\n*Examples of usages:*\r\n- Using the comment as a breaker for categories, not ideal but it does show up well. ![image](https://user-images.githubusercontent.com/32589981/80895105-75cb2800-8ce1-11ea-852a-8cb29f496a7f.png)\r\n  - Put emojis or tags to quickly distinguish items ![image](https://user-images.githubusercontent.com/32589981/80895047-fb9aa380-8ce0-11ea-911b-342f08a718e3.png)\r\n    > Emojis could be added via add-ons / emoji pack files...\r\n- Allow Plugins (such as [godot-git-plugin](https://github.com/godotengine/godot-git-plugin)) to display custom informations (_such as the commit message / the Author / the modification date_).\r\n- Show user-customizable information, such as modification date, kanban/checkbox completion, tags, assignee dev.\r\n\r\nEven tho I'm giving three usages, the only one I recomment implementing/using is the 1st one.\r\n\r\nThe comment could be edited directly in Inspector. \r\n> We could also use the proprerties of prohibed name characters (such as '/') to trigger comment edition while renaming a node, or simply double click on the comment if there is already one - even tho those two things may not be instinctive.\r\n\r\n## VERTICAL NODE *CATEGORY*\r\nVirtual __Category__ node separator. With distinct icon and font color (gray).\r\n![image](https://user-images.githubusercontent.com/32589981/80895727-44098f80-8ce8-11ea-8622-d573708d641d.png)\r\n- Categories can be added as new nodes.\r\n- ***optional***: Categories only contain nodes \"virtually\", meaning they don't indent the tree view.\r\n- Categories can be fold.\r\n- When a category is \"fold\", it wraps all the nodes below until it bumps into another category (like a fake folder).\r\n- When a \"**folded**\" category is moved, it's the same as if every nodes inside it were in a multi-selection state.\r\n- When a \"**non-folded**\" category is moved, it acts as a normal node and doesn't drag any \"child\" nodes with it.\r\n\r\n![image](https://user-images.githubusercontent.com/32589981/80895617-1708ad00-8ce7-11ea-8ef9-b1358e4c33a5.png)\r\nExample where categories doesn't begin at first child.\r\n![image](https://user-images.githubusercontent.com/32589981/80895980-8e3f4080-8ce9-11ea-99ba-2c044a9ab077.png)\r\n> Note that the design is just a quick drawing I made by fighting with Gimp and it's far from being art.\r\n\r\n# IMPLEMENTATION\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSince we're working with scenes, we don't want to store editor-only informations into the scenes files. In theory it is possible to put the categories and the objects comments directly in the `.tscn` but it will be easier to implement it as it's own thing.\r\nSo, what we should do is store the meta informations in another file. Of course it could be stored in the import folder, but it can also be stored as a file with it's own distinct extension (like `.meta` or `.gdmeta`) that suffixes the scene full name and extension (e.g. `World.tscn.meta`).\r\nIf the meta file is in the __FileSystem__, the meta file should either:\r\n  * Have its own icon.\r\n    > optional: be in a distinctive color (gray)\r\n  * Be hidden inside FileSystem tab.\r\n  * Be folded inside the scene object.\r\n\r\nThe meta file should also be written similarly to the TSCN format, which has the benefit of being simple enough, helps with VCSs, and corresponds to the scene's structure so it's easier for devs to understand (*obviously*).\r\n> The meta file could also be written in TOML, but would not need to use all its features.\r\n> BTW if someone knows if there's a specific language that inspired the TSCN format please tell me what it is.\r\n\r\n# JUSTIFICATIONS\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will not be easy to implement, but at least I hope it can be implemented without breaking anything.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis proposal is about features that can be added without changing the core functioning of Godot engine.\r\nHowever, I don't think this can be implemented as an add-on.\r\nAlso, I think that these features could greatly improve the workflows of game devs.\r\n\r\n\r\n## PS:\r\nSorry if I'm not going into details for now. I may comment further details later, just tell me if you're interested. Also -i know it'll sound cheesy but- please contact me if you're interested in what I presented and if you can help me understand the godot repo's infrastructure and implement those features.\r\nThank you if you read my mess and tolerated my poor english btw !",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/791/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/789",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/789/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/789/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/789/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/789",
    "id": 611297964,
    "node_id": "MDU6SXNzdWU2MTEyOTc5NjQ=",
    "number": 789,
    "title": "Rename GridMap to MeshMap or TileMap3D and add actual GridMap node",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-02T23:51:44Z",
    "updated_at": "2020-09-18T20:38:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTower Defense\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI currently have to write a custom grid and tile class for saving and loading due to there not being a actual grid map for nodes. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRename Gridmap to MeshMap or Tilemap3D and add actual Gridmap node for both 2d and 3d games.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasicly it current Gridmaps would be renamed to something like Meshmap to be more clear and a true GridMap and GridMap2D would be added\r\n\r\nthe new Gridmaps would basically be Tilemaps or Meshmaps but would accept any node structure as long as the root was a Node2D for GridMap2D or Node3D for GridMap\r\n\r\nthis would allow people to still use old TileMaps or MeshMaps is they need performance\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used quite often and while it could be worked around its not something that should be.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit would basicly be a better version of the Tilemap and current Gridmap but not limited to only sprites and meshes.\r\n\r\nhttps://github.com/godotengine/godot-proposals/issues/747",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/789/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/788",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/788/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/788/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/788/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/788",
    "id": 611263259,
    "node_id": "MDU6SXNzdWU2MTEyNjMyNTk=",
    "number": 788,
    "title": "Be more conservative with Mouse Filter defaults (most controls should have Ignore)",
    "user": {
      "login": "Rybadour",
      "id": 305423,
      "node_id": "MDQ6VXNlcjMwNTQyMw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/305423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rybadour",
      "html_url": "https://github.com/Rybadour",
      "followers_url": "https://api.github.com/users/Rybadour/followers",
      "following_url": "https://api.github.com/users/Rybadour/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rybadour/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rybadour/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rybadour/subscriptions",
      "organizations_url": "https://api.github.com/users/Rybadour/orgs",
      "repos_url": "https://api.github.com/users/Rybadour/repos",
      "events_url": "https://api.github.com/users/Rybadour/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rybadour/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-02T19:59:59Z",
    "updated_at": "2020-10-26T09:00:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA hobbyist game project involving a lot of UI work.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGiven that most controls (including the generic Control node type) are set to mouse filter stop I am constantly surprised to discover my UI elements cannot be interacted with due to invisible boxes overlapping them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd recommend all nodes to have mouse filter `pass` or `ignore` unless they them-self implement an interactable UX. Container type nodes should not have mouse filter `stop` unless they are intended to overlap other content such as a popup.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI may misunderstand how exactly `pass` works but I would expect containers to have the behaviour that they will allow children to handle mouse events by default. If setting containers to `ignore` is problematic than either `pass` should be used or a new type should be created.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be \"worked around\" by constantly changing all nodes to mouse filter `ignore`. I am tempted to do so with a plugin. But I believe this change will make things easier for everyone.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/788/reactions",
      "total_count": 15,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/786",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/786/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/786/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/786/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/786",
    "id": 611184012,
    "node_id": "MDU6SXNzdWU2MTExODQwMTI=",
    "number": 786,
    "title": "Converting a resource path to a ' string ' path in visual script . . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-02T13:01:06Z",
    "updated_at": "2020-05-02T22:24:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nA Tomb Raider game . . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is a VERY small problem, I use visual scripting, and like to use node boxes for EVERYTHING, right now if I move a ' scene ' into canvas, from res folder, it creates a ' Preload ' box, with a folder name, in it . . .\r\n\r\nBut, to ' change scene ', using the Get Scene Tree method box, I need the ' path ' to be written, as a string, and the obj from the ' Preload ' box doesn't go into, the Change Scene method, it only takes a string . . . For visual coders, that are afraid to go into the engine, make changes to it, almost entirely, could one make a new visual script node box, that constructs a ' string ' of the path, in the ' Preload ' box, so one can connect it, to the ' Change Scene ' method, from the ' Get Scene Tree ' script box, without writing any weird lines, I know it's small, but it would make it nicer, for non-coders, and probably not take very long, for a good engine master <3 <3 <3\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would just be another node, in visual script, that converts the path, of a ' Preload ' output ' obj ' to, a string, which can then be plugged into ' Get_Scene_Tree > Change_Scene ' script box . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI would like a construct box, that sort of ' gets ' the preload box ' file path, and construct a string variable, from it, as a new box, very simple . . .\r\n\r\n![2020-05-02 1427](https://user-images.githubusercontent.com/61069740/80864816-703ff480-8c85-11ea-81dd-dba1046181e1.jpg)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't change the engine, I can't code, it would be really nice, for code-phobes, like me, to have boxes for everything, as MUCH as possible <3\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, I'm not sure what this means, I think if it was an add-on, I'd have to download the ' new box ', and how would I know where, to do that <3\r\n\r\nKnow it's very small request, but it would be nice, as an artist, I leave the heavy lifting to the code-gods, won't go near it, got the code-phobia, <3 <3 Thank you, for your time <3\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/785",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/785/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/785/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/785/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/785",
    "id": 611181647,
    "node_id": "MDU6SXNzdWU2MTExODE2NDc=",
    "number": 785,
    "title": "Add an import option to make Godot read a normal map with inverted Y axis",
    "user": {
      "login": "markidak",
      "id": 33268307,
      "node_id": "MDQ6VXNlcjMzMjY4MzA3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/33268307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markidak",
      "html_url": "https://github.com/markidak",
      "followers_url": "https://api.github.com/users/markidak/followers",
      "following_url": "https://api.github.com/users/markidak/following{/other_user}",
      "gists_url": "https://api.github.com/users/markidak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markidak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markidak/subscriptions",
      "organizations_url": "https://api.github.com/users/markidak/orgs",
      "repos_url": "https://api.github.com/users/markidak/repos",
      "events_url": "https://api.github.com/users/markidak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markidak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-02T12:50:17Z",
    "updated_at": "2020-05-04T21:17:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n2d isometric game with normal maps for 3d looking lighting effects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot can't read standart normal map. I need to flip Green channel in order for it to work. Without editing the Y axis is flipped when lights are applied.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nHave godot read the normal maps the default way so we don't have to flip green channels in a different software. Possibly have an option where you can flip it manually. But I don't see the use.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI have no idea, still a beginner.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot to my knowledge. I had to flip green channel in image editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI 2 figuring out why doesn't it work before I found out Godot can't read normal maps as it should.\r\n\r\nHere I linked how the normal map looks when rendered in blender. Godot reads it upside down.\r\n\r\n![Normal](https://user-images.githubusercontent.com/33268307/80864569-d9bf0380-8c83-11ea-933c-9305055bb228.png)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/785/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/784",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/784/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/784/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/784/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/784",
    "id": 611154350,
    "node_id": "MDU6SXNzdWU2MTExNTQzNTA=",
    "number": 784,
    "title": "Add support for subdivision surfaces using OpenSubdiv",
    "user": {
      "login": "pouleyKetchoupp",
      "id": 1075032,
      "node_id": "MDQ6VXNlcjEwNzUwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1075032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pouleyKetchoupp",
      "html_url": "https://github.com/pouleyKetchoupp",
      "followers_url": "https://api.github.com/users/pouleyKetchoupp/followers",
      "following_url": "https://api.github.com/users/pouleyKetchoupp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pouleyKetchoupp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pouleyKetchoupp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pouleyKetchoupp/subscriptions",
      "organizations_url": "https://api.github.com/users/pouleyKetchoupp/orgs",
      "repos_url": "https://api.github.com/users/pouleyKetchoupp/repos",
      "events_url": "https://api.github.com/users/pouleyKetchoupp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pouleyKetchoupp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-05-02T10:22:31Z",
    "updated_at": "2020-11-23T02:50:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSport game with 3D animation\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe're using Subdivision Surface Modifier in Blender when creating our models because it allows modelling and animating low-poly models.\r\nhttps://docs.blender.org/manual/en/latest/modeling/modifiers/generate/subdivision_surface.html\r\n\r\nThis produces perfectly smooth models in Blender, but once they are exported into Godot, some glitches appear during animation:\r\n(_note: expected results are generated from my work in progress integration of OpenSubdiv_)\r\n| Expected result  | Glitchy result |\r\n| ------------- | ------------- |\r\n| <img src=\"https://user-images.githubusercontent.com/1075032/80860202-7f637a00-8c66-11ea-9bdf-0b30b7152528.png\" width=\"200\" />  | <img src=\"https://user-images.githubusercontent.com/1075032/80860161-46c3a080-8c66-11ea-87d3-c086f6133264.png\" width=\"200\" />  |\r\n| <img src=\"https://user-images.githubusercontent.com/1075032/80860212-8be7d280-8c66-11ea-9677-3ba6002841fc.png\" width=\"200\" />  | <img src=\"https://user-images.githubusercontent.com/1075032/80860216-95713a80-8c66-11ea-8760-b4e5d860a779.png\" width=\"200\" />  |\r\n| <img src=\"https://user-images.githubusercontent.com/1075032/80860257-cf424100-8c66-11ea-89b4-add50a70ea36.gif\" width=\"200\" />  | <img src=\"https://user-images.githubusercontent.com/1075032/80860266-d8cba900-8c66-11ea-90c8-01d1601520e7.gif\" width=\"200\" />  |\r\n\r\nThis is due to the following limitation:\r\n- Export from Blender applies the modifier and generate new vertices with bone weights averaged from the base vertices.\r\n- Godot applies skinning on all vertices from the high-poly model based on the average weights calculated during export, but these weights don't produce a smooth surface when bending.\r\n\r\nThe solution is to apply the subdivision modifier after the skinning in Godot, but this is not possible at the moment because all we have is the final subdivided mesh.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis problem can be solved by generating a subdivision mesh in Godot, and interpolate extra vertices after the skinning process to keep surfaces smooth.\r\n\r\nWe can use OpenSubdiv to help with this process. It's and industry standard, open source and high performance:\r\nhttp://graphics.pixar.com/opensubdiv\r\n\r\nThen we can simply export the low-poly mesh from Blender or other modeling software, apply the subdivision in Godot and get smooth animated meshes:\r\n| Level 0  | Level 1 | Level 2 |\r\n| ------------- | ------------- | ------------- |\r\n| <img src=\"https://user-images.githubusercontent.com/1075032/80860621-395be580-8c69-11ea-83af-21adc8700679.gif\" width=\"200\" />  | <img src=\"https://user-images.githubusercontent.com/1075032/80861276-d1f46480-8c6d-11ea-9223-bf2819cfc678.gif\" width=\"200\" />  | <img src=\"https://user-images.githubusercontent.com/1075032/80860632-48db2e80-8c69-11ea-8c43-f6d7b929e128.gif\" width=\"200\" /> |\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI've made a first basic implementation based on Godot 3.2 for my project:\r\nhttps://github.com/nekomatata/godot/commit/8f9674fa33062da19cb500068122935c53d46562\r\n\r\nOpenSubdiv is added as a module to generate subdivision data out of `Mesh` and apply skinning when provided a `Skeleton`.\r\n\r\nWhen the mesh is subdivided, the skinning is done in the OpenSubdiv module directly in order to add a the step to interpolate the extra vertices, so only skinning on CPU is supported in this case.\r\n\r\nI've added a property in `MeshInstance` to set a subdivision level, which triggers the generation of the subdivision data and the high-poly rendered mesh.\r\n\r\nHere are the next steps for integrating this module into Godot:\r\n- Port to Godot 4.0 / Vulkan\r\nThere's not much to do since the whole process is independent from low-level rendering, but updating vertex arrays dynamically is not supported at the moment on master, so that would require fixing before we can integrate it into Godot 4.0. This fix is needed for soft bodies as well.\r\n- Handle normals & UVs\r\nI'm using flat shading in my project so I didn't implement normals and UVs generation, but it shouldn't be too difficult to add.\r\n- Handle blend shapes\r\nBlend shapes are also not supported at the moment. It would require the module to apply blend shapes along with skinning before interpolating the extra vertices from the subdivision.\r\n- Extra optimization\r\nCPU: The skinning process on CPU could be easily optimized a little.\r\nMemory: Share the same vertex array between the different surfaces of a mesh.\r\nMemory: Share subdivision data between instances of the same mesh.\r\n\r\nAnd some extra functionalities would be worth being added in the future:\r\n- Add a subdivision resource\r\nIt would allow to optionally generate and store subdivision data offline to trade memory for loading time, and could have a few properties to allow more variation in how to generate the subdivision.\r\n- Support for skinning on GPU\r\nI'm not sure if it's possible and how it would work in the current rendering system, but if the scene shader could access subdivision data we would be able to do the whole skinning/interpolation process on GPU instead of CPU.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement can be useful for any artist who wants to use subdivision surfaces. It's too complex to be done with just a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature would be best in core, because it needs to take place within the rendering process (after skinning and before rendering) and it requires to be integrated in an optimized way to get good performance.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/784/reactions",
      "total_count": 32,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 7,
      "confused": 0,
      "heart": 5,
      "rocket": 4,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/783",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/783/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/783/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/783/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/783",
    "id": 611153353,
    "node_id": "MDU6SXNzdWU2MTExNTMzNTM=",
    "number": 783,
    "title": "Allow optional depth buffer activation and usage in 2D renderer",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-02T10:15:36Z",
    "updated_at": "2020-05-02T22:24:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop-down 2D game, in which I want to simulate volume and depth of 2D sprites, still taking advantage of the 2D tools Godot provides.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now, for example, I just can't filter pixels out during the rendering process based on a custom height map attached to each sprite.\r\nSo I have no way to simulate 3D depth in 2D.\r\n\r\nOthers requesting a depth-like buffer for 2D: \r\nhttps://github.com/godotengine/godot/issues/23847#issuecomment-440419751\r\nhttps://github.com/godotengine/godot/issues/23847#issuecomment-566667049\r\nhttps://github.com/godotengine/godot/pull/22800#issuecomment-447663062\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe depth buffer is the only piece of data that you can **kinda** read and write at the same time in the same render pass to decide whether to draw or discard a fragment.\r\n\r\nThis is the kind of effect I want, and that can be achieved thanks to the depth buffer:\r\n\r\n<details>\r\n<summary>Depth buffer disabled:</summary>\r\n\r\n![2020-05-02_11-41-17](https://user-images.githubusercontent.com/19392104/80860718-ecc4da00-8c69-11ea-8940-47966d73831a.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Depth buffer enabled:</summary>\r\n\r\n![2020-05-02_11-39-04](https://user-images.githubusercontent.com/19392104/80860726-f9493280-8c69-11ea-9e71-1bda172c354b.png)\r\n\r\n</details>\r\n\r\nSee how pixels are being drawn or discarded based on the height of each one of them and how the bottom of the sprites is hidden behind the grass.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGodot could provide an extra RenderTexture/Viewport mode or a new setting (off by default) to enable the use of the depth buffer even in 2D.\r\nThis way, users that do not want to use it will perceive no performance penalty and nothing will change for them.\r\nWhen the setting is enabled on a render texture, 2D shaders are allowed to write fragment depth, to set the z-test mode, z-write mode, etc.\r\n\r\nSince Godot already supports depth buffer operations in the 3D renderer, it should be fairly easy to add a switch for it in 2D too.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is not possible to workaround this limitation with scripts, support for the depth buffer at the 2D renderer level is needed.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt cannot be supported via an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/783/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/782",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/782/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/782/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/782/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/782",
    "id": 611106653,
    "node_id": "MDU6SXNzdWU2MTExMDY2NTM=",
    "number": 782,
    "title": "Allow us to strongly type packed scenes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-02T04:45:02Z",
    "updated_at": "2020-07-16T20:20:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d Tower defense\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthere is no way to strongly type packed scenes\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\ncan we have a some sort of generics for packed scenes that allow for strongly typed instancing\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nsomething like..\r\n```\r\nvar scene : PackedScene(Spatial)\r\n```\r\n\r\nexporting generic packed scenes would also insure type safety in the inspector\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used alot and no not safely\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nsupports better code\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/782/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/780",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/780/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/780/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/780/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/780",
    "id": 611077436,
    "node_id": "MDU6SXNzdWU2MTEwNzc0MzY=",
    "number": 780,
    "title": "Particle system: Add emission by distance travelled between emits (instead of time)",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 1,
    "created_at": "2020-05-02T01:03:16Z",
    "updated_at": "2020-09-05T22:13:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA simple top-down shooter where I have high-speed rocket launcher adn the rocket leaves smoke behind.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe particles system (2D and 3D) are leaving a \"gap\" between particles when local coords speed is high or the system is set to global coords and the parent speed is high. In the Unity engine, we have a option to emit particles by distance that creates new particles in between gaps\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo overcome the problem, it would be great if there was an option to emit by distance, like in Unity engine.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn my mind, it can have two new properties: \"rate by distance\" and \"minimal distance delta\",\r\nthen if the distance from previous global position and current global position is higher than minimal distance delta, then creates new particles between this gap.\r\n\r\nIn a custom particles shader, I can't just create new particles because there's pre-defined amount of particles that restarts to \"create new ones\".\r\n\r\nSo in pseudocode we could have (thinking in a particles shader):\r\n\r\n```\r\nuniform float min_distance_delta;\r\nuniform int interpolation_emission_step;\r\nuniform int rate_by_distance;\r\n\r\nvoid vertex() {\r\n    vec3 previous_position; //some kind of previous particle system global position read\r\n    vec3 current_position; //some kind of current particle system global position read\r\n    float distance = distance(current_position, previous_position);\r\n    if (distance > min_distance_delta) {\r\n        //calculates every position using interpolation_emission_step\r\n        //and creates new particles in each position\r\n    }\r\n}\r\n```\r\n\r\nI don't know if with current particles system shader API, it's possible to create options to read previous and current position and create new particles besides the already alocated ones.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think that it can't be made with gdscript or C# for performance reasons, as the only way is to instantiate new particles systems\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause there are many projects that have high-speed gameplay and uses particles with global coords (a racing game where has tires smokes in drifting, for example), so it would be nice to be a main feature\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/780/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/779",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/779/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/779/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/779/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/779",
    "id": 610881049,
    "node_id": "MDU6SXNzdWU2MTA4ODEwNDk=",
    "number": 779,
    "title": "The proposal process doesn't seem very friendly, especially to the new person",
    "user": {
      "login": "LikeLakers2",
      "id": 1008889,
      "node_id": "MDQ6VXNlcjEwMDg4ODk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1008889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LikeLakers2",
      "html_url": "https://github.com/LikeLakers2",
      "followers_url": "https://api.github.com/users/LikeLakers2/followers",
      "following_url": "https://api.github.com/users/LikeLakers2/following{/other_user}",
      "gists_url": "https://api.github.com/users/LikeLakers2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LikeLakers2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LikeLakers2/subscriptions",
      "organizations_url": "https://api.github.com/users/LikeLakers2/orgs",
      "repos_url": "https://api.github.com/users/LikeLakers2/repos",
      "events_url": "https://api.github.com/users/LikeLakers2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LikeLakers2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2020-05-01T17:53:24Z",
    "updated_at": "2020-10-10T14:19:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I've noticed a problem with this repository, a problem which seems like it could push away a lot of people, and honestly one that's been on my mind for a while.\r\n\r\nI've seen quite a few times where the response to a proposal seems like someone trying to figure out how to avoid implementing the feature... This isn't normally a problem, mind you (although I do think that the usual \"you can do this with the current nodes and a script\" isn't very helpful to people). What makes it a problem for me is that it often comes at the expense of not considering what we *could* reasonably do to help someone with what they want.\r\n\r\nI should put a disclaimer: I don't frequent this repository anymore, but I do still read its issues from time-to-time (I have a habit of not cleaning out lists such as subscription lists). And I've seen one too many times where it feels like the responses given end up feeling like someone trying to say \"no, and that's final, here's what you can do\" rather than \"no, but here's what we could do instead\".\r\n\r\nDon't get me wrong, I'm not trying to say that we can't say \"no\" in the way that we currently do -- but with how much we push the work onto the average proposal maker (\"you can do this in GDScript\"), rather than first considering what options we could implement to help them further their goal, it feels much like a place where ideas have to be accepted immediately or be rejected forever.\r\n\r\nIt ends up being, I think, a place where you have to already know how Godot is designed in order to be able to suggest ideas... and I'd have a hard time believing that the average person could figure that out that, given that I don't even have the confidence in whether I've done so myself, even after examining Godot's internals.\r\n\r\nAgain, I don't frequent this repository anymore, so please take this complaint as you will. Also, I apologize if it seems like a mess of thoughts, as I'm not always good at articulating my thoughts. I've just... ended up incredibly frustrated trying to think up ideas that I genuinely think would fit into Godot by default, only to feel as though they'd end up rejected because of how the proposal process works -- and so, I don't ever end up feeling like I can contribute good ideas because I'm not sure which ones are good and which ones aren't.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/779/reactions",
      "total_count": 9,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/775",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/775/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/775/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/775/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/775",
    "id": 610601059,
    "node_id": "MDU6SXNzdWU2MTA2MDEwNTk=",
    "number": 775,
    "title": "Add an \"OR\" blend mode to CanvasItemMaterial",
    "user": {
      "login": "LordBrkica",
      "id": 51578785,
      "node_id": "MDQ6VXNlcjUxNTc4Nzg1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51578785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LordBrkica",
      "html_url": "https://github.com/LordBrkica",
      "followers_url": "https://api.github.com/users/LordBrkica/followers",
      "following_url": "https://api.github.com/users/LordBrkica/following{/other_user}",
      "gists_url": "https://api.github.com/users/LordBrkica/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LordBrkica/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LordBrkica/subscriptions",
      "organizations_url": "https://api.github.com/users/LordBrkica/orgs",
      "repos_url": "https://api.github.com/users/LordBrkica/repos",
      "events_url": "https://api.github.com/users/LordBrkica/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LordBrkica/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-01T06:55:29Z",
    "updated_at": "2020-07-08T08:20:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a strategy game. \r\n**Describe the problem or limitation you are having in your project:**\r\nI am having trouble building a _field od view/ fog of war / visibility system_.\r\n\r\nLets say we have 2 friendly units in some strategy game. We want to show the player how far these units can see. I used a whitish semi transparent Sprite to show this:\r\n![image](https://user-images.githubusercontent.com/51578785/80786750-d7c24b00-8b84-11ea-9e7e-6e6995b49223.png)\r\nSo the white area is the area which they see.\r\n\r\nThe thing is - I cannot properly graphically show this area. The closest I could get is shown in the image above, but a problem exists - no appropriate _CanvasItemMaterial_  _Blend_ property exist to mix these two vision fields. There is always some ugly overlap between them (marked blue in the image) and I dont to change this color. \r\nIf you can imagine rts games , their visibility is always the same semitransparent color and it doesnt blend in unusual ways.\r\n\r\nOther people would like to use this ability but for different purposes, example:\r\nhttps://www.reddit.com/r/godot/comments/cgqo95/any_way_to_mix_two_sprite_textures_together/?utm_source=share&utm_medium=web2x\r\n\r\nIntuitively I would say what is missing is some sort of an **OR** Blend, where when we have several overlapping items we blend using only one.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEarly strategy games such ase Age of Empires and Starcraft introduced a concept of fog of war.\r\nUnits see other units only when they are in their respective field of vision area. Its technically possible to use Area2D to hide/show entering bodies (although this also isnt exactly ideal), but there is little possibility to actually show some sort of a visibility area.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI think easiest thing would be a some sort of a **OR** Blend implementation. \r\nI dont know much about shaders, if this is hard to implement than I am out of luck. But maybe its not and it would help not just me but some other people as well.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell I think stuff like this is often used in strategy games, I do not see an easy solution (and havent manage to find one on the internet),\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nEvery strategy game since Age of Empires has fog of war/visibility as a core mechanic, I think Godot has a chance to be used in such games and this feature would be very helpful.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/773",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/773/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/773/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/773/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/773",
    "id": 610338000,
    "node_id": "MDU6SXNzdWU2MTAzMzgwMDA=",
    "number": 773,
    "title": "Add Rigidbody.GetPointVelocity(Vector3 point)",
    "user": {
      "login": "kodkuce",
      "id": 24373114,
      "node_id": "MDQ6VXNlcjI0MzczMTE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24373114?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kodkuce",
      "html_url": "https://github.com/kodkuce",
      "followers_url": "https://api.github.com/users/kodkuce/followers",
      "following_url": "https://api.github.com/users/kodkuce/following{/other_user}",
      "gists_url": "https://api.github.com/users/kodkuce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kodkuce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kodkuce/subscriptions",
      "organizations_url": "https://api.github.com/users/kodkuce/orgs",
      "repos_url": "https://api.github.com/users/kodkuce/repos",
      "events_url": "https://api.github.com/users/kodkuce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kodkuce/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-30T19:42:27Z",
    "updated_at": "2020-04-30T20:56:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking on a kart game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to get velocity of rigidbody at point, something both UE4 and Unity have\r\nGetUnrealWorldVelocityAtPoint(), Rigidbody.GetPointVelocity..\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nProblem is i duno math to do it myself :)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHmm it would be a function that would return the value\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think its just an math/physics thingy so possible someone can write that function themself\r\nbut hmm i think that should be inbuild function\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCuz its physics related and probably people will use it a lot, dont think it is exposed in\r\nboth UE4 and Unity for no reason\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/773/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/771",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/771/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/771/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/771/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/771",
    "id": 610167057,
    "node_id": "MDU6SXNzdWU2MTAxNjcwNTc=",
    "number": 771,
    "title": "AutoTile: Allow transpose/flip bitmask with transposed/flipped tiles",
    "user": {
      "login": "Aldlevine",
      "id": 4605023,
      "node_id": "MDQ6VXNlcjQ2MDUwMjM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4605023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aldlevine",
      "html_url": "https://github.com/Aldlevine",
      "followers_url": "https://api.github.com/users/Aldlevine/followers",
      "following_url": "https://api.github.com/users/Aldlevine/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aldlevine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aldlevine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aldlevine/subscriptions",
      "organizations_url": "https://api.github.com/users/Aldlevine/orgs",
      "repos_url": "https://api.github.com/users/Aldlevine/repos",
      "events_url": "https://api.github.com/users/Aldlevine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aldlevine/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-30T15:45:22Z",
    "updated_at": "2020-05-25T21:04:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA platformer using 3x3 autotiles to draw spikes on floor/ceiling/walls.\r\n\r\n![image](https://user-images.githubusercontent.com/4605023/80729153-cf5f0700-8ad5-11ea-9e12-67746d34bf9d.png)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen rotating autotiles in a tilemap, the connections are determined based on the bitmask without rotation. Because of this, when drawing spikes on walls I either have to disable autotile and draw by hand, or create an additional set of rotated tiles (this could also be a problem for flipped tiles, but not in my specific case).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a new option to autotiles such that the bitmask is flipped/transposed when the tiles are also flipped/transposed. This would save effort in building tilesets by removing the need to include rotated instances of certain tiles in the tileset or in manually placing flipped/transposed tiles in the tilemap.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBitmask setup\r\n![image](https://user-images.githubusercontent.com/4605023/80727568-dab13300-8ad3-11ea-8525-f498a3df7ffd.png)\r\n\r\nBehavior\r\n![image](https://user-images.githubusercontent.com/4605023/80727992-6aef7800-8ad4-11ea-9aed-6f90f6c77e9c.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt could possibly be handled with `_forward_subtile_selection`, but I have no experience with this function, so I'm not sure. One issue with this is that it would introduce a dependency on the TileMap from the TileSet (the TileSet would need to know if the specific cell is flipped/transposed which is defined in the TileMap, it would also need to know about adjacent cells).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs far as I can tell, this would be difficult to build as an add-on in a generalized fashion. It seems like  it would be useful in many cases, and would be intuitive.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/771/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/768",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/768/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/768/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/768/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/768",
    "id": 609467422,
    "node_id": "MDU6SXNzdWU2MDk0Njc0MjI=",
    "number": 768,
    "title": "Add the ability to change the color/icon of folders in the FileSystem view",
    "user": {
      "login": "AStainlessSteelSink",
      "id": 18225391,
      "node_id": "MDQ6VXNlcjE4MjI1Mzkx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/18225391?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AStainlessSteelSink",
      "html_url": "https://github.com/AStainlessSteelSink",
      "followers_url": "https://api.github.com/users/AStainlessSteelSink/followers",
      "following_url": "https://api.github.com/users/AStainlessSteelSink/following{/other_user}",
      "gists_url": "https://api.github.com/users/AStainlessSteelSink/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AStainlessSteelSink/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AStainlessSteelSink/subscriptions",
      "organizations_url": "https://api.github.com/users/AStainlessSteelSink/orgs",
      "repos_url": "https://api.github.com/users/AStainlessSteelSink/repos",
      "events_url": "https://api.github.com/users/AStainlessSteelSink/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AStainlessSteelSink/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-30T00:38:03Z",
    "updated_at": "2020-10-14T09:56:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nUnderground 3D facility with an interactive environment\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to the nature of my project, I have lots of project files and this will inherently start to pile up with folders. Better folder organization is a good way to clean up your filestructure but is only a part of the solution.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be an option to change the icon or base color of any folder in the FileSystem view that would reflect in both the normal and split modes. You would right click and be presented with \"Change folder icon\"/\"Change folder color\" options (or something similar) that would allow you to customize the folder icon/color, and this would save.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![mockup](https://i.imgur.com/5PDycIE.png)\r\n^ Only demonstrates colors\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I am aware of, short of completely replacing the FileSystem view with a custom one using a plugin.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a relatively simple feature that would require an unnecessarily complex means to add yourself (see above question).\r\n\r\nThis is already a feature in Unreal Engine (at least the color part) and is a very nice tool to help organize and define which folders are more/less important when navigating the filesystem, and I think it would be a great QOL feature for developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/768/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/766",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/766/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/766/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/766/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/766",
    "id": 608910935,
    "node_id": "MDU6SXNzdWU2MDg5MTA5MzU=",
    "number": 766,
    "title": "Emits a signal when a new node is added into a group",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-29T09:31:25Z",
    "updated_at": "2020-05-06T21:42:51Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nI need to be notified when a node is added into a group, so I can put the node in a specific state.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf the `SceneTree` would emit a signal when a node is added into a group, I could be able to catch it and perform some operations on the node.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimply add a new signal on the `SceneTree` and emits it when a new node is added into a group.\r\nThe signal name could be:\r\n- node_grouped(StringName p_group, Node p_node)\r\n- node_ungrouped(StringName p_group, Node p_node)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAdd group is an engine feature, using a script doesn't allow me to emit a signal and so catch a grouping when it's grouped in the Editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/766/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/764",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/764/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/764/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/764/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/764",
    "id": 608697407,
    "node_id": "MDU6SXNzdWU2MDg2OTc0MDc=",
    "number": 764,
    "title": "Add a way to remove all children from a node quickly",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 30,
    "created_at": "2020-04-29T00:26:15Z",
    "updated_at": "2021-01-01T20:13:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\na game in which I am generating a ton of nodes\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to generate a 16x16 plane of objects however everytime I edit the width and height of the grid it needs to be cleared and updated\r\n\r\ndoing so by looping through all nodes is too slow in gdscript and there needs to be a way to clear a branch all at once.\r\npossibly through pointers\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest remove_children() be added as a work around.\r\nthis would be a fast way of clearing all the children of a node\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`node.remove_children()`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nidk if it would be used often but we already had a merge request [here](https://github.com/godotengine/godot/pull/8337) but was shut down\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause its a simple way to manage nodes without slowing down godot\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/764/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/762",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/762/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/762/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/762/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/762",
    "id": 608639486,
    "node_id": "MDU6SXNzdWU2MDg2Mzk0ODY=",
    "number": 762,
    "title": "Allow to discard excessive arguments in signal connection",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-28T21:52:18Z",
    "updated_at": "2020-10-11T13:33:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is partially implemented, see this comment: https://github.com/godotengine/godot-proposals/issues/762#issuecomment-706705529\r\n___\r\n\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGame using lots of signals.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI sometimes want to free an object after finishing animation. I can do it entirely in editor except one thing - I can't connect `animation_finished` signal to `queue_free`, because it emits with one parameter, which makes the call fail. In many cases, I have to add a script just to connect this signal to a method taking unused argument and calling `queue_free`. It's meh. Recently I had my custom signal connected to `queue_free` (without script), but later decided that it needs additional argument in some cases, so the nodes that didn't need this argument are now broken xd (I have to add a script just to work around this limitation now)\r\n\r\nOther use examples include methods like\r\n```\r\nfunc some_callback(whatever):\r\n    ...\r\n```\r\nIf I wouldn't have disabled warnings, I would get \"unused parameter\" here.\r\n\r\nHere's an old issue about this proposal: https://github.com/godotengine/godot/issues/21844\r\nSome people already supported it >\\_>\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere could be a flag for `connect` called `CONNECT_DISCARD_EXTRA` (or some other name) that makes excessive arguments discarded, so that the method would call instead of throwing \"Too many arguments\" error.\r\n\r\nAlternatively this could be a default behavior, but it might not be a good idea.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCheck this PR: https://github.com/godotengine/godot/pull/38289\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, kind of. The thing is that with this feature I wouldn't need some of these scripts.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it's about core. It can't be an add-on (although it would be fine for me if it could).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/762/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/761",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/761/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/761/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/761/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/761",
    "id": 608606223,
    "node_id": "MDU6SXNzdWU2MDg2MDYyMjM=",
    "number": 761,
    "title": "Save non exported variables in PackedScenes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-28T20:48:48Z",
    "updated_at": "2020-05-01T22:37:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 3D Tower defense game that requires saving a node with a grid\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ncurrent gridmaps only work for meshes so made my own grid class (not node) and tried to save a node with a reference to it at runtime as a packed scene.\r\n\r\nto my surprise I found out godot doesn't support saving variables in packed scenes unless they are exported and custom classes can't be exported.\r\n\r\nthis forces developers to export everything even if they want to have it hidden.\r\nwhich in this case isn't even possible.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest that all variables/properties are saved in packed scenes or at least give us a way to mark them as serializable\r\n\r\nthis allows people like myself to save custom classes in packed scenes without resorting to json and not having to export them later when its supported\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\neither allow us to use a serializable keyword or just save the entire scene and its state including its non exported variables\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nright now data oriented design is horrible in godot and we can't do much at all without making everything a node. this would be used everytime someone saved a packed scene\r\nand i don't know of a way to work around this. but let me know if you do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause we shouldn't have to have everything as a node in godot and currently like I said data oriented design is horrible in godot \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/760",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/760/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/760/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/760/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/760",
    "id": 608463256,
    "node_id": "MDU6SXNzdWU2MDg0NjMyNTY=",
    "number": 760,
    "title": "Add unhide/show signal to canvas item",
    "user": {
      "login": "iwek7",
      "id": 9964886,
      "node_id": "MDQ6VXNlcjk5NjQ4ODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9964886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iwek7",
      "html_url": "https://github.com/iwek7",
      "followers_url": "https://api.github.com/users/iwek7/followers",
      "following_url": "https://api.github.com/users/iwek7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iwek7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iwek7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iwek7/subscriptions",
      "organizations_url": "https://api.github.com/users/iwek7/orgs",
      "repos_url": "https://api.github.com/users/iwek7/repos",
      "events_url": "https://api.github.com/users/iwek7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iwek7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-28T16:46:13Z",
    "updated_at": "2020-04-28T19:15:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nPersonal projects as well as buch of open source ones\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have two nodes (`CanvasItems`) `A` and `B`. Now node `A` sometimes is visible and sometimes not but when node `B` starts to be visible I want to make node `A` visible as well. As an extra I do not want to store any reference to `B` in `A` - i want to do this stuff purely with signals.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAs per https://docs.godotengine.org/en/3.2/classes/class_canvasitem.html there are now there are two signals emmited when visibility of canvasItem changes:\r\n- `hide` when node is hidden - well I don't care about it, I want to react to visible\r\n- `visibility_changed` when visibility of the node changes - well I can use it, but it does not inform what visiblity was changed to, so I need to know what it was before and as mentioned, I don't know anything about node `B` in node `A`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nJust emit new signal when canvas item changes in the same `if` that emits `hide` signal\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou can make just emit custom shown signal in `B` but it strikes me as something very basic that should be part of the engine. After all why there is special signal for `hide` and not for `shown` or `unhide`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n`CanvasItem` is core node\r\n\r\nOne additional thing for consideration is that it will probably break any custom signals with conflicting name that users implemented.\r\nIf you're interested I'd gladly provide a PR",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/760/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/759",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/759/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/759/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/759/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/759",
    "id": 608461987,
    "node_id": "MDU6SXNzdWU2MDg0NjE5ODc=",
    "number": 759,
    "title": "Camera property for Viewport",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-28T16:44:12Z",
    "updated_at": "2020-05-07T08:07:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was experimenting with viewports and the fact that the camera must be a child of the viewport immediately looked clunky, this way the camera is \"detatched\" from the rest, the most obvious issue is that you can't attach that camera to another node, you need to add code to do that. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn my opinion it would be better for the viewport to have a Camera property instead of a Camera as a child, this way the camera could be anywhere and act as all the other nodes.\r\nIt doesn't necesserely need to replace the old method, they could coexist, to avoid conficts all we need is a rule that decides who between the camera in the camera property and the camera child has the priority.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe viewport has a new field where to specify the camera.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know how much viewports are used, but i'm sure that this would improve the work of those using them.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nViewports and Cameras are core features of the engine, so i imagine this needs to be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/759/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/758",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/758/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/758/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/758/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/758",
    "id": 607814389,
    "node_id": "MDU6SXNzdWU2MDc4MTQzODk=",
    "number": 758,
    "title": "Implement a trait/mixin system and combine it with groups",
    "user": {
      "login": "MathiasBaumgartinger",
      "id": 33001106,
      "node_id": "MDQ6VXNlcjMzMDAxMTA2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/33001106?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MathiasBaumgartinger",
      "html_url": "https://github.com/MathiasBaumgartinger",
      "followers_url": "https://api.github.com/users/MathiasBaumgartinger/followers",
      "following_url": "https://api.github.com/users/MathiasBaumgartinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/MathiasBaumgartinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MathiasBaumgartinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MathiasBaumgartinger/subscriptions",
      "organizations_url": "https://api.github.com/users/MathiasBaumgartinger/orgs",
      "repos_url": "https://api.github.com/users/MathiasBaumgartinger/repos",
      "events_url": "https://api.github.com/users/MathiasBaumgartinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MathiasBaumgartinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-04-27T20:00:05Z",
    "updated_at": "2020-09-25T10:46:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA landscape-visualization software: https://github.com/boku-ilen/landscapelab. It uses geo-data to dynamically create a world. Having the right geo-data every place on the world can be mimiced. There is also VR-features which in the near future will be extended.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAs our project get's huger every week, sometimes it is really hard to keep an overview. Inheritance can cause head-aches with projects of this size, also (thankfully) inheritance is relatively limited in godot. A trait-system like the one in [rust](https://doc.rust-lang.org/reference/types/trait-object.html) could be the perfect workaround. \r\nCurrently we have the problem that the whole visualization that is happening should get capsulated and work as a child-scene of something else to possible have more than one visualization at the same time, or for example render the world on a table. Sadly we used a lot of ``global_transform`` which limits or progress.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAs mentioned before, a trait system could be very helpful reducing inheritance head-aches and at the same time could help the programming paradigm of DRY (don't repeat yourself). [Rust](https://doc.rust-lang.org/reference/types/trait-object.html) offers a way to implement traits for a class, i think one could greatly combine a similar system with groups.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nBeing able to add nodes to a group in the editor helps reducing programming work and scripts. My idea would be to be able to create a new script and add it to a godot group. Every node that is added in this group will automatically implement this trait as well. As gdscript works duck typed and is not really compareable to rust, i would not recommend using it the way rust does but much rather simply attaching the script to this node. \r\nAlternatively if the idea with groups is not liked, i would recommend a system like the one in python: https://py3traits.readthedocs.io/en/latest/readme.html. Traits could then easily be added in the ready function in godot. \r\n\r\nFor my stated problem i would imagine something like this:\r\n```\r\nextends Spatial\r\n\r\n\r\nvar relative_transform: Transform setget set_relative_transform, get_relative_transform\r\nvar relation_node: Spatial = null\r\n\r\n\r\nfunc set_relative_transform(t):\r\n\tassert(relation_node != null)\r\n\t\r\n\trelative_transform = t\r\n\tglobal_transform = relation_node.transform * t\r\n\r\n\r\nfunc get_relative_transform():\r\n\tassert(relation_node != null)\r\n\t\r\n\tvar node = self\r\n\tvar t = transform\r\n\t\r\n\twhile node != relation_node:\r\n\t\tnode = node.get_parent()\r\n\t\tt *= node.transform\r\n\t\r\n\treturn t\r\n```\r\n\r\nIt should be automatically added and i can simply call for ``node.relative_transform = x`` just the way i would do it with global_transform\r\n\r\nThe scripts would be attached somehow like this: \r\n![grafik](https://user-images.githubusercontent.com/33001106/80409487-44112600-88c9-11ea-8120-2752c2558757.png) \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWell kind of yes to be honest, probably the closest to this is inheritance. However, especially as multiple inheritance is not allowed, one is kind of limited in godot. Having a superclass you want many nodes to inherit, it could happen, that it already is an inheriting node. Also, when combining it with groups it could be really helpful with reducing scripts and other overhead.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI honestly think it would be really challenging to implement something like this. Having the insights from the core developers would probably be helpful when doing this. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/758/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/757",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/757/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/757/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/757/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/757",
    "id": 607813562,
    "node_id": "MDU6SXNzdWU2MDc4MTM1NjI=",
    "number": 757,
    "title": "Rename C# override methods to use `On` prefix instead of `_`",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-27T19:58:42Z",
    "updated_at": "2020-04-28T09:30:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTower Defense Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOCD related to C# naming convention \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRename node signals and hooks to use `On` prefix instead of `_`\r\n\r\nexample\r\n` void OnReady() {}`\r\nother then..\r\n`void _Ready() {}\r\n`\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would just be renaming all of the hooks and signals to follow the C# naming convention in C# scripts.\r\n\r\nother languages would not be effected\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used every time someone looks at your code and no it can' be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit would just be a change in the mono library",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/757/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/756",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/756/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/756/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/756/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/756",
    "id": 607136292,
    "node_id": "MDU6SXNzdWU2MDcxMzYyOTI=",
    "number": 756,
    "title": "New Physics2D PulleyJoint",
    "user": {
      "login": "sean256",
      "id": 6920955,
      "node_id": "MDQ6VXNlcjY5MjA5NTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6920955?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sean256",
      "html_url": "https://github.com/sean256",
      "followers_url": "https://api.github.com/users/sean256/followers",
      "following_url": "https://api.github.com/users/sean256/following{/other_user}",
      "gists_url": "https://api.github.com/users/sean256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sean256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sean256/subscriptions",
      "organizations_url": "https://api.github.com/users/sean256/orgs",
      "repos_url": "https://api.github.com/users/sean256/repos",
      "events_url": "https://api.github.com/users/sean256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sean256/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-26T23:04:08Z",
    "updated_at": "2020-04-27T07:16:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D platformer with physics based puzzles\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nImplementing pulleys has proven to be way beyond my capability\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy having pulley joints built in I do believe it can unlock quite a bit of interesting physics based interactions.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have used something like this before in Phaser with Box2D, you can see a working example in the browser here: https://phaser.io/examples/v2/box2d/pulley-joint\r\n\r\nIf this were gd script perhaps something like:\r\n\r\n```gd\r\nvar joint = PulleyJoint2D.new()\r\njoint.node_a = $someNodePath\r\njoint.node_b = $someOtherNodePath\r\n# where the virtual ropes go to for each node\r\njoint.pulley_a_position = Vector2(500, 100)\r\njoint.pulley_b_position = Vector2(600, 100)\r\n# optional: pulley_a_length, pulley_b_length: defaults to distance between pulley points and nodes\r\n# nice to have: a value to define the ratio between both ends of the pulley to simulate tension in a multiple pulley system\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope, not that I found\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI tried implementing a really basic vertical only pulley between 2 bodies and came across the following issues (note I am lacking a lot of skill here):\r\n- calculating the force applied to a body considering it's mass and the mass of interacting bodies proved to be very hard\r\n- applying the opposite force to the other body in physics process or integrate forces did not work since outside forces are applied between the 2, or so I think.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/756/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/755",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/755/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/755/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/755/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/755",
    "id": 607017697,
    "node_id": "MDU6SXNzdWU2MDcwMTc2OTc=",
    "number": 755,
    "title": "Add object snapping to the floor/vertices for the 3D editor viewport",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-26T13:53:15Z",
    "updated_at": "2020-11-14T12:50:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\n3D exploration game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nPlacing objects in 3d is hard, because moving them is always aligned to the camera or to one of the axis.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSnapping similar to Blender would make dragging-and-dropping objects into the scene much quicker. It would also make moving objects easier.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![2020-04-26-163227_2646x1024_scrot](https://user-images.githubusercontent.com/28286961/80310670-3cc01e80-87dc-11ea-8d61-06d2dc74bf6a.png)\r\n![ezgif-4-6f95030788e2](https://user-images.githubusercontent.com/28286961/80309509-ca4c4000-87d5-11ea-86cd-0c307297c533.gif)\r\n\r\nMore examples from #21006:\r\n![Snap example](https://user-images.githubusercontent.com/2306560/44104007-baa980a8-9fbb-11e8-9981-4f67c6e2b8cf.gif)\r\n\r\nThis is already implemented for when you drag a model into the scene, but just for a very short range:\r\n![ezgif-4-887632b844d3](https://user-images.githubusercontent.com/28286961/80312142-ea82fb80-87e3-11ea-96d8-eaea1b61c179.gif)\r\n\r\nSeems like the distance is hardcoded to 10 here:\r\nhttps://github.com/godotengine/godot/blob/56437cddeb3b4ff362ff23db27e8eab84c820959/editor/plugins/spatial_editor_plugin.cpp#L3184-L3186\r\n\r\n[This](https://github.com/godotengine/godot/blob/56437cddeb3b4ff362ff23db27e8eab84c820959/editor/plugins/spatial_editor_plugin.cpp#L3184-L3239) should be used [here](https://github.com/godotengine/godot/blob/56437cddeb3b4ff362ff23db27e8eab84c820959/editor/plugins/spatial_editor_plugin.cpp#L1443 ) if snapping is enabled.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou can use the \"Snap to floor\" option, but it is slower and not real time.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt improves an existing feature and complements the core 3D editing experience well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/755/reactions",
      "total_count": 7,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/754",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/754/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/754/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/754/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/754",
    "id": 606977506,
    "node_id": "MDU6SXNzdWU2MDY5Nzc1MDY=",
    "number": 754,
    "title": "Warn if script inheriting tool script isn't tool",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-26T10:28:40Z",
    "updated_at": "2020-05-15T21:44:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA complex metroidvania game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use tool scripts a lot in my project, because they are handy to update a scene based on exported properties. For a particular example, I have a class (with `class_name`) called NPC, which has basic interaction code and uses `tool` for updating sprite based on a variable. However the base NPC is little useful, so each NPC inherits it and provides own interaction code.\r\n\r\nMy problem is that the inheriting script must be a tool too. I've ran into this multiple times already - when you inherit tool script, the inheriting script must be explicitly tool too or it won't work as such. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI forgot to enable it few times and it caused some confusion, so I thought that a warning when inheriting script doesn't have `tool` keyword would be useful. This way instead of wasting few minutes trying to figure out why the script behaves weird, you could just see that you forgot to make it `tool`.\r\n\r\nAlternatively we could make the inheriting script automatically be a tool.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf a script inherits tool script, warn if it doesn't have `tool` keyword too. It would be a standard warning, so someone could disable it if their action was intended.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nInheriting tool scripts might not be a very common operation, but there's no way to work around my problem.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImpossible to make plugin for this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/754/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/753",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/753/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/753/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/753/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/753",
    "id": 606869514,
    "node_id": "MDU6SXNzdWU2MDY4Njk1MTQ=",
    "number": 753,
    "title": "Different syntax & semantics for warning exemptions",
    "user": {
      "login": "snoopdouglas",
      "id": 4892574,
      "node_id": "MDQ6VXNlcjQ4OTI1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4892574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/snoopdouglas",
      "html_url": "https://github.com/snoopdouglas",
      "followers_url": "https://api.github.com/users/snoopdouglas/followers",
      "following_url": "https://api.github.com/users/snoopdouglas/following{/other_user}",
      "gists_url": "https://api.github.com/users/snoopdouglas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/snoopdouglas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/snoopdouglas/subscriptions",
      "organizations_url": "https://api.github.com/users/snoopdouglas/orgs",
      "repos_url": "https://api.github.com/users/snoopdouglas/repos",
      "events_url": "https://api.github.com/users/snoopdouglas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/snoopdouglas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-04-25T22:36:13Z",
    "updated_at": "2020-05-15T12:24:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA space shooter.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm an old GCC blowhard, and so want to treat warnings as errors. I've figured out how to use `#warning-ignore:`, but it hasn't been easy.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n* Given that the exemptions can directly affect the course of execution (in the case of 'treat warnings as errors'), I think they **shouldn't be comments**.\r\n* A couple of other syntax changes, as described below; everything here is to help make the warning exemptions clearer.\r\n* It is very important that the script editor provides autocompletion for these. We don't have that right now.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n`@` is a common character to use for decorators, and I think it'd apply nicely here.\r\n\r\nAdditionally, as it stands, the first half of the expression is kebab-cased while the second is snake_cased. I understand how this might've come about, but still think it should change. There isn't *anything* else in GDScript, to my knowledge, that uses kebab-casing.\r\n\r\nHere's an example:\r\n\r\n```gdscript\r\n# ignore all unused local variables:\r\n@warning_ignore_all unused_variable\r\n\r\n# ignore all unused class variables on the next line:\r\n@warning_ignore unused_class_variable\r\nvar v: int\r\n\r\nfunc f(x: int) -> int:\r\n  # ignore all integer division on the next line:\r\n  @warning_ignore integer_division\r\n  return (x / 4) + (x / 3)\r\n```\r\n\r\nNote the change in semantics for the last example: as it stands, multiple `#warning-ignore` lines need to precede a line which breaks the rules multiple times.\r\n\r\nAnd to replace `#warnings-disable`:\r\n\r\n```gdscript\r\n# disable all warnings for this entire file\r\n@warnings_disable\r\n```\r\n\r\nHowever: the pluralisation `warnings` here annoys me a bit, as does the similarity in semantics between the words `ignore` and `disable`. `@warning_ignore_all` has no plural, but it is plural in nature. Maybe something for discussion.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAddons can't change GDScript semantics (to my knowledge), and IMHO they shouldn't.\r\n\r\n---\r\n\r\nCC: godotengine/godot-docs#3447",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/750",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/750/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/750/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/750/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/750",
    "id": 606694143,
    "node_id": "MDU6SXNzdWU2MDY2OTQxNDM=",
    "number": 750,
    "title": "IK and Physical Bone Improvements ",
    "user": {
      "login": "NHodgesVFX",
      "id": 11403345,
      "node_id": "MDQ6VXNlcjExNDAzMzQ1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11403345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NHodgesVFX",
      "html_url": "https://github.com/NHodgesVFX",
      "followers_url": "https://api.github.com/users/NHodgesVFX/followers",
      "following_url": "https://api.github.com/users/NHodgesVFX/following{/other_user}",
      "gists_url": "https://api.github.com/users/NHodgesVFX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NHodgesVFX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NHodgesVFX/subscriptions",
      "organizations_url": "https://api.github.com/users/NHodgesVFX/orgs",
      "repos_url": "https://api.github.com/users/NHodgesVFX/repos",
      "events_url": "https://api.github.com/users/NHodgesVFX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NHodgesVFX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-25T05:29:23Z",
    "updated_at": "2020-07-14T21:10:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D game that makes use IK and PhysicalBones\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIK in Godot is standalone and as such doesn't really integrate with the animation tree. In addition its missing some features such as full body IK and constraints. \r\n\r\nPhysical Bones also suffer from not being integrated into the animation tree. In addition it would be great for physical bones to work while the animation is playing.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIK in godot uses the Fabric algorithm, an extension to the base paper extends the algorithm for support of constraints. So, it shouldn't be to much work to add constraints or full body IK.\r\n\r\nFull body support basically just needs constraints and a method to specify multiple targets per IK systems. There might be more needed but it seems the current IK solver can solve an arbitrary amount of bones.\r\n\r\nThe other issue is that IK needs to work with the animation tree somehow. Maybe IK could have its own node in the animation tree that can then be blended with other animations. For blending it should support a Mix Mode and a Add mode at least.\r\n\r\nA Minor improvement to the IK system would be to support directly using a node for the magnet position.\r\n\r\nPhysical Bones should be able to calculate physics on top of an animation. This way if you punch a character the physics system can respond to the impact. In UE4 this is accomplished by converting animation data to physics motors.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI sorta explained this above so, Ill use this to show other implementations of IK\r\n\r\nFull Body IK and Additive Blending: https://www.youtube.com/watch?v=mNvtZCboy7w\r\nFull Body IK: https://www.youtube.com/watch?v=n6iLQSbnUyA\r\n\r\nPhysical Animation: https://youtu.be/r40PJ6r_P4c?t=2134\r\n\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAnimation blending for IK is used frequently in games and full body IK is very popular for VR games.  Physical Animation is useful to add more interactivity and realism to characters.  It can not be worked around with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIK, PhysicalBone, and the animation tree are in core already.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/750/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/749",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/749/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/749/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/749/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/749",
    "id": 606622478,
    "node_id": "MDU6SXNzdWU2MDY2MjI0Nzg=",
    "number": 749,
    "title": "Support different passwords for keystore and key (Android export)",
    "user": {
      "login": "Filius-Patris",
      "id": 37048904,
      "node_id": "MDQ6VXNlcjM3MDQ4OTA0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/37048904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Filius-Patris",
      "html_url": "https://github.com/Filius-Patris",
      "followers_url": "https://api.github.com/users/Filius-Patris/followers",
      "following_url": "https://api.github.com/users/Filius-Patris/following{/other_user}",
      "gists_url": "https://api.github.com/users/Filius-Patris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Filius-Patris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Filius-Patris/subscriptions",
      "organizations_url": "https://api.github.com/users/Filius-Patris/orgs",
      "repos_url": "https://api.github.com/users/Filius-Patris/repos",
      "events_url": "https://api.github.com/users/Filius-Patris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Filius-Patris/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-24T22:43:17Z",
    "updated_at": "2020-09-18T21:19:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA project with CI/CD pipelines for (among others) the Android platform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently you cannot supply different passwords for the keystore and the key itself.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt allows me to specify separate passwords for the keystore and the key within in the export settings.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like the `keystore/release_password` have a field for the `alias` (or `user` how Godot often calls it) password in `export_presets.cfg`.\r\nIf it is not specified, the `keystore/release_password` will probably fulfil both functions, to keep compatibility\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf you haven't yet published the app with a key meeting this criteria, you can generate one with the same password for both cases.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHaving different passwords [is recommended][1].\r\n\r\n[1]: https://developer.android.com/studio/publish/app-signing#generate-key\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/749/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/748",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/748/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/748/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/748/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/748",
    "id": 606264641,
    "node_id": "MDU6SXNzdWU2MDYyNjQ2NDE=",
    "number": 748,
    "title": "Create a script template manager for the editor",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-24T12:06:39Z",
    "updated_at": "2020-08-30T11:01:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProject-agnostic, editor-related.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have quite a bunch of abstract (base) scripts which can be treated as script templates. The problem is that it's not really obvious how to create them, and oftentimes requires you to open up an external filesystem explorer just to locate and modify them, and in fact there are several places where these templates can be located now: godotengine/godot#31111 (project-specific templates alleviate the issue to some extent).\r\n\r\nThe ability to create the script templates seems like a hidden feature for many users as well, and it's currently undocumented: ~~godotengine/godot-docs#398~~ documented now, see [Creating script templates](https://docs.godotengine.org/en/latest/getting_started/scripting/creating_script_templates.html) page.\r\n\r\nThe exact syntax for placeholders is also not obvious, unless you lookup the default script template located per editor, some example:\r\n```gdscript\r\nextends %BASE%\r\n\r\nfunc _ready():\r\n%TS%pass\r\n```\r\n\r\nAlso additional type placeholders like:\r\n```gdscript\r\n\"%INT_TYPE%\", \": int\"\r\n\"%STRING_TYPE%\", \": String\"\r\n\"%FLOAT_TYPE%\", \": float\"\r\n\"%VOID_RETURN%\", \" -> void\"\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that it would be good to create a `ScriptTemplateManager` control, and you won't have to document it that much being user-friendly.\r\n\r\nCurrently there are two places where templates can be found:\r\n1. Project-specific templates, for instance: `res://script_templates`, which is the default path.\r\n2. Editor templates, located at `%APPDATA%/Godot/script_templates/`.\r\n\r\nThere can be several scripts per each language supported:\r\n* `empty.gd` (GDScript)\r\n* `empty.cs` (C#)\r\n\r\nThe default template is always generated dynamically per language.\r\n\r\nThen, the `ScriptTemplateManager` would just list either project or editor templates, and filter them per language, and of course allowing the user to create, modify, and delete existing templates. Having a bunch of buttons to insert built-in placeholders like `%BASE%` would also be nice.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSome generalized mockup for the sake of giving an idea:\r\n\r\n![Annotation 2020-04-24 144515](https://user-images.githubusercontent.com/17108460/80209212-51fd4780-863a-11ea-9590-8c6ed1669c8a.png)\r\n\r\nOf course there would be a text editor which will allow you to actually modify the template, and some icons to rename/remove the individual templates from the list.\r\n\r\nSome back-end is also already implemented as described in https://github.com/godotengine/godot/pull/31111#issuecomment-518635426. So there's another important part of telling whether project-specific templates override editor ones (this logic is currently hard-coded within `ScriptCreateDialog` and likely can be moved to `ScriptTemplateManager` as proposed here.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's totally possible to use script templates without this.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSome things are inaccessible to scripting, namely:\r\n* `ScriptServer` which can be used to list supported languages to be displayed in the manager (UPDATE: linking a PR which helps to implement this on the scripting side: godotengine/godot#40147)\r\n* `ScriptLanguage` is not exposed to scripting either to generate default templates:\r\n\r\n```cpp\r\nvirtual Ref<Script> get_template(const String &p_class_name, const String &p_base_class_name) const = 0;\r\nvirtual void make_template(const String &p_class_name, const String &p_base_class_name, Ref<Script> &p_script) {}\r\nvirtual bool is_using_templates() { return false; }\r\n```\r\n\r\nSo partially it's doable, but do users really have to suffer the lack of usability of the built-in feature already present in core?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/748/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/745",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/745/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/745/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/745/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/745",
    "id": 605651420,
    "node_id": "MDU6SXNzdWU2MDU2NTE0MjA=",
    "number": 745,
    "title": "Show the remote scene in the canvas view while debugging",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-23T15:53:32Z",
    "updated_at": "2020-12-20T07:41:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA Starcraft-like RTS.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI need to search in the remote scene tree when I need to view the stats of a unit while debugging the game. This is difficult if the tree is large or the node names are not descriptive.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWhen the scene tree is in \"remote\" mode, the remote scene should show in the canvas view like it does with the local tree. You can select and modify nodes like normal. Selected nodes show their properties in the inspector.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![2020-04-23-174452_1280x1024_scrot](https://user-images.githubusercontent.com/28286961/80120385-2f602580-858b-11ea-88a2-03f663bf6ac8.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nFor it to be implemented well it needs to be built-in.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/745/reactions",
      "total_count": 8,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/744",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/744/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/744/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/744/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/744",
    "id": 605649029,
    "node_id": "MDU6SXNzdWU2MDU2NDkwMjk=",
    "number": 744,
    "title": "Reduceable render resolution for mobile VR",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862117,
        "node_id": "MDU6TGFiZWwxNjk3ODYyMTE3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:xr",
        "name": "topic:xr",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-04-23T15:50:20Z",
    "updated_at": "2020-09-24T00:55:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNot working on a particular project right now. I'm just experimenting and tinkering with mobile VR after I designed and 3D printed a headset.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMobile hardware is really limiting in terms of graphics performance.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently the render resolution is the display resolution + oversampling, thus the only thing that can be changed is the oversampling factor, and since it is extra pixels rendered on top of the base resolution, the final resolution can only be increased right now.\r\nWhat I want is a way to reduce the **base resolution**. Since the framerate in VR is of a much higher importance than resolution, a reduction in rendering resolution from 1920x1080 to 1280x720 for example should help significantly increase the framerate.\r\nMost if not all phones with OLED displays have their subpixels arranged in a [\"PenTile\"](https://en.wikipedia.org/wiki/PenTile_matrix_family) RGBG configuration, where for each 2 green subpixels, there is only 1 red and 1 blue subpixel, so for a 1920x1080 display, there will be 1920x1080 green subpixels, but only 960x540 (half) red and blue subpixels. This makes the benefit of rendering at display resolution even smaller over the benefit of rendering at a lower resolution in exchange for a better framerate.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe width and height settings in Project Settings > Display > Window could be used to set the render resolution instead when using the mobile VR interface.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis involves modification of the core code, so no it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSame as above, it involves modification of core code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/744/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/741",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/741/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/741/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/741/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/741",
    "id": 605319642,
    "node_id": "MDU6SXNzdWU2MDUzMTk2NDI=",
    "number": 741,
    "title": "Prioritize files that are closer to the variable name in `load()`'s file suggestion list",
    "user": {
      "login": "mount2010",
      "id": 13136505,
      "node_id": "MDQ6VXNlcjEzMTM2NTA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13136505?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mount2010",
      "html_url": "https://github.com/mount2010",
      "followers_url": "https://api.github.com/users/mount2010/followers",
      "following_url": "https://api.github.com/users/mount2010/following{/other_user}",
      "gists_url": "https://api.github.com/users/mount2010/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mount2010/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mount2010/subscriptions",
      "organizations_url": "https://api.github.com/users/mount2010/orgs",
      "repos_url": "https://api.github.com/users/mount2010/repos",
      "events_url": "https://api.github.com/users/mount2010/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mount2010/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-23T07:52:51Z",
    "updated_at": "2020-05-04T07:52:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis suggestion does not apply to a particular project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd like selecting a file to load, especially when working dynamically with classes, to be faster. Right now, it follows alphabetical order.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd like load() to prioritize files closer to the variable name.  \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFor instance, if I named the variable Item, the file \"res://Item.gd\" should be at the top of the list.\r\n`var Item = load(\"`\r\nGodot will suggest\r\n`\"res://item.gd\"`. If it is possible to read files at this stage, a possible way of \"guessing\" the right file might be to read the class_name of said files. Otherwise, a simple Llevenstein distance sort of files would be nice.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDon't think load() can be changed by an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/741/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/740",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/740/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/740/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/740/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/740",
    "id": 604766053,
    "node_id": "MDU6SXNzdWU2MDQ3NjYwNTM=",
    "number": 740,
    "title": "RigidBody physics test step or calculate test collision",
    "user": {
      "login": "Garbaz",
      "id": 13696798,
      "node_id": "MDQ6VXNlcjEzNjk2Nzk4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13696798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Garbaz",
      "html_url": "https://github.com/Garbaz",
      "followers_url": "https://api.github.com/users/Garbaz/followers",
      "following_url": "https://api.github.com/users/Garbaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Garbaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Garbaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Garbaz/subscriptions",
      "organizations_url": "https://api.github.com/users/Garbaz/orgs",
      "repos_url": "https://api.github.com/users/Garbaz/repos",
      "events_url": "https://api.github.com/users/Garbaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Garbaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-22T13:39:17Z",
    "updated_at": "2020-04-22T16:22:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n![](https://i.imgur.com/7hIygu8.png)\r\n\r\n**Describe the project you are working on:**\r\n\r\nA game with bouncy grenades being shot from a grenade launcher.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI would like to display the predicted trajectory of the grenade before shooting it. This requires somehow getting the flight path of a `RigidBody` (including bouncing of other `PhysicsBody`s) over many physics steps, but in one frame.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis could be solved by allowing stepping the physics of the whole world manually many times in one frame. This probably would not be practical though, because resource intensive.\r\n\r\nWhat would be very helpful thought, is a way to calculate the physics of a `RigidBody` with the world manually. Either a function that runs a full time step for the `RigidBody`, returning the position,velocity,etc (Maybe as a `PhysicsDirectBodyState`?) it would have after the step.\r\n\r\nOr, since `PhysicsDirectSpaceState.cast_motion()` already exists, it would be sufficient to have a function that, given a certain collision, returns how it would change it's physics state.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```python\r\n# As member of RigidBody (don't know what a good function name would be)\r\n# override_bodystate - a way to pass in a different physics state (e.g. from previous test step),\r\n#                      takes the RigidBody's current \"real\" physics state if null.\r\n# delta - How big a time step should be calculated, defaulting to the PhysicsServer's time step. \r\nPhysicsDirectBodyState physics_test_step(override_bodystate : PhysicsDirectBodyState = null, delta: float = 0.01667):\r\n    # Calculate movement of RIgidBody\r\n    # Check for collisions with world\r\n    # Calculate changed physics state, as if this collision would occur \"for real\".\r\n    # Return new physics state\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, at least not to my knowledge, my attempt at doing this manually [was a lot of code](https://gist.github.com/Garbaz/5c8b9a313617c2904aa8cac02db2b003), didn't work perfectly and required a bunch of assumptions about the RigidBody, essentially replicating internal physics code (poorly).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSince this necessarily would be integrated with the physics engine, I don't think this can be done as  an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/740/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/739",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/739/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/739/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/739/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/739",
    "id": 603620408,
    "node_id": "MDU6SXNzdWU2MDM2MjA0MDg=",
    "number": 739,
    "title": "Add a way to copy and paste all the collisions for auto-tiles",
    "user": {
      "login": "edazpotato",
      "id": 46797041,
      "node_id": "MDQ6VXNlcjQ2Nzk3MDQx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/46797041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/edazpotato",
      "html_url": "https://github.com/edazpotato",
      "followers_url": "https://api.github.com/users/edazpotato/followers",
      "following_url": "https://api.github.com/users/edazpotato/following{/other_user}",
      "gists_url": "https://api.github.com/users/edazpotato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/edazpotato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/edazpotato/subscriptions",
      "organizations_url": "https://api.github.com/users/edazpotato/orgs",
      "repos_url": "https://api.github.com/users/edazpotato/repos",
      "events_url": "https://api.github.com/users/edazpotato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/edazpotato/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-21T00:31:43Z",
    "updated_at": "2020-04-24T03:20:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D platformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is very tedious to set up new auto-tiles for my project even though all of my tilemaps are laid out in exactly the same way\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCopy and paste functionality for collisions for auto-tiles, the same as the copy-and-paste for bitmasks. This would help because since the layout of my tilemaps is always the same, I would only need to set up the collisions once \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is already partially implemented for auto-tiles with the copy-and-paste feature for bitmasks, and I was surprised when I couldn't do the same for collisions",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/739/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/738",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/738/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/738/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/738/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/738",
    "id": 603514282,
    "node_id": "MDU6SXNzdWU2MDM1MTQyODI=",
    "number": 738,
    "title": "AnimationPlayer 3D Transfrom Track Rotation ask for normalized tranform for rotation",
    "user": {
      "login": "danilw",
      "id": 24825887,
      "node_id": "MDQ6VXNlcjI0ODI1ODg3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24825887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danilw",
      "html_url": "https://github.com/danilw",
      "followers_url": "https://api.github.com/users/danilw/followers",
      "following_url": "https://api.github.com/users/danilw/following{/other_user}",
      "gists_url": "https://api.github.com/users/danilw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danilw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danilw/subscriptions",
      "organizations_url": "https://api.github.com/users/danilw/orgs",
      "repos_url": "https://api.github.com/users/danilw/repos",
      "events_url": "https://api.github.com/users/danilw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danilw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-20T20:29:47Z",
    "updated_at": "2020-04-21T07:40:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D animated character\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating new *3D Transfrom Track* in Godot AnimationPlayer, setting rotation is **not usable** for hand-editing, when it presented in GUI. \r\n\r\nRotation ask for normalized Quat, it make impossible to edit it in GUI.\r\nif set not normalized Quat (as for example, someone may expect it rotation by Rad-s) result it error\r\n```\r\n The end quaternion must be normalized.\r\n The start quaternion must be normalized.\r\n```\r\n\r\nfrom [docs class-animation](https://docs.godotengine.org/en/stable/classes/class_animation.html#class-animation)\r\n`int transform_track_insert_key ( int track_idx, float time, Vector3 location, Quat rotation, Vector3 scale )`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI ask to make in animation *3D Transfrom Track*-editing **GUI** Rotation by angles or rad, to make it useful for hand-editing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/736",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/736/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/736/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/736/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/736",
    "id": 603147963,
    "node_id": "MDU6SXNzdWU2MDMxNDc5NjM=",
    "number": 736,
    "title": "Add native menubar support on macOS (global menu)",
    "user": {
      "login": "thomas-alrek",
      "id": 14291825,
      "node_id": "MDQ6VXNlcjE0MjkxODI1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14291825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thomas-alrek",
      "html_url": "https://github.com/thomas-alrek",
      "followers_url": "https://api.github.com/users/thomas-alrek/followers",
      "following_url": "https://api.github.com/users/thomas-alrek/following{/other_user}",
      "gists_url": "https://api.github.com/users/thomas-alrek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thomas-alrek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thomas-alrek/subscriptions",
      "organizations_url": "https://api.github.com/users/thomas-alrek/orgs",
      "repos_url": "https://api.github.com/users/thomas-alrek/repos",
      "events_url": "https://api.github.com/users/thomas-alrek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thomas-alrek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359319259,
        "node_id": "MDU6TGFiZWwyMzU5MzE5MjU5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:macos",
        "name": "platform:macos",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-20T11:01:23Z",
    "updated_at": "2020-09-18T22:04:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot is currently rendering its menus inside of its window.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nOn macOS, native applications have their menus rendered outside of their window, at the top of the screen. This is the expected behavior on macOS, and it would boost my productivity if Godot also followed this UX pattern.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/14291825/79744538-cc5e5c80-8306-11ea-87b0-d8e6305bbfe2.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would see this as a permanent change as this would only affect macOS anyways. Maybe leave in a option to allow the user to revert to the old menu behavior?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI dont know if this would be possible to do as an addon.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/735",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/735/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/735/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/735/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/735",
    "id": 602785490,
    "node_id": "MDU6SXNzdWU2MDI3ODU0OTA=",
    "number": 735,
    "title": "Add iOS Android pen pressure / tilt support",
    "user": {
      "login": "HEAVYPOLY",
      "id": 24432677,
      "node_id": "MDQ6VXNlcjI0NDMyNjc3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24432677?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HEAVYPOLY",
      "html_url": "https://github.com/HEAVYPOLY",
      "followers_url": "https://api.github.com/users/HEAVYPOLY/followers",
      "following_url": "https://api.github.com/users/HEAVYPOLY/following{/other_user}",
      "gists_url": "https://api.github.com/users/HEAVYPOLY/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HEAVYPOLY/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HEAVYPOLY/subscriptions",
      "organizations_url": "https://api.github.com/users/HEAVYPOLY/orgs",
      "repos_url": "https://api.github.com/users/HEAVYPOLY/repos",
      "events_url": "https://api.github.com/users/HEAVYPOLY/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HEAVYPOLY/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-19T18:18:56Z",
    "updated_at": "2020-10-02T20:51:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHEAVYPAINT - Multiplatform graphic painting app [www.heavypoly.com/heavypaint](url)\r\n[](https://www.instagram.com/explore/tags/heavypaint/)\r\n**Describe the problem or limitation you are having in your project:**\r\npen pressure / tilt not working on Android or iOS\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nadd pen pressure/tilt support for iOS/ (iPad pro) and Android (Samsung note 9 pen)\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nsame as how desktop versions work now\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nshould behave the same as desktop",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/735/reactions",
      "total_count": 11,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/734",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/734/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/734/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/734/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/734",
    "id": 602735705,
    "node_id": "MDU6SXNzdWU2MDI3MzU3MDU=",
    "number": 734,
    "title": "Make possible select and copy text in Build Android Project Notice",
    "user": {
      "login": "kienvn",
      "id": 3658115,
      "node_id": "MDQ6VXNlcjM2NTgxMTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3658115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kienvn",
      "html_url": "https://github.com/kienvn",
      "followers_url": "https://api.github.com/users/kienvn/followers",
      "following_url": "https://api.github.com/users/kienvn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kienvn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kienvn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kienvn/subscriptions",
      "organizations_url": "https://api.github.com/users/kienvn/orgs",
      "repos_url": "https://api.github.com/users/kienvn/repos",
      "events_url": "https://api.github.com/users/kienvn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kienvn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-19T14:55:54Z",
    "updated_at": "2020-04-20T07:18:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "![BuildAndroidProject](https://user-images.githubusercontent.com/3658115/79691243-86fb4a00-8288-11ea-962c-a59c813bb74e.jpg)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/732",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/732/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/732/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/732/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/732",
    "id": 602687150,
    "node_id": "MDU6SXNzdWU2MDI2ODcxNTA=",
    "number": 732,
    "title": "Easily load external audio (WAV) files at run-time",
    "user": {
      "login": "Gianclgar",
      "id": 20739619,
      "node_id": "MDQ6VXNlcjIwNzM5NjE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20739619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gianclgar",
      "html_url": "https://github.com/Gianclgar",
      "followers_url": "https://api.github.com/users/Gianclgar/followers",
      "following_url": "https://api.github.com/users/Gianclgar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gianclgar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gianclgar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gianclgar/subscriptions",
      "organizations_url": "https://api.github.com/users/Gianclgar/orgs",
      "repos_url": "https://api.github.com/users/Gianclgar/repos",
      "events_url": "https://api.github.com/users/Gianclgar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gianclgar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-19T11:08:05Z",
    "updated_at": "2020-12-11T21:58:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game able to load an play with external audio files at runtime. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm opening the file this way: \r\n```\r\nfile.open(filepath, file.READ)\r\nvar buffer = file.get_buffer(file.get_len())\r\n#put data into audiostreamsample\r\nvar stream = AudioStreamSample.new()\r\nstream.data = buffer\r\n```\r\nThe problem I'm having is that this method adds 44 bytes of data at the beginning of the audio stream. \r\n\r\nSeems to be the WAV header. After a lot of research this can be figured and find a way to remove those first 44 bytes, but it seems that the WAV header could be bigger in some files. So far I've not been able to find a way to \"detect\" that header size and remove it so only the audio data gets in the stream.\r\n\r\nI don't know if this is the right way to do it, is the only one I've found so far looking at Godot documentation and Q&A.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI think it could be some method like `file.get_audio()`, `file.get_buffer_as_audio` or similar, that automatically removes the audio header, or format the `PoolByteArray` it in a way that `AudioStreamSample` gets it right. \r\n\r\nOr maybe it would be even easier if added a method to `AudioStreamSample` that loads a wav file, e.g. `AudioStreamSample.load_from_wav(\"filepath/filename.wav\")`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the first case, somehow detecting the size of the header, and pass relevant data to `AudioStreamSample` as well as the audio data.\r\n\r\nIn second case, would be automating all this process into a single method in`AudioStreamSample`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI guess, but after many hours trying I still don't know how.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIs a very simple and useful improvement. I think it would also be useful to audio files generated at runtime, and get the audio files metadata.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/732/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/729",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/729/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/729/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/729/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/729",
    "id": 602568334,
    "node_id": "MDU6SXNzdWU2MDI1NjgzMzQ=",
    "number": 729,
    "title": "tool keyword for functions",
    "user": {
      "login": "MarianoGnu",
      "id": 1776044,
      "node_id": "MDQ6VXNlcjE3NzYwNDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1776044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarianoGnu",
      "html_url": "https://github.com/MarianoGnu",
      "followers_url": "https://api.github.com/users/MarianoGnu/followers",
      "following_url": "https://api.github.com/users/MarianoGnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarianoGnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarianoGnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarianoGnu/subscriptions",
      "organizations_url": "https://api.github.com/users/MarianoGnu/orgs",
      "repos_url": "https://api.github.com/users/MarianoGnu/repos",
      "events_url": "https://api.github.com/users/MarianoGnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarianoGnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-18T22:42:46Z",
    "updated_at": "2020-04-21T10:28:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNothing particular\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen tagging an script as tool, every single function inside of it will run in the editor, so if we want to have a single function to work in the Editor we need to put barriers on every other function at the start\r\n`if get_tree().is_editor_hint(): return`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe proposal is to allow to put the `tool` keyword in front of functions which you want to allow execution during the editor\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\ntool func set_texture(p_texture):\r\n    # Only this function runs in editor\r\n    if has_node(\"icon\"):\r\n        $icon.texture = p_texture\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe workaround is make the entire script a tool script and add barriers in functions you don´t want to use, or implement only the editor functions in a separate script and then inherit that script with a no tool script. This is not possible if you already need to extend a different script (as multiple inheritance is forbidden (and for good reasons)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt requiere changes on core (Script class) and GdScript module\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/729/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/728",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/728/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/728/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/728/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/728",
    "id": 602566131,
    "node_id": "MDU6SXNzdWU2MDI1NjYxMzE=",
    "number": 728,
    "title": "Controls: merge Container classes with Control Class",
    "user": {
      "login": "MarianoGnu",
      "id": 1776044,
      "node_id": "MDQ6VXNlcjE3NzYwNDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1776044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarianoGnu",
      "html_url": "https://github.com/MarianoGnu",
      "followers_url": "https://api.github.com/users/MarianoGnu/followers",
      "following_url": "https://api.github.com/users/MarianoGnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarianoGnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarianoGnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarianoGnu/subscriptions",
      "organizations_url": "https://api.github.com/users/MarianoGnu/orgs",
      "repos_url": "https://api.github.com/users/MarianoGnu/repos",
      "events_url": "https://api.github.com/users/MarianoGnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarianoGnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-18T22:28:45Z",
    "updated_at": "2020-05-10T22:24:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThe idea of the project is adding ControlLayout classes ([virtual]Layout, VBoxLayout, HBoxLayout, GridLayout, etc) into a resource, this resource can be assigned to any control, changing inmediately the way children are sorted, by default Control has no layout, and the Container classes and it's subclasses can be deprecated, or just have Layouts assigned by default.\r\nAlso improve the UI to visually display how controls are nested (see Qt as an example)\r\n![image](https://user-images.githubusercontent.com/1776044/79672558-a2435800-81a9-11ea-9d16-9920bd60e99d.png)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is an improvement to the user workflow, it has some advantages:\r\n1. Less nodes in the scene tree, making it easier to understand\r\n2. Allows to change how child nodes are drawn dinamically by just swapping the layout property with GdScript\r\n3. Allows to see and better understand in the CanvasItemEditor how containers work and resize (see Qt example)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLayout could easily be implemented as properties of Control or as a Resource, i have the feeling that resource allows to share custom settings (like separation and such) more easily. Still properties would be more clean for the user\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis is the kind of feature i want to imitate: https://www.youtube.com/watch?v=gWa2rqe8l6E\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be implemented as an script but having this script assigned to every control makes more difficult to then extend this one, (since GdScript doesn ot allow multiple inheritance, so we could not inherit this script and a different one which we need at the same time)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nControl class is so low on the inheritance chain, i cannot extend it from a module in a way that it applies to every subclass",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/728/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/727",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/727/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/727/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/727/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/727",
    "id": 602548388,
    "node_id": "MDU6SXNzdWU2MDI1NDgzODg=",
    "number": 727,
    "title": "Allow to get multiple coordinates of vectors at the same time (swizzling)",
    "user": {
      "login": "Nolkaloid",
      "id": 30960698,
      "node_id": "MDQ6VXNlcjMwOTYwNjk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30960698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nolkaloid",
      "html_url": "https://github.com/Nolkaloid",
      "followers_url": "https://api.github.com/users/Nolkaloid/followers",
      "following_url": "https://api.github.com/users/Nolkaloid/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nolkaloid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nolkaloid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nolkaloid/subscriptions",
      "organizations_url": "https://api.github.com/users/Nolkaloid/orgs",
      "repos_url": "https://api.github.com/users/Nolkaloid/repos",
      "events_url": "https://api.github.com/users/Nolkaloid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nolkaloid/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-04-18T20:48:07Z",
    "updated_at": "2020-08-06T12:13:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D top down shooter\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOperations on different vectors become rather cumbersome when working separately on coordinates:\r\n```gdscript\r\nvelocity = Vector3(6, 1, 6)\r\nvelocity.x *= 2\r\nvelocity.z *= 2\r\n```\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be really useful to be able to access multiple coordinates at the same time like in GLSL:\r\n```gdscript\r\nvelocity = Vector3(6, 1, 6)\r\nvelocity.xz *= 2\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/727/reactions",
      "total_count": 9,
      "+1": 6,
      "-1": 1,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/726",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/726/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/726/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/726/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/726",
    "id": 602458163,
    "node_id": "MDU6SXNzdWU2MDI0NTgxNjM=",
    "number": 726,
    "title": "Add a built-in way to build export templates with size optimizations",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-18T13:15:43Z",
    "updated_at": "2020-05-24T09:50:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n![optimize](https://user-images.githubusercontent.com/59492619/82750978-1e424880-9dc5-11ea-9878-b4b4be010fdc.png)\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA simple 2d side scrolling game for android\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUnable to otimize game for size using scons \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an Optimization Panel in the project settings \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWith an Optimization Panel developers can remove things they dont need instead of having to use scons from Command line and this will also bring opportunities for speed optimization\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it cannot  be used\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nOptimizations cannot be added to the engine through addons \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/726/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/725",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/725/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/725/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/725/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/725",
    "id": 602445097,
    "node_id": "MDU6SXNzdWU2MDI0NDUwOTc=",
    "number": 725,
    "title": "Sprite Polygon: Curving and Collision making",
    "user": {
      "login": "IoneGod",
      "id": 59492619,
      "node_id": "MDQ6VXNlcjU5NDkyNjE5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59492619?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IoneGod",
      "html_url": "https://github.com/IoneGod",
      "followers_url": "https://api.github.com/users/IoneGod/followers",
      "following_url": "https://api.github.com/users/IoneGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/IoneGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IoneGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IoneGod/subscriptions",
      "organizations_url": "https://api.github.com/users/IoneGod/orgs",
      "repos_url": "https://api.github.com/users/IoneGod/repos",
      "events_url": "https://api.github.com/users/IoneGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IoneGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-18T12:06:04Z",
    "updated_at": "2020-04-18T13:03:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2d sideview car racing game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am unable to create an uneven terrain for the car to pass on\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMaking the polygon2d have a  curve property like in Path2d and also a Make collision from polygons property \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n->The \"curve property\"\r\n\r\n![Polygon3](https://user-images.githubusercontent.com/59492619/79637735-b7a08e00-8179-11ea-9e9c-bb28ee92cd7a.PNG)\r\n\r\n->Adding the Curve property in the polygon2d will make a curved ground instead of the image below\r\n\r\n![Polygon1](https://user-images.githubusercontent.com/59492619/79637372-07318a80-8177-11ea-9cae-0efe07912212.PNG)\r\nwhich can be useful in platformers also instead of always using straight tilesets like this\r\n\r\n![Polygon2](https://user-images.githubusercontent.com/59492619/79637617-e1a58080-8178-11ea-82fa-a4e4b5931caf.PNG\r\n\r\n->Next the \"make collision property\" \r\n![Polygon4](https://user-images.githubusercontent.com/59492619/79637913-8bd1d800-817a-11ea-9b28-8fa1ba4097f2.PNG)\r\n-> The make collision property automatically adds a collision shape to the polygon which can also be useful when creating other types of games like I said platformers\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it cant be worked around with a few lines of Code\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe polygon2D is already a core node\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/725/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/724",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/724/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/724/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/724/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/724",
    "id": 602401572,
    "node_id": "MDU6SXNzdWU2MDI0MDE1NzI=",
    "number": 724,
    "title": "Nodes would also benefit from having node_added and node_removed signals.",
    "user": {
      "login": "avencherus",
      "id": 13004169,
      "node_id": "MDQ6VXNlcjEzMDA0MTY5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13004169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avencherus",
      "html_url": "https://github.com/avencherus",
      "followers_url": "https://api.github.com/users/avencherus/followers",
      "following_url": "https://api.github.com/users/avencherus/following{/other_user}",
      "gists_url": "https://api.github.com/users/avencherus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avencherus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avencherus/subscriptions",
      "organizations_url": "https://api.github.com/users/avencherus/orgs",
      "repos_url": "https://api.github.com/users/avencherus/repos",
      "events_url": "https://api.github.com/users/avencherus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avencherus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-04-18T07:42:52Z",
    "updated_at": "2020-11-20T19:47:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D Shooters.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTool code API  and behavior issues.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be useful in many tool scripts to be alerted  when a Node's descending Nodes have been added or removed using a signal.\r\n\r\nCurrently, these signals only exists at the level of the **SceneTree**.\r\n\r\nWithin the editor this signal fires quite frequently, as the editor itself is part of the tree.  This leads any filtering logic to have to constantly filter through hundreds of nodes, and can create serious performance issues.\r\n\r\n![](https://user-images.githubusercontent.com/13004169/45505899-7de5f500-b796-11e8-91d7-de61740ad63c.gif)\r\n\r\n\r\nIt makes it difficult, error prone, and costly.\r\n\r\nWould be better if each node could report what nodes have been added or removed from their hierarchy.\r\n\r\nThere are certainly use cases for this in run-time scripts as well, but I'll have to leave that to others to provide, as my development preference is to try to avoid adding/removing nodes from the scene tree as much as possible.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe signals might be on Node, and the GDScript would follow as:\r\n\r\n```\r\ntool\r\nextends Node2D\r\n\r\nfunc _ready():\r\n\r\n\tconnect(\"node_added\", self, \"node_added\")\r\n\tconnect(\"node_removed\", self, \"node_removed\")\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt usually ends up being a dozen or some lines with the most minimal work around.  The issue though is mainly one of performance.  Having to examine and act on all these editor related nodes with each interaction in the editor.\r\n\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nTwo built-in signals would be far more convenient than rebuilding with a module, and the plugin wouldn't solve the performance issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/724/reactions",
      "total_count": 10,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/723",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/723/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/723/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/723/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/723",
    "id": 602212078,
    "node_id": "MDU6SXNzdWU2MDIyMTIwNzg=",
    "number": 723,
    "title": "Implement support for physical light quantity (lumens/lux)",
    "user": {
      "login": "clayjohn",
      "id": 16521339,
      "node_id": "MDQ6VXNlcjE2NTIxMzM5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16521339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clayjohn",
      "html_url": "https://github.com/clayjohn",
      "followers_url": "https://api.github.com/users/clayjohn/followers",
      "following_url": "https://api.github.com/users/clayjohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/clayjohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clayjohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clayjohn/subscriptions",
      "organizations_url": "https://api.github.com/users/clayjohn/orgs",
      "repos_url": "https://api.github.com/users/clayjohn/repos",
      "events_url": "https://api.github.com/users/clayjohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clayjohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/2",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2/labels",
      "id": 5482292,
      "node_id": "MDk6TWlsZXN0b25lNTQ4MjI5Mg==",
      "number": 2,
      "title": "4.1",
      "description": "This proposal is planned to be implemented in 4.1 or later",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2020-05-31T14:29:07Z",
      "updated_at": "2021-01-08T05:26:43Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 16,
    "created_at": "2020-04-17T20:20:31Z",
    "updated_at": "2021-01-08T05:27:07Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe Godot engine. :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe renderer is currently using arbitrary light units and a user-specified light falloff curve together with an energy multiplier. While this is fine for many use-cases, it makes it very difficult for users to specify physically plausible light values, and it makes it nearly impossible to export a scene from Blender and match the light values. \r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose we add a method for switching between arbitrary units and physical units for lights. This could be in a ProjectSetting, or it could be a toggle within the light itself. \r\n\r\nThe ability to specify physical light values makes it significantly easier to light scenes realistically. For example, standard 45/60 watt household light bulbs produce about 1200 lumens. If the engine works in physical light quanities, users could create an OmniLight3D with 1200 lumens and an appropriate size and then expect it to light up a room-sized room accurately and in a physical plausible way. The current system involves a lot of tweaking and hacks and still may look wrong.\r\n\r\nI further propose that we use inverse square falloff with a user tweakable linear falloff curve. Proper inverse square falloff is needed for lights to look realistic and the linear falloff is still needed because, for efficiency, game engines need to limit the distances that lights can project. Falloff could be specified with a Curve resource that is baked into a texture.\r\n\r\nNote: other engines are moving towards using physical light units. Unreal and Unity HDRP use Lux and Candela/Lumens; Unreal, Unity HDRP, and Cryengine use inverse square falloff. Blender users inverse square falloff as well, but it uses watts instead of lumens. \r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis proposal would change the UI of Light3D derived nodes to allow switching between Godot units and physical units. DirectionalLight3Ds would use lux (intensity over a square meter of receiving surface), while SpotLight3D and PointLight3D would use lumens/candela (intensity of light source in all directions). If possible, we would just remap these values into Godot units and only use Godot units internally.\r\n\r\nFurther, this proposal would change the current attenuation parameters for SpotLight3D and OmniLight3D to a curve resource that allows finer artistic control over the falloff curve. We could either default to inverse square falloff, and then replace by the curve when the curve is specified, or we could apply the curve over the inverse square falloff. Internally, We can store an array of falloff curves as they will all be the same dimension (1024x1) and then index them in the shader, making them easy to use and fast to run \r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't be worked around in script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe conversion from lux/luminance to Godot units could be done in an editor-plugin, however, the falloff curve is embedded deep inside the scene shaders. In order to support both properly, we need to edit the engine itself. \r\n\r\n##### User questions\r\n1. Would it be preferable to only use physcial light units and remove Godot units altogether?\r\n2. Do users prefer a ProjectSetting, or a setting on a per-light basis?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/723/reactions",
      "total_count": 29,
      "+1": 29,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/720",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/720/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/720/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/720/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/720",
    "id": 601871601,
    "node_id": "MDU6SXNzdWU2MDE4NzE2MDE=",
    "number": 720,
    "title": "Automatically Set Main Scene",
    "user": {
      "login": "rontarrant",
      "id": 46418423,
      "node_id": "MDQ6VXNlcjQ2NDE4NDIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46418423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rontarrant",
      "html_url": "https://github.com/rontarrant",
      "followers_url": "https://api.github.com/users/rontarrant/followers",
      "following_url": "https://api.github.com/users/rontarrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/rontarrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rontarrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rontarrant/subscriptions",
      "organizations_url": "https://api.github.com/users/rontarrant/orgs",
      "repos_url": "https://api.github.com/users/rontarrant/repos",
      "events_url": "https://api.github.com/users/rontarrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rontarrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-17T10:28:15Z",
    "updated_at": "2020-04-18T01:24:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm just starting out learning the Godot game engine. Each tutorial I've followed to far describes the process of setting the Main Scene, something that's done each and every time a new project is created.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen the first scene of a new project is created and then saved, the user has to open the Project menu, go to Project Settings, and drill down to where Main Scene is set so it can be configured. This is something that could be done automatically, saving the user time and effort. And because the first scene created usually (I'm assuming) ends up as the Main Scene, it's unnecessary effort that could easily be done by Godot.\r\n\r\nAlso, if the user knew in advance that the first scene created will automatically be set as Main Scene, they could shape their workflow to include this expectation.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAfter the first scene is created in a new project, when the user saves that scene, if that scene is not just saved to disk, but the user-supplied name is also automatically used to set the Main Scene in Project Settings, it would (for the average user) speed up workflow.\r\n\r\nFor new users, it would give them one less thing they need to fiddle with before running their projects for the first time.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n- user selects Scene > Save in a new project\r\n   - save dialog pops up,\r\n   - user types name of scene,\r\n   - user clicks \"Save\" button,\r\n   - user-supplied name is stuffed into a string and...\r\n   - used to set Project Settings > Application > Run > Main Scene.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't foresee any harm in this feature being executed every time the first scene of a new project is saved. Once it's set, if the user wants to change the Main Scene to something else, he/she would have to create the scene and then select it in Project Settings. But the way things work now, they have to do this anyway, so I don't think it will inconvenience anyone.\r\n\r\nI see it as a way of speeding up development time and it would be especially useful if the user is creating a one-scene project.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nReasonable defaults will save the user time and (for new users) confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/720/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
