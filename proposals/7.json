[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1303",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1303/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1303/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1303/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1303",
    "id": 672374747,
    "node_id": "MDU6SXNzdWU2NzIzNzQ3NDc=",
    "number": 1303,
    "title": "Remove `Node.find_node()` and `Node.find_parent()`",
    "user": {
      "login": "TheDuriel",
      "id": 44248915,
      "node_id": "MDQ6VXNlcjQ0MjQ4OTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/44248915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheDuriel",
      "html_url": "https://github.com/TheDuriel",
      "followers_url": "https://api.github.com/users/TheDuriel/followers",
      "following_url": "https://api.github.com/users/TheDuriel/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheDuriel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheDuriel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheDuriel/subscriptions",
      "organizations_url": "https://api.github.com/users/TheDuriel/orgs",
      "repos_url": "https://api.github.com/users/TheDuriel/repos",
      "events_url": "https://api.github.com/users/TheDuriel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheDuriel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 22,
    "created_at": "2020-08-03T22:15:34Z",
    "updated_at": "2020-10-29T12:17:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "*Bugsquad edit:* Changed to match the template.\r\n\r\n**Describe the project you are working on:** This applies to any Godot project, since it's about removing an uncommonly used API.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n`Node.find_node()` suffers from many issues, while solving very little.\r\n\r\nPoints against find_node():\r\n\r\n* Not used in Engine. Added in 2015.\r\n* Not used in any of the official demo projects.\r\n* No warnings or errors. Only able to be caught via game crash.\r\n* Slow recursive search.\r\n* Manual refactor. Made more difficult by lack of warnings.\r\n* Encourages bad practices. NodePath export, and static cached NodePaths via $ should always be preferable.\r\n\r\nDiscussion encouraged.\r\n\r\nAn argument made _for_ find_node() was that it technically allows you to write shorter onready variables.\r\n\r\nMy counter argument is that if you have long NodePaths, you can use string concatenation to clean that up, while preserving a single place to edit in case of a refactor.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Delete `find_node` for 4.0.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** `grep` and the backspace key.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Yes, it can be worked around with `get_node`, which is an argument in favor of this proposal of removing `find_node`.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** `find_node` is an existing core API.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1303/reactions",
      "total_count": 12,
      "+1": 5,
      "-1": 5,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1302",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1302/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1302/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1302/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1302",
    "id": 672180153,
    "node_id": "MDU6SXNzdWU2NzIxODAxNTM=",
    "number": 1302,
    "title": "Be able to get the editor camera",
    "user": {
      "login": "fabriceci",
      "id": 6397893,
      "node_id": "MDQ6VXNlcjYzOTc4OTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6397893?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabriceci",
      "html_url": "https://github.com/fabriceci",
      "followers_url": "https://api.github.com/users/fabriceci/followers",
      "following_url": "https://api.github.com/users/fabriceci/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabriceci/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabriceci/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabriceci/subscriptions",
      "organizations_url": "https://api.github.com/users/fabriceci/orgs",
      "repos_url": "https://api.github.com/users/fabriceci/repos",
      "events_url": "https://api.github.com/users/fabriceci/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabriceci/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-03T16:01:56Z",
    "updated_at": "2021-01-02T05:09:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI write a tool where I need to use the use the camera method: `unproject_position` in a 2D node, in the process method.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI don't find a way to get the editor's camera, so I can't add extra info in my tool. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nno\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1302/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1301",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1301/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1301/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1301/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1301",
    "id": 672159890,
    "node_id": "MDU6SXNzdWU2NzIxNTk4OTA=",
    "number": 1301,
    "title": "Visual Script state node",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-03T15:31:06Z",
    "updated_at": "2020-08-04T05:43:38Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nGodot Engine (proposal from reduz)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nUsers can not make visual state flows \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe goal for this node is so users can make visual state flows for games, like screen interface chart, or a state chart during a level.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![State Node](https://user-images.githubusercontent.com/32321/89199597-a1211580-d563-11ea-891b-6e484fc8af0d.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot a few lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nVisual Script is coded in c++. Might be possible to be a gdscript node, except this function is special due to the fact it calls _process and _physics_process.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1301/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1298",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1298/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1298/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1298/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1298",
    "id": 671821319,
    "node_id": "MDU6SXNzdWU2NzE4MjEzMTk=",
    "number": 1298,
    "title": "Support for depth function in spatial materials and/or shaders",
    "user": {
      "login": "huhund",
      "id": 15182033,
      "node_id": "MDQ6VXNlcjE1MTgyMDMz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15182033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/huhund",
      "html_url": "https://github.com/huhund",
      "followers_url": "https://api.github.com/users/huhund/followers",
      "following_url": "https://api.github.com/users/huhund/following{/other_user}",
      "gists_url": "https://api.github.com/users/huhund/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/huhund/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/huhund/subscriptions",
      "organizations_url": "https://api.github.com/users/huhund/orgs",
      "repos_url": "https://api.github.com/users/huhund/repos",
      "events_url": "https://api.github.com/users/huhund/events{/privacy}",
      "received_events_url": "https://api.github.com/users/huhund/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-03T06:10:16Z",
    "updated_at": "2020-08-04T14:17:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 3D 3rd person game. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no way to change the depth test function for shaders or materials. It's is not possible to change the glDepthFunc() from the default GL_LEQUAL to GL_GREATER\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA lot of effects needs to change depth function. E.g. when Super Mario is behind an object you will see him rendered as a gray silhouette. This can easily be achieved with rendering the object in two passes, where the silhouette pass is rendered with GL_GREATER.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. A drop down selection, right next the \"no depth test\" flag in the material settings.\r\n2. A \"depth_mode\" setting in the shader, similar to the \"render_mode\" setting.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can only be implemented in the core renderer.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt can only be implemented in the core renderer.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1298/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1297",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1297/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1297/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1297/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1297",
    "id": 671738668,
    "node_id": "MDU6SXNzdWU2NzE3Mzg2Njg=",
    "number": 1297,
    "title": "Anti-aliasing in 2D",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-08-03T01:44:19Z",
    "updated_at": "2020-12-12T15:51:18Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Old Issue: https://github.com/godotengine/godot/issues/12840 \\\r\nSee above issue for previous discussion\r\n\r\n**Describe the project you are working on:**\r\nAny project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn some instances aliasing is very clear to see. It would be optimal to make AntiAliasing work in 2D.\r\n\r\nFor example, background stars in a space game that are the size of only a few pixels.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAntiAliasing settings should work in both 2D and 3D. (Even if eventually we add FXAA, SSAA, etc.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIdeally, this would work with the already existing `rendering/quality/filters/msaa` project setting.\r\n![image](https://user-images.githubusercontent.com/14253836/89138171-4d311500-d500-11ea-8ce1-a25aa20e8537.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis setting will be used often, but it also cannot be worked around easily.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a core renderer problem so unlikely to be solved in an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1297/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1296",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1296/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1296/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1296/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1296",
    "id": 671667161,
    "node_id": "MDU6SXNzdWU2NzE2NjcxNjE=",
    "number": 1296,
    "title": "Replace margins and anchors with an alternative system",
    "user": {
      "login": "Jose-Paulo-FaD",
      "id": 3308180,
      "node_id": "MDQ6VXNlcjMzMDgxODA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3308180?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jose-Paulo-FaD",
      "html_url": "https://github.com/Jose-Paulo-FaD",
      "followers_url": "https://api.github.com/users/Jose-Paulo-FaD/followers",
      "following_url": "https://api.github.com/users/Jose-Paulo-FaD/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jose-Paulo-FaD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jose-Paulo-FaD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jose-Paulo-FaD/subscriptions",
      "organizations_url": "https://api.github.com/users/Jose-Paulo-FaD/orgs",
      "repos_url": "https://api.github.com/users/Jose-Paulo-FaD/repos",
      "events_url": "https://api.github.com/users/Jose-Paulo-FaD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jose-Paulo-FaD/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-02T18:36:17Z",
    "updated_at": "2020-08-02T18:50:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiplayer tabletop game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile I find the container workflow in Godot very powerful and intuitive, I can't say the same thing about the anchors and margins workflow. The problem I had with my project that motivated me to thing an alternative system was the following: During a match in my game, there's a ItemList of all the players connected to the game on the top right corner of the screen. This list's width should vary depending on the length of the player name, such that it consumes the least amount of screen space, but does not clip the player name.\r\n\r\nSetting the anchor of the list to the top right corner does move it to the correct place, but if you try increasing it's size in the editor or by code (to accommodate for larger player names), you'll see that it starts to grow off the screen. You could solve this by decreasing it's left margin instead, which works AND modifies the size of the control, but the conversely does not happen. I find it rather unintuitive that to increase the size of the control I should modify its margin, rather than its size.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis proposal replaces anchors and margins (8 properties) by two Vector2s (4 properties), which let's you specify how controls should position and grow in relation to their parents or the viewport. After I explain how the system works, I'll show how this easily solves the particular problem I had.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI created an example project if you want to follow along: [GUI.zip](https://github.com/godotengine/godot-proposals/files/5012587/GUI.zip)\r\n\r\nThis project defines a class called AControl (It uses a Node2D as the base class just so I didn't have other properties that already exist in Control interfering in what I'm trying to demonstrate). AControl has four export variables, size (which already exists in Control), color (just to help us locate where each control is located), parent_anchor and self_anchor. These last two properties are the ones we're interested in.\r\n\r\nparent_anchor is a Vector2 whose components vary between 0 and 1, and define where a control should attach itself in relation to its parent (another AControl or the Viewport). Vector2(0, 0) represents the parent's top-left corner, while Vector(1, 1) represents its bottom-right corner. By setting the parent_anchor, we can attach an AControl anywhere in relation to its parent, and since the values are normalized, resizing the window still keeps the AControls at the same relative position. parent_anchor does not solve all the problems though. Yes, we can attach a node anywhere, but it is always attached by its top-left corner. This is solved using self_anchor.\r\n\r\nself_anchor, just like parent_anchor, is a Vector2 with components between 0 and 1, but it defines how an AControl should attach itself to its parent_anchor position. Vector2(0, 0) represents the top-left corner of the AControl, while Vector(1, 1) represents the bottom-right corner. Using self_anchor we can now attach the AControl not just anywhere, but any way we want. The most important part, though, is that, since the values are normalized, if we increase the size of the AControl, it will reposition itself in 2D space to keep its self_anchor constraint.\r\n\r\nI'll now demonstrate some examples, you can also test them in the attached project:\r\n\r\nLet's start by my use case, I want to attach a the top-right corner of an ItemList (self_anchor = Vector2(1, 0)) to the top-right corner of the screen (parent_anchor = Vector2(1, 0)). \r\n\r\n![image](https://user-images.githubusercontent.com/3308180/89129356-227c9780-d4d3-11ea-9cd4-a1cde2457837.png)\r\n\r\nIf we increase the list's width, it should reposition itself to keep the anchor in place:\r\n\r\n![image](https://user-images.githubusercontent.com/3308180/89129366-5061dc00-d4d3-11ea-9260-85e84050bf20.png)\r\n\r\nLet's now attach another AControl's top-middle position (self_anchor = Vector2(0.5, 0)), to the bottom-middle position of the list (parent_anchor = Vector2(0.5, 1)), this is where I use a HBoxContainer to put buttons that modify the list.\r\n\r\n![image](https://user-images.githubusercontent.com/3308180/89129488-1e9d4500-d4d4-11ea-9cc6-da4bc8bccd78.png)\r\n\r\nAgain, changing the size of the list repositions the elements to keep the relative anchor positions.\r\n\r\n![image](https://user-images.githubusercontent.com/3308180/89129507-3ffe3100-d4d4-11ea-8a66-dfa73772ed4b.png)\r\n\r\nThis is more of a crazy example, but shows the possibilities:\r\n\r\n![image](https://user-images.githubusercontent.com/3308180/89129713-d3843180-d4d5-11ea-946e-a0aecf7cda4d.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used often, since UI is present in every game. It also does not exclude the container workflow, but gives more control of where each container could be in relation to each other.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis modifies important properties of the Control node, so I don't thing this could be an addon.\r\n\r\nI Understand this would be a large change with consequences to existing games, but since godot has a major version in the horizon I didn't want to let this idea die without sharing it. Thanks for reading up to this point.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1296/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1293",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1293/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1293/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1293/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1293",
    "id": 671619571,
    "node_id": "MDU6SXNzdWU2NzE2MTk1NzE=",
    "number": 1293,
    "title": "Add ability to change AnimationTree OneShot's fadein_time and fadeout_time in real time in game",
    "user": {
      "login": "Favkis",
      "id": 46406204,
      "node_id": "MDQ6VXNlcjQ2NDA2MjA0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46406204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Favkis",
      "html_url": "https://github.com/Favkis",
      "followers_url": "https://api.github.com/users/Favkis/followers",
      "following_url": "https://api.github.com/users/Favkis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Favkis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Favkis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Favkis/subscriptions",
      "organizations_url": "https://api.github.com/users/Favkis/orgs",
      "repos_url": "https://api.github.com/users/Favkis/repos",
      "events_url": "https://api.github.com/users/Favkis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Favkis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-02T13:47:37Z",
    "updated_at": "2020-08-02T14:02:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nFirst person melee fighting game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nOneShot plays animations, some animations might be slower because of heavier weapon, but blendin and blendout times cannot be edited, so blending is always same time, even though I'd want to make it slower.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIF I'd be able to change OneShot's fadein I'd be able to make slower/faster windup depending on weapon.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nJust like how I can change `animtree[\"parameters/block_anim/active\"]=true`, same way `animtree[\"parameters/block_anim/fadein\"]=0.3` and `animtree[\"parameters/block_anim/fadeout\"]=0.2`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI'm too dumb to get an idea on workaround\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nbecause it looks like obvious changable parameter and we were really surprised when we saw it's not possible to do. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1292",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1292/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1292/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1292/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1292",
    "id": 671582421,
    "node_id": "MDU6SXNzdWU2NzE1ODI0MjE=",
    "number": 1292,
    "title": "Add parallax factor in Node2D",
    "user": {
      "login": "fossegutten",
      "id": 15088582,
      "node_id": "MDQ6VXNlcjE1MDg4NTgy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15088582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fossegutten",
      "html_url": "https://github.com/fossegutten",
      "followers_url": "https://api.github.com/users/fossegutten/followers",
      "following_url": "https://api.github.com/users/fossegutten/following{/other_user}",
      "gists_url": "https://api.github.com/users/fossegutten/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fossegutten/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fossegutten/subscriptions",
      "organizations_url": "https://api.github.com/users/fossegutten/orgs",
      "repos_url": "https://api.github.com/users/fossegutten/repos",
      "events_url": "https://api.github.com/users/fossegutten/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fossegutten/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-02T09:18:04Z",
    "updated_at": "2020-08-02T11:03:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMany projects who could use this.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing the ParallaxBackground and ParallaxLayer is not very intuitive. They dont show where the actual node is positioned in the editor. Also, the children of ParallaxBackground are being placed on a different canvas, which causes lots of other problems.\r\nI am aware of the \"pseudo 3D\" mode in CanvasLayer nodes, but these are also unintuitive, and they resize all the sprites inside the canvaslayer, which is not wanted in all games.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nConfiguring parallax factor directly on the Node2D, many cool effects can be made easily. Also we can easily see in the editor where the node should be (editor should probably not take parallax factor into account). Particle nodes could also be extra awesome with this feature.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere is a simple example in GDscript. However, if integrated into the engine, the view matrix could be used to offset the Node2D, to make it more efficient and clean.\r\n![bilde](https://user-images.githubusercontent.com/15088582/89119780-1c75bf00-d4b1-11ea-8af8-f455db0e8063.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe example in GDscript above is very simple, but it could lead to performance problems if we have lots of nodes. Also it is only possible on Sprite node this way, because I am exploiting the offset.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is so simple and so useful in many situations.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1291",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1291/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1291/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1291/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1291",
    "id": 670918835,
    "node_id": "MDU6SXNzdWU2NzA5MTg4MzU=",
    "number": 1291,
    "title": "Add plurals support for CSV translation files",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-01T14:30:09Z",
    "updated_at": "2020-10-01T16:22:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on:\r\nA game (main language is Russian).\r\n\r\n### Describe the problem or limitation you are having in your project:\r\n\r\nCSV translation files do not support plurals. godotengine/godot#40443 adds plurals support for .po files, but CSV is overlooked.\r\n.po files are designed to use English as the primary language, while CSV also allows identifiers.\r\n\r\n<details>\r\n<summary>Comments</summary>\r\n\r\n**Me**:\r\n\r\n> It looks like the `tr_n` function is not very suitable if you are using identifier system:\r\n>\r\n> ```gdscript\r\n> tr_n(\"MY_ID\", \"\", n) # Or `tr_n(\"MY_ID\", \"MY_ID\", n)`?\r\n> ```\r\n>\r\n> <details>\r\n> <summary>From the docs</summary>\r\n> There are two approaches to generate multilingual language games and applications. Both are based on a key:value system. The first is to use one of the languages as the key (usually English), the second is to use a specific identifier. <...> In general, games use the second approach and a unique ID is used for each string.\r\n> </details>\r\n\r\n@Calinou:\r\n\r\n> @dalexeev In my experience, gettext PO files are heavily centered around using English text as identifiers. On the other hand, custom formats (like Godot's CSV format) and XLIFF tend to recommend using keys as identifiers.\r\n\r\n@pycbouh:\r\n\r\n>> In my experience, gettext PO files are heavily centered around using English text as identifiers.\r\n>\r\n> This is definitely the intended way to use it by the creators for translating Linux, but the file format itself is not enforcing this as a rule in any way. If you use keys as identifiers, some tools may warn you that your translation language is English (POEdit does that, for one), but it's on the user to handle this. In this case the user being the engine.\r\n\r\n</details>\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation:\r\n\r\nFor CSV, we should also implement plurals support. For example like this:\r\n\r\nKEY        |en           |ru\r\n-----------|-------------|-------------\r\nDAYS_AGO[0]|%d day ago   |%d день назад\r\nDAYS_AGO[1]|%d days ago  |%d дня назад\r\nDAYS_AGO[2]|-            |%d дней назад\r\n\r\nUsage:\r\n\r\n```gdscript\r\nvar s = tr_n(n, \"DAYS_AGO\") % n\r\n```\r\n\r\nThat is, we just have to make `n` the first argument, and it will be compatible with both systems.\r\n\r\nIndeed, some cells remain empty. But there are relatively few of them. Note that strings without numeric substitution still require only one row:\r\n\r\nKEY           |en         |ru\r\n--------------|-----------|------------\r\nREGULAR_KEY   |Regular key|Обычный ключ\r\n...           |...        |...\r\nSPECIAL_KEY[0]|%d key     |%d ключ\r\nSPECIAL_KEY[1]|%d keys    |%d ключа\r\nSPECIAL_KEY[2]|           |%d ключей\r\n...           |...        |...\r\nANOTHER_KEY   |Another key|Другой ключ\r\n...           |...        |...\r\n\r\nThere is another option:\r\n\r\nKEY     |en[0]     |en[1]      |ru[0]        |ru[1]       |ru[2]\r\n--------|----------|-----------|-------------|------------|-------------\r\nJUST_KEY|Just a key|           |Просто ключ  |            |\r\nDAYS_AGO|%d day ago|%d days ago|%d день назад|%d дня назад|%d дней назад\r\n\r\nBut I like the first option better, because strings usually don't have numeric substitutions. Moreover, each language in this variant requires multiple columns. Although if we split the table into two files (for `tr()` and for `tr_n()`), then there will be no empty cells at all. But this is also not good, because it complicates the work (2 files instead of 1). In general, the first option is the most compromise.\r\n\r\n### Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\r\n\r\nIt's not hard to implement. Here's an example to help you understand how this should work:\r\n\r\n```\r\nfunc tr_n(n: int, key: String) -> String:\r\n    return tr(\"%s[%d]\" % [key, f(n)])\r\n\r\nfunc f(n: int) -> int:\r\n    match TranslationServer.get_locale():\r\n        \"en_US\":\r\n            if n == 1:\r\n                return 0\r\n            else:\r\n                return 1\r\n        \"ru_RU\":\r\n            if n % 10 == 1 && n % 100 != 11:\r\n                return 0\r\n            elif n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20):\r\n                return 1\r\n            else:\r\n                return 2\r\n        ...\r\n```\r\n\r\nThe only thing, the first option only works with identifiers. The second option also works with English strings as the primary key.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\nThis is a commonly used feature. In addition, there is currently no way to globally redefine the `tr_n` function.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?:\r\n.po files are not a complete replacement for CSV (see above). Therefore, CSV should support plurals as well as .po files.\r\n\r\n---\r\n\r\n@akien-mga:\r\n\r\n> For CSV plurals, I would suggest opening a proposal indeed and doing research on how plurals are handled by other projects that support CSV translations.\r\n> \r\n> From what I found, there are many different CSV translation workflows and the few that support plurals have it hacked in in a way as suggested e.g. here, but there's no common standard. It's a simple system so we can indeed design our own plurals logic, but if there was a somewhat \"popular\" way of doing plurals with CSV used e.g. in other game engines, it would be best for us to follow that.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1290",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1290/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1290/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1290/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1290",
    "id": 670781341,
    "node_id": "MDU6SXNzdWU2NzA3ODEzNDE=",
    "number": 1290,
    "title": "Add custom sorting to ItemList",
    "user": {
      "login": "Spartan322",
      "id": 4315446,
      "node_id": "MDQ6VXNlcjQzMTU0NDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4315446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spartan322",
      "html_url": "https://github.com/Spartan322",
      "followers_url": "https://api.github.com/users/Spartan322/followers",
      "following_url": "https://api.github.com/users/Spartan322/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spartan322/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spartan322/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spartan322/subscriptions",
      "organizations_url": "https://api.github.com/users/Spartan322/orgs",
      "repos_url": "https://api.github.com/users/Spartan322/repos",
      "events_url": "https://api.github.com/users/Spartan322/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spartan322/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-01T11:23:57Z",
    "updated_at": "2020-08-23T14:01:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** A Selection Menu for RTS Game's Unit Selection\r\n\r\n**Describe the problem or limitation you are having in your project:** Currently I'm using an ItemList to manage the listing of units, I desire to have my saved list of units in sync with the ItemList. The only way I can guarantee this is either by manually moving, removing, and adding items to the ItemList or by clearing and setting it all at once, I've resorted to clearing and setting everything. This does not sit well with me.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** If I had a capability to sort the items in the list in a manner I can define, I wouldn't run the risk of possible bugs introduced by manually managing the list, and I wouldn't need to start the list from zero every time something is added or removed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** I wonder if perhaps Array's sort_custom capability could be implemented for ItemList as well, it already supports sorting by the default comparer, but I don't know the complexity of getting it to use other comparers.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Not exactly, but its not hard to workaround, but I think this case I am forced to write inefficiently. While its not a large priority in any respect, I do think its better to give the capability to the developer on controling how the ItemList looks after its been created. (without resorting to manipulating the individual items bit by bit)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** I'd either have to rewrite the ItemList object to achieve this, or manually handle the list with a separate function, there is currently no manner to get ItemList to sort in any way other then based on the text itself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1290/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1288",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1288/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1288/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1288/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1288",
    "id": 670612164,
    "node_id": "MDU6SXNzdWU2NzA2MTIxNjQ=",
    "number": 1288,
    "title": "Separate input polling from render thread",
    "user": {
      "login": "iBoonie",
      "id": 62844047,
      "node_id": "MDQ6VXNlcjYyODQ0MDQ3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/62844047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iBoonie",
      "html_url": "https://github.com/iBoonie",
      "followers_url": "https://api.github.com/users/iBoonie/followers",
      "following_url": "https://api.github.com/users/iBoonie/following{/other_user}",
      "gists_url": "https://api.github.com/users/iBoonie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iBoonie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iBoonie/subscriptions",
      "organizations_url": "https://api.github.com/users/iBoonie/orgs",
      "repos_url": "https://api.github.com/users/iBoonie/repos",
      "events_url": "https://api.github.com/users/iBoonie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iBoonie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-01T07:22:21Z",
    "updated_at": "2020-11-13T16:22:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I thought this deserved a mention https://github.com/godotengine/godot/issues/26828 coming from a FPS background, it drives me insane when there is any input delay.\r\n\r\n**Describe the project you are working on:**\r\nFPS project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNo problem, but having fluid input 100% of the time would be very nice.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf input is polled in the render thread and the game lags at all, it introduces input lag. Unity, Unreal, Source and all major engines have this problem (although it's being fixed in Unity https://github.com/Unity-Technologies/InputSystem).\r\n\r\nIf a user can't reach high enough frame-rates, they will have input lag. Polling in a separate thread would eliminate this problem. Instead of getting input lag, you would just get visual frame skip when moving your mouse (which is still present when you poll at lower rates anyway). The advantage of this is it will make input feel snappy all the time (for both mouse and keyboard input).\r\n\r\nExample:\r\nIf the input was polled in a separate thread and a person flicked their mouse the same distance at 15fps and 300 fps, it would land in the same spot at the exact same time (although the 15 fps player would skip/chunk a lot of frames).\r\n\r\nMore info:\r\nhttps://www.epicgames.com/unrealtournament/forums/unreal-tournament-discussion/ut-development-bug-reports-qa/3209-mouse-input-issues-concerns-and-what-will-be-done-about-it\r\nhttps://www.epicgames.com/unrealtournament/forums/unreal-tournament-discussion/ut-development-bug-reports-qa/16532-mouse-input-investigation\r\nhttps://www.reddit.com/r/GlobalOffensive/comments/6y47m8/\r\nhttps://www.reddit.com/r/reflex/comments/499s68/\r\nhttps://www.reddit.com/r/Competitiveoverwatch/comments/6xet7k/\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's possible to implement this using GDNative or using a Module, but having it directly in the engine would be best.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf implemented, everyone would be using it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nEveryone deserves fluid input, it would make the user experience better for everyone (especially people on lower spec machines). Having it in engine while most others don't would be a nice step above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1288/reactions",
      "total_count": 9,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1285",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1285/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1285/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1285/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1285",
    "id": 670040372,
    "node_id": "MDU6SXNzdWU2NzAwNDAzNzI=",
    "number": 1285,
    "title": "Add a `[hint=description]text[/hint]` BBCode tag to RichTextLabel to display tooltips on hover",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-31T17:28:56Z",
    "updated_at": "2020-08-01T12:09:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn https://github.com/godotengine/godot/pull/40872, I added tooltips to `virtual`, `const` and `vararg` method qualifiers in the online class reference. I'd like to do the same in the editor documentation. However, there's no way to specify a tooltip for a *specific* part of the text in a RichTextLabel.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding tooltips on specific text makes it possible to specify additional information that would otherwise take too much space to display.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI propose adding the following BBCode tag: `[hint=description]text[/hint]`\r\n\r\nThis would be equivalent to `<abbr title=\"description\">text</abbr>` in HTML.\r\n\r\nWhen hovering `text`, `description` appears as a standard UI tooltip.\r\n\r\nOne open question is: should we add default styling for hinted text? People may want to use their own overrides for it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as setting the `hint_tooltip` property affects the tooltip of the whole RichTextLabel. It will display when any part of it is hovered.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI'm not sure if RichTextEffect allows doing this kind of stuff.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1285/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1284",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1284/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1284/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1284/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1284",
    "id": 669784082,
    "node_id": "MDU6SXNzdWU2Njk3ODQwODI=",
    "number": 1284,
    "title": "Add an OS method to retrieve a screen's refresh rate",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-31T12:50:21Z",
    "updated_at": "2020-12-11T16:37:11Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Related to #236 and #1283.\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt is currently impossible to retrieve a screen's refresh rate.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA method to get the monitor's refresh rate can be helpful in several ways:\r\n\r\n- The returned value can be used to adjust the physics FPS to match the monitor's refresh rate. This can be used to provide smooth, reactive physics without incurring additional CPU costs and stuttering to those on lower refresh rate displays.\r\n- The returned value can be used to lock the FPS to the monitor's refresh rate without relying on V-Sync. This can be important when power savings are desired, but the latency added by V-Sync is unacceptable.\r\n  - We can add this to the Project Settings with an additional boolean setting, such as \"Force Fps Match Monitor Hz\". Alternatively, it can be done by the user in a script in `_ready()`. Care should be taken about setups that have monitors with different refresh rates.\r\n  - We can use the fastest monitor's refresh rate to adjust the low-processor mode sleep duration in the Godot editor.\r\n\r\nWith high-refresh rate displays becoming more and more popular (including on mobile devices), providing the best possible experience on such displays is getting more important.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis feature has to be implemented in an OS-specific manner. It should preferably return a floating-point value in Hz, although returning an integer value in Hz is also acceptable. If the engine fails to retrieve the monitor refresh rate for any reason, it should return `60` as a fallback since this is the most common refresh rate.\r\n\r\nI tried to implement this for X11 based on the SDL2 code, but it's easier said than done :slightly_smiling_face: \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt *might* be possible to do this on Linux by calling `xrandr`, but it's not particularly user-friendly. On other platforms (especially mobile platforms), this may not be possible at all.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis might be feasible using a GDNative-based add-on. However, since high refresh rate displays will probably be the norm in a few years' time, it's probably better to support this as a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1284/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1283",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1283/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1283/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1283/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1283",
    "id": 669773594,
    "node_id": "MDU6SXNzdWU2Njk3NzM1OTQ=",
    "number": 1283,
    "title": "Add support for adaptive V-Sync",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-07-31T12:38:01Z",
    "updated_at": "2020-07-31T20:58:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nTraditional V-Sync is able to eliminate tearing, but will introduce stuttering if the device can't keep up with the monitor's refresh rate. For instance, with a 60 Hz monitor, getting 50 FPS will display 40 frames at full speed, but 10 frames in that second will be displayed for twice as long. This makes the game look like it's effectively running at 30 FPS during those stuttering periods. The default V-Sync behavior can also lead to [confusion](https://github.com/godotengine/godot/issues/40909).\r\n\r\nVariable refresh rate monitors can solve this issue. While they've been on the rise lately, not everyone has access to such a monitor, especially in laptops where the display typically can't be upgraded.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n*Note that adaptive V-Sync can be used on any monitor and has no relation to G-Sync or FreeSync. [This video from Digital Foundry](https://www.youtube.com/watch?v=seyAzw9zEoY) should be helpful to clear confusion about the various V-Sync modes available out there.*\r\n\r\nCompared to variable refresh rate monitors, adaptive V-Sync is a slightly older technique, being popularized in the early 2010s. It works by automatically disabling V-Sync if the FPS goes below the monitor refresh rate. This introduces tearing, but avoids stuttering and decreases input lag in periods where the game doesn't run as smoothly. This is usually a better compromise in those situations.\r\n\r\nV-Sync will enable itself again automatically once the FPS goes back above the monitor refresh rate.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe V-Sync project setting and associated RenderingServer property should be converted from a boolean to an enum with the following values: \"Disabled\", \"Enabled (Traditional)\", \"Enabled (Adaptive)\".\r\n\r\nWe should also evaluate making adaptive V-Sync the default as it can significantly improve the player's experience. Likewise, it should also make the editor feel smoother and more reactive in heavier scenes.\r\n\r\nSee also this pull request: https://github.com/godotengine/godot/pull/36862\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as implementing adaptive V-Sync requires changes to the core rendering code. The user may be able to force adaptive V-Sync in their graphics driver control panel, but this relies on OS- and hardware-specific features not always available on macOS or Linux.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nImplementing adaptive V-Sync requires changes to the core rendering code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1283/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1282",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1282/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1282/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1282/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1282",
    "id": 669229560,
    "node_id": "MDU6SXNzdWU2NjkyMjk1NjA=",
    "number": 1282,
    "title": "Introduce a variable-free loop",
    "user": {
      "login": "peterhoglund",
      "id": 522470,
      "node_id": "MDQ6VXNlcjUyMjQ3MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/522470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peterhoglund",
      "html_url": "https://github.com/peterhoglund",
      "followers_url": "https://api.github.com/users/peterhoglund/followers",
      "following_url": "https://api.github.com/users/peterhoglund/following{/other_user}",
      "gists_url": "https://api.github.com/users/peterhoglund/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peterhoglund/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peterhoglund/subscriptions",
      "organizations_url": "https://api.github.com/users/peterhoglund/orgs",
      "repos_url": "https://api.github.com/users/peterhoglund/repos",
      "events_url": "https://api.github.com/users/peterhoglund/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peterhoglund/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 23,
    "created_at": "2020-07-30T22:00:41Z",
    "updated_at": "2020-10-15T20:15:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nPlatformer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVery often I will use for loops to do the same task several times and not to iterate through data sets. For example when spawning many scenes at once (bullets or enemies). I will use a for loop for this:\r\n```\r\nvar amount = 10\r\nfor i in range(amount):\r\n    add_child(scene)\r\n```\r\nThis is fine but it will generate a warning about the 'i' not being used, which quickly clutter up the warnings list.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIntroduce a variable free loop for these scenarios. It will work like a normal for-loop only there is no loose variable that is never used. A user will only state how many times the loop will run.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSomething like this:\r\n```\r\nvar amount = 10\r\ndo amount times:\r\n    add child(scene)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can skip the warning by putting an underscore in front of the variable. However, there is something with introducing a variable that is not used for anything that doesn't sit right with me. A variable free loop that basically works as a counter seems cleaner.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nChange in gdscript",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1282/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1281",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1281/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1281/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1281/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1281",
    "id": 669139922,
    "node_id": "MDU6SXNzdWU2NjkxMzk5MjI=",
    "number": 1281,
    "title": ".TSCN merging tooling (git merge but for TSCN changes on reimport...)",
    "user": {
      "login": "RevoluPowered",
      "id": 748770,
      "node_id": "MDQ6VXNlcjc0ODc3MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/748770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RevoluPowered",
      "html_url": "https://github.com/RevoluPowered",
      "followers_url": "https://api.github.com/users/RevoluPowered/followers",
      "following_url": "https://api.github.com/users/RevoluPowered/following{/other_user}",
      "gists_url": "https://api.github.com/users/RevoluPowered/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RevoluPowered/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RevoluPowered/subscriptions",
      "organizations_url": "https://api.github.com/users/RevoluPowered/orgs",
      "repos_url": "https://api.github.com/users/RevoluPowered/repos",
      "events_url": "https://api.github.com/users/RevoluPowered/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RevoluPowered/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-30T19:56:33Z",
    "updated_at": "2020-07-30T20:15:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI cannot say anything more than we have a large number of 3D scenes, due to NDA, they get imported via FBX and other importers.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n- When an importer runs it often can break any scenes which inherit the scene if you import a scene and change the node layout, it can result in your inherited scenes losing or orphaning nodes since the hierarchy is different.\r\n- When we want to 'merge' two authors or more changes we have to make each content author 'lock' a scene essentially, so only one person can make edits to this scene\r\n- When the importer's behavior is fixed, there is no way of noticing it's orphaned nodes or fundamental changes which may have broken the inherited scene on reimport.\r\n- Example previous FBX importer was adding a fake node called /rootnode/ when I fixed the FBX importer this removed any fake nodes, from the scene, thus any 'inherited scenes' broke with colliders and required propagating mass amounts of assets.\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\n- I believe we should implement a git merge driver, to allow us to merge .tscn files\r\n- this would allow us to compare node paths, and work out when there is a conflict.\r\n- each 'user-added or edited node' would have a unique id when the imported content would not.\r\n- this would make the changes diff-able and able to show in git 'hey your project changed these paths'\r\n- we can then implement a 'merge strategy' so it can in some cases auto-correct merge differences.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n- We'd implement a git merge driver for 'godot projects'\r\n- the merge driver ideally would do all comparison using an extendable script, outside the merge driver.\r\n- a comparison would be done by git against base and 'current' reimported file and check against the diff, if the diff makes a large change, and edits 'node paths' significantly (or reparents) then we should make a 'conflict'\r\n- the conflict would be used with a 'merge driver' the merge driver would try to auto-resolve conflict and compare previous asset commit.\r\n  \r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n- nope\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nit's a requirement to be able to update your TSCN and reimport without your scenes breaking basically, so we need a good solution to this problem above, the merge driver is but one, but I think it's practical if we even started with a simple bash script to do the work in the beginning to prototype a few 'merge tool solutions' this IMHO would bridge the 'reimport breaks things' problem in Godot and make 3D more practical when you have thousands of assets.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1281/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1280",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1280/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1280/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1280/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1280",
    "id": 668855515,
    "node_id": "MDU6SXNzdWU2Njg4NTU1MTU=",
    "number": 1280,
    "title": "If an AnimationSprite animation is finished, and it's Loop is set to OFF, then set its .is_playing() method, and .playing() property to false.",
    "user": {
      "login": "pajcek11",
      "id": 67163678,
      "node_id": "MDQ6VXNlcjY3MTYzNjc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/67163678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pajcek11",
      "html_url": "https://github.com/pajcek11",
      "followers_url": "https://api.github.com/users/pajcek11/followers",
      "following_url": "https://api.github.com/users/pajcek11/following{/other_user}",
      "gists_url": "https://api.github.com/users/pajcek11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pajcek11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pajcek11/subscriptions",
      "organizations_url": "https://api.github.com/users/pajcek11/orgs",
      "repos_url": "https://api.github.com/users/pajcek11/repos",
      "events_url": "https://api.github.com/users/pajcek11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pajcek11/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-30T15:17:39Z",
    "updated_at": "2020-07-30T20:00:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nTrying to determine when my non-looping animation ended, without having to resort to signals.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen my Animation, whose Loop property is set to FALSE, finishes its 1 loop, if I run print($AnimationSprite.is_playing()), the result will forever be True. That makes no sense. Like, logically. If the sprite animation frames all played, and there is no loop, then the animation stops at the last frame. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nFrankly, I think this might be a bug, but you never know in Godot. Lots of weird design decisions all around.\r\nI don't know how it works. Like, stop updating the same last frame when a non-looping animation is played.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n    if (loop == false && frame == last frame):\r\n        $AnimationSprite. playing == false\r\n        $AnimationSprite.stop() # for good measure or whatever\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used very often. Sprites are a basic building block of every game and it is important that they behave in an intuitive way\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSprites are a basic building block of every game and it is important that they behave in an intuitive way",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1280/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1279",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1279/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1279/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1279/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1279",
    "id": 668702689,
    "node_id": "MDU6SXNzdWU2Njg3MDI2ODk=",
    "number": 1279,
    "title": "Add a method to Curve3D to find the closest index to a position",
    "user": {
      "login": "tomankirilov",
      "id": 14836922,
      "node_id": "MDQ6VXNlcjE0ODM2OTIy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14836922?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomankirilov",
      "html_url": "https://github.com/tomankirilov",
      "followers_url": "https://api.github.com/users/tomankirilov/followers",
      "following_url": "https://api.github.com/users/tomankirilov/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomankirilov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomankirilov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomankirilov/subscriptions",
      "organizations_url": "https://api.github.com/users/tomankirilov/orgs",
      "repos_url": "https://api.github.com/users/tomankirilov/repos",
      "events_url": "https://api.github.com/users/tomankirilov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomankirilov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-30T13:06:06Z",
    "updated_at": "2020-07-30T17:33:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a 3d game where the character's XZ movement is restricted to a 3d curve while still being affected by gravity.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to find the closest index to a 3d point but there is no such function. There is one to find the closest location. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI found that there is a method for 3d curves to find the closest point but I believe that it would be really helpful to also have a method to find the closest index. In my case, I want to find the closest index and set my velocity to the previous or next index but I think it can be really useful for general work with curves too.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n----------------------------------------------\r\nint Curve3D::get_closest_index (const Vector3 &p_to_point) const {\r\n\t// Brute force method\r\n\r\n\tif (baked_cache_dirty) {\r\n\t\t_bake();\r\n\t}\r\n\r\n\t//validate//\r\n\tint pc = baked_point_cache.size();\r\n\tERR_FAIL_COND_V_MSG(pc == 0, Vector3(), \"No points in Curve3D.\");\r\n\r\n\tif (pc == 1) {\r\n\t\treturn baked_point_cache.get(0);\r\n\t}\r\n\r\n\tconst Vector3 *r = baked_point_cache.ptr();\r\n\r\n\tint nearest;\r\n\tfloat nearest_dist = -1.0f;\r\n\r\n\tfor (int i = 0; i < pc - 1; i++) {\r\n\t\tVector3 origin = r[i];\r\n\t\tVector3 direction = (r[i + 1] - origin) / bake_interval;\r\n\r\n\t\tfloat d = CLAMP((p_to_point - origin).dot(direction), 0.0f, bake_interval);\r\n\t\tVector3 proj = origin + direction * d;\r\n\r\n\t\tfloat dist = proj.distance_squared_to(p_to_point);\r\n\r\n\t\tif (nearest_dist < 0.0f || dist < nearest_dist) {\r\n\t\t\tnearest = i;\r\n\t\t\tnearest_dist = dist;\r\n\t\t}\r\n\t}\r\n\r\n\treturn nearest;\r\n--------------------------------------\r\nIn general, does the same as \r\nhttps://github.com/godotengine/godot/blob/718db9b396f8bdfef8fc1855e91317d39d076189/scene/resources/curve.cpp#L1451\r\nbut returns the index and not the position.\r\n--------------------------------------\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can but the functionality is pretty much already there. Also, it will be a lot faster in c++.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is common functionality that could enhance the already existing workflow.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1279/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1277",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1277/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1277/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1277/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1277",
    "id": 668020511,
    "node_id": "MDU6SXNzdWU2NjgwMjA1MTE=",
    "number": 1277,
    "title": "Add a `--install-export-templates` command line option to the editor",
    "user": {
      "login": "touilleMan",
      "id": 3187637,
      "node_id": "MDQ6VXNlcjMxODc2Mzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3187637?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/touilleMan",
      "html_url": "https://github.com/touilleMan",
      "followers_url": "https://api.github.com/users/touilleMan/followers",
      "following_url": "https://api.github.com/users/touilleMan/following{/other_user}",
      "gists_url": "https://api.github.com/users/touilleMan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/touilleMan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/touilleMan/subscriptions",
      "organizations_url": "https://api.github.com/users/touilleMan/orgs",
      "repos_url": "https://api.github.com/users/touilleMan/repos",
      "events_url": "https://api.github.com/users/touilleMan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/touilleMan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-29T17:38:45Z",
    "updated_at": "2020-08-25T21:55:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n[Godot-Python](https://github.com/touilleMan/godot-python)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm working on the export plugin for Godot-Python project, this is a non-trivial part of the project that need to have unit tests.\r\n\r\nHowever the export system requires the export templates to be installed, this is something that is done through the GUI of the Godot editor, so it cannot be easily automated which is especially important when running the tests on a CI environement.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere should be an option on the Godot command line to ensure the export templates for the currently running version of Godot are installed and if it's not the case download&install them automatically.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```shell\r\n$ godot --install-export-templates\r\n$ godot --path my_project --export windows-preset export_output\r\n```\r\n\r\n*Bugsquad edit (keywords for easier searching): continuous integration, CLI*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1277/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1276",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1276/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1276/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1276/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1276",
    "id": 667725222,
    "node_id": "MDU6SXNzdWU2Njc3MjUyMjI=",
    "number": 1276,
    "title": "Inspector pane property separation",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-29T10:17:00Z",
    "updated_at": "2020-07-29T10:21:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nThe inspector can get very, very long, especially with nodes such as particle2D. When navigating to your often updated (e.g. 'emit', 'one shot', 'colour', or modifying two or more properties to see different effects on the node) properties the process is slow and cumbersome.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn the inspector tab create a top level section 'favourites' (does not imply persistence) that will remain on the top even when the inspector is scrolled (but it can still be expanded/contracted as normal) and for any property you can copy it to this section (right-click, a new icon, etc) to the 'favourites'. As my example this means you can be anywhere in the inspector but still click emit/one-shot or tweak velocity/curve, etc. An alternative to this would be with the new docking system in 4.0 to allow individual section headings (e.g. 'Transform', 'visibility') to be undocked.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. frozen pane - here I've duplicated emit and amount to the locked section. This remains and the rest of inspector scrolls.\r\n![image](https://user-images.githubusercontent.com/12863685/88787914-824e0800-d18c-11ea-94a5-c5acc2b75c60.png)\r\n\r\n2. Alternate undocked section (not inheritance section) - here I've taken out the 'Time' section of particle2d and it's floating\r\n![image](https://user-images.githubusercontent.com/12863685/88788217-f092ca80-d18c-11ea-9872-a044ef66f50f.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWill make the IDE better",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1276/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1275",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1275/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1275/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1275/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1275",
    "id": 667640782,
    "node_id": "MDU6SXNzdWU2Njc2NDA3ODI=",
    "number": 1275,
    "title": "Add support for specifying light sizes and shapes for specular reflections",
    "user": {
      "login": "mindinsomnia",
      "id": 15921126,
      "node_id": "MDQ6VXNlcjE1OTIxMTI2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15921126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mindinsomnia",
      "html_url": "https://github.com/mindinsomnia",
      "followers_url": "https://api.github.com/users/mindinsomnia/followers",
      "following_url": "https://api.github.com/users/mindinsomnia/following{/other_user}",
      "gists_url": "https://api.github.com/users/mindinsomnia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mindinsomnia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mindinsomnia/subscriptions",
      "organizations_url": "https://api.github.com/users/mindinsomnia/orgs",
      "repos_url": "https://api.github.com/users/mindinsomnia/repos",
      "events_url": "https://api.github.com/users/mindinsomnia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mindinsomnia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-29T08:08:46Z",
    "updated_at": "2020-07-29T15:53:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThird person shooter\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI would like to achieve more accurate / realistic lighting across surfaces and have more control over the shape and size of specular highlights.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSome real time engines provide the ability to define the shape of a light source to control the shape of the specular highlights. This produces much greater realism and more interesting visuals, and allows for approximating the shape of some light emitting scene objects with a shaped light. When combined with surfaces that have interesting properties, such as varying roughness and normal mapss, the results can be quite beautiful.\r\n\r\nThe reflections are also real time, have no issues with sampling or noise, work even with the source of the reflection is outside of the camera frame (unlike screenspace reflections) and don't require any baking, lightmaps or lightprobes.\r\n\r\nExample of this feature as it was implemented in Eevee, runs butter smooth in real time:\r\n![tFc6nphSNv](https://user-images.githubusercontent.com/15921126/88771528-b80de380-d1c2-11ea-9361-0ea2671e842d.gif)\r\n\r\n![OUBwdEmC2L](https://user-images.githubusercontent.com/15921126/88773817-fbb61c80-d1c5-11ea-82e3-dbc94ee273a2.gif)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI am not familiar enough with Godot's internal code to know how compatible a change like this would be, or if it would be acceptable to make a change like this that would alter how existing specular highlights look for existing projects using OmniLights. I also understand that it's possible this kind of feature could introduce higher performance requirements. \r\n\r\nIf breaking compatibility is acceptable, and the performance impact for each light is negligible, I would like there to be simply be an option added to existing OmniLights and Spotlights to control their radius and shape (circle, sphere, rectangle as a minimum would be nice).\r\n\r\nIf breaking compatibility is not an option, or if this kind of light requires substantially more computation than a regular light, perhaps a different set of light nodes could be implemented, such as 'SphereLight', 'RectLight', 'CircleLight', etc. Or simply one 'catch all' light called 'ShapedLight' etc.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI do not believe it would be possible to implement this with just a few lines of scripting.\r\n\r\nFor 3D artist chasing realism in their 3D environments, I would expect they would use this feature on virtually every light in their scene.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis feature would greatly increase the potential head room for realistic 3D imagery in Godot, something which would be useful to a broad range of users, and even for cartoony art styles, having more artistic control over lighting would allow for producing much more interesting and visually beautiful imagery.\r\n\r\nI am not capable of making an assessment on whether or not it would be possible to implement a change like this as an addon but I imagine such lighting calculations are fairly 'core' to how Godot works and could not be easily changed by an addon, and such an addon would be tedious to maintain and equally tedious for users to repeatedly install.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1274",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1274/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1274/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1274/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1274",
    "id": 667516533,
    "node_id": "MDU6SXNzdWU2Njc1MTY1MzM=",
    "number": 1274,
    "title": "Replace built-in scripts with \"discrete scripts\"",
    "user": {
      "login": "marcospb19",
      "id": 38900226,
      "node_id": "MDQ6VXNlcjM4OTAwMjI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38900226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcospb19",
      "html_url": "https://github.com/marcospb19",
      "followers_url": "https://api.github.com/users/marcospb19/followers",
      "following_url": "https://api.github.com/users/marcospb19/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcospb19/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcospb19/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcospb19/subscriptions",
      "organizations_url": "https://api.github.com/users/marcospb19/orgs",
      "repos_url": "https://api.github.com/users/marcospb19/repos",
      "events_url": "https://api.github.com/users/marcospb19/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcospb19/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 30,
    "created_at": "2020-07-29T03:19:33Z",
    "updated_at": "2020-10-23T02:05:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This proposal was originally made [here](https://github.com/godotengine/godot/issues/31758).\r\n\r\n## Describe the project you are working on:\r\nCurrently I'm not working on any project (?).\r\n\r\n## Describe the problem or limitation you are having in your project:\r\nCurrently I'm not working on a project.\r\n\r\n`Built-In Scripts` are very problematic and we have seen [requests](https://github.com/godotengine/godot/issues/31758) to remove it from the engine, however people also argue that it is very useful and ask to not remove them, here are some quotes:\r\n\r\n- @Calinou\r\n> I also think we should remove built-in scripts in 4.0 due to the various limitations and their worse VCS-ability. \r\n\r\n`Built-In Scripts` lacks VCS-ability because the `.gd` content is inserted inside a `.tscn` file, this makes diffs a nightmare.\r\n\r\n- @magpie514\r\n> Please don't remove built-in scripts. The project folder is already a mess with metadata for every image and there are times there is just not sane to add new files to it when a 4-line builtin script does the job.\r\n\r\nA lot of people rely on `Built-In Scripts` on their projects, they claim that the feature is very useful on managing the file mess from small scripts (this feature is a plus for Godot over other engines).\r\n\r\n- @Calinou\r\n> Making them work seamlessly with external editors is arguably a difficult task.\r\n\r\nThis is very important, as far as I know, the majority of game developers use _VSCode_ as their main text editor, [external editor support](https://github.com/godotengine/godot/issues/29863) is a must for the future of Godot.\r\n\r\n_VSCode_ extensions grant incredible support for _Godot_, including integration with the `GDScript language server`, also worth mentioning that if someone has a background on _Unity_, _Unreal Engine_ or _Javascript/CSS/HTML_, they are probably used with using editos like _VSCode_.\r\n\r\nMost of the issues are caused because `Built-In Scripts` aren't `.gd` files, they are `.gd` code inside of `.tscn` files, so we need to change it.\r\n\r\nEvery time a new feature is added to scripts, we suppose that they will work with `Built-In Scripts`, but this isn't always possible, corner case code (that can add complexity) is necessary to support `Built-In Scripts` functionalities, thus development time is wasted unnecessarily, and some of the issues remain unsolved.\r\n\r\n## If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\nNo\r\n\r\n## Can this be an add-on in the asset library?:\r\nNo\r\n\r\n## Describe the feature:\r\n_See next comment_\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1274/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1272",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1272/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1272/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1272/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1272",
    "id": 667412896,
    "node_id": "MDU6SXNzdWU2Njc0MTI4OTY=",
    "number": 1272,
    "title": "Streamline permission requesting / handling on mobile",
    "user": {
      "login": "hakoptak",
      "id": 26923796,
      "node_id": "MDQ6VXNlcjI2OTIzNzk2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26923796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hakoptak",
      "html_url": "https://github.com/hakoptak",
      "followers_url": "https://api.github.com/users/hakoptak/followers",
      "following_url": "https://api.github.com/users/hakoptak/following{/other_user}",
      "gists_url": "https://api.github.com/users/hakoptak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hakoptak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hakoptak/subscriptions",
      "organizations_url": "https://api.github.com/users/hakoptak/orgs",
      "repos_url": "https://api.github.com/users/hakoptak/repos",
      "events_url": "https://api.github.com/users/hakoptak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hakoptak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-28T22:07:06Z",
    "updated_at": "2020-09-18T21:51:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA microphone-driven mobile game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBecause my game needs access to the microphone, Apple demands asking for permission. This feature already implemented in the Android OS api, but not iOS.\r\n\r\nSource: \r\nhttps://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios?language=objc\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo make this work the following methods must be implemented:\r\n\r\n- bool request_permission(string)\r\n- bool request_permissions()\r\n- string[] get_granted_permissions()\r\n\r\nHowever, it would be cleaner if the mobile OS api could be refactored into:\r\n\r\n- bool request_permission(string)\r\n- bool is_permission_granted(string)\r\n\r\nThis makes handling permissions more specific. Also, the existing request_permissions() is opaque.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike in the Android os api, we could start with implementing the RECORD_AUDIO permission in iphone_os.h and iphone_os.mm. \r\n\r\nSource: https://developer.apple.com/documentation/avfoundation/avaudiosession/1616601-requestrecordpermission?language=objc\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a core feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a system feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1271",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1271/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1271/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1271/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1271",
    "id": 666969213,
    "node_id": "MDU6SXNzdWU2NjY5NjkyMTM=",
    "number": 1271,
    "title": "Add a new / better way to add important add-ons, when downloading the engine . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-07-28T10:38:48Z",
    "updated_at": "2020-07-28T15:19:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've been thinking, one reason that many add-ons are not ' core ', is to avoid the engine getting too big . . I had an idea, to make downloading some often asked for features happen, on the official download page . . So, the page looks like, so . .\r\n\r\nTo be clear, I know those suggestions are bad, ie. it would NEVER be that list, it's stupid . . But, it's an idea, for sort of taking some of the features people ask for the most, and put them there, so when one downloads the engine, those things are there, in the Godot game folder, as sub-folders, any game made in it, can reference . . Also, when one builds the game, those things would get exported, in the final game export . . Again, it's a very bad graphics, I have made, sry . .\r\n\r\n![2020-07-27 1253](https://user-images.githubusercontent.com/61069740/88653941-02ad3400-d0cd-11ea-8b15-fdc4171971c2.jpg)\r\n\r\n![2020-07-28 1224](https://user-images.githubusercontent.com/61069740/88654251-65063480-d0cd-11ea-96e8-618c2b017cc2.jpg)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI often find that I want to download finished, approved expansions, but they are not there, ie. I have to look for plug-ins, or google it, maybe this could be a good way to add features, that are OFTEN asked for, such as Terrain Editor, so the engine retains it's small size, for those who want that, and so one doesn't have to google, or look in the Assetlib for these things, since technically a terrain editor is not an ' asset ', that's more like 3D characters, tile sets, stuff you put in the game . .\r\n\r\nThis is a suggestion, but I think this would be very nice, and also so the core developers could make these things, since many people ask for them, but the core Godot engine stays small . . It would require that the engine would be able to use the directory the Godot.exe for engine is located, and store stuff there . . If one clicks an add-on, one knows the engine devs have looked at it, and that it is finished, and can be used . . It could be a way of expanding the engine, without bloating it . .\r\n\r\nThose features would have to be integrated well with the engine, ie. if one selects something, on the list, it just works, and the extra menus, so on, are included . . To avoid bloating the engine, for instance, there could be a new tab, in a dock, or so, where one can select terrain . . I'm mentioning terrain, that's the only thing I can think of, but it could be other things, that the devs, and community want in the engine, but so far hasn't been developed, to keep the engine small, and light . . .\r\n\r\nIt's a proposal, since to me it's not clear, to look for stuff like a terrain editor in Assetlib, assets are typically stuff like 3D models, textures, or so . . It would also mean, a part of the core contributors could go all-in, on developing a good terrain system, with layered textures, without it adding, to the core engine download, unless it's specifically needed . . There could also be stuff, like a low-poly, mid-poly, high-poly character creator, with options to change textures, or colors on clothes, with animations, included . . Having it on the official download page would help me know, it's not a buggy feature, that some user have made and, that might crash, but it's been tested, a lot, by the core team, and works well with the engine . . It would lower total size of Godot download to a minimum, while providing support for much asked for features, at the same time, ie. you download what you need, not more . .\r\n\r\nThe ideas above are BAD, ie. it will probably be completely different things the devs, and contributors think belong there, but it would be nice, to able to download things that, are often asked for, but isn't in the core engine, because it might belong outside the ' core ' definition, of the engine . . It could also be away for contributors, and devs to add the features they feel are needed, without increasing the size of the download needlessly, and users would know, those things there, it's tested, good code, wholly endorsed by the engine makers, and, it works . .\r\n\r\nThx . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe pictures above hopefully show it, again, the things on the list are really ridiculous, completely wrong . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI feel some of the features many users ask for, but aren't in the core engine, could be developed there, and many users would enjoy it, and find it makes sense, also . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAgain, I think this is a better way of doing it, and it would be immediately obvious to new users, downloading the engine, what they have to do, to get these things, ie. not look for weeks on the internet, to find out a random guy called Zylann made a plug-in, that might work, or so . . I know Zylann is hard-core, but I have no idea what I'm downloading, at all, could be buggy, un-supported, make the engine crash, or worse . . .\r\n\r\nThank you . . . :O",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1269",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1269/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1269/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1269/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1269",
    "id": 666743593,
    "node_id": "MDU6SXNzdWU2NjY3NDM1OTM=",
    "number": 1269,
    "title": "Add an option to export a HTML5 project as a Progressive Web App",
    "user": {
      "login": "yhcharles",
      "id": 2959773,
      "node_id": "MDQ6VXNlcjI5NTk3NzM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2959773?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhcharles",
      "html_url": "https://github.com/yhcharles",
      "followers_url": "https://api.github.com/users/yhcharles/followers",
      "following_url": "https://api.github.com/users/yhcharles/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhcharles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhcharles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhcharles/subscriptions",
      "organizations_url": "https://api.github.com/users/yhcharles/orgs",
      "repos_url": "https://api.github.com/users/yhcharles/repos",
      "events_url": "https://api.github.com/users/yhcharles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhcharles/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-28T04:17:13Z",
    "updated_at": "2020-09-18T22:07:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA simple game targeting for web export.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to export the project as a PWA app, which can be played offline and \"installed\" on device for mobile as well as desktop. But it's not supported now. I can add partially support by using html template, but this solution doesn't generalize well. I still need to manually add/change some file after exporting.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWith official support, web export should be able to automatically generate the `manifest.json` as well as `service_worker.js` files, which makes the web export an complete PWA app.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI tried to follow Google's tutorial: https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0 to add PWA support. And here's the commit enabling PWA for my toy project: https://github.com/yhcharles/yhcharles.github.io/commit/22553cb2483b56b7d5c2fffc6d6d48bf79ebe144\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is possible, but still some manual work, and not so convenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1269/reactions",
      "total_count": 17,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1268",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1268/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1268/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1268/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1268",
    "id": 666685329,
    "node_id": "MDU6SXNzdWU2NjY2ODUzMjk=",
    "number": 1268,
    "title": "Exported vars should automatically detect changes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-28T01:29:22Z",
    "updated_at": "2020-07-29T01:56:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nnodes don't update when their resource's variables change including nested data\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake changing resources and thier nested data update on the nodes end withing using properties and a tool script\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess something similar to unity in which if you change something it updates in the scene and inspector \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used quite alot especially in ui.\r\nit also can be worked around but you have to update everything manually\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits help reduce the amount of code to do something that should already be part of the editor and how it serializes scripts.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1268/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1267",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1267/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1267/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1267/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1267",
    "id": 666668217,
    "node_id": "MDU6SXNzdWU2NjY2NjgyMTc=",
    "number": 1267,
    "title": "Improve the editor docking system for better usability",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-28T00:33:41Z",
    "updated_at": "2020-07-28T08:02:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Spaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ncustomization of the layout of the editor\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI know people are working on implementing better docking so I figured I would make this suggestion..\r\n\r\n\r\nsome things I think would also make this better would be..\r\n- allow us to drag and drop windows by dragging their title bars over to another window\r\n- show us an idea of where we can drag and drop with something like so..\r\n![image](https://user-images.githubusercontent.com/2453707/88605495-ee1a5e80-d02e-11ea-8f3a-d47f6e91fd24.png)\r\n\r\n- allow us to close each window and reopen it from editor->editor windows.\r\n- allows us to move the script window, scene window and bottom windows\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically something similar to unity where each window can be docked really about anywhere\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used alot and no i don't think it can be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits improves workflow\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1267/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1266",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1266/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1266/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1266/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1266",
    "id": 666173630,
    "node_id": "MDU6SXNzdWU2NjYxNzM2MzA=",
    "number": 1266,
    "title": "Change next statement line in debug",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-27T10:20:59Z",
    "updated_at": "2020-07-27T10:25:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d Platformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen stepping through code, if you step too far you cannot go back and have to restart your code from the beginning. Having a 'next debug statement' option would be useful.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHave an icon to the left of the line number section showing the current debug line (this would be helpful in itself as the default line highlight is hard to see sometimes), you can then drag it to another line and the code starts from there, i.e. how you do it in most debuggers.\r\n\r\nAt the minute you can edit text while in the debugger and have it evaluated, so moving the next stack frame should be easy enough...\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/12863685/88531577-f5c01000-cffa-11ea-9cdf-20ee00cdc124.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBasic debugging features is fundamental to coding.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1265",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1265/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1265/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1265/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1265",
    "id": 666079401,
    "node_id": "MDU6SXNzdWU2NjYwNzk0MDE=",
    "number": 1265,
    "title": "Add a toggle for globally disabling \"filter\" so people don't have to re-import their assets constantly",
    "user": {
      "login": "pajcek11",
      "id": 67163678,
      "node_id": "MDQ6VXNlcjY3MTYzNjc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/67163678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pajcek11",
      "html_url": "https://github.com/pajcek11",
      "followers_url": "https://api.github.com/users/pajcek11/followers",
      "following_url": "https://api.github.com/users/pajcek11/following{/other_user}",
      "gists_url": "https://api.github.com/users/pajcek11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pajcek11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pajcek11/subscriptions",
      "organizations_url": "https://api.github.com/users/pajcek11/orgs",
      "repos_url": "https://api.github.com/users/pajcek11/repos",
      "events_url": "https://api.github.com/users/pajcek11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pajcek11/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-27T08:05:35Z",
    "updated_at": "2020-07-27T09:31:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nAdding pixel-graphics to my game like a normal human bean.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEvery time I import an asset, I have to re-import it because someone thought it was a good idea to make all assets blurry upon default import (the notorious \"filter\" toggle)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn the settings, add a checkbox to globally disable filtering of new assets so normal people can just uncheck it and have their assets imported without the filter, instead of having to reimport them all the time \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nInside of Editor > EditorSettings > Filesystem > Import, there is a LOT of space where you can add a checkbox that says \"apply filter by default\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOh, man, I'm sure there is a very good reason for filtering being the default, as it is also a problem in Gamemaker, but cmon. People use these types of engines for pixel games. And it's not a loud minority. If there is overwhelming proof that the vast majority (and not 50:50) like blurry and ugly assets in their games, then I wanna see that statistic.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is as basic as it gets. I'm surprised that it doesn't exist yet.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1262",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1262/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1262/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1262/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1262",
    "id": 665775447,
    "node_id": "MDU6SXNzdWU2NjU3NzU0NDc=",
    "number": 1262,
    "title": "Editor plugin can't influence project settings more than add_autoload_singleton",
    "user": {
      "login": "nezvers",
      "id": 26794315,
      "node_id": "MDQ6VXNlcjI2Nzk0MzE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/26794315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nezvers",
      "html_url": "https://github.com/nezvers",
      "followers_url": "https://api.github.com/users/nezvers/followers",
      "following_url": "https://api.github.com/users/nezvers/following{/other_user}",
      "gists_url": "https://api.github.com/users/nezvers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nezvers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nezvers/subscriptions",
      "organizations_url": "https://api.github.com/users/nezvers/orgs",
      "repos_url": "https://api.github.com/users/nezvers/repos",
      "events_url": "https://api.github.com/users/nezvers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nezvers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-26T12:57:45Z",
    "updated_at": "2020-07-26T13:12:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm creating [GameTemplate](https://github.com/nezvers/Godot-GameTemplate) that takes care of Game settings, Key rebinding, async loading levels, localization, etc.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor the addon like this be as easily usable as possible it needs to set some things for the user automatically. Most necessary thing (Autoload) is thankfully easily added on plugin's _enter_tree() and removed on _exit_tree().\r\nBut same type project scope settings like translations aren't available, hence I had to make them preloaded on runtime launch. It's should be an available option the same way as autoloads.\r\nAudio bus layouts do not have even workaround because it needs to be present when working in the editor and AudioStreamPlayers need to know the bus to send audio to.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow EditorPlugin to add_language_translation() to the project the same way as Autoloads.\r\nAllow EditorPlugin to change project settings. Right now plugin can't do that (even if the plugin is set as a tool) and it's only possible to deviate from project settings at runtime.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd methods to add_language_translation() / add_input_map() / use ProjectSetting.set_setting and all their counterpart methods.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is needed for add-ons",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1261",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1261/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1261/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1261/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1261",
    "id": 665771910,
    "node_id": "MDU6SXNzdWU2NjU3NzE5MTA=",
    "number": 1261,
    "title": "Global parameter input node for AnimationTree",
    "user": {
      "login": "mrzapp",
      "id": 2747428,
      "node_id": "MDQ6VXNlcjI3NDc0Mjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2747428?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrzapp",
      "html_url": "https://github.com/mrzapp",
      "followers_url": "https://api.github.com/users/mrzapp/followers",
      "following_url": "https://api.github.com/users/mrzapp/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrzapp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrzapp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrzapp/subscriptions",
      "organizations_url": "https://api.github.com/users/mrzapp/orgs",
      "repos_url": "https://api.github.com/users/mrzapp/repos",
      "events_url": "https://api.github.com/users/mrzapp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrzapp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-26T12:33:21Z",
    "updated_at": "2020-08-09T07:29:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA general purpose framework for RPGs\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe AnimationTree requires parameters to be set on individual nodes with specific paths\r\n\r\n- This makes generalisation impossible\r\n- When there are structural changes to the AnimationTree, the code has to be changed too\r\n- If a single parameter value is used in several places in the AnimationTree, it has to be set multiple times\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA \"global\" parameter input node added to the AnimationTree, so we can set parameters once and use them anywhere.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCurrent UI, parameter values have no dynamic input:\r\n\r\n![image](https://user-images.githubusercontent.com/2747428/88478993-94416800-cf4c-11ea-82eb-7342124106c2.png)\r\n\r\nPossible future UI, parameter values can use dynamic inputs:\r\n\r\n![image](https://user-images.githubusercontent.com/2747428/88479001-9dcad000-cf4c-11ea-8a16-018d830f3da7.png)\r\n\r\nUsage:\r\n\r\n```gdscript\r\nanimation_tree.set(\"global_parameters/collider_height\", my_collider.shape.height)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is would be deeply integrated with the AnimationTree",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1261/reactions",
      "total_count": 11,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 2,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1260",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1260/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1260/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1260/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1260",
    "id": 665761541,
    "node_id": "MDU6SXNzdWU2NjU3NjE1NDE=",
    "number": 1260,
    "title": "Add Bind Group property to Tile",
    "user": {
      "login": "98teg",
      "id": 33127169,
      "node_id": "MDQ6VXNlcjMzMTI3MTY5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/33127169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/98teg",
      "html_url": "https://github.com/98teg",
      "followers_url": "https://api.github.com/users/98teg/followers",
      "following_url": "https://api.github.com/users/98teg/following{/other_user}",
      "gists_url": "https://api.github.com/users/98teg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/98teg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/98teg/subscriptions",
      "organizations_url": "https://api.github.com/users/98teg/orgs",
      "repos_url": "https://api.github.com/users/98teg/repos",
      "events_url": "https://api.github.com/users/98teg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/98teg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-26T11:20:08Z",
    "updated_at": "2020-07-26T12:25:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA tilemap editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI am not using TileMap right now, I have implemented a custom class myself. However, while investigating Godot build-in tilemap, I realized that it is not possible to connect different kinds of tyles using just the editor without creating a script. So I would like to propose the idea I implemented in my project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis feature consists of adding a new property to the Selected tile form while editing a TileSet, named Bind Group. This property is a String that would be empty by default. The user would be able to edit it in a way similar to the Name property. If two Tiles share the same Bind Group, they would auto tile together.\r\n\r\nFor example, let's consider a user that has a dirt path tile, a stone path tile, and they both share the \"path\" Bind Group. In this case, they auto tile with each other when placed together. And in this way, the user would not have to create a script for each tile or consult the tile id, which is a value a bit obscured.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis would imply adding two new methods to tile_set.h:\r\n\r\n- void tile_set_bind_group(int p_id, const String &p_bind_group)\r\n\r\n- String tile_get_name(int p_id) const\r\n\r\nModifying the struct TileData to include this property, modifying the method is_tile_bound for it to consider this property and adding the new property to the editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, it is the intended way to recrate this behavior right now.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause it is a modification of an existing Godot build-in class.\r\n\r\nIf this gets approved, I should be able to implement it myself.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1259",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1259/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1259/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1259/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1259",
    "id": 665637446,
    "node_id": "MDU6SXNzdWU2NjU2Mzc0NDY=",
    "number": 1259,
    "title": "Add SceneTree signals for adding/removing a Node to/from a group.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-25T18:58:33Z",
    "updated_at": "2020-07-25T23:14:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA plugin for an ECS-like usage of nodes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use nodes and groups as a sort of state machine for system-wide process callbacks, very similar to how the Viewport node works to execute input callbacks, only, instead of each node implementing an input callback, a System node executes an operation over every node in the collection.\r\n\r\nThis works great for iterative operations like process, but not great for in-place state-change operations, e.g. going from state A to state B should trigger some logic (represented as removing group A and adding group B). I could code this logic in the individual node's script, but then I'd be sharing logic across several scripts.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWhat I would prefer is if I could have a single callback that handles every node that is undergoing a group state change. Since groups are actually maintained by the SceneTree anyway, it makes sense that the SceneTree should have a signal for handling an update to its `group_map` data. Then, I could just connect to that signal and handle every node's mutation logic in a single place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Add `group_changed` signal to SceneTree with a reference to the node that was added or removed to/from the group and a string for which group was updated.\r\n1. Emit the signal in `SceneTree::add_to_group()` and `SceneTree::remove_from_group()`.\r\n1. Add signal to SceneTree's `_bind_methods()` function.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around, but not in an architecturally clean way. At least not without traits (though that wouldn't be optimal either since it would only work with GDScript and not other languages).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCan't be fixed with a plugin or asset.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1259/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1258",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1258/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1258/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1258/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1258",
    "id": 665542337,
    "node_id": "MDU6SXNzdWU2NjU1NDIzMzc=",
    "number": 1258,
    "title": "Improve the font rendering quality by using LCD subpixel optimizations",
    "user": {
      "login": "bluenote10",
      "id": 3620703,
      "node_id": "MDQ6VXNlcjM2MjA3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3620703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluenote10",
      "html_url": "https://github.com/bluenote10",
      "followers_url": "https://api.github.com/users/bluenote10/followers",
      "following_url": "https://api.github.com/users/bluenote10/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluenote10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluenote10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluenote10/subscriptions",
      "organizations_url": "https://api.github.com/users/bluenote10/orgs",
      "repos_url": "https://api.github.com/users/bluenote10/repos",
      "events_url": "https://api.github.com/users/bluenote10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluenote10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-25T08:19:02Z",
    "updated_at": "2020-07-25T09:39:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA guitar practicing application ([here](https://www.youtube.com/watch?v=odWXE5Dv9HQ) is an old version but in VR).\r\n\r\nIn general, interested in non-game use cases of Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI cannot achieve the high quality font rendering I want (and I get with native applications -- which in my case is Linux).\r\n\r\nI've setup a [small demo project](https://github.com/bluenote10/GodotDebugProjects/tree/master/FontRendering) to illustrate the problem. The example uses the \"Ubuntu Medium\" font, but the problem is not specific to this font -- all fonts I tried suffer from the problem.\r\n\r\nIn the demo code the \"Use Filter\" and \"Use Mipmaps\" settings on the font are enabled, as well as the \"Rendering > Quality > Dynamic Fonts > Use Oversampling\" setting. Depending on the hinting mode the result ranges from:\r\n\r\n*Normal hinting:*\r\n\r\n![image](https://user-images.githubusercontent.com/3620703/88452235-56b1e180-ce5d-11ea-9e05-75ac5b3607ab.png)\r\n\r\n*Light hinting:*\r\n\r\n![image](https://user-images.githubusercontent.com/3620703/88452245-71845600-ce5d-11ea-8668-69a07ae32ec2.png)\r\n\r\n*No hinting:*\r\n\r\n![image](https://user-images.githubusercontent.com/3620703/88452275-9d074080-ce5d-11ea-9965-cf7df0939a5d.png)\r\n\r\nThis looks much worse compared to what I get from native font rendering. For instance this is how the font looks in the native font viewer:\r\n\r\n![image](https://user-images.githubusercontent.com/3620703/88452298-cde77580-ce5d-11ea-8b78-da3069c584c9.png)\r\n\r\nOr this is with rendering the font in the browser (Firefox):\r\n\r\n![image](https://user-images.githubusercontent.com/3620703/88452311-e9528080-ce5d-11ea-8204-729bfe615b2a.png)\r\n\r\nIt may help to zoom into the images to see the differences in font hinting.\r\n\r\nOverall I'm seeing this low quality font rendering in all Godot-based applications I've tried, and also the fonts in the editor always looked slightly off to me. [Others seem to observe the same](https://www.reddit.com/r/godot/comments/cskigl/is_there_any_way_to_get_better/). There are also related open issues e.g. https://github.com/godotengine/godot/issues/30643 or https://github.com/godotengine/godot/issues/31495.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCome up with a solution for high quality font rendering. This needs planning by the experts ;).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI'm not expert on the topic, but my guess is that the missing piece is subpixel hinting / aliasing. But maybe there are other ideas?\r\n\r\nI assume Godot uses Freetype, and Freetype in general seems to support [subpixel rendering](https://www.freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html). [This post](https://www.reddit.com/r/godot/comments/cskigl/is_there_any_way_to_get_better/) suggest that it might be possible, but may be tricky due to color blending modes. \r\n\r\nNonetheless, subpixel rendering is a standard in native applications, and for non-game use cases, users may expect font rendering to be on par with native font rendering. It would be great to give users the option trade rendering performance for higher quality font rendering.\r\n\r\n**Is subpixel rendering not outdated and HiDPI displays will solve the problem in the long term?**\r\n\r\nOn the ambitious gaming side that is hopefully true. But on the other hand, 1080p is such a prevalent resolution, that it is unlikely that it disappears entirely any time soon. Especially for non-game applications I think it is likely that 1080p is still around for quite a while, and on 1080p subpixel rendering seems to make a big difference.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't see a work-around, because font rendering is something fundamental in the engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nProbably the same applies: font rendering is something fundamental in the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1257",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1257/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1257/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1257/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1257",
    "id": 665534017,
    "node_id": "MDU6SXNzdWU2NjU1MzQwMTc=",
    "number": 1257,
    "title": "Add VisualScript tests to detect non-sequenced blocks without outputs",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-25T07:14:12Z",
    "updated_at": "2020-07-26T15:25:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Godot demo projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n![](https://user-images.githubusercontent.com/1646875/86331059-8da62600-bc16-11ea-93ce-f1ce58ff46a1.png)\r\n\r\nThe above is pointless in VisualScript, since nothing can trigger this code block. It's not sequenced and has no outputs. This is part of a bug that I reported here https://github.com/godotengine/godot/issues/40046 but I'd like to propose a test to avoid these problems.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI suggest implementing a system to check for engine-provided VisualScript code blocks that match both of these conditions:\r\n\r\n* Has no outputs\r\n\r\n* Is not sequenced\r\n\r\nIf anything matches, throw an error and fail the test, and print what caused the failure.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** Like ClassDB tests.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Yes, VisualScript is core, and parts of VisualScript being broken is a bug, so tests are important.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1257/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1256",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1256/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1256/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1256/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1256",
    "id": 665474878,
    "node_id": "MDU6SXNzdWU2NjU0NzQ4Nzg=",
    "number": 1256,
    "title": "Add Support for Applying Scale",
    "user": {
      "login": "I7SOD",
      "id": 51547693,
      "node_id": "MDQ6VXNlcjUxNTQ3Njkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51547693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/I7SOD",
      "html_url": "https://github.com/I7SOD",
      "followers_url": "https://api.github.com/users/I7SOD/followers",
      "following_url": "https://api.github.com/users/I7SOD/following{/other_user}",
      "gists_url": "https://api.github.com/users/I7SOD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/I7SOD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/I7SOD/subscriptions",
      "organizations_url": "https://api.github.com/users/I7SOD/orgs",
      "repos_url": "https://api.github.com/users/I7SOD/repos",
      "events_url": "https://api.github.com/users/I7SOD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/I7SOD/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-25T00:04:36Z",
    "updated_at": "2020-07-25T10:57:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am currently learning godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere a lot of scaling issues that arise from using `floating ` or `non-uniform` scale values in the editor ranging from making calculations with them and so on which I think other users should have noticed.\r\n![ScaleIssue2](https://user-images.githubusercontent.com/51547693/88443603-cf3e8100-ce10-11ea-8c5a-6b10667eee0e.PNG)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an apply scale button at the end of scale after changing the scale to make the scaling be a `uniform ` 1 to 1 scaling like that available in blender .\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUsing blender as an example after changing the scale of objects in blender and using the `apply-scale` functionality in blender, the scale becomes uniform again which now makes it easier to make calculations based on the scale.\r\n\r\n![ScaleIssue1](https://user-images.githubusercontent.com/51547693/88443991-c9e23600-ce12-11ea-8733-6c30694643aa.PNG)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think you can use scripts to fix this problem.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe scale options are part of the core functionalities of Godot : Node2D, Spatial and Control nodes",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1255",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1255/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1255/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1255/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1255",
    "id": 665353468,
    "node_id": "MDU6SXNzdWU2NjUzNTM0Njg=",
    "number": 1255,
    "title": "Make grouping exported variables easier",
    "user": {
      "login": "Zireael07",
      "id": 4525388,
      "node_id": "MDQ6VXNlcjQ1MjUzODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4525388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zireael07",
      "html_url": "https://github.com/Zireael07",
      "followers_url": "https://api.github.com/users/Zireael07/followers",
      "following_url": "https://api.github.com/users/Zireael07/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zireael07/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zireael07/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zireael07/subscriptions",
      "organizations_url": "https://api.github.com/users/Zireael07/orgs",
      "repos_url": "https://api.github.com/users/Zireael07/repos",
      "events_url": "https://api.github.com/users/Zireael07/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zireael07/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-24T18:52:54Z",
    "updated_at": "2021-01-06T02:00:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d space game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy nodes (e.g. planets, stars) have a LOT of exported variables, often thematically grouped (eg. physical properties and cosmetic stuff, ship physics and AI stuff and cargo...)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe already have a workaround to group the exported variables, https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/gdscript_exports.html#adding-script-categories , but it is... NOT pleasant to use.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe syntax proposed in PR #40669 is the following: cosmetic (section, \"sectionname\"): followed by an indent and any variable declarations wanted.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around, but it takes TOO many lines of script (circa 10 per each variable, times 10 variables, that's around 100 lines just for that - and in another project, I have nodes with 20 variables...)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think addons can do such deep injections into the inspector, AND the same NEEDS to apply to remote scene tree debugging, where the issue is exacerbated by also showing non-exposed variables.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1255/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1254",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1254/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1254/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1254/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1254",
    "id": 665349525,
    "node_id": "MDU6SXNzdWU2NjUzNDk1MjU=",
    "number": 1254,
    "title": "Make it possible to configure the microphone input stream for lowest latency",
    "user": {
      "login": "hakoptak",
      "id": 26923796,
      "node_id": "MDQ6VXNlcjI2OTIzNzk2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26923796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hakoptak",
      "html_url": "https://github.com/hakoptak",
      "followers_url": "https://api.github.com/users/hakoptak/followers",
      "following_url": "https://api.github.com/users/hakoptak/following{/other_user}",
      "gists_url": "https://api.github.com/users/hakoptak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hakoptak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hakoptak/subscriptions",
      "organizations_url": "https://api.github.com/users/hakoptak/orgs",
      "repos_url": "https://api.github.com/users/hakoptak/repos",
      "events_url": "https://api.github.com/users/hakoptak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hakoptak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "m4gr3d",
      "id": 914968,
      "node_id": "MDQ6VXNlcjkxNDk2OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/914968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m4gr3d",
      "html_url": "https://github.com/m4gr3d",
      "followers_url": "https://api.github.com/users/m4gr3d/followers",
      "following_url": "https://api.github.com/users/m4gr3d/following{/other_user}",
      "gists_url": "https://api.github.com/users/m4gr3d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m4gr3d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m4gr3d/subscriptions",
      "organizations_url": "https://api.github.com/users/m4gr3d/orgs",
      "repos_url": "https://api.github.com/users/m4gr3d/repos",
      "events_url": "https://api.github.com/users/m4gr3d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m4gr3d/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "m4gr3d",
        "id": 914968,
        "node_id": "MDQ6VXNlcjkxNDk2OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/914968?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m4gr3d",
        "html_url": "https://github.com/m4gr3d",
        "followers_url": "https://api.github.com/users/m4gr3d/followers",
        "following_url": "https://api.github.com/users/m4gr3d/following{/other_user}",
        "gists_url": "https://api.github.com/users/m4gr3d/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/m4gr3d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/m4gr3d/subscriptions",
        "organizations_url": "https://api.github.com/users/m4gr3d/orgs",
        "repos_url": "https://api.github.com/users/m4gr3d/repos",
        "events_url": "https://api.github.com/users/m4gr3d/events{/privacy}",
        "received_events_url": "https://api.github.com/users/m4gr3d/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-24T18:44:55Z",
    "updated_at": "2020-09-18T21:45:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA microphone-driven mobile game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy game needs to detect external sound beeps as fast as possible. This requires the lowest possible input latency. The standard Android OpenSL ES configuration does not guarantee the lowest possible input latency due to input filtering.\r\n\r\n**Describe the enhancement and how it helps to overcome the problem or limitation:**\r\nTo guarantee the lowest possible input latency, the OpenSL ES AudioRecorder must be configured with the SL_ANDROID_RECORDING_PRESET_VOICE_RECOGNITION flag.\r\n\r\nSource: https://developer.android.com/ndk/guides/audio/opensl/opensl-prog-notes\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTo configure the AudioRecorder one has to add the following lines to the `audio_driver_opensl.cpp` file:\r\n\r\n```\r\n// Obtain the configuration interface for the recorder\r\nSLAndroidConfigurationItf configItf;\r\n(*recorder)->GetInterface(recorder, SL_IID_ANDROIDCONFIGURATION, &configItf);\r\n\r\n// Set the recording flag\r\nSLuint32 recPreset = SL_ANDROID_RECORDING_PRESET_VOICE_RECOGNITION;\r\n(*configItf)->SetConfiguration(configItf, SL_ANDROID_KEY_RECORDING_PRESET, &recPreset, sizeof(SLuint32));\r\n```\r\nIt would ideal to define an \"Input Latency\" property in the \"Project Settings > Audio\" section and define some presets for the input latency: LOW, DEFAULT. How this translates to other platforms is up to the experts.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is low-level OpenSL ES so unfortunately not.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1253",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1253/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1253/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1253/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1253",
    "id": 665220491,
    "node_id": "MDU6SXNzdWU2NjUyMjA0OTE=",
    "number": 1253,
    "title": "Arrangement of Nodes in GraphEdit, VisualScript and VisualShaders",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-24T14:49:50Z",
    "updated_at": "2020-11-08T13:21:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nMultiplayer 3d game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nVisual Shader graphs in Godot can become extremely messy and there's even a bug that scrambles the graph randomly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nLooking for collaborators.\r\n\r\nCo-Authored with theoway#7853\r\n\r\nThe proposal aims to organize the node's position in graph edit, visual shader editor and visual script editor.\r\n\r\nThis proposal is inspired by Sugiyama's methodology, which is very popular and commonly used in software to draw directed graphs automatically. The method has been modified to fit the needs of the users, keeping in mind the design architecture and implementation of the graph editing system in Godot Engine.\r\n\r\nThis feature will find its use in Visual Script Editor and Visual Shader Editor.  Users can use this feature to auto-arrange the node positions, in a horizontal-block layout. This will help the users save time from rearranging the nodes while editing to get clarity and better organization, especially when the visual scripts and visual shaders have a large number of nodes. \r\n\r\nhttps://www.youtube.com/watch?v=LY3E5VGnAuQ\r\n  \r\nhttps://www.youtube.com/watch?v=plafUnYKhu4\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**Design Abstract**\r\n\r\nThe idea is to add functionality to the graph edit system that will automatically rearrange the nodes, dividing them into layers and blocks, making them comprehensive and easy to read. This functionality can be used in Visual Script Editor and Visual Shader Editor (as they also use graph edit system) to automatically reorganize the nodes. The feature will also handle the cases when the grid is turned on/off or when its scaling is changed.\r\n\r\n**Preliminaries**\r\n\r\nThe references below are made according to the graph edit, visual script and visual shaders of Godot. \r\n\r\n1. Graph: Graph here implies the structure that consists of vertices and their corresponding edges. \r\nNote: At some places, it implies the canvas of the visual script/visual shader editing system where the nodes are placed. It will be indicated to avoid confusion.\r\n2. Layer: The vertices of the graph are partitioned into non-empty layers, each having an ordering of vertices. Layering is the process of dividing the vertices into different layers.\r\n3. Nodes: Nodes here imply the graph nodes of Godot. However, it is used interchangeably with vertices, when talking in terms of graph theory.\r\n4. Edges: An ordered pair of nodes. Edges between nodes are decided based on their sequence and data connections(in Visual Script) / scalar, vector, transform etc. connections(in visual shaders). Since there can be one or more connections between two nodes, it will be considered a single edge with priority to sequence connection and, in case of a visual shader node, the top port connection. As nodes in VisualScript/VisualShaders can have multiple input and output sequence/data ports, the edges will carry the information of the involved input/output ports.\r\n5. In the pictures shown, edges are directed downwards from top to bottom layers. But since the flow of visual script/visual shader connections is left to right, the layering will be from left to right, which implies that the layers will be numbered from left to right from 1 to n(Number of layers). If Li is the upper layer of Lj , this implies that Li lies to the left of Lj.\r\n\r\n**Methodology**\r\n\r\n**This methodology consists of three phases**\r\n\r\n1. Converting a Directed Acyclic Graph to Layered Graph: \r\n\r\nThe node layout in graph edit is a Directed Acyclic Graph (DAG) with the nodes being the vertices and the sequence, data connections being the edges. The auto-arrangement procedure only works for layered graphs. That's why the DAG obtained from the graph edit system(or visual script/visual shaders) is converted into a layered graph by following the Layering and Ordering and Cross-Minimisation methods.\r\n\r\n2. Vertical Alignment: \r\n\r\nOnce we have a layered graph with a minimum number of edge crossings, we then place the vertices(nodes of the visual script) in horizontal blocks. Edges between the blocks will be drawn straight. To achieve this, Preprocessing, Horizontal Alignment and Inner Shift methods will be used.\r\n\r\n3. Vertical Compaction: \r\n\r\nIn the final phase, the blocks are moved as close as possible, while keeping the edges straight inside the blocks, and assigning explicit y coordinates to the nodes. The method used for this phase is Place Block With Straightening. \r\n\r\n**The various techniques mentioned in the methodology are explained below**\r\n\r\n1. Layering: \r\n\r\nIn this process, the graph will be divided into non-empty layers. Layering is done in such a way that an edge will always point from the node of the upper layer to the lower layer node. There will be no edges (connections) between nodes of the same layers. The direction of edges is orthogonal to the layers. To do this, the Longest Path Layering algorithm will be used. \r\n\r\n```\r\nAlgorithm:\r\nRequires: G = (V,E) //  V- Set of vertices, E- Set of edges\r\n\r\n// V is the set of vertices, U is the set of vertices that will be assigned to the current layer \r\n// Z is the set of vertices that have been assigned to the previous layers\r\n// current_layer is the layer that will be receiving the vertices // N+(v) is the set of upper neighbours of the vertex v.\r\n\r\nInitialisation: U ← NULL , Z ← NULL , current_layer ← 1\r\n1. while U ≠ V do\r\n2.     Select vertex v ϵ V - U with N+(v) ⊆ Z\r\n3.     if  v has been selected then\r\n4.         Assign v to the layer with a number current_layer\r\n5.         U ← U ∪ {v}\r\n6.     end if\r\n7.    if no vertex has been selected then\r\n8.        current_layer ← current_layer + 1\r\n9.        Z ← Z ∪ U\r\n10.    end if\r\n11. end while\r\n```\r\nResult: This will result in the layering of the graph. Each vertex will be assigned a layer.  \r\n\r\n![image](https://user-images.githubusercontent.com/32321/88405726-82ad6400-cd84-11ea-8f79-9bcde8ba8208.png)\r\n\r\n2) Ordering and Cross-Minimisation:\r\n\r\nThis process involves ordering vertices in each layer so that a minimum number of edge crossings occur. This is achieved by going layer by layer and trying to minimize the inner-crossings between adjacent layers. Inner-crossings is the crossing of two inner edges(edges that have starting points and ending points at the two adjacent layers) between adjacent layers.\r\n\r\n```\r\nAlgorithm:\r\n\r\nRequires two layers L1 and L2, with L1 having a fixed ordering. L1 is the upper layer.\r\n\r\nInitialization: A crossing-matrix is computed, which keeps the count of crossing among the edges of adjacent vertices of the lower layer, L2. \r\n\r\n//c(u,v) gives the number of crossings of the edges of the vertices of u and v.\r\n\r\n1. Choose an initial ordering of L2\r\n2. repeat \r\n3.     for each adjacent pair of vertices i, j <- i + 1  ϵ L2\r\n4.         if c(i,j) > c(j,i) do\r\n5.             exchange vertices i, j \r\n6.       until the number of crossings is not reduced anymore\r\n\r\nResult:  A layered graph with a reduced number of inner-crossings is obtained.\r\n\r\n\r\n```\r\n\r\n3) Preprocessing:\r\n\r\nThis method resolves the crossing on non-inner segments and inner-segments(Inner-segments are the edges between two adjacent layers). It also marks the non-inner segments to favour the horizontal alignment of edges inside the blocks.\r\n\r\n```\r\nAlgorithm:\r\n// h is the total number of layers in the layered graph\r\n// |Li| gives the number of vertices present in the layer Li\r\n// v(l)i gives the vertex at order 'l' in the ordering of layer i\r\n\r\n1. for i ←2, ..., h−2 do\r\n2.     k0 ← 0;  l ←1; \r\n3.     for l1  ← 1,...,|Li+1| do\r\n4.         if l1 = |Li + 1| or v(l1)(i+1)  is incident to inner segment between Li+1  and Li  then\r\n5.             k1 ←| Li |\r\n6.        if  v(l1)(i+1)  is incident to inner segment between Li+1  and Li then\r\n7.            k1 ← pos[upper neighbor of v(l1)(i+1) ] \r\n8.            while l <= l1 do\r\n9.                for each upper neighbor v(k)i of v(l)i+1 do\r\n10.                      if k < k0 or k > k1 then\r\n11.                          mark segment ( v(k)i , v(l)i+1 )\r\n12.                          l ← l +1\r\n13.                         k0 ← k1\r\n```\r\n\r\nResult:  Non-inner segments are marked so that they can be avoided during block formation.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88405796-9d7fd880-cd84-11ea-88b6-1acd5d46717d.png) \r\n![image](https://user-images.githubusercontent.com/32321/88405815-a5d81380-cd84-11ea-8157-07596306d120.png)\r\n\r\nThe left image shows a layered graph. The right image shows the same layered graph with inner crossings and non-inner segments removed.\r\nNote:-  See Preliminaries point 5.\r\n\r\n4) Horizontal Alignment: After the preprocessing is done, the nodes are placed inside blocks in a bottommost alignment with their median, upper neighbours. (upper neighbour means the nodes that lie to the left because we are considering horizontal alignment)\r\n```\r\nAlgorithm:\r\n//h is the number of layers\r\n//pos[v] gives the order of the vertex v in the ordering diagram layer to which it belongs\r\n//v(k)i means the vertex at the order k in the ordering of layer i.\r\n//ui < uj means that uj belongs to the upper layer.\r\n\r\n1. Initialize root[v] ←  v, v ∈ V\r\n2. Initialize align[v]← v, v ∈ V\r\n3. for i ←1 ,... ,h do\r\n4.     r ← 0\r\n5.     for k ← 1 ,..., |Li| do if v(k)i has upper neighbours u1 ≺ ...≺ ud with d>0 then\r\n6.         for m ← ⌊(d+1) / 2⌋, ⌈(d+1) / 2)⌉ do\r\n7.             if align[ v(k)i ] = v(k)i then\r\n8.                 if (um, v(k)i) not marked and r < pos[um] then\r\n9.                     align[um ] ← v(k)i\r\n10.                     root[ v(k)i ] ← root[um]\r\n11.                     align[v(k)i ]←root[v(k)i ]\r\n12.                     r = pos[um];\r\n```\r\nNow the vertices with similar roots are placed in the same blocks.Each block holds the following content:\r\n1. The root node(vertex) of the block.\r\n2. Vertices with their inner_shifts(Tells how much they'll be shifted inside the block). It is initialized to 0 for all vertices belonging to the block.\r\n3. It contains the width of a vertex(size of a node in the visual script), the position of ports of the nodes(vertices), edges.\r\n\r\nResult:  The nodes of the visual script are now divided into blocks.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88405922-c738ff80-cd84-11ea-9b2f-c1a813b46029.png)\r\n\r\nNote:-  See Preliminaries point 5.\r\n\r\n5) Inner Shift: This method tries to achieve straight edges within each block by shifting individual nodes inside a block. When calculating inner_shift(The shift in the offset of the node is termed as inner_shift), it considers different sizes of the nodes and port connections, which tells which output port is connected to which input port, because nodes in the visual script can have multiple input/output ports.\r\n```\r\nAlgorithm:\r\n//B is the collection of blocks, b is a block and b ϵ B\r\n//If (u,v) is the edge, then output_port((u,v)) gives the output port of u  from which edge emerges and \r\n//input_port((u,v)) gives the input port of v at which the edge ends.\r\n//yp gives the position of the port(y-coordinate from the bottom of the\r\n// node perimeter)\r\n//width(u) gives the width of the node u.\r\n\r\n1. for b ∈ B do \r\n2.     left ← 0, right ← 0 \r\n3.     for (u,v) ∈ b do \r\n4.         s ← innerShift[u] + yp( output_port((u,v)) ) − yp( input_port _port((u,v)) )\r\n5.         innerShift[v] ← s \r\n6.         left ← min(left,s)\r\n7.         right ← max(right, s+ width(v)) f\r\n8.      for all nodes v in block b do \r\n9.         innerShift[v] =  innerShift[v] - left \r\n```\r\nResult:  The nodes in each block are aligned horizontally with straight edges between each node(vertex) inside each block.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88406000-e5066480-cd84-11ea-991d-cec5363d591e.png)\r\n\r\n6) Place Block With Straightening: \r\n\r\nThese blocks that are formed can further be divided into classes.  A class is deﬁned by a unique sink that is reachable by all of the class's nodes(See the figure below for clarification). In this final process, the blocks and classes are compacted vertically. While iterating through each block, the inner_shifts and sizes of blocks are considered; this allows the block to 'flow' into each other, leaving little free space. But this can lead to overlapping, that's why a threshold value is calculated to prevent the nodes from moving further, resulting in a straight edge. But the threshold of a block cannot be calculated until it's connected block has already been placed. To handle such cases, a queue data structure is used to store edges of such blocks. When all the blocks have been placed, edges are fetched from the Queue and check how far the concerned block can be moved without exceeding the threshold value.\r\n\r\n```\r\nAlgorithm:\r\n//pos[w] gives the order of the vertex(node) w in the ordering of its corresponding layer.\r\n//pred[u] gives the preceding node of u in the block to which u belongs.\r\n//y[v] gives the y-coordinate of the node(vertex) v.\r\n//root[v] gives the root of the block to which v belongs.\r\n//align[w] used from the Preprocessing method\r\n\r\nfunction place_block(v)\r\n1. if y[v] undeﬁned then \r\n2.     y[v] ← 0, initial ← true, w ← v \r\n3.      thresh ← −∞\r\n4.     repeat \r\n5.         if pos[w]  > 0 then \r\n6.             n ← pred[w], u ← root[n] \r\n7.             place_block(u) \r\n8.             thresh ← calculate_threshold(v, u, thresh)\r\n9.             if sink[v]=v then \r\n10.                 sink[v] ← sink[u] \r\n11.             if sink[v] ≠ sink[ u] then \r\n12.                 sc ←  y[v] + innerShift[w] − x[u] − innerShift[n] − width[n] − δl \r\n13.                 shift[sink[u]] ← min(shift[sink[u]], sc) \r\n14.             else sb ← max(thresh, y[u] + inner_shift[n] + width[n] − inner_shift[w] + δl) \r\n15.                     if initial then y[v] ← sb \r\n16.                     else y[v] ← max(y[v], δl)\r\n17.                     initial ← false \r\n18.          else thresh ← calculate threshold(v, u, thresh)\r\n19.          w ← align[w] \r\n20.      until w = v\r\n\r\n//v- root node of the block\r\n//w- current node\r\n//ot- current threshold value \r\n//Q- Queue\r\nfunction calculate_threshold(v, w, ot)\r\n1. thresh ← ot \r\n2. if v = w then\r\n3.     (u,w) ← pick incoming edge of w \r\n4.     if block of root[u] placed then \r\n5.         thresh ← y[root[u]] + inner_shift[u] + yp(output_port((u,w))) − inner_shift[u] − yp(input_port((u,w))) \r\n6.      else if w has incoming edges then \r\n7.          enqueue w to Q \r\n8. if thresh = −∞ and align[w]=v then \r\n9.     symmetric to before, this time picking an outgoing edge \r\n10. return thresh\r\n\r\nfunction post_process() \r\n1. while Q not empty do \r\n2.     w ← dequeue from Q \r\n3.     (u,w) ← previously picked edge for w //(line 3, in calculate_threshold) \r\n4.      t1 ← y[u] + inner_shift[u] + yp(output_port((u,w))) − y[root[w] − inner-shift[w] - yp(input_port((u,w)))\r\n5.      t2 ← minimum distance between block of w and its neighbors\r\n6.      t ← if abs(t1) < abs (t2) then t1 else  t2 \r\n7. move all nodes v in w’s block by t\r\n\r\n//V- set of vertices\r\n1) initialize sink[v]← v,  v ∈ V\r\n2) initialize shift[v] ← ∞ , v ∈ V\r\n3) initialize y[v] to be undeﬁned, v ∈ V \r\n\r\n// root coordinates relative to sink \r\n4) for each b ∈ B do \r\n5)    place_block(root[b]) \r\n\r\n// absolute coordinates \r\n6) for each v ∈ b do \r\n7) y[v]← y[root[v]]\r\n8) if shift[sink[root[v]]] < ∞ then \r\n9)     y[v] ← y[v] + shift[sink[root[v]]]\r\n\r\n//Post-processing\r\n10) post_process()\r\n```\r\n\r\nResult:  The blocks and classes have been compacted vertically without introducing bends within the blocks.\r\n  \r\n![image](https://user-images.githubusercontent.com/32321/88406048-f6e80780-cd84-11ea-8d82-149f0fba4f27.png)\r\n\r\nWithout Straightening\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88406055-fbacbb80-cd84-11ea-9be7-22dde62cc212.png)\r\n\r\nplace_block() with thresholding\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88406078-010a0600-cd85-11ea-9000-217a556b67bf.png)\r\n\r\nAfter post_process()\r\n\r\n```\r\nTime Complexities:\r\n\r\nTime complexities of the various methods given above are listed below:\r\n\r\nMethod Time-Complexity (Worst-case)\r\n\r\n1. Layering\r\n    O(|V|)\r\n2. Crossing-Minimisation\r\n    O(|V|2)\r\n3. Preprocessing\r\n    O(|V|)\r\n4. Horizontal Alignment\r\n    O(|V|)\r\n5. Inner Shift\r\n    O(|V|)\r\n6. Place Block with Straightening\r\n   Linear in terms of |V| & |E|\r\n    Note:- |V| is the number of vertices, and |E| is the number of edges in the layered graph.\r\n```\r\n\r\n**Results**\r\n\r\nHere, the visual script is used as an example; results will be similar for graph editing and visual shaders.\r\n\r\nThe horizontal blocks have been circled out, with the arrows pointing to the starting node of the block (With in-degree 0). This is when the grid is turned off.  \r\n\r\n![image](https://user-images.githubusercontent.com/32321/88403828-e4b89a00-cd81-11ea-95cb-42e5b05e6ae4.png)\r\n\r\nWhen the grid is turned on, they will snap like this, always to the leftmost edge(with some gap for clarity). The starting node(pointed with the arrow) will snap to the leftmost corner of the grid, and the other nodes will be placed relative to that.\r\n \r\n![image](https://user-images.githubusercontent.com/32321/88405459-28ac9e80-cd84-11ea-9b29-2d0e48288a00.png)\r\n\r\nAnother case is when the scaling is changed.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/88405479-306c4300-cd84-11ea-831c-9733726a113b.png)\r\n\r\n \r\n**Known Problems and Solutions**\r\n\r\n1. When a visual script is reorganized, the nodes enclosed by a comment node might get positioned out of that after reorganization. \r\nSolution:- Constraints can be applied when ordering the nodes and making the blocks to keep the nodes belonging to a comment node together. \r\n      \r\n2. Overlapping of nodes due to different horizontal lengths, like shown below\r\n \r\nSolution: A check can be performed for overlapping when placing the node to make necessary adjustments.\r\n \r\n**References**\r\n\r\n1. Patrick Healy, Nikola S. Nikolov: How to layer a Directed Acyclic Graph, from Graph Drawing, 9th International Symposium\r\n2. Ulrik Brandes, Boris Köpf: Fast and simple horizontal coordinate assignment, Part of the Lecture Notes in Computer Science book series (LNCS, volume 2265)\r\n3. Ulf Ruegg, Christoph Daniel Schulze, John Julian Carstens, Reinhard von Hanxleden: Size and Port Aware Horizontal Node Coordinate Assignment, Part of the Lecture Notes in Computer Science book series (LNCS, volume 9411)\r\n4. Hierarchical Drawing Algorithms, Chapter 13, Handbook of Graph Drawing & Visualisation by Robert Tamassia\r\n\r\n**Timeline**\r\n\r\n1. Implement layering and Crossing-Minimisation implementation.\r\n1. Implement the Preprocessing method. \r\n1. Implement the process to extract information from a Visual Script / Visual Shader to build its corresponding layered graph, with minimum crossings and marked non-inner segments.\r\n1. Start horizontal alignment and refactoring.\r\n1. Start implementing the undo feature.\r\n1. Implement the Inner Shift method, followed by the last phase, which is the vertical alignment of the formed blocks. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is not a small number of lines.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nModifying graph edit requires core c++. Runtime performance might be a problem in gdscript. This solves a common problem that should be in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1253/reactions",
      "total_count": 10,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1252",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1252/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1252/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1252/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1252",
    "id": 665194233,
    "node_id": "MDU6SXNzdWU2NjUxOTQyMzM=",
    "number": 1252,
    "title": "Change the hash identifier of the daily / nightly build to date / time . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-24T14:08:59Z",
    "updated_at": "2020-07-24T15:20:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI fudge-me love seeing, the new Godot 4.0 build, it's so awesome, I'm mind-blown . . .\r\n\r\nBut, I can't see if it has been updated, since last time I tried it, anyway, I was thinking if maybe the hash number, could be the date, or have parts of the date, 0724 ( July, 24 ), month, or so, somewhere . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot 4.0, has me excited, in numerous ways . . . Being able to try the latest build, as someone who is new to the engine, but loves geeky things, is pretty cool . . . But, I can't see the date, to see if there's a new version, not sure, if it's intended, it's confusing . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to know when there's a new update, so I can check back, and quickly see, if there's a reason to download the 4.0 nightly build, maybe just some small letters, on the page, in a corner, update 24-07-20 - 18:04, or so . . Like, if it was in the hash number, mixed with the letters, like adgfid2407, that'd be cool . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDownloading the 4.0 as is, is too good . . . But, the date is missing, don't want to miss anything . . :((\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's just, a suggestion, hope, it is okay, fine . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI can't always answer this question but, I really try . . I don't think so . . :O :O . . . . ;)) . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1251",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1251/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1251/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1251/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1251",
    "id": 665048397,
    "node_id": "MDU6SXNzdWU2NjUwNDgzOTc=",
    "number": 1251,
    "title": "Add 'CurveTween' Node",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-24T09:36:49Z",
    "updated_at": "2020-07-26T00:50:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Credits:**\r\n100% credit to Bramwell Williams (@bramreth) for following idea, code, and video.\r\nI'm posting this proposal since he hasn't made one for it.\r\n\r\n**Describe the project you are working on:**\r\n(Applies to any project which uses a Tween)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is currently no built-in way to set up a Tween using the inspector.\r\nThis also means that you do not get a visualization of the Tween's behavior.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA new type of `Tween` node which uses a `Curve` resource to define the Tween's behavior directly in the inspector.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![CurveTweenProposal](https://user-images.githubusercontent.com/60025044/88376916-f2f7bd80-cd63-11ea-91d5-9a8ef45e10c3.png)\r\n\r\n**Video demonstration/explanation:**\r\nhttps://youtu.be/HpiWhvQO_1s\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think this would be used often as the preferred way to work with Tweens, since it is simple, quick, and visual.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTweens are often used, and this is a very user-friendly way to create complex Tween behavior directly in the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1251/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1250",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1250/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1250/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1250/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1250",
    "id": 665043720,
    "node_id": "MDU6SXNzdWU2NjUwNDM3MjA=",
    "number": 1250,
    "title": "Allow for setting the X and Y FOV/frustrum sizes independently, and/or modifying the view transform",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-24T09:27:55Z",
    "updated_at": "2020-10-16T13:46:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA little open world 3D game involving memes\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm trying to achieve this effect:\r\n![wide putin](https://user-images.githubusercontent.com/36982494/88376607-cddc6c80-cdae-11ea-97e9-508da46cde67.GIF)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe effect above can easily be achieved by decreasing the X FOV or increasing the Y FOV.\r\n\r\nFurthermore, making it possible to modify the view transform would allow for more effects like shearing/skewing, thus making effects like this possible:\r\n![nether portal](https://user-images.githubusercontent.com/36982494/88376958-738fdb80-cdaf-11ea-8f94-a3f6e45b8249.GIF)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`fov` will become a `Vector2` rather than a `float`:\r\n![Screenshot from 2020-07-24 13-17-00](https://user-images.githubusercontent.com/36982494/88377398-26f8d000-cdb0-11ea-92af-a5a0f6831073.png)\r\nEither that, or `fov` will remain a `float`, but a new `ratio` property would be added:\r\n![Screenshot from 2020-07-24 13-19-59](https://user-images.githubusercontent.com/36982494/88377531-6de6c580-cdb0-11ea-8a6b-a0a94a85f757.png)\r\nThe second option seems more suitable, as most people wouldn't want to set X and Y FOVs individually, so they would be able to just leave the ratio at 1 and not need to set 2 properties to the same value each time they want to change the FOV.\r\n\r\nAs for modifying the view transform, I think it would be a better idea to add a new `custom_camera_transform` property, which will be multiplied with the original view transform to result in the final transform. This way, all it would take to revert modifications is to set it to `Transform.IDENTITY`. Also, changing the view transform this way won't conflict with the transform computed by the engine using the given FOV value.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs far as I know there is no way to modify X and Y FOVs or frustrum sizes or the view transform individually in a script, as Godot only exposes one FOV/frustrum size, and only allows for getting the view transform, which is computed by the engine using the given FOV/frustrum size.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis requires modifications to the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1250/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1249",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1249/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1249/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1249/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1249",
    "id": 665033586,
    "node_id": "MDU6SXNzdWU2NjUwMzM1ODY=",
    "number": 1249,
    "title": "Add per-Viewport InputEvent device masking",
    "user": {
      "login": "rjkilpatrick",
      "id": 6240430,
      "node_id": "MDQ6VXNlcjYyNDA0MzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6240430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rjkilpatrick",
      "html_url": "https://github.com/rjkilpatrick",
      "followers_url": "https://api.github.com/users/rjkilpatrick/followers",
      "following_url": "https://api.github.com/users/rjkilpatrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjkilpatrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rjkilpatrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjkilpatrick/subscriptions",
      "organizations_url": "https://api.github.com/users/rjkilpatrick/orgs",
      "repos_url": "https://api.github.com/users/rjkilpatrick/repos",
      "events_url": "https://api.github.com/users/rjkilpatrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rjkilpatrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-24T09:08:50Z",
    "updated_at": "2020-07-24T09:20:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSplit-screen FPS with support for 8 concurrent players split-screen, with up to 8 game controllers at once.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, I have actions in the Input Map corresponding to each game controller incredibly verbosely, e.g. `forward_1`.\r\nThis is hard to maintain and leads to duplicated input map for each player character.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose, one action that triggers across all devices which can be masked per Device, as in the current Input Map.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUnder the current Viewport/Gui settings, there could be added something equivalent to the current rendering targets bit-masking for each physical device.\r\n![Bitmasking for collision layers](https://user-images.githubusercontent.com/6240430/88375121-e6d72480-cd92-11ea-9889-2df4cff6e1eb.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt could ben an autoload with a script similar to <https://kidscancode.org/blog/2018/07/godot3_splitscreen/> with an `export var` for the id and string interpolation on the `Input.is_action_pressed(\"forward_%s\")` in combination with populating the Input Map with code, but in editor would be preferable for consistency with other projects and helping contributors understand where code is located.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nViewport in editor settings are core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1249/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1248",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1248/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1248/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1248/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1248",
    "id": 664958746,
    "node_id": "MDU6SXNzdWU2NjQ5NTg3NDY=",
    "number": 1248,
    "title": "[iOS] Add missed export options for icons",
    "user": {
      "login": "PoqXert",
      "id": 3893594,
      "node_id": "MDQ6VXNlcjM4OTM1OTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3893594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PoqXert",
      "html_url": "https://github.com/PoqXert",
      "followers_url": "https://api.github.com/users/PoqXert/followers",
      "following_url": "https://api.github.com/users/PoqXert/following{/other_user}",
      "gists_url": "https://api.github.com/users/PoqXert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PoqXert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PoqXert/subscriptions",
      "organizations_url": "https://api.github.com/users/PoqXert/orgs",
      "repos_url": "https://api.github.com/users/PoqXert/repos",
      "events_url": "https://api.github.com/users/PoqXert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PoqXert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-24T06:56:29Z",
    "updated_at": "2020-09-18T21:51:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\niOS Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot iOS Export missed options for some icons. (e.g. notification icon missed)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nChange icons settings. (I'm capable of making a PR)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAll iOS icon sizes:\r\n![iOS Export options](https://user-images.githubusercontent.com/3893594/88366585-d9d72700-cdcc-11ea-9a6b-4bcb90a87475.png)\r\n![Xcode-project after export](https://user-images.githubusercontent.com/3893594/88366971-f32ca300-cdcd-11ea-976c-46b18d019741.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nExport is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1248/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1243",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1243/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1243/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1243/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1243",
    "id": 664361758,
    "node_id": "MDU6SXNzdWU2NjQzNjE3NTg=",
    "number": 1243,
    "title": "Add a way to set a separate time scale for the physics simulation",
    "user": {
      "login": "kilojool",
      "id": 2656574,
      "node_id": "MDQ6VXNlcjI2NTY1NzQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2656574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kilojool",
      "html_url": "https://github.com/kilojool",
      "followers_url": "https://api.github.com/users/kilojool/followers",
      "following_url": "https://api.github.com/users/kilojool/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilojool/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kilojool/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilojool/subscriptions",
      "organizations_url": "https://api.github.com/users/kilojool/orgs",
      "repos_url": "https://api.github.com/users/kilojool/repos",
      "events_url": "https://api.github.com/users/kilojool/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kilojool/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-23T10:21:13Z",
    "updated_at": "2020-11-09T05:48:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn action game with bullet time features\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nChanging the Engine.time_scale effects all time-based processes such as UI, while I only want it to effect the gameplay. While most things can be worked around by multiplying the delta parameter in process or physics_process, there does not seem to be any other way to change the time_scale for the physics simulation.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a new variable called physics_time_scale_factor which is multiplied by Engine.time_scale to be used in the physics engine simulation. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have tried an implementation which adds a physics_time_scale_factor variable to engine.h which is multiplied by the time_scale.\r\nThis value is then passed to the PhysicsServer instead. In my implementation I pass it to every function call inside the physics_frame, which means that _physics_process uses the new new physics_time_scale, while _process still uses the old time_scale. \r\n\r\nThis might cause some confusion of course, but I still think it is worth it if documented properly.\r\nFor example, move_and_slide works as intended inside _physics_process, while you can still use UI or camera with the unmodified delta values inside _process or in animations.\r\n\r\nin main.cpp\r\n```\r\nbool Main::iteration() {\r\n...\r\nfloat physics_time_scale = time_scale * physics_time_scale_factor;\r\n\r\nif (OS::get_singleton()->get_main_loop()->iteration(frame_slice * physics_time_scale)) {\r\n\texit = true;\r\n\tbreak;\r\n}\r\n\r\nmessage_queue->flush();\r\n\r\nNavigationServer3D::get_singleton_mut()->process(frame_slice * physics_time_scale);\r\n\r\nPhysicsServer3D::get_singleton()->step(frame_slice * physics_time_scale);\r\n\r\nPhysicsServer2D::get_singleton()->end_sync();\r\nPhysicsServer2D::get_singleton()->step(frame_slice * physics_time_scale);\r\n...\r\n```\r\nLetting physics_time_scale_factor have a default value of 1 also means that the old workflow still works as intended.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe physics engine simulation time scale can not be changed except for changing Engine.time_scale, which also effects everything else.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe implementation is in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1242",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1242/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1242/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1242/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1242",
    "id": 663736139,
    "node_id": "MDU6SXNzdWU2NjM3MzYxMzk=",
    "number": 1242,
    "title": "Add a random rotation option to StandardMaterial3D option for tiling textures",
    "user": {
      "login": "redoxCode",
      "id": 68054914,
      "node_id": "MDQ6VXNlcjY4MDU0OTE0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/68054914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/redoxCode",
      "html_url": "https://github.com/redoxCode",
      "followers_url": "https://api.github.com/users/redoxCode/followers",
      "following_url": "https://api.github.com/users/redoxCode/following{/other_user}",
      "gists_url": "https://api.github.com/users/redoxCode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/redoxCode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/redoxCode/subscriptions",
      "organizations_url": "https://api.github.com/users/redoxCode/orgs",
      "repos_url": "https://api.github.com/users/redoxCode/repos",
      "events_url": "https://api.github.com/users/redoxCode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/redoxCode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-07-22T12:48:37Z",
    "updated_at": "2020-07-27T17:48:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nForked discussion from #1230\r\n\r\n**Describe the project you are working on:**\r\nOpen world exploration game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen texturing terrain with a texture smaller than the terrain itself you get a tiling texture effect.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis effect can be avoided by semi-random rotating the tile instances (rotating the Uv at the position of the tile).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe goal is to either add that feature to the SpatialMaterial or create a plugin / asset store solution.\r\nWhatever fits better to godot.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis can be archived by writing custom shaders or addons from the asset store...\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n... but this is a great benefit for almost everyone looking to make (photo realistic) games that include some kind of textured ground. I totally agree that we shouldn't bloat godot. However, when I look at the SpatialMaterial there are other features implemented that I find less important. This just instantly can make the game of a beginner look so much better since the ground usually gets a lot of screen estate. Other game engines provide that option without any need for users to get into shaders at all. So this is not a personal need of mine, but a proposal to make godot more appealing to new users switching from other game engines.\r\n\r\nDemo (left with normal tiling, right with rotated tiling):\r\n![demo](https://user-images.githubusercontent.com/68054914/88058720-2a981700-cb64-11ea-9361-f600c23362c3.jpg)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1241",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1241/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1241/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1241/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1241",
    "id": 663704144,
    "node_id": "MDU6SXNzdWU2NjM3MDQxNDQ=",
    "number": 1241,
    "title": "Automatically convert all leading spaces into tabs",
    "user": {
      "login": "AbominableMonkey",
      "id": 68643337,
      "node_id": "MDQ6VXNlcjY4NjQzMzM3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/68643337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AbominableMonkey",
      "html_url": "https://github.com/AbominableMonkey",
      "followers_url": "https://api.github.com/users/AbominableMonkey/followers",
      "following_url": "https://api.github.com/users/AbominableMonkey/following{/other_user}",
      "gists_url": "https://api.github.com/users/AbominableMonkey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AbominableMonkey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AbominableMonkey/subscriptions",
      "organizations_url": "https://api.github.com/users/AbominableMonkey/orgs",
      "repos_url": "https://api.github.com/users/AbominableMonkey/repos",
      "events_url": "https://api.github.com/users/AbominableMonkey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AbominableMonkey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-22T11:55:05Z",
    "updated_at": "2020-07-23T00:47:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nmultiple small projects, to get comfortable with Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nas being new to Godot, I try to incorporate code from previous languages, so I don't have \r\nto write it all again.\r\nBut copy an paste litters the code with both 'tabs and spaces'\r\nand sometimes even after deleting one or more lines, the editor still notices an invisable space.\r\nI had to rewrite the code in notebook, for Godot to accept it without errors...\r\n \r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nif the editor disallows spaces in front of lines, just convert them automaticly into tabs.\r\nif ' for instance' you leave a space in your next line of coding, and it is converted; you either don't notice, or don't care.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nthat's a bit elaborate...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno, as that 'is' the problem.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nno. I suppose only coders new to Godot are having this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1240",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1240/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1240/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1240/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1240",
    "id": 663566533,
    "node_id": "MDU6SXNzdWU2NjM1NjY1MzM=",
    "number": 1240,
    "title": "Show the serialized Visual Script as text",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-07-22T08:13:38Z",
    "updated_at": "2020-07-29T16:03:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider, climbing, traversal game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGamesfromscratch had a video, where Lumberyard 1.25 has a window, where one can see the written code, that the visual scripts do, that would be a nice feature, in visual script, since it could help coders, and visual scripters talk, help visual scripters learn code, and help written coders debug visual scripts . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt's in the latest video from Gamesfromscratch, Lumberyard 1.25 has it, it would really help visual scripters move to code, as they don't scale well, ie becomes spaghetti and, create a more unified community . . Thx . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's basically just a dock, where visual scripts real-time, are turned into written code, it also turns it directly into C#, maybe visual script could do that, or GDScript . . So, cool . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, Lumberyard 1.25 has it, very nice . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nLike above, it would unify the coding and, visual script community, a lot faster, and help teach code, ie be a new way, for new or, inexperienced users, to learn written code, over time . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1240/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1239",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1239/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1239/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1239/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1239",
    "id": 663554325,
    "node_id": "MDU6SXNzdWU2NjM1NTQzMjU=",
    "number": 1239,
    "title": "Ensure every visual script node has an unique documentation page with user tutorials and input",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2020-07-22T07:52:55Z",
    "updated_at": "2020-07-23T12:26:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThis is about making the docs better, not visual script, wanted to ask separately . . This alone, is very important, imo . . I semi-asked this in another topic, but that was about making visual script better, the experience, not separate doc system . . I suspect the other stuff might not get made, but this is so important, I hope it gets done . . .\r\n\r\nA problem with visual script is, the more complex boxes are very difficult to use . . I have suggested this before, but this is so important, I want to ask, for this alone . . It would be nice if there was a button, or maybe one could shift-double click a visual script node, to go to a dedicated page, for each box, with basic information, and examples . . This is a massive work, for the team making visual script, so my idea is, all users can add tutorials or, explanations to those pages, like on the Godot Q&A page, where one can add images, and animated gifs, to show how it works . . If the visual script experts simply made such a button, or a direct docs reference, on each box, the user community would fill it out, over time, meaning less work for the visual script team, and to focus on function and, power of visual script, and not documentation . . For instance, I could click on that page, and add a tutorial example, with static images, or even animated gifs, that'd be a NICE documentation update, or so . . \r\n\r\n![2020-07-21 0135](https://user-images.githubusercontent.com/61069740/88149118-ec503580-cbff-11ea-8e24-9b94bf1926a2.gif)\r\n\r\nThe problem is, making a video tutorial, about the whole visual script system, takes a lot of work, but when I had 30 minutes, or was on a break, between making levels, visual code, I could think about, having used a new or, difficult visual script box, how to make a nice, featured tutorial, like so . . That way, the official docs for visual script would get filled out, over time, and the team making it could focus less on that, and more on just making it amazing, thanks . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe need a better way, for the community to make simple, precise tutorials, atm the official docs for visual script are very lacking, in terms of examples, especially for more advanced boxes . . This feature, and this is really more about making the docs system more useful, which is maybe a wrong title, it's purely about making docs, anyway I'd love to contribute, over time, to making the docs better . . Each box just needs it's own web-page, ie. Math ADD has it's own, Math MULTIPLY has it's own, that can be accessed by clicking a page, or for the math boxes, a common page, since math boxes are mostly the same, changed through settings . . I needed to change a material, or texture from code, and it took me two days, with help . . I'd love to be able to write a little tutorial, using pictures, that then got ' connected ' to that box, for future users, that might need nicer docs . . If just one person figures something out, and writes a short 5 - 10 minute tutorial, visual script would be much more user-friendly, documentation-wise . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike before, if each box had a ' ? ', where one could go to official online docs, and then add written or, tutorials with pictures, it'd be a fun and, super-quick way, of making the docs complete, something that is missing, atm . . :O\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, I wanted to suggest this as a separate idea, as it would help the community, and from current official docs, I'd say it's so much work, it's like the core team has given up, to some extent . . Let the community help, it could be fun, I like to help, where I can . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt would just be fun, and also an honor, to contribute to the engine, even in some small way, and it would mean, one wouldn't have to search the internet for 30 minutes, to find out how an obscure box worked, just click, and boom, you have it . . . :)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1239/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1238",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1238/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1238/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1238/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1238",
    "id": 663510487,
    "node_id": "MDU6SXNzdWU2NjM1MTA0ODc=",
    "number": 1238,
    "title": "Add a script editor feature for generating setter and getter functions.",
    "user": {
      "login": "TheDuriel",
      "id": 44248915,
      "node_id": "MDQ6VXNlcjQ0MjQ4OTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/44248915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheDuriel",
      "html_url": "https://github.com/TheDuriel",
      "followers_url": "https://api.github.com/users/TheDuriel/followers",
      "following_url": "https://api.github.com/users/TheDuriel/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheDuriel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheDuriel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheDuriel/subscriptions",
      "organizations_url": "https://api.github.com/users/TheDuriel/orgs",
      "repos_url": "https://api.github.com/users/TheDuriel/repos",
      "events_url": "https://api.github.com/users/TheDuriel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheDuriel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-22T06:27:51Z",
    "updated_at": "2020-07-22T23:33:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAnything really. I use Godot commercially and make heavy use of tool scripts and static typing for cohesion when working with a team.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTyping setters and or getters for variables can become tedious quickly. Especially when you're creating something that requires a lot of them.\r\n\r\n```\r\nfunc set_property_name(new_value: <type>) -> void:\r\n    pass\r\n```\r\nThere are scenarios in which I need a dozen of these in the same file, and typically every Class I make will have at least a few setters. Either to make things read only at runtime (and protect it from my team members), or to trigger some kind of behavior. It's a lot of boilerplate to write, and even to copy and paste. As you need to change the name and type each time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose a menu option to generate a setter or getter at demand, using the currently selected variable for its name and type.\r\n\r\nSo you'd select a variable via doubleclick, rightclick/navigate into edit/or hit the hotkey, and the Editor would automagically insert an empty setter or getter function at an appropriate location in your script.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n^\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI  could write an autohotkey script to do this. But there is no means of doing so within the Editor itself via the plugin system or similar.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n^\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1238/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1237",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1237/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1237/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1237/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1237",
    "id": 663493832,
    "node_id": "MDU6SXNzdWU2NjM0OTM4MzI=",
    "number": 1237,
    "title": "Implement deep/recursive YSort",
    "user": {
      "login": "SamanthaClarke1",
      "id": 24452702,
      "node_id": "MDQ6VXNlcjI0NDUyNzAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24452702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SamanthaClarke1",
      "html_url": "https://github.com/SamanthaClarke1",
      "followers_url": "https://api.github.com/users/SamanthaClarke1/followers",
      "following_url": "https://api.github.com/users/SamanthaClarke1/following{/other_user}",
      "gists_url": "https://api.github.com/users/SamanthaClarke1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SamanthaClarke1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SamanthaClarke1/subscriptions",
      "organizations_url": "https://api.github.com/users/SamanthaClarke1/orgs",
      "repos_url": "https://api.github.com/users/SamanthaClarke1/repos",
      "events_url": "https://api.github.com/users/SamanthaClarke1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SamanthaClarke1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-22T05:51:15Z",
    "updated_at": "2020-09-23T21:28:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm currently working on a top down game, named brim.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe YSort node stops at the first child that isn't a YSort, or that doesn't have YSort enabled for the children (which only is a feature for tilemaps, AFAIK). This means that if I have a character put a second part of that character out in front of them, say a robot reaching around a player when they grab them, the arms either have to not be a child of that robot, or you have to completely rewrite your own YSort node. There are examples of this (see https://github.com/e-e/better-ysort) for one implementation. But these don't work on tilemaps and I'm yet to think of a reasonable workaround for that. All of this said, without this feature, the YSort node in godot is *extremely* limiting, and has to be basically rewritten by users in janky, incomplete, laggy, user-unfriendly ways.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA deep sort, meaning sorting the children of node as well, perhaps with a bool to check if it needs to be ysorted, or a function like the github repo suggests, that returns the ysort position, would enable people to use the YSort node without having to have everything that is drawn to the screen / needs to be ysorted as a direct child of the YSort node, which is terrible for other design reasons, and allows for extra creativity and ease of use by developers.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere are several possible solutions but all of them would require some form of a deep search into node2d's (and inheritors). \r\nI'm only savvy with godot at a user/game dev level, so excuse me if my propositions misunderstand some of the intricacies of the engine.\r\n\r\nProposition A)\r\n1) In node2d add an export(boolean) var enable_deep_ysort = false;\r\n2) If enable_deep_ysort is set to true, search the children as well before drawing the ysort, essentially treating that child like a ysort, or ysorting the children of that node.\r\n\r\nProposition B)\r\n1) Change YSort to call _get_ysort_position() on Node2D's, which could be overwritten.\r\n2) By default, _get_ysort_position returns global_position.y (to mimic the current behaviour of ysort).\r\n3) YSort based on the position returned.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. It can't. Whether this enhancement is \"not going to be used often\" is a matter of opinion, but considering that almost all topdown games will be using functionality similar to this, or have encountered a problem similar to this, I'm not sure its reasonable to claim its \"not going to be used often\". The best workarounds that I've seen so far either require every sprite, tilemap, etc, that you want to be ysorted be a *direct child* of the ysort node, which is horrible for game design purposes etc, or for you to rewrite and reimplement your own ysort node using z-index as a hacky workaround.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts an extremely common problem for almost all topdown 2d games, and is commonplace in other engines that aim to support top down / 2d games. Implementations written by hand also require for this to override z-index's of nodes, which places a maximum limit on the number of nodes that could be ysorted, (4096 if i remember the z-index cap correctly) and limits developer freedom a good deal, along with extra lag, by having to deep search every node in the game almost every frame, and do comparisons almost every frame.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1237/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1235",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1235/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1235/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1235/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1235",
    "id": 663128998,
    "node_id": "MDU6SXNzdWU2NjMxMjg5OTg=",
    "number": 1235,
    "title": "Keep standard values when disabling default arguments in Visual Script",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-21T15:59:09Z",
    "updated_at": "2020-07-22T23:31:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, adventure game . . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI added a move_and_slide visual script box, and clicked on, use default args, to get the settings inside it . . However, when I did, all the arguments were set to zero, by default, instead of the normal numbers . . Especially, the max_slides got set to 0, it normally is 4, that made the box stop working ( it not being 4, suddenly ), without me changing the number, proposal is, when one clicks ' Use Default Args ', that the number stays the ' standard ' number, until one changes it, it makes more sense, at least for me, also if a bool is True, not set it to False, unless one actively changes it, or so . .\r\n\r\n![2020-07-21 1755](https://user-images.githubusercontent.com/61069740/88077477-9b96f900-cb7b-11ea-8528-4c7e252f996f.gif)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI spend about 2 days, trying to figure out why move_and_slide stopped working, when I expanded below max_slides, it stopped working, when I didn't, I finally after 2 days found that it somehow worked, I had to ask online, and it seemed a bit weird, idea is keep the default ' number ', so the boxes don't stop working, for little to, no reason . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's just sort, more sense . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is not something I can change, atm . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI guess, I'm not sure, it should be engine . . . The problem, a lot of boxes could stop working, deeper in the engine, that are poorly documented, and where the default value ( 4, for max slides ) isn't known or, easily found . . Just, when clicking ' Don't Use Default Args ', keep the default value, until it is changed, by the user, also for Booleans, ie True that, become false, without user asking for it, thx . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1235/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1234",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1234/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1234/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1234/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1234",
    "id": 663063158,
    "node_id": "MDU6SXNzdWU2NjMwNjMxNTg=",
    "number": 1234,
    "title": "Improve XMLParser",
    "user": {
      "login": "ThakeeNathees",
      "id": 41085900,
      "node_id": "MDQ6VXNlcjQxMDg1OTAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41085900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ThakeeNathees",
      "html_url": "https://github.com/ThakeeNathees",
      "followers_url": "https://api.github.com/users/ThakeeNathees/followers",
      "following_url": "https://api.github.com/users/ThakeeNathees/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThakeeNathees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ThakeeNathees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThakeeNathees/subscriptions",
      "organizations_url": "https://api.github.com/users/ThakeeNathees/orgs",
      "repos_url": "https://api.github.com/users/ThakeeNathees/repos",
      "events_url": "https://api.github.com/users/ThakeeNathees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ThakeeNathees/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-21T14:31:52Z",
    "updated_at": "2020-07-22T12:47:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Working with XML files.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current GDScript XMLParser is so low level, it's methods are bit clunky and it seems like every one is using JSON instead.\r\nHowever it doesn't support adding new tags or modifying the data, etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe current XMLParser needs to be refactored with Tag based structure to overcome the limitation. Here is my implementation\r\nI'm working on now.\r\n```XML\r\n<?xml version=“1.0” encoding=“utf-8”?>\r\n<root>\r\n    <tag1 attr1=\"value1\" attr2=\"value2\">\r\n        <child1>data 1</child1>\r\n        <child2>\r\n            <data>data 2</data>\r\n        </child2>\r\n    </tag1>\r\n</root>\r\n```\r\n\r\n```gdscript\r\nvar file := XMLParser.new()\r\nfile.open(\"file.xml\", File.READ)\r\nfile.parse()\r\n\r\nvar tag := file.get_tag(1).get_child_tag(0) ## returns tag1 tag as an XMLTag instance\r\nprint(\"name: \", tag.get_name())\r\n\r\nfor i in range(tag.get_attribute_count()):\r\n    print(tag.get_attribute_name(i), \" = \", tag.get_attribute_value(i))\r\n\r\nfor i in range(tag.get_child_tag_count()):\r\n    var child_tag := tag.get_child_tag(i)\r\n    print(child_tag.get_name())\r\n    if child_tag.get_name() == \"child1\":\r\n        print(\"\\tdata1: \", child_tag.get_data())\r\n    elif child_tag.get_name() == \"child2\":\r\n        print(\"\\tdata2: \", child_tag.get_child_tag(0).get_data())\r\n```\r\noutput\r\n```\r\nname: tag1\r\nattr1 = value1\r\nattr2 = value2\r\nchild1\r\n        data1: data 1\r\nchild2\r\n        data2: data 2\r\n```\r\n(working branch : https://github.com/ThakeeNathees/godot/tree/XMLParser-refactor)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe XMLParser will  contain `void parse()`, `int get_tag_count() const`, `Ref<XMLTag> get_tag(int)`  and when `parse()` called it'll build `Vector<XMLTag>`. and the `XMLTag` class is defined like this...\r\n\r\n```c++\r\n\r\nclass XMLTag : public Reference {\r\npublic:\r\n\tvoid set_name(const String &p_name);\r\n\tString get_name() const;\r\n\r\n\tvoid set_data(const String &p_data);\r\n\tString get_data() const;\r\n\r\n\tbool is_comment() const;\r\n\tvoid set_comment(bool p_is_comment);\r\n\r\n\tint get_child_tag_count() const;\r\n\tRef<XMLTag> get_child_tag(int p_idx) const;\r\n\tvoid add_child_tag(const Variant &p_xml_tag);\r\n\tvoid remove_child_tag(int p_idx);\r\n\r\n\tint get_attribute_count() const;\r\n\tString get_attribute_name(int p_idx) const;\r\n\tString get_attribute_value(int p_idx) const;\r\n\tbool has_attribute(const String &p_name) const;\r\n\tString get_attribute_value(const String &p_name) const;\r\n\tString get_attribute_value_safe(const String &p_name) const;\r\n\tvoid set_attribute(const String &p_name, const String &p_value);\r\n\tvoid remove_attribute(int p_idx);\r\n};\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYES, but every one using xml files should write/use the tag api before using the XMLParser each time.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nXML is a popular a markup language which could be used in plugins, save data, etc. but since it's very low level users \r\nrecommending JSON instead. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1230",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1230/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1230/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1230/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1230",
    "id": 661830109,
    "node_id": "MDU6SXNzdWU2NjE4MzAxMDk=",
    "number": 1230,
    "title": "Add rotation of UVs to StandardMaterial3D",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 46,
    "created_at": "2020-07-20T13:33:40Z",
    "updated_at": "2020-08-02T06:50:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider project . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's a cool feature, in Blender, if rotate a tileable texture, random degrees, the sort of tiling effect, of similar textures disappear, for a lot of common surfaces ( grass, gravel, many more ) . . It would be nice if one could have a setting, to rotate the texture UV 90 degrees, at least, as this makes tiling much less noticable, or even 45 degrees . . .\r\n\r\n![2020-07-20 1527](https://user-images.githubusercontent.com/61069740/87942875-86e43380-ca9d-11ea-9a59-07ff05669992.jpg)\r\n\r\nBlender Guru made a video about it, I've been trying it, by rotating planes 90 degrees, and it really looks a lot better, but one needs to be able to rotate UV's 45 degrees, to almost remove it, completely, 95 % gone . .\r\n\r\n![2020-07-20 1528](https://user-images.githubusercontent.com/61069740/87943012-ba26c280-ca9d-11ea-8f52-055c76372ad8.jpg)\r\n\r\nAnyway, it makes 3D games look a lot better, I was hoping it could be in Godot 4.0, so we can't just offset, or scale UV1, UV2, but either rotate them by a random number, or hopefully 45 degrees, 90 degree rotation also looks a lot better, 50 - 60 % of tiling goes away . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTiling textures tends to look very repeating, in the distance, having this feature ( 90 degree rotation is good, 45 degree angles are almost perfect, I guess 30 degrees would basically be enough, or a random 360 degree number, or setting ), any of those things would make Godot 3D worlds look a lot better, immediately, please consider . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe pictures above show it pretty well, the amazing effect of being able to rotate UV's, like we can scale or, offset them, atm . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI have got no idea, I'm just wondering why we can't rotate UV's, since we scale or, offset them, was hoping it might be a minor thing, to add to the engine, the effect is quite amazing, as can be seen above, 45 degree rotation values basically are enough, 30 degree, ie 30, 60, 90, 120, 150 so, on would probably be all one needs . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nWell, we can already scale, and offset UV's, seems like rotating them is the missing bit . .\r\n\r\nThx <3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1230/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1227",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1227/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1227/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1227/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1227",
    "id": 661444567,
    "node_id": "MDU6SXNzdWU2NjE0NDQ1Njc=",
    "number": 1227,
    "title": "Move transparency, cull mode and emission to the albedo settings",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-20T06:41:46Z",
    "updated_at": "2020-07-22T23:25:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider, adventure game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn Godot 3.2, the transparency settings were in parameters, and Godot 4.0 is already a lot easier, for beginning users, there is a transparency tab, it's much more user-friendly . . But, it would be nice if the transparency settings, at least, maybe cull mode, were options under the Albedo, as after one has added an albedo, one wants to toggle Transparent and, often cull mode, as the first thing . . For experienced users it makes no difference, but for beginning users, it would be nice help . .\r\n\r\n![2020-07-20 0832](https://user-images.githubusercontent.com/61069740/87907012-07863e00-ca64-11ea-991e-7384d650864d.jpg)\r\n\r\nI also think cull mode would be nice, if it was under albedo settings, as that's typically the first texture one adds, and one wants to set those things there, not in some other menu . . Hard-core users won't mind, but for new users, the more sense it makes, the easier it will be, and fewer questions . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt would make the engine more immediately useful to beginners, the same way the name changes in nodes are making it much more accessible, especially for people trying Godot, as a complete newb, I've been struggling to make sense of where the different options are, I think these ideas would be better, however the current 4.0 way, of having a Transparency option, also makes a lot of sense, but since one often uses Transparent textures, and other transparent textures have those in a black and white texture, ie roughness, where white is rough = 1, and black is rough = 0, the albedo is the only texture, where one needs to enable it, or so . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nMake a ' button ', where one enables alpha transparent under the albedo, as that's the only texture that uses it, not roughness, metalness, normal, so on . . Thx . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt's beyond me, atm . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's just an idea, to make Godot even better for beginners, while having all the options hard-core users want, so no one loses . . . It seems a bit confusing, that the Alpha settings are separate, from the Albedo texture setting . . I think Transparency and, cull mode should be under Albedo, since they're the things one most often wants to change, after adding the albedo . . The last settings I would like under Albedo, are emission settings, so one has those three options, under the albedo, is it transparent, should it be rendered with front, back, or both sides, ( cull mode ) of faces and, is it an emissive texture . . By clicking ' Enabled ', there could be an expanded list, like when ' Enabling ' Normal maps, or Roughness . . Since emission takes info, from the albedo, like a neon sign, it makes sense it is there, ie a green albedo will cause green emission, a blue will make blue emission color, I think it makes sense to put that under albedo, as that primarily controls those things . .\r\n\r\n![2020-07-20 0851](https://user-images.githubusercontent.com/61069740/87908212-53d27d80-ca66-11ea-863c-b9d8131aa1ac.jpg)\r\n\r\nMaybe change cull mode, to ' face cull mode ' <3 . . Or ' Face Draw Mode ', with options, front, back, both . . Overall, I hope you will change the names, of the settings, so they're more user-friendly, and make sense, to both new and, also older users, immediately . . Anyway, as a beginner, I struggled to find these things, because the names made little sense, that's all . . . And, advanced users won't mind, idea is, to make Godot more, ' when I click something ', it makes sense, based on the words, more WYSIWYG inter-face . . <3 I guess if Cull Mode was called, Face Cull Mode, it would be easier . . :O <3 . .\r\n\r\nIt's a hard job, making it sound both pro, to advanced users, and first-time user friendly, at same time . . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1227/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1226",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1226/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1226/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1226/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1226",
    "id": 661402613,
    "node_id": "MDU6SXNzdWU2NjE0MDI2MTM=",
    "number": 1226,
    "title": "Change the name of nodes so they're less cluttered",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-20T05:41:12Z",
    "updated_at": "2020-07-22T23:26:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n![2020-07-20 0718](https://user-images.githubusercontent.com/61069740/87902165-3b0f9b00-ca59-11ea-83bc-bc6352ee2698.jpg)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany of the node names have changed in Godot 4.0, but it makes a large node tree, in the scene inspector hard to read, because it says 3D everywhere, and it makes no sense, ie it becomes rather more difficult to read, the scene dock . . However, on the ' Add Node ' list, it is a very big help, for beginners, so one can find the correct node . . My proposal is, change the name of the ' Spatial node ', to Node3D, which is a lot easier, and change name of ' SpatialMaterial ' ( Godot 3.2 ) from ' StandardMaterial3D ' ( Godot 4.0 ) to ' PBRMaterial3D ', and ' ShaderMaterial ', to ' ShaderMaterial3D ' . . Those are the biggest ones . . \r\n\r\nOnly add the ' 3D ' to a node, on the Add Node list, so on that list, it says Camera ( 3D ), or Camera [ 3D ] or, Camera_3D, or Camera.3D . . The changes in the names in Godot 4.0 have been a large improvement, but it becomes more unreadable, in the Scene Dock, or Scene Inspector, where all the names has 3D after them . .\r\n\r\n![2020-07-20 0725](https://user-images.githubusercontent.com/61069740/87902684-98f0b280-ca5a-11ea-8787-f25988291ee1.jpg)\r\n\r\n![2020-07-20 0728](https://user-images.githubusercontent.com/61069740/87902695-9e4dfd00-ca5a-11ea-96d5-c4ad817bf740.jpg)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nFirst of all, the new name changes in Godot 4.0 are AMAZING, the ' Add Nodes ' list is so much more user-friendly, the added 3D to all 3D related nodes, means you have no doubt, which node to click, at all . . It's a major improvement, for all users . . \r\n\r\nHowever, it has created a problem, where the Scene inspector becomes more unreadable, or difficult to read, with 3D added to every node, so it all looks the same, confusing . . . My proposal is, add a ( 3D ) behind all 3D related nodes, like extra information, but don't add it behind the nodes, in the inspector . .\r\n\r\nAlso, maybe change the name of MeshInstance, to simply Mesh3D, or 3DMesh, or so, MeshInstance is a bit misleading, as ' Instances ' in game engines, typically are like ' prefabs ', and it's a bit confusing, I  think . . . Or, MeshPolygon, or MeshObject3D . . These are minor things, as the improvements in Godot 4.0 already makes it better than 3.2, a lot, but it has created a problem, when reading the Scene Dock, where all the +3D, makes it a confusing mess, where it's difficult to immediately read which node, is what, it's all just 3D, less readable in that dock . . So, please keep the + 3D in the Add Node panel, or write ( 3D ) behind all 3D nodes, just don't add it in the scene dock, because, it all becomes a blur, it takes more time, to read that <3 . . \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI added pictures above, but idea is, add the 3D so one can quickly, or better see which nodes are 3D when ADDING them, as a node, but don't write MeshInstance3D in scene dock, because suddenly when trying to read it, all the 3D at end, makes the nodes look the same, hope that makes sense . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI can't do this, as a new user, I don't know how . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nWell, the Godot 4.0 name changes are a POSITIVE step, in the right direction, it's far more user-friendly, but it creates an UNKNOWN problem, ie it makes the scene dock more unreadable . . I suggest instead of writing MeshInstance3D, the add node panel says MeshInstance ( 3D ), so it's clear when adding nodes, but doesn't change the name, or add +3D, in the scene dock, that would be very nice . . .\r\n\r\nIt would help, also consider changing MeshInstance, to 3DMeshNode, or MeshObject, Mesh3D, or PolygonMesh . . MeshObject, as a new user, I don't want to create an instance, of a prefab, just a 3DMesh, or a 3DObject . . Just saying, Godot 4.0 is better, than 3.2 in terms of names, by far, but the many +3D in the scene dock, makes all the nodes look the same, and I have to read the name twice, to see which one it is, a consequence of the new name-changes, that are VERY good, all the same . .\r\n\r\nThank you . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1226/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1225",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1225/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1225/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1225/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1225",
    "id": 661384400,
    "node_id": "MDU6SXNzdWU2NjEzODQ0MDA=",
    "number": 1225,
    "title": "Directory: Alternative to list_dir_begin: get_files",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-20T05:14:43Z",
    "updated_at": "2020-07-20T16:49:44Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking on some tests following my recent pull requests on `DirAccess` bug fixes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nListing files in a directory requires a lot of boilerplate code.\r\n\r\nExample A:\r\n```py\r\ndir.list_dir_begin()\r\n\r\nvar file = dir.get_next()\r\nwhile not file.empty():\r\n\tprint(file)\r\n\tfile = dir.get_next()\r\n\r\ndir.list_dir_end()\r\n```\r\n\r\nExample B:\r\n```py\r\ndir.list_dir_begin()\r\n\r\nvar file\r\nwhile true:\r\n\tfile = dir.get_next()\r\n\tif not file:\r\n\t\tbreak\r\n\tprint(file)\r\n\r\ndir.list_dir_end()\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis proposal will allow an alternative option that is a lot simpler to write.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```py\r\nfor file in dir.list_files():\r\n\tprint(file)\r\n```\r\n\r\n**Note 1**: If buffering all the files in a list is an issue, we should probably change `file_access_pack`\r\n![image](https://user-images.githubusercontent.com/14253836/87901912-de42bf00-ca1d-11ea-906d-e42414cb84e1.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTechnically yes, this can be worked around by writing one of the top examples. However, this is used quite often and will not break compatibility for 3.2.\r\n\r\n**Note 2**: Depending on how people think of this, `list_dir_begin`, `get_next`, and `list_dir_end` could be deprecated or removed in 4.0.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is not really relevant since Directory is already part of core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1225/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1223",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1223/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1223/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1223/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1223",
    "id": 661094890,
    "node_id": "MDU6SXNzdWU2NjEwOTQ4OTA=",
    "number": 1223,
    "title": "Mixed float and int operations in shaders should automatically convert to float",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "Chaosus",
      "id": 3036176,
      "node_id": "MDQ6VXNlcjMwMzYxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3036176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chaosus",
      "html_url": "https://github.com/Chaosus",
      "followers_url": "https://api.github.com/users/Chaosus/followers",
      "following_url": "https://api.github.com/users/Chaosus/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chaosus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chaosus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chaosus/subscriptions",
      "organizations_url": "https://api.github.com/users/Chaosus/orgs",
      "repos_url": "https://api.github.com/users/Chaosus/repos",
      "events_url": "https://api.github.com/users/Chaosus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chaosus/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "Chaosus",
        "id": 3036176,
        "node_id": "MDQ6VXNlcjMwMzYxNzY=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3036176?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Chaosus",
        "html_url": "https://github.com/Chaosus",
        "followers_url": "https://api.github.com/users/Chaosus/followers",
        "following_url": "https://api.github.com/users/Chaosus/following{/other_user}",
        "gists_url": "https://api.github.com/users/Chaosus/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Chaosus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Chaosus/subscriptions",
        "organizations_url": "https://api.github.com/users/Chaosus/orgs",
        "repos_url": "https://api.github.com/users/Chaosus/repos",
        "events_url": "https://api.github.com/users/Chaosus/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Chaosus/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-19T21:56:14Z",
    "updated_at": "2020-10-26T15:45:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nThis is a reopening proposal for https://github.com/godotengine/godot/issues/26376\r\n\r\n**Describe the project you are working on:**\r\nA 2D game with some shaders\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot has a very nice shading language. It's GLSL with some magic that does lots of stuff for you behind the scenes (like it provides built-in uniforms and only adds the relevant code if they are used).\r\n\r\nThere's one thing however that makes the shading experience mildly unpleasant - very strict typing. Particularly, float/integer operations. The following lines will throw an error:\r\n```\r\n1.0 + 2\r\n(color.r + color.g + color.b) / 3\r\ncolor.r = 1\r\n```\r\nAnd many others.\r\n\r\nThe operations result in error, because they expect a float and we are using int. Now, in pretty much any programming language, when you divide a float by int, you get a float. This is obvious. But not in Godot's shading language. You need do this to make the above code work:\r\n```\r\n1.0 + 2.0\r\n(color.r + color.g + color.b) / 3.0\r\ncolor.r = 1.0\r\n```\r\nAdding `.0` looks like no big deal, but every time I write a shader, I make at least one type error. This is **really** annoying.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe above code should work, bruh. When you make an operation with a float and an int, the int should be implicitly converted to float instead of throwing an error. I mean, if you want a float then make it a float, come on compiler xd\r\n\r\nThe conversion should only happen in float/int operations. When both numbers are integers, they should stay integers, to not kill performance if someone wants to optimize.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFrom what I know, the shaders we write are pre-processed resulting in the final shader code. It should be possible to detect potential type errors and automatically convert the variables when needed. The advantage is more friendly shading experience. The disadvantage is that shaders would take longer to compile. IMO it's not a big deal, because they compile only once and AFAIK in 4.0 you can even pre-compile them, so there's no freezing etc.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nLiterally `.0`, but it's about usability. And it would be used rather often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would require a custom shader resource with custom pre-processing steps. Not sure if it's even possible. Still, this should be in core, as it's shader editor usability issue.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1223/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1222",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1222/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1222/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1222/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1222",
    "id": 660967414,
    "node_id": "MDU6SXNzdWU2NjA5Njc0MTQ=",
    "number": 1222,
    "title": "Option to allow unfiltered texture mipmaps.",
    "user": {
      "login": "EzraT",
      "id": 781121,
      "node_id": "MDQ6VXNlcjc4MTEyMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/781121?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EzraT",
      "html_url": "https://github.com/EzraT",
      "followers_url": "https://api.github.com/users/EzraT/followers",
      "following_url": "https://api.github.com/users/EzraT/following{/other_user}",
      "gists_url": "https://api.github.com/users/EzraT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EzraT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EzraT/subscriptions",
      "organizations_url": "https://api.github.com/users/EzraT/orgs",
      "repos_url": "https://api.github.com/users/EzraT/repos",
      "events_url": "https://api.github.com/users/EzraT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EzraT/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 23,
    "created_at": "2020-07-19T17:42:10Z",
    "updated_at": "2020-11-15T02:52:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe project I'm currently working on is a first person adventure game with unfiltered lower resolution textures for a more retro pixelated style look.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot allows importing textures without filtering enabled for projects like these, but for as far as I know there is no option to have unfiltered mipmaps, having mipmaps enabled always results in far-off textures appearing filtered, even when the Filter import flag is disabled.\r\n![image](https://user-images.githubusercontent.com/781121/87880948-1df5b080-c9f6-11ea-8e9c-c9b64b83d6fb.png)\r\nYou can of-course decide to disable mipmapping altogether, but this is not an ideal solution for this kinda thing, as textures will start to look ugly the further away from the camera.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI don't really know what the best way would be to implement this, or if it is even possible, but an import flag that allows to disable mipmap filtering would be nice, perhaps next to the existing import flags.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI do not have experience with OpenGL rendering programming myself, so I could be wrong on this, but I believe OpenGL has a filtering mode called: GL_NEAREST_MIPMAP_NEAREST, that might allow for the type of thing I'm looking for.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I know of, there is a project setting that seems to suggest enabling what I'm looking for, but it does not have the expected effect, mipmaps still appear filtered even with it enabled. (rendering/quality/filters/use_nearest_mipmap_filter)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot applicable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1221",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1221/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1221/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1221/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1221",
    "id": 660932064,
    "node_id": "MDU6SXNzdWU2NjA5MzIwNjQ=",
    "number": 1221,
    "title": "Expose request's body send progress in HTTPClient",
    "user": {
      "login": "vicguedez",
      "id": 12116228,
      "node_id": "MDQ6VXNlcjEyMTE2MjI4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12116228?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicguedez",
      "html_url": "https://github.com/vicguedez",
      "followers_url": "https://api.github.com/users/vicguedez/followers",
      "following_url": "https://api.github.com/users/vicguedez/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicguedez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicguedez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicguedez/subscriptions",
      "organizations_url": "https://api.github.com/users/vicguedez/orgs",
      "repos_url": "https://api.github.com/users/vicguedez/repos",
      "events_url": "https://api.github.com/users/vicguedez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicguedez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-19T16:31:46Z",
    "updated_at": "2020-11-22T06:22:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAdministrative application for a company.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, in HTTPClient there is no way to get current \"body\" upload progress.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt allows us to get the current progress of \"upload file\" requests so the end-user knows whats happening.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake HTTPClient emit a signal when progress has been made in the request, send along with the signal how many has been sent (not the total amount, only what has just been sent).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it must modify a core class.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1221/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1220",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1220/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1220/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1220/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1220",
    "id": 660929044,
    "node_id": "MDU6SXNzdWU2NjA5MjkwNDQ=",
    "number": 1220,
    "title": "Please allow us to change the LineEdit control's caret",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-19T16:25:56Z",
    "updated_at": "2020-07-20T17:59:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA network test\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthere is no way to change the LineEdit control's caret\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nallow us to set a texture for the caret and offset it\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would just be a theme and style override\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes and No not that i know if if someone knows you can tell me\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts a pretty basic feature the was overlooked",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1220/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1217",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1217/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1217/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1217/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1217",
    "id": 660460305,
    "node_id": "MDU6SXNzdWU2NjA0NjAzMDU=",
    "number": 1217,
    "title": "Some improvements to kinematic body's move_and_slide_with_snap",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-18T23:58:07Z",
    "updated_at": "2020-07-19T13:53:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D Sonic-like mechanics project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf we want to re-create sonic's mechanics in Godot, we need to resolve some problems, that I could analyze playing the 2D sonic's games:\r\n    -The classic sonic can run through walls and ceilings if the speed is maintained;\r\n    -Even if speed is too high, the character remains attached to ground even if there is a sudden slope angle change;\r\n    -The player only remains attached to ground if each interpolation step the difference of angle in floor is less that 90º and the \r\n    Floor height is the same (So sonic will fall instead of attach to a ground just a little bellow or to a wall).\r\n\r\nThe current move_and_slide_with_snap can resolve just a bit of these problems, but it seens like it was designed for simple platforms, without high-speed movement nor more than 90º slopes. So these problems will occour:\r\n    -Even if we increase floor_max_angle parameter, seems like the speed is decelerated in horizontal floor normal (on walls).\r\n    -The function snap a little too much, so if there's a ground one step bellow from current player ground, the function will snap, \r\n    instead of fall.\r\n    -If we decrease snap vector length, in a sudden slope change the player will not be snapped to ground.\r\n    -It seens like that in some cases the position is snapped but the returned speed isn't.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSome of the features will break the mechanic to simple platforms, so maybe is better to have a separated function, maybe called move_and_slide_with_free_snap (a little too long, i'm not good with names (: ), then the syntax would be something like this:\r\n`move_and_slide_with_free_snap(Vector2 linear_velocity, int max_slides = 4, float slide_delta = 8f, float max_floor_angle_difference = 1.570796, float max_floor_height_difference = 8, bool infinite_inertia = true)`, the max_floor_angle_difference is in radians, and the max_floor_height_difference and slide_delta is in pixels.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn this function it would slide a small amount per step, compare the previous step ground normal to current step and see some conditionals:\r\n    -If the angle difference of floor normal, in degrees, from the previous step to this step is less or equal than \r\n    max_floor_angle_difference, then snap the position and speed.\r\n    -If the angle difference is larger than max_floor_angle_difference , then don't snap.\r\n    -Calculates the floor height by using the positions compared by the normals and if the difference is higher than \r\n    max_floor_height_difference, then don't snap.\r\nIn each step, it compares the values of the previous step, and if in the previous step the position and speed is not snapped, just move the resultant delta.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf can be worked around but isn't a easy thing to do as it requires significant amount of vector math and requires a significant amount of code lines to create the mechanic.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause is a valid KinematicBody2D (and 3D) use to make these sonic mechanics instead of other nodes, and engages game developers to create more frenetic action games using Godot.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1216",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1216/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1216/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1216/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1216",
    "id": 660401837,
    "node_id": "MDU6SXNzdWU2NjA0MDE4Mzc=",
    "number": 1216,
    "title": "Make the script editor completion use better sorting/searching",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-18T21:49:36Z",
    "updated_at": "2020-11-07T23:32:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen using the '.' to expand the current object in the IDE it would be nice to be able to have the items sorted either alphabetically or using some kind of semi-intelligent ordering, instead of the current order which seems to list every single global first then everything else afterewards alphabetically. In addition, using the list to find items by typing is limited.\r\n\r\nWhen you know what you want, you do not need the dropdown, so being confronted by an arbitrary sort containing first 3 pages of globals is pretty much pointless to anyone who actually needs the dropdown, as seen in the picture below.\r\n\r\nI would suggest the following:\r\n1. The simplest approach is simply alphabetical, this is at least navigable.\r\n2. VSCode employs a much better (for some languages) approach in that it first lists all the current object's methods then everything else, alphabetical. Imagine on a Timer pressing '.' and getting all the actual timer methods/properties first :)\r\n\r\nIn addition, typing only works for the first letter. What if you don't know if it is 'is_deferred' or 'deferred'? in Visual Studio you can type a word and it finds everything with that word\r\n\r\nCurrent system showing page after page of globals\r\n![image](https://user-images.githubusercontent.com/12863685/87862465-5b036980-c948-11ea-93b5-b7845ae05502.png)\r\n\r\nThis is how the VSCode plugin for GDScript works, it colour codes and sorts alphabetically.\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/87862500-c0575a80-c948-11ea-9cd7-3adc17dfdefb.png)\r\n\r\nIn javascript it adds to this and finds inferred methods, etc. and creates a priority then alphabetical sort.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1216/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1215",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1215/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1215/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1215/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1215",
    "id": 660318231,
    "node_id": "MDU6SXNzdWU2NjAzMTgyMzE=",
    "number": 1215,
    "title": "Add Blender-inspired UI and shortcuts for transform tools in 3D editor",
    "user": {
      "login": "rcorre",
      "id": 2496231,
      "node_id": "MDQ6VXNlcjI0OTYyMzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2496231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcorre",
      "html_url": "https://github.com/rcorre",
      "followers_url": "https://api.github.com/users/rcorre/followers",
      "following_url": "https://api.github.com/users/rcorre/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcorre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcorre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcorre/subscriptions",
      "organizations_url": "https://api.github.com/users/rcorre/orgs",
      "repos_url": "https://api.github.com/users/rcorre/repos",
      "events_url": "https://api.github.com/users/rcorre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcorre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-07-18T19:01:21Z",
    "updated_at": "2020-12-06T18:50:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nFPS, but applies to almost any 3D project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI find blenders UI for transforms to be very intuitive, fast, and accurate, specifically the following behavior:\r\n\r\n- Pressing g/r/s immediately enters grab(translate)/rotate/scale mode for the selected object(s),\r\n  and translation is performed until you confirm or cancel (no need to hold a mouse button)\r\n  Click confirms, ESC cancels (restoring the original transforms).\r\n- Pressing (shift)+x/y/z locks the transform to the specified axis/plane\r\n- Pressing xx/yy/zz locks the transform to the specified _local_ axis\r\n- Hold ctrl to snap, shift for precise movement\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nImplement the above features in Godot's 3D editor.\r\nThis is a revival of https://github.com/godotengine/godot/issues/19186.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI think this can be broken up into several chunks. Maybe we don't take all of them, but some are low-hanging fruit that I think will provide a lot of benefit with little complexity:\r\n\r\n- [x] Pressing (shift)+X/Y/Z locks the transform to an axis/plane while using a transform tool. Only process these keys while using a transform tool _and_ the mouse is down.\r\n    - These are configurable editor shortcuts, so you could swap z/y for a more blenderlike experience\r\n    - Implemented at https://github.com/rcorre/godot/commit/27b66ae52258c507253e4a04fa27a3634792713f\r\n- [x] Pressing XX/YY/ZZ locks the transform to a _local_ axis. Godot has local transforms already, maybe we can just toggle the setting for the duration of the transform.\r\n      - Implemented in https://github.com/rcorre/godot/commit/4bb6738a13858dee3fb75a17fd0aaf82dd796532\r\n- [ ] Hold shift for precision. Shift is already used to disable proportional scaling in planar mode :confounded:\r\n   - Actually SHIFT already works while snapping\r\n- [x] _Optional_ bindings to activate a transform tool and use it without holding down the mouse (like blender's G/R/S)\r\n    - Implemented at https://github.com/rcorre/godot/commit/7eac239471bb7a760d0f315452d0371099d0a9bc\r\n- [x] Pressing ESC while using a transform tool undoes a transform\r\n    - Implemented at https://github.com/rcorre/godot/commit/0a567528855a702d53fa2c2541176fb7ce7c8196\r\n- [x] Highlight the transformation axis in the spatial gizmo. PoC [here](https://github.com/rcorre/smoothie/blob/master/addons/smoothie/gizmo.gd).\r\n\r\n![tmp](https://user-images.githubusercontent.com/2496231/87999642-7d70c080-cac9-11ea-87e0-38135610ad31.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nSee the addon below. It isn't horrible, but it isn't \"a few lines\" either.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI actually [started work on an addon](https://github.com/rcorre/smoothie) to do exactly this.\r\nIt is still a PoC but demonstrates much of the functionality I describe above.\r\nHowever, I was looking through the Godot source and realized that most of this is already implemented.\r\nFor example, you can already cycle through axis locks by pressing the middle-mouse button while holding down the left-mouse button.\r\nHowever, this is clumsy and hard to discover (I didn't realize it existed until I saw it in the source).\r\n\r\nSo this could be implemented as a plugin, but I got tired of re-implementing Godot's editor logic and decided to try patching the editor instead.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1215/reactions",
      "total_count": 19,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 6,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1213",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1213/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1213/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1213/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1213",
    "id": 660037856,
    "node_id": "MDU6SXNzdWU2NjAwMzc4NTY=",
    "number": 1213,
    "title": "Add a `pop_back()` method to Pool*Array",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-07-18T09:35:33Z",
    "updated_at": "2020-07-22T09:25:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript editor plugins \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a `PoolStringArray` and I want to pop last item using `pop_back` like I do with `Arrays`.\r\nThere is `push_back()` in `PoolStringArray`, where's `pop_back()`?\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nhaving `pop_back()` looks quite consistent imo.\r\nmoreover, the user may expect this method to be present, since `PoolStringArray` already has `push_back()`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```gdscript\r\nvar pool_str: = PoolStringArray([\"a\",\"b\"])\r\nvar last_item = pool_str.pop_back()\r\nprint(last_item)\r\n-> \"b\"\r\nprint(pool_str)\r\n-> [\"a\"]\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nwell instead of\r\n```gdscript\r\nvar last_item = pool_str.pop_back()\r\n```\r\nI could do something like\r\n```gdscript\r\nvar size = pool_str.size()\r\nvar last_item = pool_str[size-1]\r\npool_str.remove(size-1)\r\n```\r\nbut I'm not sure if it will work as fast as if it were a built-in method.\r\n\r\nalso as you can see it doesn't look so clear.\r\nbesides, I'm not sure if it is possible to move this part of the code into a separate method, and even if it is possible, if such a method would be convenient.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think this could be implemented as an addon",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1213/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1212",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1212/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1212/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1212/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1212",
    "id": 659594188,
    "node_id": "MDU6SXNzdWU2NTk1OTQxODg=",
    "number": 1212,
    "title": "Add a method to list the contents of PCK files or resource associated with it",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-17T20:07:52Z",
    "updated_at": "2020-10-07T00:44:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWorking with unit testing frameworks such as [Gut](https://github.com/bitwes/Gut) or [WAT](https://github.com/CodeDarigan/WAT).\r\nWorking on a project with modding support.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm using Gut to test scripts in my project. It allows you to specify a single directory from which all scripts are detected recursively. It uses `Directory` class to traverse those. While it works in debug/editor builds, there's no way to collect the scripts once the project is exported, because all the assets are packed into the `.pck` file, hence there's no way to test the project in release builds, which is crucial given the sheer number of bug reports pertaining to debug/release inconsistencies (wrong debug checks which are originally meant to be present in release, you can also unknowingly rely on debug-only features which are not documented etc).\r\n\r\nGut does provide a way to [import/export the tests](https://github.com/bitwes/Gut/wiki/Running-On-Devices) and you can see how complex it can get.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice if Godot could provide a really simple method to inspect the contents of a `.pck` file by returning an array of resource paths within a PCK, so things like the scripts could be collected in release builds and tested accordingly.\r\n\r\nIt is not limited to testing of course. Any other resource type could be listed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimilarly to how we have `ProjectSettings.load_resource_pack()`, it would be nice to have a method such as `list_resource_pack()`. The full support for traversing the `.pck` file just like any other filesystem would be a much better and ultimate solution of course, but given godotengine/godot#7845, I understand that this might not what core developers are interested to work on.\r\n\r\nIn fact, this kind of feature would only enhance the modding community/support in Godot. Yeah, you could `load_resource_pack()` from external source, but how do you actually know what this PCK file represents? You might want to validate if that's really a PCK that you want to load (is it even compatible?), or you could list all assets and display that in a game gallery dynamically (once a PCK is loaded). I mean, in some cases you might not know what individual resources you could actually `load()` without knowing the actual paths, and this proposal is the answer to this.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere are currently some existing plugins which provide the support for walking the `.pck` files:\r\n- https://github.com/MrJustreborn/godot_PCKManager (not updated in 3 years, crashes with some PCKs in `3.2`)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe the engine should provide first party support for this, because feature-wise it's currently incomplete. If Godot provides it's own virtual file system, there should be a way to interact with it, at least on some level.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1212/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1211",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1211/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1211/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1211/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1211",
    "id": 659280981,
    "node_id": "MDU6SXNzdWU2NTkyODA5ODE=",
    "number": 1211,
    "title": "'Attach Node Script' Dialog should suggest snake case file names, consistent with the documentation",
    "user": {
      "login": "homchom",
      "id": 41265646,
      "node_id": "MDQ6VXNlcjQxMjY1NjQ2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41265646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/homchom",
      "html_url": "https://github.com/homchom",
      "followers_url": "https://api.github.com/users/homchom/followers",
      "following_url": "https://api.github.com/users/homchom/following{/other_user}",
      "gists_url": "https://api.github.com/users/homchom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/homchom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/homchom/subscriptions",
      "organizations_url": "https://api.github.com/users/homchom/orgs",
      "repos_url": "https://api.github.com/users/homchom/repos",
      "events_url": "https://api.github.com/users/homchom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/homchom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-07-17T14:00:43Z",
    "updated_at": "2020-08-23T19:29:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A 2D rhythm platformer\r\n\r\n**Describe the problem or limitation you are having in your project:** The [GDScript Style Guide](https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/gdscript_styleguide.html) page on the documentation says that per the style guide, GDScript file names should be in snake case. However, the 'Attach Node Script' dialog suggests the same name as the node, in pascal case by default.\r\n\r\n![image](https://user-images.githubusercontent.com/41265646/87794171-41f99c00-c814-11ea-9dce-3aa996e4ee2c.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** To achieve consistency with the documentation, the autocompleted file name should be converted to snake case.\r\n\r\n![image](https://user-images.githubusercontent.com/41265646/87794202-4cb43100-c814-11ea-83b3-afb5a6e799df.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** From what I have heard, Godot already has case conversion methods, so it should be easy to just convert pascal to snake case.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** N/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It is more consistent with the (core) documentation.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1211/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1209",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1209/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1209/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1209/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1209",
    "id": 658769386,
    "node_id": "MDU6SXNzdWU2NTg3NjkzODY=",
    "number": 1209,
    "title": "Allow second line brackets",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-17T02:30:13Z",
    "updated_at": "2020-07-18T10:24:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA space ship project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI just don't like it\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nallow for second line brackets and braces like so..\r\n```\r\nvar arr = \r\n[  #this\r\n 0,\r\n 1,\r\n 2,\r\n]\r\n\r\nvar dic= \r\n{  #this\r\n \"a\": 0,\r\n \"b\": 1,\r\n \"c\": 2,\r\n}\r\n```\r\n\r\ncurrently this throws a error unless you change it to this..\r\n```\r\nvar arr = [ \r\n 0,\r\n 1,\r\n 2,\r\n]\r\n\r\nvar dic= {\r\n \"a\": 0,\r\n \"b\": 1,\r\n \"c\": 2,\r\n}\r\n```\r\nI think this is not only is utter crap in the way it forces the way you format but it also is less readable for me\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically the parser would just allow for this to happen and wouldn't complain.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would use it and I'm sure other c developers and no it can't be worked around\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits less confusing to not get a error when this happens\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1209/reactions",
      "total_count": 5,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1207",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1207/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1207/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1207/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1207",
    "id": 658530695,
    "node_id": "MDU6SXNzdWU2NTg1MzA2OTU=",
    "number": 1207,
    "title": "Add generic parameters to allow strongly typing for collections",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-07-16T20:15:37Z",
    "updated_at": "2020-10-26T07:03:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA space ship battle game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nJust the general lack of static typing features in the gdscript language for some things\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI was wondering if gdscript could get generics simular to C#..\r\n\r\nit would allow us to make classes the require a type to be passed like so..\r\n`func foo<T>(t:T)`\r\n\r\nthey could also get constraints to allow static typing \r\n`func foo<T>(t:T) T : int, CustomClass`\r\n\r\nthis could be used to do things like so..\r\n```\r\n#only accepts numbers\r\nvar veci := Vector2<int>()\r\nvar veci : Vector2<int>\r\nvar arr  := Array<MyObject>()\r\nvar arr  : Array<MyObject>\r\n```\r\n\r\nthings like so wouldn't be allowed..\r\n```\r\nvar veci = Vector2<int>()\r\n\r\nvar arr  = Array<MyObject>()\r\n```\r\n\r\nbut things like so would..\r\n```\r\nvar veci = Vector2()\r\n\r\nvar arr  = Array()\r\n```\r\n\r\n\r\n**Things to note**..\r\n- generic functions use `<>` to remove confusion between `()` which is used for calling a function\r\n- constraints can be classes, any godot object, or any hint \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n_see above_\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used whenever someone wants static typing for a collection like a array or dictionary or numeric struct like a vector\r\nit can be worked around but it takes a bunch of type checking for everything you do and this easily because unmanageable and ugly\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits another static typing feature which I think is good\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1207/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1206",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1206/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1206/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1206/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1206",
    "id": 658496830,
    "node_id": "MDU6SXNzdWU2NTg0OTY4MzA=",
    "number": 1206,
    "title": "Add the `Node` as an option in \"Create Root Node\" to create plain scenes",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-07-16T19:30:42Z",
    "updated_at": "2020-07-17T16:06:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating scenes which inherit `Node` often (writing test scenes etc.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an item to quickly create a scene inheriting from the core `Node` type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust like we have \"2D Scene\" and \"3D Scene\" options, there should be an option to create a plain \"Scene\" which is agnostic.\r\n\r\n![godot-node-fundemantal-part-of-the-engine](https://user-images.githubusercontent.com/17108460/87784445-f7414980-c83e-11ea-8edd-a77326ffc580.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere's hardly a way to override the \"Create Root Node\" form.\r\n\r\nThere are currently several ways to workaround this:\r\n\r\n1. You have to click \"Custom Node\" just to instantiate a scene inheriting from `Node`.\r\n\r\n2. Adding `Node` to a list of favorites, and clicking on the \"Star\" to display that. The problem with this approach is that I have to re-add other built-in nodes (`Node2D`, `Control` etc) to the list to make it look like the default one without having to switch between favorites and defaults.\r\n\r\n3. Navigate with the mouse to `New Scene`, proceed with keyboard with <kbd>Ctrl</kbd> + <kbd>A</kbd> → <kbd>Enter</kbd> https://github.com/godotengine/godot-proposals/issues/1206#issuecomment-659807343.\r\n\r\nTo summarize, you have to use both the mouse and the keyboard in all those cases (which is known to be slow for developers), and that's a lot of steps just to create a scene with a root `Node`, and even if something can be tweaked, it's tiresome to do this process throughout other projects and/or machines.\r\n\r\nRelated usability proposal: #679.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause `Node` is the most fundamental part of the engine.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1206/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1204",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1204/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1204/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1204/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1204",
    "id": 657758346,
    "node_id": "MDU6SXNzdWU2NTc3NTgzNDY=",
    "number": 1204,
    "title": "Make `_integrate_forces()` obsolete by allowing to modify PhysicsBodies in `_physics_process()`",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-16T00:57:36Z",
    "updated_at": "2020-07-16T19:24:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpaceship battle game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNon right now but I am creating this issue due to godot getting a physics update in 4.0\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake it so the user can modify physics properties like position, velocity, and rotation in the _physics_process function\r\nthis makes physic bodies much clearer and easier to both understand and use.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit would work something like so..\r\n```\r\nextends RigidBody2D\r\n\r\nfunc _physics_process(delta):\r\n   #no need for _integrate_forces modifying values such as position update the Rigid Body automatically\r\n   wrap_pos(0,0,128,128) \r\n\r\nfunc wrap_pos(min_x,min_y,max_x,max_y):\r\n    var diff_x = (max_x-min_x)*abs((max_x-min_x)%position.x)\r\n    var diff_y = (max_y-min_y)*abs((max_y-min_y)%position.y)\r\n    if   (position.x<min_x): position.x -= diff_x \r\n    elif (position.x<min_x): position.x += (diff_x\r\n\r\n    if   (position.y<min_y): position.y -= diff_y\r\n    elif (position.y<min_y): position.y += (diff_y\r\n``` \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm sure this would be used quite often especially for people that don't know the you need to use _integrate_forces like people coming from other game engines.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits already there this way is just better\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1203",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1203/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1203/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1203/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1203",
    "id": 657732100,
    "node_id": "MDU6SXNzdWU2NTc3MzIxMDA=",
    "number": 1203,
    "title": "Add Validate signal and hook for Objects",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-15T23:45:16Z",
    "updated_at": "2020-07-16T07:45:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA spaceship battle game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nits just hard to know when to update my objects when I edit their properties\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a Validation signal and hook for node.\r\n\r\nBasically it would be a hook or signal that fires when something is changed.\r\nit would not require a tool script to work, or a variable to be exported and would allow people to apply updates to objects when needed without implementing a changed signal for every single object.\r\n\r\nit would fire whenever...\r\n- you set a object\r\n- you clear a object\r\n- you replace a object\r\n- you change a object or one of it's properties\r\n\r\nit would also work in game and not just the editor\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit would work something like this..\r\n```\r\nextends Node\r\n\r\n#doesn't need to be exported to work\r\nvar my_var := 0\r\nvar _my_var_2 := 0\r\n\r\nfunc _validate():\r\n    update_my_object()\r\n\r\nfunc update_my_object():\r\n    _my_var_2 =my_var \r\n\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be very useful and would be used quite often especially if it worked exactly how I described.\r\nThis kinda can be worked around but requires either implementing a changed signal for every single property or updating everything in _process.\r\n\r\nhowever even with the changed signal way it doesn't update for non properties and both ways require a tool script to be used in the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUnity has it although unity's version is editor only so it has its limitations\r\nIt also makes things alot easier to update and easier is always better as long as it doesn't sacrifice control which this doesn't",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1202",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1202/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1202/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1202/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1202",
    "id": 657659748,
    "node_id": "MDU6SXNzdWU2NTc2NTk3NDg=",
    "number": 1202,
    "title": "Expose a way to get an autotile's collision shape from a TileSet",
    "user": {
      "login": "cgbeutler",
      "id": 9751923,
      "node_id": "MDQ6VXNlcjk3NTE5MjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9751923?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cgbeutler",
      "html_url": "https://github.com/cgbeutler",
      "followers_url": "https://api.github.com/users/cgbeutler/followers",
      "following_url": "https://api.github.com/users/cgbeutler/following{/other_user}",
      "gists_url": "https://api.github.com/users/cgbeutler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cgbeutler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cgbeutler/subscriptions",
      "organizations_url": "https://api.github.com/users/cgbeutler/orgs",
      "repos_url": "https://api.github.com/users/cgbeutler/repos",
      "events_url": "https://api.github.com/users/cgbeutler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cgbeutler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-15T21:08:54Z",
    "updated_at": "2020-07-16T07:37:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI was trying to make a plugin tool for [`TileMap`](https://docs.godotengine.org/en/3.2/classes/class_tilemap.html) and [`TileSet`](https://docs.godotengine.org/en/3.2/classes/class_tileset.html).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no apparent way to get collision shapes for an auto-tile or atlas-tile. There are functions like `TileSet::autotile_get_navigation_polygon(int id, Vector2 coord)` to get other auto/atlas tile properties, but the ones for collisions are not there. The regular `tile_get_*` set of functions has collision getters, but there is no apparent way to find the specific shape you are looking for for your auto/atlas subtile.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf there really is no way to find the collision for your sub-tile, then adding a getter would make that possible. If there is a way to get it, but it's convoluted, adding a getter would help folks like me who are confused and frustrated.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere are _currently_ these functions in TileSet:\r\n\r\n```\r\ntile_get_shape ( int id, int shape_id )  -> Shape2D \r\ntile_get_shape_count ( int id ) -> int \r\ntile_get_shape_offset ( int id, int shape_id ) -> Vector2 \r\ntile_get_shape_one_way ( int id, int shape_id ) -> bool \r\ntile_get_shape_one_way_margin ( int id, int shape_id ) -> float\r\ntile_get_shape_transform ( int id, int shape_id ) -> Transform2D\r\ntile_get_shapes ( int id ) -> Array\r\n```\r\n\r\nI propose adding matching functions for `autotile`. Something like:\r\n\r\n```\r\nautotile_get_shape ( int id, Vector2 coord, int shape_id )  -> Shape2D\r\nautotile_get_shape_count ( int id, Vector2 coord ) -> int\r\nautotile_get_shape_offset ( int id, Vector2 coord, int shape_id ) -> Vector2\r\nautotile_get_shape_one_way ( int id, Vector2 coord, int shape_id ) -> bool\r\nautotile_get_shape_one_way_margin ( int id, Vector2 coord, int shape_id ) -> float\r\nautotile_get_shape_transform ( int id, Vector2 coord, int shape_id ) -> Transform2D\r\nautotile_get_shapes ( int id, Vector2 coord ) -> Array\r\n```\r\n\r\nA bonus feature would be renaming `autotile_*` to `subtile_*` since those functions are for both autotile and atlastile. That would be a v4 thing, though.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo workarounds needed. This is just exposing new api.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI would think this is core functionality. Not having it seems like an oversight more than anything.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1200",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1200/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1200/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1200/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1200",
    "id": 657312548,
    "node_id": "MDU6SXNzdWU2NTczMTI1NDg=",
    "number": 1200,
    "title": "Add a GDScript code formatter in the script editor",
    "user": {
      "login": "aki-cat",
      "id": 928588,
      "node_id": "MDQ6VXNlcjkyODU4OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/928588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aki-cat",
      "html_url": "https://github.com/aki-cat",
      "followers_url": "https://api.github.com/users/aki-cat/followers",
      "following_url": "https://api.github.com/users/aki-cat/following{/other_user}",
      "gists_url": "https://api.github.com/users/aki-cat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aki-cat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aki-cat/subscriptions",
      "organizations_url": "https://api.github.com/users/aki-cat/orgs",
      "repos_url": "https://api.github.com/users/aki-cat/repos",
      "events_url": "https://api.github.com/users/aki-cat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aki-cat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-15T12:30:05Z",
    "updated_at": "2020-09-13T23:39:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMaintaining a uniform code style between files is time-consuming, and when working with multiple people, it becomes nearly impossible.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n[Original Issue](https://github.com/godotengine/godot/issues/7392)\r\n_I'm just ressurrecting that issue because I have been watching it and didn't find any tracker for it anymore._\r\n\r\nThe desired functionality is to automatically reformat code in GDscript editor to some standard code style (like the one in the docs, for instance). Be it everytime the user saves the script or via a specific command, or maybe even both.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA toggle in the editor menu would activate and deactivate this feature. You could configure it to reformat the file every time you save or you could configure a command that reformats the file to a hotkey.\r\n\r\nThis would greatly help with cleaning trailing whitespaces, enforcing line column limits, and generally keeping your code clean and uniform between developers.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt should be used fairly often by any coders with some experience. There is a third-party solution, however: [Godot GDScript toolkit](https://github.com/Scony/godot-gdscript-toolkit).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGDScript is under constant changes and improvements. This kind of tool would work best if updated accordingly to the latest updates. Thus, being part of the core would be desirable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1200/reactions",
      "total_count": 8,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 7,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1198",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1198/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1198/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1198/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1198",
    "id": 657107044,
    "node_id": "MDU6SXNzdWU2NTcxMDcwNDQ=",
    "number": 1198,
    "title": "Improve GDNative support in the asset library",
    "user": {
      "login": "jonbonazza",
      "id": 1424843,
      "node_id": "MDQ6VXNlcjE0MjQ4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonbonazza",
      "html_url": "https://github.com/jonbonazza",
      "followers_url": "https://api.github.com/users/jonbonazza/followers",
      "following_url": "https://api.github.com/users/jonbonazza/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonbonazza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonbonazza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonbonazza/subscriptions",
      "organizations_url": "https://api.github.com/users/jonbonazza/orgs",
      "repos_url": "https://api.github.com/users/jonbonazza/repos",
      "events_url": "https://api.github.com/users/jonbonazza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonbonazza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-07-15T06:48:09Z",
    "updated_at": "2020-07-16T07:46:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project that uses assetlib\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFrom what I understand, in order to publish a GDNative addon to the asset lib, the built binaries need to be hosted in Git so that they can be distributed with the addon, since the assetlib simply pulls from Git. This is not great since having binary files in a Git repo has major downsides.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSee below\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI propose that after downloading a project from Git, the assetlib looks for the presence of a Makefile (or Scons, or CMakeList or w/e; something standardized) and if it exists, run it to build the plugin.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCurrently, it requires either distributing the prebuilt binaries via Git repo, or leaving the build step up to the user of the addon. Neither of which is ideal, in my opinion. There isn't really any other way around this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is about the asset library, so no.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1198/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1197",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1197/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1197/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1197/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1197",
    "id": 657092462,
    "node_id": "MDU6SXNzdWU2NTcwOTI0NjI=",
    "number": 1197,
    "title": "Add level streaming and stitching tools for creating large open worlds",
    "user": {
      "login": "jonbonazza",
      "id": 1424843,
      "node_id": "MDQ6VXNlcjE0MjQ4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonbonazza",
      "html_url": "https://github.com/jonbonazza",
      "followers_url": "https://api.github.com/users/jonbonazza/followers",
      "following_url": "https://api.github.com/users/jonbonazza/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonbonazza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonbonazza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonbonazza/subscriptions",
      "organizations_url": "https://api.github.com/users/jonbonazza/orgs",
      "repos_url": "https://api.github.com/users/jonbonazza/repos",
      "events_url": "https://api.github.com/users/jonbonazza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonbonazza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-15T06:19:42Z",
    "updated_at": "2020-07-15T18:09:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nOnline multiplayer games with large open worlds\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe build online multiplayer games and some of these games use large open worlds. Large open worlds are not unique to online games however. Creating large worlds, regardless of whether they are online or offline, pose a lot of challenging problems, not only from the game's perspective, but also from the content creation/editing perspective. A lot of the solutions to these problems are fairly game specific and thus, easier to address as either published add-ons or project one-offs. Two of the biggest problems are better solved by core engine however, as they are fundamental ton working with large open worlds:\r\n\r\n1. Level/Asset streaming\r\n2. Level creation/stitching\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n \r\n## Level/Asset streaming \r\n\r\nLevel streaming is where the content of a \"level\" is streamed from disk as needed, rather than all of the level loaded into memory at once. Since large open worlds contain so much data, it's generally impossible to fit all of the necessary data in a reasonable amount of memory. \r\n\r\nThis problem can be solved in a couple different ways. The first approach is **Geometric Volumes**. This approach is simple, but it can be extremely cumbersome to use and as such, is not really considered ideal. The way it works is that the developer creates their level in the editor and then manually places a number of bounding volumes around certain parts of the level, with some overlap. When a player enters one of these volumes, everything within the volume is loaded and when a player leaves one of these volumes, everything within the volume is unloaded. There are a couple major problems with this approach however. First, the nature of the solution does not lend itself well to development. Not only does it require the manual placement of volumes (an extremely tedious task) it requires that the entire level be loaded in the editor, which means that in order to _create_ these kinds of games, an extremely powerful computer is necessary.\r\n\r\nThe second solution to this problem is basically an extension of the first solution. It comes from realizing that the creation of volumes is a very automatable process. By automating the creation of these volumes by simply generating an infinite grid, you remove the step of having to manually place the volumes, which is great, but you also gain the benefit of being able to create this same grid in the editor, meaning that the editor camera can be used instead of the player in order to handle level streaming during development. This way, not only do you gain the benefits of level streaming while the game is running, but you also gain the same benefits in the editor while developing the game. \r\n\r\nThis is the solution most commonly used. As a bonus, this solution also lends itself well to online multiplayer games, where you only need to replicate objects that are within a certain \"area of interest\" but that's a discussion for another time.\r\n\r\n## Level Creation/Stitching\r\nThis problem is more of a problem for developers in that, supposing that the above solution to level streaming is adopted, a good editor experience is necessary for both creating levels, as well as easily stitching existing \"sections\" of a level (possibly created outside of the engine in a DCC) together to create the overall world. Part of a possible solution to this is elaborated on above.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI did this in the above section as it was easier to answer both of these at once.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTechnically speaking, these two fundamental components _can_ be implemented as `EditorPlugin`s using things like `Area2D` /`Area` nodes, but I worry about the performance of such an approach, not only from the performance characteristics of GDScript, but also the fact that `Area(2D)` nodes aren't designed for such a use case and their performance might not be up to the challenge. Something more tailored would be more ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI agree that anything beyond these fundamental building blocks makes better sense as game specific tools (possibly publihsed as a 3rd party addon in the asset lib), however these two things are so ubiquitous for large, open world games, that other engines are also taking a similar approach. As one example, see the upcoming large open world features in the Unreal Engine.\r\n\r\nI should also note that, at least for 3D, this feature doesn't make much sense until 4.0 when the rendering pipeline has been overhauled. The performance of 3D in godot simply isn't sufficient to run a large open world game, even with such optimizations such as level streaming, in any by the lowest-poly of games.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1197/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1196",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1196/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1196/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1196/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1196",
    "id": 657085792,
    "node_id": "MDU6SXNzdWU2NTcwODU3OTI=",
    "number": 1196,
    "title": "Add a player for Lottie animations",
    "user": {
      "login": "benitogf",
      "id": 1633813,
      "node_id": "MDQ6VXNlcjE2MzM4MTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1633813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benitogf",
      "html_url": "https://github.com/benitogf",
      "followers_url": "https://api.github.com/users/benitogf/followers",
      "following_url": "https://api.github.com/users/benitogf/following{/other_user}",
      "gists_url": "https://api.github.com/users/benitogf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benitogf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benitogf/subscriptions",
      "organizations_url": "https://api.github.com/users/benitogf/orgs",
      "repos_url": "https://api.github.com/users/benitogf/repos",
      "events_url": "https://api.github.com/users/benitogf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benitogf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-15T06:05:22Z",
    "updated_at": "2020-08-08T18:09:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nan application that receive signals and display the corresponding animation\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI would like to be able to import the animations using [lottie](https://github.com/LottieFiles/lottie-player)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nCurrently I couldn't find any integration for godot\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI have no specifics, maybe a way to integrate the web player into godot?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThink that it could be used often, currently I havent found a workaroud\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI'm not sure, I see that there are platforms integrating as a \"core\" feature like [QT](https://www.qt.io/blog/2019/03/08/announcing-qtlottie)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1196/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1195",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1195/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1195/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1195/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1195",
    "id": 656913427,
    "node_id": "MDU6SXNzdWU2NTY5MTM0Mjc=",
    "number": 1195,
    "title": "Add a `INV_PROJECTION_MATRIX` built-in to CanvasItem Shader",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2020-07-14T21:35:41Z",
    "updated_at": "2020-11-20T11:58:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2D project with repeating vaporwave pattern on floor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm creating a dynamic texture tiling with canvas item shader to be able to tile a texture seamless between objects using local pixel coordinates to world coordinates. The problem is the Matrix used to convert local space to world space is needed to be provided manually via script (with get_global_transform) on _ready and everytime the node moves. The workflow would be easier if this matrix is accessible directly in canvas item shader like INV_PROJECTION_MATRIX on spatial shader.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is simple as adding the INV_PROJECTION_MATRIX matrix to shading language, passing the node global transform automatically to the shader.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHonestly I don't really know exactly how some built-ins is passed from CPU to GPU in shader, but it would work simply passing the node global transform to shader. Then the use would as simple as:\r\n\r\n`vec2 world_position = (PROJECTION_MATRIX * vec4(VERTEX, 0.0, 1.0)).xy;`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIndeed yes, just assigning the global transform of the node with set_shader_param to shader everytime the node moves.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it makes the workflow easier to anyone create a more variety of shaders without depending on CPU part, as this is already automated.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1195/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1194",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1194/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1194/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1194/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1194",
    "id": 656789930,
    "node_id": "MDU6SXNzdWU2NTY3ODk5MzA=",
    "number": 1194,
    "title": "Add a new type of autotiling to TileSet/TileMap",
    "user": {
      "login": "MrSlimeOfSlime",
      "id": 58266694,
      "node_id": "MDQ6VXNlcjU4MjY2Njk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58266694?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrSlimeOfSlime",
      "html_url": "https://github.com/MrSlimeOfSlime",
      "followers_url": "https://api.github.com/users/MrSlimeOfSlime/followers",
      "following_url": "https://api.github.com/users/MrSlimeOfSlime/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrSlimeOfSlime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrSlimeOfSlime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrSlimeOfSlime/subscriptions",
      "organizations_url": "https://api.github.com/users/MrSlimeOfSlime/orgs",
      "repos_url": "https://api.github.com/users/MrSlimeOfSlime/repos",
      "events_url": "https://api.github.com/users/MrSlimeOfSlime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrSlimeOfSlime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-14T17:50:16Z",
    "updated_at": "2020-07-15T08:02:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a Zelda like RPG with tiles that need to blend together.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe only way to do what I want, which is having ie. grass growing onto ie. dirt, currently is to have a full 3x3 auto tile with tiles larger than the grid, which is causing issues.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nHaving a feature that would allow for tiles that are for when there are tiles of a certain type next to it, but not in the same place, would allow doing this without hassle.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nGodot would see that there is a specific tile next to another specific tile, and would then add a texture used to blend the change.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, it is rather complicated as it requires knowing which tile is which, and which tile to do it what case of what tile to use, and would be inefficient to run every frame.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHaving it as an addon would make it less accessible, and integrating it into Godot would probably allow it to run better.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1192",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1192/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1192/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1192/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1192",
    "id": 656063147,
    "node_id": "MDU6SXNzdWU2NTYwNjMxNDc=",
    "number": 1192,
    "title": "move_and_slide should not implement delta on its own",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-07-13T18:48:32Z",
    "updated_at": "2020-08-05T01:28:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nZelda 2 recreation game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have documentation on zelda2 physics based in the NES's original 60 fps. \r\n\r\nthe move_and_slide function of KinematicBody2D implements delta time on its own making the values I use far too slow.\r\nI tried dividing by delta before passing but that doesn't work either and makes my player fly off screen\r\n\r\nI also tried doing move_and_collide but due to the zelda2 physics of applying gravity every frame regardless if I am on the ground or not makes the player unable to move on the x axis\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\njust remove the delta time implementation and have us multiply it ourselves\r\nthis makes code not only clearer but make it much more flexible for different types of games\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\njust remove the delta time multiplication from the move_and_slide function\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would certainly be used by me and any other person trying to recreate a beloved game\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits already in it just needs to be separated \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1191",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1191/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1191/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1191/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1191",
    "id": 655610121,
    "node_id": "MDU6SXNzdWU2NTU2MTAxMjE=",
    "number": 1191,
    "title": "Differentiation between position from scene origin and relative position for AnimationPlayer keyframes",
    "user": {
      "login": "WinterVein",
      "id": 8573908,
      "node_id": "MDQ6VXNlcjg1NzM5MDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8573908?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WinterVein",
      "html_url": "https://github.com/WinterVein",
      "followers_url": "https://api.github.com/users/WinterVein/followers",
      "following_url": "https://api.github.com/users/WinterVein/following{/other_user}",
      "gists_url": "https://api.github.com/users/WinterVein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WinterVein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WinterVein/subscriptions",
      "organizations_url": "https://api.github.com/users/WinterVein/orgs",
      "repos_url": "https://api.github.com/users/WinterVein/repos",
      "events_url": "https://api.github.com/users/WinterVein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WinterVein/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-13T06:15:02Z",
    "updated_at": "2020-07-14T10:35:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2D platformer about a guy who works in a mine \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI need my character's position to change along with an animation\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nin the inspector window, when I try to add a keyframe for the position (transform) of the parent node (which is the player), when that animation plays, my character is teleported to that transform position\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nimagine this is an AnimationPlayer timeline for an animation named \"move character\"\r\n---(keyframe one, Transform (x=0, y=0) )----(keyframe two, Transform( x= 30, y=40))----\r\n\r\nnow in my code for the parent node (my player) i would write\r\n$AnimationPlayer.play(\"move character\")\r\n\r\n*moves the character 30 pixels to the right and 40 pixels down from their position before the animation was played instead of teleporting the player to the coordinates of x = 30, y = 40 from the starting position of the scene.*\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot really. There are workarounds that involve tweening but it's more considerably more complicated as you cannot easily sync the Character's animation to their movement on the plane, like you would be able to if this suggestion is implimented.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, because It really seems like it should be a pretty basic and standard feature given that the need to move to a specific set of static and unchanging pre-specified coordinates on the screen seems like it has very limited use compared to be able to move of coordinates relative to your character's starting position while undergoing an animation.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1190",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1190/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1190/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1190/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1190",
    "id": 655593721,
    "node_id": "MDU6SXNzdWU2NTU1OTM3MjE=",
    "number": 1190,
    "title": "Add support for FLAC decoding",
    "user": {
      "login": "DJKero",
      "id": 2711997,
      "node_id": "MDQ6VXNlcjI3MTE5OTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2711997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DJKero",
      "html_url": "https://github.com/DJKero",
      "followers_url": "https://api.github.com/users/DJKero/followers",
      "following_url": "https://api.github.com/users/DJKero/following{/other_user}",
      "gists_url": "https://api.github.com/users/DJKero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DJKero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DJKero/subscriptions",
      "organizations_url": "https://api.github.com/users/DJKero/orgs",
      "repos_url": "https://api.github.com/users/DJKero/repos",
      "events_url": "https://api.github.com/users/DJKero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DJKero/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 25,
    "created_at": "2020-07-13T05:34:05Z",
    "updated_at": "2020-11-07T01:42:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nRhythm Game for Desktop\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe game uses sound tracks to store the audio, and slices everything into keysounds (Samples that are played only when the buttons are pressed), even sounds that won't be displayed as notes (BGM Notes, which are longer), as needed when loading the song.\r\nThis is important because the content creators can produce content in a way, that they can intentionally choose to merge sounds that'll play at the same time in one track or not.\r\nFor example: Layered Synths, Background Sounds. If they're not merged, it'll be possible for anyone to create harder difficulties in the future. This is to encourage/discourage the creation of new difficulties, remixes and the ability for other people to reuse those sounds for their own creations.\r\n\r\nBefore this new format it was just a TON of small samples and a BGM file, the flexibility of this new format to organize keysounds in a longer format and the removal of the limit imposed by the nature of the previous format allows for the creators to decide if they want to work the same way as before, export the tracks as is sacrificing flexibility and storage for a faster workflow or to be smart and allow for easier creation of remixes and new content down the line.\r\nCollections can reach hundreds of GBs, this is because of the huge amount of lossless content that is created by the communities through time.\r\nSo, with this added flexibility the amount of storage space used per song can be a lot higher than before.\r\nBecause of this I think it is really important to use FLAC instead of WAV files to optimize the storage usage from the start.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDecoding of FLAC files through the Engine would fix this issue for this and other games in the genre, allowing to optimize their storage use without the tradeoff of using lossy formats.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA function that accepts a PoolByteArray as a parameter and returns a decoded PoolByteArray or an instance of AudioStreamSample.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know, it depends on the developer, I'd use it on every project.\r\nAnd yes, it could be solved with GDNative or Modules but I think there are merits to it being in core.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI honestly think this should be in core because it could benefit not only projects similar to this, but other projects with a sizable Soundtrack to optimize their storage use without sacrificing quality.\r\nIt's certainly a handy tool to add to core, and a nod to audiophiles, too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1190/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1187",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1187/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1187/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1187/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1187",
    "id": 655452805,
    "node_id": "MDU6SXNzdWU2NTU0NTI4MDU=",
    "number": 1187,
    "title": "Add a track filtering node to AnimationTree",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-12T18:33:40Z",
    "updated_at": "2020-07-12T20:57:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 3D game that is slightly similar to VR Chat but of a much smaller scale and not in VR\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes I need to animate a specific part of the body without affecting the rest. Track filtering is a good method to do it, but having it limited to Add2, Add3, Blend2 and OneShot is quite inconvenient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn independent track filtering node that would replace the filter option in Blend2 and OneShot, and expand the functionality to the other nodes. The animation output of any node can be connected through this node to any node that takes an animation input, and would limit the animation's effect to the selected tracks.\r\n\r\nMainly I want to be able to use track filtering in Transition and Blend3 nodes, but I thought having an independent node for filtering would be a good idea so I proposed this instead of just proposing to add filtering to those nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFor the nodes that already have filtering, I think it won't be that complicated and would work similar to how it does now. Blend3 would work similar to Blend2 or Add3. Transition is where it might be complicated.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it's a modification of the core animation system",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1186",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1186/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1186/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1186/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1186",
    "id": 654924699,
    "node_id": "MDU6SXNzdWU2NTQ5MjQ2OTk=",
    "number": 1186,
    "title": "Make the editor's audio bus editor affect the running project in real-time",
    "user": {
      "login": "s9menine",
      "id": 40716090,
      "node_id": "MDQ6VXNlcjQwNzE2MDkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/40716090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/s9menine",
      "html_url": "https://github.com/s9menine",
      "followers_url": "https://api.github.com/users/s9menine/followers",
      "following_url": "https://api.github.com/users/s9menine/following{/other_user}",
      "gists_url": "https://api.github.com/users/s9menine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/s9menine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/s9menine/subscriptions",
      "organizations_url": "https://api.github.com/users/s9menine/orgs",
      "repos_url": "https://api.github.com/users/s9menine/repos",
      "events_url": "https://api.github.com/users/s9menine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/s9menine/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-07-10T17:21:57Z",
    "updated_at": "2020-08-02T10:09:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAs a sound designer, all my projects feature extensive use of the audio mixer, buss routing, and effects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFine-tuning audio balance between mixer busses and effect parameters while the game is running is currently not possible. Given that this is an iterative process, having to reload scenes to test every single audio mixer change turning it into trial-and-error is painfully ineffiecient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSync audio mixer adjustments while the game is running, similar to how changing scene objects or script variables are synced.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUnity has a toggle option on their audio mixer:\r\n![Unity_SDuJvrsSy1](https://user-images.githubusercontent.com/40716090/87181004-296d1b80-c314-11ea-8d6d-bf09d946d864.png)\r\nActivating it syncs changes to the audio mixer to the running scene, immediately audible; the audio mixer's meter graphics start responding to the game's audio levels as well.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot a few lines, but a technically possible workaround is creating a UI in-game that uses AudioServer methods to modify audio mixers and their effects, basically recreating the entire Godot project's audio mixer into the game. After achieving an acceptable result, write down values and then adjust the actual audio mixer accordingly. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe audio mixer seems to be a core Godot feature; I can't find add-ons or plugins that can modify the audio mixer.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1186/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1177",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1177/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1177/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1177/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1177",
    "id": 654303124,
    "node_id": "MDU6SXNzdWU2NTQzMDMxMjQ=",
    "number": 1177,
    "title": "Add ToTypedArray method in Godot.Collections.Array C#",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-09T19:41:12Z",
    "updated_at": "2020-07-13T12:17:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA C# project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany of C# methods implemented by the engine returns Godot.Collections.Array and there's no intuitive way to convert to typed array. I can't just use the type casting like \"(Vector2[])array\" to get the typed version, or convert to Godot.Collections.Array<Vector2> then to Vector2[].\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplement a simple function that returns a typed array to Godot.Collections.Array class so we can use these instead.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the class could be something like this:\r\n\r\n```\r\npublic T[] ToTypedArray<T>() {\r\n    T[] arr = new T[this.Count];\r\n    // Some magic to store the values in the array\r\n    return arr;\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, we can create a simple function with foreach loop to store the Array values in the typed array, but this isn't intuitive in the perspective of the developer.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause simple and useful premade functions like that engages game development in C# in Godot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1176",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1176/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1176/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1176/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1176",
    "id": 653572824,
    "node_id": "MDU6SXNzdWU2NTM1NzI4MjQ=",
    "number": 1176,
    "title": "Implement infrastructure for second pass in the new GDScript compiler",
    "user": {
      "login": "pchasco",
      "id": 2642944,
      "node_id": "MDQ6VXNlcjI2NDI5NDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2642944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchasco",
      "html_url": "https://github.com/pchasco",
      "followers_url": "https://api.github.com/users/pchasco/followers",
      "following_url": "https://api.github.com/users/pchasco/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchasco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchasco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchasco/subscriptions",
      "organizations_url": "https://api.github.com/users/pchasco/orgs",
      "repos_url": "https://api.github.com/users/pchasco/repos",
      "events_url": "https://api.github.com/users/pchasco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchasco/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-07-08T20:23:45Z",
    "updated_at": "2020-08-25T21:38:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am not working on a specific project, however I am very interested in the performance of the GDScript compiler and execution engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current implementation of GDScript, and the new \"GDScript 2.0\" does not appear to have an underlying architecture to support any optimization passes after bytecode generation. (GDScript 2.0 assumption based on https://github.com/godotengine/godot/pull/39093 ) Many optimizations are only possible or much easier performed after the code generation step in a compiler.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest structuring the GDScript compiler in such a manner that transformation and optimization passes can be inserted into the series of steps that are performed to generate the final bytecode output of the GDScript compiler.\r\n\r\nThis extensible architecture will enable a number of optimizations to be implemented that are currently impossible or very difficult to achieve working only on the AST. Indeed, most modern compilers do the bulk of their optimization on structures generated from bytecode or some abstract intermediate instruction representation rather than any AST structure.\r\n\r\nMany of the following high-impact optimizations could be implemented:\r\n\r\n* Dead code elimination\r\n* Common subexpression elimination\r\n* Typed arithmetic instructions based on explicit and inferred data type\r\n* Constant folding (Currently this is implemented in the GDScript compiler front end, but it is better to implement in the second pass)\r\n* Loop induction variable analysis\r\n* Loop invariant code motion/hoisting\r\n* Loop unrolling\r\n* Jump threading\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe proposal requires the GDScript compiler to support an arbitrary number of passes to be applied to the GDScript bytecode. Each pass would receive the metadata and bytecode generated by the previous step, then apply some transformation to the bytecode and/or metadata. The results of that pass would then be fed to the next pass, or in the case that it is the final pass in the set of passes, the results would be the final results fed to the GDScript execution engine. This is a common design pattern found in most modern compilers.\r\n\r\nI have begun to implement a sample implementation of these proposed changes from the 3.X branch of Godot, but stopped when I learned that GDScript was being rewritten.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis could not be worked around with script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis must be implemented as a part of the GDScript module.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1176/reactions",
      "total_count": 16,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 1,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1175",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1175/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1175/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1175/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1175",
    "id": 653482261,
    "node_id": "MDU6SXNzdWU2NTM0ODIyNjE=",
    "number": 1175,
    "title": "Option to disable the Boot Splash on specific platforms",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-08T17:45:42Z",
    "updated_at": "2020-09-18T21:53:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\niOS app\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor iOS apps a launch screen is already displayed before launching the app. Having Godot's splash screen display after is not really needed, and is actually quite difficult to work with.\r\n\r\nCurrently there are 3 options (and I don't really like any of them):\r\n\r\n1. Set an empty Godot splash image. This was a suggestion in a [previous issue](https://github.com/godotengine/godot/issues/17427), but doesn't really solve the boot problem. You just end up with a a period of nothing displaying on the screen where the second splash would have been (i.e. it goes launch image -> black splash -> game proper).\r\n2. Use matching Godot splash and Launch Images, to make it seem like there is only 1 splash screen. This is super fiddly to do in practice, as the position and scale of the Godot splash will depend on device resolution. I ended up taking screenshots of each boot and then setting those as the launch image for each platform. It's time consuming and fiddly.\r\n3. Have 2 splash screens (maybe a company logo, then a game splash). I think forcing 2 splash screen isn't great.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option to just disable the Godot boot screen for certain platforms would be useful. Alternatively just disable the boot screen automatically for iOS. I think iOS is the only platform that uses different launch screens anyway.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCannot be worked around. App boot is outside developer control when writing Godot games.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\niOS support is already core and this functionality likely makes sense for the majority of iOS apps.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1175/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1173",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1173/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1173/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1173/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1173",
    "id": 653322466,
    "node_id": "MDU6SXNzdWU2NTMzMjI0NjY=",
    "number": 1173,
    "title": "2D DirectionalLight Node for Godot",
    "user": {
      "login": "sian2005",
      "id": 62208362,
      "node_id": "MDQ6VXNlcjYyMjA4MzYy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/62208362?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sian2005",
      "html_url": "https://github.com/sian2005",
      "followers_url": "https://api.github.com/users/sian2005/followers",
      "following_url": "https://api.github.com/users/sian2005/following{/other_user}",
      "gists_url": "https://api.github.com/users/sian2005/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sian2005/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sian2005/subscriptions",
      "organizations_url": "https://api.github.com/users/sian2005/orgs",
      "repos_url": "https://api.github.com/users/sian2005/repos",
      "events_url": "https://api.github.com/users/sian2005/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sian2005/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-08T13:59:48Z",
    "updated_at": "2020-07-12T15:08:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI am working on a 2D, Terraria-like Game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI want to have perpendicular shadows from the tiles downwards, like a sun, With a normal Light 2D, this is not possible due to the shadows coming from one point, Yeah, the light from the sun in real life is also coming from one point, but then I would have to make the poor Light 2D so large that just a blank scene with that Light 2D will run at less that 1 frames per second.\r\n\r\nA DirectionalLight 2D will solve all of these problems.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWith the feature I can have beautiful, perfect and endless downwards-facing shadows everywhere on the tiles visible to the DirectionalLight 2D. I will no longer need a Light 2D to be a child of my player to get shadows that don't look great when they are moving as you move. If I use multiple light 2D's and turn them on if the player is near them and off as he goes away there will be a snappy line in the border of them, there will be no perfect downfacing shadows as I wanted, it wont be endless vertically as well, I wont be able to rotate it arount the world to create a sunset because you cant make a normal Light 2D endlessly large to accomplish this effect and it won't be completely endless horizontally aswell.\r\n\r\nIt is also mentioned in this post: (https://github.com/godotengine/godot/issues/29994)\r\n\r\nA DirectionalLight 2D will solve all of these problems.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSomething similar to the existing DirectionalLight, but for 2D.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't think it will able to be worked around requiring a few lines of code, and still getting the effect of what a DirectionalLight could be able to accomplish with minimal efforts.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis requires changes to the rendering pipeline which cannot be done via script or addons.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1173/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1172",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1172/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1172/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1172/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1172",
    "id": 653159014,
    "node_id": "MDU6SXNzdWU2NTMxNTkwMTQ=",
    "number": 1172,
    "title": "Follow external links in the script or text editor",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-08T09:56:14Z",
    "updated_at": "2020-07-11T14:50:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWriting GDScript in Godot's script editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOftentimes, I need to document a particular issue directly referencing an external bug report or feature proposal as a comment. The problem is that there's no easy way to follow URL to open them in an external program:\r\n\r\n![godot-cant-click](https://user-images.githubusercontent.com/17108460/86903139-98315580-c117-11ea-9e06-05ac1c72d21e.png)\r\n\r\nThe link is not recognized while hovering on it with <kbd>Ctrl</kbd> pressed, but only individual words.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBasically would be nice to implement this feature similar to how VSCode does it:\r\n\r\n![vscode-follow-link](https://user-images.githubusercontent.com/17108460/86903413-f9f1bf80-c117-11ea-840c-14af0a32cdd8.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI think this could be an inherent feature of the built-in `TextEdit` node.\r\n\r\nThis could also work for any file links (#1168), even launching applications using custom browser protocols directly through script!\r\n\r\nIf you think that this could be used for malicious purposes, we can make it so that the feature can be disabled via editor settings, but I'd expect this to be enabled by default personally.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou currently have to copy and paste the link directly in the browser.\r\n\r\nIt might be possible to make this feature via editor plugin modifying the run-time behavior of the `ScriptEditor` or similar, but the complexity is obviously not worth it.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlready part of core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1172/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1170",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1170/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1170/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1170/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1170",
    "id": 652528018,
    "node_id": "MDU6SXNzdWU2NTI1MjgwMTg=",
    "number": 1170,
    "title": "Option to un-center offset (origin) on collision shape rectangle",
    "user": {
      "login": "pajcek11",
      "id": 67163678,
      "node_id": "MDQ6VXNlcjY3MTYzNjc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/67163678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pajcek11",
      "html_url": "https://github.com/pajcek11",
      "followers_url": "https://api.github.com/users/pajcek11/followers",
      "following_url": "https://api.github.com/users/pajcek11/following{/other_user}",
      "gists_url": "https://api.github.com/users/pajcek11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pajcek11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pajcek11/subscriptions",
      "organizations_url": "https://api.github.com/users/pajcek11/orgs",
      "repos_url": "https://api.github.com/users/pajcek11/repos",
      "events_url": "https://api.github.com/users/pajcek11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pajcek11/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-07-07T18:25:36Z",
    "updated_at": "2020-09-14T21:49:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTrying to have a node with a Sprite and Collision box/shape\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe sprite's \"origin\" can be set to un-centered (top-left) as is the standard in many programs, but the collision shape allows for only the origin being \"centered\", messing everything up because now you can't just overlay the sprite and shape one over the other because they have two completely different origin points. Besides, what happens with pixel-perfection if the sprite has a size not divisible by 2? Where does then the center lie? That's why top-left is standard and superior.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nPut a checkbox for \"centered\" in the collision shape, so people can un-check it just like they can on the sprite\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCollision shape rectangle should have some kind of centered property already, so just making the checkbox should be easy, if I am not wrong.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will most definitely be used often because it is essential and absolutely logical to have\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis should be an easy fix, and a logical addition. The current system is flawed for not having this.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1170/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1169",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1169/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1169/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1169/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1169",
    "id": 652345808,
    "node_id": "MDU6SXNzdWU2NTIzNDU4MDg=",
    "number": 1169,
    "title": "Add a blending layer system",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-07T13:56:38Z",
    "updated_at": "2020-07-12T13:50:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\na Mask.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCan't Substruct the alpha of the box without substructing everything behind it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA Layers system for blending.\r\nYou can chose what sprites that will effect by the blending mode of the sprite/control.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![Annotation 2020-07-07 145433](https://user-images.githubusercontent.com/61591052/86791683-1505f600-c06a-11ea-8241-777a52dd9eac.png)\r\n\r\nI will be something like the Light Mask layers, but rather then effecting the light2D , it effect the blending mode of everything.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo , there is a possiblity that you can make a script that does the job , but it will have to update everyframe , and that's not a good optimization.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSince its going to split group blend modes , it has to be part of the core.\r\n\r\nThanks",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1169/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1168",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1168/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1168/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1168/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1168",
    "id": 651792043,
    "node_id": "MDU6SXNzdWU2NTE3OTIwNDM=",
    "number": 1168,
    "title": "Add support for images in code comments in the script editor",
    "user": {
      "login": "monk-e-boy",
      "id": 17924807,
      "node_id": "MDQ6VXNlcjE3OTI0ODA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17924807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/monk-e-boy",
      "html_url": "https://github.com/monk-e-boy",
      "followers_url": "https://api.github.com/users/monk-e-boy/followers",
      "following_url": "https://api.github.com/users/monk-e-boy/following{/other_user}",
      "gists_url": "https://api.github.com/users/monk-e-boy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/monk-e-boy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/monk-e-boy/subscriptions",
      "organizations_url": "https://api.github.com/users/monk-e-boy/orgs",
      "repos_url": "https://api.github.com/users/monk-e-boy/repos",
      "events_url": "https://api.github.com/users/monk-e-boy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/monk-e-boy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-07-06T20:14:19Z",
    "updated_at": "2020-10-08T19:04:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\nA 3D kite design program\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI forget how some bits of code work, e.g. winding of opengl triangles, an image would help.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nPicture is worth 1,000 comments.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nScreenshot, paste into code. Image is a comment.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nDon't know\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nDon't know",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1168/reactions",
      "total_count": 10,
      "+1": 0,
      "-1": 2,
      "laugh": 1,
      "hooray": 0,
      "confused": 7,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1167",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1167/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1167/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1167/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1167",
    "id": 651779800,
    "node_id": "MDU6SXNzdWU2NTE3Nzk4MDA=",
    "number": 1167,
    "title": "Allow modification of engine's types via scripts on runtime",
    "user": {
      "login": "creikey",
      "id": 28424206,
      "node_id": "MDQ6VXNlcjI4NDI0MjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28424206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/creikey",
      "html_url": "https://github.com/creikey",
      "followers_url": "https://api.github.com/users/creikey/followers",
      "following_url": "https://api.github.com/users/creikey/following{/other_user}",
      "gists_url": "https://api.github.com/users/creikey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/creikey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/creikey/subscriptions",
      "organizations_url": "https://api.github.com/users/creikey/orgs",
      "repos_url": "https://api.github.com/users/creikey/repos",
      "events_url": "https://api.github.com/users/creikey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/creikey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-07-06T19:50:02Z",
    "updated_at": "2020-07-07T10:02:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with a complex GUI.\r\n**Describe the problem or limitation you are having in your project:**\r\nI want a centered pivot for the Control node, that has already been made in a pull request, but will not be merged due to bloat ( a lot of projects do not need it ). \r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy allowing the user to add a function to built in types via script, and sharing them in the asset lib, an ecosystem of basic engine modifications can be made, allowing godot users to access advanced functionality ( a new property in the Control node that you need for your specific game ) without recompiling the engine, and thus requiring deep knowledge about C++ best practices. Allowing the user to extend engine types with scripts would make engine modification more accessible. \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/28424206/86633682-d139c080-bf85-11ea-83ab-966256854207.png)\r\nAs an example, the `set` function in `object.cpp` could be modified as such to support this behavior:\r\n```C++\r\n        String parent_class = get_parent_class_static();\r\n\r\n\twhile(parent_class != \"\") {\r\n\t\tRef<Script> possible_script_override = ClassDB::script_override(parent_class);\r\n\t\tif(possible_script_override.is_valid()) {\r\n\t\t\tpossible_script_override->set(p_name, p_value);\r\n\t\t}\r\n\t\tparent_class = ClassDB::get_parent_class(get_class());\r\n\t}\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPartially, but with more base modifications, it becomes near impossible to add a component to every node that needs this functionality. \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf this functionality was core, *all* modifications that would be bloat if it was in the engine could be run by the user as an addon in the project, allowing for each project to have its own de facto customized engine without recompiling anything.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1167/reactions",
      "total_count": 18,
      "+1": 17,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1166",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1166/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1166/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1166/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1166",
    "id": 651624143,
    "node_id": "MDU6SXNzdWU2NTE2MjQxNDM=",
    "number": 1166,
    "title": "Add a handle to tweak Camera2D's `draw_limits` property",
    "user": {
      "login": "boukew99",
      "id": 49942484,
      "node_id": "MDQ6VXNlcjQ5OTQyNDg0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/49942484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boukew99",
      "html_url": "https://github.com/boukew99",
      "followers_url": "https://api.github.com/users/boukew99/followers",
      "following_url": "https://api.github.com/users/boukew99/following{/other_user}",
      "gists_url": "https://api.github.com/users/boukew99/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boukew99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boukew99/subscriptions",
      "organizations_url": "https://api.github.com/users/boukew99/orgs",
      "repos_url": "https://api.github.com/users/boukew99/repos",
      "events_url": "https://api.github.com/users/boukew99/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boukew99/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-07-06T15:21:12Z",
    "updated_at": "2020-07-08T08:30:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D project with small closed off rooms.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWanted to align limit_left, right, up and down of Camera2D with the walls of the room. I did this by filling in numbers by trial-and-error. This was much slower compared to using a handle in the editor for making a collision shape for example.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd an handle to grab the line with the mouse in the editor just as for some other nodes.\r\n![image](https://user-images.githubusercontent.com/49942484/86609479-45875a80-bfac-11ea-957e-f07491f7c601.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI assume you can reuse the code that is used to create handlebars for CollisionShapes or for Sprite node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is in line with other editor features.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1166/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1165",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1165/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1165/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1165/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1165",
    "id": 651491814,
    "node_id": "MDU6SXNzdWU2NTE0OTE4MTQ=",
    "number": 1165,
    "title": "Allow to export `const` variables in GDScript",
    "user": {
      "login": "patrickelectric",
      "id": 1215497,
      "node_id": "MDQ6VXNlcjEyMTU0OTc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1215497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/patrickelectric",
      "html_url": "https://github.com/patrickelectric",
      "followers_url": "https://api.github.com/users/patrickelectric/followers",
      "following_url": "https://api.github.com/users/patrickelectric/following{/other_user}",
      "gists_url": "https://api.github.com/users/patrickelectric/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patrickelectric/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patrickelectric/subscriptions",
      "organizations_url": "https://api.github.com/users/patrickelectric/orgs",
      "repos_url": "https://api.github.com/users/patrickelectric/repos",
      "events_url": "https://api.github.com/users/patrickelectric/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patrickelectric/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-07-06T12:17:50Z",
    "updated_at": "2021-01-04T20:06:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nAllow usage of the export keyword with const variables.\r\nE.g: `export const fish = \"tainha\"`\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAs good practice immutable variables should be declared as const.\r\nThere is scenarios where the export of const variables are necessary,\r\nlike scripts that define const values that are exported for const mathematical\r\nproperties, dictionaries and etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt allows the usage of const variables with export keyword.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAllows the usage of `export const fish = \"tainha\"`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe variable will be declared as mutable, and this is a bad practice for const variables.\r\n\r\nIn `globals.gd`\r\n`export var fish = \"tainha\"`\r\n\r\nIn a different script, someone crazy can do things like:\r\n\r\n`Globals.fish = \"cardoso\"`\r\n\r\nThe other alternative is to declare the variable with a `get` method without a possible `set`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis need to be done in the gdscript parser.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1165/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1162",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1162/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1162/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1162/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1162",
    "id": 650980104,
    "node_id": "MDU6SXNzdWU2NTA5ODAxMDQ=",
    "number": 1162,
    "title": "Make decals contribute to GI",
    "user": {
      "login": "novemberist",
      "id": 7927471,
      "node_id": "MDQ6VXNlcjc5Mjc0NzE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7927471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/novemberist",
      "html_url": "https://github.com/novemberist",
      "followers_url": "https://api.github.com/users/novemberist/followers",
      "following_url": "https://api.github.com/users/novemberist/following{/other_user}",
      "gists_url": "https://api.github.com/users/novemberist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/novemberist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/novemberist/subscriptions",
      "organizations_url": "https://api.github.com/users/novemberist/orgs",
      "repos_url": "https://api.github.com/users/novemberist/repos",
      "events_url": "https://api.github.com/users/novemberist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/novemberist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-05T01:06:30Z",
    "updated_at": "2020-07-05T14:31:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\na 3d game that makes heavy use of emissive lights and global illumination\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\ndecals that use emissive textures currently don't contribute to global illumination\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nwhen decals with emissive textures are applied to an object that is set to contribute to GI, the decals should too, this would be great for easily placing light panels, neon signs etc.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nunfortunately i don't know the intricacies of the engine code for GI, so I have no solution to offer here\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nit can only be worked around by not using decals as light emitters, if you want them to contribute to GI\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nit's a rendering feature and thus needs changes in the core engine\r\n\r\n*Bugsquad edit: Reopened from https://github.com/godotengine/godot/issues/40125.*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1162/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1159",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1159/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1159/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1159/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1159",
    "id": 650847056,
    "node_id": "MDU6SXNzdWU2NTA4NDcwNTY=",
    "number": 1159,
    "title": "Improving the visual look of visual scripting . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-07-04T07:51:38Z",
    "updated_at": "2020-07-22T02:28:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, atm, 3D, animations made in Blender . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis is sort of a proposal, atm visual script looks a bit basic, it's looking nice but, I wanted to ask, for a later update, if it could get a visual look, more like Blender's shader nodes, which is very streamlined and, geared towards artists, which visual script is also, to an extent, not sure, it says in docs . . As an artist, the ' look ' in Blender's shader nodes, are probably the ideal look, also for visual script . . This is the proposal, make Godot's visual script look more, like Blender, the shader node system, like this . . .\r\n\r\n![2020-07-04 0931](https://user-images.githubusercontent.com/61069740/86507770-343b2400-bddb-11ea-85ea-e917102ff9cb.jpg)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt's just a visual update, we had a discussion on what we wanted, to make visual script nicer, and this was my idea, I know it's simple, but it's so much more readable, what they have, in Blender, it's also open source software . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe image above shows it, the shape of the boxes, except, the lines should be bendy, the idea is, make visual script in Godot look more, like the artist - friendly system, they have in Blender, for shaders . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't know how to change this very quickly, as a solo dev, I don't want to change the engine, to do this . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nWell, I think Godot visual script is amazing, I have already made some simple games in it, I tried Unity some months ago, and I could not make a game, so visual script is amazing, for artists, prototypes . . . But, it looks a bit ' not artist - friendly ', and I personally think Blender has an almost optimal look, also for visual scripting . . Maybe you could think about it, and try to take something from both systems, and make a good ' mixture ', of those two styles, for instance, the boxes are more clearly colored, ie one can easier see what the boxes ' do ', in Blender, than in Godot, it's just for help, assistance . . .\r\n\r\nThx, know this is probably silly, Blender has such a nice LOOK, except for the non-bendy lines, between nodes, maybe Godot could take some of that, and make it more user-friendly, visual script . . .\r\n\r\nBut, keep the bendy lines, or have an option, to have ' straight ' lines, as Blender shaders, or the current bendy ones, as well . . That's, my proposal, I leave it to the engine gods, to decide what's best, I know I'm not good enough, to do that <3 ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1159/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1158",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1158/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1158/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1158/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1158",
    "id": 650743529,
    "node_id": "MDU6SXNzdWU2NTA3NDM1Mjk=",
    "number": 1158,
    "title": "Adding a new animation to an AnimatedSprite node should select the animation's name so it can be edited immediately",
    "user": {
      "login": "RagingFlames",
      "id": 28068199,
      "node_id": "MDQ6VXNlcjI4MDY4MTk5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/28068199?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RagingFlames",
      "html_url": "https://github.com/RagingFlames",
      "followers_url": "https://api.github.com/users/RagingFlames/followers",
      "following_url": "https://api.github.com/users/RagingFlames/following{/other_user}",
      "gists_url": "https://api.github.com/users/RagingFlames/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RagingFlames/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RagingFlames/subscriptions",
      "organizations_url": "https://api.github.com/users/RagingFlames/orgs",
      "repos_url": "https://api.github.com/users/RagingFlames/repos",
      "events_url": "https://api.github.com/users/RagingFlames/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RagingFlames/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-03T19:38:22Z",
    "updated_at": "2020-08-05T15:13:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am trying to learn how to make games.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere is not problem\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf you follow the steps in the \"Your first game\" tutorial from the Godot docs, at one point you have to add animations to the AnimatedSprite node. To do this you open up that panel and click the \"new animation\" button on the left. This creates an empty animation with a temporary name, and the first thing that I always have to do is change the name of this animation group. I thin it would e a nice quality of life change if this animations name was already selected by default when it is created, that way I can push the \"new animation\" button, then immediately type the name I want and push enter.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI'm not technically qualified to do this most likely. I imagine when someone clicks \"new animation\" you would have the name of the animation be highlighted by default so the user can just type something to overwrite it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI feel like everyone would enjoy this, but maybe not. I imagine it would be easy to turn off.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis should definitely be core, and also be a feature for when you create any new object, not just animations.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1157",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1157/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1157/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1157/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1157",
    "id": 650701937,
    "node_id": "MDU6SXNzdWU2NTA3MDE5Mzc=",
    "number": 1157,
    "title": "Refactor collision shape editor to a common code base",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-07-03T17:12:38Z",
    "updated_at": "2020-11-25T17:54:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine C++ Extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nImpossible to edit `Shape2D` resources outside `CollisionShape2D` nodes, which also provides the editor plugin for modifying the shapes via editor handles.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCreate `AbstractShape2DEditor` and `AbstractShape2DEditorPlugin`. That way, it would be fairly easy for plugin and module writers to come up and combine different implementation for shape editing. I personally would find this useful in GoostGD/goost#2 for creating `VisualShape2D` to debug and visualize individual collision shapes without having to create sprites etc, see: #1126.\r\n\r\nAs of now, I've currently managed to implement a dedicated editor for modifying polygon-based shapes (`ConvexPolygonShape2D`, `ConcavePolygonShape2D`) in `VisualShape2D` by inheriting `AbstractPolygon2DEditor` currently implemented in Godot without issues at all: godotengine/godot#11019. On a side note, it's currently not possible to do this in Godot, and it won't be possible to do due to resolution of godotengine/godot#21394. But for visualizing purposes (other than physics), it's a perfectly acceptable use case.\r\n\r\nThe problem is that, while I've managed to implement polygon editing, I'm left with no straightforward tools to actually implement other shape editing as implemented in `CollisionShape2DEditor`. While you can still edit a shape via the inspector, it's obviously not as intuitive as doing it via editor handles.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically very similar to godotengine/godot#11019 but to operate on `Shape2D` resources.\r\n\r\n![Annotation 2020-07-03 204730](https://user-images.githubusercontent.com/17108460/86489976-9873ce80-bd6e-11ea-9d26-0abe9af8a505.png)\r\n\r\nThe left capsule shape is edited through `CollisionShape2D`, and on the right that's `VisualShape2D` (see no handles). The task is to make it work for both nodes, and any other nodes which can be implemented in the future (either in Godot directly or other community-driven modules).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's perfectly possible to copy-paste the code needed to make this happen in C++ modules for other nodes, but that would mean bloating the module, and the possible bug fixes and features would have to be synchronized between Godot and Goost codebases manually.\r\n\r\nTo summarize the current hurdles:\r\n\r\n1. Edit the shapes via `CollisionShape2D`.\r\n2. Save the edited resource.\r\n3. Drag-n-drop the resource to `VisualShape2D`.\r\n\r\nvs\r\n\r\n1. Edit the shapes via `VisualShape2D`.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's already part of core. No GDScript need to be exposed to users, and no API changes.\r\n\r\nI can implement this myself.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1157/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1156",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1156/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1156/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1156/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1156",
    "id": 650673537,
    "node_id": "MDU6SXNzdWU2NTA2NzM1Mzc=",
    "number": 1156,
    "title": "Don't put Android keystore properties in `export_presets.cfg`",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-07-03T15:54:01Z",
    "updated_at": "2020-09-18T21:19:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I had a feeling I've come across this before, but I couldn't find any proposals....\r\n\r\n**Describe the project you are working on:**\r\nMobile game (Android)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot stores export settings including which resources to bundle, app icons, export capabilities in the `export_presets.cfg`. These settings are a core part of development, and we normally want to include these in source control. Unfortunately Godot also stores the keystore credentials in the same export file. This means we either have to commit credentials to our repo, or we have to manually recreate the presets between developers, and somehow sync changes. Both are really bad options.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be better to have keystore credentials in their own config file alongside `exports_presets.cfg`. Something like `exports_credentials.cfg` or similar. This file could then be local to each developer and not need committing. It also makes it much easier to apply specific keys for CI/CD if being used.\r\n\r\nAnother alternative would be to allow any properties of `exports_presets.cfg` to be overriden locally, such as a `exports_presets.local` file with the same format as the presets file. This might be more appropriate if further settings plan to be stored in the presets file too - paths would be a reasonable use case here as they can often be machine specific.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't think of a nice way around it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAndroid exporting is a core feature of Godot. Anyone exporting to android with a team of more than 1 will end up hitting this issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
