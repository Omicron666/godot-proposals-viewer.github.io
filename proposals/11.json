[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/719",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/719/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/719/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/719/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/719",
    "id": 601093256,
    "node_id": "MDU6SXNzdWU2MDEwOTMyNTY=",
    "number": 719,
    "title": "Move String case conversion methods to core (snake_case, PascalCase, camelCase etc)",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-16T14:15:31Z",
    "updated_at": "2020-10-07T07:36:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWorking on code generators, bindings generators, template engines, and transpilers for Godot Engine.\r\nSee my [gdgen](https://github.com/Xrayez/gdgen) python package for instance.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGDScript and core API is written in `snake_case`. This presents a problem for languages which use either `PascalCase` or `camelCase` conventions, so the entire API needs to be converted (see mono, gdnative/pluginscript modules).\r\n\r\nAlso when working on a GDScript-to-C++ transpiler I immediately stumbled upon an issue with having to convert \"unnamed\" classes (without `class_name`), so GDScript's file basename which can be written in the `snake_case.gd` needs to be converted to `PascalCase` for C++ classes. There are many other use cases ofcourse. Background: #565, #119.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd like to see at least the following methods to be added to the `String` class:\r\n* snake_to_camel_case\r\n* snake_to_pascal_case\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSome methods are [already implemented](https://github.com/godotengine/godot/blob/27ddb27da8a78b21a83ee7ee049fe92d32c66727/modules/mono/editor/bindings_generator.cpp#L117-L183) as used by `mono` module, it's a matter of moving them to the `String` class. Preserves names prefixed with/without an underscore, useful for determining private/public access specifiers implicitly. Related: #641.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot a few lines. It's a matter of copy-and-pasting existing implementations if talking about C++ specifically, but additional work is required to port this to GDScript. But mostly, these are not even necessary to expose, it would be enough that those methods can be simply moved to core without exposing them to scripting if they are too specific for most users.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI personally expect this to be present on the core level, yet again it's not necessary for those methods to be exposed to scripting in the first place.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/719/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/717",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/717/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/717/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/717/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/717",
    "id": 601012306,
    "node_id": "MDU6SXNzdWU2MDEwMTIzMDY=",
    "number": 717,
    "title": "Add 'has_property()' and 'has_constant()' to Object class",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-16T12:33:33Z",
    "updated_at": "2020-04-19T14:38:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot tutorial (N/A)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe `Object` class has no function to check for the existence of constants or properties (variables) in an object.\r\n`has_method()` already exists, so `has_property()` and `has_constant()` should be added.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs mentioned by RabbitB in the comments, the `Script` class already has functions for this.\r\nTherefore, the new functions added to the `Object` class could simply make calls to the already implemented functions in the `Script` class.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc has_property(name: String) -> bool:\r\n\tvar my_script: Script = get_script() as Script\r\n\treturn my_script.get_script_property_list().has(name) if my_script else false\r\n\r\nfunc has_constant(name: String) -> bool:\r\n\tvar my_script: Script = get_script() as Script\r\n\treturn my_script.get_script_constant_map().keys().has(name) if my_script else false\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it would be used often, but you **_could_** put these in a singleton with an additional `object` parameter.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThese would be a very useful to have built-in, for the same reason that `has_method()` is useful.\r\nThe user would expect something like `has_property()` since `has_method()` already exists.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/717/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/716",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/716/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/716/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/716/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/716",
    "id": 600614695,
    "node_id": "MDU6SXNzdWU2MDA2MTQ2OTU=",
    "number": 716,
    "title": "Draw Gizmos Icons always on top",
    "user": {
      "login": "Janders1800",
      "id": 27329423,
      "node_id": "MDQ6VXNlcjI3MzI5NDIz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/27329423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Janders1800",
      "html_url": "https://github.com/Janders1800",
      "followers_url": "https://api.github.com/users/Janders1800/followers",
      "following_url": "https://api.github.com/users/Janders1800/following{/other_user}",
      "gists_url": "https://api.github.com/users/Janders1800/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Janders1800/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Janders1800/subscriptions",
      "organizations_url": "https://api.github.com/users/Janders1800/orgs",
      "repos_url": "https://api.github.com/users/Janders1800/repos",
      "events_url": "https://api.github.com/users/Janders1800/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Janders1800/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-15T22:02:29Z",
    "updated_at": "2020-06-08T12:28:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAdventure/puzzle mobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn complex scenes is very hard to have a overview on what's in the scene.\r\n![Captura de pantalla de 2020-04-15 23-24-12](https://user-images.githubusercontent.com/27329423/79390814-b2242780-7f70-11ea-8cee-54626d1eb6d0.png)\r\nAs you can see the particle gizmo is obstructed by its own geometry. And if some geometry gets in front of the camera then you quickly lose track of how your scene is structured.\r\n![Captura de pantalla de 2020-04-15 23-24-19](https://user-images.githubusercontent.com/27329423/79391037-12b36480-7f71-11ea-9707-fac0ec9b7d85.png)\r\nSometimes you cant even select a gizmo related node without moving the camera to a specific angle.\r\n![Captura de pantalla de 2020-04-15 23-16-27](https://user-images.githubusercontent.com/27329423/79391190-602fd180-7f71-11ea-9533-792782b36fb9.png)\r\nThose are simple examples, but things can get very ugly, very quickly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDrawing gizmos on top of normal geometry will allow for better overview of the scene composition. Note this is only needed for icon gizmos, other gizmos like boundaries, navmeshes, etc. should be as they are now.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis is a two way proposal:\r\n- Gizmos Icons will be drawn always on top.\r\n- Gizmos Icons will fade by distance. Maybe configurable on the Perspective menu or in Editor Settings.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMaybe it can be done with a plugin substituting all the gizmos materials, but not in a \"few lines of script\" that's for sure.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGizmos Icons are one of the first sources of information users have access to, I think getting them right is important for ease of use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/716/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/715",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/715/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/715/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/715/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/715",
    "id": 600565985,
    "node_id": "MDU6SXNzdWU2MDA1NjU5ODU=",
    "number": 715,
    "title": "Add IES light profile import for realistic light projectors",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-15T20:24:42Z",
    "updated_at": "2020-06-29T14:34:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot related to my project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLights in Godot Engine are clunky and look the same.\r\n\r\nThere are existing IES profiles that give varied and exciting light types.\r\n\r\nhttps://www.cgarena.com/freestuff/tutorials/max/ieslights/\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would make artwork and level design improved if IES light profiles can be imported directly.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. Read IES profile\r\n2. Generate a format the light projector feature can use\r\n3. Import the format as a light projector\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, the convenience of dragging a profile to be a light projector is the feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIn theory this can be a gdnative plugin, but ies profiles are an important visual tool in lighting a scene.\r\n\r\n**Other**\r\n\r\nI am not working on IES lights import, feel free to take on the task.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/715/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/714",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/714/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/714/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/714/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/714",
    "id": 600557839,
    "node_id": "MDU6SXNzdWU2MDA1NTc4Mzk=",
    "number": 714,
    "title": "Import MaterialX for procedural materials",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-15T20:09:16Z",
    "updated_at": "2020-04-28T17:21:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNot for my project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n@StraToN asked if there were plans to support Material Definition Language at some point for importing shaders (https://docs.substance3d.com/sddoc/mdl-material-definition-language-145653991.html)\r\n\r\nMDL (Nvidia), Arnold(Autodesk), Open Shader Language(Sony?) and Principled BSDF (Blender Foundation) make bad candidates for use as a material library. MDL is not vendor neutral. Arnold is proprietary. OSL is not an interactive format. Principled BSDF is not exportable outside of Blender.\r\n\r\nMaterialX avoids those problems. https://www.materialx.org/Specification.html\r\n\r\nInstead of using texture sheets, we can trade runtime performance for procedural material definitions. The procedural materials can also be baked.\r\n\r\nExisting proprietary tooling can be used for material artists to create a catalog of opensource materials. https://share.substance3d.com/libraries/6111\r\n\r\nBlender can be convinced to make a MaterialX exporter.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWrite a MaterialX to glsl rendering importer.\r\n\r\nNotes: https://github.com/materialx/MaterialX/blob/master/documents/DeveloperGuide/ShaderGeneration.md\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Import the MaterialX shader generator\r\n2. Investigate the shadergen to glsl code.\r\n3. Convert shadergen to Godot Shader\r\n3. Associate dependent resources\r\n3. Output Godot Engine shader as an imported shader or texture (procedurally baked) or baked at runtime in a loading stage\r\n\r\nThis is a picture of a green base color in Substance Designer opened in the MaterialX viewer.\r\n\r\n![Screen Shot 2020-04-15 at 12 06 04 PM](https://user-images.githubusercontent.com/32321/79383486-18ca2680-7f1a-11ea-84cc-76813e59bc45.png)\r\n\r\nThis is a picture of Godot icon image as a resource in Substance Designer opened in the MaterialX viewer.\r\n\r\n![Screen Shot 2020-04-15 at 12 24 56 PM](https://user-images.githubusercontent.com/32321/79383494-1b2c8080-7f1a-11ea-88d6-7aa26fbd355e.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nGenerating shader graphs is non-trivial. Both ux and rendering materials require work.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI think this can be a GDNative addon in theory. MaterialX is a native code library. Wanted to post the proposal here for review.\r\n\r\n**Other**\r\n\r\nI am not working on Import MaterialX for procedural materials, feel free to take on the task.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/714/reactions",
      "total_count": 11,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/712",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/712/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/712/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/712/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/712",
    "id": 600494253,
    "node_id": "MDU6SXNzdWU2MDA0OTQyNTM=",
    "number": 712,
    "title": "Add a built-in script editor and autocompletion for C#",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-04-15T18:14:22Z",
    "updated_at": "2020-11-27T08:10:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't like working in GDscript because it isn't statically typed and I don't like python syntax\r\nhowever I don't like the fact that gdscript is supported in the built in editor and mono isn't\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest when the mono script implementation is out of alpha and supports all the functionality that GDscript does, official support is added for it in the godot script editor.\r\n\r\nI would like to see the following support for mono\r\n- syntax highlighting like GDscript has\r\n- auto complete like GDscript has\r\n- linting like GDScript has\r\n- auto compile on save\r\n\r\nI would guess reflection can be used for most of this to make it pretty strait forward,\r\nbut this would allow users to not have to tab out to, code and then compile then tab back into the godot editor.\r\n\r\nthis speeds up workflow by at least 25% for mono users\r\n\r\ncompiling could even be done asynchronously to avoid locking up the godot editor \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't have any mockups but basically it would work the same way other fully supported Godot languages do.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used alot by mono developers and although it can be worked it would take alot more then a few lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nwhile this doesn't have to be added in the core it could be added in the same plugin as the mono support.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/712/reactions",
      "total_count": 7,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/710",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/710/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/710/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/710/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/710",
    "id": 599886343,
    "node_id": "MDU6SXNzdWU1OTk4ODYzNDM=",
    "number": 710,
    "title": "Add ShapeCast node for collision sweep and immediate overlap queries",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-14T22:02:20Z",
    "updated_at": "2021-01-08T18:34:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Aims to supercede #72, #709.\r\nHelps #740.\r\n\r\n**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine C++ Extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRay casting is not as flexible or robust when it comes to detecting collision bodies along the ray cast area/volume (can easily miss objects, for example beam weapons which has a notion of width of a beam, which raycast doesn't have). For that one needs to cast multiple ray cast in the same direction, which is a hacky thing to do.\r\n\r\nIt's also difficult to get collision overlaps with `Area2D/3D` and often requires waiting a couple of frames before collision information is available to these nodes, when immediate information is preferable. One can use signals for that, but that mostly leads to inconveniences because you have to ensure that no duplicate bodies is detected within the signal callback, and you need to collect a list of overlapped bodies manually. Using the low-level direct space state API is the only way to fetch immediate overlap information which is robust (with or without shape sweep test), but again it's quite cumbersome to use for most users.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCreating `ShapeCast2D` and `ShapeCast3D` analogously to `RayCast2D` and `RayCast3D` nodes. Ability to assign any existing `Shape2D` or `Shape3D` is enough for this to overcome limitations of ray casting.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI've managed to implement this via C++ modules in [Goost](https://github.com/goostengine/goost), and replaced some GDScript classes already with it in my own projects.\r\n\r\n### Editor view\r\n\r\n![godot-shape-cast-2d](https://user-images.githubusercontent.com/17108460/74788952-e4d8d900-52bb-11ea-908e-a8e3b8215384.png)\r\n\r\n### Inspector\r\n\r\n![godot-shape-cast-2d-inspector](https://user-images.githubusercontent.com/17108460/74788955-e73b3300-52bb-11ea-804a-9fdc66aedcef.png)\r\n\r\n### API\r\n\r\n![godot-shape-cast-2d-api](https://user-images.githubusercontent.com/17108460/74788859-9a575c80-52bb-11ea-85a8-5c5479c9af06.png)\r\n\r\nThe implementation is based on `RayCast2D` (copy-pasted and adapted), uses `PhysicsDirectSpaceState.cast_motion` along with `PhysicsDirectSpaceState.get_rest_info` internally, so in most cases it reflects `RayCast2D` API, with the following differences:\r\n\r\n* obviously you need to assign any `Shape2D` resource before using. For 2D, `CircleShape2D` is instantiated by default.\r\n* ability to configure collision `margin` for shapes.\r\n* casting can work with `cast_to == Vector2()`. In this case, such node can be used as a general-purpose, (continuous) collision detection area which can overcome limitations of `Area2D`. Immediate information can be forced with `force_shapecast_update`. Quite similar to [PhysX Overlaps](https://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/guide/Manual/SceneQueries.html#overlaps). Can also help workaround CCD issues: godotengine/godot#9071.\r\n* can return multiple results (the number of results is limited by `max_results` property for performance reasons). `get_closest_*` methods should be used instead if you come from `RayCast2D`. See also [PhysX closest hit](https://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/guide/Manual/SceneQueries.html#closest-hit).\r\n* exposed `collision_result` as a property so that if there's a need to fetch more collision information not provided by the API by default (collider's `linear_velocity`, `metadata` etc).\r\n* `get_closest_collision_safe/unsafe_distance` used for querying the intersections exactly outside/inside collision. You can move the shapecast along safe distance to repeat the process from that point without the node being stuck inside the collider, for instance.\r\n* the `ShapeCast` node's own transform can be modified to alter the shape in any way by translating, rotating and scaling.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCannot be worked around with a *few lines* of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere's no particular reason why this should be part of the core. This can be implemented via plugin/module. Performance is the only reason why this might be needed for core. Some engines like Unity already provide similar functionality though, also the mentioned PhysX library.\r\n\r\nIn fact, given the same logic, the existing `RayCast` nodes *can* also be re-implemented via script.\r\n\r\nIf you think it's worth adding an entire `ShapeCast2D/3D` to Godot core and you feel like the described implementation is logical/fits the requirements, I can make a PR, but additional work is needed to port this to 3D.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/710/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/705",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/705/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/705/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/705/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/705",
    "id": 599310996,
    "node_id": "MDU6SXNzdWU1OTkzMTA5OTY=",
    "number": 705,
    "title": "A better toon shader . . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-14T05:40:56Z",
    "updated_at": "2020-04-14T15:34:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTrying to make a little game, for a jam, for fun . . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe toon shader can use a method, where one uses the ' grow ' parameter, but it pushes the faces out, without connecting them . . . Instead of just pushing the planes out, could one push the vertixes out, along their normal, and then connect the planes, instead . . . It would give a nicer effect, anyway a suggestion . . Alternatively, add a ' scale ' function under ' grow ', so one could scale the ' grow ' faces, as well . . I am a beginner, and I can't code all this stuff, right now . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWell, it would make toon shaders, with a ' grow ' outline look a lot nicer, for beginners . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere's how it looks right now, when you use ' grow ' . . Could one add an extra feature, so it didn't push the ' faces ' out, but the vertices, and then connected them, with shader planes or, so, is it super-tough code . . .\r\n\r\n![2020-04-14 0619](https://user-images.githubusercontent.com/61069740/79189838-16d16c00-7e23-11ea-97cf-e22fce74ec50.jpg)\r\n\r\n![2020-04-14 0648](https://user-images.githubusercontent.com/61069740/79189846-19cc5c80-7e23-11ea-9a79-111632293c7c.jpg)\r\n\r\nThe problem is, when the ' grow ' faces are rendered in ' front ' cull mode, there are these gaps, wish there was a function to grow the vertices, instead of the planes, very simple . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I know of, not really . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it would give a nicer cartoon effect, for most users . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/704",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/704/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/704/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/704/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/704",
    "id": 598588663,
    "node_id": "MDU6SXNzdWU1OTg1ODg2NjM=",
    "number": 704,
    "title": "Name node while in \"Create New Node\" dialog",
    "user": {
      "login": "robertlugg",
      "id": 6054540,
      "node_id": "MDQ6VXNlcjYwNTQ1NDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6054540?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robertlugg",
      "html_url": "https://github.com/robertlugg",
      "followers_url": "https://api.github.com/users/robertlugg/followers",
      "following_url": "https://api.github.com/users/robertlugg/following{/other_user}",
      "gists_url": "https://api.github.com/users/robertlugg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robertlugg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robertlugg/subscriptions",
      "organizations_url": "https://api.github.com/users/robertlugg/orgs",
      "repos_url": "https://api.github.com/users/robertlugg/repos",
      "events_url": "https://api.github.com/users/robertlugg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robertlugg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-12T22:50:18Z",
    "updated_at": "2020-04-15T14:39:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nRunning tutorials (dodge the Creeps)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nInstantiating and naming new nodes requires two steps.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn the \"Create New Node\" dialog, add an additional textbox that shows the name that will be given as well as allow you to change it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI thought about this because of the way when you create events, you can name the function that receives it in that same dialog\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEase of use minor enhancement\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nFundamental operation (creation of node in scene.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/704/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/702",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/702/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/702/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/702/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/702",
    "id": 598495357,
    "node_id": "MDU6SXNzdWU1OTg0OTUzNTc=",
    "number": 702,
    "title": "Add Node to signal \"Extra call argument\" GUI",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-12T14:19:06Z",
    "updated_at": "2020-04-12T18:10:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking on a project with many control nodes including a good amount of buttons.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHaving to connect each and every button that requires a node argument via code is a bit tedious.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding a node option to the signal \"Extra Call Argument\" gui would help clean up some code by making it GUI based. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would just be another option added to the Extra call arguments GUI that allows you to select a node to connect to a function. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, but since every other extra call argument is already apart of the list, I feel as if this one should be added too for parity.\r\n![pic](https://user-images.githubusercontent.com/63408037/79070962-8c5fff80-7c9e-11ea-88de-d2b78a628ca3.JPG)\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs mentioned above, every other argument is already added to the list in core. There would be no reason for 1 argument to be an entire addon. \r\n\r\nThis is related to: https://github.com/godotengine/godot/issues/8557\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/702/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/701",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/701/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/701/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/701/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/701",
    "id": 598422780,
    "node_id": "MDU6SXNzdWU1OTg0MjI3ODA=",
    "number": 701,
    "title": "Handle infinite while-loop with error message",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-12T06:38:32Z",
    "updated_at": "2020-04-12T15:34:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot tutorial\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf the user accidentally creates an infinite while-loop, the running scene window will become unresponsive.\r\nNo error message will be generated, so there will be no indication of what caused the problem.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere could be a global `while_loop_iteration_counter` variable which is increased by 1 during each while-loop iteration.\r\n\r\nIf `while_loop_iteration_counter` ever exceeds another global variable, `while_loop_iteration_limit`, Godot should throw an error and force the running scene to stop instead of letting it freeze.\r\n\r\nIf `while_loop_iteration_limit` is a large number like 1,000, it will detect accidental infinite loops.\r\nHowever, the user should be able to set the `while_loop_iteration_limit` in the Project Settings, in case they need a while-loop that has more than 1,000 iterations.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nvar while_loop_iteration_counter := 0\r\nvar while_loop_iteration_limit := 1000\r\n\r\nvar test_condition := true\r\n\r\n\r\nfunc _ready():\r\n\twhile (test_condition == true):\r\n\t\t\"< do something >\"\r\n\t\tincrement_while_loop_iteration_counter()\r\n\treset_while_loop_iteration_counter()\r\n\r\n\r\nfunc increment_while_loop_iteration_counter():\r\n\twhile_loop_iteration_counter += 1\r\n\tif while_loop_iteration_counter > while_loop_iteration_limit:\r\n\t\tpush_error(\"Exceeded while-loop iteration limit.\")\r\n\t\tassert(while_loop_iteration_counter < while_loop_iteration_limit)\r\n\r\n\r\nfunc reset_while_loop_iteration_counter():\r\n\twhile_loop_iteration_counter = 0\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used every time a while-loop is used.\r\nThis **_could_** be done manually, using code like I provided above, but this would be tedious to have to do (and easy to forget to do) every time the user wants to use a while-loop.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe user shouldn't have to download an add-on for a safety feature like this.\r\nIt should be built-in, like being able to set the limit of characters per second that can be printed to the console output. (_Project Settings/Network/Limits/Max Chars Per Second_)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/701/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/699",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/699/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/699/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/699/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/699",
    "id": 598368015,
    "node_id": "MDU6SXNzdWU1OTgzNjgwMTU=",
    "number": 699,
    "title": "Obey \".hidden\" on GTK-based desktops",
    "user": {
      "login": "mazen-mardini",
      "id": 4961420,
      "node_id": "MDQ6VXNlcjQ5NjE0MjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4961420?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mazen-mardini",
      "html_url": "https://github.com/mazen-mardini",
      "followers_url": "https://api.github.com/users/mazen-mardini/followers",
      "following_url": "https://api.github.com/users/mazen-mardini/following{/other_user}",
      "gists_url": "https://api.github.com/users/mazen-mardini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mazen-mardini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mazen-mardini/subscriptions",
      "organizations_url": "https://api.github.com/users/mazen-mardini/orgs",
      "repos_url": "https://api.github.com/users/mazen-mardini/repos",
      "events_url": "https://api.github.com/users/mazen-mardini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mazen-mardini/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318904,
        "node_id": "MDU6TGFiZWwyMzU5MzE4OTA0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:linuxbsd",
        "name": "platform:linuxbsd",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-11T22:59:36Z",
    "updated_at": "2020-09-18T22:04:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFile dialogs do not obey \".hidden\" and therefore show hidden files and clutter the file view a little. \"Toggle the visibility of hidden files\" is turned off.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe solution is to read \".hidden\", which contains a list of basenames of inodes in the same folder, and exclude those inodes from the file view.\r\n\r\nThe structure of \".hidden\":\r\n- Contains only basenames.\r\n- Every basename occupies one line.\r\n- The basenames are relative to the folder \".hidden\" is in.\r\n- No wildcards. All baseames are explicit.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPseudo-code:\r\n```\r\ncurrent_directory = ... #Current directory of the file dialog\r\ndot_hidden = open(current_directory / \".hidden\").readlines()\r\ndirectory_inodes = []\r\n\r\nfor inode in current_directory:\r\n    if inode.basename.startswith(\".\") or inode.basename in dot_hidden:\r\n        continue\r\n\r\n    directory_inodes.append(inode)\r\n\r\nfile_view.model.load(directory_inodes)\r\n```\r\n\r\nOr maybe use glib. Check out the implementation: https://gitlab.gnome.org/GNOME/glib/commit/510ba9b4efe1813e24c6dfa7405c3547bf9efdd7\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure about this one.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a very small improvement to a very central component in Godot's GUI, it would therefore be more appropriate for it to be a part of the core application rather than being an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/698",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/698/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/698/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/698/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/698",
    "id": 598347925,
    "node_id": "MDU6SXNzdWU1OTgzNDc5MjU=",
    "number": 698,
    "title": "Allow stricter base types when extending a script",
    "user": {
      "login": "Dragoncraft89",
      "id": 11162205,
      "node_id": "MDQ6VXNlcjExMTYyMjA1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11162205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dragoncraft89",
      "html_url": "https://github.com/Dragoncraft89",
      "followers_url": "https://api.github.com/users/Dragoncraft89/followers",
      "following_url": "https://api.github.com/users/Dragoncraft89/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dragoncraft89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dragoncraft89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dragoncraft89/subscriptions",
      "organizations_url": "https://api.github.com/users/Dragoncraft89/orgs",
      "repos_url": "https://api.github.com/users/Dragoncraft89/repos",
      "events_url": "https://api.github.com/users/Dragoncraft89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dragoncraft89/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-11T20:46:04Z",
    "updated_at": "2020-11-06T19:08:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Mario party clone, with plugin support\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd like to add an interface for plugins. To make this pleasant for plugin authors, I'd like to create a script that exposes a bunch of properties, which can then be extended to implement the plugin logic.\r\n\r\nThe problem is, that when inheriting from a script, the extended class is being determined by the script you're inheriting from. Therefore you can't restrict the type the script needs, to get access to specific properties.\r\n\r\nFor example if the base script extends from `Node`, then it can be used by any type that derives from Node, which is what I want.\r\nBut any script that extends this base script will be limited to the functionality of `Node`, even if the Node it is attached to is, e.g. a `Spatial`.\r\n\r\nOf course, I can let the base script extend from `Spatial`, which will give all scripts that extend from this the ability to use methods from `Spatial`, but limits what node types the script can be attached to, even though the base script doesn't need that specific node type.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLet scripts specify both a node type and a script to inherit from.\r\n\r\nSo I could define the node agnostic properties in the base script and specify the needed type in the extended script.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nOne could allow multiple uses of `extends` at the top of the script file, e.g.\r\n\r\na.gd:\r\n```gd\r\nextends Node\r\n\r\nfunc _ready():\r\n    print(\"do stuff...\")\r\n```\r\nb.gd:\r\n```gd\r\nextends \"res://a.gd\"\r\nextends Spatial\r\n\r\nfunc _ready():\r\n    self.translation = Vector3(0, 1, 0) # Here we can use properties of Spatial and are not limited to Node by a.gd\r\n```\r\nBut because having multiple `extends` keywords in a single file may be confusing, a better option would be to deprecate \"extends\" for built in types and replace it with a `base_class` keyword.\r\n\r\nSo that it can be written like this:\r\n\r\na.gd:\r\n```gd\r\nbase_class Node\r\n\r\nfunc _ready():\r\n    print(\"do stuff...\")\r\n```\r\nb.gd:\r\n```gd\r\nextends \"res://a.gd\"\r\nbase_class Spatial\r\n\r\nfunc _ready():\r\n    self.translation = Vector3(0, 1, 0)\r\n```\r\n\r\nIf a script does not specify a `base_class`, then it will automatically inherit the `base_class` of the script you're extending.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt *can* be worked around by adding a node of the specific type below and attaching the script on that one, but it's not really a comfortable way of doing things\r\n\r\nAnother way would be to outsmart the type system:\r\n```gd\r\nvar body = self\r\nbody.some_func_on_body()\r\n```\r\nBut this is confusing to read and does not benefit from type checks\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a gdscript language feature and therefore can't be made into an add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/697",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/697/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/697/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/697/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/697",
    "id": 598230598,
    "node_id": "MDU6SXNzdWU1OTgyMzA1OTg=",
    "number": 697,
    "title": "Add a method to get the error message obtained when setting incorrect shader code",
    "user": {
      "login": "RodZill4",
      "id": 6957908,
      "node_id": "MDQ6VXNlcjY5NTc5MDg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6957908?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RodZill4",
      "html_url": "https://github.com/RodZill4",
      "followers_url": "https://api.github.com/users/RodZill4/followers",
      "following_url": "https://api.github.com/users/RodZill4/following{/other_user}",
      "gists_url": "https://api.github.com/users/RodZill4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RodZill4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RodZill4/subscriptions",
      "organizations_url": "https://api.github.com/users/RodZill4/orgs",
      "repos_url": "https://api.github.com/users/RodZill4/repos",
      "events_url": "https://api.github.com/users/RodZill4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RodZill4/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-11T09:38:18Z",
    "updated_at": "2020-04-11T10:54:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMy project is Material Maker, a PBR material authoring tool that relies on generated shaders to output textures. Shaders are generated from interconnected nodes, and new (shader-based) nodes can be created.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI didn't find how to get a shader error message from GDScript (it is only visible in the log window), so Material Maker does not give much information when a user-defined node does not generate correct shader code. It is even not easy to detect which node causes the error because nodes are combined to generate shaders.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd just need a way of getting the error message (with line number) obtained when compiling the shader.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThat feature could either be accessed through the Shader object or hidden in the VisualServer.\r\nThe function would return either the error message, or an empty string if the shader was compiled successfully.\r\n`var my_error = material.shader.get_error()`\r\nor\r\n`var my_error = VisualServer.shader_get_error(getmaterial.shader.get_rid())`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm pretty sure it will not be used often, but I don't think it can be worked around. If there is a way of getting that error message, I'd happily use it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nUnless it is possible to get the error without modifying the core, it should be in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/697/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/695",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/695/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/695/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/695/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/695",
    "id": 598074540,
    "node_id": "MDU6SXNzdWU1OTgwNzQ1NDA=",
    "number": 695,
    "title": "Automatically unfold found nodes in scene tree",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-10T20:20:24Z",
    "updated_at": "2020-04-10T20:20:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with complex scenes™\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVery often I need to find something in scene tree. It's not much of a problem in editor, but in remote tree the scene is much more complex and everything is folded by default. When I search something, I have to dig very deep to find it in found results.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe scene tree should unfold found nodes like file system dock does.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![1Upg2AGAXg](https://user-images.githubusercontent.com/2223172/79020506-4bba9600-7b79-11ea-8936-fcc7df192185.gif)\r\n_Imagine this is scene tree._\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't be scripted (probably).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause see above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/695/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/694",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/694/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/694/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/694/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/694",
    "id": 598067984,
    "node_id": "MDU6SXNzdWU1OTgwNjc5ODQ=",
    "number": 694,
    "title": "Allow to click on AnimationPlayer timeline without moving animation",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-10T20:03:05Z",
    "updated_at": "2020-04-13T12:51:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game with animations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nQuite often happens that I forget to move cursor on timeline before adjusting property. I.e. I add a keyframe then move object to desired position, but forget to move the cursor before that, so I need to click timeline, but it breaks my perfect position and I need to set it again.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be some way to click timeline without moving animation (i.e. updating nodes to the selected time). Could be done with some modifier key.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![NIXwcYScEg](https://user-images.githubusercontent.com/2223172/79019438-9edf1980-7b76-11ea-9057-5cc68eff983e.gif)\r\n_Imagine the Sprite doesn't move back when I move the timeline cursor._\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, but it would be more than few lines.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about AnimationPlayer.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/694/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/693",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/693/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/693/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/693/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/693",
    "id": 598061521,
    "node_id": "MDU6SXNzdWU1OTgwNjE1MjE=",
    "number": 693,
    "title": "Printing node should contain its name",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-10T19:45:33Z",
    "updated_at": "2020-04-21T07:43:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes it happens that I have to print a node to see if a proper node is where I want it. My problem is that `print(some_node)` doesn't give really useful information. It gives node type and... instance ID. I don't need the ID, I'd like the name. Most often I can't just do `print(some_node.name)` because `some_node` can be null too (safe navigation operator would help here actually...).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDoing `print` on node should display its type and name, not type and ID.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWe should either make `to_string` virtual and override it in node or add an `if` checking if the Object is a node. The latter is quite simple to do actually.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPrinting nodes is rather frequent operation IMO.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's core thing.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/693/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/692",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/692/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/692/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/692/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/692",
    "id": 597883077,
    "node_id": "MDU6SXNzdWU1OTc4ODMwNzc=",
    "number": 692,
    "title": "Add support for 3D Level of Detail",
    "user": {
      "login": "lupoDharkael",
      "id": 14951430,
      "node_id": "MDQ6VXNlcjE0OTUxNDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14951430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lupoDharkael",
      "html_url": "https://github.com/lupoDharkael",
      "followers_url": "https://api.github.com/users/lupoDharkael/followers",
      "following_url": "https://api.github.com/users/lupoDharkael/following{/other_user}",
      "gists_url": "https://api.github.com/users/lupoDharkael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lupoDharkael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lupoDharkael/subscriptions",
      "organizations_url": "https://api.github.com/users/lupoDharkael/orgs",
      "repos_url": "https://api.github.com/users/lupoDharkael/repos",
      "events_url": "https://api.github.com/users/lupoDharkael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lupoDharkael/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 7,
    "created_at": "2020-04-10T13:17:05Z",
    "updated_at": "2021-01-06T23:49:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm going to ignore the issue template because this has been confirmed to be implemented in the future.\r\n\r\nI'm opening this issue because the conversation arround LOD is scattered by multiple issues and I think it is important to have a common place to discuss the technical details of a feature (and move the discussion of the design to the proposals repository).\r\n\r\n### Hierarchical level of detail\r\nAnother LOD approach (and not mutually exclusive with the previously mentioned) is the hierarchical level of detail. With this a single mesh can replace multiple smaller ones. It greatly helps reducing the mesh count for the areas far from the camera.\r\nhttps://docs.unrealengine.com/en-US/Engine/HLOD/index.html\r\n\r\nThis will be implemented as stated here: https://twitter.com/reduzio/status/1340114705923379202\r\n\r\n### Content streaming\r\n\r\nRelated issue: godotengine/godot#17556\r\n\r\nAs indicated by @Calinou : \"Support for LOD and texture streaming is planned in Godot 4.0\" ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/692/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/691",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/691/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/691/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/691/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/691",
    "id": 597723302,
    "node_id": "MDU6SXNzdWU1OTc3MjMzMDI=",
    "number": 691,
    "title": "Remove the Navigation2D and Navigation3D nodes",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-10T06:33:17Z",
    "updated_at": "2020-08-03T07:15:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nThe Navigation System to work needs that the nodes `NavigationRegion`, `NavigationAgent` and the `NavigationObstacle` are wrapped by the `Navigation` node.\r\n\r\nMost of the time the `Navigation` Node, for the reason above, is the root of anything; this is not really ergonomic, since you are forced to think in terms of Navigation System during game code design. Also, it force a pattern that is not in line with the other Godot features.\r\n\r\nThe Physics engine is really similar to the Navigation System. Indeed, as the Physics Engine with the `Space`, the Navigation System with the `NavigationMap` needs an object that contains all the objects, so to know the relationship between those.   \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo improve ergonomic, I propose to get rid of the `Navigation` node, and threat it as the `Space` object for the physics.\r\n\r\nThis would mean that we would have the possibility to organize the `NavigationRegion`s, `NavigationAgent`s, and `NavigationObstacle`s without constraints; similarly as we do with the `RigidBody`s.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea is to add the `NavigationMap` RID in the `World_*.h` file, all together with the `Space` and the `Scenario` RIDs.\r\nhttps://github.com/godotengine/godot/blob/master/scene/resources/world_3d.h#L48\r\n\r\nThen, the nodes like `NavigationRegion`, `NavigationAgent` and `NavigationObstacle`, will use that `NavigationMap` RID similarly as the `RigidBody` and the other Physics objects do.\r\n\r\nRegarding the various features that the `Navigation` node has, like the `get_closest_point`, these can be accessed via `NavigationServer` singleton (as for the Physics). Indeed, these functions, in the `Navigation` node, are just code sugar for `NavigationServer` calls: https://github.com/godotengine/godot/blob/master/scene/3d/navigation_3d.cpp#L35-L54\r\n\r\nRegarding the `Navigation` settings, these will be moved in the Project Setting.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/691/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/685",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/685/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/685/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/685/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/685",
    "id": 597200945,
    "node_id": "MDU6SXNzdWU1OTcyMDA5NDU=",
    "number": 685,
    "title": "Send signal when Camera2D reaches Limit (left, top, right, bottom)",
    "user": {
      "login": "drmar",
      "id": 13488692,
      "node_id": "MDQ6VXNlcjEzNDg4Njky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13488692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drmar",
      "html_url": "https://github.com/drmar",
      "followers_url": "https://api.github.com/users/drmar/followers",
      "following_url": "https://api.github.com/users/drmar/following{/other_user}",
      "gists_url": "https://api.github.com/users/drmar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drmar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drmar/subscriptions",
      "organizations_url": "https://api.github.com/users/drmar/orgs",
      "repos_url": "https://api.github.com/users/drmar/repos",
      "events_url": "https://api.github.com/users/drmar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drmar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-04-09T10:59:30Z",
    "updated_at": "2020-04-10T09:12:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a Papers, Please clone game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am having problems containing the Camera2D within certain limits, while also making sure I can zoom around the scene freely and still being certain that the Camera2D does not go beyond the limits. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently, I can pan the Camera2D's position around and it will stop panning exactly where I set it's limit, but the problem is that behind the scene the Camera2D will continue moving its position. If a Signal was sent every time the Camera2D reached a limit, then I can use that to stop moving it's position even if buttons are pressed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI really have no idea.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around with complicated code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature will help a lot of beginners (and maybe even advanced users) to achieve the desired functionality without having to make really complicated code as a work around.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/685/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/683",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/683/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/683/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/683/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/683",
    "id": 597147205,
    "node_id": "MDU6SXNzdWU1OTcxNDcyMDU=",
    "number": 683,
    "title": "Small improvement for artists to visual scripting ( VERY small ) . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-09T09:25:27Z",
    "updated_at": "2020-04-10T14:15:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI was working on some games, but now I'm joining a game jam, tomorrow, and will make a game about the theme . . I am currently working on a Tomb Raider and, an RTS <3\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWell, it's not really a problem, but as an artist minded visual scripter, I would really appreciate it, if one could make the boxes look like bubbles, a little bit, not very much <3\r\n\r\n![2020-04-09 1121](https://user-images.githubusercontent.com/61069740/78879914-deade000-7a54-11ea-8978-101d45807159.jpg)\r\n\r\n\r\nNot this much, but so it looks like in the above images, like friendly ' thoughts ', in a way <3\r\n\r\n![2020-04-09 1122](https://user-images.githubusercontent.com/61069740/78879595-62b39800-7a54-11ea-8461-a559f9378f9b.png)\r\nNot THIS bubbly, just a little rounded, first picture . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI find coding very terrifying, but I am slowly learning the engine through visual scripting, and I plan to move over to real coding, when I can, it's my goal . . . Until then, this could make the Visual scripting experience a little more friendly to artist-minded people, and new people in the engine, or so . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSort of like above, where the boxes look like this, some-thing friendly, ' nice ' <3\r\n![2020-04-09 1121](https://user-images.githubusercontent.com/61069740/78879780-aad2ba80-7a54-11ea-8f3a-c993df50587e.jpg)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAs a beginner this is beyond me, maybe if there was an option, to switch between the two, so there was a ' more rounded ', a ' little ' rounded and, ordinary square ones, to help people, beginners .. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it could be done there, don't know . . .\r\n\r\n<3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/682",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/682/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/682/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/682/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/682",
    "id": 596864309,
    "node_id": "MDU6SXNzdWU1OTY4NjQzMDk=",
    "number": 682,
    "title": "Add capability to \"filter\" certain functions out of the warning linter that don't return a value that needs to be processed",
    "user": {
      "login": "creikey",
      "id": 28424206,
      "node_id": "MDQ6VXNlcjI4NDI0MjA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28424206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/creikey",
      "html_url": "https://github.com/creikey",
      "followers_url": "https://api.github.com/users/creikey/followers",
      "following_url": "https://api.github.com/users/creikey/following{/other_user}",
      "gists_url": "https://api.github.com/users/creikey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/creikey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/creikey/subscriptions",
      "organizations_url": "https://api.github.com/users/creikey/orgs",
      "repos_url": "https://api.github.com/users/creikey/repos",
      "events_url": "https://api.github.com/users/creikey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/creikey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-08T21:08:33Z",
    "updated_at": "2020-07-10T22:40:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA medium to large sized action adventure shmup.\r\n**Describe the problem or limitation you are having in your project:**\r\nToo many warnings about not processing a return value from functions like `connect` or `change_scene`\r\n\r\nBecause some functions should always return a normal value on normal operation, and whenever they return a faulty error, the debugger tells me, under no circumstances should I need to process the error result programmatically.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA checkbox in the Gdscript subsection of the Debug section in Project Settings that will exclude functions like `connect` where it's unlikely you'll ever need to process the return value in games, excluding those functions from the warning section.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/28424206/78833692-26bffa80-79a2-11ea-908f-173a95d9d12f.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, you could add an ignore warning comment for every single function like `connect` that shouldn't return an erroneous value that must be processed programmatically, however, this is prone to error when you have a lot of warnings built up in a project ( you may ignore the actual errors ) and slows down development time.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDecisions on what functions shouldn't ever return a value that needs to be processed need to be made carefully so as to avoid each project reporting different errors, confusing developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/682/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/680",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/680/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/680/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/680/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/680",
    "id": 596600015,
    "node_id": "MDU6SXNzdWU1OTY2MDAwMTU=",
    "number": 680,
    "title": "Disallow deletion of the root node in editor Scene dock",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-08T13:56:40Z",
    "updated_at": "2020-04-08T16:45:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot applicable.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPartially related to #679. There is no reason to have a scene without a root node. It's functionless and indistinguishable in the tab list. Furthermore, even if the node was previously there, but got deleted, such scene would display as \"[empty]\" in the tab list, making it unidentifiable once again. Having more then one empty scene is therefore not usable.\r\n\r\nTo reduce the amount of cases when the user has an \"empty\" scene I propose limiting their ability to delete root nodes from existing scenes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDeleting the root node makes little sense from the standpoint of a user. What the user does here is they delete all child nodes and change the root node's type.\r\n\r\nClearing out all of the node's children can be made an option of the context menu. Changing type is already in there. So I'd suggest in place of deleting the root node we should prompt the user if they wish to select another node type in its place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe option to delete, for simplicity's sake, can still be there for the root nodes. However, when pressed a new window should appear similar to the one that is used to change node type. It should prompt the user to select the new node type and ask them to confirm that all the children will be deleted.\r\n\r\nIf the user cancels, none of this happens. If the user selects a new type and confirms, children are deleted and the root node's type is changed.\r\n\r\nI suggest that we add a context option to clear all the children for each node in the tree as well. We can also use that and display the delete option as disabled for the root node with a tooltip suggesting the user to use clear and change type options instead.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be solved by a simple script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWhile I can imagine an extremely hacky plugin that is able to do it, I'd prefer it to be the default experience for everyone using the editor. But I do think it is doable as a plugin, in some form.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/680/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/679",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/679/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/679/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/679/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/679",
    "id": 596537897,
    "node_id": "MDU6SXNzdWU1OTY1Mzc4OTc=",
    "number": 679,
    "title": "Integrate \"Create Root Node\" step into \"Create Scene\" dialog",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-08T12:24:38Z",
    "updated_at": "2020-04-08T16:48:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNot applicable.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating a new scene from the context menu in FileSystem dock is a two-step process, and it really does not need to be. There is no reason to have a scene without a root node, so it makes sense to allow a selection of the root node type together with scene creation.\r\n\r\nSee also #680.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding the \"Create Root Node\" form similar to the Scene dock for an empty scene should be sufficient.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis suggestion only affects the context menu in FileSystem dock way of creating a new scene. Only this flow has a dialog prompting the user to enter the scene's name. It is possible to create a new scene from the File menu, or simply by pressing the shortcut combination.\r\n\r\nIt can be argued that in these cases the dialog is not possible to include, as the scene created this way cannot be associated with a path in the filesystem. I'm not going to suggest we add the same dialog for that flow as well.\r\n\r\nSame applies to a new project. It automatically has a virtual scene created and displayed as soon as it is opened. Whether or not we should ask a user straight away if they want a 2d or 3d scene and create it with a corresponding root node I do not know, but it's a possibility.\r\n\r\nHere is how it should work for a new scene created via the context menu:\r\n![create-scene-popup](https://user-images.githubusercontent.com/11782833/78782291-74d8fc00-79aa-11ea-8947-bc4b4da1bc98.png)\r\n\r\nIt should work just the same as it does currently, though instead of outright creating the node it just selects its type until the moment the scene itself is created. Then the node is inserted as well.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be solved by a simple script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWhile I can imagine an extremely hacky plugin that is able to do it, I'd prefer it to be the default experience for everyone using the editor. But I do think it is doable as a plugin, in some form.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/679/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/678",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/678/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/678/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/678/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/678",
    "id": 596520338,
    "node_id": "MDU6SXNzdWU1OTY1MjAzMzg=",
    "number": 678,
    "title": "Improve 'local to scene' to support the case where it's only needed at runtime",
    "user": {
      "login": "RandomShaper",
      "id": 11797174,
      "node_id": "MDQ6VXNlcjExNzk3MTc0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11797174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomShaper",
      "html_url": "https://github.com/RandomShaper",
      "followers_url": "https://api.github.com/users/RandomShaper/followers",
      "following_url": "https://api.github.com/users/RandomShaper/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandomShaper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandomShaper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandomShaper/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomShaper/orgs",
      "repos_url": "https://api.github.com/users/RandomShaper/repos",
      "events_url": "https://api.github.com/users/RandomShaper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandomShaper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-04-08T11:53:07Z",
    "updated_at": "2020-04-15T09:36:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**UPDATE:** Examples added.\r\n\r\n**Describe the project you are working on:**\r\nA medium/big size game with many 2D UI and 3D parts.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMarking a resource as _Local to scene_ is not only honored at runtime, but in the editor too.\r\nThat means that any resource marked as such is automatically duplicated (together with all its subresources) every time the original scene is instanced in the editor, even though I only need the duplication to happen at runtime (to, say, change material colors of some characters without affecting others).\r\n\r\nThis has two problems for this kind of use case:\r\n- \"Propagation\" of changes to the original resource is prevented.\r\n\r\n  Example:\r\n  > Let's say I have a scene which is an enemy in a game. It has a material applied. I want to create some variants of that enemy with different weapons, so I create multiple scenes inheriting this one, each one including a different weapon.\r\n  > I also want to change the color of each individual enemy at runtime. Therefore, I mark the material applied to the base enemy as _Local to scene_.\r\n  > Problem: the material is getting duplicated on all of the enemy variants (the scenes inheriting from the base one). Therefore, when I make changes to the material in that base scene, they are not propagated to the weaponized versions and I need to apply those changes manually to all the inheriting scenes (e.g., by copy-pasting the material in the editor or the .tscn files).\r\n  > That's a hassle when all I wanted is unique copies of the material at runtime.\r\n\r\n- The duplicated resources harm diffs for VCS, because they contain spurious changes.\r\n\r\n  Example:\r\n  > Following the previous example, if I have my project version-controlled (as it should be), the weaponized scenes show a copy of the material in the change set, which harms its readability.\r\n  > Furthermore, if I want to change the material, since I have to do it in all the weaponized scenes as well, I'll get diffs including the change not only to the base scene but also to all of them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n- To support the duplicate-at-runtime case, _Local to scene_ won't do anything at edit time anymore. It will only duplicate the resources marked as such at runtime.\r\n\r\n- To support the duplicate-at-editor work flow, you still have the option to explicitly duplicate the resource.\r\n  For the special case of `ViewportTexture`, which needs to work in-editor, the editor can hint you to duplicate it or even do it automatically. There's already special management of `ViewportTexture` in the editor code, so this wouldn't be making things worse.\r\n  A way to have this, would be that `Resource` is extended with a tools-only method called `is_auto_duplicated_on_instancing()` that would return `true` only for `ViewportTexture` and that would trigger the automatic duplication at instancing the same way it happens now with _Local to scene_.\r\n\r\nAs a bonus, I'd rename _Local to scene_ to _Unique per instance_. I think the latter is far easier to understand. At least, in my case, the first time I came across it, I'd have been grateful about a more self-explanatory name to grasp the idea quicker.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNo need for any of that, I guess.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't think so. Sure you can hack around it via tool scripts, but that's not the way to go.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a fundamental change on how _Local to scene_ works, so there's no option.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/678/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/677",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/677/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/677/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/677/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/677",
    "id": 596109505,
    "node_id": "MDU6SXNzdWU1OTYxMDk1MDU=",
    "number": 677,
    "title": "Add ability to see all files to FileSystem dock, even files that can not be used.",
    "user": {
      "login": "winston-yallow",
      "id": 44872771,
      "node_id": "MDQ6VXNlcjQ0ODcyNzcx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/44872771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winston-yallow",
      "html_url": "https://github.com/winston-yallow",
      "followers_url": "https://api.github.com/users/winston-yallow/followers",
      "following_url": "https://api.github.com/users/winston-yallow/following{/other_user}",
      "gists_url": "https://api.github.com/users/winston-yallow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winston-yallow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winston-yallow/subscriptions",
      "organizations_url": "https://api.github.com/users/winston-yallow/orgs",
      "repos_url": "https://api.github.com/users/winston-yallow/repos",
      "events_url": "https://api.github.com/users/winston-yallow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winston-yallow/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-07T19:46:46Z",
    "updated_at": "2020-04-11T22:57:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n~~Irrelevant for proposal, but hey it is a top down hide and seek game.~~\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFiles that are not recognized by godot are not shown in FileSystem dock. This is also true for subfolders that contain a `project.godot` file. This can be confusing for new users as the name \"FileSystem\" suggests that all files from the OS file system are shown. \r\nSee this (closed) issue for an example: https://github.com/godotengine/godot/issues/37671\r\nIf it is planned to support nested projects then this part would become obsolete, however the issue for unsupported files still exists.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe ability to show all files will help users to see that godot treats some files as usable and others as unusable.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI see two things that would help to achieve this goal:\r\n\r\n_1. Always show all files/directories:_  \r\nDirectories that can't be accessed would be shown in a different way, see images. If the mouse hovers them a tooltip would explain why the file is inaccessible.\r\n\r\n_2. Add a toggle to show all files:_\r\nThis would add the ability to decide what is or isn't shown.\r\n\r\nI think a combination of both would be the best option. This way users are able to see all files if they want, but they can still hide them if the file tree is too crowded. It could look similar to this mock up:\r\n\r\n![tmp](https://user-images.githubusercontent.com/44872771/78712164-7ce85b80-7918-11ea-93b4-34855f7d8788.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe file system is an elementary part of the engine, it would be nice if it has this ability by default. Also I am not sure if an addon should mess with the internal filesystem dock, probably not a good idea.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/677/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/676",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/676/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/676/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/676/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/676",
    "id": 596094022,
    "node_id": "MDU6SXNzdWU1OTYwOTQwMjI=",
    "number": 676,
    "title": "Expose `Image.load_{format}_from_buffer()` for more image formats such as BMP and OpenEXR",
    "user": {
      "login": "paulherman",
      "id": 3405360,
      "node_id": "MDQ6VXNlcjM0MDUzNjA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3405360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulherman",
      "html_url": "https://github.com/paulherman",
      "followers_url": "https://api.github.com/users/paulherman/followers",
      "following_url": "https://api.github.com/users/paulherman/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulherman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulherman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulherman/subscriptions",
      "organizations_url": "https://api.github.com/users/paulherman/orgs",
      "repos_url": "https://api.github.com/users/paulherman/repos",
      "events_url": "https://api.github.com/users/paulherman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulherman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-07T19:18:50Z",
    "updated_at": "2020-11-08T19:30:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTrying to provide a clone of another game (MU).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe original game uses BMP and TGA files for textures.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExposing Load.*FromBuffer for said formats. This is already implemented in the core of the engine so just wiring is needed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd another function pointer in the `Image` [class](https://github.com/godotengine/godot/blob/058a0afdeca83145d58a95c426dd01216c397ea9/core/image.h#L136) and initialize it in the constructor of the two formats (just like for JPEG).\r\n\r\nProbably more wiring is needed in places like [this](https://github.com/godotengine/godot/blob/058a0afdeca83145d58a95c426dd01216c397ea9/modules/assimp/import_utils.h#L359).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe API should be uniform.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/676/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/675",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/675/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/675/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/675/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/675",
    "id": 596016829,
    "node_id": "MDU6SXNzdWU1OTYwMTY4Mjk=",
    "number": 675,
    "title": "Allow assigning `DIFFUSE_LIGHT` and `SPECULAR_LIGHT` in custom 3D light shaders",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-07T16:59:38Z",
    "updated_at": "2020-11-22T15:17:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe light shader needs to be changed, it doesn't work properly(i'll open an issue after this), but the fact that we modify the final light for every light is limiting, there should be the possibility to do operations for every light and only then assign the final light, for example we could multiply the albedo after the operations on every light(it would make more sense to me).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think that the light shader needs to be redone, not just to solve the problem but also to make it more useful and powerful, as is it's almost useless.\r\n\r\nTwo ideas:\r\n1)if i remember correctly i read that the light shader actually happens in the fragment shader, then remove the light shader completely, and in the fragment shader add the DIFFUSE_LIGHT and SPECULAR_LIGHT built-ins and let us make something like this:\r\n\r\nfor each light:\r\n{ do something }\r\nDIFFUSE_LIGHT=...\r\n\r\n2)leave the light shader but let us assign DIFFUSE_LIGHT and SPECULAR_LIGHT outside of it so we can make more complex operations.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe light shader needs to be reworked.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSadly no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt has to be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/674",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/674/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/674/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/674/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/674",
    "id": 595813268,
    "node_id": "MDU6SXNzdWU1OTU4MTMyNjg=",
    "number": 674,
    "title": "Add virtual memory address reporting of Variant objects in the editor debugger",
    "user": {
      "login": "crazychenz",
      "id": 792769,
      "node_id": "MDQ6VXNlcjc5Mjc2OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/792769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crazychenz",
      "html_url": "https://github.com/crazychenz",
      "followers_url": "https://api.github.com/users/crazychenz/followers",
      "following_url": "https://api.github.com/users/crazychenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/crazychenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crazychenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crazychenz/subscriptions",
      "organizations_url": "https://api.github.com/users/crazychenz/orgs",
      "repos_url": "https://api.github.com/users/crazychenz/repos",
      "events_url": "https://api.github.com/users/crazychenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crazychenz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-07T11:57:34Z",
    "updated_at": "2020-10-05T09:48:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a small grid-based puzzle game. When I rotate (without rounding) Vector2(-1, 0) 180 degrees, I expect Vector(1, 0). Unfortunately, due to [#37647](https://github.com/godotengine/godot/issues/37647), [#27665](https://github.com/godotengine/godot/issues/27665), [#17971](https://github.com/godotengine/godot/issues/17971), [#288](https://github.com/godotengine/godot/issues/288), and so forth, there are apparent inconsistencies with floating point precision in GDScript. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThis floating point precision issue in my case is simply resolved with a round() (or possibly is_equal_approx()). The fact that there is a floating point precision issue is *not* my issue here.\r\n\r\nMy issue is that troubleshooting the above state was very difficult using standard debugging techniques. I would have expected to see a more accurate representation of what the engine was interpreting as the value instead of what it wanted to present to the user for usability purposes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI believe that the debugger in Godot should allow developers to drill down into the actually memory locations of the objects or values they are inspecting. I would very much like to see some sort of hex representation of the data being pointed to by a Variant struct/object instance (directly in the GDScript debugger).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAs a use case, I would expect that a user should be able to retrieve the virtual memory address of any Variant object that is tracked by Godot. This would allow a loose coupling between any memory analyzer within or attached to the process to display the \"real data\". This would include using windbg on windows or gdb in GNU environments. Ideally, Godot would also provide its own runtime memory manipulation tools within the editor as a Debugger tool.\r\n\r\nImplementation wise:\r\nLooking at variant.h, I think that you just need to provide a global scope function that takes a Variant and depending on the type either returns &Variant._data or Variant._get_obj().obj. Perhaps something like:\r\n\r\n```\r\nvar variant = Vector2(1, 0)\r\nvar pointer = __get_virtual_memory_address(variant)\r\nprint(\"Pointer: %s\")\r\n```\r\nwould output something like:\r\n`Pointer: 0xFFFFFF34A8432`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI do not believe this can be worked around in scripts.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nGodot Engine needs to expose the virtual memory addresses of objects or Variant objects and the rest may be implementable in an external asset. That said, I believe this should be included in core because of the lack of tools to detect/inspect/analyze the issues described in the tickets at the beginning of this issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/673",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/673/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/673/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/673/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/673",
    "id": 595450783,
    "node_id": "MDU6SXNzdWU1OTU0NTA3ODM=",
    "number": 673,
    "title": "Implement scripts for individual GridMap tiles",
    "user": {
      "login": "CaveJohnson376",
      "id": 33164023,
      "node_id": "MDQ6VXNlcjMzMTY0MDIz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/33164023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CaveJohnson376",
      "html_url": "https://github.com/CaveJohnson376",
      "followers_url": "https://api.github.com/users/CaveJohnson376/followers",
      "following_url": "https://api.github.com/users/CaveJohnson376/following{/other_user}",
      "gists_url": "https://api.github.com/users/CaveJohnson376/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CaveJohnson376/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CaveJohnson376/subscriptions",
      "organizations_url": "https://api.github.com/users/CaveJohnson376/orgs",
      "repos_url": "https://api.github.com/users/CaveJohnson376/repos",
      "events_url": "https://api.github.com/users/CaveJohnson376/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CaveJohnson376/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-06T21:49:41Z",
    "updated_at": "2020-05-06T12:55:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSome kind of Minecraft clone\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLimited functional of gridmap tiles\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nYou can add script to tile in meshlib, and control this specific tile without changing tile type, position and orientation.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`GridmapTile` class with properties:\r\nPosition (readonly) - position of tile in gridmap's space\r\nTile ID (readonly) - ID of tile in meshlib \r\nOrientation\r\nModel\r\nMaterial\r\nScript (readonly)\r\nGridmap (readonly) - gridmap this tile part of\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't be worked around, as if my game will have either much more tiles for each state of it, or static tiles only\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure it is possible to do that as an addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/673/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/671",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/671/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/671/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/671/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/671",
    "id": 594843982,
    "node_id": "MDU6SXNzdWU1OTQ4NDM5ODI=",
    "number": 671,
    "title": "Add object position interpolation between physics frames",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2020-04-06T06:39:45Z",
    "updated_at": "2020-12-08T10:59:35Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nUsually the rendering  is much faster than the physics frames and 144hz monitors are cheap enough to be a standard device for gaming PCs nowadays.\r\n\r\nIn Godot, the physics updates the position of almost anything, usually at fixed rate of 60Hz, this mean that no matter how faster your machine is to process a frame the object rendered will change at fixed rate of 60 frame per seconds.\r\n\r\nIn other words, even with high frame rate, the new rendered frame will be the same of the previous until the next physics frame change object positions (computation waste).\r\n\r\nThe result is that high frame rate monitors are useless and the rendering is not fluid as you would expect.\r\n\r\nHowever, you may want to lower the physics frame rate from 60 to 30, because your game doesn't need such precision and so to unload the CPU; doing so you will notice that the game is not fluid and you are forced to keep using 60 frames per seconds.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis limitation can be solved by integrating the position interpolation between the frames.\r\n\r\nWe know that the physics produces a new position at a rate of 60 frames per second and between those frames the renderer produces other three identical frames. The idea is to interpolate between the old position produced by the physics engine and the new so that the intermediate frames are different each other. The problem with such approach is that we need to know the rendering speed beforehand and since this is not always stable we need a way to determine it.\r\n\r\nThe idea is to count the amount of intermediate rendering frames between the old physics update and the current one, and spread the interpolation delta between those; so even during the phases where the frame rate is not perfectly stable we are able to interpolate the position in a plausible manner.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![Interpolation](https://user-images.githubusercontent.com/8342599/78527448-288c9100-77dd-11ea-8573-beeeac19f4f7.png)\r\n\r\n### Without interpolation\r\n![Interpolation_2](https://user-images.githubusercontent.com/8342599/78531900-a012ee00-77e6-11ea-8cb0-177fb375d164.png)\r\n\r\n\r\n### With interpolation\r\n![Interpolation_3](https://user-images.githubusercontent.com/8342599/78531904-a1dcb180-77e6-11ea-9ea6-95bb8e23541a.png)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/671/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/668",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/668/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/668/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/668/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/668",
    "id": 593939183,
    "node_id": "MDU6SXNzdWU1OTM5MzkxODM=",
    "number": 668,
    "title": "Custom behavior in tool mode when tilemap is edited from editor",
    "user": {
      "login": "tchernia",
      "id": 16117249,
      "node_id": "MDQ6VXNlcjE2MTE3MjQ5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16117249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tchernia",
      "html_url": "https://github.com/tchernia",
      "followers_url": "https://api.github.com/users/tchernia/followers",
      "following_url": "https://api.github.com/users/tchernia/following{/other_user}",
      "gists_url": "https://api.github.com/users/tchernia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tchernia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tchernia/subscriptions",
      "organizations_url": "https://api.github.com/users/tchernia/orgs",
      "repos_url": "https://api.github.com/users/tchernia/repos",
      "events_url": "https://api.github.com/users/tchernia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tchernia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-04T16:05:49Z",
    "updated_at": "2020-04-06T09:37:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nGood day everybody! Thanks for that great game engine I enjoy using every day! :)\r\n\r\nI am currently working on a game set in a post-apocalyptic world. The gameplay key is that the player can go back in time to solve puzzles! The base game is turn and tile based and we are using Godot tilemap features. Our kickstarter will be launched in one month and a half!\r\n\r\nAs we are making a professionnal game with lots of levels (roughly 60), we need a very good level design tool that ensures compliance of created maps and enforce constraints on created tiles. \r\n\r\nFor example, I want to be able to put only one end tile on the map. Or I don't want to be able to put an obstacle on the cell where I put the player scene. It can seem stupid, but experience showed me that you actually make that kind of mistake even without knowing it (if offsets are not well fixed, or in case of other errors I cannot guess). \r\n\r\nSo I much prefer securing those possibilities rather than trusting the level designer (even if it's me most of the time)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe are using the very powerful tool keyword for most of our level design functionalities. However as far as I know, there is no way to get a notification when tilemaps are updated, so it is impossible to secure tilemap changes.\r\n\r\nI tried overriding set_cell and set_cellv functions, which would have been a great workaround, but it seems these functions are not called from the editor when changing a tile by hand (and I checked, I did not forget tool keyword on those files).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI would have loved one of these two features:\r\n\r\n- Whether a notification or a signal can be intercepted when level designer erase or draws a tile on the tilemap.\r\n- Or it is possible to override the function that is called when that happens.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIn GDScript:\r\n\r\n```\r\nfunc _on_tile_changed(Vector2 tile_position, int tile_id):\r\n\r\n#Some code depending on your logic\r\n```\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot as far as I know, because I can't get the information about the update.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nExactly the same reason: if you can't get the information from the beginning you can't create a plugin doing it. Or I am missing something here, which is possible.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/667",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/667/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/667/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/667/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/667",
    "id": 593911715,
    "node_id": "MDU6SXNzdWU1OTM5MTE3MTU=",
    "number": 667,
    "title": "Physics test framework & PhysX evaluation",
    "user": {
      "login": "pouleyKetchoupp",
      "id": 1075032,
      "node_id": "MDQ6VXNlcjEwNzUwMzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1075032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pouleyKetchoupp",
      "html_url": "https://github.com/pouleyKetchoupp",
      "followers_url": "https://api.github.com/users/pouleyKetchoupp/followers",
      "following_url": "https://api.github.com/users/pouleyKetchoupp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pouleyKetchoupp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pouleyKetchoupp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pouleyKetchoupp/subscriptions",
      "organizations_url": "https://api.github.com/users/pouleyKetchoupp/orgs",
      "repos_url": "https://api.github.com/users/pouleyKetchoupp/repos",
      "events_url": "https://api.github.com/users/pouleyKetchoupp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pouleyKetchoupp/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/2",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/2/labels",
      "id": 5482292,
      "node_id": "MDk6TWlsZXN0b25lNTQ4MjI5Mg==",
      "number": 2,
      "title": "4.1",
      "description": "This proposal is planned to be implemented in 4.1 or later",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 5,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2020-05-31T14:29:07Z",
      "updated_at": "2021-01-08T05:26:43Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2020-04-04T15:02:18Z",
    "updated_at": "2020-12-13T21:22:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**# Describe the project you are working on:**\r\nThis is a proposal for the engine, not related to a specific game project.\r\n\r\nI have experience with physics engines integration in general and with PhysX. I'm interested in contributing to the evaluation of PhysX in Godot.\r\n\r\n**# Describe the problem or limitation you are having in your project:**\r\nn/a\r\n\r\n**# Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'm opening this proposal to discuss about building a test framework for 3D physics and using it for evaluating PhysX for Godot 4.0.\r\n\r\n1. **Physics test framework**\r\n\r\nThis part is independent from the physics engine we use, so it can be useful for Godot Physics and Bullet as well.\r\n\r\nThis framework would have a series of tests that can be used for different purposes:\r\n-- **Functional tests** to check for regressions and compare behavior between physics engines\r\n-- **Stress tests** to evaluate & compare performance between physics engines\r\n-- **Technical demos** to show the engine capabilities\r\n\r\nIt probably doesn't require changes in the engine core, and can be as simple as a Godot project with different scenes for each test, and a menu to switch between them easily or execute a series of tests.\r\n\r\nThe [demo projects](https://github.com/godotengine/godot-demo-projects) repository seems like a good place for this project.\r\n\r\n**Functional tests** are used to visualize and validate the physics engine's behavior in specific scenarios. It can optionally include some checks and output whether they pass or fail.\r\ne.g: effect of physics materials, character controller movements, different types of ray/shape casts\r\n\r\n**Stress tests** output timings in different situations that can be considered critical to check the physics engine's performance.\r\ne.g: exploding pile of dynamic bodies, add/remove lots of bodies at once, execute a batch of ray/shape casts\r\n\r\n**Technical demos** can be interactive and are used to show specific engine features.\r\ne.g: vehicle, ragdoll, soft body\r\n\r\n2. **PhysX evaluation**\r\n\r\nThe physics tests described in the previous part can be used as a tool to compare physics engines and evaluate PhysX.\r\n\r\nVersion: probably last stable - 4.1\r\n\r\nPhysX integration can be done step by step:\r\nFirst, only the minimum required for the evaluation itself (rigid bodies with basic shape types, character controller, joints,...)\r\nThen, implement more features if the tests show it's worth going further with the integration.\r\n\r\n**Evaluation criteria:**\r\nGeneral performance\r\nFeature completeness (does it allow implementing all the existing features?)\r\nFeature improvements (can it help solving issues or improving existing features?)\r\n\r\n**Potential improvements:**\r\nBetter performance (to be tested)\r\nImproved joints stability (to be tested)\r\nSupport for baking collision shapes offline (faster loading & optimized for performance)\r\nSupport for per-shape & per-triangle physics materials\r\nSupport for GPU-based simulation\r\nWell-documented API\r\nRecord/replay debugging using [PVD](https://developer.nvidia.com/physx-visual-debugger)\r\n\r\n**# Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPhysics tests don't have to be part of the engine core.\r\n\r\nPhysX will be integrated in a similar way as Bullet, by implementing a physics server as a separate module within the engine.\r\n\r\n**# If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nn/a\r\n\r\n**# Is there a reason why this should be core and not an add-on in the asset library?:**\r\nn/a",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/667/reactions",
      "total_count": 19,
      "+1": 14,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/665",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/665/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/665/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/665/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/665",
    "id": 593556008,
    "node_id": "MDU6SXNzdWU1OTM1NTYwMDg=",
    "number": 665,
    "title": "Add a way to specify per-animation offsets to AnimatedSprite",
    "user": {
      "login": "iway1",
      "id": 12774588,
      "node_id": "MDQ6VXNlcjEyNzc0NTg4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12774588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iway1",
      "html_url": "https://github.com/iway1",
      "followers_url": "https://api.github.com/users/iway1/followers",
      "following_url": "https://api.github.com/users/iway1/following{/other_user}",
      "gists_url": "https://api.github.com/users/iway1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iway1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iway1/subscriptions",
      "organizations_url": "https://api.github.com/users/iway1/orgs",
      "repos_url": "https://api.github.com/users/iway1/repos",
      "events_url": "https://api.github.com/users/iway1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iway1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-03T18:13:55Z",
    "updated_at": "2020-05-06T12:56:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTop down RTS game.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCharacters use an AnimatedSprite node to change between their respective animations. The animations have different center points by their pixel value. \r\n\r\nChanging the offset always affects every animation, so it is impossible for both animations to be centered correctly when contained within the same AnimatedSprite. This results in at least one animation being offcenter.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAllow offsets to be specified per animation, giving a different offset to each animation in question.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAllow multiple offsets to be specified in the editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around by using the frame_changed() signal. It requires hardcoding the offsets per animation which isn't a desirable solution. It will cause additional code to be ran every single frame to check whether the animation has changed. If there were some \"animation_changed()\" signal that would be much more efficient and match the problem better.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot a big enough feature to warrant an add on. It would be very useful to anyone using an AnimatedSprite with multiple animations where the offsets are different for different animations.\r\n\r\n\r\n\r\n\r\nEDIT: \r\n\r\nThe workaround actually does not work. Since frame_changed is called AFTER the frame has changed, the first frame will be played with the previous animations offsets. So the sprite \"jumps\" for a frame as the second frame is played with the correct offsets.\r\n\r\nEDIT 2:\r\n\r\nNew workaround by overriding the \"play\" function. Works like it should. Still requires me to hardcode offsets which is less than ideal.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/665/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/664",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/664/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/664/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/664/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/664",
    "id": 593382907,
    "node_id": "MDU6SXNzdWU1OTMzODI5MDc=",
    "number": 664,
    "title": "Tilemap - Adding support for choosing tile draworder",
    "user": {
      "login": "TheHarvard",
      "id": 62014726,
      "node_id": "MDQ6VXNlcjYyMDE0NzI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/62014726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheHarvard",
      "html_url": "https://github.com/TheHarvard",
      "followers_url": "https://api.github.com/users/TheHarvard/followers",
      "following_url": "https://api.github.com/users/TheHarvard/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheHarvard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheHarvard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheHarvard/subscriptions",
      "organizations_url": "https://api.github.com/users/TheHarvard/orgs",
      "repos_url": "https://api.github.com/users/TheHarvard/repos",
      "events_url": "https://api.github.com/users/TheHarvard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheHarvard/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-04-03T13:28:27Z",
    "updated_at": "2020-04-21T06:30:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2d, side scroller game with Tilemaps, using tiles supposed to overlap (to give a visual effect of perspective)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTilemaps are drawn from top to bottom, and left to right, and this is not configurable.\r\n\r\nThis means tiles drawn later will overlap tiles drawn earlier, so a tile below another will always overlap the above tile, even when the opposite may be required to achieve a specific visual style or effect.\r\n\r\ncurrent workaround is to use bitmasks and a large amount of sprites with or without cutouts depending on which tile is overlapping which.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nadding support for draw order in tilemaps so that the user can configurer this.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nadding support for draw order in tilemaps so that the user can choose between:\r\n- top to bottom, left to right\r\n- top to bottom, right to left\r\n- bottom to top, left to right\r\n- bottom to top, right to left\r\ndepending on what is needed.\r\n\r\ncurrent implementation is: top to bottom, left to right\r\ni personally need: top to bottom, right to left\r\n\r\nHere is an example of the current implementation: \r\n(Screenshot taken from godot)\r\n(The tiles are examples, 16X16 pixels, with textures of 32X32 pixels as an oversized example)\r\n![Capture](https://user-images.githubusercontent.com/62014726/78364909-8f802f00-75be-11ea-8539-cfbbe407da39.PNG)\r\n\r\nHere is a Mockup of what i need:\r\n![Capture - Copy](https://user-images.githubusercontent.com/62014726/78365166-f7cf1080-75be-11ea-9307-9ac6661435ed.PNG)\r\n\r\nHere is an example of the actual textures and effect i want to achieve\r\n![Example](https://user-images.githubusercontent.com/62014726/78365579-90659080-75bf-11ea-895f-f17fbf1ac731.PNG)\r\n:\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nas far as i am aware, you can not override the draw order of a tilemap from a script, currently. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit seems to be a relatively simple feature to a very commonly used scene, and the functionality is relevant for any project working with overlapping tiles.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/664/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/661",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/661/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/661/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/661/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/661",
    "id": 592160874,
    "node_id": "MDU6SXNzdWU1OTIxNjA4NzQ=",
    "number": 661,
    "title": "custom node variables without scripts",
    "user": {
      "login": "ballerburg9005",
      "id": 50874674,
      "node_id": "MDQ6VXNlcjUwODc0Njc0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/50874674?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ballerburg9005",
      "html_url": "https://github.com/ballerburg9005",
      "followers_url": "https://api.github.com/users/ballerburg9005/followers",
      "following_url": "https://api.github.com/users/ballerburg9005/following{/other_user}",
      "gists_url": "https://api.github.com/users/ballerburg9005/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ballerburg9005/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ballerburg9005/subscriptions",
      "organizations_url": "https://api.github.com/users/ballerburg9005/orgs",
      "repos_url": "https://api.github.com/users/ballerburg9005/repos",
      "events_url": "https://api.github.com/users/ballerburg9005/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ballerburg9005/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-04-01T19:45:36Z",
    "updated_at": "2020-05-15T01:39:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSo imagine this: A primitive vertical scroller game spawns food items and there are literally hundreds of different ones (banana, apple, noodle, etc.).\r\n\r\nNow you want to save dozens of individual facts about those objects (vitamin B1 = 1000mg, is_vegetable = true, watercontent = 0.8 and so forth).\r\n\r\nIf a collision happens those facts all are relevant to what happens next (banana + milk makes milkshake, milkshake + fire decreases moisture, dog + chocolate = poison, player + chocolate increases tryptophan). So they need to be read ad-hoc by any other object.\r\n\r\nOr often times it are just single facts, not dozens. Nearly all objects in a game can have one or two of those facts attached to them for convenience.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI know you can achieve this in the following ways:\r\n\r\n1. Makeshift database inside main loop that polls and IDs objects. (unspeakably ugly)\r\n2. Attaching a new script to each of the hundreds of objects just for storing variables. (still pretty ugly)\r\n\r\nBut some objects already have scripts attached to them. And if, in this case the hundreds of objects all have already a single same script attached (via duplicate), you can't just attach a second script. You would have to copy and paste the old script into a new one just to add the \"non-script data\" as variables inside a new script hundreds of times, which means that the old scripts code becomes totally unmanagable.\r\n\r\nAs it would mean that as you perform just one tiny  change in the old script (which is an actual true script as it contains algorithms not just data), you would have to perform it hundreds of times by hand in this data-as-scripts based solution.\r\n\r\nA workaround to this would be to create new mock nodes where to attach new script to, then you would have to descent or ascent into the mock node to read the variables from.\r\n\r\nStill this seems unneccessarily laborious and clunky, to create hundreds of mock nodes and mock scripts just to store some data. And as it is that elemental to store one or two facts about anything for convenience, this would result in the strangest practice to create a mock node and mock script for each and every object just as a precaution.\r\n\r\nI am new to Godot, so I just don't see how this could be elegantly done in the editor or from the docs.\r\n\r\nThe spam-scripts-solution is not that bad to live with as in most cases you can work around it by shifting the old \"true\" script code into other scripts (like main loop). But it seems strange to me that such an easy to implement commonplace feature - one which I perceive to be very elemental - would only be supported in a kind of workaround manner that breaks all kinds of object oriented practice.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs you can already define groups inside the GUI, a simple place to start with would be that you could define variables in the same place and manner. \r\n\r\nTo make this feature more elaborate, it could feature search functionality and other database-ish things. So I can for example display all objects in the GUI with water content > 0.8, or all vegetables. \r\n\r\nOf course you could also do this with with scripts, by just iterating over all nodes with print(), but that is equally as clunky, as it is only a workaround and nothing useful is actually implemented in the first place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy proposal would work only if you can define custom variables for nodes in the GUI without defining them in scripts.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis feature offers in its basics almost exactly the same features as just defining variables in a script, except of course that you don't need a script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't understand how it can work as an add-on. And as described, this functionality is extremely elemental to all game development. It should not be hidden in some add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/660",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/660/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/660/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/660/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/660",
    "id": 592018540,
    "node_id": "MDU6SXNzdWU1OTIwMTg1NDA=",
    "number": 660,
    "title": "Support icon sizing in themes",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-01T15:47:59Z",
    "updated_at": "2020-04-02T13:06:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot supports using custom images for various icons used in themes (for example, the checkbox supports graphics for the checked / unchecked states). Any icon chosen is rendered at 1:1, with no option to specify an icon size in the editor.\r\n\r\nReusing an existing GUI texture is not possible unless the sizes match exactly. Currently the only way to mitigate this is to import multiple versions of the textures - one for each size you need. The workflow to do this is a little annoying, but more importantly, when building mobile games it's a waste of precious texture memory.\r\n\r\n~~It also makes it harder to build themes that can run at a higher resolution than project settings (e.g. retina display support). If you add a 3x size texture to the theme as the icon will simply be 3 times the size. You could fix this by having your project settings as retina sized to start and then scale _everything_, but that's not always practical.~~\r\n\r\nOn a side note, this problem isn't just found in themes. There is a lack of control on icon sizes for GUI elements in general. Buttons are the obvious example. They at least have the \"Expand Icon\" property to automatically scale the icon up or down to the button, but there is no finer method for finer control than that. If button text is a fixed size, then a free scaling icon doesn't normally make sense. Most of projects have ended up with custom button classes - which is a bit of shame.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen choosing an icon for a theme, as well as being able to select the image, there would be size options to override the dimensions. This lets the author decide exactly how big the icons should display, and the renderer can up/downscale accordingly.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSelect an icon as normal for the appropriate theme element (e.g. Check Box -> Icons -> Checked), then specify custom dimensions if required, ideally as a property shown directly underneath the icon in the inspector.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou could build custom versions of the controls to achieve this instead of using themes (which is what I've ended up doing).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGodot clearly has aspirations to have fully featured GUI system, of which Controls and Themes are already an integral part. This is just adding support for a reasonable use case that uses them both.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/660/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/659",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/659/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/659/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/659/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/659",
    "id": 591957762,
    "node_id": "MDU6SXNzdWU1OTE5NTc3NjI=",
    "number": 659,
    "title": "Make Image::bumpmap_to_normalmap more general and adjustable",
    "user": {
      "login": "kb173",
      "id": 18697097,
      "node_id": "MDQ6VXNlcjE4Njk3MDk3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18697097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kb173",
      "html_url": "https://github.com/kb173",
      "followers_url": "https://api.github.com/users/kb173/followers",
      "following_url": "https://api.github.com/users/kb173/following{/other_user}",
      "gists_url": "https://api.github.com/users/kb173/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kb173/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kb173/subscriptions",
      "organizations_url": "https://api.github.com/users/kb173/orgs",
      "repos_url": "https://api.github.com/users/kb173/repos",
      "events_url": "https://api.github.com/users/kb173/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kb173/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-01T14:24:55Z",
    "updated_at": "2020-04-30T08:27:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTerrain that is loaded from geodata. ([Geodot-Plugin](https://github.com/boku-ilen/geodot-plugin))\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot's `Image::bumpmap_to_normalmap` implementation is limited: It is hardcoded to \"repeat\"-type filtering and uses a performant, but visually not ideal method for calculating the normals.\r\n\r\nBecause of the \"repeat\" filtering, it is not usable for textures which do not tile, such as the landscape quads we generate from geodata. Also, we would prefer a slightly higher cost but visually better method.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would either add parameters to `Image::bumpmap_to_normalmap` or add new functions for:\r\n\r\n- Different types of filtering (clamp and repeat)\r\n- Different quality/performance tradeoff (the current method and a more accurate, less performant one)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI have implemented the method I need in our C++ GDNative plugin like this:\r\n\r\n```cpp\r\nImage *img = Image::_new();\r\n\r\nPoolByteArray heightmap_data = image->get_data();\r\n\r\nPoolByteArray normalmap_data;\r\n\r\nint width = image->get_width();\r\nint height = image->get_height();\r\nnormalmap_data.resize(width * height * 4); // RGBA\r\n\r\nimage->lock();\r\n\r\nfor (int full_y = 0; full_y < height; full_y++) {\r\n    for (int full_x = 0; full_x < width; full_x++) {\r\n        // Prevent the edges from having flat normals by using the closest\r\n        // valid normal\r\n        int x = std::clamp(full_x, 1, width - 2);\r\n        int y = std::clamp(full_y, 1, height - 2);\r\n\r\n        // Sobel filter for getting the normal at this position\r\n    \tfloat bottom_left = image->get_pixel(x + 1, y + 1).r;\r\n    \tfloat bottom_center = image->get_pixel(x, y + 1).r;\r\n    \tfloat bottom_right = image->get_pixel(x - 1, y + 1).r;\r\n\r\n    \tfloat center_left = image->get_pixel(x + 1, y).r;\r\n    \tfloat center_center = image->get_pixel(x, y).r;\r\n    \tfloat center_right = image->get_pixel(x - 1, y).r;\r\n\r\n    \tfloat top_left = image->get_pixel(x + 1, y - 1).r;\r\n    \tfloat top_center = image->get_pixel(x, y - 1).r;\r\n    \tfloat top_right = image->get_pixel(x - 1, y - 1).r;\r\n\r\n    \tVector3 normal;\r\n\r\n    \tnormal.x = (top_right + 2.0 * center_right + bottom_right) - (top_left + 2.0 * center_left + bottom_left);\r\n    \tnormal.y = (bottom_left + 2.0 * bottom_center + bottom_right) - (top_left + 2.0 * top_center + top_right);\r\n    \tnormal.z = 1.0 / scale;\r\n\r\n        normal.normalize();\r\n\r\n        Godot::print(normal);\r\n\r\n        normalmap_data.set(xy_to_index(full_x, full_y, width, height) * 4 + 0, 127.5 + normal.x * 127.5);\r\n        normalmap_data.set(xy_to_index(full_x, full_y, width, height) * 4 + 1, 127.5 + normal.y * 127.5);\r\n        normalmap_data.set(xy_to_index(full_x, full_y, width, height) * 4 + 2, 127.5 + normal.z * 127.5);\r\n        normalmap_data.set(xy_to_index(full_x, full_y, width, height) * 4 + 3, 255);\r\n    }\r\n}\r\n\r\nimage->unlock();\r\n\r\nimg->create_from_data(width, height, false, Image::Format::FORMAT_RGBA8, normalmap_data);\r\n\r\nreturn Ref<Image>(img);\r\n```\r\n\r\nSobel filtering is used for getting the normal, which is evidently less performant due to more texture reads, but offers better visual results.\r\n\r\nAlso, x and y are clamped to be between `1` and `width - 2` or `height - 2` to provide a \"clamp\" method instead of the default \"repeat\". (We can't clamp to `0` and `width - 1` because that would result in \"flat\" normals at the edges).\r\n\r\nThe following picture shows the difference between Godot's `Image::bumpmap_to_normalmap` (left) and our custom implementation (right):\r\n \r\n![normalmap_difference](https://user-images.githubusercontent.com/18697097/78146014-e4426f00-7431-11ea-9dab-202d6d2cc796.png)\r\n\r\nTile edges are much less visible and the shadows look smoother.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf we go with adding additional parameters to `Image::bumpmap_to_normalmap`, these can be set to the current values by default, thus not breaking any compatibility. If we add new, additional functions, the current `Image::bumpmap_to_normalmap` implementation can stay as it is. Both cases are entirely backwards-compatible.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI did currently implement the alternative method in my plugin for loading geospatial data, Geodot. However, this has two drawbacks:\r\n\r\n- GDNative doesn't have access to raw arrays and other things used in the default `Image::bumpmap_to_normalmap` implementation, so there is another additional performance hit.\r\n- Two methods doing essentially the same thing are in completely separate places, which feels like bad design.\r\n\r\nSince Godot does provide functionality for turning bump maps into normal maps by default, I think it would make sense to improve and expand it directly.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/659/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/658",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/658/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/658/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/658/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/658",
    "id": 591583915,
    "node_id": "MDU6SXNzdWU1OTE1ODM5MTU=",
    "number": 658,
    "title": "Add Wrap2D and Wrap3D nodes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-01T03:09:30Z",
    "updated_at": "2020-05-18T03:29:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nseamless wrapping with camera's and parallax layers isn't really feasible do to the following issues..\r\n- object colliders and graphics can't be simulated at all edges\r\n- parallax layers don't repeat for animated sprites and tile maps\r\n- parallax layers jump around when the camera wraps around a certain point\r\n- positions are vectors and can only hold so many numbers (aka true infinite space isn't possible)\r\n- sound needs some sort of wrapping equivalent \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nmake a wrap 2d and wrap 3d node that has the following options..\r\n- a bool to wrap the camera's position\r\n- a bool to wrap what the camera draws at its edges\r\n- a bool to correctly offset parallax layers on camera wrap around\r\n- a bool to secretly duplicate and update all child nodes by reference (including physics and sound)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically it would just be a node that processes rendering, sound, collision, and physics of its children but in a way that doesn't break the engine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno this is cannot be worked around without rendering, translating and duplicating everything which is very difficult to do and requires fighting the godot engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nsee above\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/656",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/656/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/656/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/656/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/656",
    "id": 591440055,
    "node_id": "MDU6SXNzdWU1OTE0NDAwNTU=",
    "number": 656,
    "title": "Expose Octree to the scripting API",
    "user": {
      "login": "gitcatrat",
      "id": 58787197,
      "node_id": "MDQ6VXNlcjU4Nzg3MTk3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/58787197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gitcatrat",
      "html_url": "https://github.com/gitcatrat",
      "followers_url": "https://api.github.com/users/gitcatrat/followers",
      "following_url": "https://api.github.com/users/gitcatrat/following{/other_user}",
      "gists_url": "https://api.github.com/users/gitcatrat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gitcatrat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gitcatrat/subscriptions",
      "organizations_url": "https://api.github.com/users/gitcatrat/orgs",
      "repos_url": "https://api.github.com/users/gitcatrat/repos",
      "events_url": "https://api.github.com/users/gitcatrat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gitcatrat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-31T21:25:33Z",
    "updated_at": "2020-05-05T10:05:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n3D project where instances need to be aware of their surroundings, mainly other close instances and do other advanced actions and calculations on close groups and specific parts of the world.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd have to use and populate 3rd-party (or my own) Octree to make these lookups efficiently.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGodot already has an Octree implementation, I would trust it (bugs and performance wise) a lot more than 3rd-party or my own implementation. _I propose to expose it in Godot API._ \r\n\r\nAnother option would be to expose Octree already instantiated and used by servers but that would probably come with lots of issues and caveats? On the up side it would be populated and accurate.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nExpose Godot internal Octree in Godot API, e.g `Octree octree = new Octree();`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt could be easily solved if you find a reliable 3rd-party library but it's already in Godot, isn't it?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's already in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/656/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/655",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/655/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/655/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/655/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/655",
    "id": 591128809,
    "node_id": "MDU6SXNzdWU1OTExMjg4MDk=",
    "number": 655,
    "title": "Copy a node property from the inspector",
    "user": {
      "login": "rezgi",
      "id": 41618561,
      "node_id": "MDQ6VXNlcjQxNjE4NTYx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41618561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rezgi",
      "html_url": "https://github.com/rezgi",
      "followers_url": "https://api.github.com/users/rezgi/followers",
      "following_url": "https://api.github.com/users/rezgi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rezgi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rezgi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rezgi/subscriptions",
      "organizations_url": "https://api.github.com/users/rezgi/orgs",
      "repos_url": "https://api.github.com/users/rezgi/repos",
      "events_url": "https://api.github.com/users/rezgi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rezgi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-03-31T13:53:04Z",
    "updated_at": "2020-04-02T10:19:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMaking a UI for my game and I wanted to change the font color of my label on a certain event.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTo change a property within my code, I hover on the said property shown in the inspector, then have to remember it and write it in my code. My brain is the limitation here.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to be able to right-click on any inspector property to copy its code equivalent in order to quickly use it in code.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf I want to change dynamically a label font color for example : Select the Label node > Go to Control / Custom Colors / Font Color. On hover the info tip shows the code property `custom_colors/font_color`. Then I right-click on the property and select 'Copy property code' or something like that. Now I can juste paste it in my code !\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYeah no big deal, just use our code-overloaded brain to remember one more information :)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a quality-of-life improvement, saves you milliseconds ! It has no price.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/654",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/654/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/654/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/654/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/654",
    "id": 590524976,
    "node_id": "MDU6SXNzdWU1OTA1MjQ5NzY=",
    "number": 654,
    "title": "Treat Android hardware keys (such as the Back button) as InputEvents",
    "user": {
      "login": "andy-noisyduck",
      "id": 45369568,
      "node_id": "MDQ6VXNlcjQ1MzY5NTY4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45369568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andy-noisyduck",
      "html_url": "https://github.com/andy-noisyduck",
      "followers_url": "https://api.github.com/users/andy-noisyduck/followers",
      "following_url": "https://api.github.com/users/andy-noisyduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/andy-noisyduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andy-noisyduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andy-noisyduck/subscriptions",
      "organizations_url": "https://api.github.com/users/andy-noisyduck/orgs",
      "repos_url": "https://api.github.com/users/andy-noisyduck/repos",
      "events_url": "https://api.github.com/users/andy-noisyduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andy-noisyduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-30T19:11:33Z",
    "updated_at": "2020-03-31T14:38:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA mobile game for Android\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAndroid supports a hardware back button (modern devices tend to implement this in software as an overlay, but with same functionality). Currently this is handled by raising the `MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST` notification. This behaviour is inconsistent with other hardware keys, and inconsistent with handling inputs in Godot generally. It also makes working with the back button needlessly complicated.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe back key should raise an `InputEventKey` (or similar, perhaps a new concrete class) as if it was a  key press. This not only makes handling the input consistent with other keys, but also means GUI `Control`s and other nodes handling inputs events can consume the event and stop it propagating (e.g. with `accept_event()`). See [input event diagram](https://docs.godotengine.org/en/3.2/tutorials/inputs/inputevent.html#how-does-it-work).\r\n\r\nRight now if you want to handle the hardware key, you end up with a bunch of logic to work out where that event should be processed. The work is non trivial, yet you end up with something that looks a lot like Godot's existing input loop.\r\n\r\nMy recent use cases of the back key include a stack of popup windows that can be closed, an in-game menu, and navigating through a stack of scenes. These are all cases I would be using Godot's GUI classes for, yet they have no nice way of handling the button.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nCovered above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMore than a few. You could build your own input manager, but it would be non-trivial. It would also seem to go against the designs of the current input system.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSupport for the back button is already core, I just think it can be done in a much friendlier way.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/654/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/653",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/653/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/653/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/653/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/653",
    "id": 590507786,
    "node_id": "MDU6SXNzdWU1OTA1MDc3ODY=",
    "number": 653,
    "title": "Export named classes and subclasses as value types",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-30T18:41:44Z",
    "updated_at": "2020-09-13T23:54:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am having problems with godot not enforcing static typing on the inspector\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think custom classes and resources should be exportable as both value type and reference type.\r\n\r\nsay I have a script that has the following...\r\n```\r\nclass_name Stats\r\nexport (int) var health\r\nexport (int) var energy\r\n```\r\nor a class that has the following..\r\n```\r\nclass Stats:\r\n    var health\r\n    var energy\r\n```\r\n\r\nI should beable to have the following\r\n```\r\nextends RigidBody2D\r\nexport(Stats, true) var stats\r\n```\r\n\r\nit would be serialized to look like this..\r\n![image](https://user-images.githubusercontent.com/2453707/77948606-8c153c80-727a-11ea-964e-955a5a964902.png)\r\n\r\ninstead of this..\r\n![image](https://user-images.githubusercontent.com/2453707/77948857-e44c3e80-727a-11ea-8a12-40e9b3f15ba3.png)\r\n \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n*see above*\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used quite a lot actually to serialize data.\r\nI don't think this can be worked around at the moment.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit enforces type safety and also doesn't require us to have reference based resources everywhere",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/652",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/652/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/652/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/652/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/652",
    "id": 590143615,
    "node_id": "MDU6SXNzdWU1OTAxNDM2MTU=",
    "number": 652,
    "title": "Rename `Reference` to `RefCounted`",
    "user": {
      "login": "RandomShaper",
      "id": 11797174,
      "node_id": "MDQ6VXNlcjExNzk3MTc0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11797174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomShaper",
      "html_url": "https://github.com/RandomShaper",
      "followers_url": "https://api.github.com/users/RandomShaper/followers",
      "following_url": "https://api.github.com/users/RandomShaper/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandomShaper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandomShaper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandomShaper/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomShaper/orgs",
      "repos_url": "https://api.github.com/users/RandomShaper/repos",
      "events_url": "https://api.github.com/users/RandomShaper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandomShaper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-30T09:39:54Z",
    "updated_at": "2020-09-26T07:57:32Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis affects engine development rather than projects. Users can still see the name of the class, but won't matter much in projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nN/A\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe have a reference-counted base class called `Reference`. That name is confusing, since they are not references, but things that are referred to.\r\nThe idea is to rename it to `RefCounted` so it describes better what it names and also to avoid hard to understand types in the C++ side, like `Ref<Reference>` (what?, a reference to a reference?).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`class Mesh : public Reference` would become `class Mesh : public RefCounted`. Much easier to understand, right?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot possible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/652/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/651",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/651/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/651/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/651/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/651",
    "id": 590081515,
    "node_id": "MDU6SXNzdWU1OTAwODE1MTU=",
    "number": 651,
    "title": "Add support for named UV maps / Increase the limit of UV maps per material above 2",
    "user": {
      "login": "Uradamus",
      "id": 4281292,
      "node_id": "MDQ6VXNlcjQyODEyOTI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4281292?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Uradamus",
      "html_url": "https://github.com/Uradamus",
      "followers_url": "https://api.github.com/users/Uradamus/followers",
      "following_url": "https://api.github.com/users/Uradamus/following{/other_user}",
      "gists_url": "https://api.github.com/users/Uradamus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Uradamus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Uradamus/subscriptions",
      "organizations_url": "https://api.github.com/users/Uradamus/orgs",
      "repos_url": "https://api.github.com/users/Uradamus/repos",
      "events_url": "https://api.github.com/users/Uradamus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Uradamus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2020-03-30T08:09:42Z",
    "updated_at": "2020-12-02T12:49:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI've been working on 3D as a hobby for about 20 years now, first with Maya and then with Blender for the past 14 years or so. I want to start making any of several game projects I have in mind with Godot, but I keep running into limitations on the 3D front that keep making it feel like a non-starter.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to terrible [unresolved bleeding issues](https://github.com/godotengine/godot/issues/27837) with texture atlases that seem like they may never be resolved, the next best alternative are texture arrays. But there is a problem with that, as Godot materials only support 2 UV map slots, which effectively means 1 UV map per material if you want to bake lighting. Due to this limitation, every single texture in an array needs a unique material, since in order to use more than 1 index per material, you would need a UV map for each to associate with them. The whole point of using a texture atlas is to limit draw calls by allowing you to UV map different faces to several different sub-textures at once with a single material, something that can't be done in Godot with the current UV map setup and/or with the abysmal atlas support.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA way around this would be to change up the way UV maps are handled, replacing the hard coded 2 slot limit with the much more flexible named UV map setup adopted by most 3D programs and many other engines (Blender, Maya, Unreal, Panda3D, Armory, and UPBGE to name a few I've tried in the past).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSince Blender is what I have the most experience with, I can explain how they use it with their shader nodes, which is to have a UV Map node, which basically has a drop down field that lists all of the available UV maps by their name to choose from. and it's output can be fed into any node that needs UV map input. I would imagine in code they can be basically treated as variable names or used as string input for some sort of attribute lookup function.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'd be using it a lot if atlas support isn't some day fixed. The only alternative I see is having a material for every texture needed, which seems terribly inefficient. I would definitely prefer being able to use atlases, especially since I have a ton of legacy content that uses atlases already, but if that isn't an option, I'd want to be using texture arrays with multiple UV maps in their place.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDoesn't get much more core than UV maps when it comes to 3D.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/649",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/649/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/649/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/649/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/649",
    "id": 589895114,
    "node_id": "MDU6SXNzdWU1ODk4OTUxMTQ=",
    "number": 649,
    "title": "Make Particles emit a signal when it's finished emitting particles",
    "user": {
      "login": "Anyeos",
      "id": 5976100,
      "node_id": "MDQ6VXNlcjU5NzYxMDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5976100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Anyeos",
      "html_url": "https://github.com/Anyeos",
      "followers_url": "https://api.github.com/users/Anyeos/followers",
      "following_url": "https://api.github.com/users/Anyeos/following{/other_user}",
      "gists_url": "https://api.github.com/users/Anyeos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Anyeos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Anyeos/subscriptions",
      "organizations_url": "https://api.github.com/users/Anyeos/orgs",
      "repos_url": "https://api.github.com/users/Anyeos/repos",
      "events_url": "https://api.github.com/users/Anyeos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Anyeos/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-29T21:56:45Z",
    "updated_at": "2020-12-09T21:51:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA simple shoot em game with explosions.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt is unelegant when you make an explosion or some other effects write a lot of code to only call queue_free().\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf I have a signal for the Particles2D and Particles in general when it stop emitting, I can attach a function to it and call directly queue_free() when it finish. Or make more complex effects like spawning another particle.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc _on_Particles2D_finished():\r\n  queue_free()\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n```\r\nextends Node2D\r\n\r\nvar lifetime\r\n\r\nfunc _ready():\r\n\tlifetime = $Explosion.lifetime\r\n\t$Explosion.emitting = true\r\n\r\nfunc _process(delta):\r\n\tlifetime -= delta\r\n\tif lifetime < 0:\r\n\t\tqueue_free()\r\n```\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is easy to implement signals like the ones of AnimatedSprite",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/649/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/648",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/648/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/648/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/648/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/648",
    "id": 589853539,
    "node_id": "MDU6SXNzdWU1ODk4NTM1Mzk=",
    "number": 648,
    "title": "Tileset editor - create square collisions in one click, not three",
    "user": {
      "login": "blurymind",
      "id": 6495061,
      "node_id": "MDQ6VXNlcjY0OTUwNjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6495061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blurymind",
      "html_url": "https://github.com/blurymind",
      "followers_url": "https://api.github.com/users/blurymind/followers",
      "following_url": "https://api.github.com/users/blurymind/following{/other_user}",
      "gists_url": "https://api.github.com/users/blurymind/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blurymind/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blurymind/subscriptions",
      "organizations_url": "https://api.github.com/users/blurymind/orgs",
      "repos_url": "https://api.github.com/users/blurymind/repos",
      "events_url": "https://api.github.com/users/blurymind/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blurymind/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-29T18:30:21Z",
    "updated_at": "2020-06-14T01:19:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nHeartbeast's action rpg tutorial. See his comment on this feature too\r\nhttps://youtu.be/RPgTlxb7Bno?t=469\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe process of creating square collisions for each tile is painfully laborious.  I raised an issue about this in the past here, but my request was only half addressed\r\nhttps://github.com/godotengine/godot/issues/13283\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBasically right now if you want a tile to be a collision, you are required to go through three steps: select it, select the square button, click. Now try doing this 500 times\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI am going to point you to the gif I made from years ago\r\n![colusionshapefilltool](https://user-images.githubusercontent.com/6495061/33233521-17f98e86-d20f-11e7-9c5e-515e338e0241.gif)\r\n\r\nSee how in the gif, one click is required.You click/select a cell while the tool is active, it gets filled with a square. Also holding a modifier such as ctrl when clicking clears the cell or right clicking.\r\nOne thing that might be tricky is in telling the tool not to fill a cell if that cell is already filled .\r\n\r\nI guess the hardest part of implementing this would be in coming up with a function that detects if a cell contains a 4 point collision shape already - to prevent it from filling a cell twice if someone double clicks on it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, its an enhancement that is constantly used and needs to be done with the tileset editor directly. It will save hours of laborious boring work \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause we already have this tool, but it's not doing what its supposed to do in an efficient way. Writing an addon would be like patching a hole instead of fixing it",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/648/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/647",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/647/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/647/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/647/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/647",
    "id": 589838208,
    "node_id": "MDU6SXNzdWU1ODk4MzgyMDg=",
    "number": 647,
    "title": "Option to download individual export templates",
    "user": {
      "login": "ViktorEvil",
      "id": 4403212,
      "node_id": "MDQ6VXNlcjQ0MDMyMTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4403212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ViktorEvil",
      "html_url": "https://github.com/ViktorEvil",
      "followers_url": "https://api.github.com/users/ViktorEvil/followers",
      "following_url": "https://api.github.com/users/ViktorEvil/following{/other_user}",
      "gists_url": "https://api.github.com/users/ViktorEvil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ViktorEvil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ViktorEvil/subscriptions",
      "organizations_url": "https://api.github.com/users/ViktorEvil/orgs",
      "repos_url": "https://api.github.com/users/ViktorEvil/repos",
      "events_url": "https://api.github.com/users/ViktorEvil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ViktorEvil/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-29T17:12:00Z",
    "updated_at": "2020-03-31T14:18:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nHeartBeast 1-bit course\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHave to download export templates that I do not need / want\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\ncould we have the option to select individual export templates instead of the entire package. As Godot gets more advanced this Export template package is getting larger. Individual templates would reduce bandwidth on the server.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDisplay a list of all export templates available then put a tick by the needed templates\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI envision it would be used a lot\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI do not think that anybody using Godot requires all export templates available",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/647/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/645",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/645/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/645/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/645/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/645",
    "id": 589655923,
    "node_id": "MDU6SXNzdWU1ODk2NTU5MjM=",
    "number": 645,
    "title": "Improve main window open/close behaviour",
    "user": {
      "login": "wwjjbb",
      "id": 11904421,
      "node_id": "MDQ6VXNlcjExOTA0NDIx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11904421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wwjjbb",
      "html_url": "https://github.com/wwjjbb",
      "followers_url": "https://api.github.com/users/wwjjbb/followers",
      "following_url": "https://api.github.com/users/wwjjbb/following{/other_user}",
      "gists_url": "https://api.github.com/users/wwjjbb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wwjjbb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wwjjbb/subscriptions",
      "organizations_url": "https://api.github.com/users/wwjjbb/orgs",
      "repos_url": "https://api.github.com/users/wwjjbb/repos",
      "events_url": "https://api.github.com/users/wwjjbb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wwjjbb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-28T20:42:10Z",
    "updated_at": "2020-03-29T15:03:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nN/A - its just about day to day working with Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot starts up in the project manager, then you get to edit a project and the editor opens up. However, closing the editor window terminates Godot. You can get back to the project manager but with a menu option named \"Quit to the Project List\".\r\n\r\nAt a lower level, the confirmation dialogs are asking the wrong questions and providing confusingly named options...\r\n\r\nWhen you close the editor window with the close box at top right, you get asked to confirm exiting the editor. \r\n\r\n- Yes, the editor is going to exit, but only because the whole godot application is going to exit. So it's asking the wrong question - should be about 'is it ok to exit Godot'.\r\n\r\n- The buttons in the confirmation dialog are \"Quit\" and \"Cancel\", where \"Quit\" cancels the dialog and \"Cancel\" quits the application. You get used to it, but its crazy.\r\n\r\n- I suspect the whole reason for this dialog is to stop you exiting the application accidentally when all you really meant was to return to the project manager.\r\n\r\nSo the way you currently get back to the project manager is the option in the Project menu, \"Quit to Project List\" - which brings up a confirmation \"Open Project Manager\" (cancel/yes)\r\n\r\n- the naming is confusing given this option is just closing the project.\r\n\r\n- The menu option should be \"Close Project...\" (I got here by opening a project from the project manager, so I expect closing the project takes me back)\r\n\r\n- The confirmation should be about closing the project\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe confirmation dialogs should be changed to ask the right questions and provide obvious responses. I'd have put that in as a bug except I think the close actions should be changed as well.\r\n\r\nClosing the edit window should take you back to where you opened it from, rather than exiting Godot. i.e. just close the project edit window. It's less of a surprise that way.\r\n\r\nThe Project menu should have priority over the Scenes actions because the edit window is effectively a project edit window and manages a group of scenes. The Project menu is what would be called the File menu in almost every other IDE - you just 'know' that the File menu will have an option to Exit the application and one to close the file (project) you opened to get here in the first place (the same as the window closebox action). Again it's less of a surprise this way.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nModify the question and response text in the confirmation dialog box for closing the Godot application. Affects translations.\r\n- \"Exit the editor?\" -> \"Are you sure you want to exit Godot?\"\r\n- \"Cancel\"\r\n- \"Quit\" -> \"Exit\"\r\n- Note: Yes/No responses would work too\r\n\r\nModify the question and response text in the confirmation dialog box for closing the project editor. Affects translations.\r\n- \"Open Project Manager?\" -> \"Are you sure you want to close this project?\"\r\n- \"Cancel\"\r\n- \" \"Yes\" -> \"Close\"\r\n- Note: Yes/No responses would work too\r\n\r\nIn the project editor window, adjust the existing Project menu\r\n- Move the \"Project\" menu to be left of the \"Scenes\" menu\r\n- Rename \"Project\" to \"File\"\r\n- Rename menu item \"Quit to Project List\" to \"Close Project...\" (no change to action). Also move the menu itme up the list, under \"Project Settings...\"\r\n- Add a new menu item \"Exit\" to the end of the menu - the action is to close the application, which is just the old closebox action.\r\n\r\nThe action for the project editor window close-box should be changed to use the Close Project... action rather than closing the application.\r\n\r\nThat's it really. No real impact on existing users but less confusing for new/casual users.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nDon't know, but doubt it. However its mostly tweaks to existing resources\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt rearranges existing functionality. There's not really any new code, the existing close actions move around a little and the resource text changes. \r\n\r\nA variation would be to do away with the standalone Project Manager and be like QtCreator, where the list of projects and the way to create a new one is just a big subwindow hiding any open project and providing something to show initially. That's a bigger change but I do wonder if the Project Manager window disappears while you are editing a project to stop you selecting another project at the same time.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/644",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/644/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/644/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/644/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/644",
    "id": 589616948,
    "node_id": "MDU6SXNzdWU1ODk2MTY5NDg=",
    "number": 644,
    "title": "Add support for Customizable/Scriptable Render Pipelines",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-03-28T17:03:29Z",
    "updated_at": "2020-04-28T15:01:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop-down 2D game that needs a custom rendering pipeline to permit the wanted visual effects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm working on a 2D project that needs a pretty custom way of rendering things. It needs to create multiple render buffers in the process, render objects to them using particular shader passes (custom shadow mapping, lighting, etc.), then feed them later to objects rendering themselves on screen (using another shader pass).\r\n\r\nRight now I have to implement all of this in Unity thanks to the Scriptable Render Pipeline, as there's no way of doing it with Godot.\r\nSo, my proposal is focused on general purpose things but also on things I need that I already do successfully in Unity. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think this feature is already planned for 4.0, this issue can eventually give some advice.\r\n\r\nCustomizable/Scriptable render pipelines should be able to:\r\n\r\n1. Completely or partially override the rendering pipeline of any camera/viewport, even the editor one.\r\n2. Provide the user shortcuts and modular utility methods to quickly replicate key parts of the Godot render pipeline (and/or a generic standard pipeline)\r\n3. Let the user create custom render targets for any use: to render to, to set as a global property in shaders/materials, etc.\r\n4. Let the user decide when, how and what objects to render, filtering them by shader \"tags\", shader passes, culling etc.\r\n5. Let the user decide the rules of each \"batch\" of object rendering, like rendering order, render targets, global shader properties, filtering, etc.\r\n6. Freely draw gizmos, the skybox and other extras.\r\n7. Optionally include a depth buffer to render textures, available and usable in 2D rendering too with depth writing and checking in fragment shaders.\r\n8. Profile and debug each rendering step thanks to (other feature proposal?) a frame debugger.\r\n\r\nThis proposal goes hand in hand with #496, as it would allow several of the points in the list, especially thanks to multiple shader passes in a single shader definition and to shader tags.\r\n\r\nOther suggestions are welcome!\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n<details>\r\n<summary>Unity implementation example</summary>\r\n\r\nUnity achieves the feature allowing the user to create a custom ScriptableObject asset (a Resource in Godot) extending RenderPipelineAsset and letting the user define serializable properties the pipeline can then use to change the rendering process.\r\n\r\nThen this new ScriptableObject has to implement a method that must return the real RenderPipeline object that does the actual rendering.\r\nThe RenderPipeline object implements a method that does the rendering, receiving all the available cameras (game and editor ones) and the rendering context.\r\n\r\nThe engine calls the ScriptableObject's RenderPipeline creation method every time its properties change and they can be fed to the RenderPipeline constructor.\r\n\r\nUnity allows the assignation of one of this assets for each rendering \"profile\", targeting different platforms or different performance targets.\r\nThen Unity pushes all of this a step further providing its standard pipelines as implementations of this Scriptable Render Pipelines system.\r\n\r\nI thinks this approach is good enough, but a more Godot way of doing the same thing would be welcome too.\r\n</details>\r\n<details>\r\n<summary>Godot implementation proposal</summary>\r\n\r\nI'd suggest an approach that is similar to the Unity one:\r\n1. The user begins creating a custom Resource RPS extending `RenderPipelineSettings `(new Resource type).\r\n2. RPS then can be filled with exported variables to define quality settings and other values the user might want to tweak in their rendering pipeline (e.g. directional shadow size, shadow atlas size and many more in the default render pipeline).\r\n3. RPS has to implement a function, let's say `_create_pipeline` that must return an object of type `RenderPipeline` (a new Reference type?)\r\nIn this function the user can initialize a `RenderPipeline` as he wishes following the settings that have been defined in the exported properties.\r\nIdeally, **even the default Godot render pipelines should be implementations of `RenderPipeline`** and the user should be able to return a properly tweaked version (within the limits of its quality settings) of one of them if he wants to.\r\n\r\n4. Then if the user wants to use a custom pipeline, he has to create a new implementation of `RenderPipeline` RP and return an instance of it in RPS's `_create_pipeline` function.\r\n\r\n5. RP in turn has to implement a function, let's call it `_render`.\r\n`_render` receives as arguments all it needs to properly create command queues, rendering rules, buffers, as well as providing the cameras in the scene, the renderable obejcts, etc.\r\nThis should not be very difficult thanks to the RenderingDevice abstraction.\r\n\r\n6. Finally the user can instantiate a RPS, change its settings, assign the newly created Resource to a new property in the Project Settings (Quality tab?), and see the RPS exported properties there too, like the standard render pipeline ones. (current quality settings window)\r\n![immagine](https://user-images.githubusercontent.com/19392104/78138969-0931e480-7428-11ea-9bac-92e6273776d6.png)\r\n\r\n7. The user can create a few instances of RPS in the project, tweak a bit their settings and assign them to different performance targets/profiles in the future, if it will ever be supported.\r\n\r\nIf we want to directly support partial customization of the default render pipeline too, the default `RenderPipeline` implementation could be extended by the user or it could provide several hooks.\r\n\r\n</details>\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, something like that could be achieved only modifying the engine source code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis can't be implemented with an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/644/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/643",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/643/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/643/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/643/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/643",
    "id": 589500125,
    "node_id": "MDU6SXNzdWU1ODk1MDAxMjU=",
    "number": 643,
    "title": "Open the editor by default when running Godot without any arguments in a project folder",
    "user": {
      "login": "jjangga0214",
      "id": 28584151,
      "node_id": "MDQ6VXNlcjI4NTg0MTUx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28584151?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jjangga0214",
      "html_url": "https://github.com/jjangga0214",
      "followers_url": "https://api.github.com/users/jjangga0214/followers",
      "following_url": "https://api.github.com/users/jjangga0214/following{/other_user}",
      "gists_url": "https://api.github.com/users/jjangga0214/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jjangga0214/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jjangga0214/subscriptions",
      "organizations_url": "https://api.github.com/users/jjangga0214/orgs",
      "repos_url": "https://api.github.com/users/jjangga0214/repos",
      "events_url": "https://api.github.com/users/jjangga0214/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jjangga0214/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-28T03:32:14Z",
    "updated_at": "2020-05-05T10:05:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**  _\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\nIn order to open the editor by CLI with pre-selecting a project, I need to provide a path of project.godot file, even though I am already in the same directory. \r\n\r\n```bash\r\ngodot project.godot\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** \r\n\r\nFor convenience, I want it to load project.godot file from the current directory if it exists and no explicit argument is given.\r\n\r\n```bash\r\ngodot\r\n```\r\n\r\nI personally feel this is sane default, and even popular GUI programs(e.g. IDEs) allow this behavior as well.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** _\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** _\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** _\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/643/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/642",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/642/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/642/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/642/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/642",
    "id": 589445194,
    "node_id": "MDU6SXNzdWU1ODk0NDUxOTQ=",
    "number": 642,
    "title": "Script Toolbar’s Dropdown menu Issue",
    "user": {
      "login": "Sousio",
      "id": 59539576,
      "node_id": "MDQ6VXNlcjU5NTM5NTc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/59539576?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sousio",
      "html_url": "https://github.com/Sousio",
      "followers_url": "https://api.github.com/users/Sousio/followers",
      "following_url": "https://api.github.com/users/Sousio/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sousio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sousio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sousio/subscriptions",
      "organizations_url": "https://api.github.com/users/Sousio/orgs",
      "repos_url": "https://api.github.com/users/Sousio/repos",
      "events_url": "https://api.github.com/users/Sousio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sousio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-27T22:33:09Z",
    "updated_at": "2020-03-29T14:57:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n**Context:**\r\nThe menu toolbar suggests immediate search and access functionality to use some modification toolkits, and as discussed in [https://github.com/godotengine/godot/issues/25918](url) it is an essential instrument to enhance usability and to learn and understand the software.\r\n\r\n**Describe the project you are working on:**\r\nAny Project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen in Script workspace, selecting each tool’s tab in Toolbar, would drop down a menu. If the menu’s item list is short, it would be shown beneath the selected tab header which is normal and good. (See Picture 1):\r\n![1 Search](https://user-images.githubusercontent.com/59539576/77805082-bad6bb80-709e-11ea-90d6-db09e7f6a9d2.png)\r\nHowever if the drop-down menu gets longer than viewport height, the menu -in order to be able to show all of it’s items at once- will be overdrawn on the selected tab header, which disables the ability to switch between other tabs and stops the looking up in toolbar temporarily. For example, as shown in picture2, selecting the “file” tab in toolbar, makes the other tools -search, edit, Go to, ...- unavailable, which introduces the user to a lock situation where he should click outside the menu to make it disappear and then repeat the procedure and be cautious not to trigger the long ones to be inadvertently locked again, which is inevitable. This can harm the UX, as it would happen frequently. \r\n\r\n![2 FileOld](https://user-images.githubusercontent.com/59539576/77805119-d215a900-709e-11ea-9d74-14978f119087.png)\r\n\r\nAnother minor issue arises for long menus like the Edit menu (Picture 3), as there would remain not enough space to add extra items in future. Although it seems more of a “Future proofing” problem as described in Best Practices guidelines, I think it would be prevented easily.\r\n\r\n![3 Edit](https://user-images.githubusercontent.com/59539576/77805151-e194f200-709e-11ea-9b63-432b8e772fb9.png)\r\n\r\n**So in short,**  the usability problems of showing menus on top of headers are: \r\n\r\n :small_red_triangle: 1) lock the switching and wandering between tabs\r\n :small_red_triangle: 2) there is no space to add other items at the end of currently long menus, \r\n :small_red_triangle: 3) By now, some menus are shown under the tab headers and some on top of it, which breaks the consistency and is not stylish for a good UI. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUsing some “Spin Box” or just another built-in “Drop-down” item in menus to allow hiding the additional items would solve the main problem. It also allows to add extra items to currently long menu lists. Aesthetically, it also makes all the menus to appear “Under” the toolbar headers which results in more consistent UI.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Improved UI design of the issue that is showed in picture 2 above, would look like something like this:\r\n![4 FileNew](https://user-images.githubusercontent.com/59539576/77805206-fbced000-709e-11ea-8398-ee4db7b34bfb.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAlthough the problem would be missed every time by a work-around by the user, I think this can harm the usability of the toolbar, as this problem with UI would happen very frequently.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe solution is related to appearance (displaying) of outer layers of GUI, and does not affect the inner core layers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/641",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/641/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/641/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/641/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/641",
    "id": 589008809,
    "node_id": "MDU6SXNzdWU1ODkwMDg4MDk=",
    "number": 641,
    "title": "Add public/private access modifiers to GDScript and autocompletion improvements",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2020-03-27T09:43:25Z",
    "updated_at": "2020-12-29T18:39:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nInside a GDScript class i often use \"private\" variables and functions that shouldn't be visible ouside but that instead are \"public\", hence visible and usable by everyone.\r\nMore or less related is the fact that autocompletion is cluttered, yes alphabetic order is good but the list always starts with lots of constants and the function or variable we want is usually buried in lots of other things that aren't useful in that moment.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLet us specify if a variable or function is private or protected(or whatever keywords you want to use), a private variable can only be used by the functions of the same class, protected means that it's also accessible by the classes that inherit from the class the variable is in.\r\n\r\nAbout autocompletion in my opinion it would be even more useful if suggestions were grouped by class, ordered from the leaf of the class tree back to the root class, or maybe add to the editor's options the possibility to order and filter what is shown.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nvar v(no access modifier means public)\r\nprotected var v(accessible only in the class it's in and the ones that inherit it)\r\nprivate var v(accessible only in the class it's in)\r\n\r\nAutocompletion suggestions would be grouped by class, ordered from the leaf to the root of the class tree, maybe with their class written somewhere.\r\nIt would be also helpful if the suggestions were colored the same way as in the editor, this way it would be even faster and easier to find what we want.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAccess modifiers and autocompletion are essential features so they would be used very often and probably they can't be made with few lines of script.\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt seems to me that a GDScript feature like these ones should be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/641/reactions",
      "total_count": 30,
      "+1": 28,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/635",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/635/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/635/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/635/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/635",
    "id": 587935753,
    "node_id": "MDU6SXNzdWU1ODc5MzU3NTM=",
    "number": 635,
    "title": "Improve multi-input properties in editor inspector",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-25T19:25:11Z",
    "updated_at": "2020-03-30T10:10:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nnone really its just a suggestion to make godot look nicer.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest the following...\r\n- Serialize vectors, rects and other multi input propertieson one line. \r\n- Allow us to drag the border between the property name and property value.\r\n- Allow us to hide properties and inherited nodes in the inspector  for encapsulation.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nso instead of the vectors an and rects being serialize like so..\r\nlabel\r\n[][][][]\r\n\r\nit would be like so..\r\nlabel |drag border| [][][][]\r\n\r\nand hiding properties and inherited nodes would be used with the hide keyword like so..\r\n```\r\nextends Node2D\r\nhides(\"node_2d/transform\");\r\nhides(\"node_2d/z_index/z_index\");\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would assume all three could be worked around with a editor script however its difficult to say since there doesn't seem to be much tutorials on implementing things like this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits makes ui look nicer and allows for encapsulation which improve workflow.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/634",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/634/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/634/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/634/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/634",
    "id": 587917854,
    "node_id": "MDU6SXNzdWU1ODc5MTc4NTQ=",
    "number": 634,
    "title": "Property Links",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-25T18:53:31Z",
    "updated_at": "2020-03-26T17:44:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpaceShip game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to link the root node's script properties to its children node's properties\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest that property links be added.\r\nbasically it would be a editor feature that allows you to link a node's properties to another node's property in the inspector.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nbasically there would be something like the keyframe icon on all properties in which you can click and select a node and a property you want to link. \r\nnote the property has to have the same type.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit can be worked around with a script but its tedious and would be much better in the editor.\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit helps people make games faster and allows for encapsulation.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/634/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/633",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/633/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/633/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/633/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/633",
    "id": 587892756,
    "node_id": "MDU6SXNzdWU1ODc4OTI3NTY=",
    "number": 633,
    "title": "Save code folding state for closed scripts",
    "user": {
      "login": "djrain",
      "id": 33777501,
      "node_id": "MDQ6VXNlcjMzNzc3NTAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/33777501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djrain",
      "html_url": "https://github.com/djrain",
      "followers_url": "https://api.github.com/users/djrain/followers",
      "following_url": "https://api.github.com/users/djrain/following{/other_user}",
      "gists_url": "https://api.github.com/users/djrain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djrain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djrain/subscriptions",
      "organizations_url": "https://api.github.com/users/djrain/orgs",
      "repos_url": "https://api.github.com/users/djrain/repos",
      "events_url": "https://api.github.com/users/djrain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djrain/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-25T18:12:53Z",
    "updated_at": "2020-04-18T12:31:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\n\r\nA project using GDScript.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen I close a script, I would hope for the code folding state to be saved and restored the next time I open it. But when I reopen a script, all code is unfolded. \r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSave the code folding state of the script so it restores exactly how I left it. \r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNothing more to say really. There can be an option to toggle this behavior, but it should be enabled by default IMO.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNope. Workaround is to keep all scripts open, but that's cluttery and bad for editor performance.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI think most people who use code folding would appreciate this option. Probably needs to be core anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/633/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/632",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/632/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/632/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/632/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/632",
    "id": 587836828,
    "node_id": "MDU6SXNzdWU1ODc4MzY4Mjg=",
    "number": 632,
    "title": "Add static typing for loop variables in `for` loops",
    "user": {
      "login": "ttencate",
      "id": 90930,
      "node_id": "MDQ6VXNlcjkwOTMw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/90930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ttencate",
      "html_url": "https://github.com/ttencate",
      "followers_url": "https://api.github.com/users/ttencate/followers",
      "following_url": "https://api.github.com/users/ttencate/following{/other_user}",
      "gists_url": "https://api.github.com/users/ttencate/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ttencate/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ttencate/subscriptions",
      "organizations_url": "https://api.github.com/users/ttencate/orgs",
      "repos_url": "https://api.github.com/users/ttencate/repos",
      "events_url": "https://api.github.com/users/ttencate/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ttencate/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-03-25T16:45:25Z",
    "updated_at": "2020-11-22T14:25:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA Zachtronics style puzzle game, using static typing as much as possible.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMy code does a lot of work with `Array`s, which contain objects that are all the same type. This is extremely common with arrays in general; I've rarely seen use cases for arrays containing completely arbitrary types. There's almost always at least a common base type for all elements.\r\n\r\nWhen looping over the `Array` with a `for` loop, the [docs](https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/static_typing.html#cases-where-you-cant-specify-types) explicitly state that you can't specify a type. This is forbidden:\r\n\r\n    for name: String in names:\r\n        ...\r\n\r\nSo inside the loop body, `name` will be untyped, even if we _know_ we started out with an array of `String`s. We'd prefer to fail with a clear error if that assumption is ever violated.\r\n\r\nThe reason, according to the docs, is:\r\n\r\n> You can’t force the assignment of types in a `for` loop, as each element the `for` keyword loops over already has a different type.\r\n\r\nThat's a nonsensical argument; in other places (e.g. simple variable assignments) it's entirely possible assign values of unknown types to variables that have a static type:\r\n\r\n    var foo = 0\r\n    var bar: String = foo  # Fine at compile time, error at runtime.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAllow syntax like the above:\r\n\r\n    for name: String in names:\r\n        ...\r\n\r\nIt would check the type at runtime and throw the usual error if it doesn't match:\r\n\r\n    Trying to assign a value of type 'whatever' to a variable of type 'String'.\r\n\r\nWithin the body of the `for` loop, `name` would have the type `String` and provide autocompletion and other static type checks accordingly.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI would hope that it's fairly straightforward to add this to GDScript, but I've never looked at that part of the codebase before so I might be wrong.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nOne workaround is to live with a dynamically typed loop variable, at the cost of losing autocompletion and type checking in the editor.\r\n\r\nThe other workaround is to use a helper variable and cast it explicitly:\r\n\r\n    for temp_name in names:\r\n        var name := temp_name as String\r\n        ...\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a core GDScript feature, so it cannot be implemented externally.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/632/reactions",
      "total_count": 30,
      "+1": 29,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/628",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/628/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/628/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/628/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/628",
    "id": 587210673,
    "node_id": "MDU6SXNzdWU1ODcyMTA2NzM=",
    "number": 628,
    "title": "Add low-level physics queries to KinematicBody",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 5,
    "created_at": "2020-03-24T18:59:42Z",
    "updated_at": "2020-04-07T07:28:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a project that have some objects that moves in the scene with custom behaviours:\r\n- Projectiles that moves strangely.\r\n- Characters that perform complex movements like wall running or wall to wall jumping, etc...\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current kinematic body is designed to support only basic character motion through the APIs  `move_and_slide` and the `move_and_collide`, and doesn't give much room for customization.\r\n\r\nIf you need to integrate anything different from a character, an animal movement (horse mount) or a kinematic car (see crash bandicoot) or even a simple projectile that needs to penetrate walls or a more complex character motion, you will notice that the two functions above are not enough.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo make the kinematic body more flexible, I propose to add some low level queries directly on the 'Kinematic Body', that together with `move_and_slide` and `move_and_collide` will allows integrating any motion mechanism directly from GDScript.\r\n\r\nThis enhancement will give enough freedom to anyone, to integrate its specific motion mechanism without having the needs to ask for a feature proposal.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's just matter of exposing what's already into Godot, and this is an integration example: https://github.com/godotengine/godot/pull/37225\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo because, it's about adding some low level APIs to get more freedom from the script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis change is about exposing some core functions, that will eventually add the possibility for new plug-ins to land in the assets library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/628/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/627",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/627/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/627/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/627/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/627",
    "id": 586879326,
    "node_id": "MDU6SXNzdWU1ODY4NzkzMjY=",
    "number": 627,
    "title": "Custom function to call when a node with a certain group is added",
    "user": {
      "login": "kb173",
      "id": 18697097,
      "node_id": "MDQ6VXNlcjE4Njk3MDk3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18697097?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kb173",
      "html_url": "https://github.com/kb173",
      "followers_url": "https://api.github.com/users/kb173/followers",
      "following_url": "https://api.github.com/users/kb173/following{/other_user}",
      "gists_url": "https://api.github.com/users/kb173/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kb173/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kb173/subscriptions",
      "organizations_url": "https://api.github.com/users/kb173/orgs",
      "repos_url": "https://api.github.com/users/kb173/repos",
      "events_url": "https://api.github.com/users/kb173/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kb173/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-24T11:10:29Z",
    "updated_at": "2020-03-24T21:14:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA landscape visualization with different rendering styles.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nChanging the rendering style often implies setting a shader parameter. This can happen in different nodes all over the scene tree, such as `MeshInstance`s or `Particles`. Because they are different node types, inheritance is not an option.\r\n\r\nThe most elegant solution I could think of is a group for nodes which set a specific shader parameter based on the render style. This mostly works well: When the rendering style is changed, all nodes of this group are iterated over and adapted accordingly.\r\n\r\nHowever, when a node is instanced, it also initially needs to set the current render style. This is where the limitation appears: There is no way to react to a node of a specific group being added.\r\n\r\nOur current solution is to react to the `node_added` signal from the `SceneTree`, check whether this node is in the render-style-shader-parameter group, and if so, set the parameter. However, this seems like it introduces unnecessary overhead to adding any node (which happens very often).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature I'm proposing is a way to set a function which is called when there is a new node of a certain group. Similarly to how a property can be set on all nodes of a group, or a function can be called on all nodes of a group, this custom group-based `_ready` addition can be set for a group on the whole tree.\r\n\r\nSo for my specific problem, I could then add a function which sets the initial render style of the passed node, and specify that this function should be called when a node of a certain group is added (or when a node is added to a certain group).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI'm not sure what the most elegant way to solve this would be, but since most group-based function call methods are in the `SceneTree`, I would add a function there, something like:\r\n\r\n```\r\nget_tree().set_group_node_added_method(String group_name, Object target, String function_name)\r\n```\r\n\r\nThus, when a node in the given group with `group_name` is added to the tree, the function with the given `function_name` on the given `target` is called.\r\n\r\nThe function is also called when an existing node is added to the group with the given `group_name`, even if it was already in the tree.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIf it's not needed or doesn't fit into the design philosophy of a project, the function can just not be used.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI believe something like this could be valuable in many situations, especially where inheritance is not an option. It would make groups a more powerful and complete tool and allow new design patterns to be cleanly realized in Godot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/626",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/626/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/626/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/626/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/626",
    "id": 586877172,
    "node_id": "MDU6SXNzdWU1ODY4NzcxNzI=",
    "number": 626,
    "title": "Particle improvements and Scenes as Particles",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-24T11:06:38Z",
    "updated_at": "2020-03-24T23:49:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthe particle system is really confusing and limited\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI have already said this in a (very messy lol) comment here: https://github.com/godotengine/godot-proposals/issues/516\r\nbut i post here too just to be sure, feel free to close if redundant.\r\n\r\nMy idea is to have simple and complex particles, or to be more precise improve particle node and material and add the ability to use scenes as particles.\r\n\r\nActually there are the particle node and the particle material and both are really confusing and limited, in my opinion in order to make things simple and clear we should clearly define the roles of each entity.\r\n\r\nThe particle node should be a simple emitter(even better if renamed particle emitter), think of a gun or cannon, it simply shoots things in a direction without really caring about the bullet, and then there's the particle itself with all the info about its lifetime, movement, look and so on.\r\nInstead of making the current particles more complex i would suggest to keep them limited and introducing a new kind of particle, a scene particle, a particle that's literally a scene, it would be heavy obviously, but think about the flexibility and all the mindblowing things it could do, and it would be better to have the choice of a limited but performant particle material or a heavy but flexible scene particle instead of just making the particle material more complex and heavy.\r\n\r\nHere some ideas to make the particle node and material better:\r\n\r\n1)the particle node/emitter should be simplified, it shoud only have infos about where and when shooting particles, here the parameters:\r\n-emitting true/false\r\n-min and max number of particles emitted at the same time\r\n-min and max time between an emission and the other, 0 and 0 would mean constant emission\r\n-number of emissions, 0 would mean unlimited\r\n-minimum and maximum y and z shooting angles, min=(0,0) and max=(0,0) would shoot straight like a gun,  min=(-20,-20) and max=(20,20) would act like a shotgun, while min=(0,0) and max=(359,359) would mean shoot all around like an explosion\r\n-minimum and maximum emission distance from the emission center\r\n\r\n2)the particle material should be simplified too, since the particle node/emitter takes care of the initial direction that info is no more necessary. About its movement, think of a cartesian grid, the particle emitter without rotation and with a shooting angle of (0,0) shots the particle in the +x direction, we could use curves to determine how it moves along the local y and z axis during its lifetime. If you want particles all around the emitter you just make the particle emitter rotate and give the particle a very curved y and z curves.\r\nHere's what particle material should have:\r\n-min and max lifetime\r\n-mesh\r\n-color ramp(but maybe it would be better to let the mesh material handle the color?)\r\n-min and max acceleration and speed(along the local \"x axis\" trajectory)\r\n-y and z curves to determine how the particle moves along the local \"x axis\" trajectory\r\n-min and max initial value, acceleration and speed for rotation and scale(for the look only, they don't affect the movement)\r\n\r\n3)in addition to shader and particle materials give us the ability to use scenes as particles, this way we could have all the collision, light and complex behaviour that we want(we could make particles that create other particles like fireworks, or particles that follow the player, others that have complex movements or why not spawning enemies, bonues etc), at the cost of efficiency, in addition to the limited but more efficient particles we already have.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the editor it needs to change the particle node and material settings and add the option to use scenes as particles in addition to shader and particle material.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe scene emitter could be easily made by code, but the improvements at the current particle node and material would be harder i think.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell the particle system is a core feature so it should remain core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/624",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/624/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/624/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/624/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/624",
    "id": 586606045,
    "node_id": "MDU6SXNzdWU1ODY2MDYwNDU=",
    "number": 624,
    "title": "RichTextLabel scroll handle visibility option in Inspector",
    "user": {
      "login": "freemanfromgodotengine",
      "id": 11817561,
      "node_id": "MDQ6VXNlcjExODE3NTYx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11817561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/freemanfromgodotengine",
      "html_url": "https://github.com/freemanfromgodotengine",
      "followers_url": "https://api.github.com/users/freemanfromgodotengine/followers",
      "following_url": "https://api.github.com/users/freemanfromgodotengine/following{/other_user}",
      "gists_url": "https://api.github.com/users/freemanfromgodotengine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/freemanfromgodotengine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/freemanfromgodotengine/subscriptions",
      "organizations_url": "https://api.github.com/users/freemanfromgodotengine/orgs",
      "repos_url": "https://api.github.com/users/freemanfromgodotengine/repos",
      "events_url": "https://api.github.com/users/freemanfromgodotengine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/freemanfromgodotengine/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-24T00:35:05Z",
    "updated_at": "2020-03-24T11:07:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a mobile app. Nice text scrolling is one of the things I need. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use RichTextLabel for smooth and good looking text scrolling, but I noticed, that there is no way to hide or make invisible scroll handle from Godot's UI. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn node inspector there are options/properties like Scroll Active, Selection Enabled etc., but there is no option 'Scroll Handle Enabled' nor something similar.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimple check box 'Scroll Handle On that basically would to what \r\nRichTextLabel.get_child(0).modulate.a = 0\r\n![scroll_handle_example](https://user-images.githubusercontent.com/11817561/77375927-3b2fb080-6d6f-11ea-99d6-aaf5792b8cd8.png)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt expect it to be used often. Yes, there is RichTextLabel.get_child(0).modulate.a = 0 that does the trick, but if we put check boxes for CanvasItem Visible, or Clip Content, then why not do something about visibility of the scroll handle?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRichTextLabel is already in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/623",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/623/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/623/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/623/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/623",
    "id": 586400200,
    "node_id": "MDU6SXNzdWU1ODY0MDAyMDA=",
    "number": 623,
    "title": "with(instance) with constructor",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-23T17:47:35Z",
    "updated_at": "2020-04-23T11:52:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a puzzle game which works similar to Rubik's cubes and combination locks\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOne of my objects is changing the effect of another in a lot of ways and it is tedious to keep doing otherobject.property1.dosomething()\r\notherobject.property1.dosomethingelse()..etc\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nif we had a with(instance) method like game maker then it would be less tedious an easier to read. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhttps://docs.yoyogames.com/source/dadiospice/002_reference/001_gml%20language%20overview/401_18_with.html \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEither tediously or by writing a method in another class when organizationally it might not fit as well there\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts used fairly often in gml I don't see why it wouldn't be in here. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/623/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/621",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/621/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/621/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/621/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/621",
    "id": 585869973,
    "node_id": "MDU6SXNzdWU1ODU4Njk5NzM=",
    "number": 621,
    "title": "Independent X and Y animation of node's position.",
    "user": {
      "login": "freemanfromgodotengine",
      "id": 11817561,
      "node_id": "MDQ6VXNlcjExODE3NTYx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11817561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/freemanfromgodotengine",
      "html_url": "https://github.com/freemanfromgodotengine",
      "followers_url": "https://api.github.com/users/freemanfromgodotengine/followers",
      "following_url": "https://api.github.com/users/freemanfromgodotengine/following{/other_user}",
      "gists_url": "https://api.github.com/users/freemanfromgodotengine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/freemanfromgodotengine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/freemanfromgodotengine/subscriptions",
      "organizations_url": "https://api.github.com/users/freemanfromgodotengine/orgs",
      "repos_url": "https://api.github.com/users/freemanfromgodotengine/repos",
      "events_url": "https://api.github.com/users/freemanfromgodotengine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/freemanfromgodotengine/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-23T01:39:04Z",
    "updated_at": "2020-03-24T23:50:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMobile app\r\nI was trying to animate the UI elements in my project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have found an unnecessary limitation in the node's animation system.\r\nRight now node's position's animation animates X and Y coordinates together and in the process it overwrites the settings of the layout preset of the node. \r\nVideo of the problem:\r\n![godot_animation01](https://user-images.githubusercontent.com/11817561/77271181-4ec71280-6cae-11ea-96eb-2612406d39b0.gif)\r\n\r\n![godot_animation02](https://user-images.githubusercontent.com/11817561/77271184-51c20300-6cae-11ea-9301-50d04e976098.gif)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt should be possible to set the node's layout to bottom right for example and let it stay there and animate only 'up & down' Y value, with X reacting according to layout preset - bottom right - and not to be set by animation X position so... the sprite should move up and down and in the same time stick to the right edge of the window.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMockup video of how it should work after animating only Y position:\r\n![godot_animation05](https://user-images.githubusercontent.com/11817561/77347286-e755a500-6d37-11ea-8a2f-f920415242fd.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think positioning and layering nodes is used very often. I imagine, giving it more flexibility should be a desired course of action.\r\nI can also imagine, that this kind of feature can be (like most limitations) worked around somehow.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPosition of nodes is already a core feature, so it would be logical to keep it's corrections/enhancementsin the core as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/621/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/620",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/620/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/620/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/620/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/620",
    "id": 585767842,
    "node_id": "MDU6SXNzdWU1ODU3Njc4NDI=",
    "number": 620,
    "title": "Add to deletion confirmation a warning for the user to check files inside folder",
    "user": {
      "login": "orchym",
      "id": 60109666,
      "node_id": "MDQ6VXNlcjYwMTA5NjY2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/60109666?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/orchym",
      "html_url": "https://github.com/orchym",
      "followers_url": "https://api.github.com/users/orchym/followers",
      "following_url": "https://api.github.com/users/orchym/following{/other_user}",
      "gists_url": "https://api.github.com/users/orchym/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/orchym/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/orchym/subscriptions",
      "organizations_url": "https://api.github.com/users/orchym/orgs",
      "repos_url": "https://api.github.com/users/orchym/repos",
      "events_url": "https://api.github.com/users/orchym/events{/privacy}",
      "received_events_url": "https://api.github.com/users/orchym/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-22T17:17:18Z",
    "updated_at": "2020-05-05T10:02:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nUsing Godot to make my game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAccidentally deleting files not shown inside Godot's file structure.\r\n\r\nGodot doesn't show some files it doesn't recognize inside the FileSystem tab, making it look like some folders are empty, while in reality they aren't.\r\nSome filetypes that this happens to are:\r\n\r\n- .ICOs and .ICNSs (Icon files)\r\n- .GODOT (Project files)\r\n- .CFG (Config files, such as \"export_presets.cfg\")\r\n- .MD (Markdown files)\r\n- .KRA (Krita files)\r\n- Anything that comes out of Godot's exports\r\n\r\nIt's really annoying to accidentally delete files from a supposedly empty folder.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding another line of warning to the confirmation when deleting folders, making it look like so:\r\n\r\n> Please Confirm...\r\n> \r\n> Remove selected files from the project? (Can't be restored)\r\n> There may still be files not recognized by Godot inside this folder.\r\n\r\nAnd/Or maybe trying to recognize if the folder is empty before deleting it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nif not FolderToDelete.empty():\r\n\tWarningMessage = \"Remove selected files from the project? (Can't be restored)\\nThere may still be files not recognized by Godot inside this folder.\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt's an UI enhancement, i believe it will be used often, if reading the message is to use it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause confusions like these really shouldn't happen in any circumstances.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/620/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/619",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/619/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/619/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/619/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/619",
    "id": 585760858,
    "node_id": "MDU6SXNzdWU1ODU3NjA4NTg=",
    "number": 619,
    "title": "Adding Open Projects Folder in Project Manager",
    "user": {
      "login": "stebulba",
      "id": 26193340,
      "node_id": "MDQ6VXNlcjI2MTkzMzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26193340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stebulba",
      "html_url": "https://github.com/stebulba",
      "followers_url": "https://api.github.com/users/stebulba/followers",
      "following_url": "https://api.github.com/users/stebulba/following{/other_user}",
      "gists_url": "https://api.github.com/users/stebulba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stebulba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stebulba/subscriptions",
      "organizations_url": "https://api.github.com/users/stebulba/orgs",
      "repos_url": "https://api.github.com/users/stebulba/repos",
      "events_url": "https://api.github.com/users/stebulba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stebulba/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-03-22T16:43:47Z",
    "updated_at": "2020-03-27T15:10:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAll my projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am managing all my projects, changing theirs folder. Making clean. But they miss one feature to help to mange all my projects, or help to add new assets on projects folder. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a new button ( Open Folder ) of the selected projet in the Projet Manager.\r\n![godot-new-folder](https://user-images.githubusercontent.com/26193340/77254753-6617e880-6c39-11ea-8876-2d180a45661f.jpg)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/617",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/617/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/617/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/617/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/617",
    "id": 585615363,
    "node_id": "MDU6SXNzdWU1ODU2MTUzNjM=",
    "number": 617,
    "title": "Make object manipulation gizmos less transparent for better visibility",
    "user": {
      "login": "Sakari369",
      "id": 1212726,
      "node_id": "MDQ6VXNlcjEyMTI3MjY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1212726?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sakari369",
      "html_url": "https://github.com/Sakari369",
      "followers_url": "https://api.github.com/users/Sakari369/followers",
      "following_url": "https://api.github.com/users/Sakari369/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sakari369/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sakari369/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sakari369/subscriptions",
      "organizations_url": "https://api.github.com/users/Sakari369/orgs",
      "repos_url": "https://api.github.com/users/Sakari369/repos",
      "events_url": "https://api.github.com/users/Sakari369/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sakari369/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-22T00:31:23Z",
    "updated_at": "2020-05-05T09:57:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAny project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nHard to see eg. camera manipulation gizmos on a dark background and especially when aligned with the axis, see image attached:\r\n\r\n![Screenshot 2020-03-22 at 2 13 54](https://user-images.githubusercontent.com/1212726/77239478-d562ed80-6be3-11ea-9da3-76cbef2df4a3.png)\r\n\r\nCan you spot the blue axis movement gizmo ? You can, if you focus closely, but took me some time to figure out where it is. Can be difficult on a night mode screen especially or not using very bright screen settings.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWould lessen the transparency for the non-selected gizmos by default. Would make it easier to spot the manipulation gizmos.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nMake all the gizmos less transparent by default when not selected. See attached screenshot from Blender:\r\n\r\n![Screenshot 2020-03-22 at 2 19 12](https://user-images.githubusercontent.com/1212726/77239495-28d53b80-6be4-11ea-8d0a-ff0d4a251a09.png)\r\n\r\nIn blender the gizmos are still slightly transparent, but only slightly. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nPart of core mechanics.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/617/reactions",
      "total_count": 6,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/615",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/615/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/615/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/615/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/615",
    "id": 585583564,
    "node_id": "MDU6SXNzdWU1ODU1ODM1NjQ=",
    "number": 615,
    "title": "Disallow script that inherit from a type be assigned to something else",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-21T20:59:23Z",
    "updated_at": "2020-05-09T12:18:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nspaceship project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't remeber what type a script is without opening and looking at what it inherits \r\nI keep getting crashes due to accidentally accessing something that doesn't exist\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nbasically nodes would only accept a script that inherit from them or a child node.\r\nthis would solve some crashes and would overall improve workflow\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nfor example this could be assigned to a TextureRect but not a Node...\r\n```\r\nextends TextureRect\r\n```\r\nhowever this could be assigned to a TextureRect and a Node...\r\n```\r\nextends Node\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used whenever assigning scripts to nodes so very often and I don't know if this can be worked around using a script\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nthis should be added because who would want to assign a script to something it doesn't derive from?.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/615/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/613",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/613/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/613/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/613/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/613",
    "id": 585524613,
    "node_id": "MDU6SXNzdWU1ODU1MjQ2MTM=",
    "number": 613,
    "title": "`Object.connect` error handling",
    "user": {
      "login": "Zoomulator",
      "id": 1069303,
      "node_id": "MDQ6VXNlcjEwNjkzMDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1069303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zoomulator",
      "html_url": "https://github.com/Zoomulator",
      "followers_url": "https://api.github.com/users/Zoomulator/followers",
      "following_url": "https://api.github.com/users/Zoomulator/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zoomulator/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zoomulator/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zoomulator/subscriptions",
      "organizations_url": "https://api.github.com/users/Zoomulator/orgs",
      "repos_url": "https://api.github.com/users/Zoomulator/repos",
      "events_url": "https://api.github.com/users/Zoomulator/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zoomulator/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-21T15:48:33Z",
    "updated_at": "2020-03-22T00:13:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA rouge-like game, utilizing Godot's signal design pattern to minimize tight coupling between classes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe `Object.connect` method both writes an error message to the log and returns an error value that the editor warning system keeps nagging you about if you don't catch or explicitly ignore.\r\n\r\nIf you (the game developer) want to know if you used `connect` in a faulty way, you'll already be notified in the error log.\r\n\r\nIf you want to deal with the error code, you'll get an error in the log *anyway*. Besides, the only error code generated by connect (by looking at the source) is `ERR_INVALID_PARAMETER`, which I'd state is a *logic error* that should be fixed or prevented rather than 'handled'.\r\n\r\nThis useless return code either gives you a bunch of ugly `warning-ignore` annotations or the 'ignore syntax' `var _err = connect(...)` littering your code.\r\n\r\nIt's been a point of confusion when learning about it and a bit of an eyesore when realizing that the error code is pretty pointless.  Do correct me if I'm wrong, but nothing will cause an error in `Object.connect` unless you pass bad arguments to it and I haven't come across any other methods in Godot that return an error code when you pass bad arguments (they only log the error).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake `Object.connect` a `void` function instead of returning an error code. This removes the need of ignoring the error code currently returned by the function. It would also help new users as it's rather confusing what you should do with the return code. From what I can see, there's nothing you would ever check for, so there's really no need for it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAll errors will be presented in the error log and the `Object.connect` method will return `void`.\r\nSince `ERR_INVALID_PARAMETER` is a logic error, you shouldn't handle it; you should fix what ever is leading up to the error.\r\n\r\nIt should be as simple as changing (in `Object.connect`) the `ERR_FAIL_COND_V` macros to their non-value counterparts and changing the return signature to `void`.\r\n\r\nhttps://github.com/godotengine/godot/blob/master/core/object.cpp#L1404\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can disable `return value discarded` warnings, type `var _err = connect(...)` or use an annotation `warning-ignore` to just ignore it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe proposal is to change an existing method in a core class. You could write your own utility function that ignores the return value for you, but that's a rather patchy fix.\r\n\r\n**Addendum**\r\nIt appears to me that the return code for `connect` is a remnant from another error handling pattern in earlier version of Godot that has changed a bit since. Even though it's a small annoyance, I'd say revising it falls under the ease-of-use policy.\r\nI would personally consider this to be a very simple change, though it is a breaking change. My hope is that it would be included in the 4.0 version.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/613/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/612",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/612/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/612/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/612/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/612",
    "id": 585524018,
    "node_id": "MDU6SXNzdWU1ODU1MjQwMTg=",
    "number": 612,
    "title": "Overlap Text with Icon in Button Control",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-21T15:45:42Z",
    "updated_at": "2020-03-23T14:07:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nUI items\r\n**Describe the problem or limitation you are having in your project:**\r\nI need add TextureRect as Button's child:\r\n![image](https://user-images.githubusercontent.com/13235119/77230182-4b3a6b00-6b8a-11ea-8c39-e8aa75cdc62f.png)\r\n\r\nto obtain this effect:\r\n![image](https://user-images.githubusercontent.com/13235119/77230166-36f66e00-6b8a-11ea-8eda-cc33978614b7.png)\r\n\r\nI cannot use the icon field to add my image/icon/texture because the text will be moved aside.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt will be nice to add a checkbox where users can decide if the text can overlap the icon.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNA\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNA\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNA",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/611",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/611/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/611/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/611/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/611",
    "id": 585512708,
    "node_id": "MDU6SXNzdWU1ODU1MTI3MDg=",
    "number": 611,
    "title": "Add Corner Radius + size.y + pixel problems in Gradient",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-21T14:42:21Z",
    "updated_at": "2020-10-17T11:04:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nUI items\r\n**Describe the problem or limitation you are having in your project:**\r\nI made a button using \"Button\" Control + TextureRect to simulate a 3D button:\r\n\r\n![image](https://user-images.githubusercontent.com/13235119/77228702-ff36f880-6b80-11ea-97b7-ef4b3ead17c0.png)\r\n![image](https://user-images.githubusercontent.com/13235119/77229087-943af100-6b83-11ea-8c29-4ff29ceaf8a5.png)\r\n\r\nI have 2 problems with this approach:\r\n1) I cannot make corner round\r\n2) the top edge of TextureRect is not straight.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt will be nice to set CornerRadius in Gradient to obtain this result (Inkscape):\r\n![image](https://user-images.githubusercontent.com/13235119/77228734-3efde000-6b81-11ea-96b8-843c5e1435b9.png)\r\n\r\nAlso: I'm forced to use scale.x   instead size.y\r\n![image](https://user-images.githubusercontent.com/13235119/77228762-766c8c80-6b81-11ea-9de2-24c58db648fd.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNA\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNA\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNA",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/610",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/610/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/610/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/610/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/610",
    "id": 585475830,
    "node_id": "MDU6SXNzdWU1ODU0NzU4MzA=",
    "number": 610,
    "title": "Expose the ConeShape from Bullet",
    "user": {
      "login": "MennoMax",
      "id": 12477395,
      "node_id": "MDQ6VXNlcjEyNDc3Mzk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12477395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MennoMax",
      "html_url": "https://github.com/MennoMax",
      "followers_url": "https://api.github.com/users/MennoMax/followers",
      "following_url": "https://api.github.com/users/MennoMax/following{/other_user}",
      "gists_url": "https://api.github.com/users/MennoMax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MennoMax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MennoMax/subscriptions",
      "organizations_url": "https://api.github.com/users/MennoMax/orgs",
      "repos_url": "https://api.github.com/users/MennoMax/repos",
      "events_url": "https://api.github.com/users/MennoMax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MennoMax/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-21T10:56:28Z",
    "updated_at": "2020-06-05T12:14:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis is a project I came up with while thinking of use cases for such shapes, since I already opened my PR to solve this. I came across godotengine/godot#2138 and godotengine/godot#17252 and decided to expose it myself.\r\n\r\nA very simplified flight game in which the player steers a plane.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe crowns of the trees in this game would be cone shaped. Since I need more precise collisions than cylinders or other shapes for the plane to be able to collide with the trees accurately, I can not use any of the other internal collision shapes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nExposing cone shapes would ease the access to this shape and would completely solve this problem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee my PR in godotengine/godot#37199 which exposes it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, one could generate a cone shape from the mesh of the tree crown or write a script that generates it. This would however not be as optimized as bullets cone shape. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, as this should belong to the already existing collision shapes. It is however possible to implement this as an add on, but I'm not sure if this shape can then be selected in the CollisionShapes 'Shape' drop down menu.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/610/reactions",
      "total_count": 10,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/609",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/609/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/609/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/609/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/609",
    "id": 585290070,
    "node_id": "MDU6SXNzdWU1ODUyOTAwNzA=",
    "number": 609,
    "title": "Add the ability to reuse materials with the same name",
    "user": {
      "login": "Shatur95",
      "id": 22453358,
      "node_id": "MDQ6VXNlcjIyNDUzMzU4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22453358?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shatur95",
      "html_url": "https://github.com/Shatur95",
      "followers_url": "https://api.github.com/users/Shatur95/followers",
      "following_url": "https://api.github.com/users/Shatur95/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shatur95/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shatur95/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shatur95/subscriptions",
      "organizations_url": "https://api.github.com/users/Shatur95/orgs",
      "repos_url": "https://api.github.com/users/Shatur95/repos",
      "events_url": "https://api.github.com/users/Shatur95/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shatur95/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-20T19:43:03Z",
    "updated_at": "2020-03-22T14:30:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Zoriya](https://github.com/Zoriya), Low Poly 3D RPG\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\nI often need to share materials between several models. For example, Wood material can be applied to a house, tree or weapon. Especially in low poly.\r\n\r\nGodot have good support for GLTF, but If I export model without materials, it will have only one material slot in all imported meshes in Godot. If I export model with materials, all materials will be created in the model folder on import in Godot. If I move these materials (for example, move them to a folder with shared materials), the materials will be recreated in the model folder on re-import. Changing material paths is not work, I already submitted [this issue](https://github.com/godotengine/godot/issues/35697).\r\n\r\nGodot also have Blender exporter that allow to search for materials with the same name and apply it to the model. This is very useful but the plugin itself is experimental and lacks many features. For example, it looks like this function [is broken on the latest Blender](https://github.com/godotengine/godot-blender-exporter/issues/328).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice to add the ability to optionally enable search for materials with the same name in project. For example, If I have a model with Grass material, look for the material with this name in project recursively and apply if such material exists or create a new one if there is no material with the this name.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI suggest to add this option to the Import tab as a checkbox for models. If enabled - search for materials with the same names. I also suggest to disable it by default because it can be not expected behavior.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI often need to share materials between models but for now there is no workaround as I know. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIn my opinion, such a thing should be built in. simplifies work with duplicate materials. If I need to change the Grass material, I don’t have to change it for each model separately.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/609/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/608",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/608/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/608/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/608/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/608",
    "id": 585112477,
    "node_id": "MDU6SXNzdWU1ODUxMTI0Nzc=",
    "number": 608,
    "title": "Sprite Overlays",
    "user": {
      "login": "SpyrexDE",
      "id": 57133330,
      "node_id": "MDQ6VXNlcjU3MTMzMzMw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/57133330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SpyrexDE",
      "html_url": "https://github.com/SpyrexDE",
      "followers_url": "https://api.github.com/users/SpyrexDE/followers",
      "following_url": "https://api.github.com/users/SpyrexDE/following{/other_user}",
      "gists_url": "https://api.github.com/users/SpyrexDE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SpyrexDE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SpyrexDE/subscriptions",
      "organizations_url": "https://api.github.com/users/SpyrexDE/orgs",
      "repos_url": "https://api.github.com/users/SpyrexDE/repos",
      "events_url": "https://api.github.com/users/SpyrexDE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SpyrexDE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-20T14:38:02Z",
    "updated_at": "2020-04-17T07:20:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a pixel-art top-down shooter with focus on animations.\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to make sprite overlay animations. But Godot is only able to do that using shaders, what realy is a pity.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere could be a feature for that like how it is in GameMaker: (https://www.youtube.com/watch?v=ZrvKmDpVP6I) or maybe a \"Sprite Overlay\"-Node. I would prefer the second option.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n The \"Sprite Overlay\"-node could be a node you can put as a child on a Sprite-Node. It inherits from the normal sprite node and there could be some extra options I don't know at the moment because I am extremely new to programming.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI saw a lot of Indiegames using sprite overlays. But depending on the engine they are used more often because there is a feature like this. It would help a lot of people to develop their games. I \r\n already asked for a sloution on reddit(https://www.reddit.com/r/godot/comments/flshso/is_there_a_way_to_create_sprite_overlays_in_godot/) but only received a way to do that with shaders. And when you do it in that way you are not able to animate the sprite overlay. \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it is an elemental feature you can use in nearly every game. In addition to that you can include it into the node/scene-system what effect, that you can put overlays on overlays, animate/tween them or get the input  the overlays received.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/608/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/604",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/604/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/604/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/604/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/604",
    "id": 584591790,
    "node_id": "MDU6SXNzdWU1ODQ1OTE3OTA=",
    "number": 604,
    "title": "Colors in CurveGradientTesture",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-19T17:51:21Z",
    "updated_at": "2020-10-17T11:05:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nUI scenes\r\n**Describe the problem or limitation you are having in your project:**\r\n![image](https://user-images.githubusercontent.com/13235119/77098283-04256c00-6a0a-11ea-9b4b-454479a54b22.png)\r\nI can't change the red - default? - color\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think it will be useful if we can change the color\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNA\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNA\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNA",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/604/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/602",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/602/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/602/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/602/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/602",
    "id": 584522935,
    "node_id": "MDU6SXNzdWU1ODQ1MjI5MzU=",
    "number": 602,
    "title": "Implement a task list (TODO list) in the editor",
    "user": {
      "login": "Saitodepaula",
      "id": 22160489,
      "node_id": "MDQ6VXNlcjIyMTYwNDg5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/22160489?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Saitodepaula",
      "html_url": "https://github.com/Saitodepaula",
      "followers_url": "https://api.github.com/users/Saitodepaula/followers",
      "following_url": "https://api.github.com/users/Saitodepaula/following{/other_user}",
      "gists_url": "https://api.github.com/users/Saitodepaula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Saitodepaula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Saitodepaula/subscriptions",
      "organizations_url": "https://api.github.com/users/Saitodepaula/orgs",
      "repos_url": "https://api.github.com/users/Saitodepaula/repos",
      "events_url": "https://api.github.com/users/Saitodepaula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Saitodepaula/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-03-19T16:05:51Z",
    "updated_at": "2020-03-22T12:08:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D racing game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe only way to track the many TODOs in my scripts right now is to open one by one, and searching for \"TODO\".\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd an item in the PROJECT or DEBUG menu, called TASK LIST, like [Visual Studio](https://docs.microsoft.com/en-us/visualstudio/ide/using-the-task-list?view=vs-2019), where one can see all the TODOs and/or other tagged (or token) comments, like TODO, BUG, HACK etc.\r\nThis way, it will be very fast and easy to track tasks, and, in a project with many people working on, everyone can see the task list easily.\r\nAlso, syntax highlighting for TODO, BUG, HACK and other tags would be useful.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe example is the same from the link above, from Visual Studio. It is simply a list of comments with the defined tags to be tracked down.\r\n\r\n![image](https://user-images.githubusercontent.com/22160489/77087102-746bc780-69e1-11ea-8fb1-0893336fc248.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it will be used often, all the time actually.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere is an [add-on already actually](https://godotengine.org/asset-library/asset/53), but it is old. In my opinion, programmers in general are used to task lists, so they expect this functionality when they arrive in a new system. The task list is like a basic feature, so I think it should not be relegated to be an add-on that you have to search for.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/602/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/601",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/601/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/601/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/601/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/601",
    "id": 584082992,
    "node_id": "MDU6SXNzdWU1ODQwODI5OTI=",
    "number": 601,
    "title": "When importing meshes, store external files (materials) to a specified directory",
    "user": {
      "login": "pihdastudios",
      "id": 62319714,
      "node_id": "MDQ6VXNlcjYyMzE5NzE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/62319714?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pihdastudios",
      "html_url": "https://github.com/pihdastudios",
      "followers_url": "https://api.github.com/users/pihdastudios/followers",
      "following_url": "https://api.github.com/users/pihdastudios/following{/other_user}",
      "gists_url": "https://api.github.com/users/pihdastudios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pihdastudios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pihdastudios/subscriptions",
      "organizations_url": "https://api.github.com/users/pihdastudios/orgs",
      "repos_url": "https://api.github.com/users/pihdastudios/repos",
      "events_url": "https://api.github.com/users/pihdastudios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pihdastudios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-19T00:29:58Z",
    "updated_at": "2020-05-05T10:05:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n3D FPS\r\n**Describe the problem or limitation you are having in your project:**\r\nExported meshes from blender uses the same material but they have different directory location in my project.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow the developer to store an external files (material) to a specified directory\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere's the rough patch i made\r\n``` patch\r\ndiff --git a/editor/import/resource_importer_scene.cpp b/editor/import/resource_importer_scene.cpp\r\nindex 94a6fee6b7..53a8a5f0e2 100644\r\n--- a/editor/import/resource_importer_scene.cpp\r\n+++ b/editor/import/resource_importer_scene.cpp\r\n@@ -1173,6 +1173,8 @@ void ResourceImporterScene::get_import_options(List<ImportOption> *r_options, in\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::FLOAT, \"meshes/lightmap_texel_size\", PROPERTY_HINT_RANGE, \"0.001,100,0.001\"), 0.1));\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::BOOL, \"skins/use_named_skins\"), true));\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::BOOL, \"external_files/store_in_subdir\"), false));\r\n+       r_options->push_back(ImportOption(PropertyInfo(Variant::BOOL, \"external_files/subdir_default\"), false));\r\n+       r_options->push_back(ImportOption(PropertyInfo(Variant::STRING, \"external_files/subdir_path\", PROPERTY_HINT_DIR), \"\"));\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::BOOL, \"animation/import\", PROPERTY_HINT_NONE, \"\", PROPERTY_USAGE_DEFAULT | PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED), true));\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::FLOAT, \"animation/fps\", PROPERTY_HINT_RANGE, \"1,120,1\"), 15));\r\n        r_options->push_back(ImportOption(PropertyInfo(Variant::STRING, \"animation/filter_script\", PROPERTY_HINT_MULTILINE_TEXT), \"\"));\r\n@@ -1412,15 +1414,21 @@ Error ResourceImporterScene::import(const String &p_source_file, const String &p\r\n \r\n        String base_path = p_source_file.get_base_dir();\r\n \r\n+\r\n        if (external_animations || external_materials || external_meshes || external_scenes) {\r\n \r\n                if (bool(p_options[\"external_files/store_in_subdir\"])) {\r\n-                       String subdir_name = p_source_file.get_file().get_basename();\r\n-                       DirAccess *da = DirAccess::open(base_path);\r\n-                       Error err2 = da->make_dir(subdir_name);\r\n-                       memdelete(da);\r\n-                       ERR_FAIL_COND_V_MSG(err2 != OK && err2 != ERR_ALREADY_EXISTS, err2, \"Cannot make directory '\" + subdir_name + \"'.\");\r\n-                       base_path = base_path.plus_file(subdir_name);\r\n+                       if (bool(p_options[\"external_files/subdir_default\"])) {\r\n+                               String subdir_name = p_source_file.get_file().get_basename();\r\n+                               DirAccess *da = DirAccess::open(base_path);\r\n+                               Error err2 = da->make_dir(subdir_name);\r\n+                               memdelete(da);\r\n+                               ERR_FAIL_COND_V_MSG(err2 != OK && err2 != ERR_ALREADY_EXISTS, err2, \"Cannot make directory '\" + subdir_name + \"'.\");\r\n+                               base_path = base_path.plus_file(subdir_name);\r\n+                       } else {\r\n+                               base_path = p_options[\"external_files/subdir_path\"];\r\n+                       }\r\n+                       \r\n                }\r\n        }\r\n \r\n~\r\n\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMaybe through a custom import script, but it i haven't figured it out yet.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature is needed with 3D games that reuse materials and just improves workflow.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/600",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/600/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/600/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/600/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/600",
    "id": 583997675,
    "node_id": "MDU6SXNzdWU1ODM5OTc2NzU=",
    "number": 600,
    "title": "Find in script: Mention the current match number (e.g. \"X of 14 matches\")",
    "user": {
      "login": "DDoop",
      "id": 59840876,
      "node_id": "MDQ6VXNlcjU5ODQwODc2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/59840876?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DDoop",
      "html_url": "https://github.com/DDoop",
      "followers_url": "https://api.github.com/users/DDoop/followers",
      "following_url": "https://api.github.com/users/DDoop/following{/other_user}",
      "gists_url": "https://api.github.com/users/DDoop/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DDoop/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DDoop/subscriptions",
      "organizations_url": "https://api.github.com/users/DDoop/orgs",
      "repos_url": "https://api.github.com/users/DDoop/repos",
      "events_url": "https://api.github.com/users/DDoop/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DDoop/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-18T20:56:31Z",
    "updated_at": "2020-09-24T19:27:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSoftware that traces cycloids, not relevant to issue.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFind in script feature in the editor is lacking a key component that is typical of most \"ctrl+f\" find tools, making it difficult to keep track of where in the file the user is, and how the specific instance of the matched text relates to all other instances of the matched text. Finding the first use of a function is sometimes extremely useful. I am re-writing my `print()` statements to be more debug friendly, and this is one time I would like to have a better understanding of how each `print()` follows the last in my script. Just being able to +/- through the list of results is insufficient. From what I can tell, there is not a \"find first,\" or \"find last,\" either, both of which I have become accustomed to from other \"ctrl+f\" tools in other software.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt should display what count of the total the user has highlighted while scrolling through results. For instance, if the user looks for \"foo\" and has 14 results, when they are 'on' the 5th result of 14, Godot should say so, ideally nearby where the \"X matches\" text is displayed.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI know just about 0 things how Godot's UI is constructed, but this should be as easy as adding a label beneath the current \"X matches\" text that appears when \"ctrl+F\" is used. How does Godot's editor text search store results? Accessing that information might make the issue easier to resolve.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot by me. Yet.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI have never heard of any software asking for users to install an add-on in the asset library to see what item out of a list of search results they are in. I personally struggle to see the issue from this perspective, since I consider this a basic feature. I am surprised this seems to be the first time the issue has been raised, though, given how important I assumed this was.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/600/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/598",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/598/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/598/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/598/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/598",
    "id": 583782588,
    "node_id": "MDU6SXNzdWU1ODM3ODI1ODg=",
    "number": 598,
    "title": "Integrate Q&A functionality to the Godot editor",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-03-18T14:48:13Z",
    "updated_at": "2020-11-25T16:54:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Related:**\r\n- godotengine/godot#23043 (re-written as a proposal)\r\n- godotengine/godot#23395 (a stop-gap PR that won't be merged until changes to RichTextLabel are made)\r\n\r\n**Describe the project you are working on:**\r\n- Answering questions on social media\r\n- Learning how to use different parts of the engine API and needing to look up information, tutorials, etc.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis topic has been discussed previously on other social media platforms, but...\r\n\r\nThere are many different places one can search through for information. Not all sources support organized collections of conversations. Not all places create indexed records of these conversations. There is no go-to place that all users prefer to ask questions at.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInstead of leaving things in this fragmented state and expecting users to do their own due diligence by searching for information on a huge variety of sources (docs, YouTube, Q&A site, Forums, Discord, Reddit, Facebook, etc.), why not emphasize a prescribed place to collect and organize all questions?\r\n\r\nPresumably, this would be the Q&A site, but we all know that 1) not everyone even knows it exists, and 2) those who do don't necessarily visit it regularly to browse and ask/answer questions.\r\n\r\nThis discoverability/accessibility issue could be resolved by creating an interface for such asking and browsing for such questions directly inside the Godot Editor. That way...\r\n\r\n1. The official documentation can direct people's attention to it when they first learn about the engine.\r\n2. It could have better visibility as a main-screen tab in the Editor beside the AssetLib tab.\r\n3. Interacting with questions from the community is but a click or hotkey away.\r\n4. With visibility and accessibility ramped up so much, people on social media platforms are much more likely to congregate information in a single place, just as we try to do for the official documentation.\r\n\r\nI am aware that some people are concerned about the idea of having Godot users require a login to use the engine. However, I am not suggesting that any such practice be implemented. People should be able to fetch, cache, and browse questions without requiring a login. Only asking/answering/rating questions should require a login. And even then, it is no different from the behavior that will exist in the Asset Library if we likewise improve usability in that tab and enable people to directly upload and customize assets from the Godot Editor, as suggested in other popular proposals.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI see 2 main ways of doing this...\r\n\r\n*Simplest and most direct route:*\r\nCreate a PHP module for the Q2A tool that Godot uses. In the module, define a web API that the Godot Editor could interact with to remotely execute all website features that are relevant.\r\n\r\n- Pro: it relies on long-standing FOSS technology (Q2A).\r\n- Pro: it relies on existing tools and features (we already have a Q2A website).\r\n- Con: we'd have to write PHP code in an aging API (The Q2A API uses legacy PHP idioms).\r\n\r\n*More difficult, but potentially longer-lasting route:*\r\nThere are already a large number of refactorings happening for the Asset Library. Why not repurpose part of that codebase to build a nearly identical framework for a Q&A system that runs off of our own PHP Laravel Web API and port the Q&A system to run off the same underlying system as the Asset Library?\r\n\r\n- Pro: shared user login between Asset Library and Q&A. Becomes more like a centralized Godot Hub.\r\n- Pro: uses more modern PHP standards since all code is then focused in PHP Laravel.\r\n- Con: Considerably more development work in comparison (not only a Web API layer, but also database, data access, models, views, styling, etc.).\r\n\r\nAnd, of course, whatever we choose for the backend, we will also need to develop an Editor frontend (likely a new main screen tab) that can...\r\n\r\n- display questions and their ratings.\r\n- open more information about a given question to display answers, their ratings, and their associated comments.\r\n- submit questions.\r\n- view your questions and/or questions you've favorited.\r\n- display the points associated with your user for answering questions (optional).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used extremely often by tens of thousands of developers, and it would involve far more than a few lines of script to implement. Not to mention the need for backend revisions that are unrelated to the engine source code as well.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nOne of the main issues is discoverability and access to the Q&A system that Godot uses. Implementing these features as a third-party addon which, again, users would have to discover and access defeats the entire purpose.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/598/reactions",
      "total_count": 9,
      "+1": 2,
      "-1": 3,
      "laugh": 0,
      "hooray": 2,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/596",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/596/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/596/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/596/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/596",
    "id": 583644880,
    "node_id": "MDU6SXNzdWU1ODM2NDQ4ODA=",
    "number": 596,
    "title": "Add a subgraphing system to visual scripting",
    "user": {
      "login": "sps014",
      "id": 45932883,
      "node_id": "MDQ6VXNlcjQ1OTMyODgz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45932883?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sps014",
      "html_url": "https://github.com/sps014",
      "followers_url": "https://api.github.com/users/sps014/followers",
      "following_url": "https://api.github.com/users/sps014/following{/other_user}",
      "gists_url": "https://api.github.com/users/sps014/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sps014/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sps014/subscriptions",
      "organizations_url": "https://api.github.com/users/sps014/orgs",
      "repos_url": "https://api.github.com/users/sps014/repos",
      "events_url": "https://api.github.com/users/sps014/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sps014/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-03-18T11:00:01Z",
    "updated_at": "2020-09-22T15:38:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "#### Current Scenario:\r\nThe essential missing feature in Visual Scripting is the ability to collapse a selection of nodes into a function, expand them and then store them in an accessible function library. This function library is retrievable as a resource to be shared in plugins and the current project.\r\nImagine if I have to do a repeated operation multiple times for some different inputs.\r\nCurrently we can not reuse the nodes for a different set of input values.\r\n![problem](https://user-images.githubusercontent.com/45932883/76952151-ae31c500-6932-11ea-9740-e5f2293ee40c.PNG)\r\n\r\n\r\n#### Idea\r\nFor reusing these set of the node  the idea is to isolate the set of nodes \r\n![Capture](https://user-images.githubusercontent.com/45932883/76951521-d5d45d80-6931-11ea-9214-aa0df451e963.PNG)\r\nWe will box reusable Nodes within the function, with a validated function unit name.\r\nInput and output are connected to Input function and Output function Nodes.\r\nThis approach is inspired by the working of functions that enables modularity.\r\n\r\n\r\nAnd we can generate a custom node at design time similar to \r\n![capt2](https://user-images.githubusercontent.com/45932883/76952645-695a5e00-6933-11ea-8aab-b9ad56bd99b5.PNG)\r\n\r\nIt can be used multiple times and we can also make it exportable as a Library so it can be called from other Godot supported language runtime if we will be able to bind or transpile it.\r\n\r\n#### My Background With VS Systems\r\nI had developed a VS System from  Scratch in C++, even wrote controls myself [here](https://github.com/sps014/Operator).\r\n\r\n\r\n#### Thanks\r\nYour feedback will be certainly valuable to me.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/596/reactions",
      "total_count": 9,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/593",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/593/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/593/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/593/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/593",
    "id": 582971637,
    "node_id": "MDU6SXNzdWU1ODI5NzE2Mzc=",
    "number": 593,
    "title": "GraphEdit & GraphNode Enhance Proposal",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-17T12:17:56Z",
    "updated_at": "2020-03-17T13:50:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Plugin to create state machine through GE(GraphEdit) and GN(GraphNode)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n* Refer to: [GraphEdit Bug](https://github.com/godotengine/godot/issues/37110)\r\n* Need to set a limit of connections between GNs\r\n* Customize the connection line\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n* Fix bugs mentioned above\r\n* Connections Limit\r\n* Customize connection line\r\n* Place the connection line anywhere in GN\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n### Connections Limit\r\nActually the user can have multiple connections between nodes:\r\n![Screenshot from 2020-03-17 08-55-58](https://user-images.githubusercontent.com/58845030/76854036-2910b800-682d-11ea-8b47-8ec995ffca74.png)\r\nTo overcome this, the GN should have a max_connections property:\r\n![maxconn](https://user-images.githubusercontent.com/58845030/76854452-d7b4f880-682d-11ea-8d5e-0a3e064398c5.png)\r\n\r\n### Customize CL (Connection Line)\r\nThe Lines (Represented by connections between nodes) could be customized to enable the user to set \"Icons\" or draw something at the (Most-Left,Middle,Most-Right) part of the line, represented by 3 sprites:\r\n\r\nActually:\r\n![Screenshot from 2020-03-17 09-04-04](https://user-images.githubusercontent.com/58845030/76854670-4b570580-682e-11ea-9dd7-e087fe292d59.png)\r\n\r\nCustomizable CL Example :\r\n![custom1](https://user-images.githubusercontent.com/58845030/76855021-02538100-682f-11ea-80f3-d023b5e495db.png)\r\n\r\n### Place the connection line anywhere in GN\r\nNowadays cross-connections are not so beauty:\r\n![Screenshot from 2020-03-17 09-12-32](https://user-images.githubusercontent.com/58845030/76855252-83127d00-682f-11ea-8bd2-879345a09fa5.png)\r\n\r\nSimple solution? Connection Types (the use can now choose between NodeBased or StateBased (not cool suggestive names LOL). NodeBased its like the image shown above, and StateBased would be like the image below:\r\n\r\n![CL](https://user-images.githubusercontent.com/58845030/76855571-295e8280-6830-11ea-82a9-fadcd52efa55.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. Cuz requires some refactoring into core GN and GE Classes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMaybe some topics could be done with plugins, but others are essential.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/592",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/592/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/592/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/592/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/592",
    "id": 582901351,
    "node_id": "MDU6SXNzdWU1ODI5MDEzNTE=",
    "number": 592,
    "title": "TabContainer enhanced ",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-17T10:14:28Z",
    "updated_at": "2020-03-17T15:05:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\ngui interface for client server game\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently we have the possibility to set a text to identify a tab in TabContainer\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1) I wold like to have a image and/or  a text instead just a text in tabs.\r\n\r\n![image](https://user-images.githubusercontent.com/13235119/76845829-65e1ac80-6837-11ea-9361-700090806401.png)\r\n\r\n2) The option to show them in sx/dx/bottom side not just in top side only as is now.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI guess it is a editor job?\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure about it. \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt will be nice if will be a standard feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/592/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/591",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/591/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/591/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/591/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/591",
    "id": 582723654,
    "node_id": "MDU6SXNzdWU1ODI3MjM2NTQ=",
    "number": 591,
    "title": "Display placeholder for missing glyphs",
    "user": {
      "login": "timothyqiu",
      "id": 372476,
      "node_id": "MDQ6VXNlcjM3MjQ3Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/372476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timothyqiu",
      "html_url": "https://github.com/timothyqiu",
      "followers_url": "https://api.github.com/users/timothyqiu/followers",
      "following_url": "https://api.github.com/users/timothyqiu/following{/other_user}",
      "gists_url": "https://api.github.com/users/timothyqiu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timothyqiu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timothyqiu/subscriptions",
      "organizations_url": "https://api.github.com/users/timothyqiu/orgs",
      "repos_url": "https://api.github.com/users/timothyqiu/repos",
      "events_url": "https://api.github.com/users/timothyqiu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timothyqiu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-17T03:11:49Z",
    "updated_at": "2020-03-17T09:06:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** the Godot editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot silently \"eats\" the character if it can't be provided by the font chain. It's hard to tell if it's a editor/game programming bug or it's just because the font does not have the glyph.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nUse a placeholder glyph to provide a visual representation of the missing glyph, like the `.notdef` glyph in dynamic fonts.\r\n\r\n![The .notdef glyph](https://docs.microsoft.com/en-us/typography/opentype/spec/images/notdef.gif)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor dynamic fonts, use the `.notdef` glyph when the glyph is missing in the current font, and there are no fallback fonts available.\r\n\r\n![example](https://user-images.githubusercontent.com/372476/76817198-274ef080-683d-11ea-8161-563544c4c0a8.png)\r\n\r\nBitmap fonts can also be modified to provide a similar \"undefined\" glyph. For example, automatically generate a checked rectangle box bitmap.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** \r\n\r\nIt seems impossible to load the `.notdef` glyph through GDScript.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/591/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/586",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/586/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/586/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/586/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/586",
    "id": 581427459,
    "node_id": "MDU6SXNzdWU1ODE0Mjc0NTk=",
    "number": 586,
    "title": "Retain exported variable values when extending the script on an existing node",
    "user": {
      "login": "lmerriam",
      "id": 1657444,
      "node_id": "MDQ6VXNlcjE2NTc0NDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1657444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmerriam",
      "html_url": "https://github.com/lmerriam",
      "followers_url": "https://api.github.com/users/lmerriam/followers",
      "following_url": "https://api.github.com/users/lmerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/lmerriam/orgs",
      "repos_url": "https://api.github.com/users/lmerriam/repos",
      "events_url": "https://api.github.com/users/lmerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-03-15T00:01:36Z",
    "updated_at": "2020-08-15T14:51:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D Twin Stick ARPG\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use exported variables in the IDE extensively to make blueprint scenes that can be extended to create new content easily. For example, I have a base `weapon` scene which I can inherit and change a host of variables like `attack_speed`, `damage`, and `knockback` on to create new weapons easily without any code. This feature is a key selling point of the Godot IDE.\r\n\r\nHowever, if at some point down the line I want to extend the script of a weapon with new logic (using the \"extend script\" option in the right click menu), it wipes all the values I've set for exported variables, and then I must manually re-enter them without any mistakes to preserve the settings I may have spent hours perfecting.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen using the \"extend script\" option on a node that already exists, preserve the exported variable values that are set in the IDE and reapply them to the node after the script changes. This will make extending node logic trivial at any point and eliminate human error from the process of preserving properties that have already been set.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI believe preserving variables when extending a script is the base use case and should be the standard function of the \"extend script\" action, but it could be a secondary option in the menu like \"extend with properties\" or similar.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can easily be worked around if the developer knows upfront that they will need to extend the scene with new logic, but often that requirement reveals itself later after many script variables have already been tweaked and perfected, at which point it is painful to change.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a universal QoL improvement to one of the core features of the Godot engine and IDE.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/586/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/584",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/584/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/584/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/584/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/584",
    "id": 581127878,
    "node_id": "MDU6SXNzdWU1ODExMjc4Nzg=",
    "number": 584,
    "title": "Add 3D bones gizmo manipulators for skeletons",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-14T09:34:43Z",
    "updated_at": "2020-11-17T19:40:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d beat'em up\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe same mesh or animation can make different impressions in different situations, if i want to simply tweak an animation i have to either edit raw numbers in the editor or go to blender, modify, re-export, return to godot and re-import again, hoping i don't have to tweak again.\r\nAlso related: skeletons lack the last bones.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA simple default gizmo to manipulate bones, we should be able to make little adjustment without having to go to blender, re-export and re-import again, also it would be extremely convenient to make animations directly in Godot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAt each bone would be attached the default gizmo to let us move them.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEveryone working with 3d skeletons would use this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIn my opinion it's an essential feature that should be accessed by everyone, it shouldn't be a simple add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/584/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/583",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/583/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/583/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/583/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/583",
    "id": 580942552,
    "node_id": "MDU6SXNzdWU1ODA5NDI1NTI=",
    "number": 583,
    "title": "Allow to undo last point when creating polygon 2D",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-14T00:02:06Z",
    "updated_at": "2020-03-14T22:21:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGame with lots of complex polygons.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSo, polygons are main nodes building the environment collisions in my game. There's lots of them and they have lots of vertices (like, tens of them). I have my maps drawn based on grid, so when I create polygon I enable grid and join points on the texture. BUT, this requires lots of precision. And I sometimes make a mistake (i.e. place a point off by a grid cell). Theoretically not a big deal, because I can just correct it after finishing the polygon. But sometimes I make few mistakes and while correcting I might omit one and this results in a disaster (not really, but the collider doesn't match and I usually find it when testing game, but imagine I totally overlooked it. THAT would be disaster).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWould be nice if I could undo last point when drawing polygon. Right now, right-click will cancel whole polygon. This is rarely really useful and also could be done with Escape. So right-click could remove last point instead, so when I make a mistake I can quickly correct it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust remove last polygon point when right-clicking during drawing.\r\n![Uno](https://user-images.githubusercontent.com/2223172/76670091-0eb9ae80-658f-11ea-980f-4e44f632521e.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt extends existing functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/583/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/582",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/582/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/582/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/582/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/582",
    "id": 580924805,
    "node_id": "MDU6SXNzdWU1ODA5MjQ4MDU=",
    "number": 582,
    "title": "Add vertical alignment for [img] in RichTextLabel",
    "user": {
      "login": "Essojadojef",
      "id": 33575693,
      "node_id": "MDQ6VXNlcjMzNTc1Njkz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/33575693?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Essojadojef",
      "html_url": "https://github.com/Essojadojef",
      "followers_url": "https://api.github.com/users/Essojadojef/followers",
      "following_url": "https://api.github.com/users/Essojadojef/following{/other_user}",
      "gists_url": "https://api.github.com/users/Essojadojef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Essojadojef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Essojadojef/subscriptions",
      "organizations_url": "https://api.github.com/users/Essojadojef/orgs",
      "repos_url": "https://api.github.com/users/Essojadojef/repos",
      "events_url": "https://api.github.com/users/Essojadojef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Essojadojef/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-13T23:17:31Z",
    "updated_at": "2020-04-30T07:42:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn adventure game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently the images are displayed with their bottom side aligned to the text baseline. This may be a problem as the top side and middle are misaligned.\r\n![example](https://user-images.githubusercontent.com/33575693/76662577-ab278500-657e-11ea-9d5c-f2e491e2545f.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAlign vertically the images in the center of the font or add a parameter (like the custom bbcodes' ones) to the img tag to allow different vertical alignments. For example: `[img valign=center]{path}[/img]`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn the RichTextLabel code `img->size.height + font->get_descent()` is used to calculate the image's position. I think this can be changed to `(img->size.height + font->get_descent()) / 2` to align to the center and `(img->size.height - font->get_height())` to align to the top of the font, but I didn't test these.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe problem can be reduced by changing the font top and bottom extra_spacing. But this may not work if there are images of different sizes.\r\n![example_extra_spacing](https://user-images.githubusercontent.com/33575693/76662586-afec3900-657e-11ea-97d2-2d7d336941a6.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is the way users expect the RichTextLabel to handle images.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/582/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/581",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/581/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/581/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/581/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/581",
    "id": 580891920,
    "node_id": "MDU6SXNzdWU1ODA4OTE5MjA=",
    "number": 581,
    "title": "Allow more node manipulation options on multiple nodes",
    "user": {
      "login": "HaSa1002",
      "id": 14185889,
      "node_id": "MDQ6VXNlcjE0MTg1ODg5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/14185889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HaSa1002",
      "html_url": "https://github.com/HaSa1002",
      "followers_url": "https://api.github.com/users/HaSa1002/followers",
      "following_url": "https://api.github.com/users/HaSa1002/following{/other_user}",
      "gists_url": "https://api.github.com/users/HaSa1002/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HaSa1002/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HaSa1002/subscriptions",
      "organizations_url": "https://api.github.com/users/HaSa1002/orgs",
      "repos_url": "https://api.github.com/users/HaSa1002/repos",
      "events_url": "https://api.github.com/users/HaSa1002/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HaSa1002/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-13T22:10:34Z",
    "updated_at": "2020-11-02T03:54:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Visual Novel, with some puzzles\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to a change in my workflow, I need to replace 41 Position2D Nodes with a Scene, but the change type option only allows changing with built-in or global nodes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExtend the change type selection to include scenes, as they can be uses as nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![grafik](https://user-images.githubusercontent.com/14185889/76662678-f9d51f00-657e-11ea-80b4-0eda90947102.png)\r\nOptions:\r\nChange Type to\r\n[Node] [Scene]\r\n\r\nLeave Node as it is and use the File Manager to select the scene as it is down i.e. in the select start scene option.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIIRC you can't rename nodes by script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a workflow improvement and wouldn't pollute the right-click menu as the \"change type\" option already exists.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/581/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/580",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/580/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/580/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/580/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/580",
    "id": 580787226,
    "node_id": "MDU6SXNzdWU1ODA3ODcyMjY=",
    "number": 580,
    "title": "Treat enums as a list of constants, not dictionaries",
    "user": {
      "login": "RichardR01",
      "id": 46553425,
      "node_id": "MDQ6VXNlcjQ2NTUzNDI1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46553425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RichardR01",
      "html_url": "https://github.com/RichardR01",
      "followers_url": "https://api.github.com/users/RichardR01/followers",
      "following_url": "https://api.github.com/users/RichardR01/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichardR01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RichardR01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichardR01/subscriptions",
      "organizations_url": "https://api.github.com/users/RichardR01/orgs",
      "repos_url": "https://api.github.com/users/RichardR01/repos",
      "events_url": "https://api.github.com/users/RichardR01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RichardR01/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-13T19:03:08Z",
    "updated_at": "2020-08-14T12:29:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Describe the project you are working on:\r\nA brick breaker clone\r\n\r\nDescribe the problem or limitation you are having in your project:\r\nMisunderstanding enumerations caused a strange issue with a function that converts a enumeration value to a string where the item that is being checked turned out to be a string instead of a constant.\r\n\r\nDescribe the feature / enhancement and how it helps to overcome the problem or limitation:\r\nBecause I was iterating through an enumeration \"for somevar in enumVariable\" somevar should have been a constant from the list in the enumeration. It turned out to be of type String. I thought it was a bug with Godot. Talking about this in Discord, they said enumerations are dictionaries. To prevent this from happening in the future (or to any other unsuspecting person), please change enumerations to be exactly what they should be \"a list of constants\", not a dictionary.\r\n\r\nHere is my code and how I stumbled upon it. The match statement in bonusTypesToStr would not execute the code below the matched item even though there was a match from what is shown in the debugger. It did not show me that it was a string in the debugger (untrained eye). I interated through the enum in choseBonuses assuming that each item returned in the bonus variable would be of type int, not a string (because you know, that's how enumerations supposed to work?)\r\n\r\nIn a singleton globaL script called Global:\r\n```\r\nenum BonusTypes {\r\n\tNONE = -1,\r\n\tCATCH,\r\n\tBALL_SPLIT,\r\n\tPADDLE_GROW,\r\n\tBALL_SPEED,\r\n\tBONUS_SCORE,\r\n\tLIFE,\r\n\tLASERS,\r\n\tMISSILES,\r\n\tWARP\r\n}\r\n\r\nfunc rndBonus():\r\n\tvar bonusChanceTable = [\r\n\t\t100, # CATCH\r\n\t\t95, # BALL_SPLIT,\r\n\t\t90, # PADDLE_GROW\r\n\t\t80, # BALL_SPEED,\r\n\t\t70, # BONUS_SCORE,\r\n\t\t50, # LIFE,\r\n\t\t40, # LASERS,\r\n\t\t20, # MISSILES,\r\n\t\t5, # WARP\r\n\t]\r\n\tvar bcTotals = []\r\n\tvar bcTotal = 0\r\n\tfor b in bonusChanceTable:\r\n\t\tbcTotal += b\r\n\t\tbcTotals.append(bcTotal)\r\n\tvar rnd = int(round(randf() * bcTotal))\r\n\tbcTotals.sort()\r\n\tvar r = bcTotals.bsearch(rnd)\r\n\tbcTotals.clear()\r\n\treturn r\r\n\r\nfunc choseBonuses(numChosenBonuses):\r\n\tvar maxBonusAmount = int(numChosenBonuses / (BonusTypes.size() - 1)) + 1\r\n\tfor bonus in BonusTypes:\r\n\t\tfor i in range(maxBonusAmount):\r\n\t\t\tchosenBonuses.append(bonus)\r\n\tchosenBonuses.shuffle()\r\n\r\nfunc bonusTypeToStr(bonus):\r\n\tvar r = \"\"\r\n\tmatch bonus:\r\n\t\tBonusTypes.NONE:\r\n\t\t\tr = \"None\"\r\n\t\tBonusTypes.CATCH:\r\n\t\t\tr = \"Catch\"\r\n\t\tBonusTypes.BALL_SPLIT:\r\n\t\t\tr = \"Ball Split\"\r\n\t\tBonusTypes.PADDLE_GROW:\r\n\t\t\tr = \"Paddle Grow\"\r\n\t\tBonusTypes.BALL_SPEED:\r\n\t\t\tr = \"Ball Speed\"\r\n\t\tBonusTypes.BONUS_SCORE:\r\n\t\t\tr = \"Bonus Score\"\r\n\t\tBonusTypes.LIFE:\r\n\t\t\tr = \"Extra Life\"\r\n\t\tBonusTypes.LASERS:\r\n\t\t\tr = \"Lasers Type 1\"\r\n\t\tBonusTypes.MISSILES:\r\n\t\t\tr = \"Missiles\"\r\n\t\tBonusTypes.WARP:\r\n\t\t\tr = \"Warping...\"\r\n\treturn r\r\n```\r\nIn another script\r\n```\r\n\tGlobal.choseBonuses(numBricks)\r\n\tfor i in range(Global.chosenBonuses.size()):\r\n\t\tprint(Global.bonusTypeToStr(Global.chosenBonuses[i]))\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/579",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/579/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/579/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/579/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/579",
    "id": 580583975,
    "node_id": "MDU6SXNzdWU1ODA1ODM5NzU=",
    "number": 579,
    "title": "Add an editor setting to change the 3D viewport zoom sensitivity",
    "user": {
      "login": "giannis196",
      "id": 62136663,
      "node_id": "MDQ6VXNlcjYyMTM2NjYz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/62136663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giannis196",
      "html_url": "https://github.com/giannis196",
      "followers_url": "https://api.github.com/users/giannis196/followers",
      "following_url": "https://api.github.com/users/giannis196/following{/other_user}",
      "gists_url": "https://api.github.com/users/giannis196/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giannis196/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giannis196/subscriptions",
      "organizations_url": "https://api.github.com/users/giannis196/orgs",
      "repos_url": "https://api.github.com/users/giannis196/repos",
      "events_url": "https://api.github.com/users/giannis196/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giannis196/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-13T12:56:21Z",
    "updated_at": "2020-06-19T13:30:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** \r\nI am working on a simple idle game project\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\nthe zoom sensitivity is so sensitive that only 1 role step is enough to go too far away \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** \r\nif we can set the zoom sensitivity then we will not get out of our scene every time we roll the mouse or it will not take us like 5 minutes to zoom to the place we want\r\n\r\nand so...\r\nI want to see in the next versions of godot a zoom sensitivity setting\r\n\r\nRight now there is no zoom sensitivity, there is an option only for moving the cameras orbit sensitivity and it's called \"orbit sensitivity\" (Editor settings/General/3D/Navigation feel) but there is no option for zoom sensitivity... and changing the orbit sensitivity the zoom sensitivity is not affected.\r\n\r\nZoom inertia is not zoom sensitivity it only tells how fast should zoom behave so it's not affecting the zoom step size\r\n\r\nSo, if possible to put a zoom sensitivity in the next version of godot that would be fine\r\n\r\nThank you!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/579/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/577",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/577/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/577/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/577/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/577",
    "id": 580537060,
    "node_id": "MDU6SXNzdWU1ODA1MzcwNjA=",
    "number": 577,
    "title": "Share code between multiple projects",
    "user": {
      "login": "git2013vb",
      "id": 13235119,
      "node_id": "MDQ6VXNlcjEzMjM1MTE5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13235119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/git2013vb",
      "html_url": "https://github.com/git2013vb",
      "followers_url": "https://api.github.com/users/git2013vb/followers",
      "following_url": "https://api.github.com/users/git2013vb/following{/other_user}",
      "gists_url": "https://api.github.com/users/git2013vb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/git2013vb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/git2013vb/subscriptions",
      "organizations_url": "https://api.github.com/users/git2013vb/orgs",
      "repos_url": "https://api.github.com/users/git2013vb/repos",
      "events_url": "https://api.github.com/users/git2013vb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/git2013vb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 19,
    "created_at": "2020-03-13T11:19:09Z",
    "updated_at": "2021-01-11T20:30:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nClient server project\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to duplicate some functionality between client and server ( log management, common classes for example)\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt will be nice if the project can use shared folder where user can put in common code (will be gdscript/c# or anything else)\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd a configurable path option in project settings where user can decide where the shared code will be\r\nThen the shared path will be displayed in dock together with current project folders\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNA\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt will part of project structure.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/577/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/576",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/576/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/576/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/576/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/576",
    "id": 579590753,
    "node_id": "MDU6SXNzdWU1Nzk1OTA3NTM=",
    "number": 576,
    "title": "Add 'default scene path' to Project Settings",
    "user": {
      "login": "Dorifor",
      "id": 28139590,
      "node_id": "MDQ6VXNlcjI4MTM5NTkw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/28139590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dorifor",
      "html_url": "https://github.com/Dorifor",
      "followers_url": "https://api.github.com/users/Dorifor/followers",
      "following_url": "https://api.github.com/users/Dorifor/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dorifor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dorifor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dorifor/subscriptions",
      "organizations_url": "https://api.github.com/users/Dorifor/orgs",
      "repos_url": "https://api.github.com/users/Dorifor/repos",
      "events_url": "https://api.github.com/users/Dorifor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dorifor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-11T22:56:18Z",
    "updated_at": "2020-07-07T02:20:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n1 bit course from HeartBeast\r\n**Describe the problem or limitation you are having in your project:**\r\nI created folders to organize my project (Scripts, Scenes, etc...) but when I create a new scene while I'm in the root folder or any other folder than Scenes, then it creates it outside of my custom folder.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA \"Default Scene Creation Path\" and a \"Default Script Creation Path\" option in the project settings would be awesome.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA new menu / option in the Project Settings where we can select default pathes for files we create (Scripts / Scenes / etc...)\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it'd benefit a lot of people.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/576/reactions",
      "total_count": 5,
      "+1": 1,
      "-1": 4,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/575",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/575/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/575/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/575/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/575",
    "id": 579275849,
    "node_id": "MDU6SXNzdWU1NzkyNzU4NDk=",
    "number": 575,
    "title": "Godot Engine's vision and development philosophy should be better formalized or easily accessible",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1849547975,
        "node_id": "MDU6TGFiZWwxODQ5NTQ3OTc1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:docs",
        "name": "topic:docs",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 29,
    "created_at": "2020-03-11T13:45:35Z",
    "updated_at": "2020-10-29T16:04:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Keywords: *ideology*, *philosophy*, *vision*, *mission*, *end goal*, *goals*, *non-goals*, *principles*, *purpose*, *direction*, *intention*.\r\n\r\n**Describe the project you are working on:**\r\n\r\nGodot Engine development, implementing feature proposals as requested by other users, contributing features and enhancements myself, with various success rates.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI recall my enthusiasm back in the days: https://github.com/godotengine/godot/pull/30816#issuecomment-515438218...\r\n\r\n> I'm looking forward to using godot-proposals for that matter. 😃\r\n\r\nWhen making feature or enhancement proposals to GIP, I often feel paralyzed by indecision which comes from lack of understanding of existing development ideology/philosophy/intention as seen by Godot members and seasoned core contributors, and a possible fear of rejection.\r\n\r\nWhen I first started making feature proposals in the form of pull requests years ago, my features were not met with much enthusiasm. Having acquired more experience as both a contributor and even a software developer, I have to admit that some of them seem silly by now such as godotengine/godot#19276.\r\n\r\nBut as I got my hands dirty, I started to contribute features which seem to meet both my *own* needs and the needs of *others*, such as godotengine/godot#28013. I then learnt that no amount of \"thumbs up\" can guarantee that the features get merged, but at least the good feeling you get from that seems to cover up the feeling of rejection, to some extent.\r\n\r\nFrom what I've observed, it seems to me that a lot of people don't seem to get the ideology behind Godot development, or in fact it may have changed recently or rapidly evolving over those years, and I'm not sure how the work is really prioritized and what features are made into the engine. For some time I feel like the dedicated 2D engine is being neglected, and that's actually the reason why I've chosen the engine in the first place.\r\n\r\nPeople coming from previous experience with Unity/UE4/etc. seem to request similar features to be available in Godot too, which may not be actually in alignment with Godot's intended core philosophy. Talking about not meeting expectations, which can lead to disappointment, for no good reason.\r\n\r\nI see no formal document which could formalize the development ideology/philosophy behind Godot. We have documentation on [how to contribute](http://docs.godotengine.org/en/latest/community/contributing/index.html) (talk first, make sure that the feature is needed etc). In general, those pages describe the \"what\" and \"how\", but not the \"why\". [Start With Why.](https://en.wikipedia.org/wiki/Start_With_Why)\r\n\r\nThere's even [Godot's design philosophy](http://docs.godotengine.org/en/latest/getting_started/step_by_step/godot_design_philosophy.html) but it doesn't really target the engine developers/contributors themselves with the purpose of giving a good direction towards how the engine should be like, and has only introductory/selling point value for those considering *trying out* the engine for the first time, not necessarily *developing* features.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWrite an official documentation page or document which fully describes the development philosophy behind Godot Engine which would be mainly targeted at those wanting to make sure that their own development philosophy is in alignment with Godot Engine's one before considering contributing.\r\n\r\nThe most important questions which I'd like to be answered personally are: \r\n\r\n1. Are we aiming for something like what other commercial engines provide, or is Godot becoming a **Linux kernel** but in the game development field instead (despite having a dedicated editor)? That's important because that signifies that a lot of current proposals should actually be targeted for module/plugin/addon development instead (hence the need for Godot Ideas repository: #1476). If that's the case (and it seems like the case, according to some classes already being removed from core in Godot 4.0, such as `InterpolatedCamera` godotengine/godot#42113), this leads to the next question.\r\n\r\n2. If Godot can be seen as an open-source game development kernel, does it plan to provide a standard library distributed alongside Godot? Inspired by C++ STL, I'd personally see this being as **Godot Standard Library (GSL)**, which would be written as GDScript, GDNative plugins and packages, and even C++ modules, such as the one I'm currently working on: [Goost](https://github.com/goostengine/goost).\r\n\r\n3. If Godot aims to further remove features from the engine to prevent bloat, would those features be actually maintained by the core developers? That would be actually the most important question to answer, because if those features won't be maintained on the same level as Godot core, the maintenance burden will lie on the shoulders of other (non-core) community members, and the amount of donations Godot currently receives would become quite disproportionate.\r\n\r\nIf the purpose and the intention is not clear, we'll keep accumulating feature and enhancements proposals which go against existing development ideology, making it more difficult to actually focus on those proposals which could benefit the engine in its current state.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Have a document which formalizes Godot Engine's development ideology to great extent: https://github.com/godotengine/godot-proposals/issues/575#issuecomment-623128660.\r\n2. Link this document at GIP, so people can have a chance to re-evaluate their proposals and whether they actually fit the ideology.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI think that [Contributing](http://docs.godotengine.org/en/latest/community/contributing/index.html) and [Godot's design philosophy](http://docs.godotengine.org/en/latest/getting_started/step_by_step/godot_design_philosophy.html) pages might give some answers to this on some level, but I honestly feel like there should be a dedicated document which just translates what seems to be hidden gems inside the minds of geniuses in the form of text. I know it may be difficult to describe a particular way of thinking, but please consider this option. If the vision is not yet complete, lets call the document \"The Future of Godot\", because we all need to share the same vision to make the development process as smooth as possible for everyone involved: #1333.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nMaking a document like this can help people realize that most of their feature and enhancements proposals can (or rather **should**) be implemented via modules, plugins, addons (it may not be the case now, but I hope that this can become a reality in the future). Having a clear set of criteria regarding core development philosophy can help people accept the way the engine chooses what features are essential to realize its vision (which may or may not be in alignment with each individual's vision), and save the time it takes to implement them for core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/575/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/574",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/574/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/574/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/574/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/574",
    "id": 578795592,
    "node_id": "MDU6SXNzdWU1Nzg3OTU1OTI=",
    "number": 574,
    "title": "Impove Tileset UX/UI",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-10T18:59:42Z",
    "updated_at": "2020-03-19T13:20:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D games with Tilesets.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNavigating Tileset is an exercise in pain resilience.\r\nImagine a user want to rename a Tile, this is what they have to go through:\r\n![trying_to_rename_tile](https://user-images.githubusercontent.com/47016402/76342430-e0be3b00-62fe-11ea-8dbf-f68e0dba2c3a.gif)\r\n\r\nThat is, if they even manage to figure out all the necessary things to click ... because why you would have to click them, nor their order, is in any way obvious, intuitive, or reasonable.\r\nIt's a similar story when you try to do something as simple as deleting a tile or when you try to get to a specific Tile to edit it's parameters.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBring basic Tile options to the Tilemap panel:\r\n**Right click** on the Tile to bring up a context menu to edit, rename or delete the tile.\r\n**Double click** the Tile to edit the Tile (brings up the Tileset bottom panel and Inspector info with all the selected tile info):\r\n![tilemap_doubleclick_to_edit](https://user-images.githubusercontent.com/47016402/76351712-3817d780-630e-11ea-97e5-8fbe2945f313.png)\r\n\r\n\r\nWhen there is no Tileset loaded or created yet, provide buttons similarly to the Scene Panel on an empty scene, that when clicked, create a Tileset for the user, brings up the bottom panel, and prompts the user to select a texture:\r\n![tilemap2](https://user-images.githubusercontent.com/47016402/76348968-6e068d00-6309-11ea-8622-94a47dfb0c71.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee mockups above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it's a desperately needed UI/UX improvement, that would be used often by anyone working with Tilesets (so a lot).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it's a desperately needed UI/UX improvement, that would be used often by anyone working with Tilesets (so a lot).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/574/reactions",
      "total_count": 34,
      "+1": 34,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/573",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/573/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/573/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/573/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/573",
    "id": 578790114,
    "node_id": "MDU6SXNzdWU1Nzg3OTAxMTQ=",
    "number": 573,
    "title": "Make C++ as first-class language to choose into attach script.",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-03-10T18:49:04Z",
    "updated_at": "2020-10-15T13:17:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 3D Platformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI Would like to have some features done in c++\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake c++ scripting language as a option to attach into nodes like csharp. Actaully the way to make cpp files needs to do a lot of configurations,compilations, and so on to simply make one script. So by adding it as a language option would work like csharp works, just select it and code!\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![cpp](https://user-images.githubusercontent.com/58845030/76348039-52d65600-62e6-11ea-95a2-ddcab04d0482.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is already possible but for someone who wants to focus on game-making its not intuitive",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/573/reactions",
      "total_count": 25,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/572",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/572/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/572/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/572/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/572",
    "id": 578582033,
    "node_id": "MDU6SXNzdWU1Nzg1ODIwMzM=",
    "number": 572,
    "title": "Custom editor icons should change color with light themes",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-03-10T13:33:11Z",
    "updated_at": "2021-01-09T23:59:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** [2.5D demo project](https://github.com/godotengine/godot-demo-projects/tree/master/misc/2.5d), and anything else with editor icons.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nRight now the main screen plugin icon looks fine with the editor's default theme:\r\n\r\n![Screenshot from 2020-03-10 09-12-18](https://user-images.githubusercontent.com/1646875/76315767-bdb86a80-62af-11ea-81e1-1dcdfdd4b5c7.png)\r\n\r\nBut it doesn't look right with the \"Light\" theme, the other icons are dark but 2.5D remains light and therefore becomes invisible against the light background:\r\n\r\n![Screenshot from 2020-03-10 09-12-09](https://user-images.githubusercontent.com/1646875/76315773-bf822e00-62af-11ea-84cb-51265cca776f.png)\r\n\r\nThis problem also exists to a lesser extent in the hierarchy, where the purple Node25D icon really should be a darker shade similarly to how the Node2D/etc icons become a darker shade:\r\n\r\n![3](https://user-images.githubusercontent.com/1646875/76315840-df195680-62af-11ea-8f28-262c191012c3.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposed enhancement is that, whatever logic is applied to change the color of editor icons when a light theme is activated, the same logic should also be applied to user-created custom icons when they're displayed in the editor. See my comment [here](https://github.com/godotengine/godot/pull/14348#issuecomment-593829129).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI'm not exactly sure how to current logic works. Does it just change the brightness? The code would be the same as how the current logic works.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere doesn't seem to be a way to get the calculated value of whether the icon and font color is light or dark. If you run the following code in an EditorPlugin script, it prints `0` (automatic):\r\n\r\n    print(get_editor_interface().get_editor_settings().get_setting(\"interface/theme/icon_and_font_color\"))\r\n\r\nThe best solution for now is to have the above code (in case users wish to specifically enforce light/dark icon/font color) combined with code like this:\r\n\r\n    print(get_editor_interface().get_editor_settings().get_setting(\"interface/theme/base_color\").v > 0.5)\r\n\r\nHowever, this doesn't update the plugin unless the plugin is restarted, and it also may not be consistent with the code that the editor uses to determine whether to use light or dark icons and font color. Therefore, this can't properly be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis can't be worked around properly in an add-on, and it is about making add-ons better.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/572/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/819",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/819/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/819/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/819/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/819",
    "id": 615432284,
    "node_id": "MDU6SXNzdWU2MTU0MzIyODQ=",
    "number": 819,
    "title": "Tweak GridSnap editor to not look like an abbreviation for \"Antialiasing\" in Chinese",
    "user": {
      "login": "timothyqiu",
      "id": 372476,
      "node_id": "MDQ6VXNlcjM3MjQ3Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/372476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timothyqiu",
      "html_url": "https://github.com/timothyqiu",
      "followers_url": "https://api.github.com/users/timothyqiu/followers",
      "following_url": "https://api.github.com/users/timothyqiu/following{/other_user}",
      "gists_url": "https://api.github.com/users/timothyqiu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timothyqiu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timothyqiu/subscriptions",
      "organizations_url": "https://api.github.com/users/timothyqiu/orgs",
      "repos_url": "https://api.github.com/users/timothyqiu/repos",
      "events_url": "https://api.github.com/users/timothyqiu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timothyqiu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-09T03:32:05Z",
    "updated_at": "2020-05-10T17:18:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The current icon for [Grid Snap](https://github.com/godotengine/godot-design/blob/e88d4958b835497776d36f5bac397ecdda63adb0/engine/icons/svg/icon_snap_grid.svg) looks very similar to the Chinese character \"抗\"(anti-), which is often used as an abbreviation for \"抗锯齿\"(anti-aliasing) in a graphic software context.\r\n\r\n\r\nThe current icon looks like this on the toolbar. As a native speaker, I can't resist thinking it's an antialiasing toggle every time I look at the button in Godot :(\r\n\r\n<img width=\"160\" alt=\"current\" src=\"https://user-images.githubusercontent.com/372476/76180306-8aff6b00-61f8-11ea-8acc-5f9231d4ece6.png\">\r\n\r\nI suggest using a more \"grid\" like graphic like this (icon taken from [here](https://www.iconfinder.com/icons/612278/grid_magnet_magnetic_snap_icon))\r\n\r\n<img width=\"160\" alt=\"sample\" src=\"https://user-images.githubusercontent.com/372476/76180300-889d1100-61f8-11ea-9e2b-d711f3503a94.png\">\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/568",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/568/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/568/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/568/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/568",
    "id": 577367021,
    "node_id": "MDU6SXNzdWU1NzczNjcwMjE=",
    "number": 568,
    "title": "uppercase property for TextEdit and others",
    "user": {
      "login": "Iddmeister",
      "id": 46793158,
      "node_id": "MDQ6VXNlcjQ2NzkzMTU4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46793158?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iddmeister",
      "html_url": "https://github.com/Iddmeister",
      "followers_url": "https://api.github.com/users/Iddmeister/followers",
      "following_url": "https://api.github.com/users/Iddmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iddmeister/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iddmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iddmeister/subscriptions",
      "organizations_url": "https://api.github.com/users/Iddmeister/orgs",
      "repos_url": "https://api.github.com/users/Iddmeister/repos",
      "events_url": "https://api.github.com/users/Iddmeister/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iddmeister/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-07T16:42:07Z",
    "updated_at": "2020-03-08T16:36:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is a bit random but Label has an uppercase property and I've recently needed all the characters in a text edit to be capitals but it has no uppercase property. Not the most important issue but I just thought I'd say.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/568/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/567",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/567/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/567/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/567/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/567",
    "id": 577332210,
    "node_id": "MDU6SXNzdWU1NzczMzIyMTA=",
    "number": 567,
    "title": "Using AnimatedSprite and AnimationTree together",
    "user": {
      "login": "lszl84",
      "id": 42072702,
      "node_id": "MDQ6VXNlcjQyMDcyNzAy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42072702?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lszl84",
      "html_url": "https://github.com/lszl84",
      "followers_url": "https://api.github.com/users/lszl84/followers",
      "following_url": "https://api.github.com/users/lszl84/following{/other_user}",
      "gists_url": "https://api.github.com/users/lszl84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lszl84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lszl84/subscriptions",
      "organizations_url": "https://api.github.com/users/lszl84/orgs",
      "repos_url": "https://api.github.com/users/lszl84/repos",
      "events_url": "https://api.github.com/users/lszl84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lszl84/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-03-07T13:04:37Z",
    "updated_at": "2020-03-12T00:05:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nSimple 2D game with character animations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm using AnimatedSprite for animating the character because:\r\n- it allows setting the FPS, so I can easily match the value used when exporting the animation frames from the animation software I'm using,\r\n- the sprite is quite large and there frame count is high, so I guess switching to AnimationPlayer using spritesheets that are tens of thousands pixel wide/high would not be optimal.\r\n\r\nI want to define custom transitions between animations: e.g. for the character to start walking, I'd like to transition from idle animation (looping) trough \"start walk\" (not looping) animation to the final \"walk\" animation (again, loop).\r\n\r\nWhile I can do this in code using a dictionary for state machine, connecting animation stop signals etc, I believe the cleaner and easier solution would be to use AnimationTree.\r\n\r\nUnfortunately, AnimationTree does not work with AnimatedSprite.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd \"animated sprite\" property to AnimationTree and allow adding animations from that AnimatedSprite to the AnimationTree.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd \"animated sprite\" property to AnimationTree and allow adding animations from that AnimatedSprite to the AnimationTree. Pretty obvious, not sure if any mockups are needed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nPossible workarounds:\r\n- use custom dictionary state machine and connect to AnimatedSprite's signals. Disadvantages: more cumbersome than AnimationTree, more work, harder to maintain,\r\n- use AnimationPlayer and sprite sheet instead of single sprite frames and AnimatedSprite. Disadvantages: \r\n    - requires additional work in order to merge sprite frames into a sprite sheet,\r\n    - using spritesheets may hurt performance for larger sprites with a lot of frames\r\n    - setting specific FPS is more difficult (especially when adding/removing frames to the animation),\r\n- use AnimationPlayer to animate AnimatedSprite properties like \"playing\" or \"animation\". Disadvantages: redundant, weird, confusing and a really bad design.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAnimatedSprite was created to make animations easier for beginners, adding this feature will make it easy to support common animation transitions using this simple node.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/567/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/566",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/566/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/566/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/566/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/566",
    "id": 577328685,
    "node_id": "MDU6SXNzdWU1NzczMjg2ODU=",
    "number": 566,
    "title": "Add diagonal constants to Vector2() like UP_LEFT",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2020-03-07T12:34:46Z",
    "updated_at": "2020-12-25T10:09:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop down action game with 8 directions.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVector2 constants are fantastic, they make the code a lot more readable!\r\nHowever since all my games are 8 directional, just having 4 constants results in either me having to mix constants (Vector2.LEFT) and numerical vectors for the diagonal (Vector2.(-1,1)), or not use constants at all. Which is weirdly confusing and kind of defeats their prime purpose of readability.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf we also had diagonal Vector2 constants, I could use constants everywhere in my projects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdding:\r\nVector2.UP_LEFT\r\nVector2.UP_RIGHT\r\nVector2.DOWN_LEFT\r\nVector2.DOWN_RIGHT\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWould be used often by anyone working with 8 directional inputs (so not exactly rare usecase)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is about integral API.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/566/reactions",
      "total_count": 12,
      "+1": 2,
      "-1": 4,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 2,
      "rocket": 1,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/564",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/564/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/564/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/564/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/564",
    "id": 577218235,
    "node_id": "MDU6SXNzdWU1NzcyMTgyMzU=",
    "number": 564,
    "title": "Ability to convert a CollisionShape2D's visual representation to an OccluderPolygon2D",
    "user": {
      "login": "BluePhoenixGame",
      "id": 38372706,
      "node_id": "MDQ6VXNlcjM4MzcyNzA2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/38372706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BluePhoenixGame",
      "html_url": "https://github.com/BluePhoenixGame",
      "followers_url": "https://api.github.com/users/BluePhoenixGame/followers",
      "following_url": "https://api.github.com/users/BluePhoenixGame/following{/other_user}",
      "gists_url": "https://api.github.com/users/BluePhoenixGame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BluePhoenixGame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BluePhoenixGame/subscriptions",
      "organizations_url": "https://api.github.com/users/BluePhoenixGame/orgs",
      "repos_url": "https://api.github.com/users/BluePhoenixGame/repos",
      "events_url": "https://api.github.com/users/BluePhoenixGame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BluePhoenixGame/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-06T22:54:58Z",
    "updated_at": "2020-11-22T16:40:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA simple arcade game. It uses light and collisionshapes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, it's hard to make a circle or other polygon with a OccluderPolygon2d\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think either a setting to use the collisionshape of the parent node as a lightoccluder, or you can in the drop-down let users specify an already existing collisionshape (sibling-nodes)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSo far it doesn't make sense to have any code or any API for it.\r\n![image](https://user-images.githubusercontent.com/38372706/76128541-e8cb6180-6004-11ea-9fc9-7ae22c62f877.png)\r\nIn the red circle another option \"From CollisionShape2d\". There you can later specify a collision shape out of all the sibling nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere is currently no way that this could be recreated in a simple manor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis could be such a broadly used feature. And very convenient for most cases when working with lightning.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/564/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
