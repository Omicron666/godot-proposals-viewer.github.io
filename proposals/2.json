[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1991",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1991/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1991/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1991/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1991",
    "id": 768242578,
    "node_id": "MDU6SXNzdWU3NjgyNDI1Nzg=",
    "number": 1991,
    "title": "Add x, y, w, h properties to Rect2",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-12-15T22:03:00Z",
    "updated_at": "2020-12-24T09:19:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nProject using Rect2s.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI happen to use Rect2 quite a lot in my project and it's starting to feel inconvenient and verbose. The reason is that I often have to access the `position` and `size` properties, which results in `rect.position.x` etc. all over the code.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nRect2 should have `x`, `y`, `w`, `h` properties, so you can do e.g. `rect.x` instead of `rect.position.x` or `rect.w` instead of `rect.size.x` etc. It makes code much more compact and arguably easier to read.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSee above.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThe point is to make the lines shorter.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nImpossible without modifying the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1991/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1990",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1990/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1990/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1990/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1990",
    "id": 768186233,
    "node_id": "MDU6SXNzdWU3NjgxODYyMzM=",
    "number": 1990,
    "title": "Add a way to avoid creating callbacks when connecting signals",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-12-15T20:49:13Z",
    "updated_at": "2020-12-16T17:10:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot plugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGdscript signal system is powerful and flexible.\r\nBut it seems the more connections I have the less readable my code is.\r\nI also faced this problem in other frameworks that use similar pattern.\r\n\r\nI think this is mainly because of:\r\n- when using `connect()`, I also create a callback method and put there what I want to do when the signal fired. But that means the code becomes less straightforward = less readable.\r\nSo I need to jump to `on_` methods every time to know what I do there.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nA way to write more straightforward code without the need to create callback methods (at least explicitly) when connecting signals would solve the problem. \r\n\r\nOne way could be adding `when` keyword that could work this way:\r\n\r\n```gdscript\r\nfunc _ready():\r\n    when pressed:\r\n        print('button pressed')\r\n```\r\nThat means each time you press the button, 'button pressed' is printed.\r\n\r\nThen you can continue to write the code as usual\r\n```gdscript\r\nfunc _ready():\r\n    when pressed:\r\n        print('button pressed')\r\n\r\n    print('hi')\r\n```\r\nIn this case 'hi' would be printed, without waiting for the button press, unlike `yield` works for example.\r\n\r\nAs you can see there's no need for creating callbacks like `on_pressed()`. The code becomes more readable and straightforward.\r\n\r\nAnother example:\r\n```gdscript\r\nfunc _ready():\r\n    when pressed:\r\n        print('button pressed')\r\n    when pressed:\r\n        print('button pressed')\r\n```\r\nThis would print 'button pressed' twice every time button is pressed.\r\nThis ability to write multiple `when` blocks would be very useful to follow divide-and-conquer algorithm and have small separated code blocks.\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n- Each `when` statement could implicitly create a unique function and connect a signal ('pressed' in the example above) to it.\r\nOr this could be created as a method of object where `when` statement is created.\r\n\r\n- In order to be able to disconnect this implicitly created function, the statement could return it for example this way:\r\n```gdscript\r\nfunc _ready():\r\n    var f = when pressed:\r\n        print('button pressed')\r\n```\r\nWhere `f` could be the callback name\r\n\r\n\r\nI think there's no need to return Error code (that `connect()` does) because the callback function with connected signal should be created anyway.\r\n\r\n- in case the signal belongs to some other object (say named `other_node`, this syntax could be used:\r\n```gdscript\r\nfunc _ready():\r\n    when other_node, pressed:\r\n        print('button pressed')\r\n```\r\n\r\n- Signals can have arguments, so it could be look like:\r\n```gdscript\r\nfunc _ready():\r\n    when other_node, pressed, args_array:\r\n        print('args')\r\n```\r\nThis prints `pressed` signal args array (which are passed in `emit_signal`) if any.\r\n\r\nNot sure if it should have connect flags like `connect()` has. \r\n\r\nThe downsides I can see:\r\n- a new keyword created (`when`)\r\n- this keyword may be confusing for people that used to other meaning of `when` keyword (c#, nim etc)\r\n- some limitations should be introduced I think, like prohibition to write multilevel `when` statements\r\n- not sure how easy it would be to implement this.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nnot possible now.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nGdscript syntax feature that may hopefully be used often.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1990/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1988",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1988/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1988/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1988/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1988",
    "id": 767787766,
    "node_id": "MDU6SXNzdWU3Njc3ODc3NjY=",
    "number": 1988,
    "title": "Add lower-level access to the AStar class",
    "user": {
      "login": "barbaros83",
      "id": 59711483,
      "node_id": "MDQ6VXNlcjU5NzExNDgz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/59711483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/barbaros83",
      "html_url": "https://github.com/barbaros83",
      "followers_url": "https://api.github.com/users/barbaros83/followers",
      "following_url": "https://api.github.com/users/barbaros83/following{/other_user}",
      "gists_url": "https://api.github.com/users/barbaros83/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barbaros83/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barbaros83/subscriptions",
      "organizations_url": "https://api.github.com/users/barbaros83/orgs",
      "repos_url": "https://api.github.com/users/barbaros83/repos",
      "events_url": "https://api.github.com/users/barbaros83/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barbaros83/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-15T16:37:49Z",
    "updated_at": "2020-12-15T20:30:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n2D RTS game path finding\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nI have tried to write a path finding system where i can move around multiple units.\r\nFirst i tried it with the navigation2d node, but it wasn't suited for what i wanted to do, so i tried with astar2D.\r\nIn astar, you can query for an id that gives you the closest available position to a specific position.\r\nWhen moving multiple units around, it would be necessary to make all the units aware of each others position, or block the position that that unit occupies so that other units can get a path around that.\r\nBut in the astar class, you can disable individual points, and only get a specific point with an id, if you use a position to look for a point in the astar algorithm you get a close point, not necessarily the exact point, thus it becomes dificult to block the unit from other units.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nit would be very helpfull if we had more functions to work with in the astar algorithm, such as access to the underlying arrays, a way to get the exact point with position instead of id, and maybe enhancments that will allow for pathfinding of multiple units at once.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nim not experienced enough with coding or algorithms\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\ni dont think this is doable with a few lines of script\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\npath finding is a core component of most games\r\n\r\nextra:\r\n\r\n![Screenshot from 2020-12-15 21-26-48](https://user-images.githubusercontent.com/59711483/102269199-98324e80-3f1c-11eb-87ea-1aca01a73e79.png)\r\n\r\nas you can see, the function that returns a point doesnt give an exact location, thus i cant block the units precise postion so that other units can avoid it",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1987",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1987/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1987/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1987/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1987",
    "id": 767714523,
    "node_id": "MDU6SXNzdWU3Njc3MTQ1MjM=",
    "number": 1987,
    "title": "Enable unit tests for -O3 and -O2 and enable this on the CI",
    "user": {
      "login": "RevoluPowered",
      "id": 748770,
      "node_id": "MDQ6VXNlcjc0ODc3MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/748770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RevoluPowered",
      "html_url": "https://github.com/RevoluPowered",
      "followers_url": "https://api.github.com/users/RevoluPowered/followers",
      "following_url": "https://api.github.com/users/RevoluPowered/following{/other_user}",
      "gists_url": "https://api.github.com/users/RevoluPowered/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RevoluPowered/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RevoluPowered/subscriptions",
      "organizations_url": "https://api.github.com/users/RevoluPowered/orgs",
      "repos_url": "https://api.github.com/users/RevoluPowered/repos",
      "events_url": "https://api.github.com/users/RevoluPowered/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RevoluPowered/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-15T15:31:46Z",
    "updated_at": "2020-12-15T16:29:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nWe are working on an iOS game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWe have a bug with -O3 optimizations breaking GDScript on iOS it goes away with -O2.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWe should make all unit tests run on each type of binary release:\r\n- O3 (release)\r\n- O2 (release_debug)\r\n- NO opt (debug)\r\n\r\nThis will mean these bugs can be caught with different optimization levels.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWe would just add some logic to the CI to trigger this to use O2 and O3 respectively.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1987/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1986",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1986/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1986/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1986/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1986",
    "id": 767613429,
    "node_id": "MDU6SXNzdWU3Njc2MTM0Mjk=",
    "number": 1986,
    "title": "Add left, right and bottom location options for TabContainer",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-15T13:47:45Z",
    "updated_at": "2020-12-15T14:29:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\nMore advanced usage of tabs.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd left, right and bottom options for TabContainer\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n**Bottom: Visual Studio**\r\n![image](https://user-images.githubusercontent.com/41730826/102222894-c1a8a580-3f2f-11eb-90a5-8653e3558f35.png)\r\n\r\n**Left/Right**\r\n![image](https://user-images.githubusercontent.com/41730826/102222967-d71dcf80-3f2f-11eb-8a81-dc1ed7981c98.png)\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nBasically would need to write your own tab container from scratch\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1986/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1984",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1984/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1984/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1984/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1984",
    "id": 767309061,
    "node_id": "MDU6SXNzdWU3NjczMDkwNjE=",
    "number": 1984,
    "title": "Allow detached editor docks to be split or contain more than one tab",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-15T08:17:53Z",
    "updated_at": "2020-12-15T12:56:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\n1. UI is not flexible (a few other proposals related to this).\r\n2. Now with floating docks, you cannot keep 2 docks in one window. E.g. \"Inspector\" and \"Node\" by default exist on the right hand side of the main Godot window. If you make Inspector \"floating\", it creates it's own window. If you make \"Node\" floating, again, it is in it's own window. You cannot combine these two to make them into one floated window with tabs - it has to be 2 separate windows. Lame!\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nDockable UI. See the dockable UI system for Qt. It is probably way overboard for what we need, but that gives you an idea of what I mean. https://github.com/githubuser0xFFFF/Qt-Advanced-Docking-System\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nCurrently, the Inspector (for example) just opens in it's own window. It is not inside a tab container.\r\n\r\n![godot-dockable](https://user-images.githubusercontent.com/41730826/102188796-7a0b2500-3f01-11eb-9850-0c558633df31.png)\r\n\r\nOff the top of my head, I think maybe we would need something like `EditorWindow`, which inherits from `Window` and has the ability to do this sort of splitting stuff.\r\n\r\nTo begin with, it is probably just worth the drag and drop of 'tabs' working first (green in image above).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1984/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1983",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1983/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1983/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1983/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1983",
    "id": 766395340,
    "node_id": "MDU6SXNzdWU3NjYzOTUzNDA=",
    "number": 1983,
    "title": "By default, bind Alt + Enter to switch between fullscreen and windowed mode",
    "user": {
      "login": "iwanPlays",
      "id": 25465450,
      "node_id": "MDQ6VXNlcjI1NDY1NDUw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25465450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iwanPlays",
      "html_url": "https://github.com/iwanPlays",
      "followers_url": "https://api.github.com/users/iwanPlays/followers",
      "following_url": "https://api.github.com/users/iwanPlays/following{/other_user}",
      "gists_url": "https://api.github.com/users/iwanPlays/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iwanPlays/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iwanPlays/subscriptions",
      "organizations_url": "https://api.github.com/users/iwanPlays/orgs",
      "repos_url": "https://api.github.com/users/iwanPlays/repos",
      "events_url": "https://api.github.com/users/iwanPlays/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iwanPlays/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-14T12:49:10Z",
    "updated_at": "2020-12-15T16:54:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nNone. I am a YouTuber representing players from a convenience/usability perspective.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nGodot games usually start at 1280x720 windowed mode\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nUnreal and Unity by default allow switching between windowed (multitasking) and fullscreen (immersion) using ALT+ENTER Most other games do too. It allows for fast necessary window management, because there are screens/drivers that just have issues with fullscreen but playing fullscreen is important for immersion.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```\r\nif alt-enter pressed and fullscreen then\r\n  windowed\r\nelse\r\n  fullscreen\r\nend\r\n```\r\n\r\nA project settings switch could be used to disable this a la https://answers.unity.com/questions/544183/block-or-override-alt-enter-fullscreen.html but it needs to be default.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nOf course, yes. But it will be used by every game unless the game is supposed to be a troll/subversive kind of game. The purpose of this is to provide usability/immersion to projects made by beginners. It is to help beginner game devs who are already overwhelmed by making a game and not have them think about window management.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's basic functionality of nearly every game on the market. Just like ALT+F4 needs to kill applications unless there's a really good reason against or ALT+TAB should always switch applications unless there's a REALLY REALLY REALLY good reason against that.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1983/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1979",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1979/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1979/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1979/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1979",
    "id": 764455802,
    "node_id": "MDU6SXNzdWU3NjQ0NTU4MDI=",
    "number": 1979,
    "title": "global_position and immediate/watch data not part of debug",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-12T21:55:57Z",
    "updated_at": "2020-12-12T22:22:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\nWhen in debug, there is no means of finding out a node's global position. Local position is of no use when you want to check a position relative to another node's position.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSimply provide a means of getting at global_position, and probably many other data variables that Godot does not provide.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nEither simply add global_position to either the breakpoint list or the Inspector list. Or even allow hovering over 'global_position' would be enough for most people...\r\n\r\nTo make it wider, I'm sure somebody must have suggested having something pretty much built into every debugger, an 'immediate window' or a 'watch' window, i.e. part of the editor that allows either variables to be added for viewing or even typed to be evaluated (given this is a scripted language it should be easy enough to parse and display 'out of scope' or the value.\r\n\r\nThe list is pretty much endless for missing information, for example trying to find a resource's value such as visibility or collision box extents and (don't quote me!) the data showed for these items are the design time not runtime values for a lot of nodes.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo. In my case, the only way I can find is to temporarily add a variable, because for some reason the editor doesn't even want to show global_position when you hover over the variable - so double whammy there ;)\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBasic debugging options and ability to view a core data item",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1979/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1978",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1978/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1978/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1978/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1978",
    "id": 764377023,
    "node_id": "MDU6SXNzdWU3NjQzNzcwMjM=",
    "number": 1978,
    "title": "Allow visibility notifiers to be disabled",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-12T20:56:32Z",
    "updated_at": "2020-12-12T21:01:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the problem or limitation you are having in your project\r\nUnlike all other nodes, visibility notifiers provides no means at all for disabling them.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nwhen an object is removed, e.g. you shoot it and it removes itself, the visibility notifier events still fire so you get an additional signal raised even though you have probably already queued it for deletion, or you may do more code inside visibility notifier that is no longer required.\r\n\r\nThe usual use-case for the signal is it has left the visible screen, not freed in code.\r\n\r\nBecause of this you have to provide workarounds by creating 'dead' flags, or whatever, to avoid the problem.\r\n\r\nThe only solution involves, as far as I can tell, disconnecting the signal. Inside the object it might not know the stringed method name, object and function name, and even if so, this is a really clunky way of stopping the notifier.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nProvide a disable() method, nice and simple.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo, everything is a hack and disconnecting the signal is not optimal or sometimes with dynamic objects, not always possible.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nDisabling a node from being active is pretty much basic core functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1977",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1977/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1977/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1977/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1977",
    "id": 763612788,
    "node_id": "MDU6SXNzdWU3NjM2MTI3ODg=",
    "number": 1977,
    "title": "Add `mouse_entered_item` and `mouse_exited_item` signals to PopupMenu",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-12T11:19:13Z",
    "updated_at": "2020-12-12T14:09:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot plugins\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIn `PopupMenu` I need to do something when mouse hovers an item.\r\nBut it seems I can't do this without using `_gui_input()`.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n`mouse_entered_item` and `mouse_exited_item` signals would solve the problem.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nmouse_entered_item(idx:int) or\r\nmouse_entered_item(id:int)\r\n\r\n```\r\nsame for `mouse_exited_item`\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nUsing `_gui_input()` I think\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think this would be useful and handy in many cases especially for making better UX.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1977/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1976",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1976/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1976/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1976/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1976",
    "id": 763581629,
    "node_id": "MDU6SXNzdWU3NjM1ODE2Mjk=",
    "number": 1976,
    "title": "Add `get_item_position()` method to PopupMenu",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-12T10:47:12Z",
    "updated_at": "2020-12-12T14:09:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot editor plugins (gdscript)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIn `PopupMenu`, when pressing an item, I need to get its position (y).\r\n`int(rect_size[1]/get_item_count())*item_idx` does not work accurately (which is expected, since I should to take into account the `PopupMenu` borders and maybe something else).\r\nI do not see a simple universal formula for this (that would work for different PopupMenu styles/themes), so I would like to have this function in the API.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n`get_item_position()` would solve the problem\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nVector2 get_item_position(item_idx:int)\r\nReturns PupupMenu item position with given idx\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\ncan't get simple universal formula for it\r\nsomething like `int(rect_size[1]/get_item_count())*item_idx` could be used, but it's not inaccurate.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think this `PopupMenu` method would be useful in a wide variety of cases (for example making custom submenus or custom highlighting of items etc)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1975",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1975/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1975/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1975/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1975",
    "id": 762952676,
    "node_id": "MDU6SXNzdWU3NjI5NTI2NzY=",
    "number": 1975,
    "title": "Add a clear button to the item list editor",
    "user": {
      "login": "Animus-Surge",
      "id": 22083792,
      "node_id": "MDQ6VXNlcjIyMDgzNzky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22083792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Animus-Surge",
      "html_url": "https://github.com/Animus-Surge",
      "followers_url": "https://api.github.com/users/Animus-Surge/followers",
      "following_url": "https://api.github.com/users/Animus-Surge/following{/other_user}",
      "gists_url": "https://api.github.com/users/Animus-Surge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Animus-Surge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Animus-Surge/subscriptions",
      "organizations_url": "https://api.github.com/users/Animus-Surge/orgs",
      "repos_url": "https://api.github.com/users/Animus-Surge/repos",
      "events_url": "https://api.github.com/users/Animus-Surge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Animus-Surge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-11T21:50:35Z",
    "updated_at": "2020-12-13T04:37:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI'm working on an RPG, and I had a traits list that I was just going to hard code in all the possible traits that affect certain features of the game into an OptionButton.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI ended up deciding that was a bad idea and not expandable by addons for my game, so I decided to clear out all the itemlists. However, I have to keep clicking the text box of an item, followed by the delete button at the top of the item list editor, and that gets really tedious if you have a whole lot of items for each item list.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI think there should be a clear button in the item list editor so you can quickly remove every item for an OptionButton or similar. Maybe even a dialogue confirming that you would like to do that so it's idiot proof.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![concept](https://user-images.githubusercontent.com/22083792/101957986-7bbaad00-3bd0-11eb-93a5-8ae8d24615c9.png)\r\n\r\nI just copy-pasted the delete icon to the clear button, but you can definitely change that.\r\n\r\nI didn't mess with code, I just did a little bit of image editing to get that\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI'm not sure, I guess you could write a tool script or something, but I have zero experience with them. You could also just... delete the OptionButton or something, but I feel like adding this would be pretty useful so you don't have to keep deleting/re-adding the OptionButton if you keep changing things.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's one button, and I feel that it could be quite useful",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1975/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1973",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1973/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1973/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1973/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1973",
    "id": 762768519,
    "node_id": "MDU6SXNzdWU3NjI3Njg1MTk=",
    "number": 1973,
    "title": "Allow C# exceptions to go to log instead of exiting the project",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-11T19:01:25Z",
    "updated_at": "2020-12-11T20:16:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nNot relevant\r\n\r\n### Describe the problem or limitation you are having in your project\r\nSometimes when debugging it would be nice to be able to repeat a certain action and trigger an exception multiple times to test different routes in the debugger.\r\nCurrently godot just exits the app when an exception is thrown and not handled.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nHaving an option to instead allow unhandled exceptions to just print to the console, as unity does for example, would save quite some time when debugging in not having to restart the app and recreate the corresponding state from the beginning each time.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAn option (toggle) in the project settings would probably do it.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt's part of the engine's inner working\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nabove",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1973/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1972",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1972/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1972/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1972/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1972",
    "id": 762764283,
    "node_id": "MDU6SXNzdWU3NjI3NjQyODM=",
    "number": 1972,
    "title": "Add built-in additive colour modulation",
    "user": {
      "login": "snoopdouglas",
      "id": 4892574,
      "node_id": "MDQ6VXNlcjQ4OTI1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4892574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/snoopdouglas",
      "html_url": "https://github.com/snoopdouglas",
      "followers_url": "https://api.github.com/users/snoopdouglas/followers",
      "following_url": "https://api.github.com/users/snoopdouglas/following{/other_user}",
      "gists_url": "https://api.github.com/users/snoopdouglas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/snoopdouglas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/snoopdouglas/subscriptions",
      "organizations_url": "https://api.github.com/users/snoopdouglas/orgs",
      "repos_url": "https://api.github.com/users/snoopdouglas/repos",
      "events_url": "https://api.github.com/users/snoopdouglas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/snoopdouglas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-11T18:57:02Z",
    "updated_at": "2020-12-11T20:43:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nPlatformer (n/a really)\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nAdditional to colour modulation (which Godot currently implements *subtractively* on `Node2D.modulate`), I often find myself wanting to *additively* modulate a node's colour - that is, to 'brighten' it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI'd like to have it as a built-in feature, eg. `Node2D.modulate_mode`.\r\n\r\nWhile this is possible through shaders (which are currently how I do this), I find myself needing to brighten my nodes quite often, so would prefer not to have to use shaders.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nTo demonstrate, here's a shader for 2D textures that implements an additive modulation (with linear interpolation, similar to how Godot does it subtractively):\r\n\r\n```glsl\r\nshader_type canvas_item;\r\nrender_mode unshaded;\r\n\r\nuniform vec4 modulate = vec4(0, 0, 0, 0);\r\n\r\nvoid fragment() {\r\n\tCOLOR = mix(texture(TEXTURE, UV), vec4(1, 1, 1, 1), modulate);\r\n}\r\n```\r\n\r\nI also find being able to either add *or* subtract useful (using the same modulation colour for both). I personally call this 'duplex' - but I'm unsure whether there's a better word for it.\r\n\r\nThis can be done by modulating with a colour that defaults to mid-grey, where values < 0.5 subtract, and values > 0.5 add:\r\n\r\n```glsl\r\nshader_type canvas_item;\r\nrender_mode unshaded;\r\n\r\nuniform vec4 modulate = vec4(0.5, 0.5, 0.5, 0.5);\r\n\r\nvoid fragment() {\r\n\tvec4 modulate2 = (modulate - 0.5) * 2.0;\r\n\tCOLOR = mix(texture(TEXTURE, UV), floor(modulate2), abs(modulate2));\r\n}\r\n```\r\n\r\nFor subtractive, additive and duplex modulation respectively, `Node2D.modulate_mode` could be an enum with `SUBTRACT, ADD, DUPLEX`.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nIf I won't, yes (as demonstrated above). I think it would though. ;)\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nI personally find myself using this a lot. If it's just me though, yes, a plugin would probably be achievable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1968",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1968/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1968/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1968/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1968",
    "id": 761255639,
    "node_id": "MDU6SXNzdWU3NjEyNTU2Mzk=",
    "number": 1968,
    "title": "Improve navigation of enum dropdown list (export var)",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-10T13:46:59Z",
    "updated_at": "2020-12-11T14:37:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSRPG\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI have an `enum` which contains the IDs of over 700 character sprites.\r\nI'm using this `enum` as an export var in a tool script, so that I can assign an `AnimatedTexture` to a character node by choosing an enum value.\r\n\r\nHowever, with such a huge list, it's really a pain when I want to quickly select/preview several different values which are near the bottom of the dropdown list (for example `Undead_01` and `Undead_02`).\r\n\r\nWhenever you open the `enum` dropdown, it always starts at the top, so you have to scroll all the way down to what you want to select. You can start typing, and it will highlight/select a matching `enum` key, but the dropdown doesn't actually scroll to that selection, so you can't see what it actually selected, and you still have to scroll down to it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n1) Make the `enum` dropdown automatically scroll to the highlighted/matching value when you start typing\r\n2) Make it automatically open scrolled to the location of the current export var value (don't start at the top every time), and also highlight/focus the current value so you can use the arrow keys to go to the next/previous value.\r\n3) If possible, allow the mouse scroll wheel to select the next/previous values in the `enum` when hovered over the export var property in the inspector\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n(see above)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI think it would be used often. And I don't know how you would do this with a script.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is a quality of life improvement for anyone who uses an `enum` in an export var.\r\n\r\n### Example of a large export enum\r\n[Export Enum Auto Scroll.zip](https://github.com/godotengine/godot-proposals/files/5673047/Export.Enum.Auto.Scroll.zip)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1968/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1967",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1967/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1967/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1967/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1967",
    "id": 761207974,
    "node_id": "MDU6SXNzdWU3NjEyMDc5NzQ=",
    "number": 1967,
    "title": "ItemList item-activated signal -- single-click mode",
    "user": {
      "login": "Robin-Wils",
      "id": 5617025,
      "node_id": "MDQ6VXNlcjU2MTcwMjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5617025?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Robin-Wils",
      "html_url": "https://github.com/Robin-Wils",
      "followers_url": "https://api.github.com/users/Robin-Wils/followers",
      "following_url": "https://api.github.com/users/Robin-Wils/following{/other_user}",
      "gists_url": "https://api.github.com/users/Robin-Wils/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Robin-Wils/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Robin-Wils/subscriptions",
      "organizations_url": "https://api.github.com/users/Robin-Wils/orgs",
      "repos_url": "https://api.github.com/users/Robin-Wils/repos",
      "events_url": "https://api.github.com/users/Robin-Wils/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Robin-Wils/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-10T12:41:02Z",
    "updated_at": "2020-12-10T13:52:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI am working on a dialogue based game, and everything in it is single-click, only the ItemList options are not.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe options which the user can select in a ItemList in the game are double-click. \r\n\r\nThis is not consistent with the rest of the game. We would like this to be single-click too. \r\nI get that double-click is likely better for UX, but other frameworks seem to have this option available.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nA single-click mode option for the \"item-activated\" signal of the ItemList.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe same as the current functionality, only that it listens for single-click instead of double-click.\r\nIt would be nice to have a \"active mode\" option which can be set to double-click or single-click.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes, see previous \"active mode\" suggestion.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nOther frameworks have this as well, and it seems to be a often used feature in some cases.\r\nIt is also something which users don't have to use, so it would just be one more optional feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1966",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1966/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1966/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1966/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1966",
    "id": 761195463,
    "node_id": "MDU6SXNzdWU3NjExOTU0NjM=",
    "number": 1966,
    "title": "Improve Navigation with multiple agents",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-10T12:22:42Z",
    "updated_at": "2020-12-15T04:51:06Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nPrototyping an RTS game in Godot 4.0\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\n- Agents can exit the navigation mesh. This can lead to invalid states such as hanging off the edge of a cliff and phasing inside walls.\r\n![image](https://user-images.githubusercontent.com/14253836/101770327-ede6a100-3aad-11eb-8272-e5ca2a32ad2a.png)\r\n![image](https://user-images.githubusercontent.com/14253836/101770382-00f97100-3aae-11eb-8123-fefd31913af1.png)\r\n\r\n- Groups of >5 are inefficient navigating corners. They all navigate \"single-file\" instead of around each other.\r\n![image](https://user-images.githubusercontent.com/14253836/101770531-300fe280-3aae-11eb-825c-265e4278a9e1.png)\r\n\r\n- Similar to as seen above, all agents try to reach the exact same point which leads to \"mushing\" and inefficient motions.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\n- Add an option to `NavigationAgent` to disallow exiting the navigation mesh.\r\n- Improve collision avoidance. If this is not possible to do performant, allow crowd simulation add-ons for the asset library.\r\n- This should be fixable by increasing `path_max_distance`, but the value `10` still hosts the same issue.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nStay on mesh flag:\r\n![image](https://user-images.githubusercontent.com/14253836/101771303-55e9b700-3aaf-11eb-9628-dc65dadbe39d.png)\r\n![image](https://user-images.githubusercontent.com/14253836/101771778-140d4080-3ab0-11eb-9d97-b8359ef22a2a.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nMost of these issues cannot be worked around easily. The only alternative would be to make a new pathfinding system from scratch, or use a custom module.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nNavigationServer is already part of core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1966/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1965",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1965/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1965/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1965/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1965",
    "id": 760847597,
    "node_id": "MDU6SXNzdWU3NjA4NDc1OTc=",
    "number": 1965,
    "title": "Add a `Dictionary.items()` getter function",
    "user": {
      "login": "VincentRagusa",
      "id": 35266185,
      "node_id": "MDQ6VXNlcjM1MjY2MTg1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35266185?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VincentRagusa",
      "html_url": "https://github.com/VincentRagusa",
      "followers_url": "https://api.github.com/users/VincentRagusa/followers",
      "following_url": "https://api.github.com/users/VincentRagusa/following{/other_user}",
      "gists_url": "https://api.github.com/users/VincentRagusa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VincentRagusa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VincentRagusa/subscriptions",
      "organizations_url": "https://api.github.com/users/VincentRagusa/orgs",
      "repos_url": "https://api.github.com/users/VincentRagusa/repos",
      "events_url": "https://api.github.com/users/VincentRagusa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VincentRagusa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-10T03:17:41Z",
    "updated_at": "2020-12-13T17:35:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI'm using godot to build a sort of \"toy\" (as opposed to a game) where you can simulate evolution of little critters and interact with them from the UI.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'm using a dictionary to track information based on IDs the entries are of the form key:[value1, [values2...],[values3...]].\r\nMy problem is that I would like to display the contents of the dictionary on the screen sorted by the average of [values2]. My plan was to do something similar to this python code: \"dictionary.sort(key=lambda x: average(x[1]) )\". i need to be able to convert the dictionary into an array of key/value pairs. something like [(key_0, [value1_0, [values2_0...],[values3_0...]),...,(key_n, [value1_n, [values2_n...],[values3_n...])]\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nBasically I think we should just have a .items() function on dictionaries like python has. (don't be mad)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAssuming the dictionary is a hash table under the hood you would have to basically implement the thing im doing manually, iterate over the keys, extract the values and match them up correctly before returning them as a list of pairs. Maybe there's a better more efficient way that can leverage the underlying data structure.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThe closest method i can imagine with the tools we already have is to call  .keys() iterate over them using a for loop, make the list of key/value pairs, and then sort that list of pairs using a custom sorting function because we also don't have lambdas (The custom sort can already be handled using this method  via https://godotengine.org/qa/32053/how-to-sort-array). But this is extremely messy and id say 2 helper functions is a lot of extra code to just sort a dictionary by its values.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\ndictionary is a core object, all of its functions should be included with it. extracting key/value pairs seems crazy as an external library function",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1965/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1964",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1964/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1964/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1964/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1964",
    "id": 760573689,
    "node_id": "MDU6SXNzdWU3NjA1NzM2ODk=",
    "number": 1964,
    "title": "Add accessibility/screen reader integration to the base UI components",
    "user": {
      "login": "Billaferd",
      "id": 11248834,
      "node_id": "MDQ6VXNlcjExMjQ4ODM0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11248834?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Billaferd",
      "html_url": "https://github.com/Billaferd",
      "followers_url": "https://api.github.com/users/Billaferd/followers",
      "following_url": "https://api.github.com/users/Billaferd/following{/other_user}",
      "gists_url": "https://api.github.com/users/Billaferd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Billaferd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Billaferd/subscriptions",
      "organizations_url": "https://api.github.com/users/Billaferd/orgs",
      "repos_url": "https://api.github.com/users/Billaferd/repos",
      "events_url": "https://api.github.com/users/Billaferd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Billaferd/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-09T18:35:54Z",
    "updated_at": "2020-12-09T19:53:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nPoint and Click adventure game that makes heavy use of Text and other GUI Elements.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe game is completely unusable to standard Accessibility tools\r\n\r\n### Describe the feature/enhancement and how it helps to overcome the problem or limitation\r\nBy integrating the base UI controls, many games can become more accessible with little to no thought from the individual developers. By integrating the common accessibility frameworks of each platform Godot games can be played by more people by default.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI would imagine the easiest way would be to create an accessibility server that could be used to hide implementation specifics and also create a general API internally for components and scenes. It could also be done by creating a standard library that can be extended for each platform/accessibility tool. Tools to consider would be the Accessibility Toolkit (ATK) on Linux and the UI Automation Framework on Windows.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nA new server could be implemented and all state transitions are telegraphed by signals, but that seems like it would be quite slow.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThe speed considerations and usefulness of an inclusive design would benefit many with very little overhead and would not require individual developers to become accessibility experts or even have to remember to add the add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1964/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1963",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1963/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1963/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1963/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1963",
    "id": 760408616,
    "node_id": "MDU6SXNzdWU3NjA0MDg2MTY=",
    "number": 1963,
    "title": "Add font shadow option to buttons & item list control nodes",
    "user": {
      "login": "MinityX",
      "id": 75741603,
      "node_id": "MDQ6VXNlcjc1NzQxNjAz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/75741603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MinityX",
      "html_url": "https://github.com/MinityX",
      "followers_url": "https://api.github.com/users/MinityX/followers",
      "following_url": "https://api.github.com/users/MinityX/following{/other_user}",
      "gists_url": "https://api.github.com/users/MinityX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MinityX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MinityX/subscriptions",
      "organizations_url": "https://api.github.com/users/MinityX/orgs",
      "repos_url": "https://api.github.com/users/MinityX/repos",
      "events_url": "https://api.github.com/users/MinityX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MinityX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-09T15:05:51Z",
    "updated_at": "2020-12-09T15:12:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nHeavy UI based project\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe button control node along with item list don't support font shadows or have an option for it.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nIt would allow for more consistency/parity when using control nodes.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIt would appear under the custom colors and custom constants just like it is in the other control nodes.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot to my knowledge? I'm not 100% sure though.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's already part of other control nodes in core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1963/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1962",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1962/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1962/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1962/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1962",
    "id": 760304887,
    "node_id": "MDU6SXNzdWU3NjAzMDQ4ODc=",
    "number": 1962,
    "title": "Add properties to fold/hide away the Sliders and CheckButtons on ColorPicker",
    "user": {
      "login": "EramarkMedia",
      "id": 62471331,
      "node_id": "MDQ6VXNlcjYyNDcxMzMx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/62471331?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EramarkMedia",
      "html_url": "https://github.com/EramarkMedia",
      "followers_url": "https://api.github.com/users/EramarkMedia/followers",
      "following_url": "https://api.github.com/users/EramarkMedia/following{/other_user}",
      "gists_url": "https://api.github.com/users/EramarkMedia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EramarkMedia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EramarkMedia/subscriptions",
      "organizations_url": "https://api.github.com/users/EramarkMedia/orgs",
      "repos_url": "https://api.github.com/users/EramarkMedia/repos",
      "events_url": "https://api.github.com/users/EramarkMedia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EramarkMedia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-09T12:54:46Z",
    "updated_at": "2020-12-09T13:17:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "![Color_Pick](https://user-images.githubusercontent.com/62471331/101632055-fdbea080-3a2d-11eb-85ce-095b32dc1d1b.png)\r\n\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSimple click style 3D Enviroment, for showing a product.\r\n\r\n\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI would need only the square color selection part, as well as get the value of color.\r\nLooking for a way to exclude the color picker option \"button\", as well as RGB Sliders, and check buttons.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdding simple color choose / mix function, thats about it. \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nStandard advanced color picker container, Click fold button, or alternatively menu option in editor, -> Simple color choose alternative.  Just as Alpha slider can be disabled.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nSure thing, but i dont think handling alot of random mixable colors is really optimal. Atleast not for Ui.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nFeels like a clean / simple enough feature to be included? \r\nI dont think any gigantic changes are needed on source level, but i am not the right person to answer that question.\r\n\r\nJust a little idea. \r\n\r\nTake care & stay safe. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1961",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1961/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1961/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1961/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1961",
    "id": 760128207,
    "node_id": "MDU6SXNzdWU3NjAxMjgyMDc=",
    "number": 1961,
    "title": "Deprecate Node.filename, replace with something more accurate",
    "user": {
      "login": "snoopdouglas",
      "id": 4892574,
      "node_id": "MDQ6VXNlcjQ4OTI1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4892574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/snoopdouglas",
      "html_url": "https://github.com/snoopdouglas",
      "followers_url": "https://api.github.com/users/snoopdouglas/followers",
      "following_url": "https://api.github.com/users/snoopdouglas/following{/other_user}",
      "gists_url": "https://api.github.com/users/snoopdouglas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/snoopdouglas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/snoopdouglas/subscriptions",
      "organizations_url": "https://api.github.com/users/snoopdouglas/orgs",
      "repos_url": "https://api.github.com/users/snoopdouglas/repos",
      "events_url": "https://api.github.com/users/snoopdouglas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/snoopdouglas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-09T08:42:04Z",
    "updated_at": "2020-12-09T10:33:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nPlatformer\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nhttps://godotforums.org/discussion/24828/get-resource-path-of-root-scene\r\n\r\nI frequently use F6 to run the scene I'm currently viewing, and I wanted my game to be aware of the path of the scene which was loaded, such that I could update one of my autoload singletons with the number of the level I'd loaded up.\r\n\r\nIt wasn't clear how to do this, hence the above forum post.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAs you'll see in the forum post, the path of the scene is available with `Node.filename`. However, I *couldn't find* this in the docs, because I was searching for 'path' / 'resource path' / 'resource URL'.\r\n\r\nTo me as a Linux user, 'filename' specifically refers to just that - a file's name, not its full path, never mind a fully-qualified `res://` URL.\r\n\r\nAdditionally, this isn't in line with other GDScript naming. For example, the docs for `preload()` start with:\r\n\r\n> `Resource preload(path: String)`\r\n> \r\n> Returns a `Resource` from the filesystem located at `path`.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n* Deprecate `Node.filename`.\r\n* Replace it with something else. I'm not sure what would be best, because `path` by itself conflicts with the notion of a path in the scene tree. Perhaps `resource_path` or `file_path`?\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNope.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nModifying `Node` is a pretty major thing anyway.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1959",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1959/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1959/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1959/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1959",
    "id": 760092846,
    "node_id": "MDU6SXNzdWU3NjAwOTI4NDY=",
    "number": 1959,
    "title": "Pass InputEventMouseButton event as Button `_pressed()` parameter",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-12-09T07:49:22Z",
    "updated_at": "2020-12-09T10:36:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGodot Editor plugins (gdscript)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen making `Buttons`, I often need some additional behavior, not only `left mouse click`.\r\nFor example:  popping context menu on `right click` or doing something on `doubleclick`; etc.\r\n\r\nBut it seems currently I can't get these event details in `_pressed()` (that is what button index was pressed, was it a doubleclick etc), so I need to use `_gui_input()` for that and kind of reinvent the wheel doing some checks there, like is event an InputMouseButton etc. This would take a bit more lines of code and even (afraid of but not sure) some performance waste in some cases (for example when you have some complex UI with many buttons)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\npassing `InputEventMouseButton` event as a `_pressed()` parameter would solve the problem\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nfunc _pressed(event: InputEventMouseButton):\r\n    ...\r\n```\r\n\r\nThen for `left` and  `right clicks`, instead of\r\n```gdscript\r\nfunc _pressed():\r\n    print(\"left click\")\r\n\r\nfunc _gui_input(event):\r\n    if event is InputEventMouseButton and event.is_pressed() and event.button_index==BUTTON_RIGHT:\r\n        print(\"right click\")\r\n```\r\n\r\nor\r\n```gdscript\r\nfunc _gui_input(event):\r\n    if event is InputEventMouseButton and event.is_pressed():\r\n        if event.button_index==BUTTON_LEFT:\r\n            print(\"left click\")\r\n        elif event.button_index==BUTTON_RIGHT:\r\n            print(\"right click\")\r\n```\r\n\r\nWe could just write:\r\n```gdscript\r\nfunc _pressed(event):\r\n    if event.button_index == BUTTON_LEFT:\r\n        print(\"left click\")\r\n    else:\r\n        print(\"right click\")\r\n```\r\n(assuming button mask is both left and right)\r\n\r\nThe only problem I can see now is that you always need to explicitly write this `_pressed(event)` instead of just  `_pressed()` every time, even if you won't use `event`.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes it can (see above).\r\nTho in the real life this workaround could take more lines of script\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nButton API feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1957",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1957/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1957/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1957/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1957",
    "id": 759899010,
    "node_id": "MDU6SXNzdWU3NTk4OTkwMTA=",
    "number": 1957,
    "title": "Choosing a favorite in the node creation dialog shouldn't set the filter",
    "user": {
      "login": "pigigi",
      "id": 32604324,
      "node_id": "MDQ6VXNlcjMyNjA0MzI0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/32604324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pigigi",
      "html_url": "https://github.com/pigigi",
      "followers_url": "https://api.github.com/users/pigigi/followers",
      "following_url": "https://api.github.com/users/pigigi/following{/other_user}",
      "gists_url": "https://api.github.com/users/pigigi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pigigi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pigigi/subscriptions",
      "organizations_url": "https://api.github.com/users/pigigi/orgs",
      "repos_url": "https://api.github.com/users/pigigi/repos",
      "events_url": "https://api.github.com/users/pigigi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pigigi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-09T00:53:09Z",
    "updated_at": "2020-12-09T01:12:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA game. Yup.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nClicking on a favorite in the \"Create new node dialog\" sets the search filter to that node type. The filter stays for further nodes created and forces the user to clear it, which is especially irritating given how futile the filter is. Why would anyone want to set it to a favorite he clicked, especially for future new nodes? It's favorited, it's right there!!\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nDON'T set the filter. Possibly auto-expand the node type, sure. But most of all do NOT remember the filter. It's preposterous.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nDelete a line of code or something. Can't be that hard.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBecause the current behavior is worse than useless. It's an everyday irritation, a hindrance. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1957/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1956",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1956/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1956/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1956/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1956",
    "id": 759486448,
    "node_id": "MDU6SXNzdWU3NTk0ODY0NDg=",
    "number": 1956,
    "title": "Play back multiple audio tracks in VideoPlayer",
    "user": {
      "login": "Nostritius",
      "id": 17826813,
      "node_id": "MDQ6VXNlcjE3ODI2ODEz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17826813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Nostritius",
      "html_url": "https://github.com/Nostritius",
      "followers_url": "https://api.github.com/users/Nostritius/followers",
      "following_url": "https://api.github.com/users/Nostritius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nostritius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nostritius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nostritius/subscriptions",
      "organizations_url": "https://api.github.com/users/Nostritius/orgs",
      "repos_url": "https://api.github.com/users/Nostritius/repos",
      "events_url": "https://api.github.com/users/Nostritius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nostritius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-08T14:21:46Z",
    "updated_at": "2020-12-08T14:38:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nA reimplementation of an existing game. I am considering godot as a basis for this reimplementation\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe original game which is reimplemented used to have videos, where background sound and language specific sound are separated and are played simultaneously. I realized that this is pretty common practice in other games, too. The problem is, that godots VideoPlayer class only allows one audio track to be played.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe enhancement would be to allow more than one audio track in the video player class.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nA possibility would be to use the audio_track variable in the following way\r\n`player.audio_track=[0, 1]`\r\nby allowing it to be an array besides an int and through that preserving backward compatibility.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot, that I'm aware of, since the VideoPlayer api does not offer any way of accessing the audio streams directly, to circumvent this.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nSince it touches a very core of godot (the VideoPlayer class), it is unlikely, that this can be handled by an addon.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1955",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1955/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1955/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1955/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1955",
    "id": 759431792,
    "node_id": "MDU6SXNzdWU3NTk0MzE3OTI=",
    "number": 1955,
    "title": "Add descriptions/tooltips to export preset settings",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-08T13:08:13Z",
    "updated_at": "2020-12-28T20:25:34Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*See also #1339 and #2041.*\r\n\r\n### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nExport preset settings (such as Android permissions or macOS entitlements) can't have descriptions when hovered in the editor. Like for editor settings, tooltips will appear but will be empty:\r\n\r\n![image](https://user-images.githubusercontent.com/180032/101487789-f086b080-395e-11eb-9ae2-d957a0809e9a.png)\r\n\r\nThis often leads to confusion for settings which can have an impact on the final project (such as rcedit not working if the version identifier is not of the form `N.N.N.N` where `N` is a non-negative integer).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nWhen hovering an export setting in an export preset, display a tooltip with documentation.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nFigure out a way to document export settings in the class reference by exposing them somehow. Maybe expose dummy classes for each export platform so they can be listed in the class reference?\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo, as this is core editor/documentation system functionality.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is core editor/documentation system functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1955/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1954",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1954/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1954/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1954/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1954",
    "id": 759236343,
    "node_id": "MDU6SXNzdWU3NTkyMzYzNDM=",
    "number": 1954,
    "title": "Allow \"Make Local\" to apply to owned resources too",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-08T08:36:28Z",
    "updated_at": "2020-12-08T12:59:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nNot relevant\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWhen the intention is to take a packedscene as base for further editing without wanting it linked or inherited - instancing and 'make local' are a good way. But there's a catch, resources that are owned by the base are not automatically made local too.\r\nThis is different to the explicit global 'make sub-resources unique' command that applies to every resource, as it doesn't differentiate between separate assets or owned by base ones.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nExpected would be that resources, that are _not_ separate asset references, but _embedded/owned_ (thescene::1), are made local too by that command as the intention of it is that no link is desired.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIt either implicitly makes _embedded/owned_ resources unique too or a popup can query the user about a decision (although making them unique seems to be the only reasonable option - according to the intention of that command).\r\nAlternatively an additional menu entry could be added below the 'make sub-resources unique' one in the inspector menu. Forgetting to use it could still lead to accidental editing of resources in a now-unlinked base asset.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThere's no hook in the editor that i know of to execute user code on menu command execution, so no.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nabove",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1954/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1953",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1953/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1953/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1953/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1953",
    "id": 759097526,
    "node_id": "MDU6SXNzdWU3NTkwOTc1MjY=",
    "number": 1953,
    "title": "Add \"0 tolerance\" mode for Convex Decompisition",
    "user": {
      "login": "zodywoolsey",
      "id": 27297391,
      "node_id": "MDQ6VXNlcjI3Mjk3Mzkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/27297391?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zodywoolsey",
      "html_url": "https://github.com/zodywoolsey",
      "followers_url": "https://api.github.com/users/zodywoolsey/followers",
      "following_url": "https://api.github.com/users/zodywoolsey/following{/other_user}",
      "gists_url": "https://api.github.com/users/zodywoolsey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zodywoolsey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zodywoolsey/subscriptions",
      "organizations_url": "https://api.github.com/users/zodywoolsey/orgs",
      "repos_url": "https://api.github.com/users/zodywoolsey/repos",
      "events_url": "https://api.github.com/users/zodywoolsey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zodywoolsey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-12-08T06:08:25Z",
    "updated_at": "2020-12-08T21:07:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n### Describe the project you are working on\r\nI am building VR games and education experiences that use a lot of physics interaction.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nIt is very difficult to get accurate physics interactions with Godot given that the convex decomposition doesn't offer a 0 tolerance mode and given that the trimesh collision shapes are very unreliable when using bullet physics in any situation.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI would like to see a \"0 tolerance\" option for the convex decomposition. By this I mean that the convex decomposition would continue iterating until it is able to generate multiple convex collision shapes that have vertices that are strictly shared with the original mesh. This would mean that it may take a long time to generate, which is fine. I don't want to have to spend days of work just to place convex collision shapes to match every part of my levels.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI can't offer much help here, but the idea is that the convex decomposition would map out all the mesh vertices and then iterate until it is able to generate any number of convex collision shapes that perfectly match the mesh. Even if it produces results that aren't well optimized for playing, I just want the accuracy.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo. The only workaround is to manually place hundreds or thousands of convex collision shapes, which takes multiple days of work.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nNot really. I think either would be fine, but it doesn't seem that anyone is trying to use Godot for as ambitious of projects as I am attempting. I would love to be able to release and showcase these advanced VR projects at some point, but this is a major need.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1951",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1951/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1951/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1951/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1951",
    "id": 758675157,
    "node_id": "MDU6SXNzdWU3NTg2NzUxNTc=",
    "number": 1951,
    "title": "Make PhysicalBone a rigidbody",
    "user": {
      "login": "Favkis",
      "id": 46406204,
      "node_id": "MDQ6VXNlcjQ2NDA2MjA0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46406204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Favkis",
      "html_url": "https://github.com/Favkis",
      "followers_url": "https://api.github.com/users/Favkis/followers",
      "following_url": "https://api.github.com/users/Favkis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Favkis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Favkis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Favkis/subscriptions",
      "organizations_url": "https://api.github.com/users/Favkis/orgs",
      "repos_url": "https://api.github.com/users/Favkis/repos",
      "events_url": "https://api.github.com/users/Favkis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Favkis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-07T16:50:41Z",
    "updated_at": "2020-12-07T16:54:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n3d ragdoll physics based game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nhttps://docs.godotengine.org/en/3.2/classes/class_physicalbone.html \r\nPhysicalBone has only 2 methods of manipulation, makes it extremily hard to manipulate, I'm trying to make physical based animations and using only apply force is extremily hard \r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nHaving all methods possible from rigid body type objects would help a lot in making ragdolls more than just flat ragdoll\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIntegrate more functions from physics engine \r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nOnly very hard animation imitation with apply_impulse which sounds like nightmare\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nProbably addon, it isn't that important for most games I'd assume so addon would be great too\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1950",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1950/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1950/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1950/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1950",
    "id": 758482634,
    "node_id": "MDU6SXNzdWU3NTg0ODI2MzQ=",
    "number": 1950,
    "title": "Provide consistent `RandomNumberGenerator` API for initializing and modifying the internal state",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-07T12:53:26Z",
    "updated_at": "2020-12-16T12:10:11Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot Engine.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nProblem originated from godotengine/godot#44031, with godotengine/godot#35764 and godotengine/godot#44089 as solution. But exposing the state may lead to confusion for users because `seed` and `state` are used interchangeably, while in fact those are different things to reason about.\r\n\r\nThe `seed` is used to *initialize* the initial state, while state is a current representation of RNG's state advanced on each randomization call such as `randf()`. The problem is that one has to make sure that the seed is setup *before* the state is modified, because setting the `seed` *property* has a side effect of changing the `state`.\r\n\r\nIn fact, the value of the old state is used to generate the next random number with current `PCG32` implementation.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nIt seems like the consensus is that most people prefer to expose the internal state to have more control over reproducibility, so we might also need to make the concepts unambiguous by making the interface possibly more intuitive and standardized.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nThere could be several ways to resolve the problem:\r\n\r\n1. godotengine/godot#35764 proposes to remove the `seed` property in favor of `seed()` method and adding extra `last_seed` property which won't have side effects for changing the state.\r\n\r\n2. Retain `seed` as a property and remove side effects of changing it, and then add a separate `initialize()` method which *will* change the `state`.\r\n\r\n3. Encode `seed`/`state` as a pair in `Array` or `String`, requires extra parsing and error handling.\r\n\r\n3. Create `RandomNumberGeneratorState` to extend `Resource` class and have it as a `state` property. The state object can be serialized to disk and there's no way to mess up the order of initialization that way.  Similar to Unity's [`Random.State`](https://docs.unity3d.com/ScriptReference/Random-state.html).\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes, one can use `rng.seed = 37` instead of proposed `rng.seed(37)` or `rng.initialize(37)`\r\n\r\nWith godotengine/godot#44089, you have to make sure that seed is not reset after modifying the state.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's a core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1950/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1949",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1949/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1949/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1949/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1949",
    "id": 758475556,
    "node_id": "MDU6SXNzdWU3NTg0NzU1NTY=",
    "number": 1949,
    "title": "Lock Selection tool - improve description or functionality",
    "user": {
      "login": "Flavelius",
      "id": 8841352,
      "node_id": "MDQ6VXNlcjg4NDEzNTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8841352?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Flavelius",
      "html_url": "https://github.com/Flavelius",
      "followers_url": "https://api.github.com/users/Flavelius/followers",
      "following_url": "https://api.github.com/users/Flavelius/following{/other_user}",
      "gists_url": "https://api.github.com/users/Flavelius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Flavelius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Flavelius/subscriptions",
      "organizations_url": "https://api.github.com/users/Flavelius/orgs",
      "repos_url": "https://api.github.com/users/Flavelius/repos",
      "events_url": "https://api.github.com/users/Flavelius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Flavelius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-07T12:43:12Z",
    "updated_at": "2020-12-07T14:11:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nNot relevant\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThe 'Lock Selection' toggle for nodes is either missing description details or is implemented unintuitively and could be improved.\r\nCurrently, if multiple lockable nodes that are nested inside each other are selected and the toggle is pressed only the toplevel nodes are actually locked, children, even though explicitly selected are ignored. Here, either the functionality or the description could be improved.\r\nWhen locking an object it is locked in local space only. If one wants to move children independently of their parent (as in adjusting them in relation to their pivot (=parent)) the lock doesn't help. Here the functionality could be improved to allow locking globally.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nImprovement suggestions were mentioned to each case as that made it easier to explain.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt's part of the editor tooling and i can't think of a way to alter its implementation.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n-above",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1948",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1948/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1948/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1948/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1948",
    "id": 758449916,
    "node_id": "MDU6SXNzdWU3NTg0NDk5MTY=",
    "number": 1948,
    "title": "Navigation bake on gridmap with parsed geometry type set up as static collisions",
    "user": {
      "login": "Favkis",
      "id": 46406204,
      "node_id": "MDQ6VXNlcjQ2NDA2MjA0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46406204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Favkis",
      "html_url": "https://github.com/Favkis",
      "followers_url": "https://api.github.com/users/Favkis/followers",
      "following_url": "https://api.github.com/users/Favkis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Favkis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Favkis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Favkis/subscriptions",
      "organizations_url": "https://api.github.com/users/Favkis/orgs",
      "repos_url": "https://api.github.com/users/Favkis/repos",
      "events_url": "https://api.github.com/users/Favkis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Favkis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-07T12:05:31Z",
    "updated_at": "2020-12-07T14:13:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n3d game with gridmap\r\n\r\n### Describe the problem or limitation you are having in your project\r\nNavigationMeshInstance ParsedGeometryType->StaticCollisions ignores gridmap\r\n(Video preview)\r\nhttps://imgur.com/a/7Bv5DX0\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nMake navigation baking be able to bake navmesh onto gridmap collisions (now it can only bake geometry)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nEven editor viewport cant see gridmap's collisions, probably same thing with navigationmesh (white bush collision and nothing on gridmap)\r\n![image](https://user-images.githubusercontent.com/46406204/101348755-3da24e00-389d-11eb-9cdb-543f4a965285.png)\r\n\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nHopefully there is workaround would be suggested because I have no idea how to do it now\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBecause gridmap has collisions and it is child of navigationmesh, I see no reason why it shouldnt bake navmesh on it\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1947",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1947/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1947/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1947/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1947",
    "id": 758015063,
    "node_id": "MDU6SXNzdWU3NTgwMTUwNjM=",
    "number": 1947,
    "title": "`KinematicBody` should be able to query gravity sources that would effect it as if it were a `RigidBody` (+2D)",
    "user": {
      "login": "greenfox1505",
      "id": 1642297,
      "node_id": "MDQ6VXNlcjE2NDIyOTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenfox1505",
      "html_url": "https://github.com/greenfox1505",
      "followers_url": "https://api.github.com/users/greenfox1505/followers",
      "following_url": "https://api.github.com/users/greenfox1505/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenfox1505/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenfox1505/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenfox1505/subscriptions",
      "organizations_url": "https://api.github.com/users/greenfox1505/orgs",
      "repos_url": "https://api.github.com/users/greenfox1505/repos",
      "events_url": "https://api.github.com/users/greenfox1505/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenfox1505/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-06T20:27:21Z",
    "updated_at": "2020-12-07T13:04:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\n3d game with arbitrary gravity.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThere is no trivial way to query how gravity from `Area`s and world from a `KinematicBody`. This happens automatically on a `RigidBody`. I have instead ignored `Area's` built in gravity, set my world's gravity to zero, and implemented my own gravity system so that my `KinematicBody`'s gravity impulses will match the `RigidBody`s in my game.  \r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nExpose functions in GDScript to query gravity sources that would effect a `KinematicBody`, as if it was a `RigidBody`.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n`myKinematicBody.get_gravity_source()` returns an array of possible gravity sources, ie:\r\n\r\n```\r\n[\r\n{source:worldObj,gravity:9.8,gravity_vec:(0,-1,0)},\r\n{source:AreaObj,space_override:ENUM,gravity:9.8,gravity_vec:(1,0,0)},\r\n...\r\n]\r\n```\r\n\r\n`myKinematicBody.get_gravity()` returns a vector for the total gravity that would effect a `KinematicBody`. Following the SpaceOverride rules for Areas.\r\n\r\nThese concepts can likely be applied to 2D directly as well.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nIt could, but with enough objects it could be slow. I believe (but I haven't looked into it very much) it shouldn't be too complected to implement. \r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIMHO, this seems like it should be a basic function of gravity. Having `Area` effect `RigidBody`s but not `KinematicBody`s makes `Area` gravity features feel incomplete. Not being able to influence the player the same way a `RigidBody` would be influenced means anyone who needs that behavior has to re-implement those features for the player character.\r\n\r\nMuch of the above could also be said about Dampening features of `Area` as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1947/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1946",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1946/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1946/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1946/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1946",
    "id": 757991662,
    "node_id": "MDU6SXNzdWU3NTc5OTE2NjI=",
    "number": 1946,
    "title": "Gridmap actually usable camera",
    "user": {
      "login": "Favkis",
      "id": 46406204,
      "node_id": "MDQ6VXNlcjQ2NDA2MjA0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/46406204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Favkis",
      "html_url": "https://github.com/Favkis",
      "followers_url": "https://api.github.com/users/Favkis/followers",
      "following_url": "https://api.github.com/users/Favkis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Favkis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Favkis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Favkis/subscriptions",
      "organizations_url": "https://api.github.com/users/Favkis/orgs",
      "repos_url": "https://api.github.com/users/Favkis/repos",
      "events_url": "https://api.github.com/users/Favkis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Favkis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-06T18:33:26Z",
    "updated_at": "2020-12-06T20:50:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n3d game with gridmaps\r\n\r\n### Describe the problem or limitation you are having in your project\r\nHaving large gridmap makes gridmap camera move so fast I can't edit gridmap anymore\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nbetter (free) camera for gridmap\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nctrl+c normal camera in editor ctrl+v it to gridmap camera, move shortcuts from wasd to other buttons and RMB to erase to something else\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nFor now I have to \r\n1 switch from gridmap,\r\n2 position camera,\r\n3 switch back to gridmap, \r\n4 add few tiles, \r\n5 repeat\r\n\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nbecaus with current camera gridmap is not usable for actual levels and not 10x10x10 demo \r\n\r\nVideo example down below:\r\nhttps://imgur.com/a/kMqczqF",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1945",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1945/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1945/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1945/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1945",
    "id": 757827640,
    "node_id": "MDU6SXNzdWU3NTc4Mjc2NDA=",
    "number": 1945,
    "title": "Expose Object memory footprint to GDScript",
    "user": {
      "login": "Tyrannosaurus1234",
      "id": 36250109,
      "node_id": "MDQ6VXNlcjM2MjUwMTA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/36250109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tyrannosaurus1234",
      "html_url": "https://github.com/Tyrannosaurus1234",
      "followers_url": "https://api.github.com/users/Tyrannosaurus1234/followers",
      "following_url": "https://api.github.com/users/Tyrannosaurus1234/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tyrannosaurus1234/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tyrannosaurus1234/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tyrannosaurus1234/subscriptions",
      "organizations_url": "https://api.github.com/users/Tyrannosaurus1234/orgs",
      "repos_url": "https://api.github.com/users/Tyrannosaurus1234/repos",
      "events_url": "https://api.github.com/users/Tyrannosaurus1234/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tyrannosaurus1234/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-06T02:20:36Z",
    "updated_at": "2020-12-06T10:03:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nInterface for video game database\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI'd like to maintain a cache of video game cover art, up to a certain max size (say, 128MB), to be stored in memory to avoid needless requests to the backend.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nA method of `Object` that would allow you to retrieve the size of an Object (or child classes) in bytes. In my case, this would allow me to keep a running tally of how much memory is being used by my cache, so I know to `pop()` an old entry to make room for the new one.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```\r\nvar obj = Texture.new()\r\nvar objSize = obj.size_in_bytes()\r\n\r\nif cacheSize + objSize > (128*1000*1000):\r\n    cacheSize -= cache.pop_front().size_in_bytes()\r\n\r\ncache.append(obj)\r\ncacheSize += objSize\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nAs far as I am aware, the only way to get an approximation of an object's footprint is to call `OS.get_static_memory()` before and after object creation/initialization and compare them, which, as said, is just a loose approximation of the actual footprint of the object. Does it sort of work? I guess, but it's not reliable or accurate.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt adds a method to the core Object class.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1943",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1943/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1943/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1943/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1943",
    "id": 757782902,
    "node_id": "MDU6SXNzdWU3NTc3ODI5MDI=",
    "number": 1943,
    "title": "Allow to extend existing texture importers",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-05T21:22:04Z",
    "updated_at": "2020-12-15T02:19:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nA terrain plugin\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nTexturing the ground of a terrain is challenging. To be efficient, it requires packing a bunch of images together (albedo, normals, bump, roughness etc.) into either textures, or texture arrays, in order to need as few texture fetches as possible in the shader.\r\n\r\nIt is tedious for users to do this, so I needed to make a tool pipeline for them to import images into this kind of textures.\r\n\r\nThis is what my custom importers do:\r\n\r\n![image](https://user-images.githubusercontent.com/1311555/101265628-e8045f00-373f-11eb-9434-1c4724878eb1.png)\r\n\r\nAs you can see, I defined a new file type holding special information just so I could hook in a different importer. It allows to directly import from source images to the expected texture resources. But because the imported outputs are standard `StreamTexture` and `TextureArray`, this would need to piggyback on features that already exist within `ResourceImporterTexture` and `ResourceImporterLayeredTexture`.\r\n\r\nIn the case of `StreamTexture`, it's mostly a matter or replacing the source of the image, but for `TextureLayered` the whole part where it takes an atlas is also unnecessary.\r\n\r\nFrom the outside it's really clean to use without intermediary steps, but it's incredibly tedious to implement, and not robust for several reasons:\r\n\r\n- There is no API at all to access or customize those functionalities, so I ended up re-implementing those two importers *from scratch* in GDScript, just so I could tweak the parts I was interested in: https://github.com/Zylann/godot_heightmap_plugin/tree/master/addons/zylann.hterrain/tools/packed_textures\r\n- These importers use magic numbers sometimes, made it hard to reverse-engineer\r\n- The same options don't always have the same IDs between texture resources and importers\r\n- Lossless compression is abstracted in Godot but in GDScript I had to explicitely write it as PNG\r\n- WebM compression is not available to the script API so I could not implement Lossy compression\r\n- Some Image detection functions are not exposed so I could not implement some optimizations (fortunately, I did not need them)\r\n- Some stuff I even failed to understand and had to ignore.\r\n- Because none of this has an API, a new version of Godot could likely break it.\r\n\r\nFinally, this is not the only use case I had. In the past I also wanted it to customize mipmaps: https://github.com/godotengine/godot/issues/24381\r\n\r\nI can see other use cases as well such as indexed colors, a topic that comes up often with palette swap and could be used by a plugin: paint with conventional colors, import by recognizing colors and replacing them with an index to obtain a greyscale texture, then use the indexes with a palette in shader.\r\n\r\nI also wasn't the only one to need re-implementating an importer, as you can see in this plugin: https://github.com/awkwardpolygons/cartographer/blob/master/addons/cartographer/texture_array_builder.gd (claims TextureLayered importer is buggy as well)\r\n\r\nBut even for simpler cases, I found a lot of plugins out there that add support for other formats by making an import plugin, and they have to re-implement the thing too.\r\nHere the author apparently skipped implementing all features and hardcodes it as PNG without VRAM compression:\r\nhttps://github.com/Technohacker/godot_pixelorama_importer/blob/master/addons/godot_pixelorama_importer/pixelorama_importer.gd\r\n\r\nAnd here, missing all features as well and hardcoding everything:\r\nhttps://github.com/lifelike/godot-animator-import/blob/master/addons/aaimport/aa_import_plugin.gd\r\n\r\nAaand another here, again hardcoded to oblivion:\r\nhttps://github.com/Technohacker/godot_piskel_importer/blob/master/addons/godot_piskel_importer/piskel_importer.gd#L96\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nIt could be a simple as extending from a base importer class to customize the steps.\r\nThis way, all the rewriting part would no longer be required.\r\nThere might also be a way to implement part of this proposal with solely a custom image format loader (which the builtin texture importer would have to use).\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nIt can mostly be worked around, but as you saw, it's really not a few lines of code. Otherwise people keep hardcoding one path and don't even implement (or know about?) the other features Godot is supposed to support.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nBecause the import logic of textures is in core, and having to re-implement and maintain a 90%-working copy is not robust.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1943/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1942",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1942/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1942/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1942/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1942",
    "id": 757772598,
    "node_id": "MDU6SXNzdWU3NTc3NzI1OTg=",
    "number": 1942,
    "title": "Allow depth-writing shaders to work with shadow maps",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-05T20:20:20Z",
    "updated_at": "2020-12-13T15:06:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nA node rendering SDF models with raymarching: https://github.com/Zylann/godot_sdf_blender\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThe node cannot cast shadows, and cannot receive shadows.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nIn my use case, the node uses a simple geometry primitive (such as a quad, a box, or a sphere). The goal of that primitive is solely to render pixels in a certain location on screen. It might be displaced to be fullscreen (like post-processing effects do by assigning `POSITION`), or only part of the screen when a box is chosen.\r\n\r\nBut unlike post-processing effects, `DEPTH` is written into, as well as `NORMAL`, `ALBEDO` and other various pixel properties, and `discard` is used to cut out the edges of the model. This allows the result to fit nicely in a scene with regular meshes.\r\nThe AABB is also altered to match the real extents of the object.\r\n\r\n![image](https://user-images.githubusercontent.com/1311555/101262514-4842d300-3737-11eb-89db-9382609b132d.png)\r\n\r\nBecause the shader writes to `DEPTH`, it provides the information for shadowmaps to also work on it. Currently that doesn't seem to happen.\r\nI tried using a cube without displacing it and the resulting shadow was following the cube and not the real depths.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nTake `DEPTH`-writing shaders into account?\r\nI'm not expert in that area, but from what I understand of shadow maps, they render depth from the point of view of the light, and the result is used by the regular render pass to darken occluded pixels. So it sounds like it should be possible.\r\nIf it incurs at the expense of other \"classic\" shaders, maybe add a `render_mode` to treat the shader differently? Or have a `shadow()` function to allow customizing the shadow pass?\r\n\r\nThis should ideally not take effect on shaders that actually just do post-processing, because while those displace their quad to be fullscreen, it doesnt mean such quad should put everything in shadow by being right in front of the frustrum. Perhaps it would just work as long as they dont write to `DEPTH`.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo. Unless you re-implement a shadow mapping system on top of the `VisualServer` API using viewports, it's going to be terribly inefficient, hard to maintain and share as a plugin.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt targets a part of the rendering engine.\r\n\r\n--------\r\nNB: this is an area I only started experimenting, so maybe Godot actually supports this and I got something wrong somewhere. If that's the case this proposal could be closed, but at the moment it's not certain yet ;)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1941",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1941/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1941/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1941/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1941",
    "id": 757747408,
    "node_id": "MDU6SXNzdWU3NTc3NDc0MDg=",
    "number": 1941,
    "title": "Add an editor setting to set the path of the dotnet SDK",
    "user": {
      "login": "Bleuzen",
      "id": 12885163,
      "node_id": "MDQ6VXNlcjEyODg1MTYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12885163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bleuzen",
      "html_url": "https://github.com/Bleuzen",
      "followers_url": "https://api.github.com/users/Bleuzen/followers",
      "following_url": "https://api.github.com/users/Bleuzen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bleuzen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bleuzen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bleuzen/subscriptions",
      "organizations_url": "https://api.github.com/users/Bleuzen/orgs",
      "repos_url": "https://api.github.com/users/Bleuzen/repos",
      "events_url": "https://api.github.com/users/Bleuzen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bleuzen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-05T17:53:47Z",
    "updated_at": "2020-12-05T21:25:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nAny C# project\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nI installed the dotnet sdk manually to my home directory. Godot doesn't find it by default, because it doesn't know where the sdk is and wants to use the system wide installed SDK.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAdd an option to set the dotnet SDK path which Godot should use. This would allow us to install the dotnet sdk in any directory and so have multiple versions of it.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n![grafik](https://user-images.githubusercontent.com/12885163/101259685-98676880-372a-11eb-8674-3413299270a3.png)\r\n\r\nHere should be a third setting where we can insert a path to the SDK.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nWell one workaround for now is to add the SDK to the PATH variable. This way godot finds the dotnet command and can use it.\r\n\r\nHowever, since I want to have different SDK versions installed (also per project and also used outside of Godot) I don't really want to add it to my PATH.\r\nEvery project / IDE should find the sdk it needs by a path, not a global command, which would be the same version for all.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nI don't know if an add-on would be able to implement this. Also it is a very basic feature every development software should support.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1939",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1939/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1939/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1939/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1939",
    "id": 757421822,
    "node_id": "MDU6SXNzdWU3NTc0MjE4MjI=",
    "number": 1939,
    "title": "Networking API changes for 4.0",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 26,
    "created_at": "2020-12-04T21:34:54Z",
    "updated_at": "2020-12-29T09:45:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nGodot\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nIt's time to take the chance to improve networking a bit\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nNetworking is nice in Godot, and its beautifully integrated to the scene and to GDScript, but we can do better.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nThe plan is to do as follows:\r\n\r\n##### Call mode is in function annotations\r\n\r\nWith the new annotation system in Godot 4.0 GDScript, we can make the RPC call mode a hint of the function instead of arguments to RPC call, example:\r\n\r\n```gdscript\r\n@puppet @unreliable_ordered @channel=2 func enemy_moved(pos):\r\n      enemy.position = pos\r\n```\r\n\r\nRPC annotations are as follows:\r\n* `@reliable` (packets always arrive, in order)\r\n* `@unreliable` (packets may or not arrive, and out of order)\r\n* `@unreliable_ordered` (packets may or not arrive, but older packets get discarded)\r\nYou have to pick one of those three. Then `@channel=N` can also add a channel index if using channels.\r\n\r\nLikewise, we can use a special syntax for RPC calling, since it no longer requires arguments.\r\n\r\n```gdscript\r\n    somenode.enemy_moved&(Vector2(4,4)) #special RPC call syntax\r\n```\r\nThis syntax (not sure if this is the best way to do it, suggestions welcome), would ensure you are calling the function properly, no longer needing to pass strings.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nno\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nits core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1939/reactions",
      "total_count": 46,
      "+1": 33,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 10,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1938",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1938/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1938/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1938/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1938",
    "id": 757341879,
    "node_id": "MDU6SXNzdWU3NTczNDE4Nzk=",
    "number": 1938,
    "title": "Implement drag-and-dropping materials from the FileSystem dock to a MeshInstance in the 3D viewport",
    "user": {
      "login": "addmix",
      "id": 38119387,
      "node_id": "MDQ6VXNlcjM4MTE5Mzg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38119387?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/addmix",
      "html_url": "https://github.com/addmix",
      "followers_url": "https://api.github.com/users/addmix/followers",
      "following_url": "https://api.github.com/users/addmix/following{/other_user}",
      "gists_url": "https://api.github.com/users/addmix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/addmix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/addmix/subscriptions",
      "organizations_url": "https://api.github.com/users/addmix/orgs",
      "repos_url": "https://api.github.com/users/addmix/repos",
      "events_url": "https://api.github.com/users/addmix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/addmix/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-04T19:18:17Z",
    "updated_at": "2020-12-04T23:17:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nbog-standard multiplayer FPS\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nMap prototyping is a crawl as is, and applying materials is unintuitive, and slow.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nDrag and drop functionality for materials, allow for material files to be dropped onto objects to be applied.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\ndrag material.tres file onto an appropriate spatial node to assign the material.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThis would most likely be used as the main way to assign predefined materials to objects\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is a core functionality in most other programs, (Unreal, Unity, Blender, etc.) and would be a huge time saver for anyone prototyping areas/maps",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1936",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1936/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1936/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1936/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1936",
    "id": 756444542,
    "node_id": "MDU6SXNzdWU3NTY0NDQ1NDI=",
    "number": 1936,
    "title": "Fixing physics timestep vs refresh rate problems (jitter)",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2020-12-03T18:28:29Z",
    "updated_at": "2020-12-06T09:06:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nGodot\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nWhen the physics time-step and the refresh hz do not match, jitter is produced. This is specially annoying in high refresh rate monitors.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe idea is to provide two alternatives to dealing with this problem, depending on the goals of the user, which can be used separately or combined.\r\n- Adaptable physics timestep\r\n- physics interpolation\r\n\r\n**NOTE** This proposal is based on #671, but adds adaptive time-step and some implementation details are different (use RenderingServer for interpolation, because its faster and because eventually motion vectors can make use of this data too).\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n##### Adaptive Timestep\r\n\r\nFor most games, specially simple games, users don't really care about dealing with interpolation (which requires added complexity, by having to discern between motion and teleportation). To solve the problems introduced by different display hz vs physics time-step, an option to have adaptive time-step will be provided, which will work as follows:\r\n\r\n* User defines a range in the project settings, which consists of a minimum timestep and a maximum timestep. An example of this can be 60-90.\r\n* When the engine starts, the refresh rate for the display where the main window sits is polled.\r\n* The closest integer divisor that fits this range is used. As an example: If the monitor is 144hz, then 72hz is used as physics step. For 165hz, we use 82.5hz for physics step, and so on.\r\n\r\nThis ensures no jitter will happen, although advantage of the higher refresh rate will not be taken.\r\n\r\n##### Physics Interpolation\r\n\r\nTo actually take advantage of higher refresh rate, or if keeping the time-step to always happen at a given frequency is required for some reason (like networking), then physics interpolation can be enabled.\r\n\r\nWhen enabled, users will be able to indicate to the rendering server that the new transform is actually intepolated or not. The simpler way to do this is to hint the rendering that it should interpolate from the previous frame, likely by calling a function, A proposal to do it is something like:\r\n\r\n```gdscript\r\nfunc _physics_process(delta):\r\n    position.x += 20\r\n    interpolate_physics()\r\n```\r\n\r\nBy default objects are not interpolated, so this would set interpolation for the current frame to the next. Additionally, all children nodes in the tree would also be interpolated.\r\n\r\nAdditionally, an extra way to do this from animation may also be desired (specially for objects using simulated motion, like moving platforms), so an interpolate/teleport property may be also togglable in animations.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo, needs changes in rendering server.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is something that needs to be solved in all games.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1936/reactions",
      "total_count": 46,
      "+1": 38,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 8,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1935",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1935/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1935/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1935/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1935",
    "id": 756377217,
    "node_id": "MDU6SXNzdWU3NTYzNzcyMTc=",
    "number": 1935,
    "title": "Add Scene Binding for optional tight-coupling between Node-extending Scripts and PackedScene resources.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-03T16:57:47Z",
    "updated_at": "2020-12-05T00:19:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Building on proposals #1224, #1906, #1909, based on a suggestion from @dalexeev (last time I'll @ you about this, promise).\r\n\r\n### Describe the project you are working on\r\n\r\nNo active project, but have developed plugins where this was relevant (relates to any project that creates a scene with a root script...so most everything).\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nMostly same as #1909. There's a difference between PackedScene and Node-extending Script even though there are specific subsets of Scripts that are completely dependent upon a PackedScene to function correctly. But if you start to use a PackedScene, the resource is no longer a \"class\" as far as typing goes, since only Scripts constitute a \"class\" in Godot's runtime type system (so static typing doesn't work properly). Furthermore, Scripts and Scenes have potentially divergent inheritance hierarchies. This complexity can be frustrating to deal with in code (custom logic to handle each case or write custom tools for handling scene inheritance) and from an architecture perspective (have to document that a given script should never be instantiated without its corresponding scene, etc.).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nSimilar to how the Script Class system enables a script to have a global name and icon associated with it, I recommend we introduce a separate Scene Binding feature which allows a Script to optionally declare that it should be created with a specific scene.\r\n\r\n(Code sample courtesy of dalexeev)\r\n\r\n```gdscript\r\n# my_scene.gd\r\nextends Node\r\nclass_name MyScene\r\n@scene(\"res://my_scene.tscn\")\r\n# At parse time, the Godot Editor verifies that the script is attached to the root of `res://my_scene.tscn`.\r\n\r\n# another.gd\r\nvar my_scene := MyScene.new()\r\n# At runtime, the GDScript implementation loads and instantiates `res://my_scene.tscn`, not the script alone.\r\n```\r\n\r\nBecause it's an annotation (or some form of script metadata) rather than a custom resource like #1909, this approach enables *any* scripting language, not just ones supporting \"built-in\" types, to add support for Scene Binding.\r\n\r\nSpecifically, this \"hardcodes\" a 1-to-1 relationship between a given Script and a PackedScene, so for scripts with this flag, you would not be able to create another PackedScene that has the same script on its root node.\r\n\r\nIf you wanted to create a new PackedScene that derives a base PackedScene, it would necessarily be required to also have a derived Script extending the base/root script of the base scene. We'd likely need the create-inherited-scene / derive-script utilities in the SceneDock to automatically adapt by checking for a scene-bound script to better automate this process for usability reasons.\r\n\r\nOnce you have a scene-bound script, similar to #1909, you would no longer be able to create future scripts in the same inheritance hierarchy that do *not* bind themselves to a scene in the same scene inheritance hierarchy.\r\n\r\nIn addition, as #1909 mentions, because you'd have a scene bound to a script, you don't have to rely on the \"currently open scene\" to get accurate hinting for script editing (like NodePaths, etc.). Since you know exactly which scene is related to the script, you can just look it up in the ScriptEditor backend.\r\n\r\nOrdinarily, a script that is \"built-in\" doesn't have support for script classes. This is because they are bound to a PackedScene and don't have a dedicated file. However, I'd suggest we amend that support as a supplemental feature, that way a built-in script that has a script class name *and* a scene binding enables users to use built-in scripts for their scenes if they so choose, but still have static typing support. Could even, in that case, create a parser/compiler warning if the script class name doesn't match the PascalCase naming of the scene file (or something to that effect?).\r\n\r\nThis *would not* impact the typical usage of any script that *doesn't* bind itself to a scene. It simply creates more assurances/guarantees for the scripts which do have the information present.\r\n\r\nI also don't necessarily think (yet) that every scene-bound script must have a script class name. The ability to guarantee synchronization of inheritance hierarchies, presence of dependencies, and relevant scene-hints irrespective of the currently open scene are not ultimately related to having access to a global variable and static typing of the type. Although, someone can feel free to disagree on this point in the discussion below.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n1. Create another map in the ScriptServer to maintain which scripts have a scene assigned to them.\r\n1. Create a hidden Dictionary in `project.godot` to serialize the information.\r\n1. Modify EditorFileSystem to...\r\n    1. add it to the file cache\r\n    1. pull the data from Scripts\r\n    1. pull the data from built-in scripts at the root node of a PackedScene resources\r\n1. Create new methods in the ScriptLanguage interface to gather this information from scripts (similar to script class info).\r\n1. Update each scripting language implementation to...\r\n    1. have the Script implementation store and interpret/gather a scene binding value.\r\n    1. have the Script implementation check/guarantee that the script satisfies scene-binding requirements if value is present.\r\n    1. have the ScriptLanguage implementation implement the required interface method\r\n1. Modify the SceneDock to facilitate creating new scene/script combinations, either on their own or by way of deriving an existing script bound to a scene.\r\n1. Modify the CreateDialog to give the name of the scene file a type is linked to, rather than the script file, if the script is scene-bound (thoughts?).\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThere are many users who just prefer this structure and would use it for all of their scripts, especially because it more closely matches other popular tools (e.g. Unreal Blueprints). It simplifies the project structure and improves usability without sacrificing the ability to use third-party text editors or have dedicated files for script content.\r\n\r\nNo. While there are ways to create scene instances from a script automatically, none of them are satisfactory.\r\n\r\n1. Requires boilerplate code for every class with scene-binding. No inheritance or trait system would assist here as it would require parameterization of the information.\r\n1. Every workaround either replaces the script with a scene or creates a child that is an instance of the scene. The former means that you have a different script (and, in essence, you have a crap script that purely exists to connect a script with a scene which is an egregious code smell). The latter makes it so you have a different node hierarchy than intended (an intermediate node is inserted to handle the connecting of typename with scene).\r\n1. None of the workarounds easily or safely ensure that static typing with the scene type is *possible*.\r\n1. None of the workarounds address the issue of synchronizing divergent script/scene inheritance hierarchies.\r\n1. None of the workarounds address the issue of script instantiation without scene dependencies (i.e. it's still *possible* to create the script without the scene). This should be 100% prevented at the language implementation level.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThe changes themselves require changes to backend Editor systems (file caching, SceneDock tools, CreateDialog rendering) as well as each language implementation. Therefore, it cannot be accomplished with scripting alone.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1935/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1934",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1934/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1934/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1934/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1934",
    "id": 756344896,
    "node_id": "MDU6SXNzdWU3NTYzNDQ4OTY=",
    "number": 1934,
    "title": "Add Physically Based Rendering glTF2 extensions support for Clear Coat, Transmission and Sheen",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-03T16:19:16Z",
    "updated_at": "2020-12-03T16:21:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot Engine\r\n\r\n### Describe the problem or limitation you are having in your project\r\nWe want to import objects that support a larger range of material from real life.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThis news was mentioned by @akien-mga in developer chat.\r\n\r\nImplement Physically Based Rendering glTF2 extensions support for for Clear Coat, Transmission and Sheen.\r\n\r\nhttps://www.khronos.org/news/press/khronos-releases-wave-of-new-gltf-pbr-3d-material-capabilities\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nNeed to determine the work required.\r\n\r\n1. Clear coat already exists in Godot Engine.\r\n2. Transmission already exists in Godot Engine.\r\n3. Sheen is not implemented.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot without writing a gltf2 importer.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nGltf2 is core code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1934/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1933",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1933/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1933/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1933/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1933",
    "id": 756176351,
    "node_id": "MDU6SXNzdWU3NTYxNzYzNTE=",
    "number": 1933,
    "title": "Support more interpolation options on Gradient",
    "user": {
      "login": "gongpha",
      "id": 13400398,
      "node_id": "MDQ6VXNlcjEzNDAwMzk4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13400398?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gongpha",
      "html_url": "https://github.com/gongpha",
      "followers_url": "https://api.github.com/users/gongpha/followers",
      "following_url": "https://api.github.com/users/gongpha/following{/other_user}",
      "gists_url": "https://api.github.com/users/gongpha/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gongpha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gongpha/subscriptions",
      "organizations_url": "https://api.github.com/users/gongpha/orgs",
      "repos_url": "https://api.github.com/users/gongpha/repos",
      "events_url": "https://api.github.com/users/gongpha/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gongpha/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-03T13:03:26Z",
    "updated_at": "2020-12-04T11:55:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in all the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSome kind of terrain procedural generator\r\n### Describe the problem or limitation you are having in your project\r\nI wrote a shader for use with the OpenSimplex. I used a gradient for visualizing a noise texture (e.g. Water/Sand/Grass/Mountain). And I want to try some little features like the voxel style of noise. This feature needs constant interpolation (aka. Nearest Neighbor) on each point.\r\n### Describe the feature/enhancement and how it helps to overcome the problem or limitation\r\nIt helps those who use them for their shaders and other purposes with `GradientTexture`.\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nAdd a new enum as `calculation` for the calculation method. And implementing frequently used interpolation like Cubic, Nearest Neighbor\r\n![ภาพ](https://user-images.githubusercontent.com/13400398/101021284-4dbae480-35a2-11eb-8282-d5c378d8b136.png)\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo. If used by official supports. But it possibly can implement in an alternative. Also possibly can do for Nearest Neighbor by using hacky way. Use two points with different colors and drag them closely as possible.\r\n![ภาพ](https://user-images.githubusercontent.com/13400398/101020561-4941fc00-35a1-11eb-89c9-ba04bab30b48.png)\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nBecause it's the feature for `Gradient` resources\r\n\r\nEDIT: `calculation` should be a single enum variable. Not array.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1933/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1931",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1931/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1931/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1931/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1931",
    "id": 755905176,
    "node_id": "MDU6SXNzdWU3NTU5MDUxNzY=",
    "number": 1931,
    "title": "Ability to customize `can_draw()` behavior / Add a project setting to continue drawing while the window is minimized",
    "user": {
      "login": "abb128",
      "id": 65567823,
      "node_id": "MDQ6VXNlcjY1NTY3ODIz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65567823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abb128",
      "html_url": "https://github.com/abb128",
      "followers_url": "https://api.github.com/users/abb128/followers",
      "following_url": "https://api.github.com/users/abb128/following{/other_user}",
      "gists_url": "https://api.github.com/users/abb128/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abb128/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abb128/subscriptions",
      "organizations_url": "https://api.github.com/users/abb128/orgs",
      "repos_url": "https://api.github.com/users/abb128/repos",
      "events_url": "https://api.github.com/users/abb128/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abb128/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-03T06:21:15Z",
    "updated_at": "2020-12-04T15:00:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAn OpenVR dashboard overlay\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI am currently passing the texture of a Viewport to SteamVR through a GDNative module in order to create a dashboard. This dashboard is accessible within SteamVR and it can be viewed even if the window is minimized on the desktop, or even if there's no window at all.\r\n\r\nIn Windows Mixed Reality, entering VR mode can minimize all of your desktop windows depending on your settings, in order to improve performance for VR.\r\n\r\nGodot Engine currently stops rendering if the window is minimized on desktop, presumably to avoid unnecessarily rendering:\r\n\r\n```c++\r\nbool OS_Windows::can_draw() const {\r\n\r\n\treturn !minimized;\r\n};\r\n```\r\n( https://github.com/godotengine/godot/blob/3.2.3-stable/platform/windows/os_windows.cpp#L272 )\r\n\r\n\r\nAll of these factors combined make it so that my dashboard is useless and does not re-render unless the user manually makes sure to open the window on their desktop, so that the engine can continue rendering.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe ability to override can_draw(), or even just an option to allow rendering while minimized, would allow the dashboard to continue rendering regardless of the state of the actual window.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI'm unsure about how to actually design overriding that method (ideas would be appreciated), but one simpler solution would be to simply have a boolean project setting called `display/window/energy_saving/render_while_minimized`.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThis is not scriptable functionality as it is part of the engine. For now, I had to build a custom version of the engine with the can_draw method above replaced with\r\n\r\n```c++\r\nbool OS_Windows::can_draw() const {\r\n\r\n\treturn true;\r\n};\r\n```\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nSee above",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1931/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1930",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1930/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1930/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1930/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1930",
    "id": 755761923,
    "node_id": "MDU6SXNzdWU3NTU3NjE5MjM=",
    "number": 1930,
    "title": "Make a crisp shadow rendering effect similar to old classic games",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-03T02:31:15Z",
    "updated_at": "2020-12-04T05:38:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA Tomb raider game, possibly a web-running motion comic with anaglyph 3D effect :OO . .\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI've looked at the shadows in Godot, and they're a bit blurry, since I found it odd, I've been looking at REAL shadows, in real life, for instance at a lamp, and they too are blurry, not sharp . . But, there were some old games, that sort of made ' sharp ' shadows, and it looked amazing . . I really like the pixelated, or vector look, and I was wondering if it was possible to add a setting, so Godot could render shadows realistically, but also like old games, if that makes . .\r\n\r\nHere is the effect, or so . . the shadows look blurry, at a distance, but one can see, shadows can also look ' sharp ', sometimes, not sure why, but here . . .\r\n\r\n![2020-12-03 0319](https://user-images.githubusercontent.com/61069740/100955207-62ea3180-3516-11eb-8711-b9df12ef90d0.jpg)\r\n\r\nI've also looked at real shadows, bec. I really confused me, and most of them, have a sort of blurry edge, when I go for walk, so I know they're better, more PBR, physics accurate, so Godot has an AMAZING shadow engine, as is . . But, there were some old games, that looked more like ' games, 3D ', because they had ' sharp ' shadows, I remember F.E.A.R. 1, a really amazing game, that had this . . I don't know if it's super-complex to code, or simulate, but it'd be amazing to have both options . . And, I think this is my last request, or proposal, as Godot 4 now has all the features, I ever dreamed of, or wanted, in games, etc etc . . So nice, it's just wonderful, what Godot 4 is going towards . . I'll try to keep this short, thanks . .\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nIt'd allow me to have really sharp shadows, like in Half-life 1, so many good games, I really liked, from back when, amazing memories, fun . .\r\n![2020-12-03 0323](https://user-images.githubusercontent.com/61069740/100955500-f1f74980-3516-11eb-9d4a-6da074b086c5.png)\r\n\r\nHowever, I don't know if this is super-complex, or how to do it, the default shadows in Godot aren't sharp, even with one DirectionalLight :( :( <3 . .\r\n\r\n<img width=\"960\" alt=\"Skærmbillede (737)\" src=\"https://user-images.githubusercontent.com/61069740/100955734-5b775800-3517-11eb-9303-29f88f39258b.png\">\r\n\r\nIf Godot got that, then I could create any game, I ever dreamed of, or wanted, so cool . . Don't know, if this is more hard-ware intensive, bec. I'm noob, thx . . <3\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nWell, maybe a toggle somewhere, in project settings, or under the lights, not sure, so shadows look like Half-life image <3 <3 . .\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI'm not sure, I am not a pro, on 3D rendering, shaders, graphics, I'm mostly a Blender 3D modeller, basic coder, atm . .\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI'm not sure how to get this effect, so I have no idea, where it should be, many older games had it, and they were mind-blowing, to me, and it looked so good, like pixels, vectors, 3D <3 Thx . .\r\n\r\nAgain, Godot 4 has all my wishes already, but of course, I want more, you know . . If not in Godot 4, maybe Godot 4.2, or later . . Not sure if to ask more features, or simply hope you can finish Godot 4 instead, all my wishes for the engine are in 4.0, so I'm super grateful and, happy, as is . . Outstanding job, superb, can't complain . . Thx <3 . . Now, to keep it short . .\r\n\r\nThank you <3 :D :D . . . \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1929",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1929/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1929/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1929/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1929",
    "id": 755659101,
    "node_id": "MDU6SXNzdWU3NTU2NTkxMDE=",
    "number": 1929,
    "title": "Unify the renaming interface for the SceneTree and FileSystem dock",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-02T22:32:08Z",
    "updated_at": "2020-12-02T22:43:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nEditor\r\n\r\n### Describe the problem or limitation you are having in your project\r\nRenaming files and folders UX is bad while in the SceneTree it is nice and clean.\r\n![renaming_1](https://user-images.githubusercontent.com/41730826/100938576-aa85b300-3540-11eb-94fb-bf201efb96ac.gif)\r\n<img src=\"https://user-images.githubusercontent.com/41730826/100938582-ac4f7680-3540-11eb-9d16-5b125d975689.gif\" alt=\"renaming\" width=\"512\" height=\"372\">\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nMake the FileSystem dock behave the same way as SceneTree.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe default non-split FileSystem view is a Tree control, just like the scene tree, so it is super easy to do for that since Tree has in-built editing capabilities. However, in the split view, an ItemList is used to display the files, which does **not** have editing capabilities. The list view would be easy to convert to a tree, but there is also the thumbnail view, which could not be converted to a tree.\r\n\r\nThere is no interest in removing the thumbnail view so it seems like the option left is to add editing capabilities to the ItemList control.\r\n\r\n![image](https://user-images.githubusercontent.com/41730826/100939405-f1c07380-3541-11eb-8616-177eaf37a553.png)\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1929/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1926",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1926/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1926/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1926/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1926",
    "id": 755518960,
    "node_id": "MDU6SXNzdWU3NTU1MTg5NjA=",
    "number": 1926,
    "title": "Allow to extend Translation class in the script or GDNative",
    "user": {
      "login": "o01eg",
      "id": 397177,
      "node_id": "MDQ6VXNlcjM5NzE3Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/397177?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/o01eg",
      "html_url": "https://github.com/o01eg",
      "followers_url": "https://api.github.com/users/o01eg/followers",
      "following_url": "https://api.github.com/users/o01eg/following{/other_user}",
      "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions",
      "organizations_url": "https://api.github.com/users/o01eg/orgs",
      "repos_url": "https://api.github.com/users/o01eg/repos",
      "events_url": "https://api.github.com/users/o01eg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/o01eg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-02T18:41:18Z",
    "updated_at": "2020-12-02T18:50:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nFreeOrion Godot client, alternative client with Godot UI https://github.com/freeorion/freeorion/pull/3235\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nWe use own internationalization system and want to use already existing system in the Godot project.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nAllow `TranslationServer` to call `get_message` of `Translation` object via `Object::call` instead of virtual function call.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nCall for the game's i18n code: https://github.com/o01eg/freeorion/blob/43ca1d3d17e8baa946cd03e872293ecd5560c7a8/godot/GodotI18n.cpp#L42\r\n\r\nInitialization of internationalization: https://github.com/o01eg/freeorion/blob/43ca1d3d17e8baa946cd03e872293ecd5560c7a8/godot/gdfreeorion.cpp#L196-L201\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThe only idea is to generate CSV from the game's translation files which will have to be re-imported each time main translation change.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nAsset library don't have access to translation internals.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1925",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1925/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1925/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1925/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1925",
    "id": 755388882,
    "node_id": "MDU6SXNzdWU3NTUzODg4ODI=",
    "number": 1925,
    "title": "Predefined shapes for Path2D",
    "user": {
      "login": "nathanjwtx",
      "id": 1558027,
      "node_id": "MDQ6VXNlcjE1NTgwMjc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1558027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanjwtx",
      "html_url": "https://github.com/nathanjwtx",
      "followers_url": "https://api.github.com/users/nathanjwtx/followers",
      "following_url": "https://api.github.com/users/nathanjwtx/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanjwtx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanjwtx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanjwtx/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanjwtx/orgs",
      "repos_url": "https://api.github.com/users/nathanjwtx/repos",
      "events_url": "https://api.github.com/users/nathanjwtx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanjwtx/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-12-02T15:46:06Z",
    "updated_at": "2020-12-04T19:06:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nCurrently working on 2 different types of space shooter where the enemies travel along paths. \r\n### Describe the problem or limitation you are having in your project\r\nCurrently there is no facility to create predefined shapes such as you can for Collision2D for example. This means that trying to create a **smooth** circular path is very difficult.\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd some predefined shapes for creating curved paths. Or enhance existing tooling to make creating curves easier.\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n![image](https://user-images.githubusercontent.com/1558027/100895079-c9257480-3482-11eb-9e00-19f6b455d989.png)\r\nReplicate this functionality to provide circle, capsule shapes etc. This is less of an issue for non-curved shapes/surfaces.\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI guess it could be done with a script but it would be time consuming and complicated to calculate the positions of the points required for a circle.\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt would bring Path2D into alignment with other node types that offer predetermined shapes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1925/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1924",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1924/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1924/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1924/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1924",
    "id": 755380102,
    "node_id": "MDU6SXNzdWU3NTUzODAxMDI=",
    "number": 1924,
    "title": "How to indicate to C # a file contained in PCK",
    "user": {
      "login": "Torguen",
      "id": 19652075,
      "node_id": "MDQ6VXNlcjE5NjUyMDc1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19652075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Torguen",
      "html_url": "https://github.com/Torguen",
      "followers_url": "https://api.github.com/users/Torguen/followers",
      "following_url": "https://api.github.com/users/Torguen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Torguen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Torguen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Torguen/subscriptions",
      "organizations_url": "https://api.github.com/users/Torguen/orgs",
      "repos_url": "https://api.github.com/users/Torguen/repos",
      "events_url": "https://api.github.com/users/Torguen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Torguen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-02T15:35:27Z",
    "updated_at": "2020-12-04T17:47:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nTMX file parser (Tiled)\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI created a TMX file parser using the C # XmlReader api but now I discover that there is no way to access a file contained in the PCK (file created by Godot when exporting the project).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nThe limitation is that you cannot use C # libraries that need a string indicating access to any file contained in a PCK\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nProvide a way for Godot to C # access a file contained in the PCK\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI think not\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it is not possible, it must be done from Godot internally.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1923",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1923/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1923/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1923/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1923",
    "id": 755239848,
    "node_id": "MDU6SXNzdWU3NTUyMzk4NDg=",
    "number": 1923,
    "title": "Refactor V-Sync command line arguments to simplify them and provide more options",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-02T12:40:29Z",
    "updated_at": "2020-12-02T14:13:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nWhen playing a game made by someone else, it's sometimes desired to override the V-Sync behavior if the developer doesn't provide any way to control it. This is common in gamejam games, for instance.\r\n\r\nSince disabling V-Sync allows to decrease the input lag noticeably (even on 144 Hz displays), I almost always prefer playing with V-Sync disabled.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nWe currently have the following command line arguments:\r\n\r\n```\r\n  --enable-vsync-via-compositor    When vsync is enabled, vsync via the OS' window compositor (Windows only).\r\n  --disable-vsync-via-compositor   Disable vsync via the OS' window compositor (Windows only).\r\n```\r\n\r\nI propose replacing it with a single argument that handles overall V-Sync status:\r\n\r\n```\r\n  --vsync    The type of vertical synchronization to request ('disabled', 'enabled', 'compositor').\r\n```\r\n\r\nLike with `--video-driver` (for instance), the argument value is required.\r\n\r\nIn the future, we can extend this to support `adaptive` (if https://github.com/godotengine/godot-proposals/issues/1283 is implemented) and possibly even more options such as `half`.\r\n\r\nWhen using `--vsync compositor` on platforms other than Windows, a warning message should be printed to state that the setting will be ignored. The \"enabled\" behavior will be used instead.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n`main/main.cpp` should be modified to accomodate for the new CLI arguments.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nTechnically, yes, but the project will need to be modified for it (see below). Also, implementing this functionality with a script will not make this option easy to discover as it won't be standardized across all Godot projects. It will not be mentioned in the command line help either, and the legacy V-Sync options will remain available.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt can technically be an add-on, but the point here is that this functionality *must* be built-in to achieve the desired goal (which is, forcing V-Sync behavior on any project made with Godot).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1923/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1921",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1921/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1921/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1921/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1921",
    "id": 754858022,
    "node_id": "MDU6SXNzdWU3NTQ4NTgwMjI=",
    "number": 1921,
    "title": "Add MouseMode enums to Visual Script's constant",
    "user": {
      "login": "kreaninw",
      "id": 1403194,
      "node_id": "MDQ6VXNlcjE0MDMxOTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1403194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kreaninw",
      "html_url": "https://github.com/kreaninw",
      "followers_url": "https://api.github.com/users/kreaninw/followers",
      "following_url": "https://api.github.com/users/kreaninw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kreaninw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kreaninw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kreaninw/subscriptions",
      "organizations_url": "https://api.github.com/users/kreaninw/orgs",
      "repos_url": "https://api.github.com/users/kreaninw/repos",
      "events_url": "https://api.github.com/users/kreaninw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kreaninw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-02T01:38:52Z",
    "updated_at": "2020-12-02T12:36:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nI'm working on a 3D endless runner game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCurrently, setting MouseMode in Visual Script can only be done using an integer value, as shown below:\r\n![Screenshot 2020-12-01 213533](https://user-images.githubusercontent.com/1403194/100814268-16242f00-3420-11eb-87d2-4e1821c6fa61.jpg)\r\n\r\nThis doesn't tell the user what exactly mode it is being set to, making the code unclear when debugging. This is contrary to GDScript which MouseMode is set by the enumerations (MOUSE_MODE_VISIBLE, MOUSE_MODE_HIDDEN, MOUSE_MODE_CAPTURED), as shown [here](https://docs.godotengine.org/en/stable/classes/class_input.html?highlight=MOUSE_MODE_CAPTURED#enum-input-mousemode). \r\n\r\nConsidering that the function itself tells the user to look for constants for more information, yet there is no related constant to be found anywhere in the engine is pretty much misleading 😅, as shown below:\r\n![Screenshot 2020-12-01 214059](https://user-images.githubusercontent.com/1403194/100816023-ff7fd700-3423-11eb-9458-6e29c9b53302.jpg)\r\n\r\nAccording to [this](https://docs.godotengine.org/en/stable/classes/class_input.html?highlight=MOUSE_MODE_CAPTURED#description), the constant relating to this should be found in the InputMap class (I could be wrong though). \r\n\r\nHowever, \r\n![Screenshot 2020-12-01 213948](https://user-images.githubusercontent.com/1403194/100816314-977dc080-3424-11eb-9e6e-b082f1068aa8.jpg)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nBy adding the MouseMode enums to Visual Script's constant, this problem would be fixed. \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nFor example, the implementation would be the same as Vector3.UP which already presents as a constant in the engine.\r\n\r\nIn the most popular function like the _move_and_slide_, if the user doesn't know which's the right value to set for the Vector3 directions... \r\n![Screenshot 2020-12-01 220936](https://user-images.githubusercontent.com/1403194/100815650-373a4f00-3423-11eb-8117-d7925633dc0f.jpg)\r\n\r\nHere is the constant for them which also makes the code much clearer to read:\r\n![Screenshot 2020-12-01 213803](https://user-images.githubusercontent.com/1403194/100815720-618c0c80-3423-11eb-962d-cc11c110c589.jpg)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThis will be used very often and can't be worked around since it's the core feature of the engine.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is the core functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1920",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1920/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1920/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1920/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1920",
    "id": 754822117,
    "node_id": "MDU6SXNzdWU3NTQ4MjIxMTc=",
    "number": 1920,
    "title": "There isn't any method to access a CSG node collision shape",
    "user": {
      "login": "Axeltherabbit",
      "id": 28351404,
      "node_id": "MDQ6VXNlcjI4MzUxNDA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28351404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Axeltherabbit",
      "html_url": "https://github.com/Axeltherabbit",
      "followers_url": "https://api.github.com/users/Axeltherabbit/followers",
      "following_url": "https://api.github.com/users/Axeltherabbit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Axeltherabbit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Axeltherabbit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Axeltherabbit/subscriptions",
      "organizations_url": "https://api.github.com/users/Axeltherabbit/orgs",
      "repos_url": "https://api.github.com/users/Axeltherabbit/repos",
      "events_url": "https://api.github.com/users/Axeltherabbit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Axeltherabbit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-02T00:11:55Z",
    "updated_at": "2020-12-02T12:36:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI'm manipulation CSG nodes and I would like to access the resulting collision shape or mesh.\r\nThere is the method get_meshes but it only works when the node is the root of the scene, I don't really understand why, it's a bit strange for my little understanding\r\n\r\n### Describe the problem or limitation you are having in your project\r\n- If the flag `use collisions` is on it acts like a StaticBody but I can't access the collision shape or other StaticBody methods.\r\n- At the moment CSG are limited to StaticBodies, I can't work with RigidBodies\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nIt would make CSG nodes more free\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI would just add;\r\n- a method `csgroot.get_resulting_mesh` to get the result of the boolean operations\r\n- `csgroot.get_collision_shape`\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nMy c++ and engine understanding is poor but the shape is already there, I believe it would need few extra lines to access it\r\nLooks like the [code](https://github.com/godotengine/godot/blob/dcd11faad3802679a43b27155f1b6bc59aa39b60/modules/csg/csg_shape.cpp) is there, we just need the methods\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nCSG nodes are being developed right now and they improved a lot.\r\nI understand that they are designed for quick use but I think it is a bit strange that  `use collisions` creates a StaticBody like object rather then an actual StaticBody.\r\nI have also found this old [issue](https://github.com/godotengine/godot/issues/23331)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1920/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1919",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1919/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1919/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1919/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1919",
    "id": 754803335,
    "node_id": "MDU6SXNzdWU3NTQ4MDMzMzU=",
    "number": 1919,
    "title": "Add support for registering global keyboard shortcut bindings",
    "user": {
      "login": "frob",
      "id": 316176,
      "node_id": "MDQ6VXNlcjMxNjE3Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/316176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frob",
      "html_url": "https://github.com/frob",
      "followers_url": "https://api.github.com/users/frob/followers",
      "following_url": "https://api.github.com/users/frob/following{/other_user}",
      "gists_url": "https://api.github.com/users/frob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frob/subscriptions",
      "organizations_url": "https://api.github.com/users/frob/orgs",
      "repos_url": "https://api.github.com/users/frob/repos",
      "events_url": "https://api.github.com/users/frob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frob/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-12-01T23:25:34Z",
    "updated_at": "2020-12-02T17:19:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nSimple Note taking app using the rich text input node.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nI would like to show/hide the app with a global keyboard shortcut in the vein of iterm for mac or guake for linux.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nMy current use-case is to allow my note taking app to be hidden/shown at will. This will allow the taking of notes at will regardless of context.\r\n\r\nFor the current Godot GUI/Editor it would be nice to be able to press a button while in game and refocus on the editor to manipulate node properties and refocus off the editor at will.\r\n\r\nOn the games side, I could imagine a scavenger hunt game where one needs to do things outside the game context, such as a google image search or a wikipedia search and return to the game with a quick keyboard command. To pitch this further, imaging a game as a training tool where one needs to accomplish tasks outside of the game to complete the game. They could use something simple like CMD+ESC to return to the game.\r\n\r\nThink of a game such as Minecraft or Terriana, where one is constantly referring to out of game resources to know the crafting recipes. Being able to switch to/from the game context would be very handy and help to not break the flow of the game.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nAllow input maps to be marked as global. I envision this would just be a checkbox on the editor pane for input maps. \r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nI asked this question over at the Godot QA site to see if there was a way to do it in the engine and I was referred here to propose the change.\r\n\r\nhttps://godotengine.org/qa/88821/how-to-create-os-level-hot-key-bindings\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nI am not failure enough with either to make that call. I don't think this could be done with an add-on. Maybe a module, unless I am mistaken, modules require recompiling the editor to enable.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1918",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1918/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1918/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1918/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1918",
    "id": 754597361,
    "node_id": "MDU6SXNzdWU3NTQ1OTczNjE=",
    "number": 1918,
    "title": "Don't select all files by default in the VCS commit dock (or provide a way to select/unselect all files at once)",
    "user": {
      "login": "Deozaan",
      "id": 227734,
      "node_id": "MDQ6VXNlcjIyNzczNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/227734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Deozaan",
      "html_url": "https://github.com/Deozaan",
      "followers_url": "https://api.github.com/users/Deozaan/followers",
      "following_url": "https://api.github.com/users/Deozaan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Deozaan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Deozaan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Deozaan/subscriptions",
      "organizations_url": "https://api.github.com/users/Deozaan/orgs",
      "repos_url": "https://api.github.com/users/Deozaan/repos",
      "events_url": "https://api.github.com/users/Deozaan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Deozaan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-01T17:44:13Z",
    "updated_at": "2020-12-01T20:57:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nAny project with the Git VCS editor plugin enabled.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nThis is what things look like now in the commit dock:\r\n\r\n![Godot DVCS](https://user-images.githubusercontent.com/227734/100761051-ac6c3c80-33af-11eb-866d-5a2eb84fd9dc.png)\r\n\r\nThat screenshot shows only 14 items selected, but note the size of the scrollbar. There are roughly 100 items in the list and they're all selected by default. What should I do if I want to commit only two of those files?\r\n\r\nHere's how things work currently:\r\n\r\nYou must stage one or more files before you can commit them. The only way to stage a file is to use one of the two buttons under the list, \"Stage Selected\" and \"Stage All,\" which effectively do the same thing because every file is selected by default.\r\n\r\nThat is the crux of my problem. And that problem leads to the following problem(s):\r\n\r\nIf the user wants to commit just a few files, they must take the time to manually unselect (nearly) every file, which there is no quick way to accomplish. You can't shift-select a bunch of them and unselect the checkboxes. You can use the arrow keys and spacebar to go through them all and unselect them, but even that is hindered by some weird UI issue where you have to press the arrow key twice to go to the next item after pressing the spacebar, which makes it faster just to click them. Clicking them is still a relatively slow process and has its own problems such as having to deal with click accuracy. In either case, all the files must each be toggled. One... by... one... by... one... by... one...\r\n\r\nAnd then once you've finally managed to unselect the 95 or so files you don't want to commit and have staged and committed the 5 files you do want to commit, the list refreshes itself and all 95 remaining files are selected again, starting the process over from the beginning. 😭\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI would like one or both of the following:\r\n\r\n1. No files should be selected for staging by default. This makes it easy to quickly select the few you want and stage them with \"Stage Selected Files\"\r\n2. A button somewhere on the dock that toggles all checkboxes to easily select/unselect all checkboxes in the dock from a single action.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nI think a (De)Select All button could be added and fit nicely near the top of the UI. Perhaps next to the Refresh button.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nCommitting changes to version control is an integral and frequent part of software development. I think this change can be implemented simply and easily, with just a few lines of code, for someone who is familiar with the codebase. But that's coming from someone who is not familiar with the codebase.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis should be core because \"[the commit dock is embedded into the editor and not depended on the plugin.](https://github.com/godotengine/godot-git-plugin/issues/50#issuecomment-736338114)\"",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1918/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1917",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1917/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1917/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1917/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1917",
    "id": 754547492,
    "node_id": "MDU6SXNzdWU3NTQ1NDc0OTI=",
    "number": 1917,
    "title": "Add ability to load DLL modules without using GDNative",
    "user": {
      "login": "RevoluPowered",
      "id": 748770,
      "node_id": "MDQ6VXNlcjc0ODc3MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/748770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RevoluPowered",
      "html_url": "https://github.com/RevoluPowered",
      "followers_url": "https://api.github.com/users/RevoluPowered/followers",
      "following_url": "https://api.github.com/users/RevoluPowered/following{/other_user}",
      "gists_url": "https://api.github.com/users/RevoluPowered/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RevoluPowered/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RevoluPowered/subscriptions",
      "organizations_url": "https://api.github.com/users/RevoluPowered/orgs",
      "repos_url": "https://api.github.com/users/RevoluPowered/repos",
      "events_url": "https://api.github.com/users/RevoluPowered/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RevoluPowered/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-12-01T16:35:25Z",
    "updated_at": "2020-12-01T23:21:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA game I want to publish on steam\r\n### Describe the problem or limitation you are having in your project\r\nWe can't integrate the SteamSDK with a little amount of tool setup.\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\n**Why:**\r\n- No compiler, only Godot. :cake: \r\n- Less layers and tools setup\r\n- Can be used for advertising APIs with less c knowledge, much like p invoke from c#\r\n- Can be used for proprietary SDK's \r\n- Distribution is just a zip\r\n\r\n**Directory structure:**\r\n- docs/\r\n  - Whatever documentation or licensing\r\n- bin/linux\r\n  - SteamAPI.so\r\n- bin/windows\r\n  - SteamAPI.dll\r\n- bin/osx\r\n  - SteamAPI.dylib\r\n- scripts\r\n  - SteamSDK.gd\r\n\r\n**Packaging:**\r\n- Dump into SteamSDK.zip (ZIP File) or optionally as Folder SteamSDK extracted.\r\n- Project folder: res://plugins/SteamSDK.zip\r\n\r\n**Loading modules**\r\n- Must explicitly be enabled in the project.config for security even if you call the module API.\r\n\r\nImplement DLL API for standard SDK files like SourceSDK.dll\r\n\r\nhttps://docs.google.com/document/d/1-bxJ0CZb6_Ceuv-SmGCO4YV-lse8NjmRQWvGFlDvL6Y/\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n```gdscript\r\nvar module = load_module(\"SteamAPI\")\r\nfunc authentication_response(user_data : UserStruct, status : String):\r\n\tprint(“User has authenticated “ + user_data.name)\r\n\r\n)\r\nvar authenticate = module.bind(“authenticate_steam”, authentication_response)\r\n```\r\nPlease see this document for the below points:\r\nhttps://docs.google.com/document/d/1-bxJ0CZb6_Ceuv-SmGCO4YV-lse8NjmRQWvGFlDvL6Y\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nno\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nit is core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1917/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1914",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1914/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1914/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1914/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1914",
    "id": 754312784,
    "node_id": "MDU6SXNzdWU3NTQzMTI3ODQ=",
    "number": 1914,
    "title": "Add Ctrl + mouse wheel as font size modifier of editor help",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-01T11:26:42Z",
    "updated_at": "2020-12-01T13:42:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nSome 3D projects\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI wear glasses, I have hipermetropía (in spanish) and that's why I don't see little things. Whenever I download a new version of Godot I have to change the editor settings and the font size of the editor help. In the code editor it is comfortable because this feature that I am requesting is implemented, it just works, but in the editor help the font size is static and it is uncomfortable, I have to change it several times bigger or smaller.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWill be easy to change the editor help font just with the mouse wheel. I have in different circumstances with different devices for example I use to code sometimes in a 14\" or seldom in 10\" inch laptop and it is very uncomfortable to have the editor help static \r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI don't know...\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nProbably it will be used very often.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nI think it is core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1914/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1913",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1913/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1913/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1913/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1913",
    "id": 754305312,
    "node_id": "MDU6SXNzdWU3NTQzMDUzMTI=",
    "number": 1913,
    "title": "Editor Settings & Project Settings cleanup",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-12-01T11:16:18Z",
    "updated_at": "2020-12-14T06:34:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nGodot Engine\r\n\r\n### Describe the problem or limitation you are having in your project\r\nProject and editor settings are cluttered. This has been discussed at length in the IRC, and there is desire from core devs to clean it up.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n* First, remove useless, duplicate, or extremely rarely used editor & project settings.\r\n* Reduce the number of categories and sub-categories. Currently there are many groups which only have 1 or 2 properties.\r\n* Redesign the Project & Editor Settings UI so it has \"basic\" and \"advanced\" sections - like many common settings interfaces.\r\n* Personally, I think all theming options should be removed from the main Editor Settings tab and moved elsewhere, to a \"theme\" section of the Editor Settings dialog - things like fonts, colors, etc.\r\n\r\nNotepad with some initial notes from @Calinou:\r\nhttps://pad.sfconservancy.org/p/godot-editor-settings-removal\r\n\r\nGoogle Sheet with all (or most) Editor Settings for individual review (by me):\r\nhttps://docs.google.com/spreadsheets/d/18hROVEA1v_KTBuZ-Wcp3VCuHwFb4qWHi-ulZFGkawoM/edit#gid=0",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1913/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1910",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1910/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1910/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1910/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1910",
    "id": 753038675,
    "node_id": "MDU6SXNzdWU3NTMwMzg2NzU=",
    "number": 1910,
    "title": "EditorCanvasGizmoPlugin, similar to Spatial´s",
    "user": {
      "login": "MarianoGnu",
      "id": 1776044,
      "node_id": "MDQ6VXNlcjE3NzYwNDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1776044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarianoGnu",
      "html_url": "https://github.com/MarianoGnu",
      "followers_url": "https://api.github.com/users/MarianoGnu/followers",
      "following_url": "https://api.github.com/users/MarianoGnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarianoGnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarianoGnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarianoGnu/subscriptions",
      "organizations_url": "https://api.github.com/users/MarianoGnu/orgs",
      "repos_url": "https://api.github.com/users/MarianoGnu/repos",
      "events_url": "https://api.github.com/users/MarianoGnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarianoGnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-29T23:03:43Z",
    "updated_at": "2020-11-29T23:12:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAn arcade platformer\r\n\r\n### Describe the problem or limitation you are having in your project\r\nCreating plugins with gizmos in the 2D view is hard to do and hacky\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nWhat i propose is a 2D version of [Spatial Gizmos](https://docs.godotengine.org/en/latest/tutorials/plugins/editor/spatial_gizmos.html) for 2D, specially the hability to render shapes only when nodes are selected and to have handles to manipulate custom properties\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nI expect API to be similar to Spatial Gozmos:\r\n![image](https://user-images.githubusercontent.com/1776044/100555918-5eefb280-327d-11eb-96c9-faeb45833a1f.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nTheoretically this is possible using the API from EditorPlugin.\r\n![image](https://user-images.githubusercontent.com/1776044/100555954-b2fa9700-327d-11eb-8f20-ddeb786e463d.png)\r\nHowever having a more OOP like the Spatial alternative to direct access to the object being edited instead of mixing the edits of many different objects (or creating many plugins for the same set of correlated features) is much better for scalability.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is an usability improvement for programmers to more easily extend the engine and make it´s use for non programmers (or for themselves)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1910/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1909",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1909/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1909/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1909/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1909",
    "id": 753009092,
    "node_id": "MDU6SXNzdWU3NTMwMDkwOTI=",
    "number": 1909,
    "title": "Add a ScriptScene resource which optionally, but tightly binds a root script to a scene for all languages supporting built-in scripts.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-11-29T21:10:51Z",
    "updated_at": "2020-12-04T16:29:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Building on proposals #1224 and #1906, courtesy of @Shadowblitz16...\r\n\r\n### Describe the project you are working on\r\n\r\nNo active project. Have used UE4 for projects in the past. Supported an alternative structure that I miss, namely Blueprints. The ease of use of Blueprints in Unreal and the myriad of people who enjoy them are the \"existing practical use cases\" of demonstrating the usefulness of the proposed feature, albeit not a Godot context.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nIn Godot Engine, script-classes make scripts almost a first-party type system. Global names. Static typing. After #22, they become more widespread. After #18, we get data structure / serialization support.\r\n\r\nBut, while scenes are a declarative extension of classes defined by scripts, it is quite easy to create a script that becomes dependent on its scene in order to function properly. And yet, in those cases, people still have the ability to make the script *without* the scene. And if you just load the scene, then you don't have enough type information to treat it like a class (cause it isn't a Script). Furthermore scripts and scenes have potentially divergent or even unrelated inheritance hierarchies (wat). Conceptually, that's just plain weird *when you want them to be consist* (I will grant, there are use cases for the flexibility, so it is needed).\r\n\r\nWe don't have any utilities to make things easier though. Controlling runtime instantiation of scripts to guarantee they are only ever made inside the proper scene is unreasonably difficult at the Script/Object/ScriptServer level and far too invasive. Querying for PackedScene inheritance hierarchies against a Node, a Script, or another PackedScene is all too complicated (I've written hundreds of lines of code just trying to make sense of it in a `ClassType` script to abstract everything). Abstracting resource loading so you don't have to worry about whether your loading a Script or a PackedScene is also frequent and frustrating.\r\n\r\nTLDR: It isn't good that we tell people scenes help you make classes when they aren't actually classes and we don't help scripts and scenes work together as one, just to ensure we have the flexibility of keeping them separate. We need an *optional* alternative that provides an opinionated tool for automating the complexity of keeping them in sync where its most needed.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nTake Blueprints as an example. The \"scenes\" are classes in their own right which fulfill all requirements of being a Script. The *scene* has Script-ed type information, a \"built-in\" script at the root, and a guarantee that the script will never be instantiated outside of that scene. And yet, derived \"scenes\" can extend the same \"built-in\" script safely. Instantiating this type of \"script\" *actually* instantiates the scene internally.\r\n\r\nI would dub this new type of resource a `ScriptScene`.\r\n\r\nPros:\r\n\r\n- merged inheritance hierarchies:\r\n    - zero risk of type desychronization between different inheritance hierarchies (no bugs).\r\n    - authentic static typing that respects scene inheritance (enhancement).\r\n- better integration with scenes:\r\n    - better warnings (hints that are context-sensitive for the paired scene)\r\n    - earlier reports of outright errors (e.g. inability to have static typing errors with scene content)\r\n    - better and more reliable context-sensitive autocompletion within script editing, irrespective of the \"currently opened scene\".\r\n- No longer needing to write script code that manually checks for and makes allowances for differences between Script and PackedScene API.\r\n\r\nCons:\r\n\r\n- since it relies solely on \"built-in\" scripts, you must be capable of storing the script as a \"built-in\" script and still have it work properly.\r\n    - GDScript and VisualScript would work fine.\r\n    - GDNative *might* be able to(?), but probably wouldn't be able to safely edit the .gdns data once it was bundled, unless you created a ScriptEditor override for editing its resource data or something (still would need actual source code to be in a different text editor though).\r\n    - C# outright can't cause it needs an actual `.cs` file to work.\r\n- Once something becomes a built-in script, it can no longer be extended into a split `Script`/`PackedScene` format again. So, you're locked into that fused inheritance chain once you're in it. On the bright side, you can still change base Script or PackedScene classes separately with no negative consequences, so it shouldn't be that big of a deal in practice imo.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\n`ScriptScene` would likely be a resource that extends Script, but which owns a PackedScene and a Script and that delegates most of its responsibilities to the internal Script, yet has the ability to load and save itself like a scene with a built-in root script (that way the Godot Editor just sees it as a scene where you can click on the built-in script at the root). The reason it would need to extend Script would be for the sake of other languages being able to load the file and perceive it like they would a script (either out-of-the-box or by casting or something); by extension this would enable static typing and the like.\r\n\r\nHonestly, the biggest complexity I see in supporting something like this is figuring out how you would get script logic to \"load\" the file as if it were a Script (where calling `new()` just calls `instance()` on the scene under-the-hood), but make **only** the Editor \"load\" the same file as if it were a PackedScene. And I don't think the `TOOLS_ENABLED` stuff would cut it here cause different parts of the Editor might also need to be able to recognize it as a Script.\r\n\r\nI leave that for discussion below.\r\n\r\nEdit: note that, even though it's technically a new kind of Script, it's actually more like it's a new scene file format, as far as the scene editing system is concerned, but where it's perceived as the root built-in script in all other contexts. It's not exactly like it's a new scripting language per se.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nI could easily envision people creating entire projects with nothing but ScriptScenes in place of managing both Scripts and PackedScenes for their project, so long as they only ever planned on using GDScript, VisualScript, etc. for their project. So yes, if the feature existed, it very well could be used *a lot*.\r\n\r\nAnd no, there is no existing simple solution in scripting to do this, as evidenced by my rejection of such solutions [here](https://github.com/godotengine/godot-proposals/issues/1906#issuecomment-735436186).\r\n\r\nNow, if some select changes were made to the engine, there is a different viable option that makes it easier to implement a *similar* idea in script code (https://github.com/godotengine/godot-proposals/issues/1906#issuecomment-735451623), but I ultimately believe a different, more thorough approach will yield stronger benefits since this version naturally has support for more languages without custom language code and better satisfies the requirements of the problem without requiring boilerplate code for every class that is declared.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nTechnically, you could probably get away with something similar in script code using a mix of PluginScript, some sophisticated resource format loader/saver stuff (maybe with some changes to core?), but PluginScript doesn't have script class support (and #22 actually makes no mention of adding it - not sure how that would be done). And what's more, PluginScript is badly documented with many just not knowing how exactly it works (NativeScript is already complex enough without adding PluginScript on top of that). An add-on is just plagued with all sorts of issues that become far easier to identify, address, and resolve in engine code.\r\n\r\nNot to mention, making it a built-in feature would just be a lot more useful to a much wider collection of users, *especially* considering the percentage of users that exclusively use GDScript and VisualScript for their projects (something like, what, 60+%?). And even to people who also use C# and/or GDNative C++, they can always mix and match what kinds of scene files they use for different parts of their project, so again, *still useful to a massive audience of Godot users, especially beginners*.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1909/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1908",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1908/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1908/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1908/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1908",
    "id": 752998080,
    "node_id": "MDU6SXNzdWU3NTI5OTgwODA=",
    "number": 1908,
    "title": "\"Summary\" keyframes and node collapsing in animation editor",
    "user": {
      "login": "nice-shot",
      "id": 2602328,
      "node_id": "MDQ6VXNlcjI2MDIzMjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2602328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nice-shot",
      "html_url": "https://github.com/nice-shot",
      "followers_url": "https://api.github.com/users/nice-shot/followers",
      "following_url": "https://api.github.com/users/nice-shot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nice-shot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nice-shot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nice-shot/subscriptions",
      "organizations_url": "https://api.github.com/users/nice-shot/orgs",
      "repos_url": "https://api.github.com/users/nice-shot/repos",
      "events_url": "https://api.github.com/users/nice-shot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nice-shot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-29T20:19:56Z",
    "updated_at": "2021-01-05T06:18:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n2D and 3D casual games.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nThere is no simple way to select and adjust all of the keyframes for the entire animation or for a specific node in the animation editor. This is relevant for animations created in the editor or imported.\r\nFor example, in order to move all the keyframes in a particular point in time two frames forward, the user needs to box-select all of the keyframes. This becomes an issue with large animation with plenty of tracks - the user needs to box-select, then scroll and shift-drag-select again and again until all the relevant keyframes are selected.\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nUnity's animation window has a \"summary\" track that shows all the keyframes of every track in the animation. Additionally Unity has summary tracks for the different game objects which can be collapsed for easier viewing and editing of larger parts of an animation, instead of just individual tracks.\r\nAdding this feature into Godot's animation editor will greatly improve the animation workflow.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nIn terms of UI, an extra track can be added before the first track of the animation with keyframes representing every frame where any track has a keyframe inside. Moving one of these keyframes will move every keyframe in that point in the timeline. Just like in Unity.\r\nAdditionally, godot already has a separation line for each node, so I suggest adding an interactive \"collapse\" button before the track name and use that row to add the summary keyframes for that node.\r\n\r\nHere is a mockup for this suggestion:\r\n\r\n![GodotAnimationPlayerSummaryMockup-V01](https://user-images.githubusercontent.com/2602328/100552307-150fc800-328f-11eb-9a28-4a382a584528.png)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI believe this enhancement will be used often. Since this is basic animation workflow in the editor, I'm not sure how this can be worked around with a few lines of script.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis is a basic and simple UI-UX enhancement for a core editor window. Trying to add this as an add-on will probably require creating an alternative animation window which does not make sense.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1908/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1906",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1906/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1906/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1906/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1906",
    "id": 752835521,
    "node_id": "MDU6SXNzdWU3NTI4MzU1MjE=",
    "number": 1906,
    "title": "We need a way to unify scripts, scenes and nodes (Discussion)",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-11-29T04:26:50Z",
    "updated_at": "2020-12-03T16:59:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nSpace ship networking game\r\n\r\n### Describe the problem or limitation you are having in your project\r\nScene and Scripts have two different hierarchy's \r\n \r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nMake Node and Scripts derive from script so we don't need to manage two different hierarchy trees\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nNodes and Scenes would no longer attach scripts to them but instead would be directly editable as scripts\r\nScene information would be stored in the script under the @SceneStart and @SceneEnd annotations\r\n\r\nThis information would not be visible to the user in the script editor in godot but would still be editable in external script editors \r\nThe class name would be the scene name\r\n\r\n```\r\n#no need for class name but it can be used to export your type\r\nextends Control #must extend the type you are changing this changes the type\r\n\r\nexport var myInt := 0\r\n\r\n\r\n#start defining scene\r\n@SceneStart\r\n   var btn = Button.new()\r\n   add_child(btn)\r\n@SceneEnd \r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes it would be and No it can't\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt gets combines the script and node hierarchy's and gets rid of any confusion between node and script\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1906/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 7,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1903",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1903/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1903/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1903/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1903",
    "id": 752723485,
    "node_id": "MDU6SXNzdWU3NTI3MjM0ODU=",
    "number": 1903,
    "title": "Regex module: Replace libpcre2 with `std::regex`",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-28T17:02:57Z",
    "updated_at": "2020-12-04T05:38:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nNo particular limitation for now, but our use of the libpcre2 library may be problematic in the future (see below).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nThe current libpcre2 implementation works fine, but C++11 onwards provides built-in regex functionality as `std::regex`. This could potentially decrease binary sizes as well, since libpcre2 is a large library.\r\n\r\nOn top of that, we are evaluating [switching from SCons to Meson](https://github.com/godotengine/godot-proposals/issues/1797) and Meson's libpcre2 support isn't so great. In contrast, `std::regex` is much easier to integrate into a project since it's part of the C++ standard library.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nReplace libpcre2 in the `regex` module with `std::regex` and update the associated documentation. This is a breaking change as the regex format isn't 100% compatible. Therefore, 4.0 would be a good opportunity to do this :slightly_smiling_face: \r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nThis is part of the built-in regex module, so no.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nThis is part of the built-in regex module.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1903/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1902",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1902/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1902/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1902/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1902",
    "id": 752686267,
    "node_id": "MDU6SXNzdWU3NTI2ODYyNjc=",
    "number": 1902,
    "title": "Add a safe navigation operator/optional chaining to GDScript",
    "user": {
      "login": "WolfgangSenff",
      "id": 148612,
      "node_id": "MDQ6VXNlcjE0ODYxMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/148612?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WolfgangSenff",
      "html_url": "https://github.com/WolfgangSenff",
      "followers_url": "https://api.github.com/users/WolfgangSenff/followers",
      "following_url": "https://api.github.com/users/WolfgangSenff/following{/other_user}",
      "gists_url": "https://api.github.com/users/WolfgangSenff/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WolfgangSenff/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WolfgangSenff/subscriptions",
      "organizations_url": "https://api.github.com/users/WolfgangSenff/orgs",
      "repos_url": "https://api.github.com/users/WolfgangSenff/repos",
      "events_url": "https://api.github.com/users/WolfgangSenff/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WolfgangSenff/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-28T14:22:27Z",
    "updated_at": "2020-11-28T14:25:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nCurrently working on the Github Game Off jam game I started, which includes several enemies that use state machines to handle both the physics of moving, and the physics of taking damage (as separate states stored in the same machine). https://github.com/WolfgangSenff/GameOffJam2020\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI've noticed whenever I have to reference one of the state machines I mentioned above - as well as the states themselves (and any nodes within those) - if the enemies is defeated and queue-freed, if anything with in a yield state or anything like that, when it comes back it's still causing a ton of issues. Not only that, but it can still call to the state machine to handle damage/physics (especially physics in this case, since that's in the _physics_process method). is_instance_valid is necessary for this case (and sometimes I have to check for nullity as well), but I call it for multiple objects at times and it is really clunky, especially combined with a null check, even if that null check is just `if variant`. Combine that with the fact that if multi-threading is turned on, it seems like if you have an is_instance_valid in an if, the code in the if is not called as a single operation, and so could become unsafe to use even after calling is_instance_valid. Note: I do not know this for a fact, I'm just inferring it from how other languages work; please correct me if I'm wrong (mostly because I typically do not turn on multi-threading for Godot and I'd genuinely like to know).\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nhttps://en.wikipedia.org/wiki/Safe_navigation_operator\r\n\r\nEssentially, it would cut down on highly error-prone code and code that already, in and of itself, feels sort of hacky since you wouldn't expect it to be running in the first place (since the object was in my examples/games queue-freed already). Not only this, it significantly cuts down on the number of lines of code, which for most code-bases for any sufficiently complex game would be extremely helpful.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThe main proposal is simply having this as an example:\r\n\r\n```gdscript\r\nfunc _physics_process(delta : float) -> void:\r\n    state_machine?.current_state?.handle_physics(delta)\r\n```\r\n\r\nThis would equate to the following expanded code:\r\n\r\n```gdscript\r\nfunc _physics_process(delta : float) -> void:\r\n    if state_machine and is_valid_instance(state_machine) and state_machine.current_state and is_instance_valid(state_machine.current_state):\r\n        state_machine.current_state.handle_physics(delta)    \r\n```\r\n\r\nIt's unclear to me at this point if the expanded code can effectively be forced into a single operation similar to how it's done in other languages, but it wouldn't strictly be necessary...just, in theory, much better for multi-threading. (Again, this is just my inference from other languages.)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nTechnically, this is just meant to be a way to significantly shorten code that comes up a *lot* in GDScript when working with things which run during _process or _physics_process, so while it definitely can be \"worked around\", the whole point is to not have to work around it - to make the code simpler to read by many factors while removing error-prone code.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nI don't believe it can be an add-on - at the least, it feels like a very core piece of functionality to the language. Let me put it this way: I do not see any way it can be an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1902/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1901",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1901/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1901/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1901/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1901",
    "id": 752595453,
    "node_id": "MDU6SXNzdWU3NTI1OTU0NTM=",
    "number": 1901,
    "title": "Add the ability to blit CanvasItems to the CanvasItem behind it",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-28T04:32:57Z",
    "updated_at": "2020-11-29T19:54:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nImage Editor Plugin\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI want to use ColorRects as canvas items to draw image layers\r\nbut I need to be able to merge them down\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nAdd blit function to canvas item in which it draws to the canvas item's behind it with correct blending and shaders\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nBasicly it would just be as simple as `blit()` with no parameters.\r\nBlitting would blit to a image if it's a TextureRect with a ImageTexture\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nIt would be used for image and texture manipulation also idk\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIts allows for easily blitting to surfaces with canvas items",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1901/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1899",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1899/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1899/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1899/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1899",
    "id": 752392331,
    "node_id": "MDU6SXNzdWU3NTIzOTIzMzE=",
    "number": 1899,
    "title": "Remember preferred script template editor-wide instead of per-project",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-27T17:30:28Z",
    "updated_at": "2020-11-27T22:17:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nGames in Godot\r\n\r\n### Describe the problem or limitation you are having in your project\r\nSurprisingly often it happens that I work on a new Godot project. Every single time whenever I create a new script, I forget to change the script template to empty and I end up with the cluttered default. This happens frequent enough that I'm writing this proposal right now .-.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSo basically the default script template should be saved for the editor, not per-project. Do we even support project-specific templates? With this, I can just set the template once and forget, like, forever. No matter how many new project I will be opening.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nSee above.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNot without modifying the source.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt's usability thing.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1899/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1898",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1898/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1898/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1898/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1898",
    "id": 752229612,
    "node_id": "MDU6SXNzdWU3NTIyMjk2MTI=",
    "number": 1898,
    "title": "Remove AutoSlice cache when texture is re-imported",
    "user": {
      "login": "splite",
      "id": 4945875,
      "node_id": "MDQ6VXNlcjQ5NDU4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4945875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/splite",
      "html_url": "https://github.com/splite",
      "followers_url": "https://api.github.com/users/splite/followers",
      "following_url": "https://api.github.com/users/splite/following{/other_user}",
      "gists_url": "https://api.github.com/users/splite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/splite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/splite/subscriptions",
      "organizations_url": "https://api.github.com/users/splite/orgs",
      "repos_url": "https://api.github.com/users/splite/repos",
      "events_url": "https://api.github.com/users/splite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/splite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-27T12:46:23Z",
    "updated_at": "2020-11-27T13:09:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\n\r\nNot sure if this is bug or enhancement proposal. Anyway:\r\n\r\nAny 2D project with sprite texture using region and \"Snap Mode: AutoSlice\" & editing that texture on the fly.\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nNot every time we are working with finalized texture, but AutoSlice in TextureRegion panel is cached and this cache is persistent thru asset reload.\r\n\r\nImagine this situation:\r\n1) I am working at tree texture - i have two leafs clusters (2 sprites) and one trunk (one sprite)\r\n\r\n![image](https://user-images.githubusercontent.com/4945875/100449282-f0132d80-30b3-11eb-8cbf-1c272f4ef392.png)\r\n(btw, of course this is only mockup 😄  )\r\n\r\nTexture is saved & imported in Godot scene. Snap mode on \"TextureRegion panel\" is \"Auto Slice\". Everything is just fine.\r\n\r\n![image](https://user-images.githubusercontent.com/4945875/100449424-2c468e00-30b4-11eb-8697-a7592aa4613b.png)\r\n\r\n2) I draw another leafs cluster, override existing texture\r\n\r\n![image](https://user-images.githubusercontent.com/4945875/100449513-5b5cff80-30b4-11eb-90d2-04f1157f1d69.png)\r\n\r\nGodot will auto-reimport new texture. But:\r\n\r\n3) I want to try my fresh new Leaf Cluster which i just drawed -- oh no, AutoSlicing is cached.\r\n\r\n![image](https://user-images.githubusercontent.com/4945875/100449691-a24af500-30b4-11eb-912a-d3ce1a7bbd85.png)\r\n\r\nI have to close scene, open scene and hope AutoSlice cache will be removed (Not every time it work... Sometime I have to change snap mode to \"none\", close scene, open scene and hope for the best. Anothertime just changing tabs is enough.)\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nClear auto-slice cache when re-importing texture or add button for \"reapply auto slicing\" or dont cache it at all (just create it fresh every time \"auto slice\" is selected from combobox)\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nSee previous.\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo idea but i dont think so. I dont know if i can drop any cache in-editor.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIts workflow bug / improvement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1897",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1897/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1897/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1897/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1897",
    "id": 751944365,
    "node_id": "MDU6SXNzdWU3NTE5NDQzNjU=",
    "number": 1897,
    "title": "Support ternary operators in Expression",
    "user": {
      "login": "abb128",
      "id": 65567823,
      "node_id": "MDQ6VXNlcjY1NTY3ODIz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65567823?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abb128",
      "html_url": "https://github.com/abb128",
      "followers_url": "https://api.github.com/users/abb128/followers",
      "following_url": "https://api.github.com/users/abb128/following{/other_user}",
      "gists_url": "https://api.github.com/users/abb128/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abb128/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abb128/subscriptions",
      "organizations_url": "https://api.github.com/users/abb128/orgs",
      "repos_url": "https://api.github.com/users/abb128/repos",
      "events_url": "https://api.github.com/users/abb128/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abb128/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-27T02:51:00Z",
    "updated_at": "2020-11-29T00:03:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nAn addon for an XML-based UI markup language that lets you write expressions and reactively update everything.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI would like to have the possibility of being able to have one result when a certain value is true, and a different result when it is false. For example,\r\n`<SButton text=\"${'hi' if (main.is_greeting) else 'bye'}\" />`\r\nHowever, the Expression object in Godot does not support this, and the result of the expression is always \"hi\", regardless of whether or not main.is_greeting is true.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI propose that the ternary operator from GDScript be supported in Expressions. For example, `10 if true else 20` would give 10, and `10 if false else 20` would give 20.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nThis is an example editor script that you can run.\r\n```gdscript\r\ntool\r\nextends EditorScript\r\n\r\nvar small: bool;\r\nvar expression: Expression;\r\nconst command := \"10 if small else 20\";\r\n\r\nfunc exec():\r\n\tvar result = expression.execute([], self, true);\r\n\tif not expression.has_execute_failed():\r\n\t\treturn result;\r\n\t\r\n\tprinterr(expression.get_error_text());\r\n\r\nfunc _run():\r\n\texpression = Expression.new();\r\n\tvar error = expression.parse(command, []);\r\n\tif error != OK:\r\n\t\tprinterr(expression.get_error_text());\r\n\t\treturn;\r\n\t\r\n\tsmall = true;\r\n\tprints(exec(), \"should be 10\");\r\n\tsmall = false;\r\n\tprints(exec(), \"should be 20\");\r\n```\r\n\r\n\r\nIf this feature were added, the output would look like this:\r\n```\r\n10 should be 10\r\n20 should be 20\r\n```\r\nCurrently, it seems to not support this kind of syntax and it just silently fails, giving the result of 10:\r\n```\r\n10 should be 10\r\n10 should be 20\r\n```\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nThere are a few hacky workarounds, such as `lerp(10, 20, int(small))`. However, as far as I know, there is no way to do this with arbitrary output values such as strings.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nThis would make the Expression class more useful and more complete. In any case, the way that it currently silently fails is weird and should probably be changed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1897/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1896",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1896/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1896/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1896/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1896",
    "id": 751773258,
    "node_id": "MDU6SXNzdWU3NTE3NzMyNTg=",
    "number": 1896,
    "title": "Add global crash handler/logger",
    "user": {
      "login": "lxknvlk",
      "id": 6954797,
      "node_id": "MDQ6VXNlcjY5NTQ3OTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6954797?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lxknvlk",
      "html_url": "https://github.com/lxknvlk",
      "followers_url": "https://api.github.com/users/lxknvlk/followers",
      "following_url": "https://api.github.com/users/lxknvlk/following{/other_user}",
      "gists_url": "https://api.github.com/users/lxknvlk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lxknvlk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lxknvlk/subscriptions",
      "organizations_url": "https://api.github.com/users/lxknvlk/orgs",
      "repos_url": "https://api.github.com/users/lxknvlk/repos",
      "events_url": "https://api.github.com/users/lxknvlk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lxknvlk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-26T18:29:39Z",
    "updated_at": "2020-12-05T10:13:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nA game in godot\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\n1. Users having crashes that i can not locate\r\n2. Exported game crashes, runs ok from editor\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nSuch implementation would allow to add crash logging so we can debug the crashes on exported versions. Also possibility to add crash reporter like firebase crashlytics.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nNot sure how it can work, but such a feature is mandatory for any mature game engine. Probably some global try-catch?\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nNo possible workarounds. One workaround that comes in mind is to use Unity engine. \r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nYes! This is a must have feature for all game engines! (All other cool guys do it!)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1895",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1895/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1895/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1895/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1895",
    "id": 751541004,
    "node_id": "MDU6SXNzdWU3NTE1NDEwMDQ=",
    "number": 1895,
    "title": "Make the built-in GDScript editor not break scene editing workflow",
    "user": {
      "login": "starry-abyss",
      "id": 11571820,
      "node_id": "MDQ6VXNlcjExNTcxODIw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11571820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/starry-abyss",
      "html_url": "https://github.com/starry-abyss",
      "followers_url": "https://api.github.com/users/starry-abyss/followers",
      "following_url": "https://api.github.com/users/starry-abyss/following{/other_user}",
      "gists_url": "https://api.github.com/users/starry-abyss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/starry-abyss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/starry-abyss/subscriptions",
      "organizations_url": "https://api.github.com/users/starry-abyss/orgs",
      "repos_url": "https://api.github.com/users/starry-abyss/repos",
      "events_url": "https://api.github.com/users/starry-abyss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/starry-abyss/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-26T12:09:48Z",
    "updated_at": "2020-11-26T14:24:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\n\r\nThe game has a lot of GUI, with GDScript scripts attached to different parts of the scene tree. I often have several tabs open at once with different scenes in them, which may be separate in the game or nested in each other. In some of the tabs I want to edit scenes, and other(s) - to edit code, and be able to switch back and forth.\r\n<br>\r\n\r\n### Describe the problem or limitation you are having in your project\r\n\r\nCurrenly, the internal GDScript editor window feels like it exists in a M.C. Escher's world.\r\n<br>\r\n\r\nOn one hand, it's independent from 2D/3D scene editing modes, it has a list of all scripts open in the project, and this list is on the left. It can be quickly accessed with Script button on top side of Godot editor:\r\n![image](https://user-images.githubusercontent.com/11571820/100343594-9f86cc00-2ff0-11eb-8bdc-ec034f8eb6b8.png)\r\n\r\n<br>\r\n\r\nOn the other hand, when I click on a script attached in the scene tree, I get the current scene tab replaced by the same full editor with all scripts listed at once. It interrupts the workflow of working with the scene, and I'm lost wondering where my scene is. There is a button to go back, but pressing it doesn't take me back to the scene editing either, it just for traversing lines of code.\r\n![image](https://user-images.githubusercontent.com/11571820/100346920-a5cb7700-2ff5-11eb-8773-e9cc4d3aa2f4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/11571820/100347035-d0b5cb00-2ff5-11eb-9485-9a4c795940c2.png)\r\n\r\n\r\n\r\n\r\n<br>Moreover, after one tab shows a script editor, switching between tabs I now have all tabs screwed to be script editors too, all identical (except currently selected tab is somehow translated in currently selected script on the left of the script editor)! In the same way other modes (2D/3D) spoil the tab that once was a script editing tab.\r\n<br>\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\n\r\nI'd like modes of editing, like 2D, 3D, and Script to be consistent, to preserve the state I left them in, so the current context of work is offloaded from my mind to Godot.\r\n\r\nHere are my ideas, some of which may be part of one solution or mutually exclusive:\r\n\r\n1) make the script editor always have its own tab/window/dock and never interfere with scene tabs (clicking the attached script on scene tree switches Godot to this script tab);\r\n2) preserve modes of each tab;\r\n3) add a button to go back to previously selected mode of a tab;\r\n4) remove the script list on the left and reuse scene tabs for the purpose;\r\n5) remove the script list on the left but only if editing the attached scene script;\r\n6) disallow changing modes of tabs, force to open new tabs for new modes.\r\n<br>\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n\r\nIt depends of what solution is chosen, examples are in the previous paragraph.\r\n<br>\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\n\r\nNo.\r\n<br>\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\n\r\nIt's an integral part of the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1895/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1894",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1894/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1894/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1894/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1894",
    "id": 751264892,
    "node_id": "MDU6SXNzdWU3NTEyNjQ4OTI=",
    "number": 1894,
    "title": "Add `get_custom_mouse_cursor()` method to Input class",
    "user": {
      "login": "Miziziziz",
      "id": 7292421,
      "node_id": "MDQ6VXNlcjcyOTI0MjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7292421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Miziziziz",
      "html_url": "https://github.com/Miziziziz",
      "followers_url": "https://api.github.com/users/Miziziziz/followers",
      "following_url": "https://api.github.com/users/Miziziziz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Miziziziz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Miziziziz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Miziziziz/subscriptions",
      "organizations_url": "https://api.github.com/users/Miziziziz/orgs",
      "repos_url": "https://api.github.com/users/Miziziziz/repos",
      "events_url": "https://api.github.com/users/Miziziziz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Miziziziz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-26T04:05:19Z",
    "updated_at": "2020-12-09T13:08:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### Describe the project you are working on\r\nan Rpg\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI have a custom mouse cursor I want to change when opening the pause menu\r\n\r\nI would like to do something like this:\r\n```\r\nvar last_cursor_img\r\nfunc set_cursor_to_specific_img():\r\n    last_cursor_img = Input.get_custom_mouse_cursor()\r\n    Input.set_custom_mouse_cursor(img)\r\n\r\nfunc reset_cursor_img():\r\n    Input.set_custom_mouse_cursor(last_cursor_img)\r\n```\r\n\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nI don't have to write code that access other nodes to find out what cursor shape I had set\r\n\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\nliterally just add a getter to the Input class\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nI could write a singleton that handles setting custom cursors, but that kind of defeats the purpose of the Input class\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nit's just a getter that goes along with an existing setter",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1893",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1893/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1893/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1893/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1893",
    "id": 751228916,
    "node_id": "MDU6SXNzdWU3NTEyMjg5MTY=",
    "number": 1893,
    "title": "Add a setting to control the value of `max_physics_steps` per idle frame",
    "user": {
      "login": "Demindiro",
      "id": 17316999,
      "node_id": "MDQ6VXNlcjE3MzE2OTk5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17316999?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Demindiro",
      "html_url": "https://github.com/Demindiro",
      "followers_url": "https://api.github.com/users/Demindiro/followers",
      "following_url": "https://api.github.com/users/Demindiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/Demindiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Demindiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Demindiro/subscriptions",
      "organizations_url": "https://api.github.com/users/Demindiro/orgs",
      "repos_url": "https://api.github.com/users/Demindiro/repos",
      "events_url": "https://api.github.com/users/Demindiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Demindiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-26T02:18:33Z",
    "updated_at": "2020-11-26T13:18:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on\r\nI'm working on a physics-based game.\r\n\r\n### Describe the problem or limitation you are having in your project\r\nI would like to increase the speed of the physics simulation without increasing/uncapping the idle framerate. Currently the amount of physics steps per idle frame is capped at 8 ([link to code][1]).\r\n\r\n```cpp\r\nstatic const int max_physics_steps = 8;\r\nif (fixed_fps == -1 && advance.physics_steps > max_physics_steps) {\r\n\tstep -= (advance.physics_steps - max_physics_steps) * frame_slice;\r\n\tadvance.physics_steps = max_physics_steps;\r\n}\r\n```\r\n\r\nIt _can_ be worked around by specifying `--fixed-fps` but this setting doesn't carry over when launching a project and you cannot specify it directly in release binaries.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation\r\nA project (and runtime?) setting somewhere to increase this value would be preferable over recompiling the engine to change it.\r\n\r\n### Describe how your proposal will work, with code, pseudo-code, mock-ups, and/or diagrams\r\n- An integer setting `physics/common/max_physics_steps`\r\n- Perhaps a runtime property `Engine.max_physics_steps`\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?\r\nYes (keep it at the default value).\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?\r\nIt cannot be changed with an add-on.\r\n\r\n[1]: https://github.com/godotengine/godot/blob/7e009a167110e79caa102c5b88363fd32b75293c/main/main.cpp#L2378-L2382",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1892",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1892/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1892/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1892/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1892",
    "id": 750479741,
    "node_id": "MDU6SXNzdWU3NTA0Nzk3NDE=",
    "number": 1892,
    "title": "Add NetworkSelfConnected and NetworkSelfDisconnected signal to tree",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-25T05:45:00Z",
    "updated_at": "2020-11-26T10:55:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworkingTest\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI find it difficult to initialize the server due to the fact that I have to put my server initialization code right after i create the server.\r\n\r\nI actually have multiple places I need to initialize the server and.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a NetworkSelfConnected and NetworkSelfDisconnected signal to tree.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically it would trigger on the server when the server is created or closed or on a client when the client is connected to the server or disconnected from the server.\r\n\r\n```\r\nfunc _ready():\r\nget_tree().connect(\"network_peer_connected\", self, \"peer_connected\")\r\nget_tree().connect(\"network_peer_disconnected\", self, \"peer_disconnected\")\r\nget_tree().connect(\"network_self_connected\", self, \"self_connected\")\r\nget_tree().connect(\"network_self_disconnected\", self, \"self_disconnected\")\r\n\r\nfunc _peer_connected(id):\r\n   #setup peer\r\n\r\nfunc _peer_disconnected(id):\r\n   #cleanup peer\r\n\r\nfunc self_connected(id):\r\n   #setup self\r\n\r\nfunc _self_disconnected(id):\r\n   #cleanup self if client to client\r\n\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used to setup things in other nodes that don't have networking code and while it can be by creating your own signals it may not be very clear on where to do so. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt compliments the peer functions and makes it easy to initialize things when on the server or client when connected or disconnected.\r\n\r\nNote I know the server doesn't connect to itself or disconnect from itself but the idea and code that would be used in these signals would be the same.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1891",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1891/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1891/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1891/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1891",
    "id": 750177952,
    "node_id": "MDU6SXNzdWU3NTAxNzc5NTI=",
    "number": 1891,
    "title": "Add the ability to detect editor changes in plugins",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-11-25T00:18:07Z",
    "updated_at": "2020-11-27T20:20:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodotNetworkedEditor plugin\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to detect changes in the editor so I can send them over to other peers\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSomething like a signal in EditorPlugin that detects when any property changes in the godot editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nconnect(\"editor_property_changed\", self, \"property_changed\")\r\n\r\nfunc property_changed(object, member, value):\r\n    pass\r\n\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI am not sure what it could be used for other then networking but it doesn't seem to be possible to do right now.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it doesn't seem to be possible to do right now",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1890",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1890/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1890/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1890/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1890",
    "id": 750142033,
    "node_id": "MDU6SXNzdWU3NTAxNDIwMzM=",
    "number": 1890,
    "title": "Obsolete 2D, 3D, Script, Assetlib and MainWindow  in favor of dockable tabs like Unity Engine",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-24T23:25:58Z",
    "updated_at": "2020-11-25T18:37:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSprite Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot related to the issue\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake center panel obsolete in favour of true dock system. and resource/node based editors like what unity does\r\n\r\nThis allows developers more control over what their workspace looks like.\r\n- Want to have 2d window docked on above and 3d window docked below?\r\n- Want to drag the inspector tab over to main window?\r\n- Want to resize a side panel so its bigger then the 2d or 3d viewport?\r\n- Want to have tab based scripts windows so you can use the whole horizontal space to code?\r\n\r\nAll of these can be achieved with a true docking system.\r\nyou would literally be able to dock panels in panels in panels\r\n\r\nThis would get rid of the need to have dock buttons on panels because you could literally drag and drop it anywhere beside anything.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasicly the editor would have 5 dockable area's\r\n- center\r\n- top\r\n- bottom\r\n- left\r\n- right\r\n\r\nYou would be able to enable panels through a view menu and dock them in each area or have them floating.\r\nEach tab would additionally have these 4 areas where you could dock things to split it regardless of weather its docked or floating...\r\n- top\r\n- bottom\r\n- left\r\n- right\r\n\r\n\r\n\r\nA script editor is opened by clicking on a script or a existing script tab.\r\n2d a 3d scenes would be abstracted away into a scene view control with a 2d and 3d toggle tool mode similar to unity.\r\nThe asset lib would be relocated under the project menu.\r\n\r\nEach of these panels would be resizeable to 0 or the whole editor size and both x and y axis\r\nWhen they become hidden due to resizing them too big or small they would need to be enabled again through the view menu\r\n\r\nPlugins would then be made to support opening custom editors when a Node or Resource is selected\r\nResources would probably require a double click\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can guarantee this system would be used more because its mostly the same system its just more flexible.\r\nAlso it can't be worked around without redesigning the whole editor with plugins\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts much more customizable\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1890/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1889",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1889/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1889/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1889/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1889",
    "id": 750132306,
    "node_id": "MDU6SXNzdWU3NTAxMzIzMDY=",
    "number": 1889,
    "title": "Refactor 3D tool bar to be more like the 2D one",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-24T23:07:50Z",
    "updated_at": "2020-11-25T16:13:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nImageEditor addon\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot really related but I am unsure how to structure my toolbar to match 2d and 3d view since they are different slightly \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe 3D toolbar is not exactly like the 2D toolbar even though the basically have the same logic\r\nhere are some things different..\r\n- 2d view can't have multiple viewports\r\n- 3d and 2d view have icons in different places\r\n- 3d view doesn't have grid on top and left relative to camera view\r\n- 3d and 2d have snap settings in different places\r\n- 3d is missing some tools like...\r\n    - change objects rotation pivot tool\r\n    - pan tool\r\n    - measure tool\r\n    - bone tool\r\n    - use grid snap tool\r\n\r\nhere are some pics on how they are diffrent..\r\nSorry about that one pic I couldn't capture the whole popup\r\n![image](https://user-images.githubusercontent.com/2453707/100160636-d4661800-2e64-11eb-94b8-eddeac37b575.png)\r\n![image](https://user-images.githubusercontent.com/2453707/100160650-d92acc00-2e64-11eb-9429-f2771079ef2f.png)\r\n![image](https://user-images.githubusercontent.com/2453707/100160940-5eae7c00-2e65-11eb-8824-bb87520af619.png)\r\n![image](https://user-images.githubusercontent.com/2453707/100160998-784fc380-2e65-11eb-85f9-8ea4dc901530.png)\r\n![image](https://user-images.githubusercontent.com/2453707/100161124-b51bba80-2e65-11eb-95f9-cd569803ff1d.png)\r\n![image](https://user-images.githubusercontent.com/2453707/100161083-a7663500-2e65-11eb-94a7-7701a62c9ec8.png)\r\n\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't have any mockups but the idea would be that they would be the same\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes\r\nAlso idk about that few lines of script I don't think you can.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it would make 2d and 3d editing more consistent and easier to learn the 3d scene editor when your have just used the 2d one.\r\n\r\nI know I had trouble finding where things where at when I first star6ted using the 3d scene editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1888",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1888/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1888/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1888/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1888",
    "id": 750112402,
    "node_id": "MDU6SXNzdWU3NTAxMTI0MDI=",
    "number": 1888,
    "title": "Make division operator less error prone without a breaking change",
    "user": {
      "login": "bluenote10",
      "id": 3620703,
      "node_id": "MDQ6VXNlcjM2MjA3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3620703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluenote10",
      "html_url": "https://github.com/bluenote10",
      "followers_url": "https://api.github.com/users/bluenote10/followers",
      "following_url": "https://api.github.com/users/bluenote10/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluenote10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluenote10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluenote10/subscriptions",
      "organizations_url": "https://api.github.com/users/bluenote10/orgs",
      "repos_url": "https://api.github.com/users/bluenote10/repos",
      "events_url": "https://api.github.com/users/bluenote10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluenote10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-11-24T22:26:23Z",
    "updated_at": "2020-12-17T15:40:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNot so relevant in this case.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nEncountering bugs caused by ambiguity of float vs integer division.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis is a follow up proposal to #1866. Overall I think @dalexeev's proposal would be a much cleaner solution purely from a language design perspective, but has the downside of:\r\n- the breaking change,\r\n- people coming from statically typed languages expect a single division operator (which however can be turned around to: people coming from dynamically typed languages expect float and integer operators to be different operators).\r\n\r\nThe idea of this proposal is:\r\n- Make no change of the behavior of `/`, i.e., keep a single division operator.\r\n- Provide some linting rules that help to catch the majority of the typical division bugs arising in dynamic contexts.\r\n\r\n--------------\r\n\r\nThe fundamental question is if GDScript is closer to a dynamically or a statically typed language.\r\n\r\nPython 3 and GDScript both support type annotations, but there is an important difference. In GDScript type annotations actually lead to type conversions, whereas in Python they don't:\r\n\r\n**`Python`**\r\n```python\r\ndef f(x: float):\r\n    print(type(x))\r\n\r\nf(42)\r\n# prints: <class 'int'>\r\n```\r\n\r\n**`GDScript`**\r\n```gdscript\r\nfunc f(x: float):\r\n    print(typeof(x) == TYPE_REAL)   # should be called TYPE_FLOAT\r\n\r\nf(42)\r\n# prints: True\r\n```\r\n\r\nThis also means that in Python having the classic single `/` division behavior would be a bug even with type annotations:\r\n\r\n```python\r\ndef f(a: float, b: float):\r\n    # type annotations don't convert potential ints to float, i.e., the division would not necessarily\r\n    # be a float division\r\n    assumed_float_division_result = a / b\r\n\r\nf(5, 2)\r\n```\r\n\r\nCompared to GDScript with type annotations:\r\n\r\n```gdscript\r\nfunc f(a: float, b: float):\r\n    # type annotations do convert anything to float, i.e., the division is guaranteed to be a float division\r\n    var assumed_float_division_result = a / b\r\n\r\nf(5, 2)\r\n```\r\n\r\nThus, the way type annotations work in GDScript bring it closer to a statically typed language. In general I would conclude that the division semantics are sane if the types of the operands are known -- like it is the case in statically typed languages.\r\n\r\n--------------\r\n\r\nThis leaves the case when operands have unknown types. Omitting type annotations opens the door for the classic division bug of dynamically typed language: Integer values creep into a place where they aren't expected and thus the wrong return type is obtained:\r\n\r\n```gdscript\r\nfunc f(a, b):\r\n    # the classic division bug\r\n    var assumed_float_division_result = a / b\r\n\r\nf(5, 2)\r\n```\r\n\r\nThe idea of this proposal is to at least highlight / catch such cases via a linter rule producing something like:\r\n\r\n``` gdscript\r\nvar assumed_float_division_result = a / b\r\n# Encountered error-prone division with unknown operand types. Consider giving the operands an explicit type.\r\n```\r\n\r\nThere would be no linter warning if:\r\n- both operand types are known (which includes the common `int / int` case)\r\n- only one of the operands is known and it is a `float`. This case should be fine, because integer division can already be excluded.\r\n\r\nThe latter would allow to silence the warning in the line above via the typical:\r\n```gdscript\r\nvar assumed_float_division_result = float(a) / b\r\n```\r\n\r\n--------\r\n\r\nThere are some use cases where users really want to have full dynamic typing (see [this as an example](https://github.com/godotengine/godot-proposals/issues/1866#issuecomment-732493853)), in which case they really cannot annotate the types of the operands at all. In such a case the user could explicitly silence the linter to express \"trust me, I know what I'm doing here\". To illustrate on the generic `normalize_values` function:\r\n\r\n```gdscript\r\nfunc normalize_values(values, reference_value):\r\n    var new_values = []\r\n    for value in values:\r\n        # Deliberately apply the \"multiply by 1.0\" trick to convert integers to float\r\n        # in a duck typing compatible way. Requires to tell the linter that we know\r\n        # that this untyped division is fine.\r\n        new_values.append(value * 1.0 / reference_value) # nolint\r\n    return new_values\r\n```\r\n\r\n(I don't know if there is already a mechanism to silence the linter on a per line basis. Just using the `# nolint` as an example here.)\r\n\r\n-----\r\n\r\nThe feasibility of this proposal depends on whether GDScript's type inference system is already strong enough to infer the type in non-trivial cases, i.e., could it see that `function_returning_float() * 1.0 * local_int * local_float` is of type `float`?\r\n\r\nThis basically leads back to the question: Is GDScript statically typed \"enough\" to afford a `/` operator like in true statically typed languages, or is its nature still more dynamic?\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nLanguage property.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nLanguage property.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1888/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1886",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1886/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1886/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1886/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1886",
    "id": 749747334,
    "node_id": "MDU6SXNzdWU3NDk3NDczMzQ=",
    "number": 1886,
    "title": "Provide inverse y-axis `FRAGCOORD` constant to shader",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-24T14:21:07Z",
    "updated_at": "2020-11-29T14:40:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d platform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot coordinates are top left. Shader co ordinates are bottom left. Unless I'm missing something pretty obvious, if you want to pass in specific co-ordinates into a shader for FRAGCOORD (i.e. the pixel co-ordinates) you have to first manually convert your global/local position to be the inverse of the viewport.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt might be trivial, but a built in GODOT_FRAGCOORD, or even a SCREEN_SIZE would be nice. Given GODOT already knows the screen resolution at run time and the screen texture passed in, this would save on manually converting every time a point is needed to be passed in to a shader and also having to get the screen/viewport size manually.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNew constants for godot shader language\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, but why?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGodot co-ordinate system is inverse to shader language so it would be nice if they could be automatically translated.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1885",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1885/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1885/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1885/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1885",
    "id": 749355283,
    "node_id": "MDU6SXNzdWU3NDkzNTUyODM=",
    "number": 1885,
    "title": "Rename `Node.NOTIFICATION_PATH_CHANGED` to make it not misleading",
    "user": {
      "login": "briansemrau",
      "id": 6376721,
      "node_id": "MDQ6VXNlcjYzNzY3MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6376721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/briansemrau",
      "html_url": "https://github.com/briansemrau",
      "followers_url": "https://api.github.com/users/briansemrau/followers",
      "following_url": "https://api.github.com/users/briansemrau/following{/other_user}",
      "gists_url": "https://api.github.com/users/briansemrau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/briansemrau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/briansemrau/subscriptions",
      "organizations_url": "https://api.github.com/users/briansemrau/orgs",
      "repos_url": "https://api.github.com/users/briansemrau/repos",
      "events_url": "https://api.github.com/users/briansemrau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/briansemrau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-11-24T05:27:12Z",
    "updated_at": "2020-11-25T13:41:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nC++ Module development, but this applies to anyone using the notification system\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n`Node::NOTIFICATION_PATH_CHANGED` is named such that you would expect it to be triggered whenever a node is parented, unparented, or otherwise moved in the scene tree. Those are all situations in which the node path changes. However, this notification is actually only triggered when the node name changes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRename `NOTIFICATION_PATH_CHANGED` to `NOTIFICATION_NAME_CHANGED`.\r\n\r\nThis makes the functionality of this notification no longer misleading.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\ntechnically you work around this by doing nothing but that's not the point\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's part of the core engine.\r\n\r\n\r\n\r\nI don't expect this proposal to go anywhere because this change breaks a ton of compatibility, but I feel better just by writing this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1884",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1884/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1884/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1884/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1884",
    "id": 749315341,
    "node_id": "MDU6SXNzdWU3NDkzMTUzNDE=",
    "number": 1884,
    "title": "Usability Improvement: Optional Volume Units, Db/Linear Scale",
    "user": {
      "login": "mindinsomnia",
      "id": 15921126,
      "node_id": "MDQ6VXNlcjE1OTIxMTI2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15921126?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mindinsomnia",
      "html_url": "https://github.com/mindinsomnia",
      "followers_url": "https://api.github.com/users/mindinsomnia/followers",
      "following_url": "https://api.github.com/users/mindinsomnia/following{/other_user}",
      "gists_url": "https://api.github.com/users/mindinsomnia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mindinsomnia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mindinsomnia/subscriptions",
      "organizations_url": "https://api.github.com/users/mindinsomnia/orgs",
      "repos_url": "https://api.github.com/users/mindinsomnia/repos",
      "events_url": "https://api.github.com/users/mindinsomnia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mindinsomnia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-24T03:42:46Z",
    "updated_at": "2020-11-24T14:35:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt's not really relevant to this general usability improvement suggestion.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's a usability suggestion so it's not a limitation or a problem, it's just something that will make using Godot more comfortable and enjoyable for users.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option to choose between two different units for volume sliders in Godot. Db (as in Decibels) or Linear Scale, which is a sliding value between 0% and 100%.\r\n\r\nI have read the Godot manual and I understand it's point of view expressed that it is a good idea in the long term to learn how to work with Decibels for professional audio work. However in my opinion it would be a usability improvement to offer the user the ability to choose between using Decibels and Linear Scale for the following reasons:\r\n\r\n1. As the manual acknowledges, this is something most users are not going to be familiar with. A Godot user's first experience should be as intuitive as possible, and linear scale is the most intuitive volume control for most people.\r\n\r\n2. In many instances, particularly for first time users of Godot, or indie game developers, or users who are new to game development in general, the benefits of working in Decibels may not apply at all. One of the mentioned benefits of working with Decibels in the manual is \"will allow you to communicate better with audio professionals\", but for a indie game developer learning Godot for the first time, they would be lucky to even know an audio professional. More than likely, most beginners will be adding simple sound effects to actions in their game, clicks to menu actions, or a 'tada!' success sound effect to winning a level, and a simple volume slider would be more than enough for that task.\r\n\r\n3. Plenty of software offers a choice between units that represent the same thing in different ways. Design software offers the choice between working in pixel measurements or millimeters/inches/etc. In Blender camera field of view can be specified in either angles (something game developers would be more accustomed to) or millimeters (something photographers would be more accustomed to).\r\n\r\n![vSLXGO0u0A](https://user-images.githubusercontent.com/15921126/100042759-3c662f80-2e60-11eb-90d4-59ec417d872f.gif)\r\n\r\n4. In Game Design, we often teach players new gameplay mechanics intuitively through level design, introducing things in a way that allows a player to organically learn them. This is one of the benefits of providing a simple switch to toggle between Decibels and Linear Scale. Providing a choice between both would actually help promote and teach decibels to users and not even require them to read a manual to understand them. New users will be able to immediately control the volume of their sounds, and be able to switch between the units to understand how different values in each scale correspond to each other. A simple hover text hint on the dropdown could even make mention that decibels are the recommended way of working. This allows the user to learn about decibels without being confused or needing to read a manual, and use a linear scale slider initially as they are learning.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI propose that **internally**, Godot always uses Decibels, but optionally can present either a Decibel slider, or Linear Scale slider.\r\n\r\nThe result is a simple cosmetic change on how the option actually looks in the UI:\r\n\r\n**Before:**\r\n![godot volume slider](https://user-images.githubusercontent.com/15921126/100042121-e80e8000-2e5e-11eb-89ce-5a6383398b8f.png)\r\n\r\n**After:**\r\n![godot-volume-slider2](https://user-images.githubusercontent.com/15921126/100043070-c57d6680-2e60-11eb-804b-d0b40a73ec7f.jpg)\r\n\r\nInternally, when in Linear Scale mode, the slider's value is converted to Decibels and stored in the Decibel property. Hence when the user switches between units, the conversion is automatic.\r\n\r\nI think in addition to the UI option, this should be replicated in the API for AudioStreamPlayer.\r\n\r\nRight now already AudioStreamPlayer has a 'volume_db' property, all that would need to be added is a 'volume_linear' property or perhaps even just 'volume', and internally when it's set the value could be automatically converted into decibel scale and stored in volume_db.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nN/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1884/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1879",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1879/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1879/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1879/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1879",
    "id": 749141127,
    "node_id": "MDU6SXNzdWU3NDkxNDExMjc=",
    "number": 1879,
    "title": "Disallow new script with class_name or add_custom_type()",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-23T21:28:22Z",
    "updated_at": "2020-11-24T00:10:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworkedTest\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI don't want to accentually add a new script to one of my nodes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDisallow `new script` with nodes created from node browser and only have `extend script`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis makes sure people aren't attaching scripts that aren't intended for the object.\r\nIf they want to attach the script they have to extend it\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used in node inheritance and type safety\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt makes work flow better and more stable (basicly your not breaking things)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1879/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1878",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1878/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1878/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1878/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1878",
    "id": 749074600,
    "node_id": "MDU6SXNzdWU3NDkwNzQ2MDA=",
    "number": 1878,
    "title": "Use more pythonic syntax with enums",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-23T19:42:37Z",
    "updated_at": "2020-11-24T20:32:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworkingTest\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n~~Enums and Consts are basicly the same thing but they use a odd syntax for gdscript and enums and const are written diffrently~~\r\nRealized const enums are actually dictionaries Xd\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nChange enums ~~and consts~~ so they use this syntax\r\n\r\n```gdscript\r\n\r\n#valid\r\nenum MyEnum:\r\n    ValueA = someConstValue,  #valid\r\n    ValueB = someNonConstValue,   #valid\r\n    ValueC : someConstValue, #invalid\r\n    ValueD : someNonConstValue,   #invalid\r\n\r\n#invalid\r\nenum MyEnum {\r\n}\r\n\r\n#invalid\r\nenum MyEnum = {\r\n}\r\n```\r\n\r\nIt would not only be a cleaner look\r\n\r\n## EDIT \r\nI want to mention the reason I suggest '=' or `:` is to be easier to understand `:` is more of a scope or inheritance thing and `=` is more of a assignment thing\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAbove\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would not only be more pythonic but its more consistent.\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nenums ~~and consts~~ already are this would just make syntax more consistent \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1878/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1876",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1876/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1876/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1876/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1876",
    "id": 749051091,
    "node_id": "MDU6SXNzdWU3NDkwNTEwOTE=",
    "number": 1876,
    "title": "Make class_name act the same as add_custom_type but with typed name",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-11-23T19:03:08Z",
    "updated_at": "2020-11-29T04:05:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworkingTest\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to make custom types which I can then use to return and inherit from using their type name.\r\nthe issue is the following..\r\nadd_custom_type doesn't register the type as a typed name and can't be used to staticly type things\r\nclass_name shows the name of the script attached unlike add_custom_type\r\nclass_name scripts can be removed unlike add_custom_type but can still be extended\r\nclass_name can't be disabled or enabled with plugins like add_custom_type\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake class_name create true custom types like add_custom_type.\r\nThey would have the following features...\r\n- Scripts cannot be removed when created from node browser\r\n- Script names are not shown in node browser only type name and icon (icon is parent icon if nothing is specified)\r\n- plugins can register class_name types to only be enabled when the plugin is enabled\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\n#plugin types can be inherited and used for static typing\r\nclass_name Socket, \"res://addons/network/socket.png\" extends Node\r\n\r\nclass_name SocketClient, \"res://addons/network/socket_client.png\" extends Socket\r\n\r\nclass_name SocketServer, \"res://addons/network/socket_server.png\" extends Socket\r\n\r\n```\r\n\r\n```\r\nfunc _enter_tree(): \r\n\tadd_existing_type(Socket )\r\n\tadd_existing_type(SocketClient)\r\n\tadd_existing_type(SocketServer)\r\n```\r\n**Note**\r\n- The one above is what class_name types would looks like and what add_custom_type already does\r\n- The one below is what class_name looks like now\r\n![image](https://user-images.githubusercontent.com/2453707/100003313-b91ede00-2d7a-11eb-9e3c-b74fff2d233c.png)\r\n\r\nnodes created with the node browser have read only scripts like what add_custom_type has now\r\n![image](https://user-images.githubusercontent.com/2453707/100003402-e075ab00-2d7a-11eb-9d4c-d88d006ec553.png)\r\n\r\n\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would make types so much better.\r\nYou can the use custom types by type name now!\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause it already is its just merging the pros of add_custom_type and class_name\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1875",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1875/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1875/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1875/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1875",
    "id": 748878598,
    "node_id": "MDU6SXNzdWU3NDg4Nzg1OTg=",
    "number": 1875,
    "title": "Allow getting function caller",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-23T15:04:51Z",
    "updated_at": "2020-11-29T19:52:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworkTest\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was trying to make a overload function so everything was in one place\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow getting the caller of a function \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nfunc is_master()->bool:\r\n    if caller is Node:\r\n\treturn caller.is_network_master()\r\n    return false\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think this could be used to make static modules methods and no I don't think it can\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be a good way to redirect methods to other objects and its currently not possible to do afaik",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1875/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1874",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1874/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1874/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1874/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1874",
    "id": 748834519,
    "node_id": "MDU6SXNzdWU3NDg4MzQ1MTk=",
    "number": 1874,
    "title": "Allow to override and extend the `Input` implementation via modules",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-11-23T14:10:00Z",
    "updated_at": "2020-11-24T22:16:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine Extension\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMe and other people have a number of input-related proposals which are unlikely to be implemented in Godot due to perceived complexity, but nonetheless would benefit from core changes done to `Input`, or such features are very easy to implement in core, but infinitely hard to implement via script by beginners:\r\n- Add a fighting game input buffer: #100.\r\n- Input buffering: goostengine/goost#16.\r\n- Distinguish between the system that filters input and the data structure that contains input state: #104.\r\n- Implement input action duration: godotengine/godot#36460.\r\n\r\nTBD:\r\n- Add a signal for detecting action toggle states (pressed/released) in `Input`: godotengine/godot#43646.\r\n- Add Input `is_anything_pressed` method godotengine/godot#35012.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUnity has `InputExtentions` class, perhaps that's something we should also aim for.\r\n\r\nSee also https://forum.unity.com/threads/creating-an-extension-class-for-input.132870/\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI propose this is implemented similarly to godotengine/godot#42875.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThings like #104, not possible.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThose proposals should not be part of the core, that's the point with this proposal.\r\n\r\nIf approved, I can work on this myself, I think it would require minimum core changes.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1874/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1871",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1871/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1871/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1871/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1871",
    "id": 748256285,
    "node_id": "MDU6SXNzdWU3NDgyNTYyODU=",
    "number": 1871,
    "title": "Have a compilation error when `onready var x = $X` points to a nonexistent Node",
    "user": {
      "login": "pierpo",
      "id": 6313316,
      "node_id": "MDQ6VXNlcjYzMTMzMTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6313316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierpo",
      "html_url": "https://github.com/pierpo",
      "followers_url": "https://api.github.com/users/pierpo/followers",
      "following_url": "https://api.github.com/users/pierpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierpo/subscriptions",
      "organizations_url": "https://api.github.com/users/pierpo/orgs",
      "repos_url": "https://api.github.com/users/pierpo/repos",
      "events_url": "https://api.github.com/users/pierpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-22T14:36:13Z",
    "updated_at": "2020-11-24T13:04:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm working on a little turn based tank game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nSometimes we want to add a feature related to our player. This feature implies reworking the nodes of the player scene, which will break the paths in our scripts:\r\n\r\n```diff\r\n- onready var sprite = $Sprite\r\n+ onready var sprite = $Body/Sprite\r\n```\r\n\r\nBut we only know this at runtime once the scene with `sprite` is mounted, in the errors (which we sometimes miss).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI'm not 100% sure, but it feels like the available nodes during `_ready` is deterministic: it's always the nodes in the editor.\r\n\r\nMeaning that if a node is missing, we can know it right away. So, the editor might be able to display an error.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\nonready var sprite = $Sprite # Compile time error: OOPS, no node found with this path!\r\n```\r\n\r\nOf course, this would only affect `onready` declared variables since it's perfectly acceptable to access nodes later during run time since new nodes might have been added dynamically.\r\n\r\nI'm not an expert with Godot, so I might miss something that would make my proposal impossible...\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI can't think of any workaround.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis feels like a built-in GDScript behaviour that would make the refactoring experience a little better.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1871/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1870",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1870/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1870/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1870/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1870",
    "id": 748126139,
    "node_id": "MDU6SXNzdWU3NDgxMjYxMzk=",
    "number": 1870,
    "title": "Add `String.is_valid_port()` and `String.is_valid_ip()`",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-11-21T23:46:44Z",
    "updated_at": "2020-11-24T20:01:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNetworking test\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthere doesn't seem to be a way to check if a string is just a valid ip or port\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd the following to the string class..\r\n- `is_valid_port` \r\n- `is_valid_ip` \r\n- `is_valid_ipv4_ip`\r\n- `is_valid_ipv6_ip`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nis_valid_port variants  would return if a string is a valid port with no ip\r\nis_valid_ip variants would return if a string is a valid ip with no port\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nyes but you have no know how to parse ports and ips\r\nalso yes I know ipv4 ports are easy to do\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt makes checking these thing easy to do.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1868",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1868/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1868/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1868/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1868",
    "id": 748096604,
    "node_id": "MDU6SXNzdWU3NDgwOTY2MDQ=",
    "number": 1868,
    "title": "Dark mode for Window title bar on Windows",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-11-21T20:23:21Z",
    "updated_at": "2020-11-25T18:16:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen OS-wide dark mode is enabled on Windows, Godot still has a white title bar.\r\n![image](https://user-images.githubusercontent.com/1311555/99886751-e1052900-2c36-11eb-9df9-3778374ed2f3.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInstead, it should follow the same color scheme and have a dark color.\r\n(A similar issue was raised and fixed on MacOS: https://github.com/godotengine/godot/pull/27264)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm no expert in that OS-specific part, ~~but I suppose it should be relatively simple to do?~~\r\nThe color to pick could come from the editor theme, or from the OS if there is an API to obtain it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's OS-specific and there is nothing exposed to do this from a script AFAIK, it would be very inconvenient to do that with an addon anyways.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt relates to the core windowing system, used for games, editor and project manager.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1868/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1867",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1867/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1867/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1867/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1867",
    "id": 747731882,
    "node_id": "MDU6SXNzdWU3NDc3MzE4ODI=",
    "number": 1867,
    "title": "Ability to send audio source to multiple devices or separate audio source to desired device (DualSense Haptic Feedback support)",
    "user": {
      "login": "JOELwindows7",
      "id": 7281060,
      "node_id": "MDQ6VXNlcjcyODEwNjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7281060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JOELwindows7",
      "html_url": "https://github.com/JOELwindows7",
      "followers_url": "https://api.github.com/users/JOELwindows7/followers",
      "following_url": "https://api.github.com/users/JOELwindows7/following{/other_user}",
      "gists_url": "https://api.github.com/users/JOELwindows7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JOELwindows7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JOELwindows7/subscriptions",
      "organizations_url": "https://api.github.com/users/JOELwindows7/orgs",
      "repos_url": "https://api.github.com/users/JOELwindows7/repos",
      "events_url": "https://api.github.com/users/JOELwindows7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JOELwindows7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-11-20T19:11:40Z",
    "updated_at": "2020-11-26T20:10:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\na game that support sending audio to multiple devices and/or another audio to another device\r\n\r\nbasically a special case of audio transmission such as Sony Playstation 5 DualSense Haptic Feedback where it reads from speaker audio like tutorials here https://youtu.be/EzqaclFn_Q4 and https://youtu.be/2vg0p56e7mA\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot's internal singleton of `AudioServer` only has the ability to send audio through one device only (see Godot Demo `Audio Changer Demo`). developer or user can decide which device the audio transmit into which audio output device. Unfortunately, according to my reading the demo and the documentation, it appears we can only choose one device, and no more than one, as the Method of it says.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n(similarity of #1836 which basically allow send audio from this audio node to multiple buses; combining idea)\r\n\r\nadd ability to send audio from this bus to multiple devices, have another bus that transmit into desired audio device.\r\n\r\ne.g., in case of DualSense,\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\n- Internal Audio device = Master of default_bus_layout to all speakers\r\n- Dualsense audio device = Master of default_bus_layout to Headphone jack (front speakers) as Stereo, Haptic of default_bus_layout to Haptic Voice Actuators (rear speakers) as Stereo\r\n```\r\nfor context, according to tutorial how to DualSense on PC above (https://youtu.be/EzqaclFn_Q4 ), if you connect your DualSense controller to a PC via USB e.g., it will report that it has a quadraphonic audio output device, 2 on the front being the stereo Headphone Hack, and 2 on rear being the Sound Based Haptic Feedback using Voice Actuator Technology. Since PS5, the Vibration system has been changed from conventional off-balance motor\r\n\r\nImagine there is an explosion. We have 2 AudioStreamPlayer3D node. one for standard (loaded with explosion sound) and the other for Haptic (loaded with earrape or over driven explosion sound or special haptic explosion). diagram bellow shows which audio stream player node the audio devices get:\r\n\r\n```\r\n- Internal Audio Device = AudioStreamPlayer3D Standard\r\n- Dualsense audio device = mirror from Internal Audio Device, AudioStreamPlayer3D Haptic (with enhancement effects)\r\n```\r\n\r\nInternal Audio Device will sounds like the explosion normally, while the DualSense Haptic Feedback will vibrates like explosion sound also, but since it has the enhancement effect, it feels more authentic.\r\n\r\nCombining the sound with **`Speaker fill`** like tutorial above (https://youtu.be/EzqaclFn_Q4 and https://youtu.be/2vg0p56e7mA ) is cheapskate and not a great idea! any sound that sounds on Main Speaker / Headphone will also vibrate the same way in your hand, and it will feels wrong and funny if e.g. people talking and you feel their voice vibration. It basically like you have a cheap sound system that has a subwoofer, but it is does not separate treble and bass so every sound becomes too bassy unlike in cinema supposed to be. Well, it's not fun and boring too if you have constantly vibrating DualSense when in game, you are in a noisy crowd (Yeah, it shouldn't be vibrating constantly because not only it drains battery, but also it's annoying. maybe if in crowd should be little vibration or not even at all).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUnfortunately we haven't thought enough what workaround in case of being considered a feature creep. However, we do have another idea for how this feature can be used.\r\n\r\nin case when not much discussed to DualSense, there still a reason why it would be used for another case. Such as customized Interactive system. Imagine you are in a mall where there is a sculpture where you can interact with it. it has a button and each button sounds this speaker, and another sounds another speaker. Sometimes, there will be more buttons like that in a single computer containing those many sound cards. Why this is important? Because there will be many of them pressing multiple button at the same time, which respective output has to come the moment that each button has been pressed. It is funny if people have to wait for the soundcard from another people to finish playing the audio, and disasterous if the queue of soundcard became long. Well Multiple computer (say it's $25 each)? that's expensive! we have only this computer (still $25) that has many USB ports. Multiple instance of that Godot binary? you wish.\r\n\r\nHow about Multiplayer? Player one will use Front speaker, Player two will use headphone jack, Player three will use USB headphone, and so on.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nWe believe such enhancement would not be possible through add-on, as such feature would require the core modification. similar reason to #1836 , Master Bus or any parent bus that route to audio output has to have the ability to choose which audio output device the audio goes into. like from example above: Master to main speaker, and Haptic to DualSense Haptic Feedback\r\n\r\nWell, let's say somebody did made the add-on through GDNative. Obviously, that GDNative would require separate Audio Engine header (which now is no longer using Godot's Audio Server), which the management for it will be too complicated since there are other things to consider such as Pause, syncronization to Godot's clock, volume, effects, what else, and so on. Basically, it is not viable thing to do. Making a GDNative which basically is separate audio engine is rather funny, as Godot already has one built-in.\r\n\r\nTherefore it is best if the core already has supported it. Not only it would make setting up easier, but lesser library requirement, since DualSense e.g., doesn't need any proprietary Library just to get its Haptic Feedback (speaking of proprietary library DualSense has Adaptive Triggers, which is a whole another story)\r\n\r\nanother reason why this proposal was made, is that we have an idea of designing haptic using sound after we found that DualSense Haptic Feedback is based on sound, like speaker but you held that speaker and it works as a vibration speaker.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1864",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1864/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1864/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1864/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1864",
    "id": 747534842,
    "node_id": "MDU6SXNzdWU3NDc1MzQ4NDI=",
    "number": 1864,
    "title": "Sync gameplay and scene editor",
    "user": {
      "login": "jcostello",
      "id": 1168582,
      "node_id": "MDQ6VXNlcjExNjg1ODI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1168582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcostello",
      "html_url": "https://github.com/jcostello",
      "followers_url": "https://api.github.com/users/jcostello/followers",
      "following_url": "https://api.github.com/users/jcostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcostello/subscriptions",
      "organizations_url": "https://api.github.com/users/jcostello/orgs",
      "repos_url": "https://api.github.com/users/jcostello/repos",
      "events_url": "https://api.github.com/users/jcostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-20T14:29:52Z",
    "updated_at": "2020-11-21T01:37:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D FPS\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUnable to inspect graphically how the game is working outside the gameplay view\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd the ability to see how the nodes are behaving in the scene editor while the game is running. Juan said that once the vulkan integration were done it would be feasible to implement. https://github.com/godotengine/godot/pull/13354\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSync the scene editor view with the game play in order to see objects moving / interacting / being deleted / etc in the editor to let the dev inspect if everything is working fine\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo script can do this\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe scene editor is core to the engine",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1864/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1862",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1862/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1862/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1862/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1862",
    "id": 746952168,
    "node_id": "MDU6SXNzdWU3NDY5NTIxNjg=",
    "number": 1862,
    "title": "Use automatic angle-based smoothing for CSG faces instead of manual per-node smoothing",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-19T21:51:28Z",
    "updated_at": "2020-11-20T12:31:29Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nDesigning a nice-looking CSG prototype takes longer than it should, since you have to manually mark all curved surfaces as smooth to get a good appearance.\r\n\r\nOn top of that, marking CSG nodes as smooth is an all-or-nothing process. For example, you can't have only certain polygons of a CSGPolygon be marked as smooth.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAutomatic smoothing based on angle could be used to smooth out curved surfaces automatically. This way, the user would never have to fiddle with smoothness settings while designing their level.\r\n\r\nIn Blender, this is known as Auto Smooth (make sure to mark the whole object as smooth too):\r\n\r\n![image](https://user-images.githubusercontent.com/180032/99725310-36b1c800-2ab5-11eb-9449-3417f32613b5.png)\r\n\r\nAlso, most level design tools provide this feature in an automatic manner (such as Cube 2's map editor):\r\n\r\n`lerpangle 44` (the default):\r\n\r\n![image](https://user-images.githubusercontent.com/180032/99728269-7b3f6280-2ab9-11eb-998b-f89b80d08711.png)\r\n\r\n`lerpangle 89`:\r\n\r\n![image](https://user-images.githubusercontent.com/180032/99728273-7d092600-2ab9-11eb-8921-26dda3f12c4e.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n- Add a project setting that controls the maximum CSG smoothing angle (between 0 and 180). The default value should probably be 30 (the same as Blender). If it's set to 0, automatic face smoothing is disabled and all faces will be considered sharp. If it's set to 180, automatic face smoothing is always enabled. (This can be useful to improve performance when only using unshaded meshes for CSG.)\r\n  - If the angle limit is 0 or 180, the smoothing calculation process is skipped since no faces (or all faces) will be considered smooth.\r\n- Remove the Smooth Faces property on individual CSG nodes.\r\n\r\nThis angle calculation will likely slow down CSG mesh generation a bit. If you use CSG in a real-time scenario (which isn't recommended), you can still set the maximum angle to 0 to skip the automatic smoothing calculations.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core CSG functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1862/reactions",
      "total_count": 9,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1861",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1861/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1861/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1861/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1861",
    "id": 746749956,
    "node_id": "MDU6SXNzdWU3NDY3NDk5NTY=",
    "number": 1861,
    "title": "Add static Physics class for easy physics calculations",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-11-19T16:47:27Z",
    "updated_at": "2020-11-19T18:48:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Shooter\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRaycasting and Shapecasting is difficult to understand even with documentation and is inconsistent on how its used \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest something similar to Unity's Physics class that allows us to easily calculate physics and collisions.\r\n\r\nI would suggest separating them into two classes. Physics2D, and Physics3D with the following methods..\r\n- `test(shape, pos, excludes, collision_mask)->collision`\r\n- `cast_to(shape, from,  to, excludes, collision_mask)->collision`\r\n- `cast_towards(shape, from,  angle, excludes, collision_mask)->collision`\r\n- `snap(physics_params, velocity, up, excludes, collision_mask)->new velocity`\r\n- `move(physics_params, velocity, up, excludes, collision_mask)->new velocity`\r\n\r\nshapes can be a point and physics_params would determine whether or not something bounces, floats, stops, or slides\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would work something like this...\r\n```\r\nextends KinematicBody\r\n\r\nfunc _physics_process():\r\n    var box = BoxShape.new()\r\n    box.extents = Vector3(0.5, 0.5, 0.5)\r\n    var collision = Physics3D.cast(box, translation, translation+(Vector3.DOWN*gravity), [self], collision_mask)\r\n    \r\n    #uses Physics3D.move internally physics paramaters would be documented for slide, bounce and collide\r\n    velocity = move_and_slide(velocity, collision.normal)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPeople would use this so much more then the current method due to how easy it is to understand and use.\r\nI would even say it would be worth getting rid of the current method\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts more clear on how to use, takes less code, and can be just as flexible, the only difference is implementation\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1861/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1860",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1860/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1860/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1860/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1860",
    "id": 746387715,
    "node_id": "MDU6SXNzdWU3NDYzODc3MTU=",
    "number": 1860,
    "title": "Add `typeofname()` to get a name of a type rather than its enumerated value",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-19T09:10:28Z",
    "updated_at": "2020-11-20T01:15:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nAny project will do currently tic tac toe game. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nif you want to find out what type variable you have you can use typeof() method but it returns enum number. \r\n\r\n    var my_bool: bool = true\r\n    print(typeof(my_bool) # prints 1\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n    I would like to be able to do this instead\r\n\r\n    var my_bool: bool = true\r\n    print(typeofname(my_bool) # prints \"bool\"\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNo idea how it would work with code in c++ \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nUsed fairly often and likely there is a work around but in my opinion 99% when user uses typeof() they want to know a name of type not it  enumerated value\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAdds function to core functionality. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1860/reactions",
      "total_count": 10,
      "+1": 8,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1859",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1859/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1859/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1859/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1859",
    "id": 746161555,
    "node_id": "MDU6SXNzdWU3NDYxNjE1NTU=",
    "number": 1859,
    "title": "Expose the internal ScrollContainer inside PopupMenu",
    "user": {
      "login": "Haledire",
      "id": 164616,
      "node_id": "MDQ6VXNlcjE2NDYxNg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/164616?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Haledire",
      "html_url": "https://github.com/Haledire",
      "followers_url": "https://api.github.com/users/Haledire/followers",
      "following_url": "https://api.github.com/users/Haledire/following{/other_user}",
      "gists_url": "https://api.github.com/users/Haledire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Haledire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Haledire/subscriptions",
      "organizations_url": "https://api.github.com/users/Haledire/orgs",
      "repos_url": "https://api.github.com/users/Haledire/repos",
      "events_url": "https://api.github.com/users/Haledire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Haledire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-11-19T01:07:59Z",
    "updated_at": "2020-11-19T19:24:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on an application which implements filtering a list of images and uses an OptionButton (which internally uses a PopupMenu) to select a filter.  The project has so far required the limitation of giving focus to only a certain control type.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWith larger filter lists, I've noticed that OptionButton does not expose it's internal ScrollContainer scroll bars, either visually or via API calls or node hierarchy like most other nodes.  This limits the options of traversing the list to focus neighbors or firing mouse scroll wheel events.  The first situation is something I'm trying to avoid due to the situation in my code (I've already had to implement my own hacky buttons because the basic button implementation doesn't fit the situation, or I don't know how to work off of BaseButton to setup a good custom button that fits).  In the second case - I'm trying to build the application in assumption that people may not be working with a mouse with a scroll wheel (ie: if I were to set this application up for android - obviously you don't have a mouse much less a scroll wheel).\r\n\r\nI've been using[ this script](https://github.com/godotengine/godot/issues/21137#issuecomment-474598933) for scrollcontainers that I was hoping to apply to this situation, but have no access to the range from the PopupMenu's internal ScrollContainer to implement it in the slightest (I can't even attempt to share the scrollbar with another one to rig the code up in a custom way).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust asking for the ScrollContainer or at the very least access to the scrollbars to hook up the `Range` in some way to to open up more interaction options to work with PopupMenus.  At current - I can't access the bars via code exposing the range nor traverse the node hierarchy to access any of these hidden internal nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n With access to the ScrollBar hidden inside the internal code of the node, it would be as simple a matter as doing `$OptionButton.get_v_scrollbar().share($MyScrollbar)` to implement my own scrollbar visually, and could implement the code above to the PopupMenu to add the ability to drag the list instead of drag and hope to blindly select an option off-screen somewhere or somehow move the list repeatedly shifting the focus target yet staying inside the PopupMenu (which as I've stated - works against how my application is currently built, but that could be an ignorance on my part on how I'm buliding my application).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTo implement this myself, I would have to entirely re-implement my own OptionButton from the ground up repeating all of the code necessary to add items, define their metadata, handling the styleboxes, the theme, literally the entire code of the OptionButton / PopupMenu re-written in GDScript just for the scrollbar range property.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI have doubts on this being something necessary to core, but it doesn't sound as if it would be difficult to simply expose access to the scroll range property of the PopupMenu unless my ignorance of C++ is blinding me to the difficulty this poses.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1858",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1858/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1858/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1858/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1858",
    "id": 746085573,
    "node_id": "MDU6SXNzdWU3NDYwODU1NzM=",
    "number": 1858,
    "title": "Generate (core) Editor widgets from tscn files",
    "user": {
      "login": "MarianoGnu",
      "id": 1776044,
      "node_id": "MDQ6VXNlcjE3NzYwNDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1776044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarianoGnu",
      "html_url": "https://github.com/MarianoGnu",
      "followers_url": "https://api.github.com/users/MarianoGnu/followers",
      "following_url": "https://api.github.com/users/MarianoGnu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarianoGnu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarianoGnu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarianoGnu/subscriptions",
      "organizations_url": "https://api.github.com/users/MarianoGnu/orgs",
      "repos_url": "https://api.github.com/users/MarianoGnu/repos",
      "events_url": "https://api.github.com/users/MarianoGnu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarianoGnu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-18T22:42:04Z",
    "updated_at": "2020-12-17T03:57:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen creating a Plugin or dialog for Godot itself (in a module or in core) we tipically create all the controls needed in the Constructor of this class and add childs to it one by one. This means we have to rebuild the project and play it to see if it looks like we want, and even then is a little hard to customize, node names are dinamically generated so we need to make sure to store every node we will need is stored in a local variable, this results on longer cpp files wich looks ugly or bloated to newcomers.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhat i propose is something similar to what Qt does with UI\r\nInstead of making the EditorWidget class from zero, create a `editor_plugin.tscn` file using Godot, and store it somewhere inside the Godot sources. Then scons runs a process to parse this tscn file and create a `editor_plugin.gen.hpp` file, which is an autogenerated base class which can be imported by your class. This allows to have clean hierarchies and very fast prototyping of editors for plugins, not only for submodules but also for core elements like inspector plugins, Docks, etc.\r\n**scons should convert any tscn file found to it´s gen version before start building**\r\n\r\nThe generated `editor_plugin.gen.hpp` will `#include \"scene_types.h\"`, a unique prebuilt header with all Class headers on it (we already do this inside `register_scene_types.cpp`, the idea is have those includes inside a header, very much what Qt does)\r\n\r\nThen this newly generated class do the following steps in constructor:\r\n- create internal resources. **IMPORTANT: only builting resources should be admited, ie ButtonGroup, external resources like scripts or textures should not be allowed**\r\n- Creates all nodes and add it to the right parent in the scene\r\n- set non default property on each node, this includes resources\r\n- connect signals defined in the tscn file (again scripts are not allowed, this only supports builtin signals and methods)\r\n\r\nThe generated class name in `editor_plugin.gen.hpp` will have the format `Editor[RootNodeName]Gen`\r\nThen we inherit this class in our new Editor Plugin\r\n```\r\n#include \"editor_plugin.gen.hpp\"\r\nclass EditorPluginName: public EditorPluginNameGen {\r\n}\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n**plugin.tscn**\r\n![image](https://user-images.githubusercontent.com/1776044/99594695-4d332300-29d2-11eb-8e3d-a28b03bfb00a.png)\r\n\r\n```\r\n[gd_scene load_steps=2 format=2]\r\n\r\n[sub_resource type=\"StyleBoxFlat\" id=1]\r\n\r\n[node name=\"Plugin\" type=\"VSplitContainer\"]\r\nanchor_right = 1.0\r\nanchor_bottom = 1.0\r\nsplit_offset = 100\r\n__meta__ = {\r\n\"_edit_use_anchors_\": false\r\n}\r\n\r\n[node name=\"item_list\" type=\"ItemList\" parent=\".\"]\r\nmargin_right = 1024.0\r\nmargin_bottom = 100.0\r\n\r\n[node name=\"panel\" type=\"Panel\" parent=\".\"]\r\nmargin_top = 112.0\r\nmargin_right = 1024.0\r\nmargin_bottom = 600.0\r\ncustom_styles/panel = SubResource( 1 )\r\n[connection signal=\"item_activated\" from=\"item_list\" to=\"panel\" method=\"update\"]\r\n```\r\n\r\n**plugin.gen.hpp**\r\n```\r\n/* THIS FILE IS AUTOGENERATED, DO NOT MODIFY IT */\r\n#ifndef __EDITOR_PLUGIN_GEN_H__\r\n#define __EDITOR_PLUGIN_GEN_H__\r\n#include \"scene/scene_types.h\"\r\n\r\nclass EditorPluginGen: public VSplitContainer {\r\n\tGDCLASS(EditorPluginGen, VSplitContainer);\r\n\r\npublic:\r\n\tEditorPluginGen() {\r\n\t\t//[gd_scene load_steps=2 format=2]\r\n\t\t//ignored\r\n\r\n\t\t//[sub_resource type=\"StyleBoxFlat\" id=1]\r\n\t\tRef<StyleBoxFlat> res_1 = Ref<StyleBoxFlat>(memnew(StyleBoxFlat));\r\n\r\n\t\t//[node name=\"Plugin\" type=\"VSplitContainer\"]\r\n\t\t// no parent no node is created, [current_node] set to 'this', set node name\r\n\t\tthis->set_name(\"Plugin\");\r\n/*\r\n\t\tanchor_right = 1.0\r\n\t\tanchor_bottom = 1.0\r\n\t\tsplit_offset = 100\r\n\t\t__meta__ = {\r\n\t\t\"_edit_use_anchors_\": false\r\n\t\t}\r\n*/\r\n\t\tthis->set(\"anchor_right\", 1.0);\r\n\t\tthis->set(\"anchor_bottom\", 1.0);\r\n\t\tthis->set(\"split_offset\", 100);\r\n\t\tthis->set_meta(\"_edit_use_anchors_\", false)\r\n\r\n\t\t//[node name=\"item_list\" type=\"ItemList\" parent=\".\"]\r\n\t\t// create node, variable name is node path with '_' instead of '/', set parent, [current_node] is set to 'item_list', set name\r\n\t\tItemList *item_list = memnew(ItemList);\r\n\t\tget_node(\".\")->add_child(item_list);\r\n\t\titem_list->set_name(\"item_list\");\r\n/*\r\n\t\tmargin_right = 1024.0\r\n\t\tmargin_bottom = 100.0\r\n*/\r\n\t\titem_list->set(\"margin_right\", 1024.0);\r\n\t\titem_list->set(\"margin_bottom\", 100.0);\r\n\r\n\r\n\t\t//[node name=\"panel\" type=\"Panel\" parent=\".\"]\r\n\t\t// create node, variable name is node path with '_' instead of '/', set parent, [current_node] is set to 'item_list', set name\r\n\t\tPanel *panel = memnew(Panel);\r\n\t\tget_node(\".\")->add_child(panel);\r\n\t\tpanel->set_name(\"panel\");\r\n/*\r\n\t\tmargin_top = 112.0\r\n\t\tmargin_right = 1024.0\r\n\t\tmargin_bottom = 600.0\r\n\t\tcustom_styles/panel = SubResource( 1 )\r\n*/\r\n\t\tpanel->set(\"margin_top\", 112.0);\r\n\t\tpanel->set(\"margin_right\", 1024.0);\r\n\t\tpanel->set(\"margin_bottom\", 600.0);\r\n\t\tpanel->set(\"custom_styles/panel\", res_1);\r\n\r\n\r\n\t\t//[connection signal=\"item_activated\" from=\"item_list\" to=\"panel\" method=\"update\"]\r\n\t\titem_list->connect(\"item_activated\", panel, \"update\");\r\n\t}\r\n\r\n}\r\n#endif // __EDITOR_PLUGIN_GEN_H__\r\n```\r\n\r\n**my_plugin.h**\r\n```\r\n#ifndef _MY_PLUGIN_H_\r\n#define _MY_PLUGIN_H_\r\n#include \"scene/scene_types.h\"\r\n\r\nclass MyPlugin: public EditorPluginGen{\r\n\tGDCLASS(MyPlugin, EditorPluginGen);\r\nprivate:\r\n\tvoid draw_selection();\r\npublic:\r\n\tMyPlugin() {\r\n\t\tget_node(\"panel\")->connect(\"draw\", this, \"draw_selection\");\r\n\t}\r\n}\r\n#endif // _MY_PLUGIN_H_\r\n\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is meant to improve the workflow of programmers working onthe engine itself, also will allow people to more easily create editor plugins using modules\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is meant to improve the workflow of programmers  working on the engine itself, also will allow people to more easily create editor plugins using modules\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1858/reactions",
      "total_count": 14,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1855",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1855/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1855/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1855/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1855",
    "id": 745137750,
    "node_id": "MDU6SXNzdWU3NDUxMzc3NTA=",
    "number": 1855,
    "title": "Add option to opt in to bone name sanitization in GLTF importer",
    "user": {
      "login": "geneishouko",
      "id": 38262047,
      "node_id": "MDQ6VXNlcjM4MjYyMDQ3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/38262047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/geneishouko",
      "html_url": "https://github.com/geneishouko",
      "followers_url": "https://api.github.com/users/geneishouko/followers",
      "following_url": "https://api.github.com/users/geneishouko/following{/other_user}",
      "gists_url": "https://api.github.com/users/geneishouko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/geneishouko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/geneishouko/subscriptions",
      "organizations_url": "https://api.github.com/users/geneishouko/orgs",
      "repos_url": "https://api.github.com/users/geneishouko/repos",
      "events_url": "https://api.github.com/users/geneishouko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/geneishouko/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-17T22:34:21Z",
    "updated_at": "2020-11-17T22:46:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIt's a 3D character creator game with skeletal body customization and wearables\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWe rely on accessing the character skeleton programmatically to customize the body but the skeleton bones names have been changed from what was originally exported as GLTF from Blender. Our original bones use the \"a01_S_BoneName_01\" naming pattern but it is changed to a snake_case form on import by the GLTF importer to something like \"a01_s_bone_name_1\" thus making access to bones unpredictable.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhile the bone name sanitization process the GLTF importer does surely solves a corner case, it shouldn't be applied to every GLTF document. Skipping the renaming of bones lets users know their bone names remain unchanged and allows them to keep their preferred naming pattern. An import option should be added to the importer to opt in to this feature.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA boolean option named, for example, \"verbatim names\" is added to the importer. If enabled, the bone name sanitization is skipped on import/re-import.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe features discussed here occur during the import process and can't be worked around with a script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a change of behavior proposal for a core module.\r\n\r\nOriginally reported as godotengine/godot#43482",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1854",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1854/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1854/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1854/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1854",
    "id": 745097492,
    "node_id": "MDU6SXNzdWU3NDUwOTc0OTI=",
    "number": 1854,
    "title": "Make it easier to know the path of an asset",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-11-17T21:22:38Z",
    "updated_at": "2020-11-17T21:47:09Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nPaths in Godot are truncated and requires the use of screenshotting tool tips or saving resource addresses in a text file.\r\n\r\nAlmost none of the file path fields show the full path name. This cause annoyance and obstacle to Godot Engine content creation.\r\n\r\nWhen you go to an albedo texture, what's the fastest way to get its path that's inside of a spatial material.\r\n\r\nYou need to edit on the resource and then go to its path variable which is obscured. One needs to hover over the resource or copy the path.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n1. Allow tool-tip display time to be variable, so a content developer can have them show immediately after mousing over.\r\n1. Show the file path for a selected asset somewhere in the UI at all times\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nProposal 1:\r\n\r\nAdjust the tool-tip display time as an editor variable\r\n\r\nProposal 2:\r\n\r\nFind a good spot for the file path display. Perhaps in the bottom bar and always display the path.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUsability problems are harder to solve in script\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nProbably need to modify c++.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1853",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1853/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1853/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1853/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1853",
    "id": 745039357,
    "node_id": "MDU6SXNzdWU3NDUwMzkzNTc=",
    "number": 1853,
    "title": "Add `_on_Input_action(action)` signal",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-11-17T19:50:16Z",
    "updated_at": "2020-12-15T13:17:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nApplies to literally any project with Inputs.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHere, I admit it: I really hate working with `_input(event)`. It is very cumbersome to filter out the event you actually care about and I really have a hard time remembering the syntax and scancode constants for each and every input. I have to look up the API references nearly every time and always end up testing for actions. Imput Map actions in _process work fine, but the actual problem is that just like in _input, every Input has to be tested against every action:\r\n\r\nif event.is_action_pressed(\"action\"):\r\nif Input.is_action_just_pressed(\"action\"):\r\n\r\nThis results in either having to test against an endless list of every possible action defined in the Input Map\r\n```swift\r\nif Input.is_action_just_pressed(\"action1\"):\r\n\tdo(\"action1\")\r\nif Input.is_action_just_pressed(\"action2\"):\r\n\tdo(\"action2\")\r\nif Input.is_action_just_pressed(\"action3\"):\r\n\tdo(\"action3\")\r\n...\r\n```\r\nor having to loop through all possible actions whenever there is an action press:\r\n```swift\r\nvar possible_actions = [\"action1\", \"action2\", \"action3\", ...]\r\n\r\nfunc _input(event):\r\n\tif event is SomeInputEventType and event.pressed:\r\n\t\tfor i in possible_actions.size():\r\n\t\t\tif event.is_action_pressed(possible_actions[i]):\r\n\t\t\t\tdo(i)\r\n```\r\n\r\nWhen I first started out with Godot, I expected there something like a collision signal to be emitted when pressing an Input. Now, more than two years later working with Godot Inputs every day, I still have not figured out how to do that and I stopped believing it's just my limited expertise.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhenever the user triggers one of the events in the Input Map the corresponding **input_action(action)** signal is emitted:\r\n\r\nBesides being a lot more intuitive to work with compared to `_input(event)`, this would allow us to write action agnostic code, just like it is already possible with collision events (`_on_body_entered(body)` for example)\r\n```swift\r\nfunc _on_input_action(action):\r\n\t$Animationplayer.play(action)\r\n\tif input_buffer.find(action):\r\n\t\tdo(action)\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nsee above\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't be worked around without using inefficient loops and user unfriendly _input(event) or mountains of repetitious code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nInput is an already existing core class.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1853/reactions",
      "total_count": 8,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1852",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1852/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1852/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1852/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1852",
    "id": 744856646,
    "node_id": "MDU6SXNzdWU3NDQ4NTY2NDY=",
    "number": 1852,
    "title": "Add a Script -> JavaScript interface to improve calling JavaScript code from Godot",
    "user": {
      "login": "Faless",
      "id": 1687918,
      "node_id": "MDQ6VXNlcjE2ODc5MTg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1687918?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Faless",
      "html_url": "https://github.com/Faless",
      "followers_url": "https://api.github.com/users/Faless/followers",
      "following_url": "https://api.github.com/users/Faless/following{/other_user}",
      "gists_url": "https://api.github.com/users/Faless/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Faless/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Faless/subscriptions",
      "organizations_url": "https://api.github.com/users/Faless/orgs",
      "repos_url": "https://api.github.com/users/Faless/repos",
      "events_url": "https://api.github.com/users/Faless/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Faless/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-11-17T15:48:49Z",
    "updated_at": "2020-12-21T07:54:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nCurrently the only way to communicate with JavaScript code from Godot in HTML5 exports is by using `eval`, which, beside performing poorly, is also very limited.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is to expose an interface in the [`JavaScript`](https://docs.godotengine.org/en/stable/classes/class_javascript.html) singleton that allows to call JS functions and get JS properties in a Godot-y way.\r\n\r\nIdeally, the API should support almost all possible interactions with JavaScript, this include, getting/setting properties, calling functions, and handling callbacks and promises.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea is to expose a new `get_interface` method in the `JavaScript` singleton, which will return a `JavaScriptObject`.\r\n\r\nThe \"interface\" will be registered via JavaScript (e.g. the custom HTML include):\r\n```javascript\r\nengine.addInterface('NAME', js_interface); // interface is a JS object\r\n```\r\n\r\nYou can create your own interface, or expose an external library (e.g. [d3](https://d3js.org/)):\r\n```html\r\n<script src=\"https://d3js.org/d3.v6.min.js\"></script>\r\n<script>engine.addInterface(\"d3\", d3)</script>\r\n```\r\n\r\nThe interface will then be available to scripting via:\r\n```gdscript\r\nvar interface = JavaScript.get_interface(name) # a JavaScriptObject reference.\r\n```\r\n\r\nThis is the proposed interface for `JavaScriptObject`:\r\n```gdscript\r\nclass JavaScriptObject:\r\n\tVariant as_variant() # Returns object as a variant (see conversion table below).\r\n\tVariant call(method, arg1, arg2, ...) # Call a method, the result is always returned as a JavaScriptObject\r\n\tVariant get(prop, default) # Returns a property, as another JavaScriptObject\r\n        void set(prop, value) # Set a property to given value\r\n```\r\n\r\nConversion Table\r\n---\r\nThis is the minimal types conversion table between Godot and JavaScript:\r\n\r\n```\r\nGodot - JavaScript\r\nbool <-> bool\r\nint32_t <-> number (when Number.isInteger())\r\nreal_t <-> number (otherwise)\r\nString <-> String (this allocates memory)\r\n```\r\n\r\nSome more specialized types (always copy for safety):\r\n```\r\nPackedByteArray <-> Uint8Array\r\n// PoolByteArray <-> Uint8Array // 3.x\r\nPackedInt32Array <-> Int32Array\r\nPackedInt64Array <-> BigInt64Array\r\n// PoolIntArray <-> Int32Array // 3.x (may truncate)\r\nPackedFloat32Array <-> Float32Array\r\nPackedFloat64Array <-> Float64Array\r\n// PoolRealArray <-> Float32Array // 3.x\r\n```\r\n\r\nPromises & Callbacks\r\n---\r\nPassing callbacks to a function, or chaining asynchronous code, is a very common pattern in JavaScript, this is sadly not trivial to integrate with Godot due to scripts and application lifecycle.\r\nFollowing, is a proposed addition to the aforementioned API that would enable taking advantages of callbacks/promises but requiring a bit more consciousness during its usage.\r\nThe idea is to add a method to the `JavaScript` singleton to bind a function reference:\r\n```gdscript\r\nvar fref = JavaScript.create_function_ref(callable) # or (object, method) in 3.x. Returns a JavaScriptObject.\r\n```\r\nAnd 2 helper methods to the `JavaScriptObject` class:\r\n```\r\nbool is_promise();\r\nbool is_function();\r\n```\r\n\r\nSo you can interact with functions that requires callbacks this way:\r\n```gdscript\r\n# You must keep a reference of this yourself.\r\nvar callback = JavaScript.create_function_ref(Callable(self, \"_compute_color\"))\r\n\r\nfunc _ready():\r\n\t# Assumed registered in head\r\n\tvar d3 = JavaScript.get_interface(\"d3\")\r\n\td3.call(\"selectAll\", \"p\").call(\"style\", \"color\", callback)\r\n```\r\n\r\nAnd potentially, with promises this way:\r\n```gdscript\r\nvar callback = JavaScript.create_function_ref(Callable(self, \"_on_response\"))\r\nfunc _ready():\r\n\tvar axios = JavaScript.get_interface(\"axios\") # Assumed registered in head\r\n\tvar promise = axios.call(\"get\", \"/user?ID=12345\").call(\"then\", callback)\r\n```\r\n\r\nThis approach at promises could prove risky if we end up running the engine outside of the main thread in the future, due to the asynchronous nature of the calls, where a promise may throw an error or be rejected before a `catch` could be called.\r\nDue to this scenario, and the possibility that, in any case, a called function might throw an error and break the script, my suggestion is to always wrap the code in try/catch blocks and adding an `error` property to `JavaScriptObject` that is `!= OK` when the catch has been evaluated. This is still suboptimal, but the best I came up with.\r\n\r\n(Formalizes) Fixes: #286\r\n(Supersedes) Closes: #1723",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1852/reactions",
      "total_count": 45,
      "+1": 21,
      "-1": 0,
      "laugh": 0,
      "hooray": 8,
      "confused": 0,
      "heart": 8,
      "rocket": 8,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1851",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1851/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1851/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1851/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1851",
    "id": 744581977,
    "node_id": "MDU6SXNzdWU3NDQ1ODE5Nzc=",
    "number": 1851,
    "title": "Add engine scale parameters to specify the scales of 3D units",
    "user": {
      "login": "madmiraal",
      "id": 9253928,
      "node_id": "MDQ6VXNlcjkyNTM5Mjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9253928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madmiraal",
      "html_url": "https://github.com/madmiraal",
      "followers_url": "https://api.github.com/users/madmiraal/followers",
      "following_url": "https://api.github.com/users/madmiraal/following{/other_user}",
      "gists_url": "https://api.github.com/users/madmiraal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madmiraal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madmiraal/subscriptions",
      "organizations_url": "https://api.github.com/users/madmiraal/orgs",
      "repos_url": "https://api.github.com/users/madmiraal/repos",
      "events_url": "https://api.github.com/users/madmiraal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madmiraal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862117,
        "node_id": "MDU6TGFiZWwxNjk3ODYyMTE3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:xr",
        "name": "topic:xr",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-11-17T09:52:40Z",
    "updated_at": "2020-12-12T16:32:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWorking with multiple projects at different scales. See discussions at [#43547](https://github.com/godotengine/godot/pull/43547), [#41140](https://github.com/godotengine/godot/issues/41140), [#42769](https://github.com/godotengine/godot/pull/42769#issuecomment-710308007), #1617, and others.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe engine operates at a single scale which works well when working with objects that are sized around the unit scale (think metres). However, when working with, for example, VR, the objects are sized closer to the 1/100th of a unit (think centimetres). And, when working with, for example, a space simulation, the objects can be sized in the 1000s (think kilometres) or even more.\r\n\r\nThe main problem is the physics engine always works to the same level of precision. In 3D, for example, it has a default collision margin of 0.04 (think 4cm) and a [minimum](https://github.com/godotengine/godot/pull/23472#issuecomment-436377750) of 0.001 (think 1mm) and a maximum of 10 (think 10m). This scale is generally too big when working with VR and way to small when working with space simulations. A frequently touted suggestion is to change the scale of the assets, but this doesn't work (see discussion in [#43547](https://github.com/godotengine/godot/pull/43547), for example) and is shifting a problem with the physics engine onto the asset designers, who should be creating assets at the \"right\" scale (Blender assumes one unit is 1m, but other tools make different assumptions).\r\n\r\nSimilarly, the camera always works to the same level of precision; CSG shapes work to the same level of precision, etc.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHave an engine scale setting. This will enable different games to set the scale of the engine according to their needs.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTwo project settings to define the scale parameters would be required:\r\n1. Define what one unit represents within the engine. All settings are scaled by this unit representation. For example, when setting the scale to 1 = 1cm, the physics margin of 0.04, will be viewed as 0.04cm. Similarly, the camera and editor view will scale meshes so that z-limits, offsets, etc. work at the scale defined.\r\n2. Define the scale of the assets. This scale would only need to be changed if assets are not designed with the Blender assumption of 1 unit is 1m.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's the inability to workaround this issue that is driving this proposal.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1851/reactions",
      "total_count": 10,
      "+1": 8,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
