[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/87",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/87/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/87/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/87/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/87",
    "id": 496255623,
    "node_id": "MDU6SXNzdWU0OTYyNTU2MjM=",
    "number": 87,
    "title": "Make 3x3 auto-tiles override",
    "user": {
      "login": "Alzter",
      "id": 22513909,
      "node_id": "MDQ6VXNlcjIyNTEzOTA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22513909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Alzter",
      "html_url": "https://github.com/Alzter",
      "followers_url": "https://api.github.com/users/Alzter/followers",
      "following_url": "https://api.github.com/users/Alzter/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alzter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Alzter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alzter/subscriptions",
      "organizations_url": "https://api.github.com/users/Alzter/orgs",
      "repos_url": "https://api.github.com/users/Alzter/repos",
      "events_url": "https://api.github.com/users/Alzter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Alzter/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-20T09:46:37Z",
    "updated_at": "2019-11-25T22:05:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a 2D platformer game [(Link)](https://github.com/Alzter/TuxBuilder) that will let players play levels and create them in a custom level editor. I am trying to implement slope tiles in this project by making them as an auto-tile that replaces corners with slopes, although I have some problems with them.\r\n\r\n**Describe how this feature / enhancement will help your project:** I need slopes to transition from the ground to the corner tiles but I can't do that using a 3x3 minimal auto-tile. I could use a 3x3 instead but that would require 512 combinations of tiles, most of them I wouldn't even need aside from a few corner transition tiles. So what I'm proposing is the ability to override the 3x3 minimal autotile if you use a specific bitmask. I find it a bit difficult to explain so I'll provide a mock-up below.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/22513909/65317517-56164200-dbdf-11e9-912e-73798f2b66c7.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have no experience coding for Godot but my idea is to have tiles with a specific bitmask over-ride the behaviour of 3x3 minimal.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure how to change the properties of auto-tiles through GDscript and it seems like it would be very complicated.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it could help for specific use cases in auto-tiles for things like transitions.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/87/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/86",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/86/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/86/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/86/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/86",
    "id": 496074206,
    "node_id": "MDU6SXNzdWU0OTYwNzQyMDY=",
    "number": 86,
    "title": "\"Glue Joint\" or \"Fixed Joint\" (for both 2D and 3D)",
    "user": {
      "login": "greenfox1505",
      "id": 1642297,
      "node_id": "MDQ6VXNlcjE2NDIyOTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenfox1505",
      "html_url": "https://github.com/greenfox1505",
      "followers_url": "https://api.github.com/users/greenfox1505/followers",
      "following_url": "https://api.github.com/users/greenfox1505/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenfox1505/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenfox1505/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenfox1505/subscriptions",
      "organizations_url": "https://api.github.com/users/greenfox1505/orgs",
      "repos_url": "https://api.github.com/users/greenfox1505/repos",
      "events_url": "https://api.github.com/users/greenfox1505/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenfox1505/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-19T23:42:37Z",
    "updated_at": "2020-03-04T21:45:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** It is a 2D Physics Game. I have a \"background\" layer and a \"foreground\" layer. Most objects in my game have different collision shapes in each layer. For example, the player almost exclusively exists in the Foreground, however large objects have both Foreground and Background elements. Foreground elements are not passable by the player, but background elements cannot intersect background elements from other objects.\r\n\r\nMy solution as it stands, I have two independent RigidBodies2D with their own collision shapes and two PinJoint2D with two different positions attached to both nodes. It is quite buggy in edge cases of large objects and strong forces.\r\n\r\n**Describe how this feature / enhancement will help your project:** A single joint that locks position and rotation relative to each other. For my game, I need a 2D version, however Godot also lacks a 3D version.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:** Same as a PinJoint.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** I believe this is just a PinJoint with a relative rotation locking?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** It can be approximated by creating two PinJoint2D with different positions or three PinJoint (3d) with different translations. However, a single \"joint\" is a cleaner, hopefully less buggy, approach.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It's a low level feature that likely should be part of the physics engine.\r\n\r\nUnity calls this a \"Fixed Joint\", so maybe that is the naming scheme we should follow, but \"glue\" seemed more descriptive to me.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/86/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/84",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/84/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/84/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/84/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/84",
    "id": 496060806,
    "node_id": "MDU6SXNzdWU0OTYwNjA4MDY=",
    "number": 84,
    "title": "Make audio loop import settings consistent by using samples everywhere (instead of seconds)",
    "user": {
      "login": "davthedev",
      "id": 26961646,
      "node_id": "MDQ6VXNlcjI2OTYxNjQ2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26961646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davthedev",
      "html_url": "https://github.com/davthedev",
      "followers_url": "https://api.github.com/users/davthedev/followers",
      "following_url": "https://api.github.com/users/davthedev/following{/other_user}",
      "gists_url": "https://api.github.com/users/davthedev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davthedev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davthedev/subscriptions",
      "organizations_url": "https://api.github.com/users/davthedev/orgs",
      "repos_url": "https://api.github.com/users/davthedev/repos",
      "events_url": "https://api.github.com/users/davthedev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davthedev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-19T22:48:09Z",
    "updated_at": "2020-08-17T18:46:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game that comprises music and sound in both OGG and WAV formats. Both have looping sections.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nLess guesswork of the units used when adjusting audio loops.\r\n\r\nIn the current situation, there are two different styles for setting audio loops on files. It depends on the format : WAV or OGG. The units used are not consistent.\r\n\r\n- For an OGG file, the loop offset is set during import. The unit seems to correspond to seconds.\r\n\r\n- For a WAV file, the loop offset can be set as both start and end points. The units seems to be samples count i.e. 44100 per one second of audio if it is a 44100hz recording.\r\n\r\nIn both cases, there is no mention of the unit used next to the input field.\r\n\r\n\r\nFor consistency all over the engine, I suggest choosing a consistent unit for all audio resources in Godot and sticking to it. For instance, define that time units in seconds instead of samples should be the standard and convert the WAV loop settings to it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nMentioning the unit used in front of the input field. For instance, a little \"sec\" or \"s\" for seconds.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as it is linked to audio resources settings\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nA significant user experience improvement for all audio import / fine-tuning operations. Useful for all games that use audio.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/84/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/82",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/82/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/82/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/82/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/82",
    "id": 495994398,
    "node_id": "MDU6SXNzdWU0OTU5OTQzOTg=",
    "number": 82,
    "title": "Add File System dock side-by-side visualization",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-19T19:49:55Z",
    "updated_at": "2019-11-25T22:05:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D platformer, 2D top view, ect. but applies to every project.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nA new mode, featuring a side-by-side view of the File System dock would allow for much more space being utilized effectively by the dock itself in every type of project if a user decides to give the dock more width than default, making it possible to display two full-height columns of folders and files.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nUnity already does this way:\r\n![immagine](https://user-images.githubusercontent.com/19392104/65275720-877f0700-db26-11e9-97cd-7265f973c786.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI guess utilizing a HSplitContainer instead of a VSplitContainer and moving other UI accordingly could be enough.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, this is one of the editor's main features.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is an editor improvement that potentially benefits every project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/82/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/81",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/81/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/81/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/81/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/81",
    "id": 495526363,
    "node_id": "MDU6SXNzdWU0OTU1MjYzNjM=",
    "number": 81,
    "title": "Allow overriding how motion is projected along surfaces in `KinematicBody.move_and_slide()`",
    "user": {
      "login": "BanchouBoo",
      "id": 32691832,
      "node_id": "MDQ6VXNlcjMyNjkxODMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/32691832?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BanchouBoo",
      "html_url": "https://github.com/BanchouBoo",
      "followers_url": "https://api.github.com/users/BanchouBoo/followers",
      "following_url": "https://api.github.com/users/BanchouBoo/following{/other_user}",
      "gists_url": "https://api.github.com/users/BanchouBoo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BanchouBoo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BanchouBoo/subscriptions",
      "organizations_url": "https://api.github.com/users/BanchouBoo/orgs",
      "repos_url": "https://api.github.com/users/BanchouBoo/repos",
      "events_url": "https://api.github.com/users/BanchouBoo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BanchouBoo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-09-19T01:28:20Z",
    "updated_at": "2020-08-29T13:51:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** I am currently working (or more accurately I was, it's on a bit of a hiatus because of some other issues in Bullet physics that I'd rather be fixed before working further) on a 3D platformer. In platformers or any other kind of game with complex movement systems, having as much control as possible over movement as a programmer is vital to crafting a good experience, which is difficult to do with the current built in movement options for kinematic bodies.\r\n\r\n**Describe how this feature / enhancement will help your project:** In implementing this proposal, the out-of-box utility and flexibility of `move_and_slide()` and kinematic bodies in general is greatly enhanced without breaking anything in how it's currently implemented, allowing those who need that more detailed control to do it with ease while those who don't can continue using it as they always have. I have been using the changes from my pull request (link in implementation section) for awhile now in multiple projects, and it's greatly reduced the amount of time I spend fine-tuning movement systems.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** I made a [pull request](https://github.com/godotengine/godot/pull/26293) for this awhile back though I feel it perhaps could be done better (I don't even know C++ so it's a bit of a miracle I got it working in the first place).\r\n\r\nThis is a snippet from the implementation, there are also similar functions for the ceiling and wall which are functionally exactly the same as this one, just called in different places when setting the motion within `move_and_slide()`\r\n<details>\r\n<summary>Slide function</summary>\r\n\r\n```cpp\r\nVector2 KinematicBody2D::slide_floor(Vector2 p_motion, Vector2 p_floor_direction, float p_floor_max_angle, Collision p_collision) {\r\n\tif (get_script_instance() && get_script_instance()->has_method(\"slide_floor\")) {\r\n\t\tif (motion_cache.is_null()) {\r\n\t\t\tmotion_cache.instance();\r\n\t\t\tmotion_cache->owner = this;\r\n\t\t}\r\n\r\n\t\tmotion_cache->collision = p_collision;\r\n\r\n\t\treturn get_script_instance()->call(\"slide_floor\", p_motion, p_floor_direction, p_floor_max_angle, motion_cache);\r\n\t} else {\r\n\t\treturn p_motion.slide(p_collision.normal);\r\n\t}\r\n}\r\n```\r\n</details>\r\n\r\nand the relevant portion from `move_and_slide()`\r\n<details>\r\n<summary>Move and Slide portion</summary>\r\n\r\n```cpp\r\nif (p_floor_direction == Vector2()) {\r\n\t//all is a wall\r\n\ton_wall = true;\r\n} else {\r\n\tif (collision.normal.dot(p_floor_direction) >= Math::cos(p_floor_max_angle + FLOOR_ANGLE_THRESHOLD)) { //floor\r\n\r\n\t\ton_floor = true;\r\n\t\ton_floor_body = collision.collider_rid;\r\n\t\tfloor_velocity = collision.collider_vel;\r\n\r\n\t\tif (p_stop_on_slope) {\r\n\t\t\tif ((lv_n + p_floor_direction).length() < 0.01 && collision.travel.length() < 1) {\r\n\t\t\t\tTransform2D gt = get_global_transform();\r\n\t\t\t\tgt.elements[2] -= collision.travel.project(p_floor_direction.tangent());\r\n\t\t\t\tset_global_transform(gt);\r\n\t\t\t\treturn Vector2();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmotion = slide_floor(motion, p_floor_direction, p_floor_max_angle, collision);\r\n\t\tlv = slide_floor(lv, p_floor_direction, p_floor_max_angle, collision);\r\n\r\n\t} else if (collision.normal.dot(-p_floor_direction) >= Math::cos(p_floor_max_angle + FLOOR_ANGLE_THRESHOLD)) { //ceiling\r\n\t\ton_ceiling = true;\r\n\t\tmotion = slide_ceiling(motion, p_floor_direction, p_floor_max_angle, collision);\r\n\t\tlv = slide_ceiling(lv, p_floor_direction, p_floor_max_angle, collision);\r\n\t} else {\r\n\t\ton_wall = true;\r\n\t\tmotion = slide_wall(motion, p_floor_direction, p_floor_max_angle, collision);\r\n\t\tlv = slide_wall(lv, p_floor_direction, p_floor_max_angle, collision);\r\n\t}\r\n}\r\n```\r\n</details>\r\n\r\nA better (cleaner?) solution, perhaps, would be to have a single slide function paired with a `CollisionType` enum that is passed into the slide function.\r\n\r\n<details>\r\n<summary>Revision</summary>\r\n\r\n<details>\r\n<summary>Enum</summary>\r\n\r\n```cpp\r\nenum CollisionType {\r\n\tCOLLISION_FLOOR,\r\n\tCOLLISION_CEILING,\r\n\tCOLLISION_WALL,\r\n};\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Slide function</summary>\r\n\r\n```cpp\r\nVector2 KinematicBody2D::slide(Vector2 p_motion, Vector2 p_floor_direction, bool p_stop_on_slope, float p_floor_max_angle, Collision p_collision, CollisionType p_collision_type) {\r\n\tif (get_script_instance() && get_script_instance()->has_method(\"slide\")) {\r\n\t\tif (motion_cache.is_null()) {\r\n\t\t\tmotion_cache.instance();\r\n\t\t\tmotion_cache->owner = this;\r\n\t\t}\r\n\r\n\t\tmotion_cache->collision = p_collision;\r\n\r\n\t\treturn get_script_instance()->call(\"slide\", p_motion, p_floor_direction, p_floor_max_angle, motion_cache, collision_type);\r\n\t} else {\r\n\t\treturn p_motion.slide(p_collision.normal);\r\n\t}\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Move and Slide portion</summary>\r\n\r\n```cpp\r\nif (collided) {\r\n\tfound_collision = true;\r\n\r\n\tcolliders.push_back(collision);\r\n\tmotion = collision.remainder;\r\n  CollisionType collision_type;\r\n\r\n\tif (p_floor_direction == Vector2()) {\r\n\t\t//all is a wall\r\n\t\ton_wall = true;\r\n\t\tcollision_type = COLLISION_WALL;\r\n\t} else {\r\n\t\tif (collision.normal.dot(p_floor_direction) >= Math::cos(p_floor_max_angle + FLOOR_ANGLE_THRESHOLD)) { //floor\r\n\r\n\t\t\ton_floor = true;\r\n\t\t\ton_floor_body = collision.collider_rid;\r\n\t\t\tfloor_velocity = collision.collider_vel;\r\n\t\t\tcollision_type = COLLISION_FLOOR;\r\n\r\n\t\t\tif (p_stop_on_slope) {\r\n\t\t\t\tif ((lv_n + p_floor_direction).length() < 0.01 && collision.travel.length() < 1) {\r\n\t\t\t\t\tTransform2D gt = get_global_transform();\r\n\t\t\t\t\tgt.elements[2] -= collision.travel.project(p_floor_direction.tangent());\r\n\t\t\t\t\tset_global_transform(gt);\r\n\t\t\t\t\treturn Vector2();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else if (collision.normal.dot(-p_floor_direction) >= Math::cos(p_floor_max_angle + FLOOR_ANGLE_THRESHOLD)) { //ceiling\r\n\t\t\ton_ceiling = true;\r\n\t\t\tcollision_type = COLLISION_CEILING;\r\n\t\t} else {\r\n\t\t\ton_wall = true;\r\n\t\t\tcollision_type = COLLISION_WALL;\r\n\t\t}\r\n\t}\r\n\r\n  motion = slide(motion, p_floor_direction, p_stop_on_slope, p_floor_max_angle, collision, collision_type)\r\n  lv = slide(motion, p_floor_direction, p_stop_on_slope, p_floor_max_angle, collision, collision_type)\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>GDScript implementation</summary>\r\n\r\n```gdscript\r\nextends KinematicBody2D\r\n\r\nfunc slide(motion : Vector2, floor_direction : Vector2, stop_on_slope : bool, floor_max_angle : float, collision : KinematicCollision2D, collision_type : int) -> Vector2:\r\n\tmatch collision_type:\r\n\t\tCOLLISION_FLOOR:\r\n\t\t\t// do stuff to motion\r\n\t\tCOLLISION_CEILING:\r\n\t\t\t// do thing to motion\r\n\t\tCOLLISION_WALL:\r\n\t\t\t// do thing to motion\r\n\treturn motion\r\n```\r\n</details>\r\n</details>\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** It can certainly be worked around, though those workarounds range from mildly annoying to completely rewriting movement logic. I do feel many people would get a lot of use out of this, however.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Kinematic bodies are an essential part of the engine, by implementing this into the engine itself, it allows people to start making more complex and flexible movement systems out of the box without the need to implement workarounds and reinvent the wheel.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/81/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/80",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/80/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/80/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/80/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/80",
    "id": 495507190,
    "node_id": "MDU6SXNzdWU0OTU1MDcxOTA=",
    "number": 80,
    "title": "Treemap profiling of resources",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-18T23:57:35Z",
    "updated_at": "2020-01-13T00:26:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n3d Mobile Game\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nDuring optimization of the 3d game, to use over the air downloads, the entire compressed exported project must be below a specific size.\r\n\r\nTo optimize the size of the package, compare the existing filesystem layout and be able to go directly to the resource so that quality can be reduced or the texture can be shrunk.\r\n\r\nA similiar problem is that a mobile device has limited texture memory.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis is the truncated syntax for the Google treemap.\r\n\r\nThere can be a profiler screen with the hierarchical tree map data.\r\n\r\nThe idea is that there is an hierarchy of resources types, resource names, values and you can zoom in.\r\n\r\n\r\n```\r\nName | Type | Size\r\n-- | -- | --\r\nglobal |   | 0\r\ntscn | global |  \r\nDAE | global |  \r\nremap | global |  \r\nfbx | global |  \r\nno_ext | global |  \r\nres | global |  \r\nmaterial | global |  \r\njpg | global |  \r\ngdc | global |  \r\nimport | global |  \r\ntres | global |  \r\nFBX | global |  \r\nttf | global |  \r\npng | global |  \r\nTex_Cat_Grass_Albedo.png | png | 65627422\r\nText_Birthday_Card.png | png | 45732392\r\n```\r\n\r\n\r\n![Screen Shot 2019-09-18 at 5 07 01 PM](https://user-images.githubusercontent.com/32321/65197145-cc2b7500-da36-11e9-9c77-def2d81893ab.png)\r\n\r\n![Screen Shot 2019-09-18 at 4 39 47 PM](https://user-images.githubusercontent.com/32321/65195169-f2e7ac80-da32-11e9-893d-6e8e095ca09f.png)\r\n\r\nI was not able to find a game related example of voronoi treemaps, but they're another type of treemap that is slightly easier to read than squarified treemaps.\r\n\r\n![image](https://user-images.githubusercontent.com/32321/65195327-b6688080-da33-11e9-8530-36586fc0d0ea.png)\r\n\r\nSee https://developers.google.com/chart/interactive/docs/gallery/treemap for an example of clicking, zooming and hovering for data.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nFor the resources that are exported, generate a list of resource categories, the resource name and the metric we're visualizing. \r\n\r\nImplement a Godot profiler visualization that implements one of the squarified treemap or voronoi treemap visualizations. \r\n\r\nTreemaps support zooming.\r\n\r\nClicking on a particular resource will open it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWe worked around this by generating the needed data through CSV and using the https://developers.google.com/chart/interactive/docs/gallery/treemap API, but it is an external process.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe core profiler cannot be extended. A treemap would be awesome at showing all the memory used. It arguably is a core profiler feature we are missing.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/80/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/78",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/78/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/78/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/78/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/78",
    "id": 494168346,
    "node_id": "MDU6SXNzdWU0OTQxNjgzNDY=",
    "number": 78,
    "title": "`godot init` like `git init` or let Godot build projects in existing dirs.",
    "user": {
      "login": "greenfox1505",
      "id": 1642297,
      "node_id": "MDQ6VXNlcjE2NDIyOTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenfox1505",
      "html_url": "https://github.com/greenfox1505",
      "followers_url": "https://api.github.com/users/greenfox1505/followers",
      "following_url": "https://api.github.com/users/greenfox1505/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenfox1505/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenfox1505/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenfox1505/subscriptions",
      "organizations_url": "https://api.github.com/users/greenfox1505/orgs",
      "repos_url": "https://api.github.com/users/greenfox1505/repos",
      "events_url": "https://api.github.com/users/greenfox1505/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenfox1505/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-16T17:00:16Z",
    "updated_at": "2020-08-05T07:57:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Prototypes\r\n\r\n**Describe how this feature / enhancement will help your project:** Right now, my workflow is to `mkdir prototypeXYZ`, launch godot, then create a project to place in that directory. Then I have to close Godot, `git init`, and then add it to a repo. It would be nice if `godot init` created a project in the current directory OR if Godot let you build a project in a dir that already had files in it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n``` \r\n$ godot init\r\nProject Name > PrototypeXYZ\r\nProject Path > ~/Projects/prototypeXYZ # /user/greenfox/Projects/prototypeXYZ or just `.` for current dir\r\nRenderer:\r\n1. OpenGL ES 3.0\r\n2. OpenGL ES 2.0\r\n> 1\r\nDirectory does not exist. Create it? (y/N) > y\r\nCreating \" /user/greenfox/Projects/prototypeXYZ\"\r\n$ ls ~/Projects/prototypeXYZ\r\ndefault_env.tres  icon.png  icon.png.import  project.godot\r\n$ git init\r\n...etc\r\n```\r\n**Describe implementation detail for your proposal (in code), if possible:** Running `godot init` would walk you through all the steps of creating a project. Alternatively, just letting the user `git init` and then add a Godot project to that directory without having to create a dir would also allow this. I'm not sure the reasoning behind only allowing Godot projects to be created in empty directories.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I don't believe Godot lets you create projects from a script. A script could create the project.godot file, but if anything changed in it's formatting, it would break in silly ways. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Same as the script answer.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/78/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/77",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/77/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/77/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/77/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/77",
    "id": 494007910,
    "node_id": "MDU6SXNzdWU0OTQwMDc5MTA=",
    "number": 77,
    "title": "Separate the language of the \"tooltips\" and the editor.",
    "user": {
      "login": "kone9",
      "id": 12847027,
      "node_id": "MDQ6VXNlcjEyODQ3MDI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12847027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kone9",
      "html_url": "https://github.com/kone9",
      "followers_url": "https://api.github.com/users/kone9/followers",
      "following_url": "https://api.github.com/users/kone9/following{/other_user}",
      "gists_url": "https://api.github.com/users/kone9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kone9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kone9/subscriptions",
      "organizations_url": "https://api.github.com/users/kone9/orgs",
      "repos_url": "https://api.github.com/users/kone9/repos",
      "events_url": "https://api.github.com/users/kone9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kone9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-16T12:05:04Z",
    "updated_at": "2019-11-25T22:07:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNothing special just tests on the usability of the godot editor\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nIt would help to better manage the interface and know the tools faster\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n<img width=\"799\" alt=\"Screenshot_1\" src=\"https://user-images.githubusercontent.com/12847027/64956289-a51b4a80-d860-11e9-8959-4265564f9b55.png\">\r\n<img width=\"793\" alt=\"Screenshot_2\" src=\"https://user-images.githubusercontent.com/12847027/64956290-a51b4a80-d860-11e9-98db-89dd6ded32d7.png\">\r\n<img width=\"799\" alt=\"Screenshot_3\" src=\"https://user-images.githubusercontent.com/12847027/64956291-a5b3e100-d860-11e9-8233-c7bf7ed72c1c.png\">\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI would love to have 2 options for the language one where the language of the program environment is chosen and another option where you can choose the language of the tooltips.\r\nThis is something I always say to all program developers, since maintaining the interface in English helps make the tutorials universal, however having the tooltips in the language of each one helps to understand the tool ... I think that it is very important to have the tooltips and the language of the editor separately.\r\nIn my case I speak Spanish and use blender3D and what I do is keep the interface in English, but the tooltips in Spanish, it doesn't matter if the guy who does a tutorial speaks in Japanese, while the interface is in English I understand what he does looking the procedure and if I have any doubt, I have there the toolstips in Spanish to understand the tool a little more ... I hope they implement it, I think this is something very necessary and is a concept that I only saw in Blender3D ...\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's about improving the interface, I don't think it can be created with a script, it seems to me that you have to see deeper things from the engine, although I really don't know how to do it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSimply because the program has to be universal and to reach more people it would be good to maintain a standart in the interface, but with the possibility that we can all understand so that each tool works\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/77/reactions",
      "total_count": 8,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/75",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/75/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/75/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/75/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/75",
    "id": 493971518,
    "node_id": "MDU6SXNzdWU0OTM5NzE1MTg=",
    "number": 75,
    "title": "Implement networked spawning/despawning (scene replication)",
    "user": {
      "login": "Razzeeyy",
      "id": 912485,
      "node_id": "MDQ6VXNlcjkxMjQ4NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/912485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Razzeeyy",
      "html_url": "https://github.com/Razzeeyy",
      "followers_url": "https://api.github.com/users/Razzeeyy/followers",
      "following_url": "https://api.github.com/users/Razzeeyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Razzeeyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Razzeeyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Razzeeyy/subscriptions",
      "organizations_url": "https://api.github.com/users/Razzeeyy/orgs",
      "repos_url": "https://api.github.com/users/Razzeeyy/repos",
      "events_url": "https://api.github.com/users/Razzeeyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Razzeeyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-09-16T10:39:46Z",
    "updated_at": "2020-05-05T10:03:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hello!\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 3D multiplayer game.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nCurrently high level networking API is great in itself but it's lacking one of the main features -- the ability to simply spawn objects over the network. This is a major pain point for most of networking games. I believe it is possible to come up with generalized enough system for networked instatiation so that many projects would benefit from it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI've already implemented a simple system for that as an add-on for Godot 3.1.  \r\nIf you wish to see the overview of the system please take a look at the first half of this video:  \r\nhttps://youtu.be/0kXzSleNixo  \r\nAlso you can read the \"Design Choices\" paragraph in this repo:  \r\nhttps://github.com/razzeeyy/godot-networked-instancing-example#design-choices  \r\nIn short the system provides 2 new types of nodes, first one is the SyncRoot which is used as a general replication root, and second one is the SyncNode which is used to mark scenes to be networked if a scene with this node is added as a child of the SyncRoot. So it achieves that feeling of \"it just works\" -- you instatiate and parent the objects locally and they're networked automatically.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nRefer to this repository for implementation details:  \r\nhttps://github.com/razzeeyy/godot-networked-instancing-example\r\nMore specifically files of interest is:  \r\nSyncNode: https://github.com/Razzeeyy/godot-networked-instancing-example/blob/master/addons/sync_sys/sync_node.gd\r\nand  \r\nSyncRoot: https://github.com/Razzeeyy/godot-networked-instancing-example/blob/master/addons/sync_sys/sync_root.gd\r\nCurrently the system assumes files on the cllient and the server are the same and leverages `Node.filename` property to achieve this seamless networked instantiation. I'd also like to have it work with simple Nodes/Scripts but I can't come up with a good implementation solution for that currently, I'd love to hear your ideas if you have some.  \r\nAlso it does some simple replication just by sending a dictionary over the network at a specified interval. This saves writing extra rsets and rpcs just to pass around some frequently changing state. (I'd agree that replication functionality isn't really needed in this addon, and maybe even harmful in a way in its current concrete implementation. Regard it just as a proof of concept.)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell as you can see I already did worked around with a few lines of code. Although not as complete work around as it would be.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe networked object spawning/despawning is a core feature of most high-level networking libraries out there (as an example Unreal has it, Photon has it, UNET has it, Forge Networking has it, yadda yadda). And I'd really want to see high level networking functionality in godot improve and provide even better experience and match the expectation of what high level api should really be like.\r\n\r\nP.S. also a similar issue was discussed at the general tracker: https://github.com/godotengine/godot/issues/16793\r\nP.P.S. I know this wall of text would be hard to read, sorry. I've never been great at writing essays, so if any moderators would make an effort to reformat this text in a more readable way I appreciate that.\r\n\r\nThanks.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/75/reactions",
      "total_count": 21,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 3,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/74",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/74/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/74/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/74/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/74",
    "id": 493831400,
    "node_id": "MDU6SXNzdWU0OTM4MzE0MDA=",
    "number": 74,
    "title": "Use AnimatedTexture as cursor shape resource / allow custom animated cursors",
    "user": {
      "login": "sprite-1",
      "id": 33685433,
      "node_id": "MDQ6VXNlcjMzNjg1NDMz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/33685433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sprite-1",
      "html_url": "https://github.com/sprite-1",
      "followers_url": "https://api.github.com/users/sprite-1/followers",
      "following_url": "https://api.github.com/users/sprite-1/following{/other_user}",
      "gists_url": "https://api.github.com/users/sprite-1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sprite-1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sprite-1/subscriptions",
      "organizations_url": "https://api.github.com/users/sprite-1/orgs",
      "repos_url": "https://api.github.com/users/sprite-1/repos",
      "events_url": "https://api.github.com/users/sprite-1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sprite-1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-16T03:34:24Z",
    "updated_at": "2019-11-25T22:06:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAn action game on PC that requires a lot of interactions to be done using the mouse cursor with various states. (Arrow, I-beam, Pointing hand, horizontal resize, diagonal resize, etc)\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nWith the game being reliant on the mouse cursor a lot of times, it makes sense to add some flair and liveliness to it. Or any game, really, unless said game is purely keyboard/controller based. It being [hardware based](https://github.com/godotengine/godot/issues/32148#issuecomment-531590638) instead of a node being updated constantly to follow the mouse cursor will also *help with the overall performance of the game* as it's one less thing the script has to be parsed for. One could argue that static cursors can be more than enough but at the end of the day, video games are all about presentation and visual flair.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI don't think there's a need for a diagram since this is just talking about adding animation to the already existing custom mouse cursor system but I made one anyway...\r\n![diagram_proposal](https://user-images.githubusercontent.com/33685433/64933021-7bb8e980-d875-11e9-839c-f3065772c258.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI am not familiar with the low-level workings pertaining to the implementation directly but I do know that both Windows and macOS have support for animated cursors as it is used by the system-provided default cursors themselves. (On Windows, they come in the form of `*.ani` files instead of the one used for static cursors which is `*.cur`.) I believe Linux allows animated cursors too.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will require recreating a cursor management system to check for and change the cursor depending on the input type as well as checking the node's `mouse_default_cursor_shape` property in order to show the appropriate AnimatedTexture. Well, that or change everything in the project that ever used `mouse_default_cursor_shape` and apply specific changes to them directly. (Would be quite troublesome especially in larger projects) That doesn't even include things such as horizontal, vertical, or diagonal resizing cursors as I have no idea how one would go about detecting those at runtime.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe change is related to more lower-level stuff making it impossible to implement as an addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/74/reactions",
      "total_count": 14,
      "+1": 8,
      "-1": 0,
      "laugh": 6,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/72",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/72/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/72/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/72/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/72",
    "id": 493755618,
    "node_id": "MDU6SXNzdWU0OTM3NTU2MTg=",
    "number": 72,
    "title": "Add support for hullcasting",
    "user": {
      "login": "nuke-makes-games",
      "id": 47336974,
      "node_id": "MDQ6VXNlcjQ3MzM2OTc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47336974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nuke-makes-games",
      "html_url": "https://github.com/nuke-makes-games",
      "followers_url": "https://api.github.com/users/nuke-makes-games/followers",
      "following_url": "https://api.github.com/users/nuke-makes-games/following{/other_user}",
      "gists_url": "https://api.github.com/users/nuke-makes-games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nuke-makes-games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nuke-makes-games/subscriptions",
      "organizations_url": "https://api.github.com/users/nuke-makes-games/orgs",
      "repos_url": "https://api.github.com/users/nuke-makes-games/repos",
      "events_url": "https://api.github.com/users/nuke-makes-games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nuke-makes-games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-09-15T16:04:25Z",
    "updated_at": "2020-07-13T08:36:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm working on a simple C# game that makes use of RayCast2D a lot.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nCurrently i'm simply using a hacky solution of using multiple raycasts to simulate a hullcast. \r\n\r\nI can see a hullcast feature being very useful in other ways. If you can assign the hull any shape, you could do sphere hullcasts, capsule hullcasts, etc. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nNot really needed. Similar to how RayCast and RayCast2D exist, there would be HullCast and HullCast2D nodes.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nA hullcast object really only needs to know how far to cast, and what shape to cast from start point to end point. Maybe have a nice preview in the editor to make it easier to visualize how the hullcast will work.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIn general i think this sort of thing should be part of the core feature set. It has applications in many different game settings.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/72/reactions",
      "total_count": 12,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/71",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/71/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/71/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/71/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/71",
    "id": 493680009,
    "node_id": "MDU6SXNzdWU0OTM2ODAwMDk=",
    "number": 71,
    "title": "Create multiple RigidBodies from many several selected MeshInstances in the Scene tree dock",
    "user": {
      "login": "kone9",
      "id": 12847027,
      "node_id": "MDQ6VXNlcjEyODQ3MDI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12847027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kone9",
      "html_url": "https://github.com/kone9",
      "followers_url": "https://api.github.com/users/kone9/followers",
      "following_url": "https://api.github.com/users/kone9/following{/other_user}",
      "gists_url": "https://api.github.com/users/kone9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kone9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kone9/subscriptions",
      "organizations_url": "https://api.github.com/users/kone9/orgs",
      "repos_url": "https://api.github.com/users/kone9/repos",
      "events_url": "https://api.github.com/users/kone9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kone9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-15T00:25:12Z",
    "updated_at": "2020-11-06T18:45:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt is a test project where I have an object broken into many pedasos..This object was imported from Blender3D and use a modify called cellfracture that transforms 1 mesh into many pedasos without losing the shape.\r\n![Salvate_Juego](https://user-images.githubusercontent.com/12847027/64914848-49ea3a80-d730-11e9-9e62-5ceee3f02541.jpg)\r\n<img width=\"795\" alt=\"Screenshot_3\" src=\"https://user-images.githubusercontent.com/12847027/64914855-7736e880-d730-11e9-9386-2c79942a7d76.png\">\r\n\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nit would help create rigid or kinematic bodies of 3D objects much faster\r\n<img width=\"254\" alt=\"Screenshot_4\" src=\"https://user-images.githubusercontent.com/12847027/64914869-b5cca300-d730-11e9-8139-d74ae132ebdd.png\">\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSelect multiple 3D objects\r\n<img width=\"796\" alt=\"Screenshot_1\" src=\"https://user-images.githubusercontent.com/12847027/64914930-58395600-d732-11e9-9355-759b37d6892a.png\">\r\nto each mesh create a rigidbody and its corresponding CONCAVEPOLIGONSHAPE so that the rigidbody works correctly.\r\nAlthough this is not possible to do it manually, however in unity if you can choose multiple objects add the kinematic components and collisions simultaneously and even if Godot does not work with that concept, the ideal will be to be able to create multiple rigidbody objects from selecting meshes in the node browser ...\r\n# video https://youtu.be/nenvjBrIpOE\r\n\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nSelect a mesh and from that create a parent rigidbody and collision with the shape of the mesh\r\nI could only reproduce it here.\r\n<img width=\"781\" alt=\"Screenshot_4\" src=\"https://user-images.githubusercontent.com/12847027/64915066-d565ca80-d734-11e9-942b-2af18dc6814b.png\">\r\n\r\n`extends Spatial\r\n\r\nvar NodosHijos =  null #creo variable de tipo arreglo\r\n\t\r\n\r\n#Called when the node enters the scene tree for the first time.\r\nfunc _ready():\r\n\tNodosHijos = get_children()\r\n\t\r\n\t\r\n\tfor i in NodosHijos:\r\n\t\tvar newCuerpoRigido = RigidBody.new()#crea un nodo RigidBody\r\n\t\ti.create_trimesh_collision()#crea las colsiones y las mallas\r\n\t\t\r\n\t\tvar colision = i.get_child(0).get_child(0)\r\n\t\tprint(i.get_child(0).name)\r\n\t\t\r\n\t\t#i.remove_child(colision)\r\n\t\t#i.get_parent().add_child(colision)\r\n\t\t#i.queue_free()\r\n\t\tnewCuerpoRigido.sleeping = true#el cuerpo rigido esta activo\r\n\t\ti.get_parent().add_child(newCuerpoRigido)#agrega el nodo al padre y se muestra en la escena\r\n\t\t\r\n\t\ti.get_parent().remove_child(i)#remueve del padre a todas las caras\r\n\t\tnewCuerpoRigido.add_child(i)#cada parte rota es hijo de su correspondiente kinematic\r\n\t\t\r\n\t\t#var nodoColision = i.get_child(0).get_child(0)\r\n\t\t#nodoColision.move_child(newCuerpoRigido)\r\n\t\t\r\n\t\t#newCuerpoRigido.add_child(i.get_child(0).get_child(0))\r\n\t\t\r\n\t\t#print(nodoColision.name)#aca tengo la colision\r\n\t\t#i.remove_child(i.get_child(0))\r\n\t\t\r\n\r\n\t\t\r\n\t\t#print(\"el padre se llama \",i.get_parent().name)\r\n\t\t#print(\"posicion de \",i.name,\"\", i.translation)\r\n\t\t#print(\"posicion del nodo KINEMATICO \" , newCuerpoRigido.translation , \"\\n\")`\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf you can but as I showed in a video above, it is a basic thing to create multiple rigidbodys from the selection of many objects in the node search engine or gameobject in unity\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause it would make it easy to create rigid bodies from many selected objects ... and as I showed before this is something basic in programs like unity\r\n\r\n# GLTF mesh match for tests\r\n[techo_destruible.zip](https://github.com/godotengine/godot-proposals/files/3613284/techo_destruible.zip)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/71/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/70",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/70/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/70/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/70/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/70",
    "id": 493666670,
    "node_id": "MDU6SXNzdWU0OTM2NjY2NzA=",
    "number": 70,
    "title": "Add a script-configurable, centralized editor API for tracking and executing editor operations",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-09-14T21:05:39Z",
    "updated_at": "2020-11-30T08:36:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is a rewriting of godotengine/godot#31190 as a proposal, updated with more information.\r\n\r\n**Describe the project you are working on:**\r\n\r\nPlugins for the Godot ecosystem that would ideally be able to detect editor actions and/or instruct the editor to perform specific actions.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nIf I wanted to build a tool that manipulated the Godot Editor or reacted to Editor operations, and also enabled content added by users to also control/be controlled via this same tool, then I would not have an adequate system by which to do this. Examples of plugins that could take advantage of this are...\r\n\r\n- Vim emulation support for the Godot Editor. You would need to be able to detect and override specific editor actions as well as arbitrarily execute editor actions based on user-defined input sequences. This would extend beyond the capabilities of the current EditorPlugin/EditorInterface API and get into the specifics of bypassing actual input handling (opening and closing dialogs, selecting options in arbitrary in-focus Control nodes) and instead directly executing the behaviors associated with those inputs, much like keyboard shortcuts. (A project I started and stopped on my own because I ran into these roadblocks).\r\n\r\n- Controlling the Godot Editor's state through an external program, similar to how the GDScript Language Server would give GDScript information to an external program. Only, this would encompass the behavior of the entire editor, which could be useful for more than just a text editing program like VS Code/Atom, etc.\r\n\r\n- An interactive tutorial system akin to UE4 (can't find an example online, but it also has these built into the editor) and [Unity](https://www.youtube.com/watch?v=D-F-J2GMY0Q). They offer a more streamlined/involved introduction to engine concepts by familiarizing the user with how to do things inside the Editor itself (no going back and forth between a video/docs and the editor). [Someone on Reddit already wants to pursue this idea](https://www.reddit.com/r/godot/comments/d42fvt/godoit/).\r\n\r\n- A Command Pallete plugin akin to [VS Code](https://code.visualstudio.com/assets/docs/getstarted/userinterface/commands.png) where 1) the palette can automatically populate itself with existing Editor commands and 2) users can add user-defined commands related to their own editor tools, etc. [Someone already has a plugin for this](https://github.com/IvanFon/godot-command-palette), and [another one](https://github.com/Leleat/CommandPalette). It shouldn't have to reinvent the wheel for a lot of stuff though, and many features it simply can't do since they aren't yet exposed to the scripting API through any \"arbitrary execution\" API.\r\n\r\n- An editor console that implements a bash-like scripting system for manipulating the editor and its contents, complete with miniature editor programs and inter-program piping (could put the console in the bottom panel). No, EditorScript doesn't count. They do not support piping (no return value), nor can they be executed in sequence. They also cannot support user-defined operations. (A project I started and stopped on my own because I ran into these roadblocks).\r\n\r\nGodot currently supports two editor action-mapping systems, each with their own issues:\r\n\r\n- EditorInterface:\r\n\r\n    - Pro: Collects a number of operations for manipulating the editor from the scripting API.\r\n\r\n    - Con: User plugins do not have the ability to add to its functionality.\r\n\r\n    - Con: Many of the operations it supports are embedded within nested data structures. The full scope of what it can do is not clearly accessible from the top-level of the API.\r\n\r\n- KeyboardShortcuts:\r\n\r\n    - Pro: Defines a large collection of operations supported by the editor in a list.\r\n\r\n    - Pro: Any statically-defined triggers for operations are tracked and can be updated easily.\r\n\r\n    - Pro: Users can define their own shortcuts.\r\n\r\n    - Con: Operations can only be triggered by using input events.\r\n\r\n    - Con: If one were to try and trigger these behaviors manually, one would have to simulate the input events as if they were applied directly to the editor. This does not work for key remapping systems such as vim bindings or emacs bindings, which necessarily need to override shortcuts with custom functionality.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis is more about a backend change. Front-facing changes would be plugin implementations. Mockups of plugins is beyond the scope of this repository.\r\n\r\nCurrently, the flow of things is like this:\r\n\r\n    Control input callback/notification:\r\n        - detects input event or keyboard shortcut\r\n        - handle logic associated with the event:\r\n            - inlined into input event callback (most common) OR\r\n            - in a separate method, registered to ClassDB, wrapped by editor UndoRedo (sometimes)\r\n                - get logging\r\n                - get undo/redo capabilities\r\n\r\nWould prefer something like this\r\n\r\n    Control input callback/notification:\r\n        - detects EditorActions::is_action(event)\r\n        - handle logic associated with the event by calling EditorActions::get_singleton()->execute(\"group/behavior\", params...):\r\n            - separate method, registered to ClassDB, registered to EditorActions.\r\n                - As before, method uses UndoRedo.\r\n                    - get logging\r\n                    - get undo/redo capabilities\r\n                - EditorActions centralizes method so that the behavior can be triggered by a third party, without awareness of the Control that is responsible for the behavior.\r\n     Users are also able to register EditorActions\r\n     Keyboard shortcuts can be assigned to an EditorAction, but those shortcuts can be overridden by plugins.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Implement an EditorActions class that brings together the features of the EditorInterface and keyboard shortcuts in EditorSettings. It would not replace the EditorInterface, by any means, but one should be able to execute behaviors associated with things present in the EditorInterface simply by passing an action name and a set of parameters to the EditorActions singleton.\r\n1. Expose this class to the scripting API.\r\n1. Refactor huge portions of the Editor codebase to...\r\n    1. add UndoRedo support for their behavior\r\n    1. if it doesn't make sense to use UndoRedo for the operation, it should regardless keep a log of Editor operations in EditorActions.\r\n    1. refactor their inlined code to be in a dedicated method.\r\n    1. register their dedicated method to an action name in EditorActions for arbitrary execution by a third party.\r\n1. Likewise, update many signals defined in classes across the Editor to also dispatch messages in a centralized dynamic messaging system located in EditorActions, so that third-parties will have a single place to go to be notified of all Editor behaviors or to receive a list of recent Editor behaviors.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere are a wide variety of plugin contexts in which this set of changes could be applied, all of which would require extensive changes to the editor codebase in order to accommodate their ideal workflow/features.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe changes involve extensive editor source code changes. Cannot be accomplished by an addon, in any sufficient capacity.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/70/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/68",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/68/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/68/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/68/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/68",
    "id": 493657542,
    "node_id": "MDU6SXNzdWU0OTM2NTc1NDI=",
    "number": 68,
    "title": "Add script class utility methods to ScriptServer",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-14T19:21:23Z",
    "updated_at": "2020-04-19T18:21:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am attempting to implement #18, #22, and #43 which involve changes to both `/editor` and various `/modules/*` directories.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nNone of those codebases should be dependent on each other. All should only be aware of the engine core (`/core`, `/scene`, etc.). I am finding myself duplicating certain script-class-related algorithms across EditorData / other editor classes and the various ScriptLanguage implementations in modules. It would simplify things greatly if all of these utility algorithms could be sourced from the actual core class that is responsible for managing script classes, so the code can be shared between several contexts (which, ya know, would actually make sense).\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThus far I have code in the following places that has been duplicated:\r\n\r\n    /modules/gdscript/gdscript_parser.cpp\r\n    /modules/visual_script/visual_script.cpp\r\n    /modules/visual_script/visual_script_nodes.cpp\r\n    /modules/editor/create_dialog.cpp\r\n    /modules/editor/editor_properties.cpp\r\n    /modules/editor/editor_data.cpp\r\n\r\nI haven't even approached C# script classes, nor tried to create a global access point for script class references in NativeScript, both of which could benefit from the utility algorithms I'm using.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nAdd the following three utility methods to ScriptServer:\r\n\r\n    // Loop through the available languages and get the name/base_type/icon_path\r\n    // based on a given path.\r\n    // Edit: Would probably want to have this code also determine the type based on p_path\r\n    // and add an if check for `lang->handles_global_class_type(the_type)`\r\n    StringName ScriptServer::get_global_class_name(const String &p_path, String *r_base_type = NULL, String *r_icon_path = NULL) {\r\n        for (int i = 0; i < get_language_count(); i++) {\r\n            ScriptLanguage *lang = get_language(i);\r\n            StringName class_name = lang->get_global_class_name(p_path, r_base_type, r_icon_path);\r\n            if (class_name != StringName()) {\r\n                return class_name;\r\n            }\r\n        }\r\n        return StringName();\r\n    }\r\n    // Given a name, give the script.\r\n    // This single line of code happens very frequently.\r\n    // It should be centralized and an error should be reported anytime something\r\n    // would go wrong here.\r\n    Ref<Script> ScriptServer::get_global_class_script(const StringName &p_class) {\r\n        ERR_FAIL_COND_V(!global_classes.has(p_class), NULL);\r\n        Ref<Script> script = ResourceLoader::load(ScriptServer::get_global_class_path(p_class), \"Script\");\r\n        ERR_FAIL_COND_V(script.is_null(), NULL);\r\n        return script;\r\n    }\r\n    // The ClassDB::instance equivalent for ScriptServer's script classes.\r\n    // The editor's CreateDialog and soon-to-be EditorPropertyResource's PopupMenu\r\n    // as well as a VisualScript graphnode that I'm working on would all make use of this \r\n    // functionality (could also make it available to NativeScript in the future and a planned \r\n    // GDScript global function to class/script-class agnostically instantiate a type by name). \r\n    // Several use cases spread across the source code. Likewise, it would be better for it\r\n    // to be centralized with explicit error messages appearing at each step of the process.\r\n    Object *ScriptServer::instantiate_global_class(const StringName &p_class) {\r\n        ERR_FAIL_COND_V(!global_classes.has(p_class), NULL);\r\n        String native = get_global_class_native_base(p_class);\r\n        ERR_FAIL_COND_V(!ClassDB::class_exists(native), NULL);\r\n        Object *obj = ClassDB::instance(native);\r\n        Ref<Script> script = ScriptServer::get_global_class_script(p_class);\r\n        ERR_FAIL_COND_V(script.is_null(), NULL);\r\n        obj->set_script(script.get_ref_ptr());\r\n        return obj;\r\n    }\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt is engine related, not script related.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is engine related, not script related.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/68/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/66",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/66/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/66/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/66/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/66",
    "id": 493645155,
    "node_id": "MDU6SXNzdWU0OTM2NDUxNTU=",
    "number": 66,
    "title": "TileSet:  `#/shapes` field not properly represented in inspector context",
    "user": {
      "login": "nobuyukinyuu",
      "id": 1023003,
      "node_id": "MDQ6VXNlcjEwMjMwMDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1023003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobuyukinyuu",
      "html_url": "https://github.com/nobuyukinyuu",
      "followers_url": "https://api.github.com/users/nobuyukinyuu/followers",
      "following_url": "https://api.github.com/users/nobuyukinyuu/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobuyukinyuu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobuyukinyuu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobuyukinyuu/subscriptions",
      "organizations_url": "https://api.github.com/users/nobuyukinyuu/orgs",
      "repos_url": "https://api.github.com/users/nobuyukinyuu/repos",
      "events_url": "https://api.github.com/users/nobuyukinyuu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobuyukinyuu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-14T17:12:16Z",
    "updated_at": "2019-11-25T22:07:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGame relying on autotile sets with varying Material properties but identical Textures\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nFor `TileSet` specifically and not `TileSetContext`,  the tile properties for `#/shape` are always set to what seems to be the first index in the `#/shapes` subresource collection.  This makes it impossible to copy the collection container from one tile and paste it inside another in the inspector when a `TileSet` is the current item.  \r\n\r\nThis may not be considered a bug, so I filed it here to the proposals repo.  ~~I will file a separate bug in the main repo and link it here explaining why this functionality is important.~~ *(edit:  [here](https://github.com/godotengine/godot/issues/32136))*  Short reason:  It seems not possible at the current time to get `TileSetContext` to stay \"focused\" on the correct tile resource when editing collision shapes sharing a texture, making it impossible to alter the collision mask collection inside the editor.\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/1023003/64911453-92c9d100-d6e7-11e9-8a3e-ca174301a9f9.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPossibly.  An extension or seperate application could be written using the exposed functionality of `TileSet` to get an ID's shape array, copy it, and manually re-add each shape to another ID.  The underlying implementation of `TileSet` changed between 3.0->3.1, however, and it's unclear if the implementation will break compatibility for future scripts, or if subresource references for shapes will confuse the TileSet tab in the editor or the TilesetEditorContext.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is \"missing functionality\" which makes it difficult to modify tilesets in editor.  If the TileSet editor tab itself didn't get confused about which tileID it's on when changing \"Coordinate\" in the Collision subtab, collision shapes could be manually re-made.  The relevant bug necessitating some kind of feature (such as this proposal) or a fix is located here:  https://github.com/godotengine/godot/issues/32136",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/66/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/63",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/63/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/63/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/63/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/63",
    "id": 493365696,
    "node_id": "MDU6SXNzdWU0OTMzNjU2OTY=",
    "number": 63,
    "title": "Add toggleable on-screen debugging information/statistics while the project is running",
    "user": {
      "login": "kkmzero",
      "id": 32756443,
      "node_id": "MDQ6VXNlcjMyNzU2NDQz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/32756443?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kkmzero",
      "html_url": "https://github.com/kkmzero",
      "followers_url": "https://api.github.com/users/kkmzero/followers",
      "following_url": "https://api.github.com/users/kkmzero/following{/other_user}",
      "gists_url": "https://api.github.com/users/kkmzero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kkmzero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kkmzero/subscriptions",
      "organizations_url": "https://api.github.com/users/kkmzero/orgs",
      "repos_url": "https://api.github.com/users/kkmzero/repos",
      "events_url": "https://api.github.com/users/kkmzero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kkmzero/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-09-13T14:46:04Z",
    "updated_at": "2020-05-29T15:46:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Racing Game.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThis feature will help me to optimize the project, specifically for variety of hardware specs. It will help developers to understand hardware limitations better and it will also help them to set the minimum hardware requirement for their project more accurately. It will help developers to save player's resources and make their projects more stable and responsive, which is highly important factor in game development. This feature might resolve some bugs or issues related to rendering, possibly network connection, etc.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![GameViewStats](https://user-images.githubusercontent.com/32756443/64870959-922c2e80-d644-11e9-905c-a7324c4f2aea.jpg)\r\n![f641bec2-3ef4-487c-8571-a2cbec53bb58](https://user-images.githubusercontent.com/32756443/64871089-d0c1e900-d644-11e9-8a01-881ec5404433.jpg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIt should be essential part and optional feature of Godot Engine itself.\r\n\r\nI would like to see some very basic information on screen while the game is running in debug mode. Currently you can print for example FPS to console but some information should be printed (as option) directly on screen, such as: FPS, CPU Load, allocated RAM, Graphics card info, VRAM, Network packets sent/received, number of triangles/objects drawn, Screen resolution, OS+version etc.\r\n\r\nMaybe you cannot share the whole project folder between computers, maybe you just want to have debug executable so you can test it on variety of hardware, while being able to see which parts of your game might cause some issues, which also leads to better optimization.\r\n\r\nAs far as I remember Unity had this feature (I'm not sure if it's still part of this engine) and I'm sure various other proprietary/in-house engines have this feature. Debugging is very important part of development process and this basic tool/option could help Godot in the future and it could be the step forward in direction of more advanced debugging techniques.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPossibly it can be implemented with a few lines of scripts, HOWEVER I am strongly convinced this feature should be part of engine itself and not a library and/or script workaround.\r\n\r\n1. Safety - Good tools provided to developers are priceless. I consider script workaround to be nothing more but a 'hack'. Developer might do mistakes in his script, which will give him wrong results and consume his resources.\r\n2. Performance and Reliability - Engine should take care of hardware communication, not the game developer. Having this feature implemented directly as part of engine could be potentially faster, more accurate and more reliable solution.\r\n3. My belief is that this feature will be used more than frequently.\r\n4. If Godot's goal might be, in near future, to attract more professional users, this feature will OR should be requested in this or different form.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe add-on in asset library will not solve the issue of non-accurate and/or less reliable solution.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/63/reactions",
      "total_count": 11,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/62",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/62/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/62/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/62/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/62",
    "id": 493012075,
    "node_id": "MDU6SXNzdWU0OTMwMTIwNzU=",
    "number": 62,
    "title": "Establish convention for sharing libraries",
    "user": {
      "login": "nhydock",
      "id": 316728,
      "node_id": "MDQ6VXNlcjMxNjcyOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/316728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhydock",
      "html_url": "https://github.com/nhydock",
      "followers_url": "https://api.github.com/users/nhydock/followers",
      "following_url": "https://api.github.com/users/nhydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhydock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhydock/subscriptions",
      "organizations_url": "https://api.github.com/users/nhydock/orgs",
      "repos_url": "https://api.github.com/users/nhydock/repos",
      "events_url": "https://api.github.com/users/nhydock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhydock/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-09-12T20:25:24Z",
    "updated_at": "2020-11-28T23:19:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis applies to any project that would like to install dependency or assets developed by others.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nRight now there is no established convention to enforce for managing packages that may contain source code, assets, or plugins.  This applies both to how people are expected to create a repository for it to be used by a Godot project, as well as where a godot project should store its downloaded modules.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nAn example of how a project could store dependencies, as well as how those dependencies can acceptably be organized to be recognized by Godot.\r\n```\r\nproject/\r\n├── godot_modules/\r\n│   ├── actor-module/\r\n│   │   ├── package.json \r\n│   │   ├── index.gd\r\n│   │   ├── Actor.tscn\r\n│   │   └── placeholder.png\r\n│   └── simple-scene-manager/\r\n│       ├── lib/\r\n|       |   ├── SceneManager.tscn\r\n|       |   └── SceneManager.gd\r\n│       ├── assets/\r\n|       |   └── transition.png\r\n│       └── package.json\r\n├── assets/\r\n└── scripts/\r\n```    \r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThis is more of a community pattern to describe and enforce than it is an actual code feature.  However, if it's properly enforced, then the engine could also start to depend on the known convention and implement custom loaders for efficient coding, such as how npm modules can be required from root level namespace instead of relative paths.\r\n\r\nWithout a properly defined convention for sharing modules, what's checked out can become messy.  My least favorite pattern I see in repositories is including a subfolder in the git repo with the same name as the repo.  This makes paths in code look redundant when loading, ie.\r\n```\r\nconst ActorClass = preload(\"res://godot_modules/mymodule/mymodule/index.gd\").Actor\r\n```\r\n\r\nWith the ability to define packages using with a meta file and recognize the convention with the engine you could simplify this to\r\n```\r\nconst ActorClass = preload(\"dep://mymodule\").Actor\r\n``` \r\n\r\nEven resources in the file browser could be organized under a new tree for dependencies, and these files can be treated as Read-Only by the editor to prevent accidental tampering.  Resource Loading could be referenced with appropriate abbreviated paths too in the TSCN and TRES files.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nBest solution I've found, since not everyone publishes to the Godot Asset Library, is to use git submodules.  This also allows for handling any modules that a company may keep internal for personal projects.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIf leveraging a defined convention to redefine how loading is perfromed, it must be implemented at a core level to perform lookups.  Using something like npm's package.json to define where \"sources\" or an \"index\" exists is helpful as well.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/62/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/61",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/61/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/61/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/61/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/61",
    "id": 492755628,
    "node_id": "MDU6SXNzdWU0OTI3NTU2Mjg=",
    "number": 61,
    "title": "Expose LineEdit selection begin and end",
    "user": {
      "login": "olivergs",
      "id": 1439905,
      "node_id": "MDQ6VXNlcjE0Mzk5MDU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1439905?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olivergs",
      "html_url": "https://github.com/olivergs",
      "followers_url": "https://api.github.com/users/olivergs/followers",
      "following_url": "https://api.github.com/users/olivergs/following{/other_user}",
      "gists_url": "https://api.github.com/users/olivergs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olivergs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olivergs/subscriptions",
      "organizations_url": "https://api.github.com/users/olivergs/orgs",
      "repos_url": "https://api.github.com/users/olivergs/repos",
      "events_url": "https://api.github.com/users/olivergs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olivergs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-12T11:49:28Z",
    "updated_at": "2019-11-25T22:09:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAn editor for interactive fiction stories based on Godot UI\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI will be able to get currently selected text at a LineEdit so I can manipulate text if needed (wrapping, replacing)\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nNo mockup. Just functions to access data from scripts\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nJust add two methods that returns current LineEdit selection struct begin and end fields\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nRIght now the selection struct is private so I can not get the information from scripting\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a very basic function for general use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/61/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/56",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/56/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/56/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/56/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/56",
    "id": 491871490,
    "node_id": "MDU6SXNzdWU0OTE4NzE0OTA=",
    "number": 56,
    "title": "Add dictionary type hints for exported variables",
    "user": {
      "login": "somnivore",
      "id": 28724859,
      "node_id": "MDQ6VXNlcjI4NzI0ODU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28724859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somnivore",
      "html_url": "https://github.com/somnivore",
      "followers_url": "https://api.github.com/users/somnivore/followers",
      "following_url": "https://api.github.com/users/somnivore/following{/other_user}",
      "gists_url": "https://api.github.com/users/somnivore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somnivore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somnivore/subscriptions",
      "organizations_url": "https://api.github.com/users/somnivore/orgs",
      "repos_url": "https://api.github.com/users/somnivore/repos",
      "events_url": "https://api.github.com/users/somnivore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somnivore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-10T20:06:43Z",
    "updated_at": "2021-01-08T19:02:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCutscene-heavy RPG\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI want to associate some object with some identifier to make it easy to reference them from the AnimationPlayer (in this case it's some Dialogue class with data for who is talking and what they're saying.)  I would like to access this data using the format `read_dialogue(id: String)`, where the id is the key in a dictionary that leads to the data.  This causes my extended AnimationPlayer to pause the animation so it can autotype some text and wait for player input before moving on with the animation.\r\n\r\nHowever, there's currently no way to define a dictionary to have any particular kinds of keys and values, so if, for example, I wanted to add 50 different lines of text to read in this animation, I'd have to set the key's type and the value's type manually every time, which is tedious.\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/64644979-7ffa8800-d3d9-11e9-8c7d-c10ed1dbe0f7.png)\r\n\r\n\r\nFurthermore: without dictionary hints, it's not possible to add a hint to a particular kind of Object, since the list of types you can pick from is limited to built-ins and various primitive types.  Contrast this to arrays, where you can use hints to specify just about any type not present in the drop-down.  So, you're not going to be able to easily create resources in-place, resulting in the OmniResource issue (except worse since it's every object ever.)\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n`export(Dictionary, String, Resource) var hinted_dictionary`\r\n\r\n![64645509-ab31a700-d3da-11e9-8d57-f0ca866362b2](https://user-images.githubusercontent.com/28724859/64646077-dc5ea700-d3db-11e9-866a-5ab364853ada.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think just about everyone will be very pleased with this addition; however, in the meantime, it's not too bothersome to avoid the issue.  Instead I'll give my class an `id: String` property and loop through an array.  I assume this isn't as efficient as using dictionaries, but I likely won't notice a real performance hitch.  Nonetheless, it's a shame exported dictionaries can't be more useful.\r\n\r\nhttps://github.com/godotengine/godot/issues/25157",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/56/reactions",
      "total_count": 37,
      "+1": 32,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/55",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/55/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/55/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/55/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/55",
    "id": 491699313,
    "node_id": "MDU6SXNzdWU0OTE2OTkzMTM=",
    "number": 55,
    "title": "Option to auto-zip files for distribution after export",
    "user": {
      "login": "AlexHoratio",
      "id": 20541139,
      "node_id": "MDQ6VXNlcjIwNTQxMTM5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20541139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexHoratio",
      "html_url": "https://github.com/AlexHoratio",
      "followers_url": "https://api.github.com/users/AlexHoratio/followers",
      "following_url": "https://api.github.com/users/AlexHoratio/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexHoratio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexHoratio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexHoratio/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexHoratio/orgs",
      "repos_url": "https://api.github.com/users/AlexHoratio/repos",
      "events_url": "https://api.github.com/users/AlexHoratio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexHoratio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-10T14:12:09Z",
    "updated_at": "2020-11-22T14:45:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:** I'm working on a game distributed on Itch and Kongregate.\r\n\r\n**Describe how this feature / enhancement will help your project:** Instead of having to manually zip up the files after exporting them, it'd save a little time and convenience to stop me going through the repetition of manually zipping up for each platform. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:** I think it's kinda self-explanatory, but I can make one if needed? It'd just go in the export menu.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** I don't know much about C++, but again, it doesn't sound hard? Just another checkbox and some functionality for zipping (which already exists in OSX export?)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** <-I don't understand this bit of the template\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** I think a great number of developers would find it useful, since LOTS of people upload to Itch, Kongregate, GameJolt and Steam.\r\n\r\n-----------\r\n\r\n**OLD POST BEFORE I DID IT AGAIN USING THE TEMPLATE:**\r\n\r\nI've made several games with the engine, though I'm always met with the inconvenience of having to manually zip the exported files in order to upload them to storefronts like Steam, Itch, GameJolt or Kongregate. \r\n\r\nI'd love something like another checkbox in the export menu to automatically add these exported files to a .zip archive so that I can more easily upload them without manually visiting the folder with my file manager and having to do it that way.\r\n\r\nThanks :D :dancer: ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/55/reactions",
      "total_count": 10,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/54",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/54/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/54/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/54/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/54",
    "id": 491619051,
    "node_id": "MDU6SXNzdWU0OTE2MTkwNTE=",
    "number": 54,
    "title": "Option to hide collision shapes of instanced scenes",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-09-10T11:40:25Z",
    "updated_at": "2020-11-15T14:24:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA complex game with lots of object types.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI have one or more collision shapes on almost every object in my game. These objects are of course separate scenes, instanced in maps. Seeing these shapes all over the scene hurts readability and is... annoying >_>\r\n![image](https://user-images.githubusercontent.com/2223172/64609956-6dc71c80-d3ce-11e9-940a-8bfdd93c6e3f.png)\r\n(ignore placeholder sprites)\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWell, this could be editor option. After enabling, if you instance a scene with collision shapes, the shapes would be hidden (similar to how they don't show while playing).\r\n![image](https://user-images.githubusercontent.com/2223172/64610208-0d84aa80-d3cf-11e9-8451-3660ff798f56.png)\r\nMuch more pleasant to look at, isn't it?\r\n\r\nThey would still be visible in the original scene.\r\n\r\nEDIT:\r\nI just noticed the View menu in the editor. Perfect place for this option.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nFor 2D, I guess it's about adding another case here\r\nhttps://github.com/godotengine/godot/blob/24e1039eb6fe32115e8d1a62a84965e9be19a2ed/scene/2d/collision_shape_2d.cpp#L104\r\nwhich would check whether the shape is part of instanced scene or its own.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYou can manually turn off the visibility of the shapes, but that state is needlessly saved in the scene and also you need to toggle it each time you want to edit the shape. It's just bothersome.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a little QoL thing. Not sure if possible with a reasonable plugin (reasonable i.e. not adding any additional steps to simple auto-hiding).\r\n\r\nEDIT:\r\nSo I don't really need this anymore, but it has some support and also apparently it would be still useful in 3D.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/54/reactions",
      "total_count": 17,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/53",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/53/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/53/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/53/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/53",
    "id": 491458894,
    "node_id": "MDU6SXNzdWU0OTE0NTg4OTQ=",
    "number": 53,
    "title": "Project Settings Test Height and Width should be an Editor Setting",
    "user": {
      "login": "jaykyburz",
      "id": 1171070,
      "node_id": "MDQ6VXNlcjExNzEwNzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1171070?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaykyburz",
      "html_url": "https://github.com/jaykyburz",
      "followers_url": "https://api.github.com/users/jaykyburz/followers",
      "following_url": "https://api.github.com/users/jaykyburz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaykyburz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaykyburz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaykyburz/subscriptions",
      "organizations_url": "https://api.github.com/users/jaykyburz/orgs",
      "repos_url": "https://api.github.com/users/jaykyburz/repos",
      "events_url": "https://api.github.com/users/jaykyburz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaykyburz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-10T05:31:47Z",
    "updated_at": "2019-11-25T22:10:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The test size and with should be a function of the machine you are working on, not the project. They should be in the Editor settings alongside the test window placement. I assume they were not moved there at the time for some reason. But I think we should track this issue so that we can get to it one day in the future. \r\n\r\n![image](https://user-images.githubusercontent.com/1171070/64586517-db2f7900-d3df-11e9-8c96-ca330fda327e.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1171070/64587819-e684a380-d3e3-11e9-9e40-807165af88fa.png)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/53/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/51",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/51/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/51/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/51/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/51",
    "id": 490842862,
    "node_id": "MDU6SXNzdWU0OTA4NDI4NjI=",
    "number": 51,
    "title": "Add animation groups to the animation Player",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-09T02:06:10Z",
    "updated_at": "2019-11-25T22:10:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D Action games like 2D Zeldas and 2D fighting games.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nWill help avoid to repeat a lot of actions and speed workflow.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA simple dropout button to add a keyframe from the animationplayer to all the animations with the same TAG (like basic_movement, punches, spells, getting_hit).\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdd some Tag system to group diferent animation types like basic movement, melee attacks, spells, jumping and allow to copy or delete keyframes from all the animations under the same tag.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nA right click command to clone a keyframe in all the same tag of animations will be a saviour for 2D action games or other types of games with dozens of animations.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWill help clasify the list of animations and speed up the workflow.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/51/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/50",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/50/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/50/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/50/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/50",
    "id": 490825220,
    "node_id": "MDU6SXNzdWU0OTA4MjUyMjA=",
    "number": 50,
    "title": "Implement drag-and-drop from a Godot project to the OS file manager (filesystem)",
    "user": {
      "login": "alexis-evelyn",
      "id": 6305346,
      "node_id": "MDQ6VXNlcjYzMDUzNDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6305346?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexis-evelyn",
      "html_url": "https://github.com/alexis-evelyn",
      "followers_url": "https://api.github.com/users/alexis-evelyn/followers",
      "following_url": "https://api.github.com/users/alexis-evelyn/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexis-evelyn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexis-evelyn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexis-evelyn/subscriptions",
      "organizations_url": "https://api.github.com/users/alexis-evelyn/orgs",
      "repos_url": "https://api.github.com/users/alexis-evelyn/repos",
      "events_url": "https://api.github.com/users/alexis-evelyn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexis-evelyn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "fire",
        "id": 32321,
        "node_id": "MDQ6VXNlcjMyMzIx",
        "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fire",
        "html_url": "https://github.com/fire",
        "followers_url": "https://api.github.com/users/fire/followers",
        "following_url": "https://api.github.com/users/fire/following{/other_user}",
        "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
        "organizations_url": "https://api.github.com/users/fire/orgs",
        "repos_url": "https://api.github.com/users/fire/repos",
        "events_url": "https://api.github.com/users/fire/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fire/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-08T23:53:45Z",
    "updated_at": "2020-12-01T20:34:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a game based on Starbound, which is based on Terraria. I want to be able to implement dragging objects out of the game and into the OS file manager. ~~I just need the game to tell me which folder the node was dragged to and I would handle the file creation/naming.~~ I would like to be able to set the filename and a reference to the file contents (or the contents itself if the reference is not possible) in the get_drag_data() function or a similar function. The reason for this change in idea is because the OS file manager should set the location of the file in the folder just like it would for any other program.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nSince inventory is arbitrary in my game (as in there is no intention to prevent cheating as the game is more based on exploration than anything else), I want to be able to drag inventory items into and out of the game. ~~I would accomplish this by getting the folder the drag event was let go over and then I would create the file myself based on the folder path given to me.~~ I would accomplish this by providing the filename and file contents with get_drag_data() or similar function. The os file manager then would place the file where it should go. In my particular game, I would make a json file with the data used to make up the item in the inventory.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThe project in the screenshots is someone else's demo I found to teach me about drag and drop. The first screenshot is a drag and drop example where drag preview is enabled. If possible, drag previews should be able to be taken outside of the window. If not, just set the drag preview to use the OS file manager's preview like in the second screenshot.\r\n\r\n![Screen Shot 2019-09-08 at 7 42 57 PM](https://user-images.githubusercontent.com/6305346/64496247-f9c33200-d270-11e9-8544-84fa3ece6282.png)\r\n![Screen Shot 2019-09-08 at 7 43 02 PM](https://user-images.githubusercontent.com/6305346/64496246-f9c33200-d270-11e9-94e7-4007ef1b5434.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nBasically, a pickable object is setup using functions like get_drag_data() and then is dragged out of the window to the os file manager. ~~Once released, a signal should be emitted (or a virtual function called) to let the game know what folder was just dropped onto.~~ get_drag_data() (or similar function) would handle the file name/contents for us. Everything else will be handled by the developer.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it cannot be worked around with a few lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe core already has `drop_files(files: PoolByteArray, screen: int)`, there should be a reverse feature where files can be dropped onto the os file manager.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/50/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/49",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/49/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/49/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/49/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/49",
    "id": 490814590,
    "node_id": "MDU6SXNzdWU0OTA4MTQ1OTA=",
    "number": 49,
    "title": "Add a Listener2D node for positional audio relative to character (Listener3D already implemented)",
    "user": {
      "login": "nhydock",
      "id": 316728,
      "node_id": "MDQ6VXNlcjMxNjcyOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/316728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhydock",
      "html_url": "https://github.com/nhydock",
      "followers_url": "https://api.github.com/users/nhydock/followers",
      "following_url": "https://api.github.com/users/nhydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhydock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhydock/subscriptions",
      "organizations_url": "https://api.github.com/users/nhydock/orgs",
      "repos_url": "https://api.github.com/users/nhydock/repos",
      "events_url": "https://api.github.com/users/nhydock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhydock/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-09-08T22:18:11Z",
    "updated_at": "2020-12-14T14:29:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nNot every game has characters that are centered on the camera.  Spatial audio should work not just based on what the player sees, but where the player is technically in the world.   This is particularly of importance in situations where cameras maybe be locked or pan over a location but the character moves within the view and the player needs to be aware of audio cues.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![image](https://user-images.githubusercontent.com/316728/64495204-e27e4780-d264-11e9-9c2f-dce747e4140b.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nCurrently position audio for 2D, is based on the camera/viewport location, while 3D does have a Listener node which matches the desired behavior.  Audio listening should be split apart from the camera and offered as a separate node and concept with ability to toggle if it's an active listener.  This node can be attached to whatever target the developer wants, whether it be a camera to replicate the existing functionality, or to a specific character object the wish the player to control in the world. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, calculations for audio falloff would need to be reimplemented according to what is already in the engine and for a new node type that does nearly the same functionality.  This amounts to unneeded redundancy and a worse developer experience.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is an improvement/replacement to existing core functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/49/reactions",
      "total_count": 21,
      "+1": 21,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/48",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/48/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/48/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/48/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/48",
    "id": 490744913,
    "node_id": "MDU6SXNzdWU0OTA3NDQ5MTM=",
    "number": 48,
    "title": "Improve the Curve, Curve2D and Curve3D editors by exposing values in the Inspector",
    "user": {
      "login": "TheDuriel",
      "id": 44248915,
      "node_id": "MDQ6VXNlcjQ0MjQ4OTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/44248915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheDuriel",
      "html_url": "https://github.com/TheDuriel",
      "followers_url": "https://api.github.com/users/TheDuriel/followers",
      "following_url": "https://api.github.com/users/TheDuriel/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheDuriel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheDuriel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheDuriel/subscriptions",
      "organizations_url": "https://api.github.com/users/TheDuriel/orgs",
      "repos_url": "https://api.github.com/users/TheDuriel/repos",
      "events_url": "https://api.github.com/users/TheDuriel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheDuriel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-08T11:52:00Z",
    "updated_at": "2020-09-29T08:54:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a Utility driven AI system for a Sims like game. It utilized mathematical functions (curves) to evaluate which actions to take. Godots curve resource is very useful here, as it removes the need to write the function directly through code, and provides a visual representation of the range.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nUnlike the gradient editor for example, the Curve editor only provides points and handles. Making it impossible to set accurate values. The gradient editor exposes the array for each entry, allowing you to set the precise position of each point. I would like to have the same ability for points and their handles in the curve editor. (Making it much easier for example to create a logistic or logit curve)\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nTechnically all these functions could be written in code. However using curves you can reduce the code to just two lines and get the benefit of a visual representation.\r\n![image](https://user-images.githubusercontent.com/44248915/64487838-e3e94900-d23f-11e9-9383-d9e4af61fd8d.png)\r\n\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt modifies the Inspector.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/48/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/43",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/43/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/43/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/43/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/43",
    "id": 490601535,
    "node_id": "MDU6SXNzdWU0OTA2MDE1MzU=",
    "number": 43,
    "title": "Shorten too-long exported resource dropdown menus and switch to CreateDialog",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-09-07T07:01:49Z",
    "updated_at": "2020-05-17T21:27:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n- An RPG project in which resources are exported.\r\n- Tools and plugins that encourage users to customize functionality by plugging their own desired Resource types into my own programmed behaviors.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nWhen one does `export(Resource) var res = null`, they are presented with an empty exported resource that can be supplied with any type of resource. The \"valid_inheritors\" of this resource includes all possible resource types in the engine as well as all possible Custom Type or Script Class resources.\r\n\r\nWhen you click the dropdown menu, the EditorPropertyResource class calls `_update_menu_items` and populates the dropdown with one `New <type>` menu item for every valid inheritor of the exported type. For Resources (and probably a few others), this floods the UI with a list that is obscenely long to navigate.\r\n\r\nWhat's worse is that users who operate on a touchpad-equipped laptop, and who don't have a mouse with a scroll wheel, CANNOT scroll this list *at all* (or if there is a way, it is not intuitive as I cannot figure out how to do it). Using a keyboard to move the selection down the list will make it move down, but the list will not scroll up to continue displaying the moving-down selector to you, so you are blind.\r\n\r\nEither way, the UX in this scenario is abysmal. I propose that we assign a maximum number of allowed menu items to be generated, and when the size has been reached, we instead add an \"Open Create Dialog\" button and stop generating menu items. If the user selects the Create Dialog, the EditorPropertyResource would configure it for the currently exported type and then open the dialog for the user to select the type.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis is what exporting a Resource looks like before clicking the dropdown menu:\r\n![prechanges_before_click](https://user-images.githubusercontent.com/16217563/64471046-d2098800-d111-11e9-940b-9243acdf910b.png)\r\n\r\nThis is what it looks like afterwards:\r\n![prechanges_after_click](https://user-images.githubusercontent.com/16217563/64471051-e483c180-d111-11e9-8cf1-3051c3cfd693.png)\r\n\r\nThis is what exporting an AudioEffect looks like:\r\n![prechanges_after_click_audio](https://user-images.githubusercontent.com/16217563/64471059-fbc2af00-d111-11e9-950b-1a8def57e622.png)\r\n\r\nAssuming the number of entries had been reached at something like 23 (I was gonna say 20), the AudioEffect dropdown POST the suggested changes might look like this:\r\n![postchanges_after_click_audio](https://user-images.githubusercontent.com/16217563/64471090-39273c80-d112-11e9-90c2-287e6f343b96.png)\r\n\r\nClicking the button would prompt the opening of the CreateDialog (but configured for AudioEffect in this example, not for Resource which is what the image below shows):\r\n![postchanges_after_click](https://user-images.githubusercontent.com/16217563/64471098-50fec080-d112-11e9-9ba2-ea125e0dc71f.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Add a const int maximum number of menu items to the EditorPropertyResource class in `editor/editor_properties.h`\r\n1. When the EditorPropertyResource is instantiated, it should check to see how many valid inheritors there are of its exported property type. If it exceeds the maximum limit, it should instantiate a CreateDialog and configure it for the specified resource type. It should then also connect a callback to this CreateDialog so that it can assign itself the value of any selected class.\r\n1. In `editor/editor_properties.cpp, EditorPropertyResource::_update_menu_items`, keep a running count of which menu item index you are adding. When it becomes equal to the maximum allowed count AND there are still more to render, then add a menu item with no functionality that is just an ellipses (to indicate that there are more that exist) and then add a \"Open Create Dialog...\" menu item.\r\n1. When the menu item for the CreateDialog is selected, it should fetch the internally managed CreateDialog and open it center-screen.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt is used very often for data-driven games on small screens / laptops. It is built into the editor source code and is not very pluggable via the EditorPlugin's available API, so no, it cannot be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThe only code capable of making the necessary changes is direct alterations to the EditorPropertyResource class in the editor source code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/43/reactions",
      "total_count": 20,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/41",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/41/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/41/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/41/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/41",
    "id": 490549373,
    "node_id": "MDU6SXNzdWU0OTA1NDkzNzM=",
    "number": 41,
    "title": "En-masse modification of ArrayMesh vertices in one shot",
    "user": {
      "login": "slapin",
      "id": 6099,
      "node_id": "MDQ6VXNlcjYwOTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6099?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slapin",
      "html_url": "https://github.com/slapin",
      "followers_url": "https://api.github.com/users/slapin/followers",
      "following_url": "https://api.github.com/users/slapin/following{/other_user}",
      "gists_url": "https://api.github.com/users/slapin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slapin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slapin/subscriptions",
      "organizations_url": "https://api.github.com/users/slapin/orgs",
      "repos_url": "https://api.github.com/users/slapin/repos",
      "events_url": "https://api.github.com/users/slapin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slapin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-06T22:40:52Z",
    "updated_at": "2019-11-25T22:11:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI work on character customization system. Some small subset of it can be seen on \r\nhttps://github.com/gamedev-kindness/make-target - just hit F5, and push Generate and run. Just wait 10 minutes or so (depends on computer power) and the editor with sliders will show up.\r\n(need master branch)\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThat will help a lot, as there is no good mechanism to modify mesh fast en masse, so that lots of vertices are updated. GDScript loop is quite slow, it takes up to 10 seconds to update mesh sith 20K vertices.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI'd propose implementation like the following:\r\n```c++\r\nvoid apply_delta(Array array);\r\n```\r\nwhere array is all changed items deltas, same format as with other ArrayMesh arrays. Should require mesh to have index; should update only selected indices.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be implemented in GDScript but it is very slow. See https://github.com/gamedev-kindness/make-target/blob/6560f6ca7d3aca815ea94016e8b37ffef9ceb243/map_test.gd#L32\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is small things and aligns nicely with the rest of ArrayMesh function.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/41/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/37",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/37/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/37/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/37/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/37",
    "id": 489969846,
    "node_id": "MDU6SXNzdWU0ODk5Njk4NDY=",
    "number": 37,
    "title": "Don't delete the data about breakpoints/bookmarks after closing file",
    "user": {
      "login": "iwek7",
      "id": 9964886,
      "node_id": "MDQ6VXNlcjk5NjQ4ODY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9964886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iwek7",
      "html_url": "https://github.com/iwek7",
      "followers_url": "https://api.github.com/users/iwek7/followers",
      "following_url": "https://api.github.com/users/iwek7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iwek7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iwek7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iwek7/subscriptions",
      "organizations_url": "https://api.github.com/users/iwek7/orgs",
      "repos_url": "https://api.github.com/users/iwek7/repos",
      "events_url": "https://api.github.com/users/iwek7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iwek7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-05T19:56:16Z",
    "updated_at": "2019-11-25T22:10:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**What is proposed**\r\n\r\nRight now when editor code tab closes information about breakpoints and bookmarks is erased. I would like those data to be kept somewhere so that when you reopen closed tab bookmarks and breakpoints are still there. This is very basic feature of any IDE and Godot should support it too.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSo long story short - information about breakpoints and bookmarks is kept in godot configuration fie editor_layout.cfg as a part of script metadata in open_scripts section. When you close editor this section remains intact therefore when you open godot again breakpoints/bookmarks get reloaded correctly. However when you close tab it gets deleted form open_scripts section and info about breakpoints/bookmarks is lost.\r\n\r\nI think we sould keep this information at all times - either separate section could be added to one of config files (and removed from open_scripts section) or separate config file could be kept for this. After opening script then we could do lookup in this section to find breakpoints for the file.\r\n\r\n**Describe the project you are working on:**\r\n\r\n2D card game, irrelevant to the task.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nWill improve debugging and bookmark usage\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\ndon't have any\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo it can't. Workaround is not using Godot code editor or not closing code tabs at all.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nQuite obvious - its an build-in editor feature.\r\n\r\n**Am I willing to work on this?**\r\n\r\nYes I'd gladly provide PR for this, all I need is to consult with some core dev about how to implement it as I fear tinkering with config files can break backwards compatibility.\r\n\r\nPs. please add to the proposal template some point like 'explain feature' (like I added at the top) I feel like I could fill current template and provide 0 information about what I want to do.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/37/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/36",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/36/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/36/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/36/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/36",
    "id": 489969189,
    "node_id": "MDU6SXNzdWU0ODk5NjkxODk=",
    "number": 36,
    "title": "Expose Easing equations",
    "user": {
      "login": "dacrystal",
      "id": 2936170,
      "node_id": "MDQ6VXNlcjI5MzYxNzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2936170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dacrystal",
      "html_url": "https://github.com/dacrystal",
      "followers_url": "https://api.github.com/users/dacrystal/followers",
      "following_url": "https://api.github.com/users/dacrystal/following{/other_user}",
      "gists_url": "https://api.github.com/users/dacrystal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dacrystal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dacrystal/subscriptions",
      "organizations_url": "https://api.github.com/users/dacrystal/orgs",
      "repos_url": "https://api.github.com/users/dacrystal/repos",
      "events_url": "https://api.github.com/users/dacrystal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dacrystal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-05T19:54:43Z",
    "updated_at": "2019-11-25T22:11:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Godot Version:** \r\n(3.1.1-stable)\r\n\r\n**Describe the project you are working on:**\r\nThe project I'm working on required the use of easing functions(the compute part of it) and not whole Tweening.\r\n\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nGodot already implemented Easing functions('interpolaters') internally for the use within Tween, but they are not exposed. I believe it would be helpful to have them expose \r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have already patched the Godot source to expose this functionality(see below). It is working for me (at least for my use-cases).\r\n\r\nI have added a method to Tween class and bind it, but it could be part of Math funcs or another namespace/class. \r\n\r\n\r\n\r\n```cpp\r\n\r\n//  tween.cpp\r\nVariant Tween::interpolate(Variant p_initial_val, Variant p_final_val, real_t p_elapsed, TransitionType p_trans_type, EaseType p_ease_type) {\r\n\t\r\n\r\n\t// convert INT to REAL is better for interpolaters\r\n\tif (p_initial_val.get_type() == Variant::INT) p_initial_val = p_initial_val.operator real_t();\r\n\tif (p_final_val.get_type() == Variant::INT) p_final_val = p_final_val.operator real_t();\r\n\r\n\tERR_FAIL_COND_V(p_initial_val.get_type() == Variant::NIL, false);\r\n\tERR_FAIL_COND_V(p_initial_val.get_type() != p_final_val.get_type(), false);\r\n\tERR_FAIL_COND_V(p_elapsed < 0, false);\r\n\tERR_FAIL_COND_V(p_trans_type < 0 || p_trans_type >= TRANS_COUNT, false);\r\n\tERR_FAIL_COND_V(p_ease_type < 0 || p_ease_type >= EASE_COUNT, false);\r\n\r\n\r\n\tInterpolateData data;\r\n\tdata.type = INTER_PROPERTY;\r\n\tdata.elapsed = p_elapsed;\r\n\tdata.initial_val = p_initial_val;\r\n\tdata.final_val = p_final_val;\r\n\tdata.duration = 1.0;\r\n\tdata.trans_type = p_trans_type;\r\n\tdata.ease_type = p_ease_type;\r\n\tdata.delay = 0;\r\n\r\n\tERR_FAIL_COND_V(!_calc_delta_val(data.initial_val, data.final_val, data.delta_val), false)\r\n\t\r\n\treturn _run_equation(data);\r\n}\r\n\r\nvoid Tween::_bind_methods() {\r\n\t...\r\n\tClassDB::bind_method(D_METHOD(\"interpolate\", \"initial_val\", \"final_val\", \"elapsed\", \"trans_type\", \"ease_type\"), &Tween::interpolate);\r\n\t...\r\n}\r\n```\r\n\r\n```GDScript\r\n# Example\r\nvar tween = Tween.new()\r\nprint(tween.interpolate(0, 1, 30.0/60, Tween.TRANS_LINEAR, Tween.EASE_IN))\r\nprint(tween.interpolate(0, 1, 30.0/60, Tween.TRANS_QUAD, Tween.EASE_IN))\r\nprint(tween.interpolate(5, 20, 30.0/60, Tween.TRANS_LINEAR, Tween.EASE_IN))\r\nprint(tween.interpolate(5, 20, 30.0/60, Tween.TRANS_QUAD, Tween.EASE_IN))\r\n\r\n# Output\r\n0.5\r\n0.25\r\n12.5\r\n8.75\r\n\r\n```\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOne might reimplement the easing functions in pure GDScript. I initially did that for some of the needed easing equation. \r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMost of the code already implemented in the core and it is a matter of exposing it",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/36/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/35",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/35/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/35/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/35/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/35",
    "id": 489910745,
    "node_id": "MDU6SXNzdWU0ODk5MTA3NDU=",
    "number": 35,
    "title": "Download export templates on the background",
    "user": {
      "login": "Juankz",
      "id": 18577412,
      "node_id": "MDQ6VXNlcjE4NTc3NDEy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/18577412?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Juankz",
      "html_url": "https://github.com/Juankz",
      "followers_url": "https://api.github.com/users/Juankz/followers",
      "following_url": "https://api.github.com/users/Juankz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Juankz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Juankz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Juankz/subscriptions",
      "organizations_url": "https://api.github.com/users/Juankz/orgs",
      "repos_url": "https://api.github.com/users/Juankz/repos",
      "events_url": "https://api.github.com/users/Juankz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Juankz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-05T17:50:17Z",
    "updated_at": "2019-11-25T22:11:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D traffic educational game, it matters for all projects tho\r\n**Describe how this feature / enhancement will help your project:**\r\nWhen downloading a export template from the editor can't close the dialog until it finishes the download (or else the download is lost), as the size is >400MB it takes some minutes, time where I can't work on the project.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIt can be a small download bar at the bottom Or/and a notification when the download has finished.\r\n\r\n![Untitled Diagram](https://user-images.githubusercontent.com/18577412/64364670-00d01300-cfd9-11e9-8b58-3dbfc2756f23.jpg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI'm not that familiar with godot source code\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nUsually I go to godot website, download the export templates and install from file, it works but it is not a seamless experience.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a one time use for each godot version. Downloading an addon is a worthless extra step. This can be low priority but I think would be a small welcome addition. If someone is willing to guide me I could code it",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/35/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/33",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/33/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/33/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/33/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/33",
    "id": 489859658,
    "node_id": "MDU6SXNzdWU0ODk4NTk2NTg=",
    "number": 33,
    "title": "An AudioWaveGenerator Node to produce frequency sounds",
    "user": {
      "login": "KoreTeknology",
      "id": 14902346,
      "node_id": "MDQ6VXNlcjE0OTAyMzQ2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14902346?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoreTeknology",
      "html_url": "https://github.com/KoreTeknology",
      "followers_url": "https://api.github.com/users/KoreTeknology/followers",
      "following_url": "https://api.github.com/users/KoreTeknology/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoreTeknology/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoreTeknology/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoreTeknology/subscriptions",
      "organizations_url": "https://api.github.com/users/KoreTeknology/orgs",
      "repos_url": "https://api.github.com/users/KoreTeknology/repos",
      "events_url": "https://api.github.com/users/KoreTeknology/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoreTeknology/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-09-05T16:06:59Z",
    "updated_at": "2020-06-19T12:20:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on:\r\nThe aim of this project is to add to the audio features a new type of node: Audio Wave generator, this node will produce a sound based on properties, related to audio synthesis.\r\n\r\n### Describe how this feature / enhancement will help your project:\r\nAt the minimal level, this node will get some basic settings: Waveforms, ADSR, rate, pitch\r\non a secundary level, the enveloppe feature can be extended\r\n\r\n### Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:\r\nhere is a preview:\r\n![newnode](https://user-images.githubusercontent.com/14902346/64358899-e8f29200-cfcc-11e9-8588-ba80cdeba08b.jpg)\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\nnot really, even with scripts, it is a bit more complicated as the node get some extra properties that will be mapped onto controllers or requests during animations..\r\n\r\n###Is there a reason why this should be core and not an add-on in the asset library?:\r\nThe main reason is that wave generation is a great advantage during creating beep, crunch and other fx... the sound processing is relevant for most of the games/app created today... apart from that, i would encourage to get this feature as a standard, a great help, even if you are doing proptotyping and not want to create or load samples. \r\n\r\nAbout the version of this, i would ask you to get some feedback about the choice to make an addon or a pure implementation in the audio core...please, let me know what you think...\r\ni didnt started yet to implement this, but i am used to do this kind of work in C++, maybe i should start... anyway, this feature can be done an other way, apart from loading a wavfile, but still, without the parameters\r\nHave a great day\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/33/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/29",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/29/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/29/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/29/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/29",
    "id": 489692215,
    "node_id": "MDU6SXNzdWU0ODk2OTIyMTU=",
    "number": 29,
    "title": "Add \"+/-\" shortkeys to edit variables in inspector ",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-09-05T11:26:26Z",
    "updated_at": "2020-09-07T19:51:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe enhancement of the existing feature:**\r\nTo change integer value in the Inspector you can:\r\n* Click into the field, drag mouse up/down or left/right to +1/-1. (Mouse) \r\n* Use buttons up/down near the field. (Mouse)\r\n* Click into the field, set new value. (Keyboard)\r\n\r\nIt would be great, if you can increment/decrement integer values using keyboard, like:\r\n* Click into the field, use up/down keys to +1/-1 (Keyboard)\r\n\r\nNow if you use up/down keys when you are editing the field it will set cursor position to begin/end of value (Which is not that useful in my opinion.)  \r\n![L5zTaFR](https://user-images.githubusercontent.com/54773665/64337520-37f9f080-cfe8-11e9-82ed-57b81eadc619.png)\r\n\r\nAs title says, this issue is about \"+/-\" short-keys, but in discussion below @girng [suggested](https://github.com/godotengine/godot-proposals/issues/29#issuecomment-528816057) a better way.\r\nI can't change the issue title.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/29/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/28",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/28/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/28/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/28/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/28",
    "id": 489690386,
    "node_id": "MDU6SXNzdWU0ODk2OTAzODY=",
    "number": 28,
    "title": "Multi screen support for Godot editor ",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 11,
    "created_at": "2019-09-05T11:22:21Z",
    "updated_at": "2020-08-03T12:52:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a simple platformer game Mario clone right now just to learn how to use the engine. \r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nMy set up has 2 monitors with possibility of expanding in to 3 in a future. I would like the ability for Godot editor to have multiple  un-dockable windows I can move around on my set up. Ideally I would be able to save configuration as a preset. This would make task of switching between room editor and code editor significantly easier. I could also have my inspector open in another screen without taking my monitor real estate. \r\n\r\nGenerally it would help me to have more things visible without needing to keep switching between them. I could have player scene open on right screen and level scene open on 2nd scene. I could have parent object open in one and child in other so I can better see all the available functions etc. Possibility with this are endless. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![Example](https://user-images.githubusercontent.com/30668026/64338425-9e2b4700-cfd9-11e9-9b2d-c6d00b57507b.png)\r\n\r\n\r\nI would see it working like here with [Game Maker workspaces](https://youtu.be/gBVL4ZKPals?t=389) \r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI have not enough coding experience to give technical knowledge on how to accomplish what I request but I expect this would require significant rework to editor code itself. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is enhancement that I would use 100% of a time while working on any project as it would help me to utilise more of a real estate I have in my current set up that is now just wasted space. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is something that majority of users would find useful it is a feature requested since [Godot 2.1 days](https://github.com/godotengine/godot/issues/9059) and if not in use would not interfere with single monitor workflow for others. \r\n\r\n*Bugsquad edit (keywords for easier searching): window, pop out, popout, pop up, popup*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/28/reactions",
      "total_count": 74,
      "+1": 69,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/25",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/25/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/25/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/25/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/25",
    "id": 489540918,
    "node_id": "MDU6SXNzdWU0ODk1NDA5MTg=",
    "number": 25,
    "title": "Exclude certain folders from search/quick scene",
    "user": {
      "login": "TheFlamyy",
      "id": 8056898,
      "node_id": "MDQ6VXNlcjgwNTY4OTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8056898?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheFlamyy",
      "html_url": "https://github.com/TheFlamyy",
      "followers_url": "https://api.github.com/users/TheFlamyy/followers",
      "following_url": "https://api.github.com/users/TheFlamyy/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheFlamyy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheFlamyy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheFlamyy/subscriptions",
      "organizations_url": "https://api.github.com/users/TheFlamyy/orgs",
      "repos_url": "https://api.github.com/users/TheFlamyy/repos",
      "events_url": "https://api.github.com/users/TheFlamyy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheFlamyy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-05T05:50:52Z",
    "updated_at": "2020-12-07T14:09:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** \r\nI'm working on a project relying on a few addons and a lot of scenes which won't are used as \"base classes\"\r\n\r\n**Describe how this feature / enhancement will help your project:** \r\nCurrently typing something into the file system's search bar will find any result - also addon related data, which shouldn't be modified/used as is. The same issue occurs when using the quick scene button. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nPreviously, an option in the project settings e.g. \"exclude addons\" would have been sufficient. Thinking about it, the ability to exclude any folder would be more beneficial. Either through the project settings menu (navigating to the folder), adding a custom file (like .gdignore) or inside the file system's context menu (right click > Disable/Enable from search)\r\n\r\nA discussion/further details about the current implemention would help to clarify the right solution.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have glanced over the code for the search bar. It should be able to check whether or not the folder is inside a \"blacklist\" in order to check for exclusion.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure it's possible to implement right now, since some editor functionalities are seemingly hard-coded.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit would mostly benefit work-flows. Thus I doubt it's reasonable to make these features \"discoverable\" instead of part of the main \"framework\".\r\n\r\n_Side note: This issue has been moved from the \"old tracker\" godotengine/godot#24794_\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/25/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/24",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/24/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/24/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/24/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/24",
    "id": 489527993,
    "node_id": "MDU6SXNzdWU0ODk1Mjc5OTM=",
    "number": 24,
    "title": "Add an option to apply blendshapes and generate a MeshInstance",
    "user": {
      "login": "Lexpartizan",
      "id": 48552343,
      "node_id": "MDQ6VXNlcjQ4NTUyMzQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48552343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexpartizan",
      "html_url": "https://github.com/Lexpartizan",
      "followers_url": "https://api.github.com/users/Lexpartizan/followers",
      "following_url": "https://api.github.com/users/Lexpartizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexpartizan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexpartizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexpartizan/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexpartizan/orgs",
      "repos_url": "https://api.github.com/users/Lexpartizan/repos",
      "events_url": "https://api.github.com/users/Lexpartizan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexpartizan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 46,
    "created_at": "2019-09-05T04:57:53Z",
    "updated_at": "2020-08-29T13:40:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI trying make in-game character generator for godot from project MakeHuman. Like Skyrim or Fallout 3-4.\r\nhttps://github.com/Lexpartizan/Go_MakeHuman_dot/\r\nhttps://www.youtube.com/watch?v=cPVjNh2Ki4I\r\nI make blend-file with one model with 200+ shapekeys. Importing to Godot.\r\nI need setup blendshapes value and customize the appearance of the character.\r\nI can this and on my github page have godot project with this example.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nThen applying all shapes and generate MeshInstance without blend_shapes, because file with blendshapes for each character takes up a lot of memory space.\r\n\r\nMesh after import to Godot with all shapekeys- 100 Mb.\r\nBut, you need make resource local for different characters.\r\n1 character on screen - 100 Mb video-memory. This is only vertex - memory.\r\n10 character on screen - 1Gb video-memory.\r\nWithout blendshapes - 1 character only 2,5 Mb. Zombie rush possible! And each zombie unique. \r\nAAA-feature with one small function.\r\n\r\nAnd i dont know how make that. I don't even know if this is possible. \r\nSo, this feature request.\r\nI think the character generator is a very important part of many role-playing games and its effective implementation it just depends on whether it is possible to apply shapekeys and get ready a small version of this mesh. Inefficient it is already working and can be used in games with a small number of characters in the frame, for example in fighting games.\r\nI can make this in blender, but for in-game character generator this must be maked via code.\r\nI asked this question on forums, discord, Q&A, etc and did not get an answer.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause this is the basic function for working with the mesh. And other functions to work with blendshape already have.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThat's possible. So I want to know these lines ;-).\r\n\r\nNow I have the nerve to ask a question already on a github. Sorry for that. And sorry for my english. I hope you could understand the problems from this vague description.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/24/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/23",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/23/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/23/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/23/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/23",
    "id": 489506365,
    "node_id": "MDU6SXNzdWU0ODk1MDYzNjU=",
    "number": 23,
    "title": "Ability to change order of elements in export (Array)",
    "user": {
      "login": "JustYourAverageJosh",
      "id": 47060866,
      "node_id": "MDQ6VXNlcjQ3MDYwODY2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/47060866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustYourAverageJosh",
      "html_url": "https://github.com/JustYourAverageJosh",
      "followers_url": "https://api.github.com/users/JustYourAverageJosh/followers",
      "following_url": "https://api.github.com/users/JustYourAverageJosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustYourAverageJosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustYourAverageJosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustYourAverageJosh/subscriptions",
      "organizations_url": "https://api.github.com/users/JustYourAverageJosh/orgs",
      "repos_url": "https://api.github.com/users/JustYourAverageJosh/repos",
      "events_url": "https://api.github.com/users/JustYourAverageJosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustYourAverageJosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-05T03:21:20Z",
    "updated_at": "2019-11-25T22:11:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAny project that uses an export (Array). for example an export (Array, PackedScene)\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nIf I need to iterate through array, but need it to be in a certain order, and I want to add an element (in this case a packedscene) at a certain index. Right now I have to erase every element until I get to the index I want, insert the new element, then reinsert every element after.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nCurrent:\r\n![export_array](https://user-images.githubusercontent.com/47060866/64309314-2a058a80-cf6a-11e9-9d39-63d392c571c3.png)\r\n\r\nThere are a few ways to add this, for example:\r\n-arrows next to the element index number to move it up or down the array\r\n-Being able to drag the elements to sort them (however would not work with more than 1 page)\r\n-Editable index number that will re-arrange elements according to the number you change it to\r\n-\"Insert at index #\" option at top of the array\r\n![export_array_new](https://user-images.githubusercontent.com/47060866/64309321-2eca3e80-cf6a-11e9-94c7-2c05070ac549.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSorry, I'm not sure how it would be implemented in code :(\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** \r\n\r\nPossibly, for example by making a new export var and, in code, inserting that var to the export array at the index you want, but the point of exports are to be able to change it through the inspector right?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, this is a enhancement to the already implemented export arrays, which makes them easier to edit.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/23/reactions",
      "total_count": 23,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/22",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/22/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/22/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/22/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/22",
    "id": 489505044,
    "node_id": "MDU6SXNzdWU0ODk1MDUwNDQ=",
    "number": 22,
    "title": "Complete, consolidate, and optimize user-defined types (Script classes/Custom types)",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-09-05T03:15:23Z",
    "updated_at": "2020-05-04T07:52:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI work on plugins and editor changes. Both involve creating editing tools for types within Godot's API and they currently support two different, highly divergent systems that don't both need to exist.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nThe engine's codebase splits user-defined types between Custom Types and Script Classes. The newer, superior Script Class system has not yet been fully implemented for all languages and therefore results in things needing to account for both user-defined \"named\" types. This further complicates any and all type-checking logic in the editor.\r\n\r\nFor the purposes of cleaning up the codebase and simplifying the implementation of future engine features, I propose that we...\r\n\r\n1. Add script class support to VisualScript.\r\n2. Add script class support to CSharpScript.\r\n3. Remove the Custom Type system and all references to it from the codebase.\r\n4. Optimize the slowness of the CreateDialog that occurs when you add too many script classes to your project (as demonstrated in [this gif](https://gfycat.com/miserlypointlessbarb), shared by @HeartoLazor in [this comment](https://github.com/godotengine/godot/pull/27566#issuecomment-488160151)).\r\n5. Enable all scripting languages, not just GDScript, to access globally accessible variables for script classes (either global variables or things accessed statically through a namespace/singleton/etc.).\r\n6. Prevent disabled plugins' script classes from clogging up the global namespace.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nAn interim PR that simply refactored Custom Types to be accessible by name, and which also optimized the CreateDialog can be found [here](https://github.com/godotengine/godot/pull/27566). @HeartoLazor also shared [this gif](https://gfycat.com/wastefulharmlessislandcanary) of the PR correctly optimizing the CreateDialog as needed, although with some other bugs related to autoloads. We would need to fix those bugs and split the work between 4 separate PRs that each introduces one of the features in isolation for testing purposes.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. **VisualScript script classes:**\r\n    1. Add GUI elements to the VisualScript editor for defining an optional \"class_name\" and \"class_icon\" for a VisualScript.\r\n    1. Implement `VisualScriptLanguage::get_global_class_name` to extract the values of these properties and return them to the EditorFileSystem for generating script class names.\r\n2. **CSharpScript script classes:**\r\n    - Note: I haven't the foggiest idea how any of this stuff works!\r\n    1. Implement `CSharpScript::get_base_script()`. This is frequently how the editor language-agnostically tracks inheritance hierarchies for scripted types, so I believe this would need to correctly return a Script object that refers to the parent class of the CSharpScript.\r\n    1. Implement a class-level attribute for ClassName and ClassIcon.\r\n    1. Implement `CSharpScriptLanguage::get_global_class_name` to extract the values for this attribute and return them to the EditorFileSystem for generating script class names.\r\n3. **Custom Types removal:**\r\n    1. Find and refactor away all code that references \"CustomType\" anywhere.\r\n4. **CreateDialog optimization:**\r\n    - The slowness is triggered from attempting to quickly rebuild the entire Tree GUI that renders the inheritance hierarchy of all types that exist AND...\r\n    - When attempting to search for a type by subsequence match, it not only rebuilds the Tree again on every character change in the LineEdit, but it also performs additional inheritance checks on the matching classes against every inherited class of the currently preferred type (on [this line](https://github.com/godotengine/godot/blob/master/editor/create_dialog.cpp#L356)) which only reduces the speed of building the Tree even further.\r\n    - To solve this, one must do the following:\r\n    1. Start rebuilding and caching the inheritance hierarchies used to build the Tree as early as possible, after every script class refresh in the EditorFileSystem.\r\n    1. The first step involves determining which classes should even show up in the Tree, so all of the logic of filtering out classes that happens [here](https://github.com/godotengine/godot/blob/master/editor/create_dialog.cpp#L333) can also be moved elsewhere to be processed ASAP rather than on every Tree rendering.\r\n    1. The code for [handling Custom Types](https://github.com/godotengine/godot/blob/master/editor/create_dialog.cpp#L370) can be stripped out.\r\n    1. The re-occurring ternary `if cpp_type do ClassDB else do EditorData::script_class stuff` logic should be refactored to dedicated EditorData methods, such as in [this existing \"export Resources\" PR](https://github.com/godotengine/godot/pull/26162/files#diff-a8f630717e57fce152a8ea5fbb326d99R856).\r\n    - I believe the problem is figuring out WHEN to actually execute these CreateDialog caching operations without triggering problems in other parts of the editor since I *suspect* that is the reason for the autoload issues that @HeartoLazor mentions in [his comment](https://github.com/godotengine/godot/pull/27566#issuecomment-488160151) (linking again for convenience).\r\n5. **Add global script class references for all languages:**\r\n    - I'm not sure how each language sets up global variables yet, but here we go.\r\n    1. For VisualScript, assuming it has a similar system to that of GDScript, you can probably just add to the global constants embedded in the VisualScriptLanguage like GDScriptLanguage and then make sure that an existing VisualScript node exposes access to global variables (one probably already exists by my guess).\r\n    1. For CSharpScript, I suspect we would want to add the script classes as constants in the GD namespace, similar to other \"global\" methods in the @GDScript documentation. So, a script class with the name \"MyClass\" would become a constant of type Script that exists at `Godot.GD.MyClass`.\r\n    1. For NativeScript, the GDNative bindings API would likely need some sort of string-based map for accessing the data statically, i.e. `ScriptClasses::get(\"MyClass\")`. I'm not sure how all that would be done, but it's worth looking into.\r\n6. **Do not bloat global namespace with disabled plugins' script classes:**\r\n    - As of right now, if someone installs a plugin, but does not have it active, the identifier for the script still clogs up the global namespace at runtime, even though the type is hidden from the CreateDialog. Those types should never end up registered as script classes in the first place.\r\n    1. When the EditorFileSystem is refreshing the engine's list of script classes, strategically omit from those updates any script whose path lies within a `res://addons/**` subdirectory and whose relevant plugin has an inactive status in the ProjectSettings.\r\n    - When any part of the engine updates the registration status of an EditorPlugin, the code must also instruct the EditorFileSystem to refresh its list of script classes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nUhh....no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt involves extensive changes to multiple scripting languages and editor classes that already exist in the main repository. An addon cannot provide the necessary alterations.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/22/reactions",
      "total_count": 50,
      "+1": 37,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 13,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/19",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/19/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/19/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/19/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/19",
    "id": 489461040,
    "node_id": "MDU6SXNzdWU0ODk0NjEwNDA=",
    "number": 19,
    "title": "API for custom input event injection, to support additional input devices (multiple mice, spinners, trackballs, VR controllers, pen digitizers...)",
    "user": {
      "login": "davthedev",
      "id": 26961646,
      "node_id": "MDQ6VXNlcjI2OTYxNjQ2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26961646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davthedev",
      "html_url": "https://github.com/davthedev",
      "followers_url": "https://api.github.com/users/davthedev/followers",
      "following_url": "https://api.github.com/users/davthedev/following{/other_user}",
      "gists_url": "https://api.github.com/users/davthedev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davthedev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davthedev/subscriptions",
      "organizations_url": "https://api.github.com/users/davthedev/orgs",
      "repos_url": "https://api.github.com/users/davthedev/repos",
      "events_url": "https://api.github.com/users/davthedev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davthedev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-09-04T23:56:41Z",
    "updated_at": "2020-06-26T18:52:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n**A multiplayer pong / brick-breaker.** Those games are best played with so-called spinners, which are infinite rotary controllers.\r\nThose spinners are often plugged to the computer through an HID board, and seen as a one-axis mouse by the system.\r\n\r\nFor multiplayer capability, I need multiple mice support on the same machine, with distinction between each individual mouse / pointing device.\r\n\r\nThe current challenge in the existing situation is the following:\r\nYou can actually plug multiple mice on the same computer, but the OS will only render one mouse pointer. Its movement will be the average of all mice combined together.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nEach individual mouse connected to the computer would be individually readable : movement, button presses, scroll wheel ticks. It would be possible to list available mice, monitor newly plugged mice and unplugged ones, like it is done with the joypads.\r\n\r\nThis possibility makes the following multiplayer game controls possible: \r\n\r\n- Pong / two-player Arkanoid-like in versus mode. Each mouse moves one paddle.\r\n- Old-school rail shooters (think House of the Dead) where each player moves its own crosshair with its assigned mouse\r\n- Old-school multiplayer car racing games, where the steering wheel on the arcade cabinet was nothing else than a spinner with a steering-wheel-shaped knob.\r\n- Trackball games like Segasonic (two-player game, each player has a trackball, the player has to roll the trackball as fast as possible to make the character run in the game)\r\n- Multiplayer marble games\r\n- Collaborative construction games. One notable example is World of Goo, where the multiple mice library mentioned below was actually used\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nThere is an existing library for that, which is lightweight and abstracts the low-level mice reading on major operating systems : ManyMouse. It is very minimal in its design, which should make it suitable for not bloating Godot. We appreciate how light Godot is and should remain so.\r\nSee here: https://icculus.org/manymouse/\r\n\r\nI successfully integrated the library on a custom Godot build (older version) as a C++ module. My implementation does the following:\r\n\r\n- Part of the ManyMouse API is exposed as GDScript bindings (not all API as it is a proof-of-concept, only the most essential one for now)\r\n- Some custom GDScript code in the project receives the events, bundles the mouse movement events into less frequent, added-up, and propagates them as signals\r\n- Game objects / kinematic bodies that need to move with mice inputs receive the signals\r\n\r\nThis implementation works, but has some flaws.\r\nIt bloats the signals pipeline. I run it on a Predator Helios 300 (powerful gaming laptop). As long as the mains is connected, everything runs fine. When I switch to battery, the computer may enter a power saving mode and all the game starts stuttering, certainly due to the signals overloading.\r\n\r\nIn addition, it makes redundant mice management as the normal Godot mouse event API is still around. Thus, we receive the mouse clicks in double, one in the custom multi mouse layer then one in the Godot mouse event API.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, since it is the integration of a C++ library that adds new input capabilities.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI developed the concept as a C++ module. On my situation, it works but has the flaws listed above.\r\nEspecially, I have not found yet how to inject custom events into the input event processing pipeline instead of using signals. This would be much more efficient.\r\n\r\nImplementing the feature as an add-on would make sense, maybe. But, is it technically feasible today?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/19/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/18",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/18/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/18/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/18/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/18",
    "id": 489444441,
    "node_id": "MDU6SXNzdWU0ODk0NDQ0NDE=",
    "number": 18,
    "title": "Add first-class custom resource support",
    "user": {
      "login": "somnivore",
      "id": 28724859,
      "node_id": "MDQ6VXNlcjI4NzI0ODU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28724859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somnivore",
      "html_url": "https://github.com/somnivore",
      "followers_url": "https://api.github.com/users/somnivore/followers",
      "following_url": "https://api.github.com/users/somnivore/following{/other_user}",
      "gists_url": "https://api.github.com/users/somnivore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somnivore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somnivore/subscriptions",
      "organizations_url": "https://api.github.com/users/somnivore/orgs",
      "repos_url": "https://api.github.com/users/somnivore/repos",
      "events_url": "https://api.github.com/users/somnivore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somnivore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 34,
    "created_at": "2019-09-04T23:02:26Z",
    "updated_at": "2020-10-25T21:14:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nData-heavy RPG\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI have a lot of different structures in my game which represent various different things, such as healing items, equipment, party members, item/character stats, enemies, and so on.  To make it easy for designers/modders to add and change this data, these are represented through extending `Resource`, which, combined with `class_name`, allows you to easily create `.tres` files containing exported variables that can be assigned to in the inspector.  So to modify data, one can double-click some file in the file system, glance over to the inspector, and easily change properties this way, leveraging all the various options associated with `export`.\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/64288550-06b9eb80-cf28-11e9-9e37-2f9e88da1551.png)\r\n\r\n\r\nThis works, but only up to a point.  Let's say, I now want all of my party members, equipment, and enemies to have a set of stats associated with them.  I can write a stats class like so:\r\n\r\n```\r\nextends Resource\r\nclass_name Stats\r\n\r\nexport var strength: float\r\nexport var defense: float\r\n...more stats\r\n```\r\n\r\nAnd now I can just do the following in all the associated scripts, and get to modify that data as I would with any other resource:\r\n```\r\nexport(Stats) var stats = Stats.new()\r\n```\r\n\r\n...except, unfortunately, that doesn't work, as Godot will throw an error about not recognizing `Stats` as a `Resource`, though we see that Stats, due to extending Resource, should count as one.  This works with any resource the engine ships with:\r\n\r\n```\r\nexport(Texture) var tex\r\nexport(AudioStream) var stream\r\nexport(Shape2D) var shape\r\n```\r\n\r\nAnd you even get a little menu to create a new resource:\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/64289224-7b415a00-cf29-11e9-95c1-31c00428c479.png)\r\n\r\nBut, sadly, the engine rejects `Stats` as being something entirely different.  If there was support for this kind of resource, we should be able to see a menu something like this, after the menu to create a new `Stats` resource:\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/64289889-ab3d2d00-cf2a-11e9-933d-729e53dda628.png)\r\n\r\nWhich would alleviate all the work-arounds outlined below.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n```\r\nexport(Stats) var stats\r\nor\r\nexport var stats: Stats\r\n```\r\n\r\n![stats_mock](https://user-images.githubusercontent.com/28724859/64290722-41be1e00-cf2c-11e9-909b-d27c5d693d8b.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIn short: no, just the opposite, it requires a lot more code to be written to work around this inhibition, or requires a tedious process to add a custom resource to the inspector.\r\n\r\nThe fundamental issue is the current inability for the user to simply export a resource of their own creation.  We are left with the following options:\r\n\r\nBrute Force\r\n```\r\n#unnamed and unstructured, no guarantees of anything\r\nexport(Array, float) var stats\r\nexport(Array, Array, String) var combat_messages\r\n#this one's especially painful, where you need multiple types in one array\r\nexport(Array) var mixed_data\r\n#...but nothing compares to this, besides the dictionary variation\r\nexport(Array, Array) var lots_of_mixed_data\r\n\r\n#named but unstructured, and you have to name them for every dictionary added in the latter example, no autocomplete\r\nexport(Dictionary) var stats := {\"strength\" : 0.0, \"defense\" : 0.0, ...}\r\nexport(Array, Dictionary) var god_help_you_if_you_do_this\r\n```\r\n\r\nThe OmniResource\r\n```\r\n#named, structured, autocompleted (if you cast)\r\n#necessitates a process where you create the custom resource then copy it over (after scrolling through the ginormous list of resources this gives you), or save it to the system and drag and drop\r\nexport(Resource) var not_as_it_seems\r\n```\r\n![image](https://user-images.githubusercontent.com/28724859/64293195-bb0c3f80-cf31-11e9-8fed-ca3ae7c4fc22.png)\r\n\r\n\r\nDo Repeat Yourself\r\n```\r\n#player_character.gd\r\nexport var strength: float\r\nexport var defense: float\r\n...\r\n\r\n#enemy.gd\r\nexport var strength: float\r\nexport var defense: float\r\n...\r\n\r\n#equipment.gd\r\nexport var start_strength: float\r\nexport var start_defense: float\r\n...\r\nexport var upgraded_strength: float\r\nexport var upgraded_defense: float\r\n...\r\n```\r\n\r\nForget About It!\r\n```\r\n#my_character.gd\r\nfunc get_character() -> PlayerCharacter:\r\n    var player_character = PlayerCharacter.new()\r\n    player_character.stats = Stats.new()\r\n    player_character.stats.strength = 7\r\n    ...\r\n    return player_character\r\n\r\n#character_defs.gd\r\nfunc get_characters() -> Array:\r\n   ...\r\n\r\n#loader.gd\r\nfunc load_character(path_to_json) -> PlayerCharacter:\r\n    ...turning json back into an object logic...\r\n```\r\n\r\nThere's the opportunity to build an inspector plugin or use `_get_property_list()`, both of which require quite a bit of code and technical know-how, on a per-resource basis.  Based on what people have told me in the discord, it's a painful process (at least with property list) which they seek to avoid in the future.  We could also go into C++ land and build modules for the engine to understand our data types, but again, it's a lot of code, and beyond the skill level of many of us who haven't delved into the engine code (assuming we know C++ at all); even if it were easily understood by anyone, or you know what you're doing, it's still many magnitudes more work than `export var my_res: MyRes` working out of the box.\r\n\r\nIt takes a lot of code, or unsafe code, or bad programming practices, or a tiresome process to make up for functionality that Godot already provides, leaving many of us to reinvent the wheel time and time again if we want this functionality.  If exporting a custom resource Just Worked, lots of time, energy and headaches would be saved.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't believe first-class support for custom resources would constitute as bloat.  I believe it's an essential but missing feature for all games which require any kind of user-created resource type, for anyone who needs to export a bundle of named data with type safety, for anyone who wants to associate their own resource type with their own node type, for anyone who needs complex but easily modified data saved to disk; since virtually every game made with Godot makes use of Resources, every developer would benefit from this, if not by a little, by a lot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/18/reactions",
      "total_count": 212,
      "+1": 171,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 29,
      "rocket": 0,
      "eyes": 12
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/14",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/14/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/14/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/14/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/14",
    "id": 489022033,
    "node_id": "MDU6SXNzdWU0ODkwMjIwMzM=",
    "number": 14,
    "title": "Change editor view panel UI",
    "user": {
      "login": "lentsius-bark",
      "id": 38346332,
      "node_id": "MDQ6VXNlcjM4MzQ2MzMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38346332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lentsius-bark",
      "html_url": "https://github.com/lentsius-bark",
      "followers_url": "https://api.github.com/users/lentsius-bark/followers",
      "following_url": "https://api.github.com/users/lentsius-bark/following{/other_user}",
      "gists_url": "https://api.github.com/users/lentsius-bark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lentsius-bark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lentsius-bark/subscriptions",
      "organizations_url": "https://api.github.com/users/lentsius-bark/orgs",
      "repos_url": "https://api.github.com/users/lentsius-bark/repos",
      "events_url": "https://api.github.com/users/lentsius-bark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lentsius-bark/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 34,
    "created_at": "2019-09-04T08:40:49Z",
    "updated_at": "2020-06-20T15:51:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I visit the IRC at times and the last time I was there I noticed an interesting discussion about the UI and UX, and how it's not always clear to the user that the extra icons are related to the tool. I was just working on a project and looked at the UI and thought \"hm... let me give this a go.\"\r\n\r\nI love UI and UX and so...\r\n\r\n## ...you know this guy?\r\n![original-highlighted](https://user-images.githubusercontent.com/38346332/64234434-9fd00e80-cef6-11e9-9093-cf7ec9b839aa.jpg)\r\n*Nasty little fella right? I lived a year without ever noticing this button.*\r\n\r\n## What if we made it longer?\r\n\r\n**awesome**, **collapsible** and **put all the options from the top panel there instead**? Moved the **view** button next to the \"distraction-free\" toggle away from the top panel? *Kinda makes sense to have the two buttons together.*\r\n\r\n### But one panel's not enough, let's make it into two!\r\n 1. options that persist \r\n 2. tool related options (curve tools in the example below)\r\n\r\n### Properties of the panels\r\n- panel one combines the view options with camera settings\r\n- panel two makes tool options consistent with the style of panel one (great for making users understand how to use it)\r\n- they are transparent (0.66?) and go full opacity on mouse over\r\n- only visible in the view last visited by the mouse\r\n\r\n## The idea\r\n![Panels01](https://user-images.githubusercontent.com/38346332/64234611-fe958800-cef6-11e9-98e9-505d0ca1677a.jpg)\r\n\r\n## Collapsed\r\n![Panels02](https://user-images.githubusercontent.com/38346332/64234614-01907880-cef7-11e9-9f33-ad45dd692347.jpg)\r\n\r\n## Close up\r\n![CloseUpCOncept](https://user-images.githubusercontent.com/38346332/64237444-abbecf00-cefc-11e9-8e5f-aa408ad7caf3.jpg)\r\n\r\n\r\n## The good stuff\r\n- noticing tool related options becomes more intuitive \r\n- more screen estate for the view\r\n- can be collapsed(hidden)\r\n- tool options get their own panel, that's **awesome**.\r\n\r\n## The not-so-good stuff\r\n- Godot doesn't have anything of the sort at the moment\r\n- If someone accidentally closes it, might not be instantly evident that the options were there\r\n- changes a something that's been the same for a long time now.\r\n\r\n## Questions\r\n**Q: Doesn't it waste space and make the minimum width larger than before?**\r\nA: Actually this would mean that the two panels can be placed on top of each other, **saving space instead**:\r\n_notice how the the view options button is right next to distraction-free toggle_\r\n![PanelsShort](https://user-images.githubusercontent.com/38346332/64234889-8aa7af80-cef7-11e9-8e6a-5835aa58087c.jpg)\r\n\r\n**Q: Won't it be distracting to see it on all four views in splitview mode?**\r\nA: Not if we made it only visible in the view most recently 'mouse-overed'\r\n\r\n## Conclusion\r\nYou know this is not something I need for a project I'm working on, it would however feel like a great UX improvement. Especially the ability to hide it when not needed.\r\n\r\nI wouldn't be able to make a pull-request nor code it myself. This is a proposal where I hope to discuss whether this would be a welcome change and if so hopefully someone capable picks it up.\r\n\r\nThanks for checking this out! Turned out longer than I had thought it would.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/14/reactions",
      "total_count": 159,
      "+1": 91,
      "-1": 2,
      "laugh": 0,
      "hooray": 23,
      "confused": 0,
      "heart": 24,
      "rocket": 8,
      "eyes": 11
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/13",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/13/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/13/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/13/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/13",
    "id": 488895818,
    "node_id": "MDU6SXNzdWU0ODg4OTU4MTg=",
    "number": 13,
    "title": "Add a Spreadsheet resource for handling tabular data",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 20,
    "created_at": "2019-09-04T01:37:46Z",
    "updated_at": "2020-10-25T22:02:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAn RPG project in which characters and abilities have a variety of stats. For now, they are painstakingly edited as individual resources. We at one point experimented with importing CSV/TSV files, but the fact that the data is all strings and had to be separately maintained in another application get too frustrating to deal with.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nHaving a type-safe tabular data editor integrated into Godot would greatly improve the editing, designing, and balancing work of the team.\r\n\r\n- Using an external spreadsheet editor does not provide any sort of type-safety.\r\n- The external editors do not have type-aware property editors for individual cells based on the data type.\r\n- While both Godot and external spreadsheet editors offer a means of defining a cell's value as an expression/function, the API for doing so is different. Therefore, logic must be shared and maintained between both software applications, resulting in cross-application code duplication.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis concept is very similar to the UE4 DataTable asset type, which I drew pieces from in order to create the mockup. In this example, there is a \"skill_data.gd\" resource script that is constraining the resource instances and consequent editors available for the fields in the spreadsheet editor. You use the bottom panel to view/add/delete/select resources and use the Inspector to edit the fields of those resources.\r\n\r\n![spreadsheet_mockup](https://user-images.githubusercontent.com/16217563/64219253-6366c900-ce8a-11e9-9181-b0bd16ec995f.png)\r\n\r\nNote that...\r\n\r\n1. a selected record would show up in a sub-Inspector in the Spreadsheet's Inspector.\r\n2. You'd be able to attach a script to the Spreadsheet that would display read-only aggregate values in exported script properties for the whole data set.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Create a means of exporting type reference as a property, constrained by a parent type. In this use case, a \"Resource type\" is needed.\r\n    - The custom editor manages instances of an arbitrary resource type and displays the name of the type to the user. Users should be able to specify an engine type or a user-defined type.\r\n    - As a workaround, one could export a String and a Script, respectively, but this involves a lot of code bloat boilerplate since there are two properties that are used to represent a single conceptual value that the engine simply doesn't yet have a means of representing at this time. It makes the code's intent less clear and needlessly complicates the structure of the class.\r\n    - In this use-case, the specified class/script must also extend Resource, so the type must also be constrained to those which derive Resource. This means logic in the String or Script assignment would have to be written that validates whether the provided type refers to a valid Resource type, using `ClassDB.is_parent_class(...)` on both the provided String and the Script's `get_instance_base_type()` result.\r\n    - A single export option that implements this logic would make far more sense to have as part of the engine.\r\n\r\n1. Create a \"Resource type\" called Spreadsheet that maps a primary key StringName to a Resource type (in-engine type or scripted type). Without a type defined for the Spreadsheet, it will not accept the insertion of any records.\r\n\r\n1. Have the primary key be defined, by default, as an auto-incremented ID number, but optionally allow users to override a virtual method in the Spreadsheet class that derives a primary key from the Resource record. This way, users can decide which property/composite string/other logic is used to decide what the primary key of a record is.\r\n\r\n1. Create a ResourceImporter that can convert a CSV/TSV file into a Spreadsheet resource. A valid \"Resource type\" must be specified to use for the conversion.\r\n    - All column names that match up with a property name on a specified class will be merged over to the generated \"Resource type\" instances. Print warnings to notify the user of columns that failed to migrate.\r\n\r\n1. Create a bottom panel editor that renders a tabular set of data and provides a toolbar for interacting with the records.\r\n\r\n    - Support adding/removing records\r\n    - Change the \"Resource type\" of records in the Spreadsheet\r\n    - Optionally import/export individual records as their own \\*.tres files.\r\n\r\nI recommend writing a spreadsheet module that includes a C++-based plugin for the ResourceImporter and bottom panel editor. The only changes to the engine core that would be optional, yet ideal, is the implementation of the exportable \"Resource type\" functionality.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis cannot be worked around with just a few lines of script. It would involve a new resource type, a detailed set of editor changes, and a new export functionality, outlined above.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAside from the fact that lots of people use spreadsheets for large-scale data editing / balancing purposes and having an integrated editor that supports Godot-specific data structures would be great to have built into the editor?\r\n\r\nAll of the functionality outlined above *could* be achieved through an EditorPlugin *except* for the \"Resource type\" concept. And if that were implemented as its own standalone feature in the engine, the rest of it could go into an external plugin. But I believe the use-case (editing tabular data related to Godot projects, built upon Godot data structures) is far-reaching enough that it is something that should be included in the engine itself.\r\n\r\nEdit: Updated to use the new ISSUE_TEMPLATE.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/13/reactions",
      "total_count": 38,
      "+1": 31,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/12",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/12/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/12/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/12/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/12",
    "id": 488798943,
    "node_id": "MDU6SXNzdWU0ODg3OTg5NDM=",
    "number": 12,
    "title": "Enable plugins to integrate arbitrary 3rd-party data sources to the AssetLib tab",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-03T20:09:50Z",
    "updated_at": "2020-05-04T07:46:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI frequently work on plugins for Godot and need direct access to repositories stored on GitHub without having to wait for updates to come through in the Asset Library.\r\n\r\nI also have an RPG project I am working on for which it would be useful if assets from third-party vendors like Sketchfab and Itch.io could have integrated catalogs out-of-the-box, without having to re-invent the wheel by implementing their own GUI infrastructure to handle all the work of providing an interface to their data.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nWe should refactor the Asset Library to more easily accommodate alternative visualizations and web APIs that can plug-n-play with the Asset Library tab in the editor.\r\n\r\nBenefits:\r\n\r\n1. Users could have more direct access to assets through a GitHub/GitLab/BitBucket plugin. This goes as well for their own assets when they are waiting for the Asset Library to get modifications approved, but applies just as much to assets that aren't even present on the Asset Library.\r\n\r\n1. Users working on game projects would have one comfy editor tab with which to download and install assets from a variety of vendors across the Internet.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThese are just sample visualizations of how a given AssetLibrary plugin could choose to render their content inside Godot's Asset Library tab.\r\n\r\nSketchfab's main screen plugin that creates an entirely alternative AssetLib tab exclusively for Sketchfab assets. These have a gallery-esque rendering with a staff pick filter:\r\n![37650422-2e4c975c-2c35-11e8-8bf0-5cb6f3c972b7](https://user-images.githubusercontent.com/16217563/64208064-9d70a480-ce63-11e9-919a-410c530a3c42.jpg)\r\n\r\nNote how the Sketchfab view is rendered in a separate main screen viewport rather than the existing Godot Asset Library tab:\r\n![37650349-fabdf0e8-2c34-11e8-8c89-f7ecf5210472](https://user-images.githubusercontent.com/16217563/64208991-0c9ac880-ce65-11e9-8fb5-254c643caecf.jpg)\r\n\r\nVS Code's extensions tab. Has a list/markdown rendering with download counts and other detailed information about the project:\r\n![1_A5QkBnJud6oEsFGkD3iKFA](https://user-images.githubusercontent.com/16217563/64208132-c85af880-ce63-11e9-911f-458e243be1ab.jpeg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nNot entirely sure what all would need to be changed (we kinda need a proof-of-concept demonstration that, for example, could show what a GitHub integration looks like). I do know that the way things are rendered is tailor-made for the exact data that the Godot Asset Library (GAL) stores (such as X/5 star ratings rather than # of Star counts in GitHub, etc.). Different Web APIs may also provide varying amounts of information, potentially a lot more information than the GAL stores, so new fields that provide more detail about an asset are also possible. We won't know more until we start exploring the various Web APIs out there. Either that, or come up with a more generic version that can arbitrarily pretty-render JSON data associated with an asset.\r\n\r\nIn addition, different asset sources can benefit from alternative renderings that we could make available from the same data backend. For example, GitHub and the VS Code extensions (screenshotted above), which are more code-based platforms, use a list combined with a Markdown-rendered panel since it is an industry-standard practice to use README.md files to describe all of the necessary information about a project. Contrasting with this are the more visual mediums like Sketchfab (screenshotted above) and Itch.io that could benefit from a more gallery-esque front-end.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around in the sense that one can add docks/bottom panels/main screens/etc. that provide an interface to a specific data source (like Sketchfab's main screen plugin from above), but all this does is lead to a disjointed collection of additional GUI elements that clutter up the interface. We should have a prescribed, standardized method of displaying and interacting with online asset sources that is accessible from the Editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt requires revisions to the Asset Library tab to support script-based inclusions of data renderings / data pulls via web APIs. This is outside the scope of script code.\r\n\r\nEdit: Updated to use the new ISSUE_TEMPLATE.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/12/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/10",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/10/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/10/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/10/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/10",
    "id": 488734047,
    "node_id": "MDU6SXNzdWU0ODg3MzQwNDc=",
    "number": 10,
    "title": "Defining the proposal / GIP process, take 2",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 60,
    "created_at": "2019-09-03T17:34:52Z",
    "updated_at": "2020-10-10T14:19:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## Introduction\r\n\r\nAfter the lengthy discussion in #1, and further many discussions among core contributors on IRC, I'm putting together a **simpler, yet more refined** proposal process, which draws from previous discussions and aims to be simple and take on what we know for certain are problematic areas:\r\n\r\n* The main issue tracker is _flooded_ with feature / enhancement requests that **are just too many** to be discussed or reviewed.\r\n* Proposals are, most of the time, too many, too vague and impossible to discuss, we need to **change our approach** to _quality_ over quantity.\r\n* External contributors often create feature/enhancement PRs that **we don't know** if are wanted, whether they solve actual problems, or if the way they are implemented (usability wise) is right. These are **very difficult to review** because we, as developers, don't even know this most of the time, so we would prefer they _go via community filter_. It's **easier** to review, discuss, approve or reject a proposal than a PR.\r\n* The whole process **must not** become more bureaucratic for core contributors than it already is. In fact, the goal is to _make it less bureaucratic_, given that most core contributors are doing this work on their free time. \r\n* We constantly get asked by potential new contributors what kind of work they can do and it's not always easy to answer. By better filtering proposals, the new system can also be used to **better organize** new and existing contributors.\r\n\r\nWith all this in mind, here's the new proposal for the process.\r\n\r\n## Overview\r\n\r\nThe idea of this document is to _layout a workflow_ to take off load from core contributors (and Akien) from reviewing enhancement PRs. In most of these situations, enhancement proposals are questionable or debatable and require a large amount of time by core contributors to discuss, when they themselves may not even be sure of what the intended use cases are for them, or whether there is enough interest by the community\r\n\r\nThe intent is to find a workflow where proposals can be better _discussed and prefiltered_ by the community, and those proposing **need to do more work** to justify and explain their ideas **to make their intent clear** not only to contributors but to the community.\r\n\r\nThis also aims to **reduce the amount of proposals** and ideas in our issue trackers and filter them. It also makes it easier for new and existing contributors to pick approved proposals to work on, with clear explanations on their use cases.\r\n\r\nFollowing are the step by step process for proposals:\r\n\r\n## Process\r\n\r\n### 1. Open an enhancement proposal issue:\r\n\r\nWe will use _this repository_ instead of the main issue tracker. When opening a proposal as a new issue, the user will be first asked to **fill a template** that will go on top of the proposal, with the following questions on the issue, **similar to when reporting an bug**:\r\n\r\n1. Do you _need_ this for a project you are working on? If so, please **describe your project and how this will help you**.\r\n2. Is this something that you will _need to be using often_, or that it _can’t easily be worked around_? (would be useful to more easily discard proposals that don’t need thiscriteria, not sure how to phrase the question better)\r\n2. Are you able to **submit a pull request** if this proposal is approved?\r\n3. Please **describe** the proposal:\r\n4. Please _describe the use case_ with a **mock-up, video or diagram** of examples on how it will be used: (use case and workflow needs to be crystal clear)\r\n5. If you are a technical person, you _may_ **add some technical content** on implementation, but use cases and usage will always take priority.\r\n\r\nThese fields need to be clear for your proposal to be approved.  If a proposal is too simple or does not conform to these rules, it will be closed.\r\n\r\n### 2: Get approval for your proposal.\r\n\r\nYou can seek approval for your proposal in two ways:\r\n1. Ensure **users are interested** about discussing it. If you don’t see enough interest, you can try to gather some on social media.  If you manage to gather enough discussion and interest, this _may be reviewed and approved_.\r\n2. If someone is willing to do a PR, ask **a core contributor**, who may be interested in **fast-tracking** your proposal for approval.\r\n\r\nIf there is **not enough community interest** and **no contributor interest**, then the proposal will eventually be **closed**.\r\n\r\n### 3: Creating a pull request\r\n\r\nWhether _you_ wrote the proposal yourself or _someone else_ is interested in actually creating a pull request for an existing proposal, **always** make sure that **the proposal is approved** by a core contributor. Make sure all technical details on how it will be implemented are clear before doing this, feel free to _ask core contributors_ for help if you need to. \r\n\r\n### 4. Get your pull request tested\r\n\r\nBefore having your proposal _reviewed_, it’s important that _other users_ **test your pull request**. Make sure to communicate to those who discussed the original proposal issue about it, so they lend a hand. We may also create some sort CI to get those pre-built for users for testing. (is this possible? I remember reading GitHub is adding something like this)\r\n\r\n### 5. Proposal review\r\n\r\nContributors will often meet online to discuss PRs and will try to pick yours. If this does not happen, personally ask core contributors to review your proposal for merging.\r\n\r\n### Fast Tracking\r\n\r\nCore contributors or owners of areas can fast-track this process and also approve external contributors to do it for them, the requirements and use case are clear or they discussed themselves a well understood problem beforehand.\r\n\r\nLikewise, PRs opened, but that may need discussion **can be closed** and asked to open or go back to an issue in the proposal repository to agree on missing details.\r\n\r\n## Conclusion\r\n\r\nThis aims to be a system that puts the burden on those proposing instead of those reviewing, so we can better utilize the time and resources kindly donated by the community to the project.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/10/reactions",
      "total_count": 59,
      "+1": 38,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 13,
      "rocket": 5,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/939",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/939/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/939/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/939/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/939",
    "id": 626581054,
    "node_id": "MDU6SXNzdWU2MjY1ODEwNTQ=",
    "number": 939,
    "title": "Cycling (Alternating) Shortcuts",
    "user": {
      "login": "hackini",
      "id": 40541048,
      "node_id": "MDQ6VXNlcjQwNTQxMDQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/40541048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hackini",
      "html_url": "https://github.com/hackini",
      "followers_url": "https://api.github.com/users/hackini/followers",
      "following_url": "https://api.github.com/users/hackini/following{/other_user}",
      "gists_url": "https://api.github.com/users/hackini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hackini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hackini/subscriptions",
      "organizations_url": "https://api.github.com/users/hackini/orgs",
      "repos_url": "https://api.github.com/users/hackini/repos",
      "events_url": "https://api.github.com/users/hackini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hackini/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-21T20:50:03Z",
    "updated_at": "2020-05-28T15:02:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "_Note: issue transfered from main repository and edited with the template_\r\n\r\n**Describe the project you are working on:**\r\nA game made in Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nShortcuts have one limitation in the sense that they are stateless : \"One Shortcut = One Action\".\r\n\r\nBecause of this, we cannot have a \"switch\" behaviour for e.g. press once to toggle this, press again to toggle that.\r\n\r\nThose \"switching\" shortcuts are hardcoded into Godot which is not very flexible for the user.\r\n\r\nOne example of hardcoded switching shortcut is the Perspective vs Orthogonal view :\r\n\r\n![shortcut](https://user-images.githubusercontent.com/40541048/63464877-67452500-c460-11e9-922a-bc2006e0f486.png)\r\n\r\nPerspective vs Orthogonal view switch is hardcoded while Wireframe, Unshaded, Normal, etc. are separate shortcuts. Coming from Blender I'd like to configure Z to be a toggle between Normal vs. Wireframe, but this not possible. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be great if assigning the same shortcut to different actions had the behaviour of cycling through them at each press. This would require zero change in the UI, i.e if i do this :\r\n![doubleZ](https://user-images.githubusercontent.com/40541048/63465759-3665ef80-c462-11e9-89b8-e2514780cd36.png)\r\ncurrently Z will just Display Normal. Godot solves the conflict by arbitrarily picking one (I guess picking the first one in the list ?). By cycling at each press between same-assigned shortcuts actions, shortcuts \"conflicts\" in settings would actually become a feature with a well defined behaviour.\r\n\r\nAlso this would make the corresponding UI labels more coherent and less buggy : currently there is a bug that assigning a new shortcut to Perspective vs Orthogonal will not change the shortcut in the UI unless restarting the editor. Moreover the shortcut is displayed in parenthesis and not on the right like all other actions :\r\n![menu](https://user-images.githubusercontent.com/40541048/63466865-76c66d00-c464-11e9-8153-0d1a804cbdcd.png)\r\n\r\nHaving cycling shortcuts would solve both this \"incoherence\" and this little bug + offer more flexibility to the users while not changing or breaking anything in the shortcut setting UI.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSee above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it's editor feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt improves editor usability.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/939/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/427",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/427/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/427/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/427/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/427",
    "id": 558397492,
    "node_id": "MDU6SXNzdWU1NTgzOTc0OTI=",
    "number": 427,
    "title": "System for storing, displaying, and warning about incompatible features in the Project Manager",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 2,
    "created_at": "2019-08-03T00:02:47Z",
    "updated_at": "2020-08-27T07:17:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nVarious projects with various versions of Godot, some of which are incompatible with each other.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nCurrently, when you have C# projects, and open Godot without Mono support, then Godot will fail to load the C# scripts when it opens the project. There is currently no visual indication that you will be unable to load the project:\r\n\r\n![1](https://user-images.githubusercontent.com/1646875/62403901-5c743000-b545-11e9-8f6f-c4b11ab862d7.png)\r\n\r\nMy proposed solution for this is to add a system for storing which features are used in each project. A project with a C# solution generated would be given a \"feature tag\" for C#. If you open the project with Godot with Mono support, it will detect the tag and detect that it supports it, and it will work fine. If you open the project with Godot without Mono support, then it will see the tag and display a yellow \"C#\" message in the project manager, followed by a warning if you try and open it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![2](https://user-images.githubusercontent.com/1646875/62403918-7b72c200-b545-11e9-8b5c-26dec41f1c03.png)\r\n\r\nThe warning could be something like \"Warning: This project uses the following features not supported by this version of Godot: C#. Open anyway?\".\r\n\r\nThe reason I'm suggesting that the feature tag system is generic is because this would be useful in several other areas. For example, we can make Godot versions be feature tags, so this system would fit the use case of https://github.com/godotengine/godot/issues/25497. If Godot detects that the version used is different, it will display the project's version in yellow, and show a warning if you try and open the project. This system would also be useful for when Godot has double support, and we don't want users to accidentally open their double-precision projects with normal Godot and vice versa.\r\n\r\nFor example, this could display if a project is using Godot 4.0, C#, and doubles, and it's viewed in the project manager of Godot 3.2 without C# support (EDIT: This is a theoretical parallel universe where the PR was merged in time for 3.2):\r\n\r\n![3](https://user-images.githubusercontent.com/1646875/62404086-a4e01d80-b546-11e9-9209-06c305b95d2f.png)\r\n\r\nOne of the key things is that if the system is generalized like this, then non-double Godot wouldn't even need to know what the \"double\" tag is, and Godot without C# wouldn't need to know what \"C#\" is, all they know is that the project uses it, and it doesn't have that feature, so show a warning.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** https://github.com/godotengine/godot/pull/31171\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, because it's about the project manager.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, because it's about the project manager.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/427/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/9",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/9/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/9/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/9/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/9",
    "id": 444869740,
    "node_id": "MDU6SXNzdWU0NDQ4Njk3NDA=",
    "number": 9,
    "title": "Make editor more compact and detailed",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 25,
    "created_at": "2019-05-16T10:11:57Z",
    "updated_at": "2020-03-11T13:20:37Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Looking at the blender editor you can see a lot of information that are ready to be used without any scroll. Each section like the inspector or the scene navigation is really detailed since no space is wasted.\r\n\r\nOpposed to this the Godot editor uses too much spaces to represent even a checkbox, and this make the editor to look at first glance too spartan and later too uncomfortable. And is easy find yourself scrolling a lot during editor usage.\r\n\r\n**(Down a comparison)**\r\n\r\nThe fact that Godot editor looks so spartan is due to two main factors in my opinion.\r\n- The first one is due to the \"General HUD generation\" that allow to generate the HUD of any node fitting always in a good way all parameters no matter the type and the real space required.\r\n- The other problem instead is the font type and font size.\r\n\r\nConsidering these two factors I think that the first one is good to have and difficult to improve, but the second one is easy to improve and changing is a benefit.\r\n\r\nFor this reason I want to propose to use a better font like the one used by blender (that is called blender and probably is OS) and then match the same font size used in blender.\r\n\r\nThanks to this change we may improve the look and feel of the editor a lot.\r\n\r\n-----\r\n# Some measurements:\r\n![Screenshot2](https://user-images.githubusercontent.com/8342599/57845994-85511880-77d3-11e9-8f55-19f2bce1fee3.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/9/reactions",
      "total_count": 35,
      "+1": 25,
      "-1": 5,
      "laugh": 0,
      "hooray": 0,
      "confused": 5,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/884",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/884/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/884/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/884/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/884",
    "id": 624339218,
    "node_id": "MDU6SXNzdWU2MjQzMzkyMTg=",
    "number": 884,
    "title": "Visual shaders: Modify Texture and Colour nodes so there are explicit r, g, b channels",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-05-13T19:45:10Z",
    "updated_at": "2020-06-03T08:56:23Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMultiplayer 3d game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsability of visual shaders.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nModify Texture and Colour nodes so there are explicit r, g, b channels. Alpha is already standalone.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nInstead of using a decompose node on the vec3 output of a color node, add it directly to the colour node / texture node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nEnhancing ux is not a workaround.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nVisual shader is a core feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/8",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/8/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/8/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/8/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/8",
    "id": 442586629,
    "node_id": "MDU6SXNzdWU0NDI1ODY2Mjk=",
    "number": 8,
    "title": "Allow to specify editor-only world-environments",
    "user": {
      "login": "QbieShay",
      "id": 7917475,
      "node_id": "MDQ6VXNlcjc5MTc0NzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7917475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QbieShay",
      "html_url": "https://github.com/QbieShay",
      "followers_url": "https://api.github.com/users/QbieShay/followers",
      "following_url": "https://api.github.com/users/QbieShay/following{/other_user}",
      "gists_url": "https://api.github.com/users/QbieShay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QbieShay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QbieShay/subscriptions",
      "organizations_url": "https://api.github.com/users/QbieShay/orgs",
      "repos_url": "https://api.github.com/users/QbieShay/repos",
      "events_url": "https://api.github.com/users/QbieShay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QbieShay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-05-10T07:54:17Z",
    "updated_at": "2020-10-05T08:02:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Godot version:**\r\n3.1-stable\r\n\r\n\r\n**Issue description:**\r\nWhen working on a game that has a very dark environment map, it becomes a bit cumbersome to work on scenes, since everything is black unless adding some editor-only light.\r\nThis means that for every file that requires assembling of 3D objects, you need to put an editor-only light.  \r\nImagine you are making a horror game in a building: you want to see where you place your objects room per room, even if the final env map is going to be pitch black.\r\n\r\n\r\n**Proposal**\r\nAdd a setting somewhere to override the editor light.\r\nIdeally, if Godot doesn't already, it should allow to use an editor-only environment. The interface and the management of this could be a plugin (due to the different needs that might arise, for example \"I want to be able to see this scene with 4 different world env, one per season\", and someone else might just want a toggle with 'toggle editor env')\r\n\r\n![override_world](https://user-images.githubusercontent.com/7917475/57511405-854fa500-7309-11e9-8f90-6e34ff2892ae.png)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/8/reactions",
      "total_count": 8,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/7",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/7/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/7/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/7",
    "id": 441457479,
    "node_id": "MDU6SXNzdWU0NDE0NTc0Nzk=",
    "number": 7,
    "title": "Groups Nodes replace Functions in Visual Scripting",
    "user": {
      "login": "swarnimarun",
      "id": 19930870,
      "node_id": "MDQ6VXNlcjE5OTMwODcw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19930870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/swarnimarun",
      "html_url": "https://github.com/swarnimarun",
      "followers_url": "https://api.github.com/users/swarnimarun/followers",
      "following_url": "https://api.github.com/users/swarnimarun/following{/other_user}",
      "gists_url": "https://api.github.com/users/swarnimarun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/swarnimarun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/swarnimarun/subscriptions",
      "organizations_url": "https://api.github.com/users/swarnimarun/orgs",
      "repos_url": "https://api.github.com/users/swarnimarun/repos",
      "events_url": "https://api.github.com/users/swarnimarun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/swarnimarun/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-05-07T21:37:49Z",
    "updated_at": "2020-03-17T07:56:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Groups Nodes replace Functions\r\n---\r\nGrouping of Nodes in a chain should be allowed to simplify the process of creation of Node Units and increasing reusability of parts of the Visual Scripts.\r\n\r\n![image](https://user-images.githubusercontent.com/19930870/57302002-da1bd180-70f7-11e9-83b9-164200a839be.png)\r\nQuick Mockup.\r\n\r\n> _Group Nodes should be stored as custom Nodes that are accessible from the same drop down for searching the Nodes and also allow for saving and loading groups as resources for use as custom nodes all across the project._\r\n\r\nProbably even have a default folder where we can place all the Grouped Node(Custom Node) Resources that we want to be accessible across the project as custom nodes, automagically.\r\nThis would remove the need to newbie users to learn how to create Tool Scripts.\r\n\r\nDetails\r\n---\r\nThe Groups will be simple and clean and will act like bookmarks that will take us to the respective Group Node Structure we double click on. \r\n\r\nThe Groups will be a much simpler concept compared to functions but will technically use the same structure/codebase. It will also the first step towards addition of Unified Visual Script editor Graph.\r\n\r\nBeing able to save these can come extremely handy, such as having a module for simple visual script functions required and even Visual Shader node groups.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/7/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 7,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/6",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/6/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/6/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/6",
    "id": 441454493,
    "node_id": "MDU6SXNzdWU0NDE0NTQ0OTM=",
    "number": 6,
    "title": "Add DPI settings to allow for Object-based Display Scaling",
    "user": {
      "login": "swarnimarun",
      "id": 19930870,
      "node_id": "MDQ6VXNlcjE5OTMwODcw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19930870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/swarnimarun",
      "html_url": "https://github.com/swarnimarun",
      "followers_url": "https://api.github.com/users/swarnimarun/followers",
      "following_url": "https://api.github.com/users/swarnimarun/following{/other_user}",
      "gists_url": "https://api.github.com/users/swarnimarun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/swarnimarun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/swarnimarun/subscriptions",
      "organizations_url": "https://api.github.com/users/swarnimarun/orgs",
      "repos_url": "https://api.github.com/users/swarnimarun/repos",
      "events_url": "https://api.github.com/users/swarnimarun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/swarnimarun/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-05-07T21:28:57Z",
    "updated_at": "2019-11-27T17:22:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Display Scaling for changing the scale of Nodes\r\n----\r\n\r\n![image](https://user-images.githubusercontent.com/19930870/57303717-890ddc80-70fb-11e9-958f-245c6796137b.png)\r\n\r\n> Here I changed the Display Scaling of Editor itself to show how well it works.\r\n\r\nThe Display Scaling is used by the Editor globally making it problematic for the Visual Scripting system to discretely use it.\r\n\r\nI see a few simple ways of achieve the solution to this problem,\r\n- First, is to give all the UI Nodes a `zoom`/`dpi`/`display_scale` variable that holds zoom factor propagated by the Graph Edit Node. This will allow for Graph Nodes to have different Scaling.\r\n- Second, is to add the `display_scale` variable to the Theme which will allow for inheritance based Display Scaling. This is a more clean solution but can have bugs like opening windows from one context will open weirdly themed windows(probably can be fixed with some planning).\r\n\r\nEven though this is mostly for Visual Scripting but adding display_scaling to UI Nodes can be useful for scaling of menus in the actual games.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/6/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/5",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/5/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/5/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/5",
    "id": 441449612,
    "node_id": "MDU6SXNzdWU0NDE0NDk2MTI=",
    "number": 5,
    "title": "Improve the UX of Visual Scripting Nodes",
    "user": {
      "login": "swarnimarun",
      "id": 19930870,
      "node_id": "MDQ6VXNlcjE5OTMwODcw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19930870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/swarnimarun",
      "html_url": "https://github.com/swarnimarun",
      "followers_url": "https://api.github.com/users/swarnimarun/followers",
      "following_url": "https://api.github.com/users/swarnimarun/following{/other_user}",
      "gists_url": "https://api.github.com/users/swarnimarun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/swarnimarun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/swarnimarun/subscriptions",
      "organizations_url": "https://api.github.com/users/swarnimarun/orgs",
      "repos_url": "https://api.github.com/users/swarnimarun/repos",
      "events_url": "https://api.github.com/users/swarnimarun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/swarnimarun/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-05-07T21:15:00Z",
    "updated_at": "2020-07-30T01:35:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "List Type Nodes\r\n---\r\n- Allow the Node Graph to be more self-sufficient and not have to move to the inspector for every new change.\r\n- Make nodes that use color codes with more rigidity and have constant theme.\r\n- More Dynamic Nodes, nodes that can change and are well contained for the purpose.\r\n\r\n![image](https://user-images.githubusercontent.com/19930870/57286762-9b742000-70d3-11e9-8305-434d564a0483.png)\r\n\r\n> This is a quick MockUp to help understand the idea.\r\n\r\nHere the color code is that brighter color is for the Specific Type and then the duller(whitish color) is for the Array of that type.\r\n- In this Grey is Any, Whitish Grey is Array(of all types).\r\n- Yellow is Int, Light Yellow is for Int Array(PoolIntArray).\r\n- Blue is for Object.\r\n\r\n__We have + and x buttons to add and remove elements.__\r\n\r\n- For arrays it will just allow us to select a type and create a new variable.\r\n- While for setter fields they will pop open a menu to select a field we want to edit(as not all fields need to be changed)\r\n\r\n__This will make the setter node much more powerful and much less redundant(each setter editing one value was kinda wonky) and we obviously need a create Array node.__\r\n\r\nThis design theme can be followed to other aspects of the Visual Script system as well. Like Getters, Maps and etc. \r\n\r\nProbably have even the **Curve** and **Gradient Editors** be a part of the Visual Script directly to make editing fields of even resources easier.\r\n\r\nFor now we can add this as extra type of nodes to allow for backwards compatibility.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/5/reactions",
      "total_count": 23,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 8,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1",
    "id": 431580567,
    "node_id": "MDU6SXNzdWU0MzE1ODA1Njc=",
    "number": 1,
    "title": "Defining the proposals / GIP process",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-04-10T15:50:35Z",
    "updated_at": "2020-10-10T14:19:57Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "During the last GodotCon in Brussels, core developers discussed the idea to move feature proposals outside the main [godotengine/godot](https://github.com/godotengine/godot) repository to let the latter focus on bug reports and current developments.\r\n\r\nThis new **godot-proposals** repository would be the main place for users to propose new features for the engine, or any kind of big change that requires discussion and consensus on design, implementation, scope, etc.\r\n\r\nThe exact workflow needs to be defined, which is the purpose of this first issue.\r\n\r\n## Proposed workflow\r\n\r\nThe current proposal discussed at GodotCon and refined on IRC is the following:\r\n\r\n- **Issues** are used for all proposals. One or more issue templates will be created to ensure that proposals include the necessary information, in particular detailed use cases. All users are welcome to use reactions to express their support of any proposal, and to discuss details.\r\n\r\n- Once a proposal has been sufficiently discussed, a decision should be taken, to either:\r\n  * Reject it if the proposal is not wanted\r\n  * Approve it and turn it into a formal **Godot Improvement Proposal (GIP)**\r\n\r\nGIPs are text documents (probably in Markdown or plain text) following a standard template (to be defined in its own GIP) which summarize an approved proposal. Those text documents serve as reference for the implementation and can be linked to in the roadmap for upcoming Godot versions.\r\n\r\nGIPs are submitted via Pull Requests following a process yet to be defined. Once a GIP is merged, implementation can start and the feature is formally approved for merging in the engine, provided that it's done following the GIP.\r\n\r\n-------\r\n\r\nAnswers to some likely questions:\r\n\r\n### Why do we do that?\r\n\r\nAs the community grows, managing the issue tracker of the main godotengine/godot repository is increasingly difficult. Users come with proposals every day, and while many are good, triaging and discussing them takes a lot of focus away from actual bug reports, which should have the priority. Labels help, but not as much as we'd like. The godot repository currently has close to 900 feature proposals (many very old and not getting any attention) and 1300 enhancement issues (most of those would stay there, but some with a bigger scope would also be candidate for a GIP).\r\n\r\nMoving things around doesn't automatically solve this issue, but it allows us a better separation of concerns, and to use features differently. Having a dedicated repo for proposals means that we can have a proposals-specific workflow, with its own labels and milestones. We can also bring new users to the issue triage team that would focus on managing proposals, which should be more interesting for many than handling bug reports and complex issues on the main repository.\r\n\r\nThere might be some degree of wishful thinking, but with good guidelines and a well defined workflow, we could definitely see a lot of improvement. At any rate, it's worth a shot.\r\n\r\nBeyond the handling of end user proposals, we also have a need for a formal RFC (Request For Comments) system for more involved proposals from core contributors, so we want to try both at the same time using this hybrid informal issue / formal PR workflow.\r\n\r\n### What about feature proposals currently in the main repo, or future proposals made in the wrong location?\r\n\r\nGitHub recently introduced a feature to move issues between repositories, so we can use that to move all feature proposals from godotengine/godot to godot-proposals. The same can be done for any new proposal made in godotengine/godot, or for bug reports mistakenly reported here.\r\n\r\nWe will first define, refine and test the GIP workflow before moving anything from godotengine/godot to this repository.\r\n\r\n---\r\n\r\nMore to come probably as you ask questions and refine the proposed workflow.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/535",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/535/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/535/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/535/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/535",
    "id": 572962788,
    "node_id": "MDU6SXNzdWU1NzI5NjI3ODg=",
    "number": 535,
    "title": "Allow RigidBody to have Colliders that are indirect children, not just direct children",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-10-15T05:15:51Z",
    "updated_at": "2020-11-15T13:05:22Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI would like to create a voxel game where the objects' collisions are composed of many cube colliders. I can't use concave mesh colliders because I would like these voxel objects to be able to move.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe problem is that, while I can easily generate cube colliders, I have no good way to remove groups of them whenever I need to regenerate a \"chunk\".\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWhat I would like to do is have several of these cube colliders together as children of a child so that I can easily remove/generate/instance them as needed.\r\n\r\n```\r\nRigidBody\r\n    Collider0\r\n    ColliderGroupA\r\n        Collider1\r\n        Collider2\r\n    ColliderGroupB\r\n        Collider3\r\n        Collider4\r\n```\r\n\r\nIn the example above, in the current stable and master branch of Godot, only Collider0 is detected, and without it the RigidBody complains that it has no collider. It seems that colliders are only used if they are direct children.\r\n\r\nIdeally, RigidBody should be able to use colliders that are grandchildren etc and not just direct children. This would make it easier for me to instance, generate, and delete groups of colliders. Basically, the RigidBody should recursively search its children for CollisionShape nodes, so that in the example above, it would use all of the colliders (0 through 4).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nOne issue that would arise from just recursively searching for collider children is that physics objects parented to physics objects would both use the child's colliders. There are many possible implementations that would solve this without that problem:\r\n\r\n* Configurable recursiveness/depth of colliders.\r\n\r\n* Don't look for colliders under other PhysicsBody nodes.\r\n\r\n* Only use direct children, but add a new \"CompoundCollider\" node which passes up its own children.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nPossibly, but not nearly as clean. I really don't want to short-circuit the node hierarchy.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is a low-level feature that could not be implemented very well by an add-on.\r\n\r\nSee: https://godotengine.org/qa/31701/possible-rigidbody-have-colliders-that-not-direct-children",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/535/reactions",
      "total_count": 13,
      "+1": 12,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/629",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/629/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/629/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/629/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/629",
    "id": 587295858,
    "node_id": "MDU6SXNzdWU1ODcyOTU4NTg=",
    "number": 629,
    "title": "Add Vector4 and other 4D math types",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2018-08-11T07:48:02Z",
    "updated_at": "2020-06-30T20:37:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nMany projects can benefit from this feature, this is mostly for discussion.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA Vector4 class would be similar to Vector2 and Vector3, but with four components: X, Y, Z, and W.\r\n\r\nPotential use cases for a Vector4 class that I can think of:\r\n\r\n* Parameters for noise functions, simplex etc: https://github.com/godotengine/godot/issues/1268 and https://github.com/godotengine/godot/pull/21569\r\n\r\n* For use with shaders: https://github.com/godotengine/godot/issues/9134, https://github.com/godotengine/godot/issues/2855#issuecomment-406846872, https://github.com/godotengine/godot/issues/28504, https://github.com/godotengine/godot-proposals/issues/258\r\n\r\n* Representing an Axis-Angle 3D rotation (not the same as Quaternions, simpler, less capable, Godot's rotate function already does this with a Vector3 and a float)\r\n\r\n* Represeting 3D vectors in Direction-Magnitude format (direction is normalized).\r\n\r\n* Simply for allowing the user to store 4 values together with a built-in struct.\r\n\r\nThere's likely many more uses for Vector4 than I'm thinking of. I'm not desperate for it, but I would find a Vector4 class useful. What matters is what Godot users would need it to do. It would be engine bloat implementing Vector4 \"just because\". So I'm opening this discussion to ask around about if users would find Vector4 useful and what kind of things they would use it for.\r\n\r\nIf you can think of a use case for Vector4 that you'd use, feel free to post it here.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes-ish. I have a C# implementation [here](https://github.com/aaronfranke/GodotExtraMath/blob/master/ExtraMath/Vector4.cs). It's not really feasible to make within GDScript, but the real solution there would be to allow custom structs in GDScript: #279\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHaving Vector4 in core would allow engine functions to use it as a built-in type whenever it's necessary to work with four numbers. An analysis of how many engine functions could benefit from this would be a good idea first. Again, this proposal is mostly for discussion.\r\n\r\nIt might indeed be a better idea for this to be an add-on, but [this isn't possible in GDScript](https://github.com/godotengine/godot-proposals/issues/279).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/629/reactions",
      "total_count": 24,
      "+1": 24,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/737",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/737/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/737/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/737/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/737",
    "id": 603234183,
    "node_id": "MDU6SXNzdWU2MDMyMzQxODM=",
    "number": 737,
    "title": "Add union types to Typed GDScript",
    "user": {
      "login": "chanon",
      "id": 357737,
      "node_id": "MDQ6VXNlcjM1NzczNw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/357737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chanon",
      "html_url": "https://github.com/chanon",
      "followers_url": "https://api.github.com/users/chanon/followers",
      "following_url": "https://api.github.com/users/chanon/following{/other_user}",
      "gists_url": "https://api.github.com/users/chanon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chanon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chanon/subscriptions",
      "organizations_url": "https://api.github.com/users/chanon/orgs",
      "repos_url": "https://api.github.com/users/chanon/repos",
      "events_url": "https://api.github.com/users/chanon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chanon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2018-08-08T08:46:12Z",
    "updated_at": "2020-07-12T12:51:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "EDIT: Tried to format it according to the 'template'.\r\n\r\n**Describe the project you are working on:**\r\nI was working on a game using Godot. (Have since moved to another engine due to many issues with Godot.)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n(Original text)\r\nThe main reason I want it is due to Array and Dictionary type not being able to receive null values and I want to be able to use null values as the \"default\" value for functions. \r\n\r\nThis is a very common pattern in my pre-existing code and without this ability I'm not sure what to use as \"default\" values. Empty arrays and dictionaries? That could cause needless memory allocations I think. Also, there could be a difference in meaning between passing an empty array and passing null to a function, for example. Also it is simpler to just use null and compare/check for null.\r\n\r\nDictionary is used as an 'anonymous object' very often, so it makes a lot of sense to allow null. Since the type does not allow it, union types could help.\r\n\r\nThis is the biggest issue that makes me not able to use Typed GDScript more in my code.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUnion types would be written as `Type1 | Type2` in place of the type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nExamples:\r\n```\r\n# heal the target (which has its data in a Dictionary) if specified, otherwise if no target specified, heal self\r\nfunc heal(target: Dictionary| null = null):\r\n\t# heal\r\n\t...\r\n```\r\n\r\n```\r\n# a function that receives a parameter that is either an int or a String\r\nfunc do_something(parameter:  int | String):\r\n\t# do something with the parameter\r\n\t...\r\n\r\n# apply damage to a Player character or an Enemy character\r\nfunc apply_damage(target:  Player | Enemy):\r\n\t# apply the damage\r\n\t...\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe workaround is to not specifiy types and thus lose type safety.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is part of GDScript which is core.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/737/reactions",
      "total_count": 16,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1205",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1205/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1205/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1205/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1205",
    "id": 657983547,
    "node_id": "MDU6SXNzdWU2NTc5ODM1NDc=",
    "number": 1205,
    "title": "New Add-On (sub-project) system",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 50,
    "created_at": "2018-05-26T13:28:41Z",
    "updated_at": "2021-01-12T15:55:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "After discussing with @bojidar-bg I think we reached some general idea on how the add-on system could be improved. Currently, the add-on system has many limitations:\r\n\r\n* Requieres unique and absolute paths\r\n* Makes it difficult to test self-contained\r\n* Causes problems with duplicated information in files such as project.godot, README.md, .gitignore,etc.\r\n\r\nMost of the feedback for the current system centers on that it should be great if it could be possible to:\r\n\r\n* Just write the add-on as a godot project\r\n* Do not include the root directory\r\n* Be able to install it anywhere in the project and likewise remove it\r\n* Be able to simply check out an addon using git to a sub-directory of an existing project and keep it up to date this way\r\n\r\nSo, we've been discussing this for a while and reached the following proposal, which I believe allows to implement this in the simplest way.\r\n\r\nWriting an add-on will work as follows. It will not be an add-on in itself, but a sub-project:\r\n\r\n1. Create a new project, this will be the add-on.\r\n2. Make the add-on as if it was a project in itself.\r\n4. Resources (And this includes scripts) will have a new function named get_project_path(). If you are writing a script in C#/GDNative you can query for the base path. When running the project as sub-project,  it will be res://. When running in the game it will be the path to the subproject. \r\n5. For GDScript this process can be transparent, so nothing needs to be done, scripts will just work. Just use res:// normally with extends, load and preload.\r\n6. In GDScript, in the case your scripts needs to access a resource from outside the subproject path, then just use ResourceLoader.load() manually.\r\n\r\nUnde the hood, sub-projects can go anywhere within the main project and it will work the folowing way:\r\n\r\n1. From the editor, sub-projects will probably be scanned automatically, but you will have to toggle them on/off yourself similar to now. This ensures that all sub-projects go to a list.\r\n2. This list is passed to ResourceLoader. Resourceloader can easily detect when a resource being loaded is sub-project. This information will be passed to each loader, and loaders will be able to remap res:// of it's sub-resources to the full path. Most likely, only resource loader/save binary/text need this addition, the other loaders don't support subresources anyway so they are fine as-is.\r\n3. Settings added in project.godot of a subproject will be editable in ProjectSettings for the project. If the setting is edited, though, it will be re-owned to the main project and the setting in the sub-project will no longer be used (in other words, main project.godot always has priority over sub ones, this makes sense as you may want to modify a sub-project setting, change input mappings definied in a sub-project, etc.). \r\n4. Some settings will adapt fine to this (such as input), but others we need to change how they are saved, so they use individual properties. This is mainly the case of translations and translation remaps, which go into a single array now and will need to be converted to individual properties.\r\n5. Settings that contain paths, will be converted automatically by brute force when loading a sub-project.godot. If a strings begins with \"res://\" it will be assumed to be a path and will be converted.\r\n\r\nSo this is pretty much it. This approach is the simplest we could come up with, should require little work from the codebase, and should make much, much simpler the process of creating addons (which are simply sub-projects now). Feedback welcome!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1205/reactions",
      "total_count": 94,
      "+1": 59,
      "-1": 0,
      "laugh": 0,
      "hooray": 17,
      "confused": 0,
      "heart": 18,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/886",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/886/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/886/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/886/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/886",
    "id": 624343079,
    "node_id": "MDU6SXNzdWU2MjQzNDMwNzk=",
    "number": 886,
    "title": "Ability to reimport an HDR image as a tonemapped LDR (8-bit) image",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-03-04T20:19:43Z",
    "updated_at": "2020-06-05T08:18:53Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d multiplayer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to use openexr for standard texture usage too.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTake a hdr (openexr) image, unable to make it a 8bit image.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nTake the hdr image and tone map it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nImage modification is cpu intensive.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nImport code is already being owned by the built in openexr module, so have to modify the openxrr module.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/622",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/622/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/622/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/622/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/622",
    "id": 586006993,
    "node_id": "MDU6SXNzdWU1ODYwMDY5OTM=",
    "number": 622,
    "title": "Add a Vim mode to the script editor",
    "user": {
      "login": "AnderRasoVazquez",
      "id": 3936719,
      "node_id": "MDQ6VXNlcjM5MzY3MTk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3936719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnderRasoVazquez",
      "html_url": "https://github.com/AnderRasoVazquez",
      "followers_url": "https://api.github.com/users/AnderRasoVazquez/followers",
      "following_url": "https://api.github.com/users/AnderRasoVazquez/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnderRasoVazquez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnderRasoVazquez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnderRasoVazquez/subscriptions",
      "organizations_url": "https://api.github.com/users/AnderRasoVazquez/orgs",
      "repos_url": "https://api.github.com/users/AnderRasoVazquez/repos",
      "events_url": "https://api.github.com/users/AnderRasoVazquez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnderRasoVazquez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 49,
    "created_at": "2017-09-26T20:59:16Z",
    "updated_at": "2020-09-22T20:28:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "It would be great to have Vim style editing in the editor, because it's a really fast way to edit code. I would like to help developing it, but I don't know where to start.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/622/reactions",
      "total_count": 280,
      "+1": 180,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 69,
      "rocket": 29,
      "eyes": 2
    },
    "performed_via_github_app": null
  }
]
