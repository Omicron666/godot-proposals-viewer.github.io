[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/563",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/563/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/563/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/563/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/563",
    "id": 577163795,
    "node_id": "MDU6SXNzdWU1NzcxNjM3OTU=",
    "number": 563,
    "title": "Add the option to exclude comments from search",
    "user": {
      "login": "MrMrBlackDragon",
      "id": 46326301,
      "node_id": "MDQ6VXNlcjQ2MzI2MzAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46326301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrMrBlackDragon",
      "html_url": "https://github.com/MrMrBlackDragon",
      "followers_url": "https://api.github.com/users/MrMrBlackDragon/followers",
      "following_url": "https://api.github.com/users/MrMrBlackDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrMrBlackDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrMrBlackDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrMrBlackDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/MrMrBlackDragon/orgs",
      "repos_url": "https://api.github.com/users/MrMrBlackDragon/repos",
      "events_url": "https://api.github.com/users/MrMrBlackDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrMrBlackDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-06T20:38:52Z",
    "updated_at": "2020-09-13T12:28:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nClarity\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt increases the workflow of the projects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would be quiet nice to add the option to exclude comments when searching. E.g if you are searching for when you used which function and you made comments containg the search phrase. Then you need to skip through every result if it's not just a comment.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is useful for any project.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/563/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/562",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/562/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/562/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/562/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/562",
    "id": 577163468,
    "node_id": "MDU6SXNzdWU1NzcxNjM0Njg=",
    "number": 562,
    "title": "Add an Array.pop() method to Array.",
    "user": {
      "login": "katoneko",
      "id": 48890128,
      "node_id": "MDQ6VXNlcjQ4ODkwMTI4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48890128?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katoneko",
      "html_url": "https://github.com/katoneko",
      "followers_url": "https://api.github.com/users/katoneko/followers",
      "following_url": "https://api.github.com/users/katoneko/following{/other_user}",
      "gists_url": "https://api.github.com/users/katoneko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katoneko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katoneko/subscriptions",
      "organizations_url": "https://api.github.com/users/katoneko/orgs",
      "repos_url": "https://api.github.com/users/katoneko/repos",
      "events_url": "https://api.github.com/users/katoneko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katoneko/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-06T20:38:11Z",
    "updated_at": "2020-03-21T13:07:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA visual novel game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm working on the underlying machinery to get the game's guts running. It involves working with a lot of text data and the solution I found to handle that is by utilizing arrays. I'm using Array's `pop_back()` and `pop_front()` a lot to extract values from the array and delete them in one go. However, I've found myself needing to write a custom function for popping and returning values from arbitrary positions in an array. It has to take in the array reference and the position to pop from. While the solution works, I still yearn for a built-in array method to pop from any position.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a `pop()` method to the Array class that allows to pop and return a value from an array at arbitrary positions. It would take a position argument that will be used to pop and return a value from an array at that position. It directly solves the limitation I've described in the paragraph above.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI haven't worked with Godot's sources in any way nor I speak C++ but from a quick look at the array code in core, it seems trivial to add by copying and slightly modifying the front and back popping methods.\r\n\r\n`Array.pop(position: int)`:\r\n1. Store a value from the array at the provided index `position `in a variable.\r\n2. Delete the value at index `position `in the array.\r\n3. Return the stored value.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe improvement I'm describing is, I believe, a basic and common functionality in array-type collections. One can (I did) work around the issue by writing a custom pop method but since the proposed functionality is common among a wide variety of languages and is basic for an array-like type, I think that it should be shipped with the Array class.\r\n\r\nFor:\r\n- Present in many languages' array-like collection type.\r\n    - Lua's `table.remove (list [, pos])`. **Removes** from list the element **at position pos**, **returning the value** of the removed element.\r\n    - Dart's `E removeAt(int index)`;. **Removes the object at position** index from this list. **Returns the removed object**.\r\n    - Rust VecDeque's `pub fn remove(&mut self, index: usize) -> Option<T>`. **Removes and returns the element at index** from the VecDeque.\r\n    - Python's `list.pop([i])`. **Remove the item at the given position** in the list, **and return it**.\r\n    - Ruby's `delete_at(index) → obj or nil`. **Deletes the element at the specified index, returning that element**, or nil if the index is out of range.\r\n- Requires minimal effort to add.\r\n- Very unlikely to cause bugs.\r\n- It's common functionality for an array type as evidenced above.\r\n- GDScript's Array already has `pop_front()` and `pop_back()`; `pop()` would complement it nicely.\r\n- The main scope of the change is contained within the Array class.\r\n- A custom method is cumbersome to use if it's needed in multiple scripts. Adding it to some Utils class adds the overhead of referring to that class every time.\r\n\r\nAgainst:\r\n- The change requires adding a method to Godot's core.\r\n- Someone has to do it :)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's impossible to modify GDScript with an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/562/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/561",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/561/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/561/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/561/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/561",
    "id": 576916449,
    "node_id": "MDU6SXNzdWU1NzY5MTY0NDk=",
    "number": 561,
    "title": "Allow the game to create and manage an asset import cache",
    "user": {
      "login": "EIREXE",
      "id": 3101690,
      "node_id": "MDQ6VXNlcjMxMDE2OTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3101690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EIREXE",
      "html_url": "https://github.com/EIREXE",
      "followers_url": "https://api.github.com/users/EIREXE/followers",
      "following_url": "https://api.github.com/users/EIREXE/following{/other_user}",
      "gists_url": "https://api.github.com/users/EIREXE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EIREXE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EIREXE/subscriptions",
      "organizations_url": "https://api.github.com/users/EIREXE/orgs",
      "repos_url": "https://api.github.com/users/EIREXE/repos",
      "events_url": "https://api.github.com/users/EIREXE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EIREXE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-03-06T13:00:11Z",
    "updated_at": "2020-08-29T13:42:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nHeavily moddable game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently, importing assets at runtime either means running an instance of the editor so that the import folder and its contents are created to then put that into a pck file and load it or manually converting the file into godot data structures using the File class.\r\n\r\nThis makes creating modding tools cumbersome, as they would require the engine to be used to generate the .import cache.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt would require a:\r\n\r\n- Way to designate certain folders as folders where resources can live and be cached\r\n- a way to specify an alternative .import cache, so that the game can use as a cache at runtime (maybe user://.import?)\r\n- This would ensure ResourceLoader.load works on the previously mentioned files and so that .import files can be generated in those folders.\r\n\r\nAn alternative system would be:\r\n- A way to create a pck from a folder that automatically has the .import cache at runtime.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis is a relatively complex task that is beyond my understanding of the engine, which is why I'm proposing it now that 4.0 is amongst us.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nDepending on the resource yes, but it's a pain in the arse.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt cannot be done (easily).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/561/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/557",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/557/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/557/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/557/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/557",
    "id": 576482626,
    "node_id": "MDU6SXNzdWU1NzY0ODI2MjY=",
    "number": 557,
    "title": "Add Input.MOUSE_MODE_CONFINED_HIDDEN flag",
    "user": {
      "login": "Chaosus",
      "id": 3036176,
      "node_id": "MDQ6VXNlcjMwMzYxNzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3036176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chaosus",
      "html_url": "https://github.com/Chaosus",
      "followers_url": "https://api.github.com/users/Chaosus/followers",
      "following_url": "https://api.github.com/users/Chaosus/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chaosus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chaosus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chaosus/subscriptions",
      "organizations_url": "https://api.github.com/users/Chaosus/orgs",
      "repos_url": "https://api.github.com/users/Chaosus/repos",
      "events_url": "https://api.github.com/users/Chaosus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chaosus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-03-05T19:33:12Z",
    "updated_at": "2020-10-23T16:58:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTurn-based strategy\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want animated custom cursors to be implemented but also want the cursor to be confined within the window. By hiding system cursor I draw a sprite instead of it. I don't want to apply custom cursor using `Input.set_custom_mouse_cursor` - it's limited and does not support effects like rotation and animation which I needed.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy adding this flag the system cursor will be hidden while still be confined within the window...\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI didn't found an easy way.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core thing by its nature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/557/reactions",
      "total_count": 11,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/556",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/556/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/556/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/556/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/556",
    "id": 576240518,
    "node_id": "MDU6SXNzdWU1NzYyNDA1MTg=",
    "number": 556,
    "title": "Double click Audio file in the FileSystem to start playback immediately.",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-03-05T13:07:27Z",
    "updated_at": "2020-04-02T09:39:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\nImplementing sounds.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOften it's not enough to give soundFX descriptive names. I have to listen to them to make sure it's the one I want to use. This is very tedious right now, as you have to double click the file in the FileSystem, then go over to the Inspector and press the play button.\r\n[Because of this issue](https://github.com/godotengine/godot/issues/36816) it's even more tedious when you feel like you need to listen to the sound more than once, which is very common.\r\n![playback_audiofile2](https://user-images.githubusercontent.com/47016402/75983996-e7f1dd00-5ee9-11ea-9d5f-3552955b661b.gif)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSimply double clicking the file in the FileSystem should immediately start the playback. Double clicking the file while it is in playback, should immediately start the playback again from the beginning.\r\n![playback_audiofile_doubleclick](https://user-images.githubusercontent.com/47016402/75984229-49b24700-5eea-11ea-9f59-8eddda5695bf.gif)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUnfortunately I can't provide any code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWould be used often by anyone who works with more than a hand full of audio files.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it's a necessary improvement to usability.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/554",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/554/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/554/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/554/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/554",
    "id": 575178864,
    "node_id": "MDU6SXNzdWU1NzUxNzg4NjQ=",
    "number": 554,
    "title": "Allow extracting asset library assets into subfolders",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2020-03-04T06:57:53Z",
    "updated_at": "2020-11-28T21:49:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** \r\n\r\nGitHub repo: https://github.com/aaronfranke/GodotExtraMath\r\n\r\nAssetLib page: https://godotengine.org/asset-library/asset/408\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn my own private projects, I have this repository added as a Git submodule. This allows me to easily update the library in my projects.\r\n\r\nThe problem or limitation I am facing is that the same directory structure does not work well when published on the asset library. When an asset is downloaded from the asset library from within the Godot editor, it always places everything in the project's root directory.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe proposal is to allow specifying a subfolder that the asset should be extracted into. This could either be specified by the user or by the asset creator, though it would probably make more sense to have the asset creator specify the location in case scripts depend on a specific file path.\r\n\r\nThis means that it would be possible for asset library assets to either be installed through the asset library, or to be installed by adding a Git submodule, without changing the directory structure (something that currently works on the asset library, added as a submodule in the addons folder, would currently have a path like `res://addons/my_plugin/addons/my_plugin/plugin.cfg`).\r\n\r\nBonus upside: If all the files were extracted into subfolders, then we wouldn't have to worry about README and LICENSE files from different assets all competing to be in the project's root directory (since in a GitHub repository, these files are normally placed in the root directory).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor whatever files are extracted, put them in a subfolder based on a specified `plugin_path`:\r\n\r\n    for (file in asset_files):\r\n        extract_path = plugin_path + \"/\" + file_path\r\n\r\nWhere `plugin_path` would be something like `\"addons/my_plugin\"`.\r\n\r\nOr maybe we could force assets to go into the `addons/` folder:\r\n\r\n    for (file in asset_files):\r\n        extract_path = \"addons/\" + plugin_name + \"/\" + file_path\r\n\r\nWhere `plugin_name` would be `\"my_plugin\"`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt's not a matter of scripting, it's a matter of convenience and choice, and also a matter of not polluting the root directory with README/etc files.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nUh... well, these are already add-ons in the asset library :stuck_out_tongue: ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/554/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/552",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/552/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/552/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/552/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/552",
    "id": 575124706,
    "node_id": "MDU6SXNzdWU1NzUxMjQ3MDY=",
    "number": 552,
    "title": "Add OS time to InputEvent",
    "user": {
      "login": "supagu",
      "id": 11153232,
      "node_id": "MDQ6VXNlcjExMTUzMjMy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11153232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/supagu",
      "html_url": "https://github.com/supagu",
      "followers_url": "https://api.github.com/users/supagu/followers",
      "following_url": "https://api.github.com/users/supagu/following{/other_user}",
      "gists_url": "https://api.github.com/users/supagu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/supagu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/supagu/subscriptions",
      "organizations_url": "https://api.github.com/users/supagu/orgs",
      "repos_url": "https://api.github.com/users/supagu/repos",
      "events_url": "https://api.github.com/users/supagu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/supagu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-04T04:12:37Z",
    "updated_at": "2020-06-12T17:40:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI am working on a real time strategy game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI am attempting to detect mouse wheel acceleration so I can zoom the camera in and out smoothly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI would like to see InputEvent include a time value which is populated with the time the OS says the input event occurred.\r\nCurrently Godot accumulates input events and fires them all off at the same time, so I loose the precise timing of when the events actually occurred (according to the OS) making it impossible to determine intervals between input events when the frame rate is low (< 20fps)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nHere is a patch file that adds linux support:\r\n[input_time.zip](https://github.com/godotengine/godot-proposals/files/4284993/input_time.zip)\r\n\r\nThe proper solution should map the OS time into the godot time somehow.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo there is no way to work around this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is not possible to be done as a plugin.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/552/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/550",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/550/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/550/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/550/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/550",
    "id": 575117645,
    "node_id": "MDU6SXNzdWU1NzUxMTc2NDU=",
    "number": 550,
    "title": "An export variable hint which shows a warning icon if the value has not been set in the inspector",
    "user": {
      "login": "samw3",
      "id": 231388,
      "node_id": "MDQ6VXNlcjIzMTM4OA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/231388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samw3",
      "html_url": "https://github.com/samw3",
      "followers_url": "https://api.github.com/users/samw3/followers",
      "following_url": "https://api.github.com/users/samw3/following{/other_user}",
      "gists_url": "https://api.github.com/users/samw3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samw3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samw3/subscriptions",
      "organizations_url": "https://api.github.com/users/samw3/orgs",
      "repos_url": "https://api.github.com/users/samw3/repos",
      "events_url": "https://api.github.com/users/samw3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samw3/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-04T03:47:24Z",
    "updated_at": "2020-03-04T21:11:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA 2D game with a lot of node work in the editor.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI often forget to set exported script variables which do not have a default and which require a value from the inspector.  If I could see a warning icon when I have forgotten to set something it would really help my workflow and cut down on hunting through nodes to find something I missed in a debug session.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a warning icon (yellow triangle with exclamation) to inspector exported variable fields which need a setting from the inspector, similar to the collision shape reminders in the Scene tab.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nOne way to approach this would be to add an optional `required` flag to export hints, perhaps before the type:\r\n   `export(required, int) var healthPoints`\r\n\r\nIf the `required` hint is specified and the exported var does not have a default and if the user has not supplied a value in the inspector, then the inspector would display a warning icon (yellow triangle with exclamation) inside of the script variable label right aligned.\r\n\r\n<img width=\"417\" alt=\"WarningIcon\" src=\"https://user-images.githubusercontent.com/231388/75843628-950d0e00-5da1-11ea-9413-6208a097beed.png\">\r\n\r\nAlso, source code such as this would be marked as a warning or error:\r\n   `export(required, int) var healthPoints = 10`\r\n   `Warning: required export variable has a default value.  To remove this warning either remove the required keyword or the default value.`\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't believe it can be worked around, but maybe I'm missing something.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis relates to how the core editor works.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/550/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/548",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/548/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/548/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/548/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/548",
    "id": 574719331,
    "node_id": "MDU6SXNzdWU1NzQ3MTkzMzE=",
    "number": 548,
    "title": "Add the ability to send authentication information in before accepting RPC calls",
    "user": {
      "login": "IlyaStuurFedorov",
      "id": 51226895,
      "node_id": "MDQ6VXNlcjUxMjI2ODk1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51226895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IlyaStuurFedorov",
      "html_url": "https://github.com/IlyaStuurFedorov",
      "followers_url": "https://api.github.com/users/IlyaStuurFedorov/followers",
      "following_url": "https://api.github.com/users/IlyaStuurFedorov/following{/other_user}",
      "gists_url": "https://api.github.com/users/IlyaStuurFedorov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IlyaStuurFedorov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IlyaStuurFedorov/subscriptions",
      "organizations_url": "https://api.github.com/users/IlyaStuurFedorov/orgs",
      "repos_url": "https://api.github.com/users/IlyaStuurFedorov/repos",
      "events_url": "https://api.github.com/users/IlyaStuurFedorov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IlyaStuurFedorov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-03T14:46:21Z",
    "updated_at": "2020-12-15T16:42:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a 3D multiplayer game with an authoritative server architecture.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere is no way to prevent malicious users from joining a server and starting to call random RPC functions in order to break game's logic.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere should be a way to send authentification information before an actual handshake will occur, and the player will be able to send RPC calls to the server.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI took this idea from a library that I worked with previously, and it did not have this problem (LiteNetLib). What they are doing, is that when you are connecting to a server, you are given a choice to additionally send some authentification info in order to validate player on the server.\r\nI am unfamiliar with GDScript, so I will be using C# in my issue instead, sorry in advance.\r\n\r\nCurrently, method `CreateClient` from `NetworkedMultiplayerENet` only accepts basic features like IP, port and bandwidth:\r\n`CreateClient(string address, int port, int inBandwidth = 0, int outBandwidth = 0, int clientPort = 0)`\r\n\r\n I propose to add an additional argument `Key`, that is going to be a byte array, so that client could send that info like this:\r\n`CreateClient(string address, int port, byte[] key, int inBandwidth = 0, int outBandwidth = 0, int clientPort = 0)`\r\n\r\nAnd also `network_peer_connected` should change arguments from `(int id)` to `(int id, byte[] key)` to suit this system.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI really don't want to see networking games in Godot to have this insecurity, which forces to write code in a manner of constant checks for player being properly registered on the server.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nMy reasoning is explained in previous answer.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/548/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/546",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/546/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/546/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/546/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/546",
    "id": 574363484,
    "node_id": "MDU6SXNzdWU1NzQzNjM0ODQ=",
    "number": 546,
    "title": "Collapsible property draws and ability to move them in the Inspector.",
    "user": {
      "login": "levonravel",
      "id": 11763827,
      "node_id": "MDQ6VXNlcjExNzYzODI3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11763827?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/levonravel",
      "html_url": "https://github.com/levonravel",
      "followers_url": "https://api.github.com/users/levonravel/followers",
      "following_url": "https://api.github.com/users/levonravel/following{/other_user}",
      "gists_url": "https://api.github.com/users/levonravel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/levonravel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/levonravel/subscriptions",
      "organizations_url": "https://api.github.com/users/levonravel/orgs",
      "repos_url": "https://api.github.com/users/levonravel/repos",
      "events_url": "https://api.github.com/users/levonravel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/levonravel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-03T01:54:27Z",
    "updated_at": "2020-03-06T17:49:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am currently getting started in GoDot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe issue is more of a quality of life type deal, the Inspector feels a bit cluttered.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would make the Inspector easier to read and follow.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/11763827/75735067-7712b100-5cae-11ea-8c92-7308e4e2c6b0.png) the ability to move and hide property draws makes the UI feel and look cleaner.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would have to look at the source code and figure out if I can make the adjustment myself. I am more then sure it would be more then a few lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHonestly I am new to GoDot coming from Unity3D if I can make the addon and adjust the menus I might try my hand at it and make the addon. It would be a really nice feature to see implemented in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/546/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/542",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/542/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/542/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/542/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/542",
    "id": 573572937,
    "node_id": "MDU6SXNzdWU1NzM1NzI5Mzc=",
    "number": 542,
    "title": "Import collision shape without adding redundant static node",
    "user": {
      "login": "RicardRC",
      "id": 35220750,
      "node_id": "MDQ6VXNlcjM1MjIwNzUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/35220750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RicardRC",
      "html_url": "https://github.com/RicardRC",
      "followers_url": "https://api.github.com/users/RicardRC/followers",
      "following_url": "https://api.github.com/users/RicardRC/following{/other_user}",
      "gists_url": "https://api.github.com/users/RicardRC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RicardRC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RicardRC/subscriptions",
      "organizations_url": "https://api.github.com/users/RicardRC/orgs",
      "repos_url": "https://api.github.com/users/RicardRC/repos",
      "events_url": "https://api.github.com/users/RicardRC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RicardRC/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-03-01T16:16:14Z",
    "updated_at": "2020-05-27T19:10:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a 3D space sim/4X game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy base objects are already static bodies, and all I'd need is to import the collision shape, without adding any other node in between. While the current flags are useful (-colonly, -col, etc.), they all add a static body by default.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think that godot could be improved in one of two ways, the sophisticated one and the simple one:\r\n- Detect that the collision shape is being added to a node of a type that uses collision shapes, and abstain from adding a static body node in that case, removing redundancy and clutter. (area, static body, etc.)\r\n- Just add another flag to signal when you want the shape to be imported without static mesh (for example -colshape)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe first option would require to check the parent type before adding static bodies and do so only when the parent is not aware of collision shapes. It's a tougher beast, because it would change the result, and so, could break people's projects if they expect the current redundant layout.\r\n\r\nThe second option would require just another flag, as the ones already present, with an even simpler implementation. It would not break any previous works, becasue it would only impact those that use the new flag.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt looks like it can. (But I don't know how, because adding a script would execute during game runtime each time an instance is created, and it's a step that can be more efficiently made at import time just once)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'd say that because the importer is part of the core, its improvements also belong there.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/542/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/541",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/541/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/541/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/541/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/541",
    "id": 573493265,
    "node_id": "MDU6SXNzdWU1NzM0OTMyNjU=",
    "number": 541,
    "title": "Use different app icons for alpha/beta/rc builds (and possibly Mono builds)",
    "user": {
      "login": "noidexe",
      "id": 526829,
      "node_id": "MDQ6VXNlcjUyNjgyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/526829?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/noidexe",
      "html_url": "https://github.com/noidexe",
      "followers_url": "https://api.github.com/users/noidexe/followers",
      "following_url": "https://api.github.com/users/noidexe/following{/other_user}",
      "gists_url": "https://api.github.com/users/noidexe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/noidexe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/noidexe/subscriptions",
      "organizations_url": "https://api.github.com/users/noidexe/orgs",
      "repos_url": "https://api.github.com/users/noidexe/repos",
      "events_url": "https://api.github.com/users/noidexe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/noidexe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-01T06:19:53Z",
    "updated_at": "2020-11-26T21:05:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nAny project not using the latest stable build\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen testing alphas, betas, rcs, etc. and having them pinned in the taskbar it's hard to know which is which since they share the same icon\r\n![image](https://user-images.githubusercontent.com/526829/75619780-0446f000-5b5f-11ea-9e40-4e93ae87577f.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nHaving noticeably different icons for different builds makes it easier to use them in tandem, either when testing alpha/beta/nightly versions\r\n![image](https://user-images.githubusercontent.com/526829/75619973-bb446b00-5b61-11ea-929a-4ab07ba0b9e5.png)\r\n\r\n\r\nThis is what mozilla does with Firefox\r\n![image](https://user-images.githubusercontent.com/526829/75619957-93ed9e00-5b61-11ea-8944-91804b41f02f.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![godot-icons svg](https://user-images.githubusercontent.com/526829/75620663-5c372400-5b6a-11ea-99a0-b8f69d72b7b4.png)\r\n\r\nThis is by no means a design proposal, but I think it is important to make them easily distinguishable by shape and color, so they can be identified at a glance and at any size (also for accessibility).\r\n - Anything built from the master branch gets the \"master\" edition of the icon. This would probably include versions you build yourself, Hugo's nightly builds, etc. \r\n - Officially distributed, alpha, beta, rc and stable versions will use their respective icons\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n- If building from source it's just a matter of replacing the icon before building\r\n- For downloaded binaries I think there are tools that can replace the icon, but it'd be very inconvenient to do that every time.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nCan't be done through the asset library",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/541/reactions",
      "total_count": 91,
      "+1": 59,
      "-1": 0,
      "laugh": 8,
      "hooray": 3,
      "confused": 0,
      "heart": 20,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/540",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/540/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/540/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/540/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/540",
    "id": 573334078,
    "node_id": "MDU6SXNzdWU1NzMzMzQwNzg=",
    "number": 540,
    "title": "Better Orphan Nodes and memory leaks tracking",
    "user": {
      "login": "qarmin",
      "id": 41945903,
      "node_id": "MDQ6VXNlcjQxOTQ1OTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41945903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qarmin",
      "html_url": "https://github.com/qarmin",
      "followers_url": "https://api.github.com/users/qarmin/followers",
      "following_url": "https://api.github.com/users/qarmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/qarmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qarmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qarmin/subscriptions",
      "organizations_url": "https://api.github.com/users/qarmin/orgs",
      "repos_url": "https://api.github.com/users/qarmin/repos",
      "events_url": "https://api.github.com/users/qarmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qarmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-29T16:53:04Z",
    "updated_at": "2020-03-01T04:23:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm trying to port [Tanks of Freedom](https://github.com/w84death/Tanks-of-Freedom) from Godot 2.1 to Godot 3.2  \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNow early port Tanks of Freedom in Godot 3.2 have a lot of leaked nodes, which is really hard to track and fix. \r\nI found also a lot of leaks in others projects e.g. GUT - Godot Unit Testing - which is almost not possible to fix by other people than author.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nProbably a lot of people doesn't know that in Godot nodes can leak.\r\nAll nodes(some objects etc.) which are outside scene tree must be deleted at the end of project life with queue_free or free functions.\r\nWhen we don't do that, then nodes will leak which means that we leak memory which means that we can use smaller amount memory than before.\r\nThis is sadly not described in docs, but maybe someone will resolve this issue - https://github.com/godotengine/godot-docs/issues/2854\r\n\r\nNow we have 2 tools to track and fix leaks:\r\n- Orphan nodes monitor - shows only number of leaked nodes but in real time\r\n- Output in terminal, when running Godot with -v flag - Shows all leaked nodes when exiting project with its name and type\r\n\r\nbut I think that adding some more tools to fix leaks will help:\r\n1. Automatically setting node name to name of script and line in which is created:\r\n\r\ntools.gd\r\n```\r\n1. var node : Node = Node.new() \r\n```\r\n  \r\nNow this should print to console(when run Godot with -v flag) something like\r\n```\r\nLeaked instance: Node:1172 - Node name: \"tools.gd:1\" \r\nOrphan StringName: Node\r\n```\r\ninstead default message\r\n```\r\nLeaked instance: Node:1172 - Node name: \r\nOrphan StringName: Node\r\n```\r\n2. Adding real time preview to Orphan Nodes monitor.\r\nThis would be really helpful if Godot would list and show in real time in \"orphan nodes\" menu/tab(similar to tabs \"Scene Tree\" and \"Remote Scene Tree\") all created Nodes, with ability to check its parameters in inspector like name, texture or visibility.\r\n\r\n3. Split Orphan Nodes monitor\r\nNow lost completely lost nodes are listed as Orphan Nodes exactly like nodes which are outside scene tree, but still some variable have reference to it.\r\nThis can be really confusing, so I think, that better will be to draw 2 lines with lost and not lost but outside tree nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFirst proposal, is just builtin replace of this code\r\n```\r\nvar node : Node = Node.new()\r\nnode.set_name(\"file.gd:1\") # This should manually do programmer which is ineffective.\r\n```\r\nbut I found that in almost every project, nodes haven't names, because giving name to each would be very boring and almost no people knows that this would help to track leaked nodes at the end.\r\n\r\nSecond and third need to change core or editor code, but I wasn't looking on it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI think that this enhancements will be often used and will increase programmers productivity, because it will allow to find and repair memory leaks, which(from my experience) happens regularly.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think that basic tools to removing leaks(and bugs generally) should be integrated into core of engine, and also because almost all Godot users at least once tried to remove leak.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/540/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/538",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/538/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/538/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/538/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/538",
    "id": 573304591,
    "node_id": "MDU6SXNzdWU1NzMzMDQ1OTE=",
    "number": 538,
    "title": "Add a method to print a formatted Dictionary/Array",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-02-29T14:27:08Z",
    "updated_at": "2020-11-13T23:21:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCard Game (N/A)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen working with dicts/arrays, it's useful to be able to see their contents by printing them.\r\nHowever, printed dicts/arrays are hard to read unless a custom string parser is used to format their contents into a readable string.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'm proposing that a new function be added to GDScript that allows printing formatted string representations of dicts/arrays.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n_**(Example - tested and works):**_\r\n```\r\nconst S := {\r\n#//\t-- Info --\r\n\tNAME = \"Name\",\r\n\tSPELLS = \"Spells\",\r\n\tSTATS = \"Stats\",\r\n\tRACE = \"Race\",\r\n\tTYPE = \"Type\",\r\n\tDESCRIPTION = \"Description\",\r\n#//\t-- Spell Data --\r\n\tSPELL_NAME = \"Spell Name\",\r\n\tTARGETS = \"Targets\",\r\n\tCOST = \"Cost\",\r\n\tCOOLDOWN = \"Cooldown\",\r\n\tTARGETABLES = \"Targetables\",\r\n#//\t-- Stats --\r\n\tOFFENSE = \"Offense\",\r\n\tDEFENSE = \"Defense\",\r\n\tMAGIC = \"Magic\",\r\n\tHEALTH = \"Health\",\r\n#//\t-- Race --\r\n\tHUMAN = \"Human\",\r\n\tCREATURE = \"Creature\",\r\n#//\t-- Type --\r\n\tSPELLCASTER = \"Spellcaster\",\r\n\tWARRIOR = \"Warrior\",\r\n#//\t-- Spell Names --\r\n\tFIREBALL = \"Fireball\",\r\n\tSWAP = \"Swap\",\r\n#//\t-- Char Names --\r\n\tWIZARD = \"Wizard\",\r\n#//\t-- Target Types --\r\n\tNONESELF = \"Nonself\",\r\n\tSELF = \"Self\",\r\n\tENEMY = \"Enemy\",\r\n\tALLY = \"Ally\",\r\n\tUNIQUE = \"Unique\",\r\n\tSAME = \"Same\",\r\n\tANY = \"Any\",\r\n\t}\r\n\r\n\r\nconst wizard_description := \\\r\n\"\"\"A powerful wizard\r\nproficient in\r\noffensive magic\"\"\"\r\n\r\n\r\nvar my_dict := {\r\n\tS.NAME: S.WIZARD,\r\n\tS.DESCRIPTION: wizard_description,\r\n\tS.SPELLS: [\r\n\t\t\t\t{S.SPELL_NAME: S.FIREBALL, S.TARGETS: 1, S.COST: 5, S.COOLDOWN: 2, S.TARGETABLES: {S.ENEMY: S.ANY}},\r\n\t\t\t\t{S.SPELL_NAME: S.SWAP, S.TARGETS: 2, S.COST: 4, S.COOLDOWN: 3, S.TARGETABLES: {S.ENEMY: S.ANY, S.ALLY: S.NONESELF}}\r\n\t\t\t\t],\r\n\tS.STATS: {S.OFFENSE: 10, S.DEFENSE: 3, S.MAGIC: 20, S.HEALTH: 50, S.RACE: S.HUMAN, S.TYPE: S.SPELLCASTER},\r\n\t}\r\n\r\n\r\n\r\n\r\nfunc print_dict_pretty(__dict : Dictionary, __original_order := true, __quotes_removed := true) -> void:\r\n\tprint(collection_to_str(__dict, __original_order, __quotes_removed))\r\n\r\n\r\nfunc print_array_pretty(__array : Array, __original_order := true, __quotes_removed := true) -> void:\r\n\tprint(collection_to_str(__array, __original_order, __quotes_removed))\r\n\r\n\r\n\r\nfunc collection_to_str(__collection, __original_order := true, __quotes_removed := true) -> String:\r\n\tif !__original_order:\r\n\t\t__collection = get_alphabetized_collection(__collection)\r\n\r\n\tvar __collection_as_str := \"\"\r\n\r\n\tmatch typeof(__collection):\r\n\t\tTYPE_ARRAY, TYPE_DICTIONARY:\r\n\t\t\t__collection_as_str = to_ordered_multiline_JSON(__collection, __original_order, __quotes_removed)\r\n\t\t_:\r\n\t\t\tassert(false)\r\n\r\n\tvar __opening_brackets := [\"{\", \"[\"]\r\n\tvar __closing_brackets := [\"}\", \"]\"]\r\n\tvar __all_brackets := __opening_brackets + __closing_brackets\r\n\r\n\tvar __d_quote := \"\\\"\"\r\n\tvar __s_quote := \"'\"\r\n\tvar __obj_token := \"^\"\r\n\r\n\tvar __inside_d_quote := false\r\n\tvar __inside_s_quote := false\r\n\tvar __inside_obj_str := false\r\n\r\n\tvar __indent_level := 0\r\n\tvar __indention_array := []\r\n\tvar __temp_str := \"\"\r\n\r\n\tfor __c_char in __collection_as_str:\r\n\t\tmatch __c_char:\r\n\t\t\t__d_quote:\r\n\t\t\t\t__inside_d_quote = !__inside_d_quote\r\n\t\t\t\t__temp_str += __c_char\r\n\t\t\t__s_quote:\r\n\t\t\t\t__inside_s_quote = !__inside_s_quote\r\n\t\t\t\t__temp_str += __c_char\r\n\t\t\t__obj_token:\r\n\t\t\t\tif !__inside_d_quote and !__inside_s_quote:\r\n\t\t\t\t\t__inside_obj_str = !__inside_obj_str\r\n\t\t\t\t\t__temp_str += __c_char\r\n\r\n\t\t\t\",\", \"{\", \"}\", \"[\", \"]\":\r\n\t\t\t\tif __inside_d_quote or __inside_s_quote or __inside_obj_str:\r\n\t\t\t\t\t__temp_str += __c_char\r\n\t\t\t\telse:\r\n\t\t\t\t\tif __all_brackets.has(__c_char):\r\n\t\t\t\t\t\t__temp_str += str(\"\\n\", __c_char)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\t__temp_str += str(__c_char, \"\\n\")\r\n\t\t\t_:\r\n\t\t\t\t__temp_str += __c_char\r\n\r\n\t__temp_str = __temp_str.replace(\"\\n,\", \",\")\r\n\r\n\twhile \"\\n\\n\" in __temp_str:\r\n\t\t__temp_str = __temp_str.replace(\"\\n\\n\", \"\\n\")\r\n\r\n\tvar __collection_as_str_lines : Array = __temp_str.split(\"\\n\")\r\n\r\n\tfor __c_line in __collection_as_str_lines:\r\n\t\tvar __indent_str = \"\\t\".repeat(__indent_level)\r\n\t\tvar __first_char : String = __c_line.left(1)\r\n\t\tvar __last_char : String = __c_line.right(__c_line.length() - 1)\r\n\t\tif __first_char.empty():\r\n\t\t\tif !__c_line.empty():\r\n\t\t\t\tassert(false)\r\n\r\n\t\tvar __pending_indent := false\r\n\r\n\t\tif __opening_brackets.has(__first_char) \\\r\n\t\tor __opening_brackets.has(__last_char):\r\n\t\t\t__pending_indent = true\r\n\t\telif __closing_brackets.has(__first_char):\r\n\t\t\t__indent_level -= 1\r\n\r\n\t\t__indent_str = \"\\t\".repeat(__indent_level)\r\n\t\t__indention_array.append(__indent_str)\r\n\r\n\t\tif __pending_indent:\r\n\t\t\t__indent_level += 1\r\n\r\n\tassert(__indention_array.size() == __collection_as_str_lines.size())\r\n\tvar __line_count := __collection_as_str_lines.size()\r\n\r\n\tvar __formatted_line_array := []\r\n\r\n\tfor __n in __line_count:\r\n\t\tvar __c_collection_str_line : String = __collection_as_str_lines[__n]\r\n\t\tvar __c_indent_str : String = __indention_array[__n]\r\n\t\t__formatted_line_array.append(str(__c_indent_str, __c_collection_str_line))\r\n\r\n\tvar __formatted_str := \"\"\r\n\r\n\tfor __formatted_line in __formatted_line_array:\r\n\t\t__formatted_str += __formatted_line + \"\\n\"\r\n\t\t\r\n\t__formatted_str = __formatted_str.replace(__obj_token, \"\")\r\n\treturn __formatted_str\r\n\r\n\r\n\r\nfunc get_alphabetized_collection(__collection):\r\n\tmatch typeof(__collection):\r\n\t\tTYPE_DICTIONARY:\r\n\t\t\tvar __alphabetized_dict := {}\r\n\t\t\tvar __original_order_keys: Array = __collection.keys().duplicate(true)\r\n\t\t\tvar __alphabetized_keys: Array = __original_order_keys.duplicate(true)\r\n\t\t\t__alphabetized_keys.sort()\r\n\r\n\t\t\tfor __i in __collection.size():\r\n\t\t\t\tvar __original_order_key = __original_order_keys[__i]\r\n\t\t\t\tvar __alphabetized_key = __alphabetized_keys[__i]\r\n\t\t\t\tvar __alphabetized_val_index: int = __original_order_keys.find(__alphabetized_key)\r\n\t\t\t\tvar __alphabetized_val = __collection.values()[__alphabetized_val_index]\r\n\t\t\t\t__alphabetized_dict[__alphabetized_key] = __alphabetized_val\r\n\t\t\treturn __alphabetized_dict\r\n\r\n\t\tTYPE_ARRAY:\r\n\t\t\tvar __alphabetized_array: Array = __collection.duplicate(true)\r\n\t\t\t__alphabetized_array.sort()\r\n\t\t\treturn __alphabetized_array\r\n\t\t_:\r\n\t\t\tassert(false)\r\n\tpass\r\n\r\n\r\n\r\nfunc to_ordered_multiline_JSON(__collection, __original_order : bool, __quotes_removed: bool) -> String:\r\n\tvar __collection_as_str := \"\"\r\n\r\n\tif __collection is Array:\r\n\t\t__collection_as_str = \"[\"\r\n\r\n\t\tfor __i in __collection.size():\r\n\t\t\tvar __element = __collection[__i]\r\n\t\t\tvar __element_as_str := to_custom_str(__element, __original_order, __quotes_removed)\r\n\r\n\t\t\t__collection_as_str += \"\\n\" + __element_as_str + \",\"\r\n\r\n\t\t__collection_as_str = __collection_as_str.trim_suffix(\",\")\r\n\t\t__collection_as_str += \"\\n\" + \"]\"\r\n\r\n\telif __collection is Dictionary:\r\n\t\t__collection_as_str = \"{\"\r\n\r\n\t\tfor __i in __collection.size():\r\n\t\t\tvar __key = __collection.keys()[__i]\r\n\t\t\tvar __val = __collection.values()[__i]\r\n\t\t\tvar __key_as_str := to_custom_str(__key, __original_order, __quotes_removed)\r\n\t\t\tvar __val_as_str := to_custom_str(__val, __original_order, __quotes_removed)\r\n\t\t\tvar __key_value_pair_str := str(__key_as_str, \":\", __val_as_str)\r\n\t\t\t__collection_as_str += \"\\n\" + __key_value_pair_str + \",\"\r\n\r\n\t\t__collection_as_str = __collection_as_str.trim_suffix(\",\")\r\n\t\t__collection_as_str += \"\\n\" + \"}\"\r\n\r\n\telse:\r\n\t\tassert(false)\r\n\r\n\treturn __collection_as_str\r\n\r\n\r\n\r\nfunc to_custom_str(__var, __original_order : bool, __quotes_removed: bool) -> String:\r\n\tvar __obj_token := \"^\"\r\n\tvar __var_as_str := \"\"\r\n\tmatch typeof(__var):\r\n\t\tTYPE_DICTIONARY, TYPE_ARRAY:\r\n\t\t\tif __original_order:\r\n\t\t\t\t__var_as_str = to_ordered_multiline_JSON(__var, __original_order, __quotes_removed)\r\n\t\t\telse:\r\n\t\t\t\t__var_as_str = to_ordered_multiline_JSON(get_alphabetized_collection(__var), __original_order, __quotes_removed)\r\n\r\n\t\tTYPE_OBJECT:\r\n\t\t\t__var_as_str = __obj_token + str(__var) + __obj_token\r\n\t\tTYPE_STRING:\r\n\t\t\tif __quotes_removed:\r\n\t\t\t\t__var_as_str = str(__var)\r\n\t\t\telse:\r\n\t\t\t\t__var_as_str = \"\\\"\" + str(__var) + \"\\\"\"\r\n\r\n\t\t\tif \"\\n\" in __var_as_str:\r\n\t\t\t\tif !__var_as_str.begins_with(\"\\n\"):\r\n\t\t\t\t\t__var_as_str = \"\\n\" + __var_as_str\r\n\t\t\t\t__var_as_str = __var_as_str.replace(\"\\n\", \"\\n\\t\")\r\n\t\t_:\r\n\t\t\t__var_as_str = str(__var)\r\n\treturn __var_as_str\r\n```\r\n_**Calling `print_dict_pretty(my_dict)` would print this:**_\r\n```\r\n{\r\n\tName:Wizard,\r\n\tDescription:\r\n\t\tA powerful wizard\r\n\t\tproficient in\r\n\t\toffensive magic,\r\n\tSpells:\r\n\t[\r\n\t\t{\r\n\t\t\tSpell Name:Fireball,\r\n\t\t\tTargets:1,\r\n\t\t\tCost:5,\r\n\t\t\tCooldown:2,\r\n\t\t\tTargetables:\r\n\t\t\t{\r\n\t\t\t\tEnemy:Any\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tSpell Name:Swap,\r\n\t\t\tTargets:2,\r\n\t\t\tCost:4,\r\n\t\t\tCooldown:3,\r\n\t\t\tTargetables:\r\n\t\t\t{\r\n\t\t\t\tEnemy:Any,\r\n\t\t\t\tAlly:Nonself\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\tStats:\r\n\t{\r\n\t\tOffense:10,\r\n\t\tDefense:3,\r\n\t\tMagic:20,\r\n\t\tHealth:50,\r\n\t\tRace:Human,\r\n\t\tType:Spellcaster\r\n\t}\r\n}\r\n```\r\n_**Features:**_\r\n```\r\n\t- Prints dicts in originally created order by default\r\n\t- Optional alphabetical sorting of all nested dicts and arrays\r\n\t- Optional printed quotation marks around strings\r\n\t- Multi-line strings print beginning on new line\r\n```\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot a \"few\" lines, but I've provided working example code above that handles printing formatted dicts/arrays.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think most people would want this functionality basically every time they printed a dict/array.\r\nOtherwise, they can just use print(var) or print(to_json(var)).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/538/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/536",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/536/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/536/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/536/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/536",
    "id": 573248873,
    "node_id": "MDU6SXNzdWU1NzMyNDg4NzM=",
    "number": 536,
    "title": "Add a way to access stdout and stderr's contents from the engine",
    "user": {
      "login": "EIREXE",
      "id": 3101690,
      "node_id": "MDQ6VXNlcjMxMDE2OTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3101690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EIREXE",
      "html_url": "https://github.com/EIREXE",
      "followers_url": "https://api.github.com/users/EIREXE/followers",
      "following_url": "https://api.github.com/users/EIREXE/following{/other_user}",
      "gists_url": "https://api.github.com/users/EIREXE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EIREXE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EIREXE/subscriptions",
      "organizations_url": "https://api.github.com/users/EIREXE/orgs",
      "repos_url": "https://api.github.com/users/EIREXE/repos",
      "events_url": "https://api.github.com/users/EIREXE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EIREXE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-02-29T08:15:54Z",
    "updated_at": "2020-12-31T16:40:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA Rhythm Videogame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI would like to redirect standard outputs to my game so that I can log it myself and use it with steam logging services.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSome sort of mechanism to redirect stderr and stdout, this would not only include print() calls but anything the engine has printed too.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCould be a global singleton (or an existing one) that has a signal that is fired when a line is printed by the engine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou could continuously read the log files, but I am not sure how well that would work.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt needs to be core because the only way you could solve it is with an engine module, and I am not entirely sure if it could even  be done without changing the engine's code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/536/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/533",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/533/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/533/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/533/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/533",
    "id": 572354919,
    "node_id": "MDU6SXNzdWU1NzIzNTQ5MTk=",
    "number": 533,
    "title": "Add preview for breakpoint placement",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-27T20:57:21Z",
    "updated_at": "2020-02-27T21:53:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the problem or limitation you are having:**\r\n\r\nPlacing breakpoints is not very responsive.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe breakpoint positing hovered over should be a highlighted.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![Untitled](https://user-images.githubusercontent.com/28286961/75486044-1d5b6f80-59ac-11ea-8dc4-23c245223a16.png)\r\n\r\nModify https://github.com/godotengine/godot/blob/master/editor/plugins/script_text_editor.cpp.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/533/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/532",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/532/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/532/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/532/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/532",
    "id": 572350811,
    "node_id": "MDU6SXNzdWU1NzIzNTA4MTE=",
    "number": 532,
    "title": "Add keyboard shortcuts in the Project Manager",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-27T20:49:25Z",
    "updated_at": "2020-02-27T21:53:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA temporary project to test things.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe project manager has no shortcuts, which means I have to manually press the \"add project\" button every time I want to create a temporary project.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThese keyboard shortcuts should be added:\r\n**Focus Search**: ctrl+f\r\n**Edit**: ctrl+e and enter\r\n**Run**: ctrl+r\r\n**Scan**: ctrl+s\r\n**New Project**: ctrl+n\r\n**Import**: ctrl+i\r\n**Rename**: f2\r\n**Remove**: delete\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd shorcuts to buttons here:\r\nhttps://github.com/godotengine/godot/blob/3a7f1300ee8a71e8197b807405a1e4b04c48f8a9/editor/project_manager.cpp#L792\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is part of the project manager.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/532/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/531",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/531/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/531/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/531/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/531",
    "id": 572346510,
    "node_id": "MDU6SXNzdWU1NzIzNDY1MTA=",
    "number": 531,
    "title": "Change preload paths when moving files",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-27T20:40:56Z",
    "updated_at": "2020-03-04T21:26:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA demo project for a multiplayer game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI am moving folders and files around to make refine the structure and make it easy to understand, but every time I do so I have to change all the preloads.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nPreload paths should be changed when moving files in the file system dock.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nLook for scripts here and replace preload paths.\r\nhttps://github.com/godotengine/godot/blob/3a7f1300ee8a71e8197b807405a1e4b04c48f8a9/editor/filesystem_dock.cpp#L1046\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is part of core functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/531/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/527",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/527/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/527/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/527/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/527",
    "id": 571639423,
    "node_id": "MDU6SXNzdWU1NzE2Mzk0MjM=",
    "number": 527,
    "title": "Add 3-axis gizmo movement to Path3D points",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-02-26T20:28:36Z",
    "updated_at": "2020-12-22T16:31:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA 3D Platformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWorking with Paths, For example if I want to move a point only in X Axis, or Y Axis, I simply can't even if I could adding a 3Axis Gizmo would really help\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe solution is adding 3Axis Gizmo like you do for moving Spatial Nodes!\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBefore:\r\n![Screenshot from 2020-02-26 17-16-29](https://user-images.githubusercontent.com/58845030/75384407-d0e53680-58bc-11ea-98e5-79b0d292d4df.png)\r\n\r\nAfter:\r\n![vec](https://user-images.githubusercontent.com/58845030/75384606-23265780-58bd-11ea-95ec-73b14ffa6ae3.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think its possible to create a plugin that lets you do that, but in my vision this really needs to be core feature!\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBasic Functionality",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/527/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/526",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/526/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/526/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/526/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/526",
    "id": 571293192,
    "node_id": "MDU6SXNzdWU1NzEyOTMxOTI=",
    "number": 526,
    "title": "Add dedicated rect editors to objects with `rect` properties",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-26T12:03:50Z",
    "updated_at": "2020-03-11T14:48:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use visibility notifiers to enable enemies when they enter screen or remove dead ones out of view. However my notifiers aren't accurate, because I'm too lazy to set them properly. See this\r\n![image](https://user-images.githubusercontent.com/2223172/75342985-ca909380-5897-11ea-843a-dcb65db2f0b4.png)\r\nIt's very tempting to use the handles, but these are standard 2D handles. They don't modify the rect, just scale the node. If I wanted to set the rects to correct values, I need to enter them by hand. That's too much work, meh.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe handles should edit the `rect` value VisibilityNotifier2D, not its scale.\r\n\r\nThis might apply to other nodes too (Particles2D, Sprite with `rect_region` enabled, anything that has rects that you could edit).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd a specialized editor to edit 2D rects where applicable, overriding the default scaling behavior. Similar thing as in Controls, but for Node2D-derived nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis requires a plugin. That's more than few lines. Also everyone using these nodes will use the functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's usability thing for core nodes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/526/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/522",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/522/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/522/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/522/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/522",
    "id": 570776160,
    "node_id": "MDU6SXNzdWU1NzA3NzYxNjA=",
    "number": 522,
    "title": "Add a widget to specify project command-line arguments in the editor main window",
    "user": {
      "login": "naturally-intelligent",
      "id": 6783606,
      "node_id": "MDQ6VXNlcjY3ODM2MDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6783606?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naturally-intelligent",
      "html_url": "https://github.com/naturally-intelligent",
      "followers_url": "https://api.github.com/users/naturally-intelligent/followers",
      "following_url": "https://api.github.com/users/naturally-intelligent/following{/other_user}",
      "gists_url": "https://api.github.com/users/naturally-intelligent/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naturally-intelligent/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naturally-intelligent/subscriptions",
      "organizations_url": "https://api.github.com/users/naturally-intelligent/orgs",
      "repos_url": "https://api.github.com/users/naturally-intelligent/repos",
      "events_url": "https://api.github.com/users/naturally-intelligent/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naturally-intelligent/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-02-25T19:18:04Z",
    "updated_at": "2020-09-26T22:23:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMultiple games and small apps.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen running any project, often I will use a \"dev.gd\" file or other file to change the launch state of the application.  However, doing this is problematic because: \r\n\r\n1 - Finding the \"dev.gd\" file is frustrating when many GD files are open\r\n2 - Don't want the changes to always be permanent across sessions\r\n3 - Don't want the changes to always be included with a release build (often forget to undo the changes back to blank state, end up building again to wipe debug settings)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA simple line text edit, white font on black background.  Optional and must be enabled in Godot Editor Settings.  In this, the user of the editor can set a string for command line arguments to be passed to the application.  For example:\r\n\r\n\"level=10 cash=50 health=800 scene=end-fight\"\r\n\r\nThe application would be responsible for parsing these arguments just like regular command line arguments.  When the Godot Editor is restarted, this console is blank.  This console does not have permanence, the arguments could not be included in a release build.  Something like these removes a bulk of the need for a constantly changing development GD file, a file which can cause havoc if not reset to blank on release.  Having the arguments always visible and handy in the editor would be a relief.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe argument string would be passed to the application at execution.  The application would be responsible for using the arguments (would be ignored by default).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used very frequently, practically every session.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nA lot of developers would love this feature!!  :)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/522/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/521",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/521/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/521/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/521/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/521",
    "id": 570567137,
    "node_id": "MDU6SXNzdWU1NzA1NjcxMzc=",
    "number": 521,
    "title": "Better fonts and comment functionality in Visual Script . . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-25T13:24:00Z",
    "updated_at": "2020-02-26T01:39:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a Tomb Raider game, and a RTS, StarCraft-like . . ::)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI like to use visual script, but right now making comments is really tough, it takes a lot of time, the ' enter ' at the end of each line, has to be made manually, and the boxes are tough to size, often they get ' lost ' in other boxes, and the ' corner ' one can move them with, is very small . . . I like writing good documentation, for my scripts, for later, and others to see, study . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf we got a functionality, where one could write directly on the script canvas, and had some better fonts, more readable, it would be a lot nicer . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt would just be a text editor, sort of, where one could write quickly on the screen, almost like grease pencil, and have a few fonts, nice ones . .\r\n\r\n![2020-02-25 1420 Script Boxes](https://user-images.githubusercontent.com/61069740/75251041-154bd600-57da-11ea-8d6d-4131734ba9d3.jpg)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nRight now I don't think you can change the font, or make text bold, or italic . . As an artist-minded dev, having the ability to make my scripts look nice, and inviting, also for tutorials where youtubers could stop the video, and read the box, along with the tutorial, if needed, would really make me happy . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, for me it would really be nice, a faster, more user-friendly comment system, so I can make better documentation, for myself, also if others ask for my scripts, they can download them with good instructions, or for showing others, on a team . .\r\n\r\nIt's a small request, but it would be really nice, very helpful . . :) As an artist, I like beautiful, appealing scripts, so a few more fonts, ability to make bold, italic, or underlined, and different sizes . . <3 Then, it'd be an artists dream, Visual script . . . I know this isn't super-techy, maybe there are some MIT fonts, that are nice, it would just make it much nicer, also for later, remembering what the boxes do . . . And, also other users, for sharing . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/521/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/520",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/520/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/520/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/520/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/520",
    "id": 570485417,
    "node_id": "MDU6SXNzdWU1NzA0ODU0MTc=",
    "number": 520,
    "title": "Add warning if Node added to Editor UI has script not in Tool Mode",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-25T10:58:01Z",
    "updated_at": "2020-05-04T22:04:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nVarious editor plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt may be a matter of habit, but I find it easy to forget to add a `tool` instruction at the start of script files for Editor UI plugins. This then turns into an annoying problem, when there is no warning or error, and no output from your scripts either. The issue becomes somewhat obvious only in cases when you try to access specific methods defined in your script from another script.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA warning in *Output* would be convenient to instantly indicate, that there is a script attached to your node, but it is not in Tool Mode, so it won't load while in Editor scene tree.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not completely sure, what internal changes are required. There are two concerns though.\r\n\r\nFirst, it should be noted, that not every script in `res://addons` should raise such warning. Some plugins provide nodes and scripts to be used in game, they are never loaded into Editor scene tree. Which is why I propose that validation is performed at runtime on changes to Editor scene tree, and not statically on contents of every script file in plugin folder.\r\n\r\nSecondly, Tool Mode can also be activated in 2d/3d preview for any script. If previewed nodes are not sandboxed and are too added to Editor scene tree via some viewport, then some distinction should be determined. While there are several specific methods that plugins use to add UI (`add_control_to_dock`, `add_control_to_bottom_panel`, `add_control_to_container`, `add_tool_menu_item` and `add_tool_submenu_item`), sometimes nodes are added directly using calls like \r\n`get_editor_interface().get_editor_viewport().add_child`. This may make it harder to distinguish previewed nodes from plugin UI nodes, but should be handled correctly nonetheless.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it is possible to add a static check in some form via a plugin, but that's not ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a small enhancement for plugin creators, and should not require another plugin to be taken advantage of. Plus, ideal implementation requires changes to internal processes, I think.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/520/reactions",
      "total_count": 5,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/518",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/518/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/518/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/518/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/518",
    "id": 569853839,
    "node_id": "MDU6SXNzdWU1Njk4NTM4Mzk=",
    "number": 518,
    "title": "Ghost Nodes - Fallback nodes added in modified inherited scenes",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-24T13:25:07Z",
    "updated_at": "2020-05-26T12:15:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project using inherited scenes with new nodes added.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRenaming/moving nodes in base scenes (the scenes other scenes inherit from) cause silent data loss in inherited scenes: any nodes added in inherited scenes can deleted if their parent is renamed/moved in the base scene.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature works like this: when an inherited scene is opened, and some nodes are parented to nodes that were moved/renamed in the base scene, instead of them being lost they are added under a ghost parent, a node that has a path that their parent used to have, preferably marked somehow (icon with a warning symbol, partially transparent icon, name in italics etc., or just the old name prepended with [Ghost]/[Recovered] etc.). Then the scene goes into unsaved state. Saving the scene saves it containing the new ghost node. \r\n\r\nThe fate of the ghost node and it's children is supposed to be decided by the user, for instance the children can be moved under the node from the inherited scene that their old parent was renamed to, and the ghost node deleted.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![image](https://user-images.githubusercontent.com/7307968/75155848-2e3c8480-5711-11ea-8b4c-ea2affaa5c02.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis problem can be worked around, if one is aware of it, by carefully renaming node paths in base .tscn files and inheriting .tscn files using a global find and replace in a text editor, instead in the Godot's scene tree.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt touches core functionality.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/518/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/517",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/517/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/517/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/517/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/517",
    "id": 569589029,
    "node_id": "MDU6SXNzdWU1Njk1ODkwMjk=",
    "number": 517,
    "title": "Differentiate Image's get_data() and Texture's get_data()",
    "user": {
      "login": "rainlizard",
      "id": 15337628,
      "node_id": "MDQ6VXNlcjE1MzM3NjI4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15337628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rainlizard",
      "html_url": "https://github.com/rainlizard",
      "followers_url": "https://api.github.com/users/rainlizard/followers",
      "following_url": "https://api.github.com/users/rainlizard/following{/other_user}",
      "gists_url": "https://api.github.com/users/rainlizard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rainlizard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rainlizard/subscriptions",
      "organizations_url": "https://api.github.com/users/rainlizard/orgs",
      "repos_url": "https://api.github.com/users/rainlizard/repos",
      "events_url": "https://api.github.com/users/rainlizard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rainlizard/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-24T00:44:41Z",
    "updated_at": "2020-02-24T22:28:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProjects that deal with the Image and Texture classes.\r\n**Describe the problem or limitation you are having in your project:**\r\nPoor clarity in GDScript. I was helping someone with their code earlier today and I got them mixed up again for the 3rd time.\r\nYour code can even look like this: ``variable.get_data().get_data()`` which is just crazy. You will often be handling both classes in the same script and both classes are calling what appears to be the same function. Knowing about the difference between a \"texture\" and \"image\" in Godot is already another point of confusion in itself.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRename one of them and clarity will be improved. Now may be the best time to ask, considering other things are being renamed: https://github.com/godotengine/godot/issues/30736\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAny kind of rename, I don't mind how they are differentiated.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is about GDScript.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/517/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/516",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/516/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/516/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/516/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/516",
    "id": 569579831,
    "node_id": "MDU6SXNzdWU1Njk1Nzk4MzE=",
    "number": 516,
    "title": "Particle System Proposal",
    "user": {
      "login": "NHodgesVFX",
      "id": 11403345,
      "node_id": "MDQ6VXNlcjExNDAzMzQ1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11403345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NHodgesVFX",
      "html_url": "https://github.com/NHodgesVFX",
      "followers_url": "https://api.github.com/users/NHodgesVFX/followers",
      "following_url": "https://api.github.com/users/NHodgesVFX/following{/other_user}",
      "gists_url": "https://api.github.com/users/NHodgesVFX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NHodgesVFX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NHodgesVFX/subscriptions",
      "organizations_url": "https://api.github.com/users/NHodgesVFX/orgs",
      "repos_url": "https://api.github.com/users/NHodgesVFX/repos",
      "events_url": "https://api.github.com/users/NHodgesVFX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NHodgesVFX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-02-23T23:43:24Z",
    "updated_at": "2020-12-31T00:59:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D Games with a variety of styles. This proposal would be relevant in any project using the particle system\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nParticle editor is hard to use and lacks features.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n**1. The particle system is hard to use**\r\n\r\n- Naming of forces is unintuitive\r\n\r\n- Forces are cluttered into the particle window. it would make more sense to separate them into a \"force node.\" The force node would have options for affection distance, falloff of that distance, whether or not the force is Global (Affects the whole scene), individual force options, and a drop down menu to select the type of force. This would also allow stacking of forces. It would also be cool to have a custom force type which takes a shader or script so you can make your own.\r\n\r\n**2. lack of features**\r\n\r\n- No collisions, in modern game engines particles can collide with geometry both on the cpu and gpu(Depth based and SDF based). Also can be used to remove particles on collision.\r\n\r\n- No noise, one of the ways to get great looking particles is to introduce a noise or turbulence into the particles that makes them look natural. A PR to do this is here https://github.com/godotengine/godot/pull/22254\r\n\r\n- No way for particles to cast light and shadows, it would be nice for the particle system to be able to create lights that move with the motion of the particles and mimic the color of the particles.  As far as the light in can just be a normal Omnilight with all of its settings intact that is spawned for every n particles. This is probably less of a concern with the new GIProbe in vulkan but GIProbe lacks hard shadows and not every game that uses particles will use a GIProbe.\r\n\r\n- Lack of particles that can spawn other particles on death or other events. This makes creating fireworks and other types of effects that relies on previous particles hard.\r\n\r\n- Lack of proper Trails\r\n\r\n- Lack of emitting from a skinned mesh\r\n\r\n\r\n- Particles currently function as an enclosed box, multiple emitters interacting with each other is not supported. It would be nice to have a Global Particle object which holds emitter and force nodes. This way you can add multiple emitters and force nodes and they can all interact together.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**Naming:** instead of Tangential Force use Vortex Force\r\n\r\n**Collisions:** CPU can be done in multiple ways, one would be to treat the particles previous and current position as a line and check if it intersects a triangle. On GPU the easiest method is depth based aka screen space particles although this is simple to implement it only works in screen space. This can be acceptable for some effects, its also the fastest performance wise. SDF Particles are high quality and scene wide but harder to implement and slower. \r\n\r\n**Force Node:**  Things like attract, noise, damping, directional force, Vortex force would go here\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo this requires a change in core.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nyou could have a particle system as addon but it makes sense to just improve the one in core\r\n\r\n**Additional Notes:** This is for Vulcan Rendering engine as some things here would be hard to implement in GLES2. Although, GLES2 could still take ideas from here.\r\n\r\nSuggest your own ideas and changes in the comments :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/516/reactions",
      "total_count": 17,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/514",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/514/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/514/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/514/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/514",
    "id": 569535176,
    "node_id": "MDU6SXNzdWU1Njk1MzUxNzY=",
    "number": 514,
    "title": "Overhaul the Tween system",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-02-23T18:15:12Z",
    "updated_at": "2020-09-20T04:03:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA very big game™, although it's loosely relevant.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot's tweens have problems. You need to add them to scene tree, then interpolate desired properties using extremely long method calls and then you need to remember to start them. This is maybe acceptable, but real fun starts when you want to chain multiple tweens. You end up with a yield mess like this\r\n```\r\n$Tween.interpolate_property($Sprite, \"position\", Vector2(300, 100), Vector2(100, 100), 3, Tween.TRANS_CUBIC, Tween.EASE_IN_OUT)\r\n$Tween.start()\r\nyield($Tween, \"tween_all_completed\")\r\nyield(get_tree().create_timer(1),\"timeout\")\r\n$Tween.interpolate_callback($Sprite, 0, \"set_texture\", load(\"res://icon2.png\"))\r\n$Tween.start()\r\nyield($Tween, \"tween_all_completed\")\r\n$Tween.interpolate_property($Sprite, \"position\", Vector2(300, 100), Vector2(100, 100), 3, Tween.TRANS_CUBIC, Tween.EASE_IN_OUT)\r\n$Tween.start()\r\n```\r\nAbsolutely horrible. Lots of lines, long lines. All to get this effect\r\n![](https://user-images.githubusercontent.com/2223172/70644471-5e60a500-1c43-11ea-90c9-db663bb91092.gif)\r\n\r\nGodot's tweens weren't designed with chaining in mind and from my experience you want to chain them more than not.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMy inspiration for this proposal was DOTween. It's a very productive implementation of tweens that make you want create animations from code instead of e.g. AnimationPlayer (if it was in Godot).\r\n\r\nThe aim is to reduce code amount required to make an animation. The most basic thing would be making chaining easier. The Tween commands could just run sequentially instead of simultaneously like now and the parallel execution could be done explicitly. Also requiring to set transition and ease type each time is counter-productive, we should have defaults (probably linear + in/out). Also Tweens could start automatically, e.g. by connecting to SceneTree's idle frame signal.\r\n\r\nAnother thing inspired by DOTeen are Tweeners. Imagine if `interpolate_property` returned an object that could be used to tweak the command it's created for, so instead of\r\n```\r\n$Tween.interpolate_property($Sprite, \"position\", Vector2(300, 100), Vector2(100, 100), 3, Tween.TRANS_CUBIC, Tween.EASE_IN_OUT)\r\n```\r\nwe could do\r\n```\r\n$Tween.interpolate_property($Sprite, \"position\", Vector2(100, 100), 3).set_trans(Tween.TRANS_CUBIC)\r\n```\r\nWe omit the `initial` argument and by default it uses current value. Also we omit ease/trans and set them only when non-defaults are needed. I'll give more examples later, but the last thing that could be changed is making Tweens Reference instead of Node. They don't have associated editor and don't have interesting inspector properties, so there's no need to keep them in tree. They could just be created on the fly and removed automatically when not needed, similar to SceneTreeTimers.\r\n\r\nI actually implemented a system like this in GDScript and the above code changes to\r\n```\r\nvar seq := TweenSequence.new(get_tree()).set_loops(1)\r\nseq.append($Sprite, \"position\", Vector2(100, 100), 3).set_trans(Tween.TRANS_CUBIC).from_current()\r\nseq.append_interval(1)\r\nseq.append_callback($Sprite, \"set_texture\", [load(\"res://icon2.png\")])\r\n```\r\nIt's much easier to create both simple and complex animations and you write only what you need.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLiterally this: https://github.com/godot-extended-libraries/godot-next/pull/50\r\nbut in C++. The Tweens could get a total overhaul that functionally make them work like my custom class (which is basically GDScript DOTween).\r\n\r\nSo here's a breakdown of my code.\r\n\r\nFirst, creating Tweens would be dynamic: `var tween = Tween.new()`\r\nWhen you have a Tween, you can adjust it's properties. In my case you can do\r\n```\r\ntween.set_loops(int) #sets the number of times a whole animation is executed\r\ntween.set_speed(float) #speed of Tween\r\ntween.set_autostart(bool) #whether the Tween should start automatically, true by default\r\n```\r\nThen, to add operations to Tween, you can do\r\n```\r\ntween.append(object, property, target_value, duration) #equivalent of interpolate property\r\ntween.append_advance(object, property, advance, duration) #same as above, but the target value is start value + advance\r\ntween.append_interval(time) #waits given time\r\ntween.append_callback(object, method, args) #current interpolate_callback\r\ntween.append_method(object, method, from, to, duration) #current interpolate_method\r\n```\r\nThese operations should return Tweener objects (e.g. PropertyTweener etc.) that can be used to tweak the calls further. Calling anything on the Tweener returns the Tweener again, for easy chaining of multiple settings.\r\n\r\nFor property it would be\r\n```\r\ntween.append(...).from(value) #overrides the default starting value\r\ntween.append(...).from_current() #overrides the default starting value with the current value (normally it fetches it at the beginning of given command)\r\nproperty_tweener.set_ease(ease) #sets the ease\r\nproperty_tweener.set_trans(trans) #sets the transition type\r\nproperty_tweener.set_delay(time) #like the optional last argument of interpolate_property\r\n```\r\nExample chained usage:\r\n```\r\ntween.append(...).set_ease(Tween.EASE_IN).set_delay(2)\r\n```\r\n\r\nFor callback, you can set the delay and for method you can set ease/trans/delay.\r\n\r\nFinally, to allow parallel execution, you can do:\r\n```\r\ntween.append(...)\r\ntween.parallel().append(...)\r\n```\r\n^ these two properties would be tweened simultanously.\r\n\r\nAlternatively, `tween.join()` could be a version of `parallel()` that throws an error when the tween doesn't have preceding commands.\r\n\r\nThat sums up the functionality I think (at least from my class). I see that current Tween have more methods, but they could be adopted to the new system too. Also we could have some way to get a list of all running tweens, tweak more properties like per-tween or global default transition/ease type etc. My proposal is more like base for the new Tweens.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIMO it would be used often. More often that current Tweens, because the new system would be easier.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe current Tweens are meh, so they should be replaced by this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/514/reactions",
      "total_count": 77,
      "+1": 55,
      "-1": 0,
      "laugh": 0,
      "hooray": 6,
      "confused": 0,
      "heart": 16,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/512",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/512/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/512/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/512/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/512",
    "id": 569503220,
    "node_id": "MDU6SXNzdWU1Njk1MDMyMjA=",
    "number": 512,
    "title": "Move Script List to docks",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2020-02-23T14:26:19Z",
    "updated_at": "2020-04-30T09:10:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPuzzle game with a lot of coding\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI work mainly on a laptop with 1080p resolution. Godot has a three-column layout, which turns into four-column layout when using the Script Editor, which limits the space available for coding. Though there are options to extend that space, they have their own shortcomings, which turn them unusable.\r\n\r\n* Using distraction-free mode is not an option, as it limits access to the Output and Debugger panels, as well as Search Results panel. This means constant switching back and forth between distraction-free mode and normal mode.\r\n* Hiding script list is not an option, because there is then no indication, what file is being edited and no easy way to navigate between scripts (and help pages).\r\n\r\nI've described in great detail my concerns about current layout in regards of the Script Editor on Reddit to gather some community feedback:\r\nhttps://www.reddit.com/r/godot/comments/f5siu7/do_you_experience_problems_with_ui_when_using/\r\n\r\nWhile I did not get much feedback, there was some show of support in upvotes. So some people are as frustrated as I am. The thing is, I find this UX/UI problem too complex to be solved by small changes, however I want to propose a small change that can actually make things a little easier to work with going forward.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI think that Script List is an awful control. It duplicates all functions of FileSystem dock and gets help pages as an added bonus. Though, I can see, that it is impossible to integrate some of the mechanics of Script List into FileSystem dock without furthering user confusion. So how about we:\r\n\r\n1. Put Script List beside FileSystem dock as another dock;\r\n2. Add a name/path of the opened script to the Status Bar of the Code Editor;\r\n3. Somewhere down the line figure out a better place for help pages (I think they should be accessible without the Script Editor anyway).\r\n\r\nThis way, developers can put that script list in any one of the 8 places available, some event resembling its current position. Still easily accessible, it will no longer take excessive space in the Script Editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSome changes to layout in `script_editor_plugin` are going to happen across multiple files. I've made a mock-up with a quick GDScript plugin. Here is how it can look:\r\n\r\n![image](https://user-images.githubusercontent.com/11782833/75113601-66d05580-5660-11ea-8145-92fbc43ea39b.png)\r\n\r\nNote that with additional space the error message does not normally conflict with the file path/name.\r\n\r\nThere are help pages missing in this mock-up as I did not find a way to get them listed from GDScript API. But they are going to be there, as well as a split panel with method navigation and doc navigation controls.\r\n\r\nHere is a \"before\" screenshot for comparison:\r\n![image](https://user-images.githubusercontent.com/11782833/75113726-30dfa100-5661-11ea-8d4c-1becc37efa39.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be partially turned into an editor plugin, as I was able to do this mock-up \"in engine\". However, I feel like this can improve overall user experience going forward, and is not the only step to improve in regard to listed concerns.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee above.\r\n\r\nPS. I can work on the implementation myself, if needs be. Seems within my knowledge of the project.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/512/reactions",
      "total_count": 17,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/511",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/511/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/511/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/511/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/511",
    "id": 569495535,
    "node_id": "MDU6SXNzdWU1Njk0OTU1MzU=",
    "number": 511,
    "title": "Add the ability to specify the maximum size of the texture atlas",
    "user": {
      "login": "nesja",
      "id": 22263042,
      "node_id": "MDQ6VXNlcjIyMjYzMDQy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22263042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nesja",
      "html_url": "https://github.com/nesja",
      "followers_url": "https://api.github.com/users/nesja/followers",
      "following_url": "https://api.github.com/users/nesja/following{/other_user}",
      "gists_url": "https://api.github.com/users/nesja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nesja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nesja/subscriptions",
      "organizations_url": "https://api.github.com/users/nesja/orgs",
      "repos_url": "https://api.github.com/users/nesja/repos",
      "events_url": "https://api.github.com/users/nesja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nesja/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-23T13:30:23Z",
    "updated_at": "2020-03-06T10:18:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a project that uses a texture atlas and I have plans to support HTML5 and mobile devices\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen import images as textureAtlas, there are no settings for the size of the resulting atlas, so with a large number of images a huge atlas is created that doesn't work in HTML5.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding the maximum size property of the atlas to the import settings. If the size is exceeded, the atlas will be created as several image files that don't exceed the maximum size. This functionality allows to get an atlas that is suitable for the desired platform. It will also be possible to create an atlas once for all project images and easily recreate it if the images change.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![textureAtlas_](https://user-images.githubusercontent.com/22263042/75112356-a3f31280-5675-11ea-8ddc-ba14831509c1.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it will be a useful feature, however it is possible that a few lines of code are enough, but my understanding of the internal process of creating an atlas is limited.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSize is one of the basic properties of created atlas, on which project support on some platforms depends (I'm not sure what limits are on different platforms and hardware, so I would prefer to use a minimum size of atlas)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/511/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/508",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/508/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/508/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/508/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/508",
    "id": 569448432,
    "node_id": "MDU6SXNzdWU1Njk0NDg0MzI=",
    "number": 508,
    "title": "Allow creating colliders from multiple meshes at once",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-23T06:55:14Z",
    "updated_at": "2020-04-22T18:51:13Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI recently bought an asset pack with hundreds of meshes. I would like to create collisions for all of them, so that I can have a character moving around a level built with the meshes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn Godot, we can use this menu to create collisions when a MeshInstance is selected:\r\n\r\n![Untitled](https://user-images.githubusercontent.com/1646875/75103919-ea8e3180-55cf-11ea-8d12-fedeecd8259f.png)\r\n\r\nThe limitation that I am facing is that there is no way to do this in bulk through the editor. If you select multiple MeshInstance nodes, you can't open this menu.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature would be that the button would show up when you have multiple MeshInstance nodes selected, allowing you to create colliders for all of them at once.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI took a look at the existing code in `mesh_instance_editor_plugin.cpp`. It appears to be hard-coded to work with exactly one object. This would require a significant rewrite of this code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, it can. However, this is supposed to be an editor feature, so it isn't ideal to do so.\r\n\r\nhttps://godotengine.org/asset-library/asset/603\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause it's an expansion of an existing editor feature, to make it work with multiple nodes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/508/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/506",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/506/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/506/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/506/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/506",
    "id": 569425273,
    "node_id": "MDU6SXNzdWU1Njk0MjUyNzM=",
    "number": 506,
    "title": "Greatly improving readability of Visual Scripting in Godot 3.2",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-02-23T02:27:49Z",
    "updated_at": "2020-04-02T15:01:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a Tomb Raider project, with a new character, and I can only use Visual Scripting, as a beginner, and will use it to learn code, over time . . Also, an RTS-like game, StarCraft inspired . . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen I make boxes in Visual Script, the arrows are all over the place, and it ends up looking like this . .\r\n\r\n![2020-02-23 0306 Visual Script Proposal](https://user-images.githubusercontent.com/61069740/75102295-89735780-55e9-11ea-8422-18c264b94dea.png)\r\n\r\nI want to make it look as much as possible, as normal writing, with the ' black ' lines going directly through, so it reads like a flow-chart, very easily read, in engine . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt would be a lot easier, if one could change the position, of the input, and output node, in the Visual Script boxes, like this . . .\r\n\r\n![2020-02-16 0457](https://user-images.githubusercontent.com/61069740/75102307-d48d6a80-55e9-11ea-9d63-1374cb08af3e.png)\r\n\r\n![2020-02-16 0507](https://user-images.githubusercontent.com/61069740/75102308-d5260100-55e9-11ea-924f-64839d1c3d06.png)\r\n\r\nEspecially, if there was a little button in the corners, of each node, where you click it, and the input side switches from top-side-left-right . . Like this . . .\r\n\r\n![2020-02-23 0319](https://user-images.githubusercontent.com/61069740/75102419-6a75c500-55eb-11ea-9b22-5a0f6c9949cf.png)\r\n\r\nAlso, if the other inputs, could somehow be moved around, a purely visual update, no changes to the code framework, behind it, it would make visual scripts look much nicer, and be much easier to read, for any team, in the world, also for me, who can't code YET, but need Visual Script to build my first games, and learn code, as I watch Godot, on youtube . . Ideally, one would be  able to change the input anywhere, perhaps by giving everything a different color, like this, everything can be moved to one of four sides, of the nodes, just a visual thing, to make nicer flow-charts . .\r\n\r\n![2020-02-16 0507](https://user-images.githubusercontent.com/61069740/75102442-c50f2100-55eb-11ea-9af7-8905b225ca6c.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nWell, it's not a big change, to the code, in Godot, more of an update to a few visual tweaks, on the boxes, in visual script . . But, a programmer needs to do it, and I think everyone using visual script, either for their games, or for learning Godot, will have a much easier time, if this was possible, but done well, by good programmers, Godot-experts . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nAs a beginner, I can't do this . . It would take a lot of work, for me, too much . . :(\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nEvery single person wanting to make Godot games could benefit from this, and Visual Script could become a nicer way, for people to get into Godot, so more people would like the engine, especially artist-minded people, but also new people, that want to learn coding through Visual Scripting, in the beginning . . Also, with nicer flow-charts, productivity might increase for bigger teams, where artists could make better ' visual ' coding, and in the end, mean more games . . Also, people wanting to learn Godot, but scared of code ( like me ), would have an easier way of learning node names, for later coding, if visual script was even MORE appealing, like it is now, really good . . This feature would just make the scripts 200 % more readable, and make Godot more appealing, to the world, to game makers, on all levels . . But, it has to be done well, my suggestion is pretty rough, a smart coder, or Godot-expert could probably make this nicer, so the charts read MUCH nicer, also for programmers . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/506/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/505",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/505/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/505/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/505/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/505",
    "id": 569306313,
    "node_id": "MDU6SXNzdWU1NjkzMDYzMTM=",
    "number": 505,
    "title": "Integrate video saving with GStreamer",
    "user": {
      "login": "boulabiar",
      "id": 101211,
      "node_id": "MDQ6VXNlcjEwMTIxMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/101211?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boulabiar",
      "html_url": "https://github.com/boulabiar",
      "followers_url": "https://api.github.com/users/boulabiar/followers",
      "following_url": "https://api.github.com/users/boulabiar/following{/other_user}",
      "gists_url": "https://api.github.com/users/boulabiar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boulabiar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boulabiar/subscriptions",
      "organizations_url": "https://api.github.com/users/boulabiar/orgs",
      "repos_url": "https://api.github.com/users/boulabiar/repos",
      "events_url": "https://api.github.com/users/boulabiar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boulabiar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-02-22T09:06:50Z",
    "updated_at": "2020-09-13T23:56:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am testing using Godot as a video animation tool. I put everything in place but I want to export the stream as a video (or live stream). A tablet can be connected to the camera and physically use its position to move into the scene and select the view.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot now can't live stream the video without exporting frame by frame in gdscript which takes a lot of resources.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHaving a plugin exporting the video into gstreamer will help remove these limitations.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGodot only need to send the stream into gstreamer, which maybe can be done through a gstreamer plugin in godot. Once the stream is sent to gstreamer, it can be easily modified or mixed or saved. gstreamer also uses hardware acceleration for encoding/decoding available on any recent CPU. here is a gstreamer bash command on linux to save the screen into a file, and it uses Intel hardware acceleration so the CPU usage keeps being low.\r\ngst-launch-1.0 ximagesrc use-damage=0 ! video/x-raw,framerate=30/1 ! videoscale method=0 ! video/x-raw,width=1920,height=1080 ! videoconvert ! vaapih264enc ! matroskamux ! filesink location=record.mkv\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\ngscript exporting may results in huge usage in resources if exported frame by frame.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI am not a godot developer, but maybe it's more efficient to work on it from the renderer directly instread of copying the frame multiple times between the modules until reaching the desired output. If the device allows it, the saved video stream can be done in resolutions higher that what the screen supports.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/502",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/502/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/502/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/502/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/502",
    "id": 569145054,
    "node_id": "MDU6SXNzdWU1NjkxNDUwNTQ=",
    "number": 502,
    "title": "`assert()` should evaluate its arguments in release, and then no-op",
    "user": {
      "login": "Wavesonics",
      "id": 406473,
      "node_id": "MDQ6VXNlcjQwNjQ3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/406473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wavesonics",
      "html_url": "https://github.com/Wavesonics",
      "followers_url": "https://api.github.com/users/Wavesonics/followers",
      "following_url": "https://api.github.com/users/Wavesonics/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wavesonics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wavesonics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wavesonics/subscriptions",
      "organizations_url": "https://api.github.com/users/Wavesonics/orgs",
      "repos_url": "https://api.github.com/users/Wavesonics/repos",
      "events_url": "https://api.github.com/users/Wavesonics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wavesonics/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-02-21T19:37:10Z",
    "updated_at": "2020-11-11T13:19:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nNuclear reactor simulation\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany functions return a status code that is often not checked as it should not fail in normal cases.\r\n\r\nIf it does fail, something bad has happened. For instance:\r\n`get_tree().change_scene(\"res://actors/fuel_rod/FuelRod.tscn\")`\r\n\r\nI want to be able to assert that this is true, and have it crash debug builds so it fails loudly.\r\n\r\nThe first way that I'd think to do this is nice and compact:\r\n`assert(get_tree().change_scene(\"res://actors/fuel_rod/FuelRod.tscn\") == OK)`\r\n\r\nHowever, the `assert()` is entirely compiled out in Release, so the change scene never executes in release builds, and everything breaks.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n`assert()` should still evaluate it's arguments in release, it's just that `assert()` behavior should be a `nop`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`assert()` still evaluates it's arguments, but `assert` then does nothing with the result.\r\n\r\nThis is also more in-line with how assert works in other languages, so it'll help new-comers adapt to GDScript and not have some `WTF is happening` moments when things don't work in release.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, but it's much less compact. And so many Godot functions return codes that if left unchecked result in warnings. In order to check them all means lots of extra code bloat:\r\n```\r\nvar result := get_tree().change_scene(\"res://actors/fuel_rod/FuelRod.tscn\")\r\nassert(result != OK)\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt has to be core as it's a language level feature of GDScript",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/501",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/501/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/501/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/501/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/501",
    "id": 569072665,
    "node_id": "MDU6SXNzdWU1NjkwNzI2NjU=",
    "number": 501,
    "title": "Add angled/oblique near and far camera planes",
    "user": {
      "login": "19PHOBOSS98",
      "id": 37253663,
      "node_id": "MDQ6VXNlcjM3MjUzNjYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/37253663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/19PHOBOSS98",
      "html_url": "https://github.com/19PHOBOSS98",
      "followers_url": "https://api.github.com/users/19PHOBOSS98/followers",
      "following_url": "https://api.github.com/users/19PHOBOSS98/following{/other_user}",
      "gists_url": "https://api.github.com/users/19PHOBOSS98/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/19PHOBOSS98/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/19PHOBOSS98/subscriptions",
      "organizations_url": "https://api.github.com/users/19PHOBOSS98/orgs",
      "repos_url": "https://api.github.com/users/19PHOBOSS98/repos",
      "events_url": "https://api.github.com/users/19PHOBOSS98/events{/privacy}",
      "received_events_url": "https://api.github.com/users/19PHOBOSS98/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-21T16:59:28Z",
    "updated_at": "2020-11-20T13:43:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on an easy to use portal assets but I want to implement frustum culling. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI like the frustum camera mode you guys added, it got me so far into making a portal asset. But if you could just tweak it a bit to let me angle the near plane that would be awesome. \r\n\r\nI replicated JFoNS mirror demo where he got the camera to stay parallel to the mirror which in turn kept the camera's near plane parallel as well. This was effective at hiding everything that's behind it but he had to render his texture using UV instead of SCREEN_UV.  As I found out (too late) that this made it really pixelated when you get up close to the mesh rendering it:\r\nhttps://www.youtube.com/watch?v=TxE91tWPZmU\r\nI tried enlarging the camera's viewport but it didn't even do anything to make the resolution better. It just lagged my computer. This got worse when I tried making his mirror demo bigger :(\r\n\r\nOn the other hand if I use SCREEN_UV instead, I would get a pretty clear image no mater how close I get (and for some reason, without the lag). But since anything you render in SCREEN_UV depends on where you and the mirror's camera is looking, your character's camera and mirror's camera has to be in sync with pitch and yaw (ie not being parallel to the mirror). \r\n\r\nIf I implemented this I'd end up back in square one. I can't implement frustum culling right when the near plane stays at a right angle from the camera's z-axis. This just clips thru the mirror when its camera turns far enough, as you can see:\r\nhttps://www.youtube.com/watch?v=UiWfSZGLuHw\r\n\r\nThe only thing that's stopping me now is the fact that I have no known means to change the angle of the near plane like how Sebastian Lague did in unity:\r\nhttps://www.youtube.com/watch?v=cWpFZbjtSQg&t=781s   12:49\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf I had a way to change the near planes angle relative to the camera, I can keep it parallel to my portal as I move around it.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nImagine this:\r\nI take a camera node and set it's near culling plane at a distance\r\nand when I go in the editor, right below the near property are two parameters:\r\n\"X - angle\" & \"Y - angle\"\r\neach would set the near(or far) plane at an angle to it's corresponding axis relative to the camera's line of sight (its Z-axis).\r\nHaving control of the planes distance and angle would give full control of all possible positions within the rendering frustum.\r\n\r\nanother idea is to add the ability to align the near or far planes normals with an existing plane mesh. I'd guess this would be more efficient than calculating the angle of the plane to the cameras Z-axis in real time.\r\n\r\nThis makes it easier to implement culling even in angled shots. Plus you can do selective cross-sectional shots of scenes when you use the far plane with the near plane.\r\nlike that one video about 4th dimensional toys:\r\nhttps://www.youtube.com/watch?v=0t4aKJuKP0Q\r\nor even selectively \"load\" stuff/scenes hidden outside the main scene just by adjusting the far plane\r\n\r\nSebastian Lague sited a paper by Eric Lengyel: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\non how they did exactly that but in unity.\r\n\r\nI just hope this actually helps cause I'm not that smart with any of this... Imma noob at game developing and that's why I love what you guys did to make it possible for me to start. I just really hope I don't need to stop now that I gotten this far.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUnless there's already a feature that lets me mess with the camera's near plane angle that I'm not aware of (and without cracking NASA's 7th volume on spacial anomalies), I am stumped.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHonestly I have no idea. I mean I see that other engines support this kinda feature but they can't seem to do it with ease... might give you guys an edge if you can pull it off... plus it would make a great addition to 4.0 since its all about rendering right?",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/501/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/500",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/500/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/500/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/500/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/500",
    "id": 569057652,
    "node_id": "MDU6SXNzdWU1NjkwNTc2NTI=",
    "number": 500,
    "title": "Add a PacketPeerBuffer",
    "user": {
      "login": "evandikt",
      "id": 10628316,
      "node_id": "MDQ6VXNlcjEwNjI4MzE2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10628316?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/evandikt",
      "html_url": "https://github.com/evandikt",
      "followers_url": "https://api.github.com/users/evandikt/followers",
      "following_url": "https://api.github.com/users/evandikt/following{/other_user}",
      "gists_url": "https://api.github.com/users/evandikt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/evandikt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/evandikt/subscriptions",
      "organizations_url": "https://api.github.com/users/evandikt/orgs",
      "repos_url": "https://api.github.com/users/evandikt/repos",
      "events_url": "https://api.github.com/users/evandikt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/evandikt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-21T16:31:09Z",
    "updated_at": "2020-02-21T21:36:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCommunicate between Godot 3.X and nodejs\r\n[gd-com](https://github.com/gd-com/utils)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nData send does not seems to be exact cause of header ...\r\n[Godot QA](https://godotengine.org/qa/57245/how-put_var-works)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a `PacketPeerBuffer` who work like `StreamPeerBuffer` but for packet.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust same class but it doesn't add packet length header on top of data look at the \r\n[Godot QA](https://godotengine.org/qa/57245/how-put_var-works).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYeah, just don't use `StreamPeerBuffer` but it's hard to make some Buffer in code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a low level networking feature\r\n\r\nThx for your work\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/500/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/499",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/499/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/499/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/499/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/499",
    "id": 568918131,
    "node_id": "MDU6SXNzdWU1Njg5MTgxMzE=",
    "number": 499,
    "title": "Expanding / Collapsing properties from multiple selected Nodes or Objects",
    "user": {
      "login": "BasitCode",
      "id": 53387349,
      "node_id": "MDQ6VXNlcjUzMzg3MzQ5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/53387349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BasitCode",
      "html_url": "https://github.com/BasitCode",
      "followers_url": "https://api.github.com/users/BasitCode/followers",
      "following_url": "https://api.github.com/users/BasitCode/following{/other_user}",
      "gists_url": "https://api.github.com/users/BasitCode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BasitCode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BasitCode/subscriptions",
      "organizations_url": "https://api.github.com/users/BasitCode/orgs",
      "repos_url": "https://api.github.com/users/BasitCode/repos",
      "events_url": "https://api.github.com/users/BasitCode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BasitCode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-21T12:08:51Z",
    "updated_at": "2020-03-09T20:37:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### **Describe the project you are working on:**\r\nI'm new user in godot, just learning basics and started make games in godot. I created this project from docs \"your first game\".\r\n\r\n\r\n### **Describe the problem or limitation you are having in your project:**\r\ncollapsing or expanding does not save after re-selecting nodes.\r\n![expand-collapse](https://user-images.githubusercontent.com/53387349/75033367-8e8eb480-54cc-11ea-8a21-85fa100c9c0a.gif)\r\n\r\n\r\n### **Describe the feature / enhancement and how it helps to overcome the problem or limitation:**:\r\nthis enhancement will let users a less clicking and focus to important things.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit must work in every property groups even in custom scripts\r\n\r\n### **If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno, it should be always\r\n\r\n\r\n### **Is there a reason why this should be core and not an add-on in the asset library?:**\r\ni left unity and unity have this feature in core\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/499/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/497",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/497/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/497/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/497/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/497",
    "id": 568376441,
    "node_id": "MDU6SXNzdWU1NjgzNzY0NDE=",
    "number": 497,
    "title": "event.actions for input actions matching in _Input()",
    "user": {
      "login": "TrickMe",
      "id": 37937468,
      "node_id": "MDQ6VXNlcjM3OTM3NDY4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/37937468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrickMe",
      "html_url": "https://github.com/TrickMe",
      "followers_url": "https://api.github.com/users/TrickMe/followers",
      "following_url": "https://api.github.com/users/TrickMe/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrickMe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrickMe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrickMe/subscriptions",
      "organizations_url": "https://api.github.com/users/TrickMe/orgs",
      "repos_url": "https://api.github.com/users/TrickMe/repos",
      "events_url": "https://api.github.com/users/TrickMe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrickMe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-02-20T15:21:54Z",
    "updated_at": "2020-02-26T14:33:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpace grand strategy / X4 game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have to use multiple 'if event.is_action(\"action_name\")' statements instead of matching the event to actions in _unhandled_input(event).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUsing event.action is safer and more configurable than using event.scancode.\r\nMatching an action is more convenient, easier to read and faster than using multiple if- or elif- statements.\r\nMostly it's about speed and low latency.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nmatch event.get_action():   or\r\nmatch event.action:\r\n    \"MouseLeft\":\r\n        do_something\r\n    \"MouseRight\":\r\n        do_something\r\n    \"MouseMiddle\":\r\n        do_something\r\n```\r\n\r\ninstead of:\r\n\r\n```\r\nif event.is_action(\"MouseLeft\"):\r\n    do_something\r\nelif event.is_action(\"MouseRight\"):\r\n    do_something\r\nelif event.is_action(\"MouseMiddle\"):\r\n    do_something\r\n```\r\n\r\nor:\r\n\r\n```\r\nmatch event.scancode:\r\n    KEY_ESCAPE:\r\n        do_something\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, with a lot of if- and elif- statements, one per assigned action.\r\nI'm certain this feature could be used by pretty much any application that uses input.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nInput handling is pretty much a core task.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/496",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/496/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/496/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/496/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/496",
    "id": 568363260,
    "node_id": "MDU6SXNzdWU1NjgzNjMyNjA=",
    "number": 496,
    "title": "Add proper and complete support for multi-pass shaders",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-02-20T15:05:10Z",
    "updated_at": "2020-06-23T08:00:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop-down 2D rpg with heavy use of visual effects, post-processing and custom depth tests.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'll often have to create shaders that read from a certain buffer or texture and then write to it or viceversa.\r\nThis is not possible in a single pass shader as it is technically not supported by graphics cards.\r\nSo a multi-pass shader is needed.\r\nMulti-pass **materials** rendering is also currently not supported for canvas_item shaders which is another related limitation.\r\n\r\nThis is however a proposal for multi-pass **shaders**, here's an example of how they are defined in Unity:\r\n\r\n```\r\nShader \"ShaderName\"\r\n{\r\n    Properties\r\n    {\r\n        // define shader properties\r\n        _TextureName(\"Inspector Description\", Type) = \"white\" {}\r\n        _FloatSlider(\"Float Slider Description\", Range(0, 1)) = 0.5\r\n    }\r\n    SubShader\r\n    {\r\n        // Tags, Identifiers, etc...\r\n        // first pass\r\n        Pass\r\n        {\r\n            // Tags, Identifiers, etc...\r\n            // define blend mode, ztest mode, zwrite mode etc.\r\n\r\n            // define used properties/uniforms\r\n            // define input and/or output structs (appdata, s2f, FragmentOutput...)\r\n           \r\n            v2f vert (appdata v)\r\n            {\r\n                // vertex function\r\n            }\r\n           \r\n            FragmentOutput frag (v2f i)\r\n            {\r\n                // fragment function\r\n            }\r\n        }\r\n \r\n        // this second pass is performed after the first one\r\n        Pass\r\n        {\r\n            // Tags, Identifiers, etc...\r\n            // define blend mode, ztest mode, zwrite mode etc.\r\n\r\n            // define used properties/uniforms\r\n            // define input and/or output structs (appdata, s2f, FragmentOutput...)\r\n           \r\n            v2f vert (appdata v)\r\n            {\r\n                // vertex function\r\n            }\r\n \r\n            FragmentOutput frag (v2f i)\r\n            {\r\n                // fragment function\r\n            }\r\n        }\r\n    }\r\n    // define optional fallback\r\n}\r\n```\r\n\r\nThe FragmentOutput struct can also contain render targets (even multiple ones, allowing MRT) and/or the depth buffer target, to do depth writing/checks in fragment shaders.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBeing able to define multi-pass shaders everywhere allows the user to do things he just can't do right now. Reading and writing to the same buffer can't be performed in the same pass and multiple Viewports or post-processing can't have access to the rendering object's data.\r\n\r\nAt the optional performance cost of performing an additional pass, the user has maximum power.\r\nI think the rendering code rewrite in Vulkan is the perfect opportunity to add this feature, together with #495.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA simpler and more Godot-shading-language style version of the Unity \"ShaderLab\" code above can be a good example of how multi-pass shaders could be achieved at the user level.\r\n\r\nUnity also permits the definition of tags into shaders and into passes to better manage the rendering of specific objects and to have more granular control over the pipeline. (Very useful in custom rendering pipelines)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMulti-pass shaders cannot be added with an add-on or asset library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/496/reactions",
      "total_count": 26,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 4
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/495",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/495/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/495/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/495/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/495",
    "id": 567778895,
    "node_id": "MDU6SXNzdWU1Njc3Nzg4OTU=",
    "number": 495,
    "title": "Add support for Multiple Render Targets (MRT)",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-19T19:04:45Z",
    "updated_at": "2020-04-27T17:09:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop-down 2D rpg with heavy use of visual effects, post-processing and custom depth tests.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now, I can't fill several buffers when an object is drawn by Godot (I also need to progressively read some of these same buffers to perform depth tests and the like, multi-pass shaders needed) unless I duplicate each object in different Viewport, which is extremely inconvenient and a waste of resources.\r\n\r\nThe ViewportContainer -> Viewport -> World approach is also very tedious to just setup a render target, and it doesn't allow spread out nodes to render to it.\r\n\r\n**So, a more flexible and unrestricted way of assigning render targets would be great.**\r\n\r\nI know MRT is scheduled for 4.0 as @reduz said [here](https://github.com/godotengine/godot/issues/24034#issuecomment-442794408), I hope it can be added as soon as possible as I need to prototype the related features in the game.\r\nI know that customizable render pipelines are scheduled too, together with MRT the possibilities will be very extensive.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMRT is a very useful feature of modern GPUs and every major engine in the market supports it.\r\nIt is useful to create nice effects and post-processing in 3D and even in 2D when more than one buffer needs to be written at once by each object.\r\n\r\nI think the rendering code rewrite in Vulkan is the perfect opportunity to add this feature, together with #496\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n<>\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, severe duplication of nodes would be needed and there would be many inconveniences.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would be extremely inefficient to do in a way that is not core related.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/495/reactions",
      "total_count": 12,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/493",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/493/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/493/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/493/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/493",
    "id": 566393414,
    "node_id": "MDU6SXNzdWU1NjYzOTM0MTQ=",
    "number": 493,
    "title": "Make nodes acts as Tilemaps.",
    "user": {
      "login": "JeffVenancius",
      "id": 43701418,
      "node_id": "MDQ6VXNlcjQzNzAxNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/43701418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeffVenancius",
      "html_url": "https://github.com/JeffVenancius",
      "followers_url": "https://api.github.com/users/JeffVenancius/followers",
      "following_url": "https://api.github.com/users/JeffVenancius/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeffVenancius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeffVenancius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeffVenancius/subscriptions",
      "organizations_url": "https://api.github.com/users/JeffVenancius/orgs",
      "repos_url": "https://api.github.com/users/JeffVenancius/repos",
      "events_url": "https://api.github.com/users/JeffVenancius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeffVenancius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-17T16:04:51Z",
    "updated_at": "2020-02-17T21:51:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a top-down RPG.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you use YSort on Tilemaps, it works, but not in the best way. Also, there are thinks that you could only make on a self-contained node, so you tend to put a lot of nodes into a scene and it can get messy.\r\n\r\n![YSort](https://user-images.githubusercontent.com/43701418/74669499-fd46d780-5185-11ea-8f58-90f07367ba82.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMy idea is to set a collection of self contained Nodes and turn them into a Tileset.\r\n\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm still learning, so what I can really show is a mock-up, it would be like this:\r\n\r\n![YSortIdea](https://user-images.githubusercontent.com/43701418/74668601-4d249f00-5184-11ea-8b70-201efadf1523.jpg)\r\n\r\nYou see? When you're making an Animated Sprite, for example, you put various sprites in it. Personally, I just drag and paste. My idea is to make this with scenes, so you end up with a collection of instanced scenes , but on the editor, you'll see only one Node, that is the Tilemap (or Nodemap, I think that name would fit best). You could also work with all their properties just the same. Well, atleast that's what I'm thinking.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI would use it a lot, personally. it's not something that chains a project, but it makes a lot easier to work with.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt could be a add-on, but I think that it would really help the workflow for everyone, it's not something to fix a particullar need, but to fix every need. You could use this to insert NPC's, enemies, etc... I saw people doing something simillar on Maker's projects, and they did on Godot, so I think it would be possible to.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/492",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/492/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/492/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/492/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/492",
    "id": 565993747,
    "node_id": "MDU6SXNzdWU1NjU5OTM3NDc=",
    "number": 492,
    "title": "Simpler UI design",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-02-16T23:59:30Z",
    "updated_at": "2020-02-20T14:57:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nUI Design proposals for Godot editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is a space at the top of the screen one inch wide that is not used, and the viewport workspace is unnecessarily reduced.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n   1. Use more screen space as a work area.\r\n   2. Regroup options in pop-up menus.\r\n   3. Make visible the tools related to the work being done at current time.\r\n   4. Make windows and tabs responsive.\r\n   5. Simplify the user interface.\r\n\r\nWhat is changed:\r\n![1](https://user-images.githubusercontent.com/42384785/74615254-1e0f1e80-50ed-11ea-9e7b-76e61880b1ef.jpg)\r\n\r\n\r\nHow Godot looks now:\r\n![0](https://user-images.githubusercontent.com/42384785/74615257-223b3c00-50ed-11ea-84b8-e27ccb37ed30.jpg)\r\n\r\n\r\nHow Godot will looks:\r\n![5](https://user-images.githubusercontent.com/42384785/74615261-2bc4a400-50ed-11ea-956c-8dca5347a379.jpg)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not a programmer, I'm a visual artist.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis feature it's about the Godot UI.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe Godot UI it's part of the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/488",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/488/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/488/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/488/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/488",
    "id": 565925347,
    "node_id": "MDU6SXNzdWU1NjU5MjUzNDc=",
    "number": 488,
    "title": "Adding context to AStar pathfinding",
    "user": {
      "login": "Kequc",
      "id": 584075,
      "node_id": "MDQ6VXNlcjU4NDA3NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/584075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kequc",
      "html_url": "https://github.com/Kequc",
      "followers_url": "https://api.github.com/users/Kequc/followers",
      "following_url": "https://api.github.com/users/Kequc/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kequc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kequc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kequc/subscriptions",
      "organizations_url": "https://api.github.com/users/Kequc/orgs",
      "repos_url": "https://api.github.com/users/Kequc/repos",
      "events_url": "https://api.github.com/users/Kequc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kequc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1752040582,
        "node_id": "MDU6TGFiZWwxNzUyMDQwNTgy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:navigation",
        "name": "topic:navigation",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-16T15:45:47Z",
    "updated_at": "2020-03-08T22:09:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI'm building a grid based rts management game, it involves a lot of astar functionality for pathfinding not only on the map. But also between areas of the map. For example there are security doors separating it into rooms and it's necessary to find a path between doors, at a given security clearance. I'm also using astar to drive artificial intelligence.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm finding that in almost every instance I cannot use the built in astar implementation. The only way I would be able to use it would be to make multiple astar instances for every security level for example, and keep them all up to date.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI propose a `context` variable which may be optionally provided as a third parameter to the `get_point_path` and `get_id_path` methods. This context would then be available when calculating the path.\r\n\r\nThe documentation suggests I can tweak pathfinding by by overriding `_compute_cost` and `_estimate_cost`. Those methods could come with a `context` parameter, I would also suggest adding a few more methods that can be overridden. One which allows me to filter connections, and one to manipulate weights.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nextends AStar\r\nclass_name MyAStar\r\n\r\nfunc _compute_cost(u, v, context):\r\n    var cost: = abs(u - v)\r\n    if context.long_distance:\r\n        cost *= 200\r\n    return cost\r\n\r\nfunc _estimate_cost(u, v, context):\r\n    var cost: = min(0, abs(u - v) - 1)\r\n    if context.long_distance:\r\n        cost *= 200\r\n    return cost\r\n```\r\n```\r\nfunc get_path(from_id: int to_id: int, agent_is_slow: bool) -> PoolIntArray:\r\n    var context: = {\r\n        \"long_distance\": agent_is_slow\r\n    }\r\n    myAstar.get_point_path(from_id, to_id, context)\r\n```\r\n\r\nThis is a poor example because it just takes the example from the documentation and multiplies it's result. But you can see how given a context much more complex pathfinding operations would be possible. For instance perhaps a context could be provided which lets it know that the given agent should not be able to climb hills.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis enhancement can be ignored by not providing a third context parameter, internally it would be perhaps null. When overriding methods in the AStar class it will be necessary to specify the context parameter but it is not necessary to use it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAStar is a very versatile tool. The current implementation is very well done but I'm finding I have to resort to using custom AStar implementations which I feel are likely less performant than then built in cpp implementation. Adding a little to the versatility of the tool would mean that I can use it more often and take advantage of its speed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/488/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/487",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/487/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/487/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/487/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/487",
    "id": 565911706,
    "node_id": "MDU6SXNzdWU1NjU5MTE3MDY=",
    "number": 487,
    "title": "Get impact force when a RigidBody hits another body",
    "user": {
      "login": "Wapit1",
      "id": 39422816,
      "node_id": "MDQ6VXNlcjM5NDIyODE2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39422816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wapit1",
      "html_url": "https://github.com/Wapit1",
      "followers_url": "https://api.github.com/users/Wapit1/followers",
      "following_url": "https://api.github.com/users/Wapit1/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wapit1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wapit1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wapit1/subscriptions",
      "organizations_url": "https://api.github.com/users/Wapit1/orgs",
      "repos_url": "https://api.github.com/users/Wapit1/repos",
      "events_url": "https://api.github.com/users/Wapit1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wapit1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-02-16T14:12:00Z",
    "updated_at": "2020-10-13T13:56:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI have been working with physic game where the player hits a lot of body with held rigidbody\r\nand can't get more progress on the physic side of thing because of the lack of a consistant lightweight way of getting the impact force\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\ngetting the impact force requires to constantly calculate the previous velocity, else you can't tell how fast the object hit one a other: the force is already reduce before you receive the signal and you thus get a very small number which isn't representative of the linear velocity before impact \r\n(due note that it 2D you have still a bit more force during the impact tick, but it is not that consistant, has it already lost a bit force )\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nhaving a consistant Vector of the impact strength  will allow programmer to create easily system like sound of impact, realistic breakable object, multiplied knockback on rigidbody and other \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhaving a parameter with the signal on_body_entered would allow the user to use it easily and should be , too my understanding of physics engine, not too hard to get has the physics engine already calculates the force being transferred to the other object so the number would only need to be exposed\r\n (and while your at it why not expose a few more value like the force lost in friction, the average of point of impact and the force a joint is applying to the rigidbody)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used often and can get worked around with a few line of code (keeping in a var the linear_velocity every tick), but it is required to be put on every rigidbody (has you want the force difference on impact for realistic result) and its is not that consistant, has the body might go through the object and then get pulled back\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nbecause having it has an add-on would be harder to implement and most developer would like the idea of easily have the possibility to have different impact sound based on impact strength, have damage dealt based on the force of the swinging weapon and thus be allowed to create loads of physic based emergent gameplay",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/487/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/484",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/484/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/484/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/484/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/484",
    "id": 565827534,
    "node_id": "MDU6SXNzdWU1NjU4Mjc1MzQ=",
    "number": 484,
    "title": "A post light function in the spatial shader, so that proper cel shading can be done",
    "user": {
      "login": "QbieShay",
      "id": 7917475,
      "node_id": "MDQ6VXNlcjc5MTc0NzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7917475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QbieShay",
      "html_url": "https://github.com/QbieShay",
      "followers_url": "https://api.github.com/users/QbieShay/followers",
      "following_url": "https://api.github.com/users/QbieShay/following{/other_user}",
      "gists_url": "https://api.github.com/users/QbieShay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QbieShay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QbieShay/subscriptions",
      "organizations_url": "https://api.github.com/users/QbieShay/orgs",
      "repos_url": "https://api.github.com/users/QbieShay/repos",
      "events_url": "https://api.github.com/users/QbieShay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QbieShay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-16T00:08:37Z",
    "updated_at": "2020-10-01T20:21:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game with the type of graphics similar to breath of the wild\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n**TLDR: There is currently no way in Godot to obtain proper cel shading.**\r\n\r\nGodot's built in toon shader produces a number of bands (one per light that affects the object) and that's due to the fact that each light contribution has a smoothstep applied (depending on the roughness, which i found rather weird) and not the sum of all lights.\r\n\r\nAfter a while, I managed to use Godot's spatial material to produce a toon effect\r\n![Screenshot_2020-02-15_23-55-18](https://user-images.githubusercontent.com/7917475/74596856-55ca8780-5055-11ea-9eff-e88cd56cb40a.png)\r\n\r\nAs you can see in the image there are multiple bands, which is generally not desired. Or rather, each new light creates an additional band, while generally artists would like to control the number of bands and the tint, if any.\r\n\r\nAn example on how a correct toon material would look like:\r\n![Screenshot_2020-02-15_23-30-59](https://user-images.githubusercontent.com/7917475/74596887-9aeeb980-5055-11ea-9311-764c883553e6.png)\r\n This shader (courtesy of [DaveDaDev](https://github.com/DaveDaDev/Godot-Cel-Shader)) looks right, but it has the limitation that it can be affected by only one light.\r\nIf the code at the end is changed from\r\n`DIFFUSE_LIGHT = diffuse.rgb;` to `DIFFUSE_LIGHT += diffuse.rgb;`, it suffers from the same banding problem:\r\n![Screenshot_2020-02-16_00-47-19](https://user-images.githubusercontent.com/7917475/74596912-0769b880-5056-11ea-8e59-44b4a730b5d5.png)\r\n\r\nThere has been also an attempt to read the light information by rendering the model completely white with normal lighting, and then using a second pass on the material to read the white tint and discretise it.\r\nThis approach worked: \r\n![Screenshot_2020-02-16_00-12-22](https://user-images.githubusercontent.com/7917475/74596921-308a4900-5056-11ea-8a94-65b9d10c9f23.png)\r\n\r\nBut with a huge limitation: the new shaded character is drawn always in front of transparent object because it does a screen read.\r\n\r\nIn the picture you can see the plane being drawn behind the character, even if it's supposed to be in front.\r\n![Screenshot_2020-02-16_00-19-37](https://user-images.githubusercontent.com/7917475/74596926-40099200-5056-11ea-904d-a90bcca70272.png)\r\n\r\nIf the plane is set to depth draw always, the second pass won't draw:\r\n![Screenshot_2020-02-16_00-22-32](https://user-images.githubusercontent.com/7917475/74596938-62031480-5056-11ea-9cb1-d01db114fdf6.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhat I would like to see is an additional function in the shader which is executed after all the lights accumulate and receives the final diffuse light and specular light.\r\nSo, it's one function with 2 built-ins.\r\n\r\nWriting a cel shader, with this function, would look like:\r\n\r\n```\r\nlight_post(){\r\n    DIFFUSE_LIGHT = step(DIFFUSE_LIGHT, vec3(0.5));\r\n}\r\n```\r\nOr also, in case a tint is used:\r\n```\r\nuniform sampler2D ramp;\r\n\r\nlight_post(){\r\n    // sample from the ramp depending on the light intensity\r\n    vec2 ramp_uv =  vec2(get_hsv_v(DIFFUSE_LIGHT), 0.5).rgb;\r\n    DIFFUSE_LIGHT = texture(ramp, ramp_uv);\r\n}\r\n```\r\n\r\nThis function would be enough to do all the desired effect for cel shading such as step and using color ramps to shift the tint of parts in light/shade.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis proposal would mean to add code into Godot's default shader and an additional step in the string substitution in the shader.cpp file. It should be possible to use a `light_post()` entry function in the shader code, and inside of this function `DIFFUSE_LIGHT` and `SPECULAR_LIGHT` should be available with all the accumulated effects from adding all the lights.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere is no way, with the current architecture, to obtain cel shading with a single band with multiple lights.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt can't be done as an addon or library, since this functionality is not achieavable without touching the core (not enough information is exposed to the users to obtain this effect)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/484/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/483",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/483/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/483/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/483/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/483",
    "id": 565792945,
    "node_id": "MDU6SXNzdWU1NjU3OTI5NDU=",
    "number": 483,
    "title": "3D Physics Server should have configurable thread model",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-15T18:49:59Z",
    "updated_at": "2020-12-28T02:53:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There are 3 aspects to this:\r\n- Make it thread-safe (at least for resources if not already)\r\n- Make it possible to run simulation in a thread\r\n- **Avoid stalls when creating physic resources** (which is my main problem at the moment)\r\n\r\n**Describe the project you are working on:**\r\nI am working on a voxel engine, which is also used by other people's projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs described in https://github.com/Zylann/godot_voxel/issues/124\r\nIn a voxel terrain, many meshes are getting created dynamically at runtime. Creating mesh colliders is 10 times slower than creating visual meshes (mostly due to computing its BVH), and that takes a lot of time. Unlike `VisualServer` and `PhysicsServer2D`, `PhysicsServer` has no thread model option, so I assume it's basically not thread-safe and runs on the main thread (correct me if I'm wrong). So I currently have no choice but to create my shapes on the main thread, which limits how many I can process per frame before starting to stall the game.\r\nBeyond my own case, this also has the broader issue of preventing scenes from being loaded in a thread, since creating shape resources they might contain would be unsafe too (if they actually are, please document!).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf I take the same design as `VisualServer` and `PhysicsServer2D`, here is how it would be:\r\n- `Single-Unsafe` would be the option for running physics on the main thread, without thread safety (basically how it is now).\r\n- `Single-Safe` would still run physics on the main thread, but with thread-safety in case a thread calls its functions\r\n- `Multithreaded` would run physics on a separate thread and also be safe to be called from other threads.\r\n\r\nThis would be a first improvement since the physics server would have its own thread time to spend without all the other stuff done in the main one.\r\n\r\nHOWEVER, there is a flaw to solve in this design which I'll explain in detail in the next section. It relates to the major problem that made me create this issue.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf we go for the same design as other servers, `PhysicsServer` would be wrapped into a `PhysicsServerWrapMT` class which pushes calls to its function into a ring buffer, and dequeues calls from that buffer from inside the physics thread (or the main thread in case of `Single-Safe`).\r\n\r\nHowever, there is a big flaw in this design, which is important for my use case: when I create a large amount of complex `Shape` resources, it needs to call Bullet which in turn has to build its BVH for that shape. So a call to the server is unavoidable. If all calls are wrapped the same way, the server will dequeue calls to create shapes, and that can stall the simulation because they will be processed in the same thread that runs the simulation, *even if those shapes don't intervene in the simulation yet*. Which defeats the reason to run in a thread in the first place.\r\n\r\nThis problem might exist in other servers already, however that's mostly an assumption I'm making since I don't know their code in detail (especially with Vulkan rewrite). So perhaps not the whole server should be threaded the same. What I'm asking here is that creating resources involving computations which don't intervene in the frame logic should not slow it down.\r\nMaybe resource creation could have another ring buffer and be processed in another thread?\r\nOr, a simple solution would be to not wrap those calls and let them be processed inside the calling thread, which would solve my problem best since I already do the call from a thread. It's only viable if the corresponding server code is officially safe for that kind of contract.\r\nIf you can think of a good way to do this, please share.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI already had a workaround so far by doing everything on the main thread. It limits performance  dramatically and complexifies the code because I have to maintain a queue with the data myself. In many cases you can see terrain parts loading and you have to wait a while for those on the main thread, before you can start moving around and edit.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is already core for other servers, the feature is just missing in `PhysicsServer`. But I want to also emphasize on the resource creation case, which is the original reason why I bumped into this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/483/reactions",
      "total_count": 26,
      "+1": 22,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 4,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/481",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/481/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/481/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/481/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/481",
    "id": 565750061,
    "node_id": "MDU6SXNzdWU1NjU3NTAwNjE=",
    "number": 481,
    "title": "Embed QA into documentation pages",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1849547975,
        "node_id": "MDU6TGFiZWwxODQ5NTQ3OTc1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:docs",
        "name": "topic:docs",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-02-15T13:46:31Z",
    "updated_at": "2020-03-25T19:44:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nGodot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere is a disconnect between users not understanding the documentation and them asking for help in the QA or other social networks. Because of this, we fail to see which piece of documentation was the one not providing enough insight, making it harder to fix it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nEach documentation page already has a unique tag, which is used to describe it within ReadTheDocs. We can use it to generate a unique tag on the QA.\r\n\r\nThe QA can be embedded at the bottom of the documentation page linking all the issues that contain its own tag. This way, users can see a list of questions directly related to the page.\r\n\r\nAdditionally, an \"Add Question\" button can be added to the bottom which would lead to the QA open issue template containing the tag.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/74588977-04cc7c00-4fe0-11ea-92ec-6664536ad87d.png)\r\n\r\n(please use your imagination, the questions in the mock-up are unrelated to the page), all it would do is show the questions related to the tag of this specific page, which is something like \"doc_page_using_kinematicbody_2d\".\r\n\r\nThe Ask Question button will take you to the QA to open a question with a template and the tag added \"doc_page_using_kinematicbody_2d\". I suppose in order to work more smoothly, the button could be greyed out and show \"Log in (with link) to QA to ask a question for this page\"  or something like this.\r\n\r\nThen, every page can have its own list of related questions, but you can still browse them from the QA site and they will appear in Google.\r\n\r\nI know there are more advanced systems out there for these kind of things, but I believe this is by far the best we can do with our resources.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/481/reactions",
      "total_count": 76,
      "+1": 64,
      "-1": 0,
      "laugh": 0,
      "hooray": 9,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/478",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/478/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/478/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/478/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/478",
    "id": 565742683,
    "node_id": "MDU6SXNzdWU1NjU3NDI2ODM=",
    "number": 478,
    "title": "Adding more mapping / hotkey functionality to the animation editor",
    "user": {
      "login": "christophut4",
      "id": 49836644,
      "node_id": "MDQ6VXNlcjQ5ODM2NjQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/49836644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/christophut4",
      "html_url": "https://github.com/christophut4",
      "followers_url": "https://api.github.com/users/christophut4/followers",
      "following_url": "https://api.github.com/users/christophut4/following{/other_user}",
      "gists_url": "https://api.github.com/users/christophut4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/christophut4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/christophut4/subscriptions",
      "organizations_url": "https://api.github.com/users/christophut4/orgs",
      "repos_url": "https://api.github.com/users/christophut4/repos",
      "events_url": "https://api.github.com/users/christophut4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/christophut4/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-02-15T12:38:38Z",
    "updated_at": "2020-02-15T15:32:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI was working on doing an intro for my video game with animations\r\nBut it really has nothing to do with a certain project, it is for general animation purposes\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt could be my fault, but I find it very clunky to manually jump to a certain timestamp and add a keyframe with right click and selecting \"add a keyframe\" for example. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would really help if you would add a hotkey or ability to map this feature and maybe more so you can have better workflow.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit should work just like any other hotkey already present in godot, like those that are already present for the animation editor\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it would be used very often by people who use animation in their games\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think a hotkey for an ability should be baseline.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/477",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/477/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/477/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/477/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/477",
    "id": 565702690,
    "node_id": "MDU6SXNzdWU1NjU3MDI2OTA=",
    "number": 477,
    "title": "Rightclick Godot's Windows taskbar icon to show recent files",
    "user": {
      "login": "ShawkMusic",
      "id": 48574225,
      "node_id": "MDQ6VXNlcjQ4NTc0MjI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48574225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShawkMusic",
      "html_url": "https://github.com/ShawkMusic",
      "followers_url": "https://api.github.com/users/ShawkMusic/followers",
      "following_url": "https://api.github.com/users/ShawkMusic/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShawkMusic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShawkMusic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShawkMusic/subscriptions",
      "organizations_url": "https://api.github.com/users/ShawkMusic/orgs",
      "repos_url": "https://api.github.com/users/ShawkMusic/repos",
      "events_url": "https://api.github.com/users/ShawkMusic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShawkMusic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-15T05:56:31Z",
    "updated_at": "2020-09-18T22:03:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\nThis applies to all projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to be able to open the game straight from the Windows \"recent\" taskbar instead of having to open Godot, then open my project from the list.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI want to be able to quickly open my games by right-clicking on the Godot icon from the Windows taskbar and being able to choose from a list of \"Recent\" projects. For example, you can do this in Blender.\r\nIt's not super ultra mega hyper important or anything but it's nice to have.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nRight-click on the Godot icon on the Windows taskbar, a list of \"Recent\" projects appear to choose from.\r\nThis is how it looks like on Blender:\r\n(filenames censored for privacy reasons)\r\n![Screenshot (20)](https://user-images.githubusercontent.com/48574225/74582736-7af3c300-4f8d-11ea-91c1-8a9be5c086e6.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't think it's even possible to do this with an add-on, and it doesn't seem like it would take up a lot of disk space.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/477/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/475",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/475/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/475/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/475/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/475",
    "id": 565280361,
    "node_id": "MDU6SXNzdWU1NjUyODAzNjE=",
    "number": 475,
    "title": "Add the ability to import and create palette indexed sprites from GIFs and APNGs",
    "user": {
      "login": "Two-Tone",
      "id": 4342859,
      "node_id": "MDQ6VXNlcjQzNDI4NTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4342859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Two-Tone",
      "html_url": "https://github.com/Two-Tone",
      "followers_url": "https://api.github.com/users/Two-Tone/followers",
      "following_url": "https://api.github.com/users/Two-Tone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Two-Tone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Two-Tone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Two-Tone/subscriptions",
      "organizations_url": "https://api.github.com/users/Two-Tone/orgs",
      "repos_url": "https://api.github.com/users/Two-Tone/repos",
      "events_url": "https://api.github.com/users/Two-Tone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Two-Tone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-02-14T11:51:26Z",
    "updated_at": "2020-09-26T13:59:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Ported from https://github.com/godotengine/godot/issues/18269\r\n\r\n**Describe the project you are working on:**\r\n\r\nUnrelated\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently if a developer is going to use 2D animated sprites, they have to go through a semi complicated process for creating and animating it in Godot.  The more animations you need to add to your project, the more tedious and prone to error it becomes. \r\n\r\nSimilarly, if the dev wants to display a sprite with its palette swapped (eg it's a unique version of an enemy so it's yellow instead of purple) they have to either use a shader to shift its entire palette, recolor the sprite in their image editor of choice, or develop a semi-complex shader that dynamically swap palettes. The first option, while fast and easy, gives almost no precise control, the second ends up creating unnecessary asset bloat, and both the last two options are labor intensive and slow.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSome engines, like MUGEN, have the ability to import GIFs and automatically convert them into animated sprites. This makes creating and adding 2D animations into the engine incredibly easy and fast.\r\n\r\nMUGEN also expands on this by allowing the user to edit the indexed palette of sprites to very quickly create palette swapped sprites.\r\n![pal](https://user-images.githubusercontent.com/4342859/74514192-b29d3500-4ed1-11ea-8c89-38068105003a.gif)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe biggest issue I see is figuring out the process the user needs to go through to have a GIF be turned into a fully animated Sprite in engine.  This can't be done on import because where would the editor put the new nodes? It could save each animation as a new scene with the AnimationPlayer as the root node, but that would be pretty unique behavior to GIFs and APNGs.\r\n\r\nThe easiest solution I can think of is having the user drag the GIF/APNG into there scene and then create the tree of nodes.\r\n\r\nFor the palette I can see it being one of two systems.  The most user friendly one would be to have a palette resource in the StreamTexture generated on Import that when clicked into they see each paletted color as a clickable square and then they can start editing the palette as they desire, similar to the GIF above.  \r\n\r\nThe second system would be easier but it wouldn't be user friendly and it'd be considerably slower and more cumbersome. The positive is that it wouldn't require much work to make vs the system above. When inside the StreamTexture the user could edit the palette by selecting its number on the index slider and changing it below that.\r\n![image](https://user-images.githubusercontent.com/4342859/74527744-1896b600-4eec-11ea-95b2-fbd0a393f8f5.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt'd massively improve the workflow for adding in animations and creating palette swaps.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/475/reactions",
      "total_count": 9,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 4,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/474",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/474/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/474/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/474/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/474",
    "id": 565242674,
    "node_id": "MDU6SXNzdWU1NjUyNDI2NzQ=",
    "number": 474,
    "title": "Tiled Progress Control node",
    "user": {
      "login": "rapsaGnauJ",
      "id": 24842781,
      "node_id": "MDQ6VXNlcjI0ODQyNzgx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24842781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rapsaGnauJ",
      "html_url": "https://github.com/rapsaGnauJ",
      "followers_url": "https://api.github.com/users/rapsaGnauJ/followers",
      "following_url": "https://api.github.com/users/rapsaGnauJ/following{/other_user}",
      "gists_url": "https://api.github.com/users/rapsaGnauJ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rapsaGnauJ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rapsaGnauJ/subscriptions",
      "organizations_url": "https://api.github.com/users/rapsaGnauJ/orgs",
      "repos_url": "https://api.github.com/users/rapsaGnauJ/repos",
      "events_url": "https://api.github.com/users/rapsaGnauJ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rapsaGnauJ/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-14T10:37:13Z",
    "updated_at": "2020-02-20T15:15:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a Mega Man themed game. The energy bars (for hp and weapon ammo) used in the original games are tiled, with small cells representing each remaining point.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs of v3.2 there are 2 nodes for bars of this type: ProgressBar and TextureProgress. TextureProgress allows to use a texture, which could be a group of the tiles that are going to be used, but this solution doesn't scale very well, as you could have enemies with different hp values. This node has an option to use a NinePathRect, which for some reason can't be tiled like the dedicated node. Adding that option would be enough to implement a TiledProgress bar.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs said, having a dedicated node for TiledProgress or an option to tile a TextureProgress would be the easiest way to implement this kind of feature on a project like mine.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy suggested solution is to support tiled Nine Path Rect in the TextureProgress node. I've taken a look to the code for this particular node at [`texture_progress.cpp`](https://github.com/godotengine/godot/blob/master/scene/gui/texture_progress.cpp) and it looks like it has it's own implementation for drawing the NinePathRect. I'm sure there is a reason to not use the same implementation used in the dedicated NinePathRect node.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe best workaround I can think of is creating a custom Control node with this behaviour. A NinePathRect which is only drawn a percentage of it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis type of progress bar can be very useful, especially when creating retro-like games. Beginners and new users may aim for a game like this to learn to use the engine and not finding a node that does this for them may not be the most appealing. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/474/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/473",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/473/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/473/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/473/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/473",
    "id": 565155496,
    "node_id": "MDU6SXNzdWU1NjUxNTU0OTY=",
    "number": 473,
    "title": "Have in editor options to simulate common forms of color vision deficiency (color blindness) ",
    "user": {
      "login": "Two-Tone",
      "id": 4342859,
      "node_id": "MDQ6VXNlcjQzNDI4NTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4342859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Two-Tone",
      "html_url": "https://github.com/Two-Tone",
      "followers_url": "https://api.github.com/users/Two-Tone/followers",
      "following_url": "https://api.github.com/users/Two-Tone/following{/other_user}",
      "gists_url": "https://api.github.com/users/Two-Tone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Two-Tone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Two-Tone/subscriptions",
      "organizations_url": "https://api.github.com/users/Two-Tone/orgs",
      "repos_url": "https://api.github.com/users/Two-Tone/repos",
      "events_url": "https://api.github.com/users/Two-Tone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Two-Tone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-02-14T07:34:16Z",
    "updated_at": "2020-03-02T16:19:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Ported from https://github.com/godotengine/godot/issues/21304\r\n\r\n**Describe the project you are working on:**\r\n\r\nUnrelated.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nA decent number of people suffer from being colorblind and as a result a lot of games are considerably harder or even impossible to play unless the devs specifically go out of their way to include colorblind modes.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMy suggestion is to have toggles in the editor that lets the developer see what their game looks like if they had deuteranopia, protanoapia, or tritanopia. It'll help the devs who want to create color blind modes by letting them see what those users would see and it'll help raise awareness that it is an issue in the first place.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor UI I was thinking putting the options inside an icon menu on the toolbar. \r\n![image](https://user-images.githubusercontent.com/4342859/74499283-d009d900-4ea8-11ea-9076-9d3fd8d4a15c.png)\r\n\r\nWhen clicked it'd show a dropdown menu of the various forms for color vision with radio buttons.\r\n![image](https://user-images.githubusercontent.com/4342859/74504122-cbe5b780-4eb8-11ea-92f7-9e1bf850e9c1.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI expect it'll be used fairly often, especially as awareness of the issue grows.  \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHaving this as a plugin greatly diminishes the usefulness of it simply because it's something most people don't consider. Having it in editor and easily discoverable will make it much, much more likely that devs will use the tool and develop for the colorblind.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/473/reactions",
      "total_count": 8,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/472",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/472/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/472/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/472/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/472",
    "id": 565023972,
    "node_id": "MDU6SXNzdWU1NjUwMjM5NzI=",
    "number": 472,
    "title": "Add support for hexagonal GridMaps",
    "user": {
      "login": "KnightNine",
      "id": 34152090,
      "node_id": "MDQ6VXNlcjM0MTUyMDkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/34152090?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KnightNine",
      "html_url": "https://github.com/KnightNine",
      "followers_url": "https://api.github.com/users/KnightNine/followers",
      "following_url": "https://api.github.com/users/KnightNine/following{/other_user}",
      "gists_url": "https://api.github.com/users/KnightNine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KnightNine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KnightNine/subscriptions",
      "organizations_url": "https://api.github.com/users/KnightNine/orgs",
      "repos_url": "https://api.github.com/users/KnightNine/repos",
      "events_url": "https://api.github.com/users/KnightNine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KnightNine/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-02-14T00:08:48Z",
    "updated_at": "2020-09-12T21:57:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA turn based strategy game that takes place in a 3d hexagonal prism grid.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere's no functionality for different types of grids beyond cubes and squares for level creation in the editor.\r\n\r\nIf there was a setting to have cells within the grid ignore the gridmap's transforms, it would be plausible to place the cells at points that would be in line with a hexagonal grid.\r\nBut even then, I see no way to store irrational numbers as transform values of the gridmap node to have it line up perfectly with the hexes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be an alternative arrangement for the gridmap that would allow for the placement of hexagonal prisms. It would help with accommodating for the usage of hex based grids within the editor as opposed to having to create an application for this specific purpose that the gridmap is already meant to fulfill.\r\n\r\n(This could also apply to the 2d tilemap module but 2d sprites don't require the same level of precision that this does and sprites aren't necessarily warped by the grid transforms.)\r\n\r\n \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nwhat this grid would look like:\r\n![grid](https://user-images.githubusercontent.com/34152090/74485626-05460500-4e70-11ea-9cee-26ac8f6c1980.png)\r\nInstead of creating a whole new gridMap with a hexagonal grid, the existing Gridmap could be adapted to accommodate for the positions that would be needed.\r\n\r\nThis would need to be enabled as a setting as being the new default transform values for the gridmap's spatial in order to not have it affect the transform values of the gridmap's children/cells.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be worked around without editing the gridmap module and compiling a custom version of godot since I don't believe plugins to have the level of functionality required for this type of modification. A level editor could be made from scratch that you'd have to run as an application, but in that case it cannot be used within the editor. \r\nMany games use hexagonal tiling as there are [reasons](https://www.realms-beyond.com/combat-system-hex-square/) for hexes to be used over squares and cubes so I believe it could potentially be relevant to any project with a grid. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is inconvenient to have the level editor run as a separate application, especially when it is someone else's work that could be based in one of many different types of coordinate systems and have to translate it to your own project. I haven't tried it yet since I would be more comfortable with creating a separate application alltogether, but I also don't believe it to be possible to be created as a plugin with the same functionality as gridmaps from what I've seen of custom plugins. Though I could be wrong as I am not very experienced in making them.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/472/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/471",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/471/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/471/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/471/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/471",
    "id": 564916225,
    "node_id": "MDU6SXNzdWU1NjQ5MTYyMjU=",
    "number": 471,
    "title": "Randomize resource IDs in scene files (GUID)",
    "user": {
      "login": "ignaloidas",
      "id": 16557741,
      "node_id": "MDQ6VXNlcjE2NTU3NzQx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16557741?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ignaloidas",
      "html_url": "https://github.com/ignaloidas",
      "followers_url": "https://api.github.com/users/ignaloidas/followers",
      "following_url": "https://api.github.com/users/ignaloidas/following{/other_user}",
      "gists_url": "https://api.github.com/users/ignaloidas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ignaloidas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ignaloidas/subscriptions",
      "organizations_url": "https://api.github.com/users/ignaloidas/orgs",
      "repos_url": "https://api.github.com/users/ignaloidas/repos",
      "events_url": "https://api.github.com/users/ignaloidas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ignaloidas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-02-13T19:56:57Z",
    "updated_at": "2020-12-11T01:32:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSeveral small games with multiple developers.\r\n**Describe the problem or limitation you are having in your project:**\r\nQuite often several developers add something to a scene, and it is annoying to merge the changes since, for example, if an external resource was added in both patches, it would have the same resource ID, thus requiring to go through every mention of that ID and decide which one it should be.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe could randomize resource IDs in the tscn format. This would allow for easier merges, often fully automatic. The only problem could be when resource is deleted in one patch and used in the other one, but this can already happen.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nInstead of setting increasing resource IDs when saving, set random ones for new resources.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis would be used often. Technically one could write a script that would randomize resource IDs before commiting, but that would be hacky and prone to bugs.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nEasier to do in core and affects most developers.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/471/reactions",
      "total_count": 18,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/470",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/470/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/470/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/470/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/470",
    "id": 564903428,
    "node_id": "MDU6SXNzdWU1NjQ5MDM0Mjg=",
    "number": 470,
    "title": "Add more 2D blend modes",
    "user": {
      "login": "Torguen",
      "id": 19652075,
      "node_id": "MDQ6VXNlcjE5NjUyMDc1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19652075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Torguen",
      "html_url": "https://github.com/Torguen",
      "followers_url": "https://api.github.com/users/Torguen/followers",
      "following_url": "https://api.github.com/users/Torguen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Torguen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Torguen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Torguen/subscriptions",
      "organizations_url": "https://api.github.com/users/Torguen/orgs",
      "repos_url": "https://api.github.com/users/Torguen/repos",
      "events_url": "https://api.github.com/users/Torguen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Torguen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-02-13T19:31:50Z",
    "updated_at": "2020-07-23T13:24:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nIt is a kind of presentation in which I would like to use the sprites of my game with the \"Destination in\" blend, but this blend does not exist in Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no blend mode \"Destination in\"\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd this basic blend modes to Godot to get new effects.\r\n\r\n![1](https://user-images.githubusercontent.com/19652075/74470979-bdd76d00-4e9f-11ea-8794-62a84b6304ef.png)\r\n\r\nActual blend modes in Godot:\r\n![2](https://user-images.githubusercontent.com/19652075/74471153-03943580-4ea0-11ea-8868-9da3e9ac607d.png)\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt consists of adding new blend modes to Godot\r\n\r\nNormal sprite\r\n![1](https://user-images.githubusercontent.com/19652075/74475756-54a82780-4ea8-11ea-9651-d266c8c1d45a.png)\r\n\r\nWith \"Destination in\" blend mode\r\n![2](https://user-images.githubusercontent.com/19652075/74475759-57a31800-4ea8-11ea-8328-4ae446ac5d42.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, these effects cannot be emulated by code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThey are basic effects in most engines.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/470/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/469",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/469/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/469/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/469/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/469",
    "id": 564834496,
    "node_id": "MDU6SXNzdWU1NjQ4MzQ0OTY=",
    "number": 469,
    "title": "Change path of a Node in Animation Player",
    "user": {
      "login": "JeffVenancius",
      "id": 43701418,
      "node_id": "MDQ6VXNlcjQzNzAxNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/43701418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeffVenancius",
      "html_url": "https://github.com/JeffVenancius",
      "followers_url": "https://api.github.com/users/JeffVenancius/followers",
      "following_url": "https://api.github.com/users/JeffVenancius/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeffVenancius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeffVenancius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeffVenancius/subscriptions",
      "organizations_url": "https://api.github.com/users/JeffVenancius/orgs",
      "repos_url": "https://api.github.com/users/JeffVenancius/repos",
      "events_url": "https://api.github.com/users/JeffVenancius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeffVenancius/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-13T17:19:27Z",
    "updated_at": "2020-02-13T17:26:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 2D turn-based RPG.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWell, you see, I work a lot on Animation Player, but sometimes I have to change the path of a node I'm working on, and the Animation Player won't follow it. \r\n\r\n![Tip1](https://user-images.githubusercontent.com/43701418/74460282-6919ff00-4e6b-11ea-93e9-e88e4c100ac2.png)\r\n\r\n![Tip2](https://user-images.githubusercontent.com/43701418/74459782-a467fe00-4e6a-11ea-8c36-22723c23741b.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nChange the Node path on Animation Player. I'm doing by hand, but if I could change just the node and keep all the timeline and properties then it would be save a lot of time.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIt could be automatic, but I think it would be better if you could just click here and put where the node is right now:\r\n\r\n![Tip1](https://user-images.githubusercontent.com/43701418/74460515-c3b35b00-4e6b-11ea-9083-27c486098837.png)\r\n\r\n\r\nI think it would be better because then you could put the same properties, methods, etc in different nodes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOh, I think it would be used a lot. I don't actually know if I could do it myself (because I'm kind of a newbie). \r\nI think this is something that could be built-in.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause everybody would use it. In the way it is, I'm doing all by hand, but if I could change just that, it would save a lot of time. Maybe even with instancing later, I don't know.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/469/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/468",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/468/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/468/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/468/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/468",
    "id": 564790432,
    "node_id": "MDU6SXNzdWU1NjQ3OTA0MzI=",
    "number": 468,
    "title": "Emit Signal Before A File Is Deleted",
    "user": {
      "login": "CodeDarigan",
      "id": 47497501,
      "node_id": "MDQ6VXNlcjQ3NDk3NTAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47497501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeDarigan",
      "html_url": "https://github.com/CodeDarigan",
      "followers_url": "https://api.github.com/users/CodeDarigan/followers",
      "following_url": "https://api.github.com/users/CodeDarigan/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeDarigan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeDarigan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeDarigan/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeDarigan/orgs",
      "repos_url": "https://api.github.com/users/CodeDarigan/repos",
      "events_url": "https://api.github.com/users/CodeDarigan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeDarigan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-13T16:09:15Z",
    "updated_at": "2020-07-25T13:15:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm the maintainer of [WAT](https://github.com/CodeDarigan/WAT). The Automated Testing Plugin for Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm currently refactoring my test discovery system. It serializes test files into a resource so I can store additional metadata (e.g tests that are grouped by tags rather than directories). While Resources are smart enough to know when a serialized file has changed position, it doesn't have the same knowledge about files being deleted. So when a user deletes a test, that test can no longer be loaded and since it can't be loaded, the resource file that stored it can't load it and essentially the whole system comes crashing down in a waterfall of load errors. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature is pretty straightforward. A signal is added to the EditorFileSystem which is emitted along with the file (or filename) to be deleted. This allows tool makers to make sure we can clean up old references before any load-based crashing.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nEssentially as I said. Give the filesystem a signal, when a file is about to be deleted, emit the signal along with the file and/or filepath.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere isn't an easy way to perform it on demand. There are options to attempt to do it via _process within the editor but I don't think that's ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt has an exponential benefit. It helps tool makers makes more robust tools which help improve the asset library which help improve godot (which I believe is great when the change itself should be straightforward)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/468/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/465",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/465/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/465/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/465/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/465",
    "id": 563310126,
    "node_id": "MDU6SXNzdWU1NjMzMTAxMjY=",
    "number": 465,
    "title": "GDScript: Make print use var2str for basic variables and auto-separation",
    "user": {
      "login": "xix-xeaon",
      "id": 1330325,
      "node_id": "MDQ6VXNlcjEzMzAzMjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1330325?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xix-xeaon",
      "html_url": "https://github.com/xix-xeaon",
      "followers_url": "https://api.github.com/users/xix-xeaon/followers",
      "following_url": "https://api.github.com/users/xix-xeaon/following{/other_user}",
      "gists_url": "https://api.github.com/users/xix-xeaon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xix-xeaon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xix-xeaon/subscriptions",
      "organizations_url": "https://api.github.com/users/xix-xeaon/orgs",
      "repos_url": "https://api.github.com/users/xix-xeaon/repos",
      "events_url": "https://api.github.com/users/xix-xeaon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xix-xeaon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-11T16:06:31Z",
    "updated_at": "2020-03-13T14:18:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n**print** really only exists for debugging purposes but `print(1, 1.0, \"1\")` gives `111` which is very confusing.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMakes it much quicker to debug, and less confusing.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n`print(1, 1.0, \"1\")` now instead gives `1, 1.0, \"1\"` which is very clear and easy.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nImplementation is simple. Single string argument and thing like Nodes etc should not use var2str. The only question would be to support different separators but I don't think it's necessary and since GDScript still doesn't support named arguments it wouldn't fit well.\r\n\r\nI've already implemented it myself but I think it's a good candidate for someone who's never contributed before.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often and by everyone.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a core feature that everyone benefits from all the time.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/465/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/464",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/464/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/464/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/464/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/464",
    "id": 563283649,
    "node_id": "MDU6SXNzdWU1NjMyODM2NDk=",
    "number": 464,
    "title": "Add the ability to use stdio for LSP to support some editors (Qt Creator, Kate, etc.)",
    "user": {
      "login": "Shatur95",
      "id": 22453358,
      "node_id": "MDQ6VXNlcjIyNDUzMzU4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22453358?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shatur95",
      "html_url": "https://github.com/Shatur95",
      "followers_url": "https://api.github.com/users/Shatur95/followers",
      "following_url": "https://api.github.com/users/Shatur95/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shatur95/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shatur95/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shatur95/subscriptions",
      "organizations_url": "https://api.github.com/users/Shatur95/orgs",
      "repos_url": "https://api.github.com/users/Shatur95/repos",
      "events_url": "https://api.github.com/users/Shatur95/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shatur95/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-02-11T15:27:23Z",
    "updated_at": "2020-06-19T12:56:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having:**\r\nRelease 3.2 includes Language Server Protocol. Now, as a code editor for GDScript, it has become possible to use VSCode or Atom. But LSP was implemented through WebSocket which is a little non-standard and not supported by all text editors. [This PR](https://github.com/godotengine/godot/pull/35864) switches the LSP from WebSocket to TCP. But some editors (for example, Kate or Qt Creator) can only work through stdio. For example, to work with Qt Creator you need to specify `netcat localhost 6008` as a server.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would be great to add a CLI command such as `--language-server` for Godot, which would use `stdio` for LSP as it implemented in other LSP servers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/464/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/460",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/460/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/460/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/460/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/460",
    "id": 562341905,
    "node_id": "MDU6SXNzdWU1NjIzNDE5MDU=",
    "number": 460,
    "title": "Allow cyclic references",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "vnen",
      "id": 5599796,
      "node_id": "MDQ6VXNlcjU1OTk3OTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vnen",
      "html_url": "https://github.com/vnen",
      "followers_url": "https://api.github.com/users/vnen/followers",
      "following_url": "https://api.github.com/users/vnen/following{/other_user}",
      "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
      "organizations_url": "https://api.github.com/users/vnen/orgs",
      "repos_url": "https://api.github.com/users/vnen/repos",
      "events_url": "https://api.github.com/users/vnen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vnen/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "vnen",
        "id": 5599796,
        "node_id": "MDQ6VXNlcjU1OTk3OTY=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vnen",
        "html_url": "https://github.com/vnen",
        "followers_url": "https://api.github.com/users/vnen/followers",
        "following_url": "https://api.github.com/users/vnen/following{/other_user}",
        "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
        "organizations_url": "https://api.github.com/users/vnen/orgs",
        "repos_url": "https://api.github.com/users/vnen/repos",
        "events_url": "https://api.github.com/users/vnen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vnen/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-02-10T05:55:32Z",
    "updated_at": "2020-10-28T12:17:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n- Networking packet system\r\n- Celestial bodies, script hierarchy\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nUse Case: Packets\r\n---\r\nStatic constructor wrappers are impossible to make due to `Parser Error: Using own name in class file is not allowed (creates a cyclic reference)`\r\n\r\nConsider the following code\r\n\r\n```swift\r\nextends Packet\r\nclass_name PacketPing\r\n\r\nvar message: String\r\n\r\nstatic func create(message: String) -> PacketPing:\r\n\tvar packet: PacketPing = PacketPing.new() #// Cyclic reference\r\n\t\r\n\tpacket.message = message\r\n\t\r\n\treturn packet\r\n\r\n#// We may need multiple initializers that do completely different things\r\n#//static func from_bytes(bytes: PoolByteArray) -> PacketPing:\r\n```\r\n\r\nIt is impossible to make a static packet constructor wrapper for this since PacketPing refers to itself\r\n\r\nUse Case: Scripts in a hierarchy\r\n---\r\n![image](https://user-images.githubusercontent.com/14253836/74123222-988eea00-4b93-11ea-8575-ddfd9f8fa963.png)\r\n```swift\r\nextends Node\r\nclass_name CelestialBody\r\n\r\nvar mass: float\r\nvar radius: float\r\n\r\n#// Check if we are orbiting another CelestialBody\r\nfunc is_orbiting() -> bool:\r\n\treturn get_parent() is CelestialBody #// Cyclic reference\r\n```\r\n\r\nWhat I don't understand: Cyclic references work fine in almost every other programming language\r\n---\r\n<details>\r\n  <summary>Cyclic references that work fine in 5 of the most popular programming languages</summary>\r\n\r\n\r\n**C#**:\r\n```csharp\r\npublic class A\r\n{\r\n    public static A Create()\r\n    {\r\n        return new A(); // This works fine!\r\n    }\r\n}\r\n```\r\n**Java**:\r\n```java\r\npublic class A {\r\n    public static A create() {\r\n        return new A(); // This works fine!\r\n    }\r\n}\r\n```\r\n**C++**:\r\n```cpp\r\nclass A {\r\npublic:\r\n    static A create()\r\n    {\r\n        return A(); // This works fine!\r\n    }\r\n};\r\n```\r\n**JavaScript**:\r\n```js\r\nfunction A() {\r\n\t\tthis.create = () => new A(); // This works fine!\r\n}\r\n//new A().aa();\r\n```\r\n**Python**:\r\n```python\r\nclass A:\r\n    @classmethod\r\n    def create(cls):\r\n        return A() # This works fine!\r\n```\r\n**PHP**: It should be noted that cyclic references actually do not work in PHP\r\n</details>\r\n\r\n---\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nCyclic references are completely valid for good code. It is needed to make named, static, wrapped constructors.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nGDScript code samples above would run without errors since cyclic references should be valid\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nCyclic references cannot be implemented without changing the scripting engine\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, right now there is no good way to work around cyclic references. `is` operator can be worked around by comparing the script with `load()`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis can not be worked around with an addon. Cyclic references are a core part of the scripting engine",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/460/reactions",
      "total_count": 15,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/456",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/456/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/456/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/456/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/456",
    "id": 562009039,
    "node_id": "MDU6SXNzdWU1NjIwMDkwMzk=",
    "number": 456,
    "title": "Switch to Script view when clicking on generic Node that has a script",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-02-08T11:51:39Z",
    "updated_at": "2020-02-13T21:41:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Project with state machine, but this applies to others as well.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI often have a simple Node I attach a script to. I have to click on the small scroll icon to the right to get to it's script. The small icon is harder to hit, if the panel size is slightly bigger it's harder to tell which symbol belongs to which node, intuitively I always click on the node when I want to get to the script.\r\n\r\n![switch_to_script](https://user-images.githubusercontent.com/47016402/74086404-c7696b00-4a82-11ea-8f8d-0967cb90176a.gif)\r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nUnlike a KinematicPlayer2D, Node2D, or Sprite node, ect, if a generic Node has a script attached, it there is no purpose or benefit to stay in 2D viewport. The main purpose of this node, if it holds a script, is to hold the script, so I would expect the node to show me their script if I click on it.\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSee above gif, but imagine it switching to the script view with the respective script. Essentially the same thing as if you would click on the scroll icon right now.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nUnfortunately I can't.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWould be used often by anyone with the same visually wired brains, and those who don't enjoy clicking possibly far away, identical tiny icons as much as spelled out names.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an integral part of the editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/456/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/455",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/455/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/455/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/455/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/455",
    "id": 562008056,
    "node_id": "MDU6SXNzdWU1NjIwMDgwNTY=",
    "number": 455,
    "title": "Dialog windows should not resize below the minimal size of their children",
    "user": {
      "login": "dark-penguin",
      "id": 16963337,
      "node_id": "MDQ6VXNlcjE2OTYzMzM3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16963337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dark-penguin",
      "html_url": "https://github.com/dark-penguin",
      "followers_url": "https://api.github.com/users/dark-penguin/followers",
      "following_url": "https://api.github.com/users/dark-penguin/following{/other_user}",
      "gists_url": "https://api.github.com/users/dark-penguin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dark-penguin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dark-penguin/subscriptions",
      "organizations_url": "https://api.github.com/users/dark-penguin/orgs",
      "repos_url": "https://api.github.com/users/dark-penguin/repos",
      "events_url": "https://api.github.com/users/dark-penguin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dark-penguin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-08T11:41:50Z",
    "updated_at": "2020-12-23T08:19:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Dialog windows should not resize below the (minimal) size of their children. (maybe optionally?)\r\nCurrently, it's possible to resize any window (even FileDialog!) to a very small size, and then its elements \"hover in the air\".\r\n\r\nOf course, there is rect_min_size, but calculating a min_size and statically setting it for each window feels like a dirty workaround (different DPI? Adding children at runtime? Adding children and forgetting to recalculate min_size?).\r\n\r\n**Describe the project you are working on:**\r\nAn editor plugin that mostly uses dialog windows rather than toolbars.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a WindowDialog with a few buttons in a VBoxContainer. There are expandable separators between buttons, so the container is resized along with the window. This window being resizeable is good, because it's an editor plugin and everyone has different resolutions. The problem is, I can resize this window to be almost (0,0) - with only the window title visible, and all its elements \"float in the air\". This \"looks bad\", which is technically not a big problem, but \"looking good\" may be quite important for the general impression on the user. I remember Godot being praised as \"the best engine for 2D\" and particularly for its editor interface, so I think improving in this area would be worthwhile.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI think windows should not resize below the size of their elements by default. AFAIK this is the \"expected\" behavior based on any other UI library (Lazarus, Qt, whatever is dealing with windows). I think this will \"feel more polished\" to the new users, rather than what we have now.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIt makes more sense to show what we have now instead:\r\n![test1](https://user-images.githubusercontent.com/16963337/74084193-d7328080-4a7d-11ea-9919-6bb12d3cdd58.png)\r\n![test2](https://user-images.githubusercontent.com/16963337/74084195-d994da80-4a7d-11ea-8aa8-9441635ad1ad.png)\r\nHowever, this is not a \"bug\", but \"lack of functionality\" or \"intentional decision\", so I think it belongs to the \"Proposals\" section.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThere are many ways to implement this. I think the easiest one would be calculating rect_min_size automatically based on the elements that are currently on that window. Maybe do that by default, but let the user modify it if necessary?.. Maybe make it modifiable, but not below the \"hard\" limits calculated from its children?.. That depends on whether anyone needs this behavior to remain as it is, and for what reasons.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWorkarounds include:\r\n- either setting rect_min_size manually once, which is not a good idea in case something changes,\r\n- or checking the window size on each update and fixing it if necessary, which might be fairly complex (I don't even know how would I do that \"in a good way\" - that's too hard).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is one of the very basic behaviors expected from the core UI functionality, so fixing it right in the window code would be most suitable. Also, I don't think anyone would miss the current behavior (but that has yet to be confirmed).",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/455/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/454",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/454/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/454/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/454/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/454",
    "id": 561971068,
    "node_id": "MDU6SXNzdWU1NjE5NzEwNjg=",
    "number": 454,
    "title": "Add \"invert\" option for state machine's conditions in AnimationTree",
    "user": {
      "login": "David-Ochoa",
      "id": 13645633,
      "node_id": "MDQ6VXNlcjEzNjQ1NjMz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13645633?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/David-Ochoa",
      "html_url": "https://github.com/David-Ochoa",
      "followers_url": "https://api.github.com/users/David-Ochoa/followers",
      "following_url": "https://api.github.com/users/David-Ochoa/following{/other_user}",
      "gists_url": "https://api.github.com/users/David-Ochoa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/David-Ochoa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/David-Ochoa/subscriptions",
      "organizations_url": "https://api.github.com/users/David-Ochoa/orgs",
      "repos_url": "https://api.github.com/users/David-Ochoa/repos",
      "events_url": "https://api.github.com/users/David-Ochoa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/David-Ochoa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-08T05:00:51Z",
    "updated_at": "2020-02-22T02:41:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on an action/adventure game, I'm using the AnimationTree's state machine to implement AI characters and player controller\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen editing the state machine I'm using conditions to pass from one state to another, but you cannot invert o negate a condition, for example moving from IDLE to MOVING should be implemented with one condition (ISMOVING) and use the invert option when you want the trasition to activate when condition is FALSE. Right now you need two conditions: IsMoving and NotIsMoving. and when testing the state machine's workings you need to select/deselect two conditions at the same time (which is not possible), this makes it difficult to check in the editor if your logic is properly working.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAdding an invert (or negate) checkbox to activate the transition when the condition is FALSE would eliminate the need for two variables and testing your conditions more accurately.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/13645633/74079352-cb9e7580-49fb-11ea-80d0-d38f39aab435.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWhen the \"Invert Condition\" checkbox is checked it will set the auto advance condition to TRUE when the condition is FALSE\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used every time a transition needs to activate when a condition is FALSE and right now it cannot be implemented in code because it is an editor functionality\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would change a core component, so no, it could not be done in an add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/454/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/453",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/453/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/453/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/453/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/453",
    "id": 561953831,
    "node_id": "MDU6SXNzdWU1NjE5NTM4MzE=",
    "number": 453,
    "title": "A way to make `yield(x)` return a value alongside the `GDScriptFunctionState`",
    "user": {
      "login": "jabcross",
      "id": 6402237,
      "node_id": "MDQ6VXNlcjY0MDIyMzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6402237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jabcross",
      "html_url": "https://github.com/jabcross",
      "followers_url": "https://api.github.com/users/jabcross/followers",
      "following_url": "https://api.github.com/users/jabcross/following{/other_user}",
      "gists_url": "https://api.github.com/users/jabcross/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jabcross/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jabcross/subscriptions",
      "organizations_url": "https://api.github.com/users/jabcross/orgs",
      "repos_url": "https://api.github.com/users/jabcross/repos",
      "events_url": "https://api.github.com/users/jabcross/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jabcross/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-08T02:03:03Z",
    "updated_at": "2020-02-15T15:41:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Not working on a project; opening the proposal here to branch off the discussion in [here](https://github.com/godotengine/godot/pull/32034#)\r\n\r\nIn the ongoing discussion to add `await`, it was suggested that `\"completed\"` be added as an implied second parameter to `yield(x)`, which would then be used instead of the new operator `await`.\r\n\r\nThis is a counter-proposal to add a Python-like functionality to `yield` instead, in addition to the new operator. As a bonus, it will allow easy usage of [algebraic effects](https://overreacted.io/algebraic-effects-for-the-rest-of-us/) patterns.\r\n\r\n## Current pattern\r\n\r\nWhen using `yield()` without parameters, we can use `resume` from the caller to send information *into* the callee. However, it's difficult to send information back to the caller in this back-and-forth manner.\r\n\r\nThis is the biggest reason why I haven't really ever used `.resume()` in practice. Usually, I'm more interested in getting information *out* of a function, not as much into it.\r\n\r\nNowadays, to pass information *out* from a concurrent coroutine, you need to pass some common container (like an array) into it by parameter, and use that as shared state. This is bug-prone and requires you to change the interface of the function when you decide that you need that channel of information.\r\n\r\nThe following code prints \"ABCDEF\", and illustrates a current way to do this.\r\n\r\n```\r\nfunc foo():\r\n    var in_channel = [null]\r\n    # foo --> bar, by parameter\r\n    var state = bar(\"A\", in_channel)\r\n\r\n    # foo <-- bar, by shared state\r\n    var from_bar = in_channel[0]\r\n    print(from_bar) # \"B\"\r\n\r\n    # foo --> bar, by .resume\r\n    state = state.resume(\"C\")\r\n\r\n    # foo <-- bar, by shared state\r\n    from_bar = in_channel[0]\r\n    print(from_bar) # \"D\"\r\n\r\n    # foo --> bar, by .resume\r\n    # foo <-- bar, by return\r\n    from_bar = state.resume(\"E\")\r\n    print(from_bar) # \"F\"\r\n   \r\n\r\nfunc bar(x, in_channel):\r\n    print(x) # \"A\"\r\n    in_channel[0] = \"B\"\r\n    var from_foo = yield()\r\n    var print(from_foo) # \"C\"\r\n    in_channel[0] = \"D\"\r\n    from_foo = yield()\r\n    print(from_foo) # \"E\"\r\n    return \"F\"\r\n```\r\n\r\nAs you can see, using `in_channel` is clunky and feels wrong in terms of shared state.\r\n\r\n## My proposal\r\n\r\nIn Python, `yield` is used to send information out of the running generator function into the caller's context. This proposal aims to add a way to use `yield` more in line with what a Python programmer would expect.\r\n\r\nMy proposal is as follows: add a `yielded_value` property to GDScriptFunctionState that contains the value of x, if `yield(x)` was called with a single parameter (and null otherwise). This way, there is a two-way communication channel between caller and callee. This code does the same as the previous one, but hopefully in a more elegant manner.\r\n\r\n\r\n```\r\nfunc foo():\r\n    # foo --> bar, by parameter\r\n    var state = bar(\"A\")\r\n\r\n    # foo <-- bar, by yield()\r\n    var from_bar = state.yielded_value\r\n    print(from_bar) # \"B\"\r\n\r\n    # foo --> bar, by .resume\r\n    state = state.resume(\"C\")\r\n\r\n    # foo <-- bar, by yield()\r\n    from_bar = state.yielded_value\r\n    print(from_bar) # \"D\"\r\n\r\n    # foo --> bar, by .resume\r\n    # foo <-- bar, by return\r\n    from_bar = state.resume(\"E\")\r\n    print(from_bar) # \"F\"\r\n   \r\n\r\nfunc bar(x):\r\n    print(x) # \"A\"\r\n    var from_foo = yield(\"B\")\r\n    var print(from_foo) # \"C\"\r\n    from_foo = yield(\"D\")\r\n    print(from_foo) # \"E\"\r\n    return \"F\"\r\n```\r\n\r\n\r\nThis will not break compatibility with current use of `yield`, since you can't use it with a single parameter currently. I just think this is a much better idea than making `\"completed\"` implied, since then we don't make an already pretty confusing function call even more confusing.\r\n\r\n### Cleaning up the interface\r\n\r\nAs a further (compatibility-breaking) proposal, I suggest splitting the functionality of `yield()` so that the two-parameter version gets moved to `await()`. As such, we'd have a better-behaved function interface for both:\r\n\r\n`yield(value=null)`\r\n\r\nand\r\n\r\n`await(object, signal='completed')`\r\n\r\nNo more counting the number of arguments in the parser.\r\n\r\n\r\n------\r\n\r\nI hope it's okay to break the question form in this case. If not, is there a proper place to make a proposal in this format? I don't really have a current project that would benefit from this, since I have avoided this pattern because of the lack of this functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/452",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/452/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/452/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/452/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/452",
    "id": 561919837,
    "node_id": "MDU6SXNzdWU1NjE5MTk4Mzc=",
    "number": 452,
    "title": "Edit only one side of extents",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-07T23:16:37Z",
    "updated_at": "2020-06-19T08:37:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI often use CollisionShape2D nodes with rectangle shapes. Their problem is that you need to place the rectangle in the middle of the object and expand the extents to match the object's size. Because the extents increase from both sides and it's not always obvious where object's center may be, it often requires trial-and-error to get done correctly, which is simply a waste of time.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf I could change the rectangle's extents with handles on any side, like this is done with scaling Sprites or resizing Control nodes, it would save some time and make adding colliders more friendly.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/74072612-9bf56a80-4a07-11ea-8946-a53a21d07d3e.png)\r\n![image](https://user-images.githubusercontent.com/2223172/74072622-a57ed280-4a07-11ea-9dbf-f0bff2e9ce48.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nRectangleShapes2D should be edited like Control rectangles. This can be achieved by editing `extents` of RectangleShape2D and `position` of CollisionShape2D simultaneously.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it would require a plugin.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a QoL thing for collision shapes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/452/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/450",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/450/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/450/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/450/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/450",
    "id": 561412714,
    "node_id": "MDU6SXNzdWU1NjE0MTI3MTQ=",
    "number": 450,
    "title": "Add a Texture Offset property to Line2D",
    "user": {
      "login": "HeartoLazor",
      "id": 12376042,
      "node_id": "MDQ6VXNlcjEyMzc2MDQy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12376042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/HeartoLazor",
      "html_url": "https://github.com/HeartoLazor",
      "followers_url": "https://api.github.com/users/HeartoLazor/followers",
      "following_url": "https://api.github.com/users/HeartoLazor/following{/other_user}",
      "gists_url": "https://api.github.com/users/HeartoLazor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/HeartoLazor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HeartoLazor/subscriptions",
      "organizations_url": "https://api.github.com/users/HeartoLazor/orgs",
      "repos_url": "https://api.github.com/users/HeartoLazor/repos",
      "events_url": "https://api.github.com/users/HeartoLazor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/HeartoLazor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-07T04:24:03Z",
    "updated_at": "2020-07-04T17:43:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA shmup with a cute dog.\r\nI'm rendering a closed path 2d with a line 2d node using a texture.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to \"scroll\" the line 2d node texture by an offset, but I can't find a way in the inspector.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis feature will help me to make more easy closed seamless line 2d rendered textures at the ending points.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/12376042/74000207-0645d680-4946-11ea-89cb-52c1f4083f2b.png)\r\nUsing this texture:\r\n![gravity_control_rail](https://user-images.githubusercontent.com/12376042/74000245-22e20e80-4946-11ea-9394-42cc3df73b40.png)\r\nAt the mouse the line 2d \"closes\", but the texture yellow part is visually broken. That can be easily fixed with an offset texture var in the line 2d.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nA new var named \"texture offset\" at the fill section of line 2d.\r\nThe var range is 0.0 to 1.0, where 0.0 is no offset and 1.0 is full width texture offset.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, because I can't find a way to override the line 2d renderer and override the whole drawing for this feature should be overkill.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a limitation with the line 2d nodes and an add-on to fix this don't make sense.\r\nThere are more applications for this feature like scrolling animated beams, electricity, water or as my case making sure a closing line 2d is seamless.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/450/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/449",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/449/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/449/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/449/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/449",
    "id": 561373828,
    "node_id": "MDU6SXNzdWU1NjEzNzM4Mjg=",
    "number": 449,
    "title": "Add a `get_overlapping_bodies()` equivalent for collision shapes",
    "user": {
      "login": "AlexZan",
      "id": 1899750,
      "node_id": "MDQ6VXNlcjE4OTk3NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1899750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexZan",
      "html_url": "https://github.com/AlexZan",
      "followers_url": "https://api.github.com/users/AlexZan/followers",
      "following_url": "https://api.github.com/users/AlexZan/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexZan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexZan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexZan/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexZan/orgs",
      "repos_url": "https://api.github.com/users/AlexZan/repos",
      "events_url": "https://api.github.com/users/AlexZan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexZan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-07T01:54:44Z",
    "updated_at": "2020-09-12T22:04:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA block building vehicle game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nthe limitation is being able to get an array of all the collision shapes on demand the same way I can get an array of bodies with get_overlapping_bodies()\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI will be able to get what i am hitting in my area collision shape, without having to use enter/exit signals.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nn/a\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nn/a\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUsing enter/exit signals, which has its own downfalls, such as potentially having to manage states for each collision shape entering/exiting to perform attack. with a get_overlapping_collision_shapes() it would be cleaner, possibly more performant. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nit would compliment the existing core physics\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/449/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/447",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/447/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/447/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/447/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/447",
    "id": 561147503,
    "node_id": "MDU6SXNzdWU1NjExNDc1MDM=",
    "number": 447,
    "title": "RGB Curves / HUE Correct / Levels: to Environment node.",
    "user": {
      "login": "alexfreyre",
      "id": 42384785,
      "node_id": "MDQ6VXNlcjQyMzg0Nzg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/42384785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexfreyre",
      "html_url": "https://github.com/alexfreyre",
      "followers_url": "https://api.github.com/users/alexfreyre/followers",
      "following_url": "https://api.github.com/users/alexfreyre/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexfreyre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexfreyre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexfreyre/subscriptions",
      "organizations_url": "https://api.github.com/users/alexfreyre/orgs",
      "repos_url": "https://api.github.com/users/alexfreyre/repos",
      "events_url": "https://api.github.com/users/alexfreyre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexfreyre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-06T17:04:13Z",
    "updated_at": "2020-03-25T17:58:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis proposal applies in general to any type of project.\r\n\r\nFirst of all, I am an artist from the field of Fine Arts. I am focused on developing works of art with what is called emerging media. I am currently using Godot to do interactive virtual jobs. Therefore, I am very concerned about the development of Godot and I want to humbly provide my point of view.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor human perception, contrast and gray values ​​are very important before other phenomena such as color and saturation, which are subsequently evaluated. In my opinion Godot lacks a deep control over this fact. Therefore, I propose different things so that the user has more control in this regard.\r\n\r\nIn my humble opinion with these characteristics, we could adjust our visuality with total control over contrast, gray levels and saturation, in addition to generating very specific effects without having to code a shader, which is not so easy for everyone.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIn the \"Environment\" node, we can control the \"contrast, brightness and saturation\", although in a simple way.\r\n\r\nI propose to give the user the possibility of use:\r\n1. LEVELS, to control the \"hightlights\" or \"Gain\", \"midtones\" or \"Gamma\" and \"Shadows\" or \"Lift\", and the possibility of changing each color as described above. For specific visual effects.\r\n2. RGB_CURVES, for the control of each channel \"RGB\" and \"all three together in the fourth parameter\", with the possibility of adding several points to the curve.\r\n3. HUE_CORRECT, for the HSV control of the different colors of the visible spectrum. This could be useful, for example, to emphasize color effects, perhaps desaturate all but one, among other effects.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nOriginal image\r\n![original](https://user-images.githubusercontent.com/42384785/73957860-06f25480-48d5-11ea-8928-25dd15c07e9b.jpeg)\r\n\r\nRGB_Curves\r\n![RGB_CURVES](https://user-images.githubusercontent.com/42384785/73957875-08bc1800-48d5-11ea-9c57-5d9ec98e541c.png)\r\n\r\nHUE_Correct\r\n![HUE_CORRECT_HSV](https://user-images.githubusercontent.com/42384785/73957883-0c4f9f00-48d5-11ea-896d-8d3250013cb5.png)\r\n\r\nLEVELS\r\n![LEVELS](https://user-images.githubusercontent.com/42384785/73959230-0e1a6200-48d7-11ea-80dc-a7ce4c62bb59.png)\r\n\r\n![LEVELS_2](https://user-images.githubusercontent.com/42384785/73959261-196d8d80-48d7-11ea-92f3-f77a7c2ab20b.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used very often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPersonally, I think this is a really important and essential feature for any software that focuses on the creation of images, video, games or visual interactive applications like Godot. This feature could be part of the core as part of the post-process workflow of the entire scene in Godot 4.0.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/447/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/445",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/445/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/445/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/445/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/445",
    "id": 560893077,
    "node_id": "MDU6SXNzdWU1NjA4OTMwNzc=",
    "number": 445,
    "title": "Add a built-in terrain system",
    "user": {
      "login": "MostafaMTH",
      "id": 60579260,
      "node_id": "MDQ6VXNlcjYwNTc5MjYw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/60579260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MostafaMTH",
      "html_url": "https://github.com/MostafaMTH",
      "followers_url": "https://api.github.com/users/MostafaMTH/followers",
      "following_url": "https://api.github.com/users/MostafaMTH/following{/other_user}",
      "gists_url": "https://api.github.com/users/MostafaMTH/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MostafaMTH/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MostafaMTH/subscriptions",
      "organizations_url": "https://api.github.com/users/MostafaMTH/orgs",
      "repos_url": "https://api.github.com/users/MostafaMTH/repos",
      "events_url": "https://api.github.com/users/MostafaMTH/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MostafaMTH/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 23,
    "created_at": "2020-02-06T09:45:59Z",
    "updated_at": "2020-09-18T12:21:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**  I am working on mini open World TPP Game. I want it to be built with a built in terrain system so i don't run into compatibility issues and i want features to be added to. It will be very useful for a built in or official terrain system made by the Godot Core Team.\r\n\r\n**Describe the problem or limitation you are having in your project:** I don't have a built in terrain system so i can build my open world game.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** This feature  will help overcome this problem/limitation because it will help game Dev using Godot build open world or mini worlds easier and will enhance the workflow. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:** How should i do that?\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** I dont know how to code in C++\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Yes, because it is needed for a lot of game developers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/445/reactions",
      "total_count": 34,
      "+1": 24,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 10,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/444",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/444/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/444/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/444/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/444",
    "id": 560829098,
    "node_id": "MDU6SXNzdWU1NjA4MjkwOTg=",
    "number": 444,
    "title": "Editable anims path_to_node in AnimationPlayer.",
    "user": {
      "login": "Lexpartizan",
      "id": 48552343,
      "node_id": "MDQ6VXNlcjQ4NTUyMzQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48552343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexpartizan",
      "html_url": "https://github.com/Lexpartizan",
      "followers_url": "https://api.github.com/users/Lexpartizan/followers",
      "following_url": "https://api.github.com/users/Lexpartizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexpartizan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexpartizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexpartizan/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexpartizan/orgs",
      "repos_url": "https://api.github.com/users/Lexpartizan/repos",
      "events_url": "https://api.github.com/users/Lexpartizan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexpartizan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-02-06T07:29:02Z",
    "updated_at": "2020-02-08T17:53:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\njust character with few animations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes when you upload files *.anims in AnimationPlayer, and leads newcomers to a dead end. This usually happens if the Root_Node or the name of the skeleton or the relative location of the skeleton and AnimationPlayer node is changed. You can, of course, re-export from the blender and re-import all the animations again, but this is long and not always possible. And we must take into account that the skeleton in the blender must also match the name of the node of the skeleton in the scene. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis will prevent users from getting stuck using other people's files *.anims. And change the structure of the scene that is present with Animation Player.\r\n\r\nThe only way out (except for export-import) is to manually rename all tracks in Animation Player. But there are too many bones and tracks and it's tedious. These bones have a root, but you can't rename it. The proposal is to make this possible.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nJust make editable this string (may need to automatically go through all the tracks and change their names.)\r\n![make editable](https://user-images.githubusercontent.com/48552343/73914709-de655d00-48ca-11ea-8bd5-f6d7dd2990f7.png)\r\nRed circle - not editable.\r\nGreen circle - editable.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAnims files are not text files, so they cannot be edited manually.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis will increase the user's convenience, help them find a solution, and speed up the workflow, eliminating the need for export-import, which is especially important for working in a team where the animator and programmer are different people.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/444/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/439",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/439/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/439/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/439/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/439",
    "id": 559755229,
    "node_id": "MDU6SXNzdWU1NTk3NTUyMjk=",
    "number": 439,
    "title": "Implement support for using different physics update rates at the same time",
    "user": {
      "login": "2plus2makes5",
      "id": 35235318,
      "node_id": "MDQ6VXNlcjM1MjM1MzE4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/35235318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2plus2makes5",
      "html_url": "https://github.com/2plus2makes5",
      "followers_url": "https://api.github.com/users/2plus2makes5/followers",
      "following_url": "https://api.github.com/users/2plus2makes5/following{/other_user}",
      "gists_url": "https://api.github.com/users/2plus2makes5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2plus2makes5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2plus2makes5/subscriptions",
      "organizations_url": "https://api.github.com/users/2plus2makes5/orgs",
      "repos_url": "https://api.github.com/users/2plus2makes5/repos",
      "events_url": "https://api.github.com/users/2plus2makes5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2plus2makes5/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-02-04T14:27:22Z",
    "updated_at": "2020-08-19T00:23:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5d metroidvania\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe map is big with lots of rooms having lots of physics bodies and areas detecting collisions, emitting signals and other things so it's really heavy, obviously i'm doing optimizations but i think it would make a lot of sense(for me at least) to have different physics update rates for each node.\r\nMy idea is that the physics related to things that need the maximum precision like collisions between characters would be updated every frame(60fps if in the settings we chose 60fps), while all the other things that do not require the maximum precision would be updated less frequently(30fps for example) .\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAreas and bodies that do secondary things would have a lower impact on the game improving performance while character collisions and signals would retain the necessary precision.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI thought of a simple numeric field where we specify after how many physics frames the node skips a frame, 0 or negative would be the default vale meaning that the node would never skip a frame(60fps if in the settings we chose 60fps), 1 would mean skipping 1 frame after 1 one frame(30fps), 2 would mean skipping a frame after 2 frame(40fps) and so on.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know the core implementation of the physics, but i think that when a counter counting how many frames passed from the last skip reaches the chosen value the node would skip the physics frame code and the counter restarts.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI guess we could disable the physics process and/or edit physics layers and masks from code, but doing it for more nodes would be a hassle.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI may be wrong but this seems to me like something to do at core level, i'm not against an add-on though.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/439/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/438",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/438/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/438/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/438/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/438",
    "id": 559689877,
    "node_id": "MDU6SXNzdWU1NTk2ODk4Nzc=",
    "number": 438,
    "title": "Exporting Struct Variables in C#",
    "user": {
      "login": "Kayomn",
      "id": 15730577,
      "node_id": "MDQ6VXNlcjE1NzMwNTc3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15730577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kayomn",
      "html_url": "https://github.com/Kayomn",
      "followers_url": "https://api.github.com/users/Kayomn/followers",
      "following_url": "https://api.github.com/users/Kayomn/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kayomn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kayomn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kayomn/subscriptions",
      "organizations_url": "https://api.github.com/users/Kayomn/orgs",
      "repos_url": "https://api.github.com/users/Kayomn/repos",
      "events_url": "https://api.github.com/users/Kayomn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kayomn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-04T12:33:08Z",
    "updated_at": "2020-07-25T20:37:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nTop-down shooter with a heavily reliance on data-driven design in character composition.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have a `Resource` named `Race` which defines species data about the visual and physical composition about a creature, which is then taken and applied to a generic `RigidBody`-derived `Actor` class.\r\n\r\n```csharp\r\nusing Godot;\r\nusing Godot.Collections;\r\n\r\nnamespace Data\r\n{\r\n\tpublic class Race : Resource\r\n\t{\r\n\t\t[Export]\r\n\t\tpublic string title = \"\";\r\n\r\n\t\t[Export]\r\n\t\tpublic Array<BodyPart> bodyParts = new Array<BodyPart>();\r\n\t}\r\n\r\n\tpublic struct BodyPart\r\n\t{\r\n\t\tpublic Texture texture;\r\n\r\n\t\tpublic int frames;\r\n\t}\r\n}\r\n```\r\n\r\nI am using `struct`s to group data together that is related, in order to avoid managing multiple arrays of parallel values in the editor's inspector UI. In this system, `struct`s are preferred over `class` instances due to their lighter footprint and lack of need for polymorphism.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis approach is not currently supported as Godot cannot export `struct` members into the inspector UI.\r\n\r\nI am blanking on a workaround for this and believe that this is something that the engine should support in some way.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![Screenshot_20200204_122458](https://user-images.githubusercontent.com/15730577/73745223-6a9c4680-474a-11ea-9ed0-239b299765a4.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nA sub-grouping that appears in the editor's inspector view containing the exported properties of the `struct`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis enhancement is purely additive and should not impact existing code in any way.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt involves integration into the engine's editor UI and most likely its Mono / editor bindings.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/438/reactions",
      "total_count": 19,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/437",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/437/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/437/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/437/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/437",
    "id": 559439903,
    "node_id": "MDU6SXNzdWU1NTk0Mzk5MDM=",
    "number": 437,
    "title": "Add option for Dichoptic Contrast Enhancement (DiCE)",
    "user": {
      "login": "RMKD",
      "id": 334410,
      "node_id": "MDQ6VXNlcjMzNDQxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/334410?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RMKD",
      "html_url": "https://github.com/RMKD",
      "followers_url": "https://api.github.com/users/RMKD/followers",
      "following_url": "https://api.github.com/users/RMKD/following{/other_user}",
      "gists_url": "https://api.github.com/users/RMKD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RMKD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RMKD/subscriptions",
      "organizations_url": "https://api.github.com/users/RMKD/orgs",
      "repos_url": "https://api.github.com/users/RMKD/repos",
      "events_url": "https://api.github.com/users/RMKD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RMKD/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862117,
        "node_id": "MDU6TGFiZWwxNjk3ODYyMTE3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:xr",
        "name": "topic:xr",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-02-04T01:56:06Z",
    "updated_at": "2020-06-25T07:37:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nVR development tools\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nEnhancing realism by leveraging nuances of human perception. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nA recent paper examines a technique adjusting contrast differently for each eye to enhance image perceptions (DiCE) https://www.cl.cam.ac.uk/research/rainbow/projects/dice/ \r\n\r\nThey include detailed tests and descriptions of how to balance the tradeoffs between 'contrast gain' and 'binocular rivalry' to maximum effect and released a Unity plugin implementation. \r\n\r\nIt'd be great to see this incorporated as an option in the ARVRCamera.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThe end result would be a checkbox in the ARVRCamera labeled \"Use Dichoptic Contrast Enhancement\" - potentially with options to tune parameters.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSee https://assetstore.unity.com/packages/tools/particles-effects/dice-dichoptic-contrast-enhancement-for-vr-and-stereo-displays-155141#content for reference\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nSuggested implementation as a toggle. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt could potentially be implemented as an add-on, but may involve some core pieces of the camera node or rendering process and would be much more convenient now that more ARVR features are being worked in to core. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/437/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/436",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/436/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/436/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/436/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/436",
    "id": 559338115,
    "node_id": "MDU6SXNzdWU1NTkzMzgxMTU=",
    "number": 436,
    "title": "Highlight SpinBox and EditorSpinSlider up/down arrows on mouse over",
    "user": {
      "login": "Janders1800",
      "id": 27329423,
      "node_id": "MDQ6VXNlcjI3MzI5NDIz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/27329423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Janders1800",
      "html_url": "https://github.com/Janders1800",
      "followers_url": "https://api.github.com/users/Janders1800/followers",
      "following_url": "https://api.github.com/users/Janders1800/following{/other_user}",
      "gists_url": "https://api.github.com/users/Janders1800/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Janders1800/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Janders1800/subscriptions",
      "organizations_url": "https://api.github.com/users/Janders1800/orgs",
      "repos_url": "https://api.github.com/users/Janders1800/repos",
      "events_url": "https://api.github.com/users/Janders1800/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Janders1800/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-03T21:14:47Z",
    "updated_at": "2020-06-20T22:13:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA mobile exploration/puzzle game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWen using the arrows in the control numbers to modify a value, half of the time I click on the wrong arrow, since they are small an close to each other.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nHaving a visual cue of which arrow is going to be affected by the click would solve this problem.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Arrows](https://user-images.githubusercontent.com/27329423/73690491-c5915780-46d0-11ea-8e90-0fe03fc4beba.jpg)\r\nAs you can see I'm using the Accent color in Editor settings->Themes to highlight the arrow when the mouse is over.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nArrows already change colors wen changing themes, It needs the event to change color.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nDon't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core UI feature",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/436/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/435",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/435/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/435/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/435/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/435",
    "id": 559233762,
    "node_id": "MDU6SXNzdWU1NTkyMzM3NjI=",
    "number": 435,
    "title": "Add instance at cursor",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-02-03T17:43:38Z",
    "updated_at": "2020-08-31T11:40:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game with lots of different custom nodes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI instance scenes a lot. Well, this is pretty common, lots of users asked for \"scene tiles\". But I don't even use TileMaps, so I instance nodes manually anyways. I even bound a shortcut to Instance Child Scene to quickly spawn scenes. My problem is that the instances all always created at the origin. You can of course drag and drop from file system at desired position, but due to sheer amount of different scenes and the way my files are organized, this is non-viable. It's much easier for me to press shortcut, fuzzy-search the scene name and press Enter. But then I need to move the node from (0, 0) to positions like (1200, 4600), which wastes my time.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWould be cool if we had an option to instance a scene at the cursor position. Could be with Ctrl + Click or maybe then Selection List could be utilized (like, showing Add Instance on top of node list, dunno). \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/73676104-08910200-46b4-11ea-9f8d-3cf7f7d9a383.png)\r\n![image](https://user-images.githubusercontent.com/2223172/73676117-15adf100-46b4-11ea-82d0-b5a950a3c64b.png)\r\n![image](https://user-images.githubusercontent.com/2223172/73676151-29f1ee00-46b4-11ea-91bf-fe453a058b71.png)\r\n(actually, it would be useful to have there \"Add Child node\" too)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIt's basically Instance Child Scene, but called from 2D viewport and positioning the node at cursor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt _might_ be possible to replicate the node selection dialog and add a CanvasEditor plugin to do that, but I imagine it would be really cumbersome. Although if the quick open dialog was exposed to plugins... Still, that's more than few lines.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot sure how many people have similar problem, but I can't be the only one (_;\\_;_). And it's a probably small QoL thing using already existing functionality in a way impossible for custom plugins.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/435/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/434",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/434/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/434/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/434/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/434",
    "id": 559175380,
    "node_id": "MDU6SXNzdWU1NTkxNzUzODA=",
    "number": 434,
    "title": "Implement ICE / TURN / STUN for forwarding packets through NAT",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-03T15:59:10Z",
    "updated_at": "2020-09-12T22:04:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nUnreleased project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAllow using a ICE server to traverse NAT after UPNP fails.\r\n\r\nI'm not able to work on this, but feel free to take on the challenge.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIf UPNP fails, one still wants to still be able to connect to the network.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nhttps://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n* Extract https://github.com/creytiv/re/tree/master/src/ice \r\n* Make it a Godot Engine core module.\r\n* Openssl needs to be stripped and if HTTPS is required, mbedtls will be need to used.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNetworking is not exposed in script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is a core feature.\r\n\r\n**Other**\r\n\r\n@Faless is able to help. This may be a good Google Summer of Code proposal.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/434/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/432",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/432/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/432/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/432/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/432",
    "id": 558764045,
    "node_id": "MDU6SXNzdWU1NTg3NjQwNDU=",
    "number": 432,
    "title": "Add or document a way to write unit tests for Godot C# projects (e.g. with nunit3)",
    "user": {
      "login": "dsge",
      "id": 5737250,
      "node_id": "MDQ6VXNlcjU3MzcyNTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5737250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsge",
      "html_url": "https://github.com/dsge",
      "followers_url": "https://api.github.com/users/dsge/followers",
      "following_url": "https://api.github.com/users/dsge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsge/subscriptions",
      "organizations_url": "https://api.github.com/users/dsge/orgs",
      "repos_url": "https://api.github.com/users/dsge/repos",
      "events_url": "https://api.github.com/users/dsge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "neikeq",
      "id": 7718100,
      "node_id": "MDQ6VXNlcjc3MTgxMDA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neikeq",
      "html_url": "https://github.com/neikeq",
      "followers_url": "https://api.github.com/users/neikeq/followers",
      "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
      "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
      "organizations_url": "https://api.github.com/users/neikeq/orgs",
      "repos_url": "https://api.github.com/users/neikeq/repos",
      "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neikeq/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "neikeq",
        "id": 7718100,
        "node_id": "MDQ6VXNlcjc3MTgxMDA=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/7718100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/neikeq",
        "html_url": "https://github.com/neikeq",
        "followers_url": "https://api.github.com/users/neikeq/followers",
        "following_url": "https://api.github.com/users/neikeq/following{/other_user}",
        "gists_url": "https://api.github.com/users/neikeq/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/neikeq/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/neikeq/subscriptions",
        "organizations_url": "https://api.github.com/users/neikeq/orgs",
        "repos_url": "https://api.github.com/users/neikeq/repos",
        "events_url": "https://api.github.com/users/neikeq/events{/privacy}",
        "received_events_url": "https://api.github.com/users/neikeq/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-02-02T21:51:27Z",
    "updated_at": "2020-11-12T17:29:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA 3D spaceship/spacebase building game (think Space Engineers)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe more code you write to do custom calculations the more cumbersome it becomes to keep looking back to see if previously written code still functions as expected. Adding more code or refactoring the current code is also much easier if you can build on properly (unit)tested foundations.\r\n\r\nAs an actual example from my current project, I have to calculate how fast my spaceship can accelerate/decelerate given:\r\n- the current power level of the spaceship\r\n- thrusters power consumption\r\n- number of thrusters\r\n- thrusters maximum performance in a given direction\r\n- ...and possibly more factors\r\n\r\nManually testing all of these again and again (and again) is possible, however it's time consuming and inefficient.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nProper unittests can save a lot of time by quickly telling me if my (new or old) code still functions as expected, thus saving me time that can be instead spent on new features.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nWhile having a GUI is nice and all, I think CLI support is the more critical for this particular feature. Running the tests locally and in CI can eliminate further bugs while also allowing for better cooperation on the project with other contibutors.\r\n\r\nWorkflow in case it is possible to run tests directly using `nunit3-console.exe`:\r\n- (build the game dll using Godot editor)\r\n- `./path/to/nunit3-console.exe /path/to/game.dll --where \"<filter for testcases>\" --pause` \r\n    - the `where` option allows to filter for testcases (for when you only want to run specific ones instead of all of them)\r\n    - the `pause` option allows to attach external debuggers to debug test cases\r\n- `nunit3-console.exe` outputs the tests results and returns `0` if all tests passed (for CI support)\r\n\r\nWorkflow in case the tests need to be ran through the Godot editor's CLI:\r\n- (build the game using Godot editor)\r\n- `./path/to/Godot_v3.2-stable_yourplatform --path \"/path/to/game\" --run-nunit3-console --where \"<filter for testcases>\" --pause` \r\n    - the `where` option allows to filter for testcases (for when you only want to run specific ones instead of all of them)\r\n    - the `pause` option allows to attach external debuggers to debug test cases\r\n- `Godot_v3.2-stable_yourplatform` outputs the tests results provided by `nunit3-console.exe` and returns `0` if all tests passed (for CI support)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nUnfortunately I only have limited understanding on Godot's source code or how c# (mono) support is implemented, so I do not know what needs to be implemented or changed to allow this (if anything). If using nunit3 is already possible, then this feature request is actually a request for documentation/examples.\r\n\r\nWhat I do know however is that right now if you try to run your game dll with `nunit3-console.exe` your testcases will actually work **until your testcase reaches the first call to Godot** (more specifically to anything inside `GodotSharp.dll`). You will be bombarded with error messages like this:\r\n```\r\ncant resolve internal call to \"Godot.NativeCalls::godot_icall_Camera_Ctor\" (tested without signature also)\r\n\r\nYour mono runtime and class libraries are out of sync.\r\nThe out of sync library is: /app/.mono/temp/bin/Tools/GodotSharp.dll\r\n\r\nWhen you update one from git you need to update, compile and install\r\nthe other too.\r\nDo not report this as a bug unless you're sure you have updated correctly:\r\nyou probably have a broken mono install.\r\nIf you see other errors or faults after this message they are probably related\r\nand you need to fix your mono install first.\r\n```\r\nWhat this error message actually means (despite what it says) is that the c# function called `Godot.NativeCalls::godot_icall_Camera_Ctor` is defined as an `extern` function in `GodotSharp.dll` but no actual implementation is found anywhere. The same code (same project) does work as expected when exporting/running it through Godot Editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot that I am aware of.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI think at least documentation on this should be included within Godot's official documentation, even if any implementation is outside of the main source code. The reason for this is to avoid confusion by providing **a singular official way for running c# unittests**.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/432/reactions",
      "total_count": 28,
      "+1": 28,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/431",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/431/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/431/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/431/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/431",
    "id": 558716223,
    "node_id": "MDU6SXNzdWU1NTg3MTYyMjM=",
    "number": 431,
    "title": "Objects in 3D or 2D editors should have to be selected before moving",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-02-02T15:56:38Z",
    "updated_at": "2020-06-26T23:58:40Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNon-released project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe user experience of editing 3d objects in the scene is frustrating.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nWhen a developer wants to edit a potted plant in the 3d scene, they will often misclick the ground and move it directly.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nBehaviour before: \r\n\r\n* Wants to edit the shader of a potted plant in the 3d scene\r\n* Misclicks the ground and moves it directly\r\n* Must reset the ground transform\r\n* Clicks on the potted plant\r\n* Edits shader\r\n\r\nBehaviour after:\r\n\r\n* Wants to edit the shader of a potted plant in the 3d scene\r\n* Clicks on the ground will select the ground, not moving the ground\r\n* Clicking on the potted plant model will select not *move* it\r\n* Can now change the shader\r\n\r\nHere are some test cases. Please comment if they're in error.\r\n\r\n* Given any unselected objects, clicking on one will select it and it will not be moved.\r\n* Given selected objects, clicking on any unselected object will select it and it will not be moved.\r\n* Given selected objects, shift clicking on any unselected object will add to selection and it will not be moved.\r\n* Given one or more selected object, with shift clicking on an selected object will cause all objects to be moved.\r\n* Given any objects and one is selected, clicking on the unselected object will cause it to be selected and not moved.\r\n* Given selected objects, clicking on any selected object will move the group.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nhttps://github.com/fire/godot/tree/select_usability \r\n\r\nA buggy prototype.\r\n\r\nNot implemented yet, an editor setting to revert to current behaviour.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, the behaviour of the 3d editor cannot be modified through script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\n3d editing is a core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/431/reactions",
      "total_count": 7,
      "+1": 4,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/430",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/430/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/430/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/430/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/430",
    "id": 558680494,
    "node_id": "MDU6SXNzdWU1NTg2ODA0OTQ=",
    "number": 430,
    "title": "Default the animation import framerate to match the source framerate",
    "user": {
      "login": "jitspoe",
      "id": 7751182,
      "node_id": "MDQ6VXNlcjc3NTExODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7751182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jitspoe",
      "html_url": "https://github.com/jitspoe",
      "followers_url": "https://api.github.com/users/jitspoe/followers",
      "following_url": "https://api.github.com/users/jitspoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jitspoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jitspoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jitspoe/subscriptions",
      "organizations_url": "https://api.github.com/users/jitspoe/orgs",
      "repos_url": "https://api.github.com/users/jitspoe/repos",
      "events_url": "https://api.github.com/users/jitspoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jitspoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-02-02T11:10:31Z",
    "updated_at": "2020-05-06T13:03:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2.5D Platformer (Fist of the Forgotten) using 3D assets and animations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen importing models, I have to make sure I specify the same fps for importing animations as I have in my blender project, otherwise my animations lose frames or have distorted lerps.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nDefaulting the import framerate to use whatever is in the exported file will ensure the keyframes match 1:1 with the original animation and not result in distorted/mushy animation if the import settings don't match exactly (aka: it should just work without having to mess with potentially unknown settings).  I had a number of animation issues when I first started using Godot, and my 60fps animations being converted to 15fps and losing frames was one of them.  If Godot just matched the 60fps framerate by default, it would have saved a lot of time trying to debug why my animations were distorted.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/7751182/73607132-5f95ba80-4580-11ea-99a7-50a518937f52.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI noticed the collada importer had this code:\r\n\r\n```\r\n\t\tif (nm.anim_tracks.size() == 1) {\r\n\t\t\t//use snapshot keys from anim track instead, because this was most likely exported baked\r\n\t\t\tconst Collada::AnimationTrack &at = collada.state.animation_tracks[nm.anim_tracks.front()->get()];\r\n\t\t\tsnapshots.clear();\r\n\t\t\tfor (int i = 0; i < at.keys.size(); i++)\r\n\t\t\t\tsnapshots.push_back(at.keys[i].time);\r\n\t\t}\r\n```\r\n\r\nI'm suggesting this be the default behavior.  Just change the anim_tracks.size() check to `if (!override_fps) {`\r\n\r\nAlso, there are some slight floating point precision epsilons that would need to be added for the frame timing being slightly off.  In the collada importer `Transform interp = c < 0.001 ? src : src.interpolate_with(dst, c);` doesn't account for c being slightly off the other way (0.999...).  Not sure about the other importers.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, since it's a core engine feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImporting is a core feature.  I think this is something that should \"just work\" without having to tinker with input settings or install addons.  Also not sure if add-ons can override this behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/430/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/429",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/429/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/429/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/429/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/429",
    "id": 558589509,
    "node_id": "MDU6SXNzdWU1NTg1ODk1MDk=",
    "number": 429,
    "title": "Allow indexed mode pictures",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-02-01T20:01:57Z",
    "updated_at": "2020-03-28T12:36:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 2D fighting game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to have my character have multiple color pallethes.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nHaving indexed pictures was an older technique that allowed cool tricks like easy recoloring of sprites without heavy performance punishments.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nAllow to import pictures in indexed mode, I know is possible with bmps but not sure if pngs allow index mode, but most 2D tools allow for indexed mode.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nA way to improve the module function, by having a second argument using a .pal pallethe file or other type of color pallethe files some applications like aseprite can easily output.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWould help things like easily replacing an entire sprite set or enemies or even groups of enemies with some nice effects like having them on certain collor pallethes, like kof uses as special effects like fire or poison.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWould be a great improvement over the modulate function, making it more powerful, maybe allow to add some color pallethe to override the previous index mode colors.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/429/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/426",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/426/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/426/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/426/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/426",
    "id": 558288882,
    "node_id": "MDU6SXNzdWU1NTgyODg4ODI=",
    "number": 426,
    "title": "Require a way to detect if an input device supports pressure",
    "user": {
      "login": "SleepProgger",
      "id": 1274039,
      "node_id": "MDQ6VXNlcjEyNzQwMzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1274039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SleepProgger",
      "html_url": "https://github.com/SleepProgger",
      "followers_url": "https://api.github.com/users/SleepProgger/followers",
      "following_url": "https://api.github.com/users/SleepProgger/following{/other_user}",
      "gists_url": "https://api.github.com/users/SleepProgger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SleepProgger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SleepProgger/subscriptions",
      "organizations_url": "https://api.github.com/users/SleepProgger/orgs",
      "repos_url": "https://api.github.com/users/SleepProgger/repos",
      "events_url": "https://api.github.com/users/SleepProgger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SleepProgger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-01-31T18:16:13Z",
    "updated_at": "2020-05-16T22:01:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNA\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere doesn't seem to be a way to detect if the input device used supports `pressure`. In my cases at least pressure with a mouse is set to 0. This alone is not enough to decide if the device supports pressure though as graphic tablets also can produce a MouseMotionEvent with a pressure of 0 (at least with my Huion 420 using wacom driver on linux).\r\nThis mostly happens when stopping to draw (pen up).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWith that information i would be able to support mouse and pens with the same codebase.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nNA\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThe best way i can think of would be to add a `is_pressure_supported` attribute to the MouseMotionEvent.\r\nAn alternative would be to use -1 as default for unsupported devices, but might break existing scripts.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that i am aware of.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAddons can't really patch existing event classes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/426/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/424",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/424/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/424/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/424/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/424",
    "id": 558117339,
    "node_id": "MDU6SXNzdWU1NTgxMTczMzk=",
    "number": 424,
    "title": "Construct a Quat from two Vector3s representing a rotation between them",
    "user": {
      "login": "missed-ledgedash",
      "id": 57775497,
      "node_id": "MDQ6VXNlcjU3Nzc1NDk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/57775497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/missed-ledgedash",
      "html_url": "https://github.com/missed-ledgedash",
      "followers_url": "https://api.github.com/users/missed-ledgedash/followers",
      "following_url": "https://api.github.com/users/missed-ledgedash/following{/other_user}",
      "gists_url": "https://api.github.com/users/missed-ledgedash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/missed-ledgedash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/missed-ledgedash/subscriptions",
      "organizations_url": "https://api.github.com/users/missed-ledgedash/orgs",
      "repos_url": "https://api.github.com/users/missed-ledgedash/repos",
      "events_url": "https://api.github.com/users/missed-ledgedash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/missed-ledgedash/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-31T12:58:20Z",
    "updated_at": "2020-02-07T09:55:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 3D platformer. Running, jumping, falling down bottomless pits for 10 seconds before eventually hitting the death plane, etc. The works.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to apply the player's velocity perpendicularly to the ground's normal vector. In Unity this is easily done by generating a Quaternion with `Quaternion.FromToRotation(fromVector, toVector)` -- where `fromVector` would be `Vector3.up` and `toVector` would be the detected ground normal -- then applying the quaternion to the velocity vector. Godot doesn't have an equivalent to `Quaternion.FromToRotation()`, which is a glaring omission in my eyes.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI somehow spent two days figuring out how to replicate this behavior in GDScript, and while I was successful, I was left wondering why it wasn't just a basic Quat constructor to begin with. It's something I took for granted, and I'd expect that most Unity users feel the same way about it. I couldn't find any good resource for dealing with this in Godot, so having to piece it together myself was annoying.\r\n\r\nAlso, given that a lot of the decent 3D platformer tutorials and projects online are based around Unity, I imagine it's a problem quite a few Godot users would run into as they study those materials. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWell, I don't know how I'd visually represent this, but this is probably what the documentation for it would look like:\r\n![image](https://user-images.githubusercontent.com/57775497/73539714-2aa33e00-4482-11ea-839c-2557dfdd2315.png)\r\n\r\nIn practice it could be used like this:\r\n![image](https://user-images.githubusercontent.com/57775497/73536711-a600f180-447a-11ea-88d9-9d5b13773a43.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThis is the code I ended up with in GDScript:\r\n```\r\nfunc quat_from_to_rotation(from, to):\r\n\tvar axis = from.cross(to).normalized()\r\n\tvar angle = from.angle_to(to)\r\n\tvar quat = Quat(axis, angle)\r\n\treturn quat\r\n```\r\nAll it comes down to is calculating a rotation axis between the two vectors using the cross product (which must be normalized), getting the angle between them, then using the `Quat(axis, angle)` constructor to get the required quaternion.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, as seen above. I still want to push for it being in core though, because despite how simple the code I ended up with is, I think the fact that people have been making 3D platformers in Unity for years without needing to know how it works speaks to how powerful and harmless a crutch it is.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI guess it would be weird to download an add-on for 5 lines of code... That's all I've got.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/424/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/423",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/423/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/423/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/423/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/423",
    "id": 557824856,
    "node_id": "MDU6SXNzdWU1NTc4MjQ4NTY=",
    "number": 423,
    "title": "Implement saving and loading the Input Map from within the Project Settings",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-30T23:45:25Z",
    "updated_at": "2020-11-06T21:55:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI constantly create small minimal projects if I want to try a specific feature/mechanic first before implementing it into my main project, if I discover a bug and need to report it, if I want to help someone out in the community channels. Sometimes one or two a day.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nEverytime I create a new project, I have to set all custom Input map actions again. Any single action usually has 3 to 4 Inputs. In 95% these are the same every time - joypad, keyboard, mouse. It feels like a massive chore and waste of time. I'd much rather rename or delete what I don't need than create everything. \r\nIt would also make it easy to share Input Maps.\r\n\r\nRelated: https://github.com/godotengine/godot/issues/29358\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf I could click \"load\", select a config file or whatever and be done with it, instead of doing the same process over and over again, I would be a much more zen person.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Load-save-inputmap](https://user-images.githubusercontent.com/47016402/73499940-c7ea6d80-43c1-11ea-86d3-380df0deec20.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nClicking on \"Save\" would open a prompt asking to select a place and a name to save the simple text config file. (res:// by default)\r\nClicking on \"Load\" would open a prompt to browse to the place to select the Input Map config file. (res:// by default)\r\nWhen starting a new project, I imagine all I'd have to do is to copy the InputMap config file I saved in my previous project into res:// of my new one and load it, or even simpler have a common place outside of res:// and just load it from there.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used a lot by anyone creating small test projects, teachers, people testing things in the engine ...\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this should be build into the engine as it would speed up workflow quite a lot for people who create a lot of projects.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/423/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/422",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/422/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/422/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/422/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/422",
    "id": 557817782,
    "node_id": "MDU6SXNzdWU1NTc4MTc3ODI=",
    "number": 422,
    "title": "Add a font size setting for the 2D editor ruler",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-30T23:25:12Z",
    "updated_at": "2020-09-12T22:40:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nAny project on bigger screen\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have moved from 1080p to 1440p and while I enjoyed more real estate I am struggling to see certain elements of interface without being able to modify them directly. I can increase editor scaling but this increases size of everything completely negating the benefit of bigger resolution. My biggest problem is with 2D editor and a ruler settings. Those can't be affected directly and I have to either increase editor scaling or struggle with small font. \r\n\r\n![Capture](https://user-images.githubusercontent.com/30668026/73499002-cd8e8600-43b6-11ea-90f6-c7c131f28fcd.PNG)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nAllow for finer fine tuning of each element of editor so user can choose which elements to increase in size and which not.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nAs above just bigger :)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nNo idea how it would work. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nAll the time by people using editor on bigger screens or people with visual impairment it's a big accessibility feature. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a part of editor. \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/422/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/421",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/421/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/421/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/421/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/421",
    "id": 557782647,
    "node_id": "MDU6SXNzdWU1NTc3ODI2NDc=",
    "number": 421,
    "title": "Add a text animation tool to complement RichTextEffect",
    "user": {
      "login": "shafnaz",
      "id": 37254287,
      "node_id": "MDQ6VXNlcjM3MjU0Mjg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/37254287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shafnaz",
      "html_url": "https://github.com/shafnaz",
      "followers_url": "https://api.github.com/users/shafnaz/followers",
      "following_url": "https://api.github.com/users/shafnaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/shafnaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shafnaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shafnaz/subscriptions",
      "organizations_url": "https://api.github.com/users/shafnaz/orgs",
      "repos_url": "https://api.github.com/users/shafnaz/repos",
      "events_url": "https://api.github.com/users/shafnaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shafnaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-01-30T22:01:57Z",
    "updated_at": "2020-06-09T20:11:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWorking on a 2D game that has messages that pop up from time to time. Almost all game implements text.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs a professional motion designer and a beginner coder, it is quite difficult doing text animation using BBCode inside GODOT's richtext nodes. The documentation for GODOT 3.2 concerning the \"RichTextEffect\" is limited and difficult to work with. It requires quite good math skills.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWith easier control over characters of a text, it will be much easier for me and other professional animators/motion designers to create the desired effect. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nThe idea is to have the tools to build basic text animations\r\n![1](https://user-images.githubusercontent.com/37254287/73492589-be481200-438f-11ea-874c-84f90f75d775.gif)\r\n\r\n![2](https://user-images.githubusercontent.com/37254287/73492598-c56f2000-438f-11ea-9e7b-af8ad55f6f98.gif)\r\n\r\n\r\nThe node can contain any number of layers, all sitting in an array. Depending on how many states\\modifications the text will go through using sliders: \"range select\".\r\n![4](https://user-images.githubusercontent.com/37254287/73491496-89d35680-438d-11ea-935e-bfd7d9fa377f.png)\r\n\r\nThe modifiers are seen as the layers. \"Global Position of modifiers\" is what it could like in the editor, the layers are barely visible behind the animation(just to have a visual of what that modifier/layer is doing to the text). so you would animate the slider of each layer sequentially to get that effect.\r\nAdding tween easing(LINEAR, BOUNCE, BACK, ELASTIC, etc) could help avoid too many layers.\r\n![3](https://user-images.githubusercontent.com/37254287/73492660-e9326600-438f-11ea-88ce-66ebb23cfdfe.gif)\r\n\r\n\r\nHere you could make adjustment on how this layer modifies your text, thus you can add the \"AnimationPlayer\" Node and keyframe the sliders.\r\n![5](https://user-images.githubusercontent.com/37254287/73492946-7d043200-4390-11ea-94f3-850fec8cebe1.gif)\r\n\r\nRandomize feature!\r\n![6](https://user-images.githubusercontent.com/37254287/73493143-e8e69a80-4390-11ea-8a16-36567b6b3cfb.gif)\r\n\r\n\r\n\r\nNow dealing with multiple layers. No need to animate from the original text position, just animate from the previous layer text position.\r\n![7](https://user-images.githubusercontent.com/37254287/73493113-dcfad880-4390-11ea-99bd-fe89a52f0818.gif)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nCurrently my brain does not have the sufficient weight to comprehend this info in code format.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUp to a limited degree. I could generate new nodes each representing a substring, however, getting the data per character, such as position is not possible. I would have to use \"Tool\" mode to see if all my hundreds of node characters are positioned correctly, this would be time consuming.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHave it as core so that you can avoid the clutter of extra files in your project. The ability to save it as \".tres\" share with anyone wanting to implement cool text animations or titles in their projects, would provide quite useful among GODOT users in presentation, gaming, or any interactive media.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/421/reactions",
      "total_count": 13,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 1,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/420",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/420/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/420/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/420/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/420",
    "id": 557430558,
    "node_id": "MDU6SXNzdWU1NTc0MzA1NTg=",
    "number": 420,
    "title": "Add a shortcut for copying property paths in the inspector",
    "user": {
      "login": "SlothDevLlama",
      "id": 1180429,
      "node_id": "MDQ6VXNlcjExODA0Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1180429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SlothDevLlama",
      "html_url": "https://github.com/SlothDevLlama",
      "followers_url": "https://api.github.com/users/SlothDevLlama/followers",
      "following_url": "https://api.github.com/users/SlothDevLlama/following{/other_user}",
      "gists_url": "https://api.github.com/users/SlothDevLlama/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SlothDevLlama/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SlothDevLlama/subscriptions",
      "organizations_url": "https://api.github.com/users/SlothDevLlama/orgs",
      "repos_url": "https://api.github.com/users/SlothDevLlama/repos",
      "events_url": "https://api.github.com/users/SlothDevLlama/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SlothDevLlama/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-30T11:25:07Z",
    "updated_at": "2020-09-28T13:28:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNo particular one, but it happens for every project which heavily relies on Shaders / AnimationTrees I've been working on.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen having a complex AnimationTree with many `Blend / Add / TimeScale` related and nested parameters will automatically be exposed to the inspector. \r\n\r\n![image](https://user-images.githubusercontent.com/1180429/73444626-3fd07d80-4359-11ea-8520-6c3c09e349bf.png)\r\n\r\nProblem / Comfort issue at this point: depending on the complexity of the AnimationTree setup it sometimes gets quite annoying when params need to be configured via code, since you constantly have to switch between the parameter tooltip and the actual script in order to get the params right. (when the param gets longer)\r\n\r\n`tree[\"parameters/BlendState2D/1/TimeScale/scale] = x`\r\n\r\n(even now it required me to switch between the github preview and my markdown)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nAn additional feature would be a small copy icon: <img src=\"https://user-images.githubusercontent.com/1180429/73444852-c08f7980-4359-11ea-8287-3d28370cb7cc.png\" width=\"16px\" height=\"16px\"/>\r\nwhich would copy the parameters string of the property to the clipboard.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nIt's not as beautifully done, but actually that's an easy one:\r\n![image](https://user-images.githubusercontent.com/1180429/73445562-3fd17d00-435b-11ea-860c-0353da347520.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSorry, unfortunately I'm still not deeply involved in the editor development.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nCurrently it can be done manually only (as far as I know)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt enhances the comfort of using the editor by a lot, while scripting for objects which heavily use direct change and access of those parameters.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/420/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/419",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/419/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/419/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/419/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/419",
    "id": 557390041,
    "node_id": "MDU6SXNzdWU1NTczOTAwNDE=",
    "number": 419,
    "title": "Add \"Copy\" and \"Cut\" in filesystem dock",
    "user": {
      "login": "ShlomiRex",
      "id": 17744127,
      "node_id": "MDQ6VXNlcjE3NzQ0MTI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17744127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShlomiRex",
      "html_url": "https://github.com/ShlomiRex",
      "followers_url": "https://api.github.com/users/ShlomiRex/followers",
      "following_url": "https://api.github.com/users/ShlomiRex/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShlomiRex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShlomiRex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShlomiRex/subscriptions",
      "organizations_url": "https://api.github.com/users/ShlomiRex/orgs",
      "repos_url": "https://api.github.com/users/ShlomiRex/repos",
      "events_url": "https://api.github.com/users/ShlomiRex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShlomiRex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-30T10:10:47Z",
    "updated_at": "2020-01-31T01:24:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nCopy/cut file in the filesystem dock.\r\nAlso, no-one uses 'Move to' I think it's time to replace it by something else, like Copy or Cut.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI think its self explanatory.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nCopy files inside the editor instead of OS's filesystem\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nhttps://imgur.com/a/jB3rT7o\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI'm still working on it\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think so\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's the built-in editor ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/419/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/416",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/416/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/416/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/416/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/416",
    "id": 557118675,
    "node_id": "MDU6SXNzdWU1NTcxMTg2NzU=",
    "number": 416,
    "title": "Fold down comments (like functions)",
    "user": {
      "login": "MrMrBlackDragon",
      "id": 46326301,
      "node_id": "MDQ6VXNlcjQ2MzI2MzAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46326301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrMrBlackDragon",
      "html_url": "https://github.com/MrMrBlackDragon",
      "followers_url": "https://api.github.com/users/MrMrBlackDragon/followers",
      "following_url": "https://api.github.com/users/MrMrBlackDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrMrBlackDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrMrBlackDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrMrBlackDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/MrMrBlackDragon/orgs",
      "repos_url": "https://api.github.com/users/MrMrBlackDragon/repos",
      "events_url": "https://api.github.com/users/MrMrBlackDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrMrBlackDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-29T21:13:11Z",
    "updated_at": "2020-01-30T23:42:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nNearly any project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen have a comment going over multiple lines it interrupts the code reading flow\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf it's possible to fold down like a comment like a function, it would be easier to scroll trough the code.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSo there is a comment to explain your function like this:\r\n![grafik](https://user-images.githubusercontent.com/46326301/73397022-e594d580-42e2-11ea-80e8-76d772f4494b.png)\r\nand fold it down like this:\r\n![grafik](https://user-images.githubusercontent.com/46326301/73397394-bc287980-42e3-11ea-8089-a0d3b93a80fa.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nn.a\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSomething like this would be possible:\r\n![grafik](https://user-images.githubusercontent.com/46326301/73397528-06115f80-42e4-11ea-92ba-1e6e71d00648.png)\r\nresulting in:\r\n![grafik](https://user-images.githubusercontent.com/46326301/73397557-16c1d580-42e4-11ea-97bd-bcfa21546df3.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIs see no way how this could be implemented as an asset. Furthermore it's usefull for every project \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/416/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/414",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/414/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/414/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/414/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/414",
    "id": 556781306,
    "node_id": "MDU6SXNzdWU1NTY3ODEzMDY=",
    "number": 414,
    "title": "As a temporary step between now and 4.0 add code editor splitting",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-29T10:49:22Z",
    "updated_at": "2020-01-29T23:04:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nApplicable in any project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nAs described in https://github.com/godotengine/godot-proposals/issues/28 Editor can get cramped at times and requires a lot of clicking suggested 4.0 undocable windows would be a huge improvement. While waiting for 4.0 intermediate step could be just allowing for script editor split that should be significantly easier to code and would just require couple of control nodes in a right places to support it. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nMy proposed feature is to do this the way atom does it. By dragging code name we could split text editor into 2 and edit 2 or more scripts next to each other.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nhttps://streamable.com/yyaqq\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nIt would require adding couple of instances of `SplitContainers` in appropriate places and it could be done fairly easily. For example we could right click on script name and select something like \"Add Split view\" and it would open 2nd code window next to a main code window in editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWould be used a lot can be worked around by opening multiple Godot projects but it's not ideal and can cause untended behaviour.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a part of core behaviour of engine and great User Experience enhancement\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/414/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/413",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/413/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/413/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/413/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/413",
    "id": 556581737,
    "node_id": "MDU6SXNzdWU1NTY1ODE3Mzc=",
    "number": 413,
    "title": "UI Relative Transformations",
    "user": {
      "login": "gmarais",
      "id": 6719485,
      "node_id": "MDQ6VXNlcjY3MTk0ODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6719485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmarais",
      "html_url": "https://github.com/gmarais",
      "followers_url": "https://api.github.com/users/gmarais/followers",
      "following_url": "https://api.github.com/users/gmarais/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmarais/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmarais/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmarais/subscriptions",
      "organizations_url": "https://api.github.com/users/gmarais/orgs",
      "repos_url": "https://api.github.com/users/gmarais/repos",
      "events_url": "https://api.github.com/users/gmarais/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmarais/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-29T01:14:56Z",
    "updated_at": "2020-01-29T19:07:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### **Describe the project you are working on:**\r\n\r\nI am making a simple mobile game where half of my UI is placed at the bottom right of the screen and mimics in the way it is disposed the one at the top left of the screen. But instead of growing from the top left it grows from the bottom right.\r\n\r\nThink of a top down card game where both players have their decks on their right and the cards played are positioned in front of them from their right to their left on two or more rows and all cards are facing the bottom player so that he can read and look at them.\r\n\r\nThe reference points change but the way the cards should be placed from each reference point is pretty much the same.\r\n\r\nThus one may assume the steps to make this UI to be the same for the top as it is for the bottom.\r\n\r\n### **Describe the problem or limitation you are having in your project:**\r\n\r\nAs it stands right now in godot, UI nodes are positioned relative to the top left corner of their parent position meaning (0,0) is the top left corner of the ui node.\r\n\r\nWhile this is not a problem when you place your elements from top to bottom and left to right this process becomes much more troublesome, when you want to do the same from the bottom-up and/or from the right to the left especially if you want your nodes to freely grow and shrink or resize in these directions.\r\n\r\nOn top of that many problems also arise with nodes like gridcontainers that always fill left to right and then top to bottom.\r\nIf you place the same node on your bottom right corner and want it to grow from bottom to top and right to left you are in trouble.\r\nHBox also has a weird behavior although this node does allow you to specify a direction to fill, childs are sorted backward meaning first child will be on the left even if it fills from the right etc...\r\nAlso the grow direction  only applies to the min size not the size of the object.\r\n\r\nSay I dont know how many elements will be in that UI node I just placed on the bottom right of my screen and/or I dont know the height or the width it will have after more elements are added to my containers since it is supposed to behave and grow in size with its content this becomes even more problematic.\r\n\r\nAlso in order to precisely place my objects in such a UI node I have to always place them from the top left position of the parent in the inspector I could place them with the margins but since I cant lock the size parameter if I change the margins to place them using that the size will be changed and not the position.\r\n\r\nOverall a lot of things are there but they are not working as well as maybe they could be relative to one another allowing for more flexibility while being more intuitive when the user decides to change his reference point.\r\n\r\n### **Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nHere is what I suggest which I think would make it work more evenly no matter what orientation and place you want to build your ui from in your screen:\r\n\r\nChanges in the inspector:\r\n\r\n-The position of the ui node rectangle to become relative to it's pivot point.\r\n-The pivot point to be defined relatively to the ui node boundaries (0.5, 0.5) being the center.\r\nA pivot defined as (0, 0) could be the top left corner of the node is the pivot point, and (1, 1) would be the bottom right corner.\r\n-The position of the pivot to be relative to the ui node anchors area center.\r\n-The growing direction can be removed since it would just be defined by the position of the pivot in relation to the ui node rectangle. (If my pivot is at the center it grows in all directions if it is off centered it grows so that the pivot keeps its position within my ui node.)\r\n\r\nWhat this means/allows:\r\n\r\nThe pivot therefore determines how size and scale affect the object making it very easy to have an object scale up and down in an animation for example while staying properly centered or off centered.\r\n\r\nThe position of my ui node would then just reflect the distance of my pivot from the anchor's center point.\r\n(if my left anchor is 0.5 and my right is 1 then my center point is at 0.75 of my width etc)\r\n\r\nThis would allow my objects to be placed from the bottom right exactly the same way we do from the top left.\r\n\r\nThat way at (0,0) my object is on the bottom right and I can start positioning my objects relatively to that corner instead which will be fixed unlike the top left corner that may vary with the size of my objects.\r\n\r\nThe idea here is that the anchors are the only variable linked to my parent node all is relative to them from there making it very easy to move the ui around in a responsive and scalable manner it just is a manner of changing the pivots and anchors and all works the same again.\r\n\r\nThis feature would also make very handy the possibility to lock properties to always know when the user makes a change one another property what will be affected and changed along and what will be kept.\r\n\r\n### **Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis image shows how each variable represents the position of the node content relative to its pivot and anchors in a more intuitive and scallable way since what will work for aligning your objects from the top left should work exactly the same from the bottom right without having to script your way through the trouble.\r\n\r\n<img src=\"https://svgshare.com/i/HbG.svg\" />\r\n\r\n### **Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nAdd relative variables to the ui node and make anychange to these relative variables affect the position rotation size and scale of the object in the appropriate manner while keeping the locked parameters values the same if too many parameters are locked for the change to be possible just ignore the change.\r\nExpose these relative parameters to the inspector while keeping the driven variables grey or invisible.\r\n\r\n### **If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMaking these variables relative to each other and react in such a way in the editor would require both a plugin for the inspector and a plugin for each nodes just to make something more flexible and more intuitive.\r\n\r\nEdit: That being said the way I usually handle these problems is by rotating my containers then rotating the elements they contain and fixing issues as I go from there. I am affraid there are no clean and scallable way yet to deal with these issues hence the present suggestion. :-)\r\n\r\n### **Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature's main goal is to make the engine more flexible and intuitive, while it should not change drastically the core underlying mechanics it does at least change the way we interact with these variables from the editor but also from scripts in a very systematic manner.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/413/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/412",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/412/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/412/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/412/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/412",
    "id": 556554412,
    "node_id": "MDU6SXNzdWU1NTY1NTQ0MTI=",
    "number": 412,
    "title": "Do NOT clean the data in MultiMesh when changing instance_count",
    "user": {
      "login": "SleepProgger",
      "id": 1274039,
      "node_id": "MDQ6VXNlcjEyNzQwMzk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1274039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SleepProgger",
      "html_url": "https://github.com/SleepProgger",
      "followers_url": "https://api.github.com/users/SleepProgger/followers",
      "following_url": "https://api.github.com/users/SleepProgger/following{/other_user}",
      "gists_url": "https://api.github.com/users/SleepProgger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SleepProgger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SleepProgger/subscriptions",
      "organizations_url": "https://api.github.com/users/SleepProgger/orgs",
      "repos_url": "https://api.github.com/users/SleepProgger/repos",
      "events_url": "https://api.github.com/users/SleepProgger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SleepProgger/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-28T23:40:40Z",
    "updated_at": "2020-02-17T02:08:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGame spawning multiple thousand of entities which will stay for a long time.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently when using MultiMesh one has to provide the maximum amount of instances via `instance_count` which potential leads to moving a lot of unused data to the GPU.\r\nIf the `instance_count` is changed all old data is lost and there is no sensible way to recreate the old data as there is no `get_as_bulk_array` function.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf there would be some way to enlarge the MultiMesh buffer without loosing the old data i could enlarge the buffer in steps (say: 1k).\r\nSo every time i want to add a new instance check if `visible_instance_count < instance_count - 1` and if it is enlarge the buffer by 1k.\r\nThis would keep the overhead at bay and would prevent me from enforcing some arbitary limit of instance.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI see two different possibilities to implement this:\r\n- 1. Add a enlarge function which will do the same as setting `instance_count`  but also provides an optional parameter `keep_old_data=false`. When `keep_old_data` is true, copy over the old data to the new buffer at offset == 0. If the new size is smaller as the old one only copy the first `new_size` items from the old data.\r\n- 2. Add an `get_as_bulk_array` function and add an optional parameter `offset` to `set_as_bulk_array` or add a `set_range_from_bulk_array`. This way user could copy over the old data by their own.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nExcept limiting myself to an arbitrary amount of instance the only way i can think of is to save all data  additionally in a script and use `set_as_bulk_array`.\r\nBut since that function doesn't accept a offset parameter one would then need to also pad the extra array to `instance_count`\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts a trivial change (in fact i would be willing to send a PR for this), doesn't break anything and most of all: makes sense.\r\nI think the current behavior is not sensible for the normal use cases (why would i ever enlarge my multimesh at runtime if that means loosing all the data ?), but i realize changing this might break existing code, thus. my non breaking proposition.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/412/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/411",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/411/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/411/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/411/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/411",
    "id": 555936157,
    "node_id": "MDU6SXNzdWU1NTU5MzYxNTc=",
    "number": 411,
    "title": "Add an height fog orientation property to Environment",
    "user": {
      "login": "Toshiwoz",
      "id": 21297356,
      "node_id": "MDQ6VXNlcjIxMjk3MzU2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/21297356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Toshiwoz",
      "html_url": "https://github.com/Toshiwoz",
      "followers_url": "https://api.github.com/users/Toshiwoz/followers",
      "following_url": "https://api.github.com/users/Toshiwoz/following{/other_user}",
      "gists_url": "https://api.github.com/users/Toshiwoz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Toshiwoz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Toshiwoz/subscriptions",
      "organizations_url": "https://api.github.com/users/Toshiwoz/orgs",
      "repos_url": "https://api.github.com/users/Toshiwoz/repos",
      "events_url": "https://api.github.com/users/Toshiwoz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Toshiwoz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-28T01:46:18Z",
    "updated_at": "2020-09-13T23:33:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nhttps://digitalki.itch.io/mars/\r\nA 3D mobile game, where you colonize Mars. It has a view where you see from a classical RTS view your units, bases, etc.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs it is a game for mobile I'm using GLES2. And I wanted to have a fog effect similar to the game \"surviving mars\", where the fog is both height and depth.\r\n![image](https://user-images.githubusercontent.com/21297356/73225340-564cbe00-413a-11ea-87db-3e501a15f9db.png)\r\nAnd in particular something like this:\r\n![image](https://user-images.githubusercontent.com/21297356/73226240-55695b80-413d-11ea-8e37-74c84f7b1329.png)\r\nThe problem in my case is that the planet is rendered on a sphere, so the axis where the fog should grow is not always the Y axis. As it is possible to orient the sky vector with the procedural sky it would be nice to be able to do the same with the height fog.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe feature I'm requesting is the same feature procedural sky have, a vector that determines the sky orientation. Being able to change it with GDScript, I'll be able to load the part of the planet I want with the correct height fog orientation.  Having a cheap, but cool effect on my game.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/21297356/73227876-f6a6e080-4142-11ea-965b-b214fb9219af.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have no idea how to do it with GDScript.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, I wish it would be possible.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think it can be applied in many other kind of games, and would be part of WorldEnvironment.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/411/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/409",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/409/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/409/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/409/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/409",
    "id": 555326529,
    "node_id": "MDU6SXNzdWU1NTUzMjY1Mjk=",
    "number": 409,
    "title": "Include 2D collision impulse in contact monitoring",
    "user": {
      "login": "briansemrau",
      "id": 6376721,
      "node_id": "MDQ6VXNlcjYzNzY3MjE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6376721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/briansemrau",
      "html_url": "https://github.com/briansemrau",
      "followers_url": "https://api.github.com/users/briansemrau/followers",
      "following_url": "https://api.github.com/users/briansemrau/following{/other_user}",
      "gists_url": "https://api.github.com/users/briansemrau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/briansemrau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/briansemrau/subscriptions",
      "organizations_url": "https://api.github.com/users/briansemrau/orgs",
      "repos_url": "https://api.github.com/users/briansemrau/repos",
      "events_url": "https://api.github.com/users/briansemrau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/briansemrau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-27T02:09:55Z",
    "updated_at": "2020-01-27T11:59:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D physics-based asteroids. Player avoids asteroids and uses incoming asteroids to collide with and destroy enemy spaceships in pursuit.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRigidBody2D contact monitoring does not provide the collision impulse, which is needed to calculate player/enemy damage as a result of asteroid collisions.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nUsing this feature, I could use RigidBody2D contact monitoring within `_integrate_forces` to access collision impulse and apply damage to characters.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI presume diagrams not needed?\r\nEssentially identical to Unity's [Collision.impulse](https://docs.unity3d.com/ScriptReference/Collision-impulse.html).\r\n\r\nExample of usage:\r\n```\r\nfunc _integrate_forces(state: Physics2DDirectBodyState):\r\n\tfor idx in range(state.get_contact_count()):\r\n\t\tvar impulse: Vector2 = state.get_contact_impulse(idx)\r\n\t\t# TODO: damage(impulse.length())\r\n```\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nContacts are reported to the bodies in [BodyPair2D setup](https://github.com/godotengine/godot/blob/a7f49ac9a107820a62677ee3fb49d38982a25165/servers/physics_2d/body_pair_2d_sw.cpp#L397), and the impulse is calculated and applied during [the constraint solve](https://github.com/godotengine/godot/blob/a7f49ac9a107820a62677ee3fb49d38982a25165/servers/physics_2d/body_pair_2d_sw.cpp#L506).\r\nSolution 1: I think that recording the contact during the solve phase rather than the setup phase would allow recording the impulse used to solve the collision\r\nSolution 2: Add an impulse calculation to the setup phase so it can be recorded with the rest of the contact information without risking accidentally breaking contact monitor behavior.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe only way to work around this that I could figure out is to use KinematicBody2D and rewrite collision handling. Recalculating impulse using RigidBody2D is not possible because contact monitoring within `_integrate_forces` with Physics2DDirectBodyState does not provide all necessary properties of the colliding body.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a slight modification to the physics engine that simply reveals values already being calculated.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/409/reactions",
      "total_count": 15,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/408",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/408/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/408/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/408/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/408",
    "id": 555233650,
    "node_id": "MDU6SXNzdWU1NTUyMzM2NTA=",
    "number": 408,
    "title": "Show documentation when using autocompletion in the script editor",
    "user": {
      "login": "ShlomiRex",
      "id": 17744127,
      "node_id": "MDQ6VXNlcjE3NzQ0MTI3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/17744127?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShlomiRex",
      "html_url": "https://github.com/ShlomiRex",
      "followers_url": "https://api.github.com/users/ShlomiRex/followers",
      "following_url": "https://api.github.com/users/ShlomiRex/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShlomiRex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShlomiRex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShlomiRex/subscriptions",
      "organizations_url": "https://api.github.com/users/ShlomiRex/orgs",
      "repos_url": "https://api.github.com/users/ShlomiRex/repos",
      "events_url": "https://api.github.com/users/ShlomiRex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShlomiRex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-26T14:09:32Z",
    "updated_at": "2020-09-26T15:30:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:**\r\nRetreiving the doc of the functions when auto complete.\r\n\r\nQ: What is auto complete refer to?\r\nA: In Code Editor (script editor, class referance) when you type \"self.\" after the dot you will see panel showing suggested auto complete entries, such as \"transform\", \"get_node(\" and more.\r\n\r\nQ: What is the doc refering to?\r\nA: If lets say \"self.\" contains entry called \"transform\" (member of Sparial class) then the doc of transform will be \"Local space Transform of this node, with respect to the parent node.\". (Actual doc of godot api for the Sparial class for 'transform' member).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI didn't find any referance to getting a documentation given anything. It doesn't handle it.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAdding to 'gdbscript_editor.cpp' a function that takes in entry of auto complete and returns doc.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nhttps://imgur.com/a/fW2bmho\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI am not sure, its my first time contributing to anything.\r\nCreate datatype (in typedef.cpp?) of GDDoc that contains: path of doc (doc/xxx), string that is the code we want to auto complete, string that is the auto complete code\r\nOr better yet a single function that translates : by given: code to auto complete and the current auto complete suggestion (that the user selected in the panel) return Path to the doc.\r\nAnother function: By given path of doc, return the 1-5 first lines (the short documentation, description) of the doc. Don't return ALL the doc, with the tables, only a few lines.\r\nWe can extend this by returning the whole doc, then display the whole doc in another panel.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often, but it is not easy.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, because it is the built in Code Editor of Godot and is core functionality\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/408/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/407",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/407/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/407/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/407/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/407",
    "id": 555179371,
    "node_id": "MDU6SXNzdWU1NTUxNzkzNzE=",
    "number": 407,
    "title": "Allow high resolution art to be downscaled example: @2x = 0.5 scale.  Useful for pixel art.",
    "user": {
      "login": "hamoom",
      "id": 823520,
      "node_id": "MDQ6VXNlcjgyMzUyMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/823520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hamoom",
      "html_url": "https://github.com/hamoom",
      "followers_url": "https://api.github.com/users/hamoom/followers",
      "following_url": "https://api.github.com/users/hamoom/following{/other_user}",
      "gists_url": "https://api.github.com/users/hamoom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hamoom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hamoom/subscriptions",
      "organizations_url": "https://api.github.com/users/hamoom/orgs",
      "repos_url": "https://api.github.com/users/hamoom/repos",
      "events_url": "https://api.github.com/users/hamoom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hamoom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-01-26T05:15:16Z",
    "updated_at": "2020-01-26T11:31:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn Action RPG using pixel art\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to move and scale the camera using floating values without the sprites being distorted.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIn other engines I solved this problem by importing my pixel art at 3x or 4x the normal size with the filter on.. then it allowed me to downscale the art to the original desired size.  Since I was now using high resolution art without filtering my edges would be preserved despite using floating point values.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n<img width=\"291\" alt=\"proposal\" src=\"https://user-images.githubusercontent.com/823520/73130946-fe397e80-3fb6-11ea-8ad3-5860185156f3.png\">\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nYou import a larger texture than you intend to use.. if its a 2x texture you'd set the control (look above) to 0.5 and the texture would then be able to scale properly without distortion.  This is very useful for pixel art\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really.  I've seen very complicated solutions involving adding a shader to each sprite that still aren't very effective.  Other people recommending very complicated viewport math.  This feature will be used often because people want to scale pixel art without distortion.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPixel art games are extremely popular and scaling / rotation / panning sprites causes distortion as is.  If you can import higher quality versions of them and scale down it solves all those problems.  Look at the game I was attempting to port to godot as a reference to how well this works:\r\nhttps://www.youtube.com/watch?v=HIARx0kW7XM",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/407/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/406",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/406/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/406/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/406/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/406",
    "id": 555087848,
    "node_id": "MDU6SXNzdWU1NTUwODc4NDg=",
    "number": 406,
    "title": "When _load() fails, provide details to where a missing resource was requested",
    "user": {
      "login": "rolbr",
      "id": 5709376,
      "node_id": "MDQ6VXNlcjU3MDkzNzY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5709376?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolbr",
      "html_url": "https://github.com/rolbr",
      "followers_url": "https://api.github.com/users/rolbr/followers",
      "following_url": "https://api.github.com/users/rolbr/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolbr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolbr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolbr/subscriptions",
      "organizations_url": "https://api.github.com/users/rolbr/orgs",
      "repos_url": "https://api.github.com/users/rolbr/repos",
      "events_url": "https://api.github.com/users/rolbr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolbr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-01-25T13:51:21Z",
    "updated_at": "2020-06-03T08:59:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nFollowing the tutorial: http://kidscancode.org/godot_recipes/games/circle_jump/\r\nThis proposal is universal and not tied to that project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAfter changing the font used in the project, I forgot to update a node on a scene to use that new font. When running the project, the debug console prints:\r\n```\r\nE 0:00:01.060   _load: Cannot open font file 'res://assets/fonts/Xolonium-Regular.ttf'.\r\n  <C++-Fehler>  Method/Function Failed, returning: ERR_CANT_OPEN\r\n  <C++-Quellcode>scene/resources/dynamic_font.cpp:153 @ _load()\r\n```\r\nI could not find the location where that font was requested within Godot Editor. \r\n- `Project > Tools > Manage unused Resources` did not list the missing font\r\n- In the script editor, `Search > Search in Files` did not find the string `xolonium` with the following settings:\r\n    - Search: ☐ match whole words ☐ case sensitive\r\n    - Directory: res://\r\n    - Filter: ☑ gd ☑ shader\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nImplementing this enhancement would allow users to directly identify the location of the missing resource and resolve the issue. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nn/a\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n- **absolutely**: The error message should include the file name and location where the failed request was made, in my case:\r\n```\r\nBaseScreen.tscn\r\n[sub_resource type=\"DynamicFontData\" id=1]\r\nfont_path = \"res://assets/fonts/Xolonium-Regular.ttf\"\r\n```\r\n- **possibly**: searching for the missing resource should yield results\r\n- **maybe**: list the error in `Project > Tools > Manage unused Resources`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWorkaround: use `Find in Files` in Visual Studio Code or similar.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIm under the impression this error is thrown by core, as such it should be handled in core as well.\r\n\r\n\r\nThank you!",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/406/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/405",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/405/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/405/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/405/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/405",
    "id": 554897195,
    "node_id": "MDU6SXNzdWU1NTQ4OTcxOTU=",
    "number": 405,
    "title": "Make a Basic AI flowchart FSM Visual Editor",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-24T18:51:43Z",
    "updated_at": "2020-02-23T16:06:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAn action game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to write AI that isn't just clutering scripts after scripts.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would be nice to have a sort of visual editor, similar to the visual code editor godot has, but for FSM and related to coding the behaviour of some enemy AI.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA visual editor similar to the visual language godot has but for dealing a basic FSM with basic AI functions, like pathfinding, fuzzy logic, behaviour trees, basic behaviours like flock, chase, group around a point, group RTS formations to avoid clustering of enemies, even basic stuff like basic emotional moods.\r\nSo, the idea is you create a basic circular FSM with a start idle node that the other AI nodes circles back in the end, and he branches to other AI states/nodes based on basic input or conditions that can trigger other nodes.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI was thinking something similar to unity animator FSM, but for AI.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would optimize the creation of AI, using common behaviours like pathfinding or RTS flocking behaviours.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAll games need a basic AI, an AI editor would be something I don't think other engines has by default.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/405/reactions",
      "total_count": 12,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/403",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/403/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/403/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/403/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/403",
    "id": 553789949,
    "node_id": "MDU6SXNzdWU1NTM3ODk5NDk=",
    "number": 403,
    "title": "Add Array/Dictionary casting operators to GodotSharp",
    "user": {
      "login": "Spartan322",
      "id": 4315446,
      "node_id": "MDQ6VXNlcjQzMTU0NDY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4315446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spartan322",
      "html_url": "https://github.com/Spartan322",
      "followers_url": "https://api.github.com/users/Spartan322/followers",
      "following_url": "https://api.github.com/users/Spartan322/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spartan322/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spartan322/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spartan322/subscriptions",
      "organizations_url": "https://api.github.com/users/Spartan322/orgs",
      "repos_url": "https://api.github.com/users/Spartan322/repos",
      "events_url": "https://api.github.com/users/Spartan322/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spartan322/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-22T20:59:29Z",
    "updated_at": "2020-01-23T21:27:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:** GodotSharp's non-generic Array and Dictionary classes don't implement any casting operators to native C# array, common System classes, or to the generic versions, (leaving a one way explicit conversion from the generic to the non-generic) making all conversions extremely verbose for little reason. This is especially annoying when it comes to using any method that requires a Godot.Collection.Array, as it requires `new Godot.Collections.Array(new [] { /* stuff */})` (in some cases you can remove `Godot.Collection.` but when you include the System namespace you can't)\r\n\r\nIf implemented implicitly we could turn say:\r\n```cs\r\nConnect(\"pressed\", this, nameof(OnPress), new Godot.Collections.Array { 1 });\r\n```\r\ninto\r\n```cs\r\nConnect(\"pressed\", this, nameof(OnPress), new[] { 1 });\r\n```\r\nwhich would be a lot easier to deal with for most folks I'd say.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** Currently a lot of cases where casting should be eased are instead obscured or outright blocked by the lacking of casting operators, (in such latter cases requiring use of the constructor explicitly) generally implicit casting operators. Most particularly any method that uses Godot Arrays as inputs requires a somewhat verbose declaration, especially in the case of including the System namespace since System.Array exists. There are some cases as well where you could certainly need a cast from System Collections or native C# Arrays into Godot Collections which I say is rather verbose to type out.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nForemost we could add:\r\n```cs\r\npublic static implicit operator Array(System.Array array) => new Array(array);\r\n```\r\nto Godot.Collections.Array, which would implicit allow any native C# Array to be made into a Godot Array implicitly, opening up the option above.\r\n\r\nFor ease of conversion we could also perform casts back:\r\n```cs\r\npublic static implicit operator System.Array(Array array) \r\n{\r\n    var result = new object[array.Count];\r\n    array.CopyTo(array, 0);\r\n    return result;\r\n}\r\n```\r\nand we could even perform casts between the generic and non-generic version. (Although I am still unsure why the generic version doesn't just inherit from the non-generic version) In any case it would ease the conversion between the types.\r\n\r\nIf we simply add:\r\n```cs\r\npublic static implicit operator Array<T>(Array array) => new Array<T>(array);\r\n```\r\nto Array<T> we could also make the same conversion between the non-generic and generic versions easier.\r\n\r\nAnd it already contains an explicit cast to the non-generic version however given the nature of System includes and the fact the cast doesn't actually make a difference in behavior (other then type conversion which we should be striving for type specifics in most cases anyway) I don't see why not change\r\n\r\nhttps://github.com/godotengine/godot/blob/91b0be18dcc3ba3b1ecd35e8a7e416883776cf7b/modules/mono/glue/GodotSharp/GodotSharp/Core/Array.cs#L256-L259\r\n\r\nto an implicit cast in that case.\r\n\r\nThese casts can also be applied to common System Collection types include List, Queue, and Stack as examples.\r\n\r\nThe same could be said for Dictionary, while it is generally less capable of removing verbosity, (specifically since there is no native dictionary object that obscures the type system in the System namespace) a cast could still be found useful, I suggest implicit casting, but like all of this I'll leave discussion and decision foremost to the Project Heads.\r\n\r\nAny referred to beforehand, the most significant question I leave in case of implementation acceptance is whether it should be implicit or explicit, or for specific cases of what should and should not be implicit in. Once decided I'll readily submit a PR.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No, its about reducing verbosity specifically and easing casting generally across the whole of GodotSharp given the prevalence of Godot Collection types which can broadly be associated with `System.Collections.List` and `System.Collections.Dictionary` and their generic versions.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Not possible and it is a very common typing issue I find working with GodotSharp.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/403/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/401",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/401/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/401/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/401/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/401",
    "id": 553439752,
    "node_id": "MDU6SXNzdWU1NTM0Mzk3NTI=",
    "number": 401,
    "title": "Changing transparency of a whole Node2D with overlapping textured children",
    "user": {
      "login": "DeRobyJ",
      "id": 6437521,
      "node_id": "MDQ6VXNlcjY0Mzc1MjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6437521?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DeRobyJ",
      "html_url": "https://github.com/DeRobyJ",
      "followers_url": "https://api.github.com/users/DeRobyJ/followers",
      "following_url": "https://api.github.com/users/DeRobyJ/following{/other_user}",
      "gists_url": "https://api.github.com/users/DeRobyJ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DeRobyJ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DeRobyJ/subscriptions",
      "organizations_url": "https://api.github.com/users/DeRobyJ/orgs",
      "repos_url": "https://api.github.com/users/DeRobyJ/repos",
      "events_url": "https://api.github.com/users/DeRobyJ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DeRobyJ/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-22T10:16:38Z",
    "updated_at": "2020-01-24T20:22:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n(TL:DR; pictures at the bottom)\r\n\r\n\r\n**Describe the project you are working on:**\r\n2D top-down videogame, undertale style\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to change the transparency of \"Room\" nodes, which contain 3 tilemap nodes with overlapping tiles. Right now, the the \"Room\" parent node transfers its modulate to the children, thus changing its modulate.a property won't result in a homogeneous transparency, since overlapping sprites will have a different transparency than non-overlapping ones, because they are separate layer with that alpha value.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis feature would allow me to change the overall transparency of the \"Room\", like if it were a ViewportTexture. I'm not using ViewportTexture because it gets overly complicated for just a graphical change. My character will have to interact to tiles based on their position, and using Viewports might affect existing game logic.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/6437521/72884520-8d6c3b00-3d06-11ea-9fca-869bc47d1f31.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNot applicable \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWorkarounds require the use of viewports, and it's not possible to work around the problem with shaders. You can find a discussion regarding this problem here: https://www.reddit.com/r/godot/comments/ertdgm/2d_transparency_of_overlapping_nodes_how_to/\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe this behavior is the expected behavior from the user's point of view. When changing the transparency of a node, we expect the whole node to become transparent, not its children.\r\n\r\nFor instance, open GIMP and do the following:\r\n- Create an image\r\n- Fill the background layer with black\r\n- Create two layers with alpha channel turned on\r\n- Draw two objects of different color, one per layer, and make sure they overlap\r\n- Create a layer group\r\n- Put the two layers with the drawings in the group\r\n- Select the group\r\n- Change transparency\r\n\r\nThis is the expected behavior.\r\n\r\n\r\nOpacity 100% on all layers:\r\n![image](https://user-images.githubusercontent.com/6437521/72885299-edafac80-3d07-11ea-81fc-74bf13011011.png)\r\n\r\nOpacity 50% on Layer Group, expected behavior:\r\n![image](https://user-images.githubusercontent.com/6437521/72885346-0750f400-3d08-11ea-8467-c1a79cae5732.png)\r\n\r\nEmulating Godot modulate.a behavior:\r\n![image](https://user-images.githubusercontent.com/6437521/72885441-35363880-3d08-11ea-9e55-238aee69baad.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/401/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/400",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/400/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/400/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/400/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/400",
    "id": 553130232,
    "node_id": "MDU6SXNzdWU1NTMxMzAyMzI=",
    "number": 400,
    "title": "Accessing big files (greater than ~2GB) requires changing the File API to use 64-bit integers",
    "user": {
      "login": "MrMrBlackDragon",
      "id": 46326301,
      "node_id": "MDQ6VXNlcjQ2MzI2MzAx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/46326301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrMrBlackDragon",
      "html_url": "https://github.com/MrMrBlackDragon",
      "followers_url": "https://api.github.com/users/MrMrBlackDragon/followers",
      "following_url": "https://api.github.com/users/MrMrBlackDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrMrBlackDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrMrBlackDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrMrBlackDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/MrMrBlackDragon/orgs",
      "repos_url": "https://api.github.com/users/MrMrBlackDragon/repos",
      "events_url": "https://api.github.com/users/MrMrBlackDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrMrBlackDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "reduz",
        "id": 6265307,
        "node_id": "MDQ6VXNlcjYyNjUzMDc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reduz",
        "html_url": "https://github.com/reduz",
        "followers_url": "https://api.github.com/users/reduz/followers",
        "following_url": "https://api.github.com/users/reduz/following{/other_user}",
        "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
        "organizations_url": "https://api.github.com/users/reduz/orgs",
        "repos_url": "https://api.github.com/users/reduz/repos",
        "events_url": "https://api.github.com/users/reduz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/reduz/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "RandomShaper",
        "id": 11797174,
        "node_id": "MDQ6VXNlcjExNzk3MTc0",
        "avatar_url": "https://avatars0.githubusercontent.com/u/11797174?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandomShaper",
        "html_url": "https://github.com/RandomShaper",
        "followers_url": "https://api.github.com/users/RandomShaper/followers",
        "following_url": "https://api.github.com/users/RandomShaper/following{/other_user}",
        "gists_url": "https://api.github.com/users/RandomShaper/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/RandomShaper/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/RandomShaper/subscriptions",
        "organizations_url": "https://api.github.com/users/RandomShaper/orgs",
        "repos_url": "https://api.github.com/users/RandomShaper/repos",
        "events_url": "https://api.github.com/users/RandomShaper/events{/privacy}",
        "received_events_url": "https://api.github.com/users/RandomShaper/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 2,
    "created_at": "2020-01-21T21:08:07Z",
    "updated_at": "2020-10-01T09:25:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI want to make a file manager, for making it easier to arange data.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot is not able to deal with data bigger than 2^31 -1 // (~2GB) bytes.  So I can't seek behind that point or get the size (wich is just equal to seek_end() -> get_position()). So it's not possible to store or read data behind this value. And working with files beeing that big is very likely espacialy when managing \"zip\" folders or movies. I see no way to avoid that problem.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would be possible to accese the size of files bigger than ~ 2GB and data behind that point, e.g for compressing purpose. In Godot 3.2 it even it's not possible anymore to get the last date due the size limitaion.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nFor e.g accesing the file's size:\r\n`var file : File = File.new()`\r\n`var err : int = File.open(Path)`\r\n`File.get_len()`\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI see no solution in GDCode. I googled a lot to find a way, but it's just not possible to overcome the problem\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nHere goes the same as for the last question: I see now way in native Godot\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is for internal use in the engine only.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/400/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/397",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/397/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/397/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/397/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/397",
    "id": 552490030,
    "node_id": "MDU6SXNzdWU1NTI0OTAwMzA=",
    "number": 397,
    "title": "Add a Vector2/3 normalized direction export hint",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-01-20T20:14:14Z",
    "updated_at": "2020-06-01T00:29:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProject-agnostic.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem pertains to both project and editor needs. Oftentimes I need to export a property which takes a `Vector2` to define a *direction*, to name a few:\r\n\r\n1. Specific floor directions used for physics parameters.\r\n2. Launching direction (for projectiles).\r\n3. Spawn directions (specifies a relative direction by which objects are spawned onto the level, which most of the time matches `floor_direction`).\r\n4. Defining custom gravity and external forces vectors (wind direction etc).\r\n\r\nIdeally, a direction should be represented as a normalized vector as quite a bunch of vector math methods expect them to be normalized beforehand. Unfortunately, for any non-trivial direction (not orthogonal) it's quite difficult to set a normalized vector by hand.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding a new export hint to allow defining a direction represented via vectors. It means that:\r\n\r\n1. It's easy to determine the actual direction visually rather than digital representation of it.\r\n2. Doesn't need to be (re)-normalized via code to ensure no math errors occur.\r\n\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nCurrently, when a `Vector2` is exported, it looks something like this:\r\n\r\n![godot-vector2-hint](https://user-images.githubusercontent.com/17108460/72753408-8988cd80-3bcd-11ea-8009-c4bf8bb0ab06.png)\r\n\r\nThe visual representation would look like this:\r\n\r\n![godot-vector2-dir-hint](https://user-images.githubusercontent.com/17108460/72753419-90afdb80-3bcd-11ea-955b-9dc8d9c1c69e.png)\r\n\r\nA specialized editor could also be used to set any type of vector, snapped to a grid:\r\n\r\n![godot-snapped-dir-editor](https://user-images.githubusercontent.com/17108460/72767150-c966a980-3bfb-11ea-8783-0ea4bc7f5dd5.png)\r\n\r\nDragging within the circle area is enough to change the `Vector2` direction, and it would be automatically normalized for you (as an option). Snapping and precision could also be implemented to set orthogonal vectors more easily.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIt likely requires adding some new `PROPERTY_HINT_DIRECTION` or similar, and the respective UI editor of course.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAt least requires to write an editor inspector plugin, so no. It would be used quite often in my project, globally.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere are some areas in the project/editor settings which could benefit from this (not mentioning the existing ability to add custom settings to the list of existing ones per project):\r\n\r\n![godot-default-gravity-vector](https://user-images.githubusercontent.com/17108460/72753893-dcaf5000-3bce-11ea-8bd0-5c9c26ec8bd4.png)\r\n\r\nI'm not sure if it's possible to provide a custom editor hint for the **_core_** basic type by writing an `EditorInspectorPlugin` alone which would be available globally throughout the project, and *not* restricted to specific object types.\r\n\r\nThe proposal can be seen as a specific use case which probably needs a more underlying engine support: \r\n\r\n*Allow to override and add custom property hints for core datatypes.*\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/397/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
