[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1715",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1715/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1715/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1715/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1715",
    "id": 728621529,
    "node_id": "MDU6SXNzdWU3Mjg2MjE1Mjk=",
    "number": 1715,
    "title": "Allow gridmaps and tilemaps to contain logic",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-24T01:07:36Z",
    "updated_at": "2020-10-24T11:52:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d Rougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to eventually add collision logic to my gridmap cells but currently the way godot handles tiles and gridmaps cells makes it hard to do.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest 3 things to allows these things to be easier..\r\n- Make tilemaps and gridmaps not take meshes or sprites as root but instead take a collisionobject and any children\r\n- Make things physicbodies able to detect collision like area nodes\r\n- Allow us to position our collisionobject either through script or by moving the parent (this includes physicbodies)\r\n \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea would be to attach a script to the tile/cell and add logic to it.\r\n\r\nFor example you might have a mario question mark block which is a staticbody2d but on collision from the bottom it bounces half a tile upwards and releases a item.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can guarantee this would be used. it would just be a matter of optimizing it.\r\nWhile it can be worked around it requires to loop though all the tiles/cells and check it and add logic from the map.\r\nThis is not ideal since godot already loops though these.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI because what's the point in a tile or cell if all it does is solidity checks.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1715/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1714",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1714/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1714/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1714/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1714",
    "id": 728617050,
    "node_id": "MDU6SXNzdWU3Mjg2MTcwNTA=",
    "number": 1714,
    "title": "Add option to repeat 3D materials based on texture ",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-10-24T00:45:52Z",
    "updated_at": "2020-10-29T22:22:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d Rougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't seem to create a 1x2x1 cube and a 1x1x1 material that maps onto that cube by tiling\r\nI have tried trilinear mapping and using uvs of 3,2,1 \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nbasically I would like to see a option to automatically scale the by tiling the texture instead of stretching it\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would guess that the uv would take a Vector2 where the texture would tile without trilinear mapping\r\nhere is a example of what I want to do with 1 material based on the size of the mesh\r\n![image](https://user-images.githubusercontent.com/2453707/97063910-578b0a00-1557-11eb-90d9-8249f442855a.png)\r\ncurrently the meshes above use different materials and there doesn't seem to be a way to use only one \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't want to have to attach a script to every mesh just to do something a material should do.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be good for 3d block based games\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1714/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1713",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1713/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1713/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1713/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1713",
    "id": 728593232,
    "node_id": "MDU6SXNzdWU3Mjg1OTMyMzI=",
    "number": 1713,
    "title": "Allow gridmap and tilemap items to span multiple cells",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-23T23:13:50Z",
    "updated_at": "2020-10-24T11:51:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d Rougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently I need to have 2 tall blocks for walls for a flat 3D dungeon so implementing AStar pathing is easier.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCan tilemaps and gridmaps have the option for items to span multiple cells?\r\nThis would allow us to have also create 3d builders without needing to check cell sizes manually\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere is the issue its based on https://github.com/godotengine/godot/issues/17921\r\nI'm not sure what the best way to implement this is but ideally we would need to be able to specify a item size in cells.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit can be worked around with multipule tilesets or meshlibraries but thats kinda a hack \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nright now gridmaps are pretty barebones and I would like to see more features go into them\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1713/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1711",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1711/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1711/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1711/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1711",
    "id": 728514711,
    "node_id": "MDU6SXNzdWU3Mjg1MTQ3MTE=",
    "number": 1711,
    "title": "Horizontal layout options for other inspector types and centering property names",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-23T20:48:00Z",
    "updated_at": "2020-11-29T02:29:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nrougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was just messing around with the editor looks and thought this would be a good idea\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nbasically I am suggesting the equivalent of...\r\nEditor->EditorSettings->General->Interface->Inspector->HorizontalVectorTypesEditing\r\nfor all exportable types.\r\n\r\nthis would allow us to choose between vertical or horizontal editing for all exported types.\r\n\r\nI also suggest that we can toggle centering property names in vertical mode\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would think it would just be a editor option in the same place as the HorizontalVectorTypesEditing option.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would use it and idk about other people but it would be nice to have the whole inspector either vertical grouping or horizontal grouping.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits something that would allow a little most customization to the users.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1710",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1710/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1710/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1710/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1710",
    "id": 727863617,
    "node_id": "MDU6SXNzdWU3Mjc4NjM2MTc=",
    "number": 1710,
    "title": "can we have properties for getting the relative vector from a vector2 or vector3",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-23T03:31:20Z",
    "updated_at": "2020-10-24T01:27:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d rougelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need a easy way to find the relative adjacent vectors from a current one.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nbasically what I want to see is something like this..\r\n```\r\n #already exist\r\nvar const = Vector3.UP\r\n\r\n#what we need\r\nvar variable = Vector3.FORWARD\r\nvariable.rotated(Vector2.UP, 45)\r\nvar forward_movement = variable.forward * walk_speed\r\nvar side_movement = variable.right * walk_speed\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nabove\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nthis would be used alot for fps or 3d rougelike movement\r\nI know there is something similar for 3d nodes but its not very understandable\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits easy to use and understand and is really useful\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1709",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1709/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1709/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1709/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1709",
    "id": 727861181,
    "node_id": "MDU6SXNzdWU3Mjc4NjExODE=",
    "number": 1709,
    "title": "Add an abstract type system for GDScript to gain access to compile-time code execution",
    "user": {
      "login": "PranavSK",
      "id": 18136182,
      "node_id": "MDQ6VXNlcjE4MTM2MTgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18136182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PranavSK",
      "html_url": "https://github.com/PranavSK",
      "followers_url": "https://api.github.com/users/PranavSK/followers",
      "following_url": "https://api.github.com/users/PranavSK/following{/other_user}",
      "gists_url": "https://api.github.com/users/PranavSK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PranavSK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PranavSK/subscriptions",
      "organizations_url": "https://api.github.com/users/PranavSK/orgs",
      "repos_url": "https://api.github.com/users/PranavSK/repos",
      "events_url": "https://api.github.com/users/PranavSK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PranavSK/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-23T03:24:06Z",
    "updated_at": "2020-10-23T12:44:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn editor plugin. But this can help all projects using GDScript.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGDScript being a duck-typed language with a lot of reliance on strings, using it was sometimes very cumbersome and non-intuitive. Also, this sometimes meant not being able to use our favourite text editors. Many of the recent changes to the GDScript has been addressing this (class_name, optional-typing, signals) but it does not affect all use cases and does not make sense to radically change GDScript to a fully typed language. Nevertheless, now that optional typing has performance benefits, it makes sense to be able to take advantage of this while still having the generic nature (especially for addon and plugin development in GDScript).\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is to introduce an **Abstract Type System**. It is loosely based on what the Haxe language does, but more streamlined towards Godot usage. The basic notion is the concept of being able to create a type that is transformed into a different type at compile time.\r\n\r\nLet me illustrate with a few examples:\r\n\r\n1. The dictionary in GDScript is very easy and a common way to store data. In many ways, it replaces the *structs* found in other languages. But one of the biggest annoyance is not having code completion for the dictionary keys (especially when from the user point of view he is creating a static DB). So with abstract types, we could have something like this:\r\n```\r\nabstract Dictionary # The underlying type - it could be a concrete type or another abstract type.\r\nclass_name EnemyStat\r\nvar health: float: # Using the new properties syntax in GDScript\r\n    get:\r\n        return self.get(\"health\")\r\n    set(value):\r\n        self.set(\"health\", value)\r\n```\r\nThe `health` would be resolved at compile time to provide the benefits of typed optimizations while allowing the core dictionary implementation to be generic. Also, this would make value carrying `enum`  a possibility. \r\n\r\n2. A more complex example - Let's say I have written a generic GDNative plugin that is able to load a C - compliant DLL and can resolve the structs from that DLL into native types that are meaningful to Godot. You make a single large class `SomeProjNative`, which essentially just has wrappers into the required functions. The from within GDScript you could write an abstract type to make it more useful inside GDScript.\r\n```\r\nabstract Node\r\nclass_name SomeWrapper\r\n\r\nfunc do_something():\r\n    return SomeProjNative.do_something()\r\n    # The compiler would essentially replace all calls to do_something with SomeProjNative.do_something()\r\n```\r\nOf course, this is now possible with GDNative but requires you to create the interface completely inside the native code and making changes cumbersome. Also, GDScript is a lot easier to write code. If, as some external tool/library developer needs to support Godot I can simply do a single class with the required API translations. The library users can adapt it to however they want inside GDScript.\r\n\r\n3. Introducing the idea of compile-time expressions. Any expression within a file which starts with `abstract SomeBase` is subjected to compile-time execution, if it can be resolved. Eg.\r\n```\r\nabstract Foo\r\n\r\nfunc do_foo():\r\n    if is_editor_hint(): # This can be resolved at compile time\r\n        do_foo_debug() # This is cannot be resolved at compile time. The do_foo() call is replaced with this if the above check is satisfied\r\n    # If the above check fails the do_foo is replaced with *no op*.\r\n```\r\n\r\nThis would also extend to the core code as well. \r\n4. The current of use of physics ray casting returns a dictionary. For example using (https://docs.godotengine.org/en/stable/classes/class_physics2ddirectspacestate.html#class-physics2ddirectspacestate-method-intersect-ray)[Physics2DDirectSPaceState.intersect_ray] returns a dictionary with a number of key-value pairs. But what each is not immediately relevant and often you have to look up the docs. But with the idea of an abstract dictionary (this should be possible to be done only in the context of GDScript, as other languages are better treated with their nuances) the code completion should be able to prompt available keys. \r\n\r\nAlso in many other parts of the engine, strings are extensively used. This is often prompted by the GDScript inbuilt editor, like animation clip names, preload resource string path and most importantly the `NodePath`s. Since the editor is already tracking these, we could put this data into abstract types and make it accessible, via the language server, to external text editors (I understand these are done context-sensitive i.e, which scene is open, but maybe we could cache these. Need more discussion into this). This could make it possible to have a sense of *namespace* using the folder structures. The current implementation of `class_name` sort of makes the scripts be meaningfully placed in its own *' scripts'* folder but this is against the Godot philosophy ob being able to place the scripts (and other resources) along with the scene file where it used, which greatly improves reusability of these scenes (especially makes a lot of sense for the addons folder stuff).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI am unfortunately not fully aware of how the internals work and hence need help to provide a concrete implementation idea.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is fundamentally a new feature that needs to be in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1709/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1708",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1708/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1708/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1708/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1708",
    "id": 727757670,
    "node_id": "MDU6SXNzdWU3Mjc3NTc2NzA=",
    "number": 1708,
    "title": "Make AtlasTextures work with SpatialMaterial/3D meshes",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-10-22T22:20:18Z",
    "updated_at": "2020-10-24T02:52:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3d rouge like\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have a image which I want to swap out later for dungeon variation.\r\nhowever it seems like texture atlas doesn't work with albedo in spatial shaders.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest all types of texture work for 3d objects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/2453707/96935884-d9a50100-1479-11eb-952c-31c66b8e93eb.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI guarantee this would be used  and while it can be worked around with shaders or uvs its not ideal and seems kinda like a bug.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nnormal textures work why can't other textures?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1708/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1706",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1706/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1706/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1706/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1706",
    "id": 727539466,
    "node_id": "MDU6SXNzdWU3Mjc1Mzk0NjY=",
    "number": 1706,
    "title": "Generate a .txt file of all scenes/funcs/vars not required for min. reproduceable project on error",
    "user": {
      "login": "Error7Studios",
      "id": 60025044,
      "node_id": "MDQ6VXNlcjYwMDI1MDQ0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/60025044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Error7Studios",
      "html_url": "https://github.com/Error7Studios",
      "followers_url": "https://api.github.com/users/Error7Studios/followers",
      "following_url": "https://api.github.com/users/Error7Studios/following{/other_user}",
      "gists_url": "https://api.github.com/users/Error7Studios/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Error7Studios/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Error7Studios/subscriptions",
      "organizations_url": "https://api.github.com/users/Error7Studios/orgs",
      "repos_url": "https://api.github.com/users/Error7Studios/repos",
      "events_url": "https://api.github.com/users/Error7Studios/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Error7Studios/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-22T16:24:07Z",
    "updated_at": "2020-10-22T23:07:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am trying to create a minimum reproduceable project to report this error:\r\n`Internal Script Error! - opcode #38 (report please).`\r\nI have a complex project right now, and trying to delete scenes, functions, and variables to reduce it down to a minimum example project is causing me a huge headache, because when I delete things I think aren't needed, I find out 20 function calls later that I do in fact need some variable, or function for it to work.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGenerate some .txt file with a list of all the variables and functions in every single scene/script that is not required/used up to the point that the error occurs.\r\nThis way, the user can look at that file, and delete everything listed in it.\r\nThey can then further trim down the required functions by deleting lines that aren't required.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNo idea.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is a core issue.\r\nThis will make it easier to report bugs and fix them.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1706/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1705",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1705/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1705/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1705/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1705",
    "id": 727523058,
    "node_id": "MDU6SXNzdWU3Mjc1MjMwNTg=",
    "number": 1705,
    "title": "Add an option to change FileSystem dock behavior for auto scrolling when opening a scene",
    "user": {
      "login": "avencherus",
      "id": 13004169,
      "node_id": "MDQ6VXNlcjEzMDA0MTY5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13004169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avencherus",
      "html_url": "https://github.com/avencherus",
      "followers_url": "https://api.github.com/users/avencherus/followers",
      "following_url": "https://api.github.com/users/avencherus/following{/other_user}",
      "gists_url": "https://api.github.com/users/avencherus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avencherus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avencherus/subscriptions",
      "organizations_url": "https://api.github.com/users/avencherus/orgs",
      "repos_url": "https://api.github.com/users/avencherus/repos",
      "events_url": "https://api.github.com/users/avencherus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avencherus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-22T16:03:11Z",
    "updated_at": "2020-10-22T19:38:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D Games\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem is when opening multiple scenes in sequence.  The scroll point jumps to place the last opened scene at the bottom.  It's not desirable, as when opening many scenes in order it requires scrolling again.  It can be worked around by some degree if you know the behavior and work from the bottom up.\r\n\r\n![ezgif com-gif-maker (1)](https://user-images.githubusercontent.com/13004169/96898575-8bebc100-1498-11eb-9a73-f26c00e866c4.gif)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI wasn't able to find any options to control this, so it would be great if the editor settings had an option to disable this automatic realignment.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\nif (file_dock_scroll_auto_align) {\r\n\t\r\n\tfile_dock.scroll_to(x)\r\n}\r\n// else don't do it.\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDeals directly with editor behavior.  Unclear if hacky plugins could do the job.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1703",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1703/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1703/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1703/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1703",
    "id": 727058627,
    "node_id": "MDU6SXNzdWU3MjcwNTg2Mjc=",
    "number": 1703,
    "title": "Add a `cycle()` method to Array",
    "user": {
      "login": "lukostello",
      "id": 53994293,
      "node_id": "MDQ6VXNlcjUzOTk0Mjkz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/53994293?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukostello",
      "html_url": "https://github.com/lukostello",
      "followers_url": "https://api.github.com/users/lukostello/followers",
      "following_url": "https://api.github.com/users/lukostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukostello/subscriptions",
      "organizations_url": "https://api.github.com/users/lukostello/orgs",
      "repos_url": "https://api.github.com/users/lukostello/repos",
      "events_url": "https://api.github.com/users/lukostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-22T05:27:38Z",
    "updated_at": "2020-10-24T19:28:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am making a sokoban-like with rubik's cube type mechanics\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI am using the place elements have in my array to denote its order for game mechanics, and I cycle these elements in a variety of ways. There isn't a built in way to cycle them\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nadd a method that takes in how many times (and in which direction) you want to cycle an array and outputs resulting from it\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhere is what I have defined in my singleton which you can base C++ code around:\r\n\r\n```\r\nfunc cycle(times : int, arr : Array):\r\n\ttimes = posmod(times, arr.size())\r\n\tvar temp_arr = []\r\n\ttemp_arr.resize(arr.size())\r\n\tfor i in arr.size():\r\n\t\ttemp_arr[(i + times) % arr.size()] = arr[i]\r\n\treturn temp_arr\r\n```\r\nor alternatively:\r\n```\r\nfunc cycle(times : int, arr : Array):\r\n\ttimes = times % arr.size()\r\n\tif abs(times) > arr.size() / 2:\r\n\t\ttimes = -sign(times) * (arr.size() - abs(times))\r\n\tif times > 0:\r\n\t\tfor i in times:\r\n\t\t\tarr.push_front(arr.pop_back())\r\n\telif times < 0:\r\n\t\tfor i in times:\r\n\t\t\tarr.push_back(arr.pop_front())\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nit can be worked around using the code above in a singleton, but they might not have thought to optimize it as much as mine. Seems like it could see use similar to other functions in the class\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nJust seems like it would fit in with the other functions in the class",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1703/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1701",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1701/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1701/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1701/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1701",
    "id": 726979137,
    "node_id": "MDU6SXNzdWU3MjY5NzkxMzc=",
    "number": 1701,
    "title": "Add access keys/accelerators to improve keyboard usability in editor and overall production speed",
    "user": {
      "login": "Calamander",
      "id": 8860283,
      "node_id": "MDQ6VXNlcjg4NjAyODM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8860283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calamander",
      "html_url": "https://github.com/Calamander",
      "followers_url": "https://api.github.com/users/Calamander/followers",
      "following_url": "https://api.github.com/users/Calamander/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calamander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calamander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calamander/subscriptions",
      "organizations_url": "https://api.github.com/users/Calamander/orgs",
      "repos_url": "https://api.github.com/users/Calamander/repos",
      "events_url": "https://api.github.com/users/Calamander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calamander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-22T01:53:23Z",
    "updated_at": "2020-10-22T14:27:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot Editor\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot Editor has many tabs, menus and toolbars but it's nigh impossible to navigate by keyboard alone thus reducing potential production speed. Even though there are shortcuts feature available, less frequent ones can be easily forgotten or at least work is slowed until they are defined and/or learned.\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo solve the problem either classic [access keys](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/bb226831(v=vs.85)) can be used or ribbon [KeyTips](https://support.microsoft.com/en-gb/office/use-the-keyboard-to-work-with-the-ribbon-954cd3f7-2f77-4983-978d-c09b20e31f0e) variation (or mix for textual/non-textual buttons).\r\nMicrosoft docs description:\r\n> \r\n> An access key is an alphanumeric key—sometimes called a hot key or mnemonic—that users can use instead of a pointing device to activate interactive controls. With a few standard exceptions, an access key correlates to a designated character in a control label. For example, to open the File menu, for which the access key is typically F, the user would press ALT+F. Access keys are associated only with controls that have text labels.\r\n> Access keys differ from shortcut keys. Whereas access keys are a comprehensive means of navigating the entire UI, shortcut keys are a quick means for experienced users to perform common actions. Most access keys are associated with ALT, and most shortcut keys are associated with CTRL.\r\n\r\nHow it helps:\r\n1. If user can click 2+ keyboard buttons faster then move mouse pointer and click 1+ times - then he can save time.\r\n2. Setting up and/or learning shortcuts takes time, but using access keys does not, thus saves time at no cost from user.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically standard way.\r\nAccess Keys:\r\n![access-keys](https://user-images.githubusercontent.com/8860283/96806589-cad83300-1414-11eb-951e-8fde87d469c6.png)\r\nKeytips:\r\n![keytips](https://user-images.githubusercontent.com/8860283/96806453-6917c900-1414-11eb-9208-e1fe858ce83a.jpg)\r\n\r\nClassic access keys can be used for textual menus, keytips - for textless toolbar buttons and maybe tabs.\r\n\r\nImplementation can be tricky, since for them to be as intuitive as possible localization is preferable, but it can be done gradually. Alternatively default binding can probably be generated semi-automatically by analyzing available same-level items labels and choosing appropriate non-conflicting letter.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause anyone who is agile enough to use keyboard can benefit from it.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1701/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1700",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1700/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1700/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1700/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1700",
    "id": 726844438,
    "node_id": "MDU6SXNzdWU3MjY4NDQ0Mzg=",
    "number": 1700,
    "title": "Make available the `depth_texture` that is used for the heightmap particle collider (Vulkan)",
    "user": {
      "login": "Lexpartizan",
      "id": 48552343,
      "node_id": "MDQ6VXNlcjQ4NTUyMzQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48552343?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexpartizan",
      "html_url": "https://github.com/Lexpartizan",
      "followers_url": "https://api.github.com/users/Lexpartizan/followers",
      "following_url": "https://api.github.com/users/Lexpartizan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexpartizan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexpartizan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexpartizan/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexpartizan/orgs",
      "repos_url": "https://api.github.com/users/Lexpartizan/repos",
      "events_url": "https://api.github.com/users/Lexpartizan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexpartizan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-21T20:34:50Z",
    "updated_at": "2020-10-21T21:38:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nMake available the depth_texture that is used for heightmap particle collider.\r\n\r\nhttps://twitter.com/reduzio/status/1313984931475976192\r\nAs far as I understand, a depth_texture from camera, which is embedded in this particle system and looks down, is used to generate the heightmap. This makes it possible to make sure that rain or snow does not pass through the roof.\r\nBut it's not just the particles that matter. The processes of getting wet, rain streams running down the surface, and so on are drawn in the fragment shader. Which also needs to know if it is under the open sky. This means that your shader may need this texture.\r\nTherefore, it would be great not to waste extra resources in the form of a camera, viewport, and complex code when the desired texture is already calculated. I would just like to get access to it, if possible.\r\n\r\n**Describe the project you are working on:**\r\nim trying make rain\\wet shader.\r\nhttps://www.youtube.com/watch?v=u3Kz0IvujT4\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthe surfaces under the roof get wet and I do not know how to check in the Shader if there is a roof.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis will make it easier to create weather effects.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nget_heightmap_texture()\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, you can set up your own camera. get depth_texture from it and work with it. But this work and post-processing is already done, I think.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause the job is already done. It remains to give the user access to the intermediate result for other purposes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1700/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1699",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1699/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1699/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1699/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1699",
    "id": 726595843,
    "node_id": "MDU6SXNzdWU3MjY1OTU4NDM=",
    "number": 1699,
    "title": "Add an option to open a file from the FileSystem dock with a single click",
    "user": {
      "login": "Kalabasa",
      "id": 3705081,
      "node_id": "MDQ6VXNlcjM3MDUwODE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3705081?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kalabasa",
      "html_url": "https://github.com/Kalabasa",
      "followers_url": "https://api.github.com/users/Kalabasa/followers",
      "following_url": "https://api.github.com/users/Kalabasa/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kalabasa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kalabasa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kalabasa/subscriptions",
      "organizations_url": "https://api.github.com/users/Kalabasa/orgs",
      "repos_url": "https://api.github.com/users/Kalabasa/repos",
      "events_url": "https://api.github.com/users/Kalabasa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kalabasa/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-21T15:24:08Z",
    "updated_at": "2020-10-21T15:29:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nDemo pong project to check out Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOpening a file from the Filesystem tab requires an extra click in quick succession. I'm used to opening files in a single click because it's less strain on the wrist.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nOpen a file with a single click. This will remove the extra time-based click required to open a file.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nQuick solution would be to add an option to \"automatically open files when selected\" in the Filesystem tab.\r\n\r\nBetter solution would be to set a consistent preference for opening things in lists in the Editor (Related #1507).\r\n\r\nHere's a similar setting in VSCode\r\n![Screen Shot 2020-10-21 at 23 18 45](https://user-images.githubusercontent.com/3705081/96740868-d49d6e80-13f3-11eb-873b-c3e684f9702e.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nPressing Enter after highlighting the file is a workaround.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's the Editor UI.\r\n\r\nAlso, double-clicking is difficult for some people, especially those who lack specific fine motor ability. It could at least be an accessibility option.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1698",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1698/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1698/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1698/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1698",
    "id": 726426598,
    "node_id": "MDU6SXNzdWU3MjY0MjY1OTg=",
    "number": 1698,
    "title": "Add optional scattering (distance blur) to fixed fog",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-21T12:18:35Z",
    "updated_at": "2020-10-21T12:49:57Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nFog doesn't look as realistic as it could be. In real life, fog will make distant objects not only appear more faded, but also blurrier. This is due to a physical phenomenon known as *light scattering*.\r\n\r\n![Example photo](https://www.gannett-cdn.com/presto/2019/01/17/PPAS/e24b4f51-100d-4958-adb8-40c2f3739352-Fog1.jpg?crop=3023,1734,x0,y926&width=3200&height=1680&fit=bounds)\r\n\r\nThis can be simulated using depth of field far blur in CameraEffects, but since it simulates bokeh in 4.0, it's more demanding than a simple gaussian blur shader.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a simple distance-based gaussian blur shader that, when enabled, automatically appears in fixed fog.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThanks to Vulkan compute APIs, it's possible to have a gaussian blur shader that's significantly faster compared to previous approaches. This should hopefully make it cheaper than depth of field with bokeh simulation.\r\n\r\nWhile this probably won't be fast enough to be usable on mobile, it should become more usable on mid-range (and even recent low-end) desktop hardware.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis might be feasible with a custom screen-space shader, but the usual limitations of screen-reading shaders apply.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1698/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1696",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1696/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1696/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1696/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1696",
    "id": 725864756,
    "node_id": "MDU6SXNzdWU3MjU4NjQ3NTY=",
    "number": 1696,
    "title": "Allow Multi-Selection of Frames in SpriteFrames Animations",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-20T19:01:35Z",
    "updated_at": "2020-10-20T19:38:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm currently using AnimatedSprites, which use SpriteFrames, to add animations to the user interface of our game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have been modifying the frames of our animations in SpriteFrames, by swapping out old sprites and implementing new ones, as well as moving frames around. While doing this I noticed both moving and deleting can only be done on an individual frame basis, which can make removing or moving sprites in large animations a real chore.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/96630543-769a5980-1315-11eb-92ea-ef94104f9100.png)\r\n_only one frame can be selected at a time_\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would love to see multi-selection of the frames inside the Animations, by using CTRL+LMB and SHIFT+LMB respectively for single selection (current selected frames + clicked frame)  or range selection (current selected frames to clicked frame). This is how most listed items and UI elements work throughout the engine, such as the Filesystem, Scene Tree, Scene Viewer.\r\n\r\nThis would allow the user to select all frames, and then press the 'Delete' button to remove all of them, or select a few frames, and press the 'Move' buttons to move the selected range of frames around. This would greatly speed up large changes within SpriteFrames Animations, and be friendlier on the Index Fingers of all Godot Devs.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n![AnimatedSpriteMultiSelectionMockup](https://user-images.githubusercontent.com/10502115/96631698-f248d600-1316-11eb-9dc0-8f8849a3e2cc.gif)\r\nI think it should be pretty self-explanatory, but here is a small slideshow of the proposed feature, as I see it. Keep in mind the last frame, where the animation frames get deleted would obviously not look like that (empty frames), but it best showed the 'deletion' process.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot be worked around through script, but it can be worked around with manual labor, by selecting each individual frame and moving/deleting it one by one. Not a great solution, but it does work. Technically.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would be an enhancement to the UX of an already core part of the game, and one that would be in line with other selection methods inside the editor. This likely shouldn't be left as an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1696/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1695",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1695/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1695/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1695/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1695",
    "id": 725838883,
    "node_id": "MDU6SXNzdWU3MjU4Mzg4ODM=",
    "number": 1695,
    "title": "Add FrameX,Y Input to 'Frames from Spritesheet' import in SpriteFrames Animations",
    "user": {
      "login": "Arecher",
      "id": 10502115,
      "node_id": "MDQ6VXNlcjEwNTAyMTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10502115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arecher",
      "html_url": "https://github.com/Arecher",
      "followers_url": "https://api.github.com/users/Arecher/followers",
      "following_url": "https://api.github.com/users/Arecher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arecher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arecher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arecher/subscriptions",
      "organizations_url": "https://api.github.com/users/Arecher/orgs",
      "repos_url": "https://api.github.com/users/Arecher/repos",
      "events_url": "https://api.github.com/users/Arecher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arecher/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-20T18:27:55Z",
    "updated_at": "2020-10-20T19:39:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm currently using AnimatedSprites, which use SpriteFrames, to add animations to the user interface of our game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile using the recently added Spritesheet Frame Select Option for SpriteFrames _(Thanks for that by the way, a great addition!)_, I found myself struggling to smoothly slice my spritesheets, because I wasn't sure how many sprites they consisted of (especially on spritesheets with a lot of frames). I knew exactly what the dimensions of each frame were, but not the total amount. With some educated guesses you can find out, or you can start counting, but both of these methods cost more time than I deem necessary for what should have been a quick action.\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/96621847-6d0af480-1309-11eb-83c1-4c0fad1bf35e.png)\r\n\r\nPersonally I would have expected, and wanted there to be a way to put in the desired frame X and Y values instead.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTo make the slicing process more intuitive, I would suggest copying the UI that is currently used in the TextureRegion GridSnap mode. That allows users to cut up a spritesheet into individual grids/frames and then use one of these, as seen here:\r\n\r\n![image](https://user-images.githubusercontent.com/10502115/96624671-5797c980-130d-11eb-8e87-72ebb0566e62.png)\r\n\r\nThis could be an **alternative** to the current input values of the amount of Horizontal/Vertical Frames, by allowing input values of the X and Y dimension of the desired frames. And if the other functions of the Grid Snap could be implemented into the SpriteFrames Spritesheet import functionality as well (The separation between frames, and the offset) it could make these two similar processes consistent throughout the engine, while adding more functionality to the SpriteFrames import.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI made a mock-up of what this feature could look like\r\n![image](https://user-images.githubusercontent.com/10502115/96628226-3f767900-1312-11eb-999d-ba4b92fed41b.png)\r\n\r\nIt takes a little more space, but most of the space in this window is rarely used anyway, so it should be fine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI suspect that this feature will be used quite frequently. It would likely be the more convenient way to slice the spritesheets for SpriteFrames, as well as offering more niche functionality for developers that use spritesheets with separation/an offset.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt seems fairly core to the functionality of the SpriteFrames, as well as the fact that a similar functionality is already present in another part (TextureRegions) of the game.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1694",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1694/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1694/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1694/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1694",
    "id": 725795416,
    "node_id": "MDU6SXNzdWU3MjU3OTU0MTY=",
    "number": 1694,
    "title": "Add a signal connection dialog for autoloads/singletons ",
    "user": {
      "login": "kodkuce",
      "id": 24373114,
      "node_id": "MDQ6VXNlcjI0MzczMTE0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24373114?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kodkuce",
      "html_url": "https://github.com/kodkuce",
      "followers_url": "https://api.github.com/users/kodkuce/followers",
      "following_url": "https://api.github.com/users/kodkuce/following{/other_user}",
      "gists_url": "https://api.github.com/users/kodkuce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kodkuce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kodkuce/subscriptions",
      "organizations_url": "https://api.github.com/users/kodkuce/orgs",
      "repos_url": "https://api.github.com/users/kodkuce/repos",
      "events_url": "https://api.github.com/users/kodkuce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kodkuce/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-20T17:22:41Z",
    "updated_at": "2020-11-21T00:27:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nProject with singletons and signals\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can not connect an signal to Singleton node mothod\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSo limitation is for each button i would now need to make a script and in script a method\r\nthat will call that signal/delagate on Singleton instance... \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHmm my proposal would work this way,  we add a TextField named oweridePath \r\nthat will be empty by default and ignored, but if you put text in it it will be used similar as connect\r\nmethod \"<source_node>.connect(<signal_name>, <target_node>, <target_function_name>)\".\r\nSo this way i when i click on button_up() signal i can in oweridePath type /root/MySingleton/method \r\nand it will work np :)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMy issue is i think this enchantment will be used a lot, cuz you can have a lot of signal connections,\r\nbut ye you can create a class for each button just to connect it to SIngleton\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause adding one TextField in dialog has no bad effect\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1694/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1693",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1693/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1693/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1693/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1693",
    "id": 725343865,
    "node_id": "MDU6SXNzdWU3MjUzNDM4NjU=",
    "number": 1693,
    "title": "Always display exported float variables with one decimal, even when whole numbers",
    "user": {
      "login": "Arnklit",
      "id": 4955051,
      "node_id": "MDQ6VXNlcjQ5NTUwNTE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4955051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Arnklit",
      "html_url": "https://github.com/Arnklit",
      "followers_url": "https://api.github.com/users/Arnklit/followers",
      "following_url": "https://api.github.com/users/Arnklit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Arnklit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Arnklit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Arnklit/subscriptions",
      "organizations_url": "https://api.github.com/users/Arnklit/orgs",
      "repos_url": "https://api.github.com/users/Arnklit/repos",
      "events_url": "https://api.github.com/users/Arnklit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Arnklit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-10-20T08:33:55Z",
    "updated_at": "2020-11-26T12:19:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA fur plugin for Godot\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm having issues with not being able to show exported int variables as sliders. See https://github.com/godotengine/godot/issues/42809.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nPart of the reason for not displaying sliders on ints, according to the bug mentioned above, is to easily distinguish them from floats. So it would seem a good improvement to make it easier to distinguish floats by always having them display a decimal.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![image](https://user-images.githubusercontent.com/4955051/96561308-4cb24a00-12b7-11eb-8992-4da889e91948.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement would be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would have to be changed in core as far as I understand.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1693/reactions",
      "total_count": 19,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1690",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1690/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1690/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1690/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1690",
    "id": 724350731,
    "node_id": "MDU6SXNzdWU3MjQzNTA3MzE=",
    "number": 1690,
    "title": "Add a Transformation dialog to the 2D editor",
    "user": {
      "login": "MCrafterzz",
      "id": 19669673,
      "node_id": "MDQ6VXNlcjE5NjY5Njcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/19669673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCrafterzz",
      "html_url": "https://github.com/MCrafterzz",
      "followers_url": "https://api.github.com/users/MCrafterzz/followers",
      "following_url": "https://api.github.com/users/MCrafterzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCrafterzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCrafterzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCrafterzz/subscriptions",
      "organizations_url": "https://api.github.com/users/MCrafterzz/orgs",
      "repos_url": "https://api.github.com/users/MCrafterzz/repos",
      "events_url": "https://api.github.com/users/MCrafterzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCrafterzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-19T07:24:25Z",
    "updated_at": "2020-10-19T12:36:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nOcansionally sending prs to improve the engine\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBy using the handles you can move, scale, rotate multiple objects at the same time but there isn't really a way to move them over a large distance accurately.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy adding a transformation dialog similar to 3D you can easly move a bunch of objects 100 units away for example.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimilarly to the 3D dialog but in 2D.\r\n![image](https://user-images.githubusercontent.com/19669673/96414344-48215f00-11ed-11eb-9da3-053d13e3449f.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAnother possible solution would be a change to the inspector:\r\nWhen selecting multiple objects and entering +5 in the x-position value for example, they both move to the same location. If they instead would move 5 units relative to their preview position then the dialog isn't needed. There may be some reason why you want the current behaviour, let me know.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMoving objects is a core part of the engine.\r\n\r\n\r\nIf this get enought support then I'll create a new pr that is based on the current master.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1690/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1687",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1687/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1687/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1687/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1687",
    "id": 724079887,
    "node_id": "MDU6SXNzdWU3MjQwNzk4ODc=",
    "number": 1687,
    "title": "Expose `filled`, `width` and `antialiased` properties in the `ColorRect` class",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-10-18T19:27:24Z",
    "updated_at": "2020-10-30T14:47:51Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current `ColorRect` class is not versatile enough.\r\n\r\nThe core functionality behind this class is provided by `CanvasItem.draw_rect()` method, which also allows to:\r\n- draw a `filled` rectangle or just a contour of it;\r\n- specify the `width` of a rectangle (only applicable for contours);\r\n- draw an `antialiased` rectangle (only applicable for contours).\r\n\r\nIt's not possible to do the above with the current `ColorRect` class.\r\n\r\nFor instance, the `antialiased` property is part of `Polygon2D`, although this might be only relevant for Godot 3.2.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to expose the hidden functionality behind `ColorRect`. I can do this myself.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust expose those parameters as properties in `ColorRect`, it should be trivial to implement.\r\n\r\n![godot_color_rect](https://user-images.githubusercontent.com/17108460/96378753-d9b1b200-1196-11eb-9d08-fb8ef234c6cd.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's possible to create an equivalent class via script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about ***exposing*** existing functionality which is currently ***unavailable*** in `ColorRect` for scripting purposes, so this would only ***complement*** the engine.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1687/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1686",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1686/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1686/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1686/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1686",
    "id": 724007790,
    "node_id": "MDU6SXNzdWU3MjQwMDc3OTA=",
    "number": 1686,
    "title": "Set a node name in the 'Create New Node' dialog box",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-18T13:31:18Z",
    "updated_at": "2020-10-19T12:59:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt's a beautiful little 2D retro remake of a class ZX Spectrum game called Rex, from 1989. Check it out :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd say about 80% of the time I add a node I then go into the scene pane and rename it. It's a tiny bit tedious\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI did check first for a repeat proposal! Simply add a text box to the create new node dialog, auto-filling with the default, called 'node name' allowing it to be done here. Then you don't have to go to the scene and select rename then type.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPlease accept my apology, I couldn't be bothered to add a font to my pixel editor ;-)\r\n![image](https://user-images.githubusercontent.com/12863685/96368854-566c6e00-114e-11eb-8612-a3bd228c8ad4.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a quality of life change, one that will speed up things and is a simple addition\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1686/reactions",
      "total_count": 11,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1683",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1683/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1683/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1683/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1683",
    "id": 723973920,
    "node_id": "MDU6SXNzdWU3MjM5NzM5MjA=",
    "number": 1683,
    "title": "Add a spline ' road ' node, in Godot 4 . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-10-18T10:15:17Z",
    "updated_at": "2020-11-06T13:28:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNow, we're getting the mind-blowing, amazing Decal node, for Godot 4, but I was thinking, I've seen a nice feature in CryEngine, where one can make roads, by drawing a spline, that sort of makes a bending road, from a single texture, or road . . Since we already have the Decal node, and it works sublime, why not add the final touch, a ' road ' node, that sort of creates a winding, bending decal, for making roads, on terrain . . it's basically just a decal, that gets projected a long a spline, with a user-input number, of node points, that have angle, and position, and bending handles . . .\r\n![2020-10-18 1204](https://user-images.githubusercontent.com/61069740/96364249-2a46f200-113a-11eb-9a19-bfeddbd9ba08.png)\r\n\r\nIt's a relatively small node, and it would complement the new decal node so well, basically it's an extension, of it, so one can make a ' decal ' road, that follows a spline, instead of a single projection point . . imo, it's not such a big feature, that it can not be added in time, to Godot 4, and would REALLY round of the AMAZING, COOL features we are already getting, and take Godot to an almost AAA level engine, no extra work . . Not sure what to call it, a ' PathTextureNode ', or a ' SplineDecal Node ', or such, having this, would bring Godot to level, of PRO game engines, imo, and the person who made the AWE-SOME decal node, might be able to make it, very quickly, or so . . it would be important, that the nodes could be set to either road, or intersection, in the inspector, so one could make intersection, or t-turns, or such, so one first makes a road, and then can end it, in a t-cross, a four way, or a turn-left, turn-to right, so on, and have a chance to input individual textures, for these events . . having this, Godot would come DANGEROUSLY close, to being CryEngine, or better . . :O :O . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nLike the Decal node, that is already working, but you draw a spline, that then projects a road straight-down, on the terrain, it could be used to make forest paths, roads, dirt, rock roads, stylized roads, for racing games, etc etc . .\r\n\r\n![2020-10-18 1211](https://user-images.githubusercontent.com/61069740/96364446-0506b380-113b-11eb-8f27-d164ae07c5ee.jpg)\r\n\r\nThe node placer would have to know, to make ' tiles ' along the way, that are about 1 x 1 m, or a custom size, depending on the path size . . unlike the decal node, it would be able to bend the textures, to create turns, or bends, like roads . . <3 Nice, if we could get that, next to an already AMAZING line-up, of Godot 4 features, especially if it was little work, for the people, that made the decal node, or so . . A nice new node, at very little expense, to the Godot devs, hope-fully . . <3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike above, where one can drag a spline, that then ' orders ' a tileable road - texture, and also bends it, so it looks nice or, like a twisting road, on terrain . . it would work like the new decal node, but be a bit more, advance, and look okay-ish, or nice . . <3 <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't do this stuff, since it's mostly mathmatical, it would not increase size of engine very much, ie. it'd be some math, and spline handles, and the decal system, mixed, hope-fully . . <3 :O :O . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it'd be a small, but important node, to add, and when it's done, then it's DONE, no need to make it, ever again, or so . .\r\n\r\nHope, for Godot 4, in EARLY time, also . . That's a, given . . <3\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1683/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1682",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1682/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1682/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1682/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1682",
    "id": 723945539,
    "node_id": "MDU6SXNzdWU3MjM5NDU1Mzk=",
    "number": 1682,
    "title": "Add a new way of shading meshes, better than flat or, smooth shading . . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-18T07:14:20Z",
    "updated_at": "2020-10-18T13:57:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb raider -adventure game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've been looking at a lot of titles, that have smooth shading ( PS3, mostly ), and compared it, to flat shading, and I've been wondering, we've had smooth shading, for a long time, but are there ' improved ' versions, of these two standards ways, of shading . . I know normal maps are, like the next step, but I was wondering, if there was a ' level ' in between, where one could could get a ' nicer ' version, of smooth shading . . Been looking for it, on the internet, found this . .\r\n![Skærmbillede (559)](https://user-images.githubusercontent.com/61069740/96360814-bba96a80-1120-11eb-812a-ff648aaeb95d.jpg)\r\n\r\nI'm sort of asking, if there is a way, to take ' smooth ' shading, to the next level, with a setting one could set, under shading technique, in materials, or so . . we've had smooth shading for a LONG time, and was wondering if there have been some improvements in that rendering style, that might be fast, require no normal maps, and give better, more realistic results, compared to either smooth, or flat shading . .\r\n![2020-10-18 0904](https://user-images.githubusercontent.com/61069740/96360836-ed223600-1120-11eb-9ce6-7fc66deef8dd.jpg)\r\n\r\nI'm not an expert, of 3d rendering, but maybe there is a way, to add an ' improved smooth ' shading option, that one could set, where one sets ' toon ' shading, or so, in Godot, and sort of, make better renders, of 3d meshes, that are in smooth shading, I don't know enough 3d for what to look for, but it would be really cool, imo, Thanks <3\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA sort, of ' improved smooth ' shading technique, if it exists, I'm asking bec. I can't find it, but the engine pros MIGHT have heard of it, something that is fast, performance and, gives nice visual results, or so . .\r\n![2020-10-18 0907](https://user-images.githubusercontent.com/61069740/96360885-586c0800-1121-11eb-9f23-91fe3dbea125.jpg)\r\n\r\nSmooth shading gives ok, but also ' ugly-ish ' results, ie. one can see artifacts, so on . . I was wondering if smooth shading might be improved, so it looked even nicer, with some techniques, to get even better, more realistic results, in Godot . . Something fast, maybe shader based, not sure, or I can't imagine the old ' smooth ' shading technique hasn't been improved, already, by researchers, or so, but I've been looking for it, and can't find it, anyway wanted to ask, since the engine coders might know some really cool stuff, the rest of us never heard about <3 . . . Thanks . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWell, take the old technique, of smooth shading, and improve it, maybe by generating in-between vertices, or some fancy new method, of getting even nicer renders, of surfaces, with no normal maps, etc etc . . there might be a cheap way, of making every-thing look nicer, right away, no baking, no normal maps, etc . . it wouldn't replace normal maps, but sort of be a step towards normal maps, the way smooth shading was, for flat shading, ie. ' improved / better smooth shading ' technique . . One would assume, there has been improvements to this shading technique, since it's been around, for many years, and is heavily used, some-thing fast, or quick, that improves quality . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't rewrite basic stuff, in the engine, still learning, to make code, for games . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, if such a method exists, might be ' just ' the look one wants, and lessen need, for normal maps, or so . .\r\n\r\nBasically, it'd be something, that if one imports a ' smooth ' shading object, it just looks better, no need for normal maps, would be nice to have that, again, not shader expert, might, be dumb . . <3 some-thing, to bridge the gap, between the ' toon ' looking smooth shading, see sec. image above, and full normal maps, a 'nicer' smooth shading method or, algorhitm . . <3 Thx . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1682/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1679",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1679/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1679/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1679/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1679",
    "id": 723765851,
    "node_id": "MDU6SXNzdWU3MjM3NjU4NTE=",
    "number": 1679,
    "title": "Improve `OS.kill()`'s error handling and add a method to check for running processes ",
    "user": {
      "login": "MikeSchulze",
      "id": 347037,
      "node_id": "MDQ6VXNlcjM0NzAzNw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/347037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MikeSchulze",
      "html_url": "https://github.com/MikeSchulze",
      "followers_url": "https://api.github.com/users/MikeSchulze/followers",
      "following_url": "https://api.github.com/users/MikeSchulze/following{/other_user}",
      "gists_url": "https://api.github.com/users/MikeSchulze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MikeSchulze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MikeSchulze/subscriptions",
      "organizations_url": "https://api.github.com/users/MikeSchulze/orgs",
      "repos_url": "https://api.github.com/users/MikeSchulze/repos",
      "events_url": "https://api.github.com/users/MikeSchulze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MikeSchulze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-17T14:04:15Z",
    "updated_at": "2020-10-17T15:32:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a unit test plugin. It startes a test client in the background (hidden application)\r\nThe client comunicates over network connection with der server running by the plugin.\r\nTo run the test client i use the provided functionallity OS.excetute() with this arguments\r\n[--no-window, -d, -s, res://addons/gdUnit/src/core/GdUnitClient.gd]\r\nThe client is closing/terminate by it self when all tests are done.\r\nTo manually stop a running test client i use the pid from OS.excetute() and send a kill OS.kill(<pid>) to terminate the client.\r\nSo good so far ;)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen i stop a running test client with OS.kill() results into OK for a success terminated process.\r\nBut when the client is already terminatet i have no chance to check if the client still running or not.\r\ne.g. when i try now OS.kill() on a already terminated process i got only an generic error Error.FAILED \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nTo improve the OS.kill() it should return a better error  \r\n* add to the Error enum PID_NOT_EXIST\r\n* replace the Error enum with and Error object where contains the error number and a human readable message\r\n\r\nAdd a new function to check if a process running by given PID\r\n* `OS.is_process(<pid>) -> bool`\r\nreturns true when a process is running by given PID or false \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWith this better error handling on OS.kill() we can check if the process already terminated for better control flow.\r\nWith OS.is_process(<pid>) we can verify if the process running or not.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\ni found no way to check if an process is running by given PID\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a missing function on the OS class to manage spawned processes",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1677",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1677/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1677/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1677/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1677",
    "id": 723349945,
    "node_id": "MDU6SXNzdWU3MjMzNDk5NDU=",
    "number": 1677,
    "title": "Provide a way to create gradient textures in 2D with different types of fill, not just 1D",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-16T16:08:28Z",
    "updated_at": "2020-12-13T19:14:28Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current `GradientTexture` is only capable of generating horizontal one-dimensional textures. I'd expect such a class to provide a way to generate 2D gradients as well.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding the Y component to the existing `GradientTexture` has the following benefits:\r\n- no need to create a simple gradient in an external program, increasing prototyping speed;\r\n- making `Light2D` masks with radial fill without leaving the editor;\r\n- enhancing `TextureProgress` to also include the height;\r\n- useful as shader input;\r\n- making it easy to create sky parallax/background in 2D without using shaders (again, the height is important here, as a 1x2048 texture can be repeated to span horizontally).\r\n\r\nHelps use cases described in other proposals: #611.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n1. godotengine/godot#31655: modify existing `GradientTexture` class.\r\n2. godotengine/godot#42855: create a new `GradientTexture2D` class.\r\n\r\nReasons for creating a separate class for this:\r\n- doesn't break existing functionality with `GradientTexture` at all (used by particle systems, visual shaders, color correction);\r\n- less complexity and more efficiency for existing `GradientTexture`;\r\n- by default, the texture has 64x64 dimensions rather than 2048x1, which is more intuitive for beginners;\r\n- adding more functionality to `GradientTexture2D` is easier in the future, different editor icons can be created;\r\n- if the proposal is not approved for core, can be easily made part of [`Goost`](https://github.com/goostengine/goost) or any other module. 😛\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nShaders can be used for this, but not as easy to use for beginners.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThere are existing plugins like https://github.com/Maujoe/godot-custom-gradient-texture, but usability asks for better. I've actually tried to create a new type of `Texture` but it seems like it's impossible to extend the base class via script as seen in godotengine/godot#42830. The only feasible way to create such a thing is by extending `ImageTexture` but even then it lead to various inspector problems.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1677/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1674",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1674/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1674/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1674/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1674",
    "id": 723000038,
    "node_id": "MDU6SXNzdWU3MjMwMDAwMzg=",
    "number": 1674,
    "title": "Add 3D gizmos for Node",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2020-10-16T08:01:10Z",
    "updated_at": "2020-10-16T08:01:10Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm creating a node in C++ (that is a direct child of a `Node`) called `MotionController`. This node, which is responsible for the navigation and so performs some operation like ray-cast or shape cast, need some gizmos to control the position of where those are-casted.\r\nSimilarly to the above node, these exist also: `AvatarController`, `CameraController`, etc... Each of those perform operations on the parent node, and need a gizmo to do it. All of them just extend `Node`.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSince there is no way to add a 3D gizmo for a node that is a child of a `Node`. I would be forced to make those nodes inherit `Node3D` but those nodes are not supposed to have a meaning in a 3D world alone so it would just be misleading.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently the `Node3DEditorPlugin` cast the object to the `Node3D`:\r\n```c++\r\nvoid Node3DEditorPlugin::edit(Object *p_object) {\r\n\tspatial_editor->edit(Object::cast_to<Node3D>(p_object));\r\n}\r\n```\r\nHowever, we could change it so to cast to just a `Node`. Each `EditorNode3DGizmo` will receive the `Node` instead of `Node3D` and then each gizmo will cast it to the preferred type (as is currently).\r\n\r\nSo we would pass from:\r\n```cpp\r\nvoid MeshInstance3DGizmoPlugin::redraw(EditorNode3DGizmo *p_gizmo) {\r\n\tMeshInstance3D *mesh = Object::cast_to<MeshInstance3D>(p_gizmo->get_spatial_node());\r\n```\r\nto\r\n```cpp\r\nvoid MeshInstance3DGizmoPlugin::redraw(EditorNode3DGizmo *p_gizmo) {\r\n\tMeshInstance3D *mesh = Object::cast_to<MeshInstance3D>(p_gizmo->get_node());\r\n```\r\nAs you can see, the code change is minimal, but allows to also have Gizmos for any type of `Node`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea is to change the `Node3DEditorPlugin` so to cast the object to the `Node`:\r\n```c++\r\nvoid Node3DEditorPlugin::edit(Object *p_object) {\r\n\tspatial_editor->edit(Object::cast_to<Node>(p_object));\r\n}\r\n```\r\nand then move these methods https://github.com/godotengine/godot/blob/master/scene/3d/node_3d.h#L153-L156 into the `Node` class.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot unfortunately because you still need a `Node3D`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a change part of the core editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1674/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1673",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1673/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1673/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1673/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1673",
    "id": 722701421,
    "node_id": "MDU6SXNzdWU3MjI3MDE0MjE=",
    "number": 1673,
    "title": "Add _script_init() virtual method in GDScript",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-15T21:55:35Z",
    "updated_at": "2020-10-16T07:10:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGDScript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI noticed that I often would like to have a method that is called only once before any `_init()` called (and usually after all the methods and script variables declared by the user in the script code have been created).\r\n\r\n- This would be useful in order to do some **_initialization before creating any object_**. This initialization could be based on script properties, constants, and methods (declared in the script by user).\r\n\r\n- This could also be used, for example, for **_setting default values_** ​​for variables in case the default value of a variable requires some preliminary calculations.\r\nThen there is no need to calculate this value elsewhere, or (even worse) whenever an object is created in `_init()`\r\n\r\n\r\n- This could possibly allow _**setting the constants values**_ (of any type, such as strings, integers, etc.) in this method, which cannot be done from other methods, such as `_init`\r\n\r\n- It would be convenient when doing some complex preliminary initialization exactly **_where it should be_** - in the script code, in a separate method.\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding `_script_init()` virtual method would overcome the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```gdscript\r\nvar number: int\r\nconst text = ''\r\n\r\nfunc _script_init(script:GDScript)->void:\r\n    #will be called only once when current script is created (loaded?)\r\n    if 'my_signal' in script.get_script_signal_list(): #<--pseudocode\r\n        number = 1 #setting default var\r\n        text = 'hello' #maybe even setting a constant value?\r\n\r\n```\r\nThat is in `_script_init()`, we do not yet know the object that will be created using `script.new()`, but we already know the script object itself (passed as `script` arg) and we can work with it, for example, get a list of script methods, properties and signals declared by the user\r\n\r\nTo some extent, `_script_init()` is similar to Python `__new__()`, but no need for the kind of flexibility that py `__new__()` has.\r\nSo maybe it could be called `_script_new()` instead.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere are work-rounds, but they all at least obfuscate the code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n[_gdscript feature_]",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1673/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1672",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1672/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1672/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1672/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1672",
    "id": 722474054,
    "node_id": "MDU6SXNzdWU3MjI0NzQwNTQ=",
    "number": 1672,
    "title": "Allow renaming bones and blendshapes",
    "user": {
      "login": "lyuma",
      "id": 39946030,
      "node_id": "MDQ6VXNlcjM5OTQ2MDMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39946030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyuma",
      "html_url": "https://github.com/lyuma",
      "followers_url": "https://api.github.com/users/lyuma/followers",
      "following_url": "https://api.github.com/users/lyuma/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyuma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyuma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyuma/subscriptions",
      "organizations_url": "https://api.github.com/users/lyuma/orgs",
      "repos_url": "https://api.github.com/users/lyuma/repos",
      "events_url": "https://api.github.com/users/lyuma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyuma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-15T16:11:10Z",
    "updated_at": "2020-10-15T16:33:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nImporter for a custom glTF extension, VRM\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe glTF core spec does not define a way to set blendshape names. VRM offers a means for normalized blend shape definitions. We wish to apply these to the model.\r\nAdditionally, Godot does not define a normalized humanoid definition a la Unity's Mecanim. Rig normalization is an extension provided by VRM. We need to apply these renames to the skeleton.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe feature is to allow changing the bone names and blendshape names, such as those provided by the core glTF importer.\r\n\r\nIn my implementation, after learning information provided by the VRM extension, I am able to edit the bone names and blendshape names *without* doing error prone work involving recreating the mesh or skeleton from within GDScript.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nPR available here: https://github.com/godotengine/godot/pull/42827\r\n\r\nSample project is attached to the PR\r\nGDScript sample: https://gist.github.com/lyuma/c707c74486a74112bc5a2791dda92154\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt will take more than a few lines of script: the workaround requires the entire skeleton and the entire mesh surfaces to be recreated.\r\n\r\nAdditionally, as one of our use-cases may involve runtime import of VRM, the workaround to recreate all mesh arrays may create a performance bottleneck.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, because Skeleton3D and ArrayMesh classes are core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1672/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1670",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1670/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1670/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1670/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1670",
    "id": 722198420,
    "node_id": "MDU6SXNzdWU3MjIxOTg0MjA=",
    "number": 1670,
    "title": "Add a method to apply transparency on rendered result instead of individual components",
    "user": {
      "login": "Xascoria",
      "id": 59613709,
      "node_id": "MDQ6VXNlcjU5NjEzNzA5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59613709?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xascoria",
      "html_url": "https://github.com/Xascoria",
      "followers_url": "https://api.github.com/users/Xascoria/followers",
      "following_url": "https://api.github.com/users/Xascoria/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xascoria/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xascoria/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xascoria/subscriptions",
      "organizations_url": "https://api.github.com/users/Xascoria/orgs",
      "repos_url": "https://api.github.com/users/Xascoria/repos",
      "events_url": "https://api.github.com/users/Xascoria/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xascoria/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-15T10:16:22Z",
    "updated_at": "2020-10-28T21:00:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nn/a\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt is quite a common problem that when rendering with transparency, shadows, and outlines, the wanted result is too combine all the visible component in an non-opaque state and then give them transparency and shadows instead of giving them individually, which would create overlapping areas and exposes unwanted details in the final result.\r\n\r\nHere's an example from a Unity shader to illustrate my point:\r\nhttps://ocias.com/blog/wp-content/uploads/2016/06/UnityIssues-1.gif\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAllow graphical components to be grouped and rendered together first, then be applied effects such as outline or transparency.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nMaybe allow a node to have a setting where all its children are rendered as one component and then whatever effects that's applied to the parent is applied to all of them at once, or maybe there's a better way but this is what I can think of now.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere is workaround, which involves relying on layering viewports and then apply transparency/outline on the rendered result, but that's not something that can be done in a few lines of script and super over-killed when all you need is to group a couple objects together.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is a really common problem. See https://cdn.discordapp.com/attachments/212250894228652034/766234248759083058/unknown.png",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1670/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1669",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1669/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1669/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1669/events",
    "html_url": "https://github.com/godotengine/godot-proposals/pull/1669",
    "id": 721888456,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNzMzNTgz",
    "number": 1669,
    "title": "Add a template for meta proposals",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-15T00:52:43Z",
    "updated_at": "2020-11-14T13:27:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/pulls/1669",
      "html_url": "https://github.com/godotengine/godot-proposals/pull/1669",
      "diff_url": "https://github.com/godotengine/godot-proposals/pull/1669.diff",
      "patch_url": "https://github.com/godotengine/godot-proposals/pull/1669.patch"
    },
    "body": "Fixes #1667 \r\n\r\nThe template looks as follows:\r\n\r\n> \\<!--\r\n> Please fill in *all* the questions below and don't remove any of them.\r\n> Issues not following the template below will not be considered.\r\n> \\-->\r\n> \r\n> \\<!--\r\n> This template is for meta issues only. If you have an issue with the Godot Engine itself, select the proposal issue type.\r\n> \\-->\r\n> \r\n> **Describe the problem or limitation you are having with this repository:**\r\n> \r\n> **Describe the modification / enhancement to this repository and how it helps to overcome the problem or limitation:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1668",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1668/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1668/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1668/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1668",
    "id": 721883583,
    "node_id": "MDU6SXNzdWU3MjE4ODM1ODM=",
    "number": 1668,
    "title": "Centralized method for getting animation parameters for large animation trees",
    "user": {
      "login": "kingoftheconnors",
      "id": 23728939,
      "node_id": "MDQ6VXNlcjIzNzI4OTM5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/23728939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kingoftheconnors",
      "html_url": "https://github.com/kingoftheconnors",
      "followers_url": "https://api.github.com/users/kingoftheconnors/followers",
      "following_url": "https://api.github.com/users/kingoftheconnors/following{/other_user}",
      "gists_url": "https://api.github.com/users/kingoftheconnors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kingoftheconnors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kingoftheconnors/subscriptions",
      "organizations_url": "https://api.github.com/users/kingoftheconnors/orgs",
      "repos_url": "https://api.github.com/users/kingoftheconnors/repos",
      "events_url": "https://api.github.com/users/kingoftheconnors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kingoftheconnors/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-15T00:36:58Z",
    "updated_at": "2020-10-26T23:14:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA Super-Mario-style 2D platformer. The player can have one of five different powers and needs to have a full set of movement animations for each one. Since this is a 2D platformer, all animations are separately created sprites that are animated through frames. As a developer, I have to concoct a way to add new animations (such as crouching) that are used in all 5 powers, while also being able to add new powers (such as a Tanooki-suit-like) if requirements change.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nProblem 1:\r\nMy best solution for this was using one state machine and make multiple 1D blend spaces based on power num:\r\n![image](https://user-images.githubusercontent.com/23728939/96056495-b9ab8700-0e54-11eb-9207-95e054b9d76d.png)\r\n\r\n![powers](https://user-images.githubusercontent.com/23728939/96056673-3474a200-0e55-11eb-83ee-d2a651b82615.gif)\r\n\r\nThis could be good, but it's bad. Tragically bad. Because every animation has its own blend position that has to be changed, so when a power changes I need to update every single one.\r\n![image](https://user-images.githubusercontent.com/23728939/96057115-3428d680-0e56-11eb-8777-79435fbf639f.png)\r\n\r\nThe other main way to solve the many-powers problem is to use five different state machines, but that runs into the same problem when you have to update the transition conditions on all five state machines so that when powers change, the trees will remain synced.\r\n\r\n![image](https://user-images.githubusercontent.com/23728939/96059074-f8444000-0e5a-11eb-9aa5-f44cc19239f2.png)\r\n\r\n\r\n**In both cases, a lack of being able to centrally call several parameters makes it difficult to implement complex animation trees.**\r\n\r\nProblem 2:\r\nUpdating the animation tree can have cascading problems in code that rely on animator parameters. If a user moves an AnimationNode into another one (such as I did in this [question](godotengine.org/qa/84117/adding-a-pre-existing-animation-playback-to-another)), they will have to update all `animator[\"parameters/conditionName\"] = x` commands. The existing setup forces code to **assume** the animation tree hierarchy, which can cause problems down the line.\r\n\r\n...\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAnimationRootNodes (such as playbacks) should have a basic-use function to set all playback node parameters by name, similar to `SceneTree.set_group`\r\n\r\n> void set_group(group: String, property: String, value: Variant)\r\n>\r\n> Sets the given property to value on all members of the given group.\r\n\r\nThe animation tree would be something similar (but not named set_parameter because that already exists in AnimationNode):\r\n\r\n> void set_all_parameters(parameter_name: String, value: Variant)\r\n>\r\n> Sets the given parameter to value on all animation playback nodes of the given playback node hierarchy.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe function would work recursively: A method on AnimationNode that calls all child AnimationNodes that are contained inside it. The state machine method would check all condition parameters before passing the method to all animations, state machines and blend spaces it contains.\r\n\r\n![image](https://user-images.githubusercontent.com/23728939/96059804-e06dbb80-0e5c-11eb-8e66-042f914e85ca.png)\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement can be used for many blend spaces, trees, and state machines that use similar inputs, such as taking in a player's rotation in a 1D blend space for 3D games. This would be the new go-to way to update animation variables, due to its flexibility, and would also allow for centrally updating parallel variables in AnimationRootNodes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe ability to call parameters from a base node increases robustness of animation trees, as it allows users to move an AnimationNode into another one without having to update all `animator[\"parameters/conditionName\"] = x` commands. This is a necessary feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1668/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1667",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1667/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1667/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1667/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1667",
    "id": 721757257,
    "node_id": "MDU6SXNzdWU3MjE3NTcyNTc=",
    "number": 1667,
    "title": "Add a template for meta proposals",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-14T20:26:25Z",
    "updated_at": "2020-10-16T00:38:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n[_meta proposal_]\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe current template is not quite suitable for creating meta proposals.\r\nFor example\r\n\r\n- _Describe the project you are working on_\r\nMeta proposals rarely refer to the project the author is working on.\r\nSo in most cases this is unnecessary information for understanding a meta proposal\r\n\r\n- _Is there a reason why this should be core and not an add-on in the asset library?:_\r\nMeta proposals are not related to the engine and addons, this question is definitely superfluous imo.\r\n\r\nThis leads to the following problems:\r\n\r\n1) This can be confusing.\r\nThis does not contribute to the easy formulation of the proposals, although a template is intended for this.\r\n\r\n2) It looks strange to an uninformed user who wants to create a proposal.\r\nHe can see questions in the template that are answered like `N/A` and he may think that skipping questions is a normal practice when creating proposals.\r\n\r\n3) It makes you wonder how appropriate it is to create meta proposals here.\r\nThis leads to unnecessary waste of time figuring out is it ok to create meta proposals here (I asked about this myself, but did not receive a clear answer).\r\n\r\nAt the moment [the number of meta proposals](https://github.com/godotengine/godot-proposals/labels/meta) is relatively small, but as their number grows, these problems will likely be more obvious.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUsing a separate template for metaproposals could solve the problem.\r\n1) questions will not look out of place, it will encourage more comfortable meta-proposal creation\r\n2) the template will not lead to misunderstanding and unintentional deterioration of the quality of metaproposals\r\n3) the template will not raise questions and doubts and will not lead to unnecessary waste of time associated with this.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe meta template could be as follows:\r\n\r\n1) Describe the problem or limitation you are having:\r\n2) Describe the feature / enhancement and how it helps to overcome the problem or limitation:\r\n3) Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\r\n\r\nI also see some nice bonuses:\r\nfor example, when creating a proposal with a meta template, the `meta` label can be automatically added (I believe this is possible to implement).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n[_meta proposal_]\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n[_meta proposal_]",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1667/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1666",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1666/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1666/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1666/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1666",
    "id": 721733515,
    "node_id": "MDU6SXNzdWU3MjE3MzM1MTU=",
    "number": 1666,
    "title": "Add a project setting to force an integer scale for window stretch",
    "user": {
      "login": "Yukitty",
      "id": 8621403,
      "node_id": "MDQ6VXNlcjg2MjE0MDM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8621403?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Yukitty",
      "html_url": "https://github.com/Yukitty",
      "followers_url": "https://api.github.com/users/Yukitty/followers",
      "following_url": "https://api.github.com/users/Yukitty/following{/other_user}",
      "gists_url": "https://api.github.com/users/Yukitty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Yukitty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Yukitty/subscriptions",
      "organizations_url": "https://api.github.com/users/Yukitty/orgs",
      "repos_url": "https://api.github.com/users/Yukitty/repos",
      "events_url": "https://api.github.com/users/Yukitty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Yukitty/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-10-14T19:47:52Z",
    "updated_at": "2020-11-19T22:25:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nLow resolution 2D pixel art games.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBase engine stretch modes can preserve aspect ratio, but do not attempt to guarantee an even and square pixel grid.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nNew project setting checkbox located at `display/window/stretch` labelled \"Force Integer Scale\" (or similar) which changes stretch behavior to attempt preservation of square pixels.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI've already produced the feature for 3.2.X here: Yukitty/godot@42af4d50e696e790e33a0d9347fbe55e06da13e8\r\nI am personally using this feature for all current and future 2D projects, as I do not produce or use high resolution art assets.\r\n\r\nIdeal test project settings:\r\n* `display/window/size/width` and `height` set to something low, like 256x224 or 320x240\r\n(I am leaving `display/window/size/test_width` and `test_height` set to 1280x720 even in production)\r\n* `display/window/size/resizable` On.\r\n* `display/window/stretch/mode` 2d\r\n* Use pixel art assets (Filter OFF) and pixel snap to produce a scene.\r\n\r\nTest fiddling with these settings:\r\n* `display/window/stretch/integer_scale` (the new feature)\r\n* `display/window/stretch/aspect` (different behaviors per setting)\r\n\r\nDemonstrated behavior while Integer Scale is active:\r\n* If `display/window/stretch/aspect` is set to `Keep`, the game render will be letterboxed on ALL sides as the window expands, jumping up to the next available multiple of the base resolution _only_ when both the window's width and height are adequate to support it.\r\n* If aspect is set to `Keep Width` or `Keep Height`, the game window will stretch vertically or horizontally, respectively, to almost fill the available space (discarding fractional pixels to preserve pixel accuracy). New letterbox bars will appear on the \"kept\" sides, which only jumps to resolution multiples.\r\n* If aspect is set to `Expand`, the game's aspect ratio will expand in both directions simultaneously, which is another entirely new behavior.\r\n* In all cases, if integer scale is checked, the pixels should be square, at all resolutions and window sizes, at all times. There may be minor rounding errors in my implementation, but the result is still notably better.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nAlmost. The primary blocker preventing a fully scripted solution from being viable is actually the font overdraw setting, which cannot be accessed outside of the SceneTree's root viewport stretch project settings, and is crucial for making dynamic fonts look good on a low resolution screen that's been scaled up.\r\n\r\nEven avoiding that issue by using a pixel font, this behavior requires an obscure script and is not easily accessible to many users, as it's not a native setting of Viewports nor ViewportContainers that would display them.\r\n\r\nThere may be enough potential users to warrant a built-in simple setting, the same users of the Pixel Snap setting which currently work around this issue differently, by limiting the window size to specific game-enforced resolutions, or disabling the stretch feature entirely and writing it off as unusable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI can't currently fully replicate this behavior as an add-on due to the font overdraw, as described above.\r\nOtherwise it may be viable, though it seems like an awfully minor feature to bury in the asset library. 🤔\r\nIt seems more suitably described as a base engine behavior rather than a key feature specific to any particular game or genre.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1666/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1664",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1664/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1664/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1664/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1664",
    "id": 721692748,
    "node_id": "MDU6SXNzdWU3MjE2OTI3NDg=",
    "number": 1664,
    "title": "Resolve inconsistent dictionary declaration syntax",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 6,
    "created_at": "2020-10-14T18:40:55Z",
    "updated_at": "2021-01-05T00:15:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nn/a\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot has two ways of declaring dictionaries. The problem is, they're mutually incompatible and provide extra scope for confusion and bug creation.\r\n\r\nConsider the follow script:\r\n```\r\nextends Sprite\r\n\r\nvar dict1 = {\r\n    key1: 1,\r\n    key2: 1\r\n}\r\n\r\nvar dict2 = {\r\n    key1= 1,\r\n    key2= 1\r\n}\r\n```\r\n\r\nDict1 will cause an exception because `key1` is referencing an undeclared variable. Whereas dict2 treats `key1` as a string key and will work fine.\r\n\r\nInconsistency is one of the worst possible things you can have in a programming language (see also: PHP).\r\n\r\nThis isn't hypothetical either, it just bit me on my first time using them! (Partly due to docs issues, but they'll go in the appropriate tracker), and I can all but guarantee it'll get me again.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI don't have any preference for how to solve this, but I'd suggest one of the following:\r\na) get rid of one of the methods of declaring dicts\r\nb) Ensure both methods treat unquoted strings the same way\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBoth of the code snippets provided above should work the exact same way.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nn/a\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nFundamental GDScript language issue\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1664/reactions",
      "total_count": 5,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1663",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1663/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1663/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1663/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1663",
    "id": 721529440,
    "node_id": "MDU6SXNzdWU3MjE1Mjk0NDA=",
    "number": 1663,
    "title": "Update Issue Templates to facilitate opening Godot API Issues in the right places",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-14T14:50:10Z",
    "updated_at": "2020-10-14T16:05:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWanted to open an Issue for a Godot API change.\r\n\r\nGodot docs aren't clear about where they should go (godotengine/godot-docs#4269), but even with that clarification, people who go to godotengine/godot and attempt to create an Issue won't see anything about the class reference. They see 'bug report' and 'security vulnerability' as the only available options and the documentation-related tickets linking to `godot-docs`, sending them to the wrong place. There, they see \"enhancement request\" to improve documentation, and that is likely what they would choose, since it's the only thing that seems applicable. However, that is the wrong place.\r\n\r\nHad I not manually looked for `documentation`-tagged Issues in godotengine/godot, I wouldn't have had any official text anywhere indicating where I should create the Issue. That kind of confusion can inhibit or outright prevent new users from opening issues.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUpdate the issue templates in `godotengine/godot` and `godotengine/godot-docs` to specifically point people to the right places.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nChange the file. N/A\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nN/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1663/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1662",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1662/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1662/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1662/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1662",
    "id": 721399815,
    "node_id": "MDU6SXNzdWU3MjEzOTk4MTU=",
    "number": 1662,
    "title": "Provide consistent default directory paths for documentation and editor icons in C++ modules",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-14T12:05:12Z",
    "updated_at": "2020-10-14T15:04:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine extension.\r\n[Custom modules documentation](https://docs.godotengine.org/en/latest/development/cpp/custom_modules_in_cpp.html) for writing module documentation and editor icons.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHave to configure the path for documentation such as `doc_classes` or `doc` in almost every C++ module I create.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nProvide default directory path for C++ modules documentation. There's no absolute need to define the path in `config.py`, and we could then remove `get_doc_path` in various built-in modules as well that way. Editor icons already provide default path.\r\n\r\nRename the default modules documentation directory from `doc_classes` to `doc/classes` as a default directory name for collecting modules documentation. This would be consistent with Godot's `doc` top-level directory.\r\n\r\nThe idea here is that this should ideally match the directory structure of Godot source. So, for documentation, the default path would be `modules/x/doc/classes` and for icons that would be `modules/x/editor/icons`.\r\n\r\nFor instance, see https://github.com/Zylann/godot_voxel/blob/master/config.py.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUp to a pull request. I can do this myself. Potentially breaks compatibility, so 4.0 only.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis can be configured with `config.py::get_doc_path()` and `config.py::get_icons_path()` in modules, but must be done every time for documentation currently.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n`SConstruct` has to be modified for this, which is pretty core for the build system.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1662/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1661",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1661/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1661/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1661/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1661",
    "id": 721341426,
    "node_id": "MDU6SXNzdWU3MjEzNDE0MjY=",
    "number": 1661,
    "title": "Add Crop Position to the Texture Atlas importer",
    "user": {
      "login": "jesperkondrup",
      "id": 24936603,
      "node_id": "MDQ6VXNlcjI0OTM2NjAz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24936603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesperkondrup",
      "html_url": "https://github.com/jesperkondrup",
      "followers_url": "https://api.github.com/users/jesperkondrup/followers",
      "following_url": "https://api.github.com/users/jesperkondrup/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesperkondrup/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesperkondrup/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesperkondrup/subscriptions",
      "organizations_url": "https://api.github.com/users/jesperkondrup/orgs",
      "repos_url": "https://api.github.com/users/jesperkondrup/repos",
      "events_url": "https://api.github.com/users/jesperkondrup/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesperkondrup/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-14T10:33:50Z",
    "updated_at": "2020-10-14T11:01:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWe are currently working on several 2D games that should be able to run on very old hardware and therefore we rely on sprite atlases to optimize performance.\r\n\r\nCurrently for all our projects we use Texture Packer by Code and Web. One of the functions we use a lot in Texture Packer is the trim mode: \"Crop, flush position\". This basically just removes the transparent pixels and discards the old resolution of the image, resulting in a cropped image with the bounding box set to the border pixels. \r\n\r\nThis actually works perfectly but we don't like being dependent on a third party plugin that often needs to be updated when a new version of godot is available. Therefore it would be great if this functionality was available native in godot so we could remove texture packer entirely from our pipeline. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe newly added feature \"import as TextureAtlas, Region\"  in godot 3.2 is very close to what we are looking for but it does not crop the position. If we use the blue circle as an example: The circle is not placed in the center of the image and it has many transparent pixels around it. This will result in a bounding box that's not centered and also bigger than the image (see image below).\r\n\r\n![image](https://user-images.githubusercontent.com/24936603/95955614-66f2b080-0dfd-11eb-8624-b0caccbd85cc.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWe propose to add a check mark \"Crop position\" in the Texture Atlas importer window (see image below).\r\nWe should not remove any of the existing functionality since not having the position cropped could be preferred in many cases.\r\n\r\nSetting the check mark \"Crop Position\" (not sure about the name) should result in the orange bounding box in Godot being set to the border of the pixels in the sprite (see image). \r\n\r\n![image](https://user-images.githubusercontent.com/24936603/95958269-314fc680-0e01-11eb-87d3-3935eef0508f.png)\r\n \r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSelect a number of sprites in a folder and go to the import tab. Chose import as TextureAtlas, set the location of the atlas file, import mode should be set to region and optionally you can set a check mark in the \"Crop position\".  \r\n\r\n![image](https://user-images.githubusercontent.com/24936603/95960450-09ae2d80-0e04-11eb-896c-3f466a840a0c.png)\r\n\r\nGodot is almost there:\r\nIt does actually seem like the \"code\" we are requesting is already in godot and you could use it as work around in some way but it's very cumbersome and definitely not an ideal solution. Here is how it currently could work (see image below).\r\n\r\n1. Create your sprite atlas using the region setting. \r\n2. Drag the entire atlas.png it into the scene.\r\n3. set the \"region\" check mark ON. \r\n4. Now go to the Texture Region window and chose \"Auto slice\".\r\n5. Pick the sprite you want. \r\n\r\nThis actually crops the image in the way we want and the orange pivot square is set perfectly. \r\nBut this is not an ideal solution. You cannot search for images in the file system, it involves many steps and furthermore if you update one of the sprites it will not update the new position in the auto slice automatically, so you have to go into each sprite and update them.\r\n\r\n![image](https://user-images.githubusercontent.com/24936603/95967075-22badc80-0e0c-11eb-95a3-05ac5619dc33.png)\r\n\r\nEdit: We are aware that you can also select \"2D Mesh\" in the TextureAtlas import settings but 2D Mesh does also not crop and it is not batched like the \"Region\" setting.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWe believe that this feature could potentially help a lot of artists when working with sprite sheets. Since we are using the native TextureAtlas import setting in godot it would not be a good solution to add a custom script to crop the position. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWe already have many games relying on this feature and in the future we are also going to use this feature extensively. So it would definitely be easier if this is built-in instead of an add-on that has to be updated. We also believe that good sprite atlas support should be a basic feature in godot, so developers don't need to rely on third party plugins.\r\n\r\nWe hope this post explains what we are looking for, thanks : )\r\n\r\n\r\n\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1661/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1660",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1660/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1660/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1660/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1660",
    "id": 720892972,
    "node_id": "MDU6SXNzdWU3MjA4OTI5NzI=",
    "number": 1660,
    "title": "Add functions to detect the player's hardware.",
    "user": {
      "login": "drwhut",
      "id": 13645454,
      "node_id": "MDQ6VXNlcjEzNjQ1NDU0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13645454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drwhut",
      "html_url": "https://github.com/drwhut",
      "followers_url": "https://api.github.com/users/drwhut/followers",
      "following_url": "https://api.github.com/users/drwhut/following{/other_user}",
      "gists_url": "https://api.github.com/users/drwhut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drwhut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drwhut/subscriptions",
      "organizations_url": "https://api.github.com/users/drwhut/orgs",
      "repos_url": "https://api.github.com/users/drwhut/repos",
      "events_url": "https://api.github.com/users/drwhut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drwhut/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-13T21:56:43Z",
    "updated_at": "2020-10-14T12:59:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n[OpenTabletop](https://github.com/drwhut/open-tabletop) is a physics-based multiplayer 3D tabletop simulation game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now, when the player first launches the game, the video settings are set to their lowest by default (e.g. MSAA is set to disabled). This is because there is no way to determine what hardware the player has to set the video options accordingly.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExpose function(s) to GDScript that allows the programmer to determine either what hardware the engine is running on, or how powerful the hardware is. This way, I can set the video settings on startup based on the player's hardware.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nvar cpu = OS.get_hardware_model(OS.HARDWARE_CPU)\r\nprint(cpu.name)\r\nif cpu.max_freq >= GOOD_CPU_FREQ:\r\n    set_high_physics_clock()\r\n\r\nvar graphics = OS.get_hardware_model(OS.HARDWARE_DISPLAY)\r\nprint(graphics.name)\r\nif graphics.max_freq >= GOOD_GPU_FREQ:\r\n    set_high_video_settings()\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, this would most likely involve either making a C++ module or a NativeLibrary, with bindings to another library that already has this functionality. This would not be trivial for a majority of Godot developers.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMost modern games pre-configure their settings based on the player's hardware. This is a fairly common feature, so many developers who are making games would also benefit from these functions, in more ways that what I have explained above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1659",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1659/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1659/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1659/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1659",
    "id": 720586163,
    "node_id": "MDU6SXNzdWU3MjA1ODYxNjM=",
    "number": 1659,
    "title": "Require explicit confirmation for reloading plugin scripts",
    "user": {
      "login": "pycbouh",
      "id": 11782833,
      "node_id": "MDQ6VXNlcjExNzgyODMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11782833?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pycbouh",
      "html_url": "https://github.com/pycbouh",
      "followers_url": "https://api.github.com/users/pycbouh/followers",
      "following_url": "https://api.github.com/users/pycbouh/following{/other_user}",
      "gists_url": "https://api.github.com/users/pycbouh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pycbouh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pycbouh/subscriptions",
      "organizations_url": "https://api.github.com/users/pycbouh/orgs",
      "repos_url": "https://api.github.com/users/pycbouh/repos",
      "events_url": "https://api.github.com/users/pycbouh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pycbouh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-10-13T17:34:30Z",
    "updated_at": "2020-10-15T09:44:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot plugins, also helping others with their plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn my experience, the most common issue people face when starting to make their own plugins is with hot-reloading scripts. This is especially problematic for the main plugin script.\r\n\r\nThe issue is that any change, even insignificant or meaningless change (like a new empty line), causes the script to reload and the references the previous instance have had are then lost. For a person inexperienced in plugin development this results in confusing errors about null pointers to objects that are supposed to exist. And it is often very hard to explain the cause of the issue to such users and suggest a workaround approach to avoid those issues. I've tried dozens of times on Discord and people don't quite get it more often than not.\r\n\r\nAnd as an experienced plugin developer you still have to keep in mind the need to disable the plugin before saving scripts. So even if you are familiar with the workaround, it is still annoying.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere are possibly multiple ways this can be solved. Actually keeping and restoring references for example would be ideal, though may not always be possible (see #1012, godotengine/godot#5969). Maybe we need a separate keyword to properly handle those scripts too (see #900). It should also be noted that while the main script is always affected, some other scripts may not be affected by this problem at times, depending on the implementation detail of a particular plugin.\r\n\r\nI suggest we track changes to the script files in `res://addons` folder and instead of instantly reloading scripts we notify the user that the scripts were changed and that the plugin must be reloaded. The user must confirm the action and the editor should disable the plugin, apply the changes and then reinstate it. This may be too blunt of an approach, but a more sophisticated solution to any plugin problem seems to take a lot of time to discuss and implement as we don't have a dedicated core dev on the matter. So this may actually address the issue quicker.\r\n\r\nAs for the usability, debugging editor plugins is hard as it is, so an additional confirmation I can only see as beneficial.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not completely sure what causes the hot-reloading in this case. I assume that for tool scripts the editor just updates the script resource attached to some plugin-related node or some similar approach. In that case I'd postpose that script update and instead cache the updated scripts until the user confirms the update for a plugin. Updates are stacked and grouped by plugin, so many unconfirmed script changes within any plugin must only require one confirmation.\r\n\r\nAs far as UI goes, a toast would be nice, but a bottom panel may be introduced at the moment. It should be a list of plugins that have changes not yet applied to the live version. There can also be an option to keep the old behavior and hot-reload all scripts as we do now, if someone prefers it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI guess a plugin can be made to watch `.gd` files in the `res://addons` folder and toggle related plugins, but that's unreasonable in my opinion.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is an issue with the way editor handles plugin scripts, so it should be changed in the editor, but possibly optional.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1659/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1657",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1657/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1657/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1657/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1657",
    "id": 720538089,
    "node_id": "MDU6SXNzdWU3MjA1MzgwODk=",
    "number": 1657,
    "title": "Add Global Position to the inspector (for Control/Node2D)",
    "user": {
      "login": "DroningSounds",
      "id": 72815446,
      "node_id": "MDQ6VXNlcjcyODE1NDQ2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/72815446?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DroningSounds",
      "html_url": "https://github.com/DroningSounds",
      "followers_url": "https://api.github.com/users/DroningSounds/followers",
      "following_url": "https://api.github.com/users/DroningSounds/following{/other_user}",
      "gists_url": "https://api.github.com/users/DroningSounds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DroningSounds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DroningSounds/subscriptions",
      "organizations_url": "https://api.github.com/users/DroningSounds/orgs",
      "repos_url": "https://api.github.com/users/DroningSounds/repos",
      "events_url": "https://api.github.com/users/DroningSounds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DroningSounds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-13T16:53:45Z",
    "updated_at": "2020-10-13T17:56:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n(Applies to any project)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe global position of `Control` and `Node2D` nodes is not visible/editable in the inspector.\r\nThis lead to some confusion about where a node actually was in the scene, as discussed here:\r\nhttps://www.reddit.com/r/godot/comments/jackgq/why_isnt_the_global_position_property_in_the/\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd `rect_global_position` (`Control`) and `global_position` (`Node2D`) to the inspector.\r\n(read only?)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![GlobalPosition](https://user-images.githubusercontent.com/72815446/95890982-13735a80-0d4a-11eb-9442-f5ae62996938.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure how often it would be used, but it could help diagnose some bugs related to node positions.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nLocal position is already in the inspector, so it only makes sense for global position to be there, too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1657/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1656",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1656/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1656/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1656/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1656",
    "id": 720324282,
    "node_id": "MDU6SXNzdWU3MjAzMjQyODI=",
    "number": 1656,
    "title": "Make drag-and-droping a branch from a scene to the FileSystem tab trigger the \"save branch as scene\" dialog.",
    "user": {
      "login": "bonbonmiel",
      "id": 71937306,
      "node_id": "MDQ6VXNlcjcxOTM3MzA2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/71937306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bonbonmiel",
      "html_url": "https://github.com/bonbonmiel",
      "followers_url": "https://api.github.com/users/bonbonmiel/followers",
      "following_url": "https://api.github.com/users/bonbonmiel/following{/other_user}",
      "gists_url": "https://api.github.com/users/bonbonmiel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bonbonmiel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bonbonmiel/subscriptions",
      "organizations_url": "https://api.github.com/users/bonbonmiel/orgs",
      "repos_url": "https://api.github.com/users/bonbonmiel/repos",
      "events_url": "https://api.github.com/users/bonbonmiel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bonbonmiel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-13T14:19:38Z",
    "updated_at": "2020-10-13T14:42:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI find it tedious to use the current \"save branch as scene\" dialog because:\r\n1. it does not provides a tree view like the FS tab does,\r\n2. the default location can be far from where I want to go.\r\n\r\nAll this sometimes makes it difficult to effectively navigate to the desired place.\r\n\r\nOn the other hand, I always have the FS tab showing the hierarchy of what I am working on and the components I am using.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt is possible to instanciate scenes by dropping them in the scene from the FileSystem into the scene hierarchy.\r\nI propose that this behavior be completed with the reciprocal action: draging from the scene and drop to the FS would invoke the save branch as scene dialog, with the good position already set and just the name to edit.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nnot sure if this can be an addon.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is part of the editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1656/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1655",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1655/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1655/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1655/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1655",
    "id": 720254861,
    "node_id": "MDU6SXNzdWU3MjAyNTQ4NjE=",
    "number": 1655,
    "title": "Add a constant Call hint display option",
    "user": {
      "login": "mrjustaguy",
      "id": 50302479,
      "node_id": "MDQ6VXNlcjUwMzAyNDc5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50302479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjustaguy",
      "html_url": "https://github.com/mrjustaguy",
      "followers_url": "https://api.github.com/users/mrjustaguy/followers",
      "following_url": "https://api.github.com/users/mrjustaguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjustaguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjustaguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjustaguy/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjustaguy/orgs",
      "repos_url": "https://api.github.com/users/mrjustaguy/repos",
      "events_url": "https://api.github.com/users/mrjustaguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjustaguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-13T13:30:20Z",
    "updated_at": "2020-10-13T13:47:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nDoesn't matter specifically, General GDScript feature improvement\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrent Call Hints only appear for a short amount of time \r\n(as in they appear after you type in a function, for example I have declared a function \"funct1(someint:int,somefloat:float)\" and when i'm calling it in some other function, the call hint only appears the moment () are added to the function and is only displayed while there is no input but as soon as anything is done, the Call hint containing info saying what arguments it expects is gone.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding an editor setting to make a Call hint visible all the time for the current line (as in function) would make it easier to use the editor, as one would always see what a given function you are working on wants for it's arguments, how many it wants, and that sort of stuff.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSetting in Editor Settings for the GDScript editor to have Call Hints Visible all the time\r\n\r\nImplementation mockup:\r\nDisplay Call hint of the function within whose brackets the cursor is in\r\nSome Examples:\r\nnote - CURSOR == |\r\n\r\nFunct1(Funct2(),Funct3(|)) --> display Call hint for Funct3\r\n\r\nFunc1(|) --> display Call hint for Funct1\r\n\r\nFunct1(Funct2(),|) --> display Call hint for Funct1\r\n\r\nFunct1(Funct2(Funct3(),|)) --> display Call hint Funct2\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOnly workaround is to Read & remember the entire call hint before continuing with coding\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGDScript editor is a part of Godot, and call hints are already a part of the editor  ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1652",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1652/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1652/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1652/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1652",
    "id": 719084289,
    "node_id": "MDU6SXNzdWU3MTkwODQyODk=",
    "number": 1652,
    "title": "\"Reparent to New Node\" moves node unexpectedly in single-branch case.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-12T06:16:03Z",
    "updated_at": "2020-10-12T11:20:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nDocs for a Node Flexibility demonstration.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI was demonstrating the features available for manipulating node trees. \"Reparent\" I was used to, and it worked exactly as I suspected (similar to clicking and dragging a node). However, then I tried the \"Reparent to New Node\" option. I thought, \"Okay, this is going to just replace my selected node with the node I'm adding, and then make the selected node its child.\" So I did it, and all of a sudden, my node jumped to the bottom of the list. *surprised pikachu face*\r\n\r\nWhat I started with:\r\n\r\n![flexibility_lighted_area](https://user-images.githubusercontent.com/16217563/95711401-51785d80-0c28-11eb-9d5e-96819bf243ee.png)\r\n\r\nWhat I selected (choosing Camera2D):\r\n\r\n![flexibility_reparent_new_node](https://user-images.githubusercontent.com/16217563/95711418-589f6b80-0c28-11eb-880a-c3c0e6d0b1af.png)\r\n\r\nWhat I thought I would get:\r\n\r\n![flexibility_reparent_new_node_result](https://user-images.githubusercontent.com/16217563/95711449-6523c400-0c28-11eb-82d7-ff577517e19a.png)\r\n\r\nWhat I actually got:\r\n\r\n![flexibility_reparent_new_node_result_actual](https://user-images.githubusercontent.com/16217563/95711462-6b19a500-0c28-11eb-8443-624f9b81a8ce.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe behavior as it currently is makes perfect sense when you've selected multiple nodes in different subtrees and are reparenting all of the selected subtrees to a new node in a new subtree. This is the \"multi-top-node\" case that the source code accounts for. However, it leads to rather bizarre behavior when there is only one branch involved.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIn the case where there is only one top node in the selection, keep track of its indexed position relative to its siblings. After creating the new node, move it to that position. I have a PR solution ready-to-go.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI'm honestly not sure how often people use this utility, as I don't really use Godot all that much (yet), but it definitely threw me for a loop the first time I tried it, and I'll bet I'm not the only one. You *can* just move the node after-the-fact, but it still *feels* like a bug. In fact, I almost opened this as a bug report, but I think it's still *technically* an enhancement since everything is functioning as it should in a literal sense.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRequires internal changes to SceneTreeDock class in editor source code.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1651",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1651/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1651/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1651/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1651",
    "id": 718834816,
    "node_id": "MDU6SXNzdWU3MTg4MzQ4MTY=",
    "number": 1651,
    "title": "Add a normalmap property to Polygon2D",
    "user": {
      "login": "QbieShay",
      "id": 7917475,
      "node_id": "MDQ6VXNlcjc5MTc0NzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7917475?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QbieShay",
      "html_url": "https://github.com/QbieShay",
      "followers_url": "https://api.github.com/users/QbieShay/followers",
      "following_url": "https://api.github.com/users/QbieShay/following{/other_user}",
      "gists_url": "https://api.github.com/users/QbieShay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QbieShay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QbieShay/subscriptions",
      "organizations_url": "https://api.github.com/users/QbieShay/orgs",
      "repos_url": "https://api.github.com/users/QbieShay/repos",
      "events_url": "https://api.github.com/users/QbieShay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QbieShay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-11T13:19:42Z",
    "updated_at": "2020-11-07T02:21:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSprites support normalmaps, and canvas item shaders have already the property `NORMAL_TEXTURE` built-in.\r\nIt is possible to create a very simple shader that does normal maps for polygons, but the workflow isn't great, because one has to go and make the material unique for every polygon2D\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis is a UX enhancement for when using polygon2D and normal maps\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAdd a property normal map to both animated sprite and polygon2D\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around by making a custom shader, but the UX is pretty bad.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGodot already supports built-in normal map in the canvas item shader, and it is very odd that there is no property to make use of this for some of the 2D rendering nodes, while others have it (mesh2d and sprite).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1651/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1650",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1650/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1650/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1650/events",
    "html_url": "https://github.com/godotengine/godot-proposals/pull/1650",
    "id": 718817547,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxMTIzNjg3",
    "number": 1650,
    "title": "Clarify the rule regarding the requirement for filling out the template",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-11T11:39:07Z",
    "updated_at": "2020-11-14T13:27:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/pulls/1650",
      "html_url": "https://github.com/godotengine/godot-proposals/pull/1650",
      "diff_url": "https://github.com/godotengine/godot-proposals/pull/1650.diff",
      "patch_url": "https://github.com/godotengine/godot-proposals/pull/1650.patch"
    },
    "body": "Closes #1634.\r\n\r\nA similar suggestion was raised a year ago with no consensus reached in #39, but the general problem still persists as seen in #1634.\r\n\r\nThis PR clarifies that a proposal is evaluated by content, not structure (I hope that proposals are not evaluated by structure), so it's perfectly fine to omit the questions if they do not apply to a proposal. That said, if a proposal misses some *vital* information as suggested in the template, it may be closed indeed, but the proposal text can be anything as long as it's elaborate.\r\n\r\nAt least that's the way I'd like this to be. But do note that I haven't changed anything semantically, I believe this reflects the current situation more accurately than the former wording which is a bit unwelcoming in contrast.\r\n\r\nAlso, this elaborates on what kind of proposal is seen as proper, because the \"proper\" word is too vague, in my opinion.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1650/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1649",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1649/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1649/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1649/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1649",
    "id": 718797211,
    "node_id": "MDU6SXNzdWU3MTg3OTcyMTE=",
    "number": 1649,
    "title": "Rename \"Singleton\" column in Project Settings / AutoLoad to \"Global\".",
    "user": {
      "login": "hilfazer",
      "id": 29497869,
      "node_id": "MDQ6VXNlcjI5NDk3ODY5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29497869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hilfazer",
      "html_url": "https://github.com/hilfazer",
      "followers_url": "https://api.github.com/users/hilfazer/followers",
      "following_url": "https://api.github.com/users/hilfazer/following{/other_user}",
      "gists_url": "https://api.github.com/users/hilfazer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hilfazer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hilfazer/subscriptions",
      "organizations_url": "https://api.github.com/users/hilfazer/orgs",
      "repos_url": "https://api.github.com/users/hilfazer/repos",
      "events_url": "https://api.github.com/users/hilfazer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hilfazer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-11T09:28:17Z",
    "updated_at": "2020-10-11T10:55:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nTop-down dungeon crawler.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCheckbox for adding a global reference being called \"Singleton\" can confuse people since in Godot this word is also used for things that are singletons according to a widespread definition of this word (global + 1 instance limit) like ClassDB, Marshalls or Input.\r\n\r\n![GodotSingletonConfusion1](https://user-images.githubusercontent.com/29497869/95674496-e0499380-0bb0-11eb-85bb-45b58a9b7efb.png)\r\n\r\n![GodotSingletonConfusion2](https://user-images.githubusercontent.com/29497869/95674498-e3dd1a80-0bb0-11eb-8789-115c7db00b7a.png)\r\n\r\n(i took those screenshots from  Godot's Discord public channels so i guess it's OK if i post them here; let me know if it's not)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRename the \"Singleton\" column to \"Global\". The word is better understood by more people and it properly describes what is being done here. It would prevent users from making a connection with engine singletons.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![GodotGlobalAutoload](https://user-images.githubusercontent.com/29497869/95674490-d58efe80-0bb0-11eb-817b-aba0b241eb0e.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nJudging by Godot's Discord autoloads are used extremely often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPeople who could get confused by \"Singleton\" wouldn't know to install such plugin.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1649/reactions",
      "total_count": 6,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1648",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1648/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1648/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1648/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1648",
    "id": 718794487,
    "node_id": "MDU6SXNzdWU3MTg3OTQ0ODc=",
    "number": 1648,
    "title": "Add a terrain TEXTURE or mesh painter for making nicer terrains . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-10-11T09:10:54Z",
    "updated_at": "2020-10-13T02:07:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . . Exploration, puzzle, lore . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can make nice terrain in Blender, atm . . But, I find it difficult to make really nice terrain, bec. I don't have a tool, for painting the terrain, with for instance rock, grass, stone, forest, so on . . Since Godot won't get a full terrain editor right away, maybe for Godot 4 we could get a ' splat-map ', or so terrain painter, that allows to paint stuff made in Blender, in an efficient way, ie. texture blending, tiling, over-lap, etc etc . . This would not be a full feature terrain editor, but a nice step towards making nicer 3D environments, in Godot . . Imo, this could also be a first step, towards the full terrain editor, that seems to be intended, some-where down the line, it would really help tie 3D game makers over, until we can have the full-blast voxel-based terrain editor, that we deserve . . . ;) ;) <3 . . lol\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBasically, like Zylann's terrain editor, that supports painting with 4 different textures, on a mesh surface . . the terrain can be shaped in Blender, but painting them, is not an option . . Hope we can get that in Godot 4, since we won't be getting a terrain editor, this would be a nice ' upgrade ', to an already amazing looking Godot 4 line-up, of features, awesome, and more . . Yes, I've seen the cool shit we're getting, I'm impressed, for real . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike Zylann's terrain painter, not to sculpt terrain, but to have some different textures one can use for painting rocks in some places, grass in other, a road, etc etc . . It would really help, to break up terrain, and give amazing results, on terrain made, in Blender . . Also, support for transparent stuff, so one can paint debris, stone and, wood pieces, as well . . Combined with the new Decal node, one could easily make amazing looking, realistic 3D worlds, with nice roads, etc . . And, it could be the first step, towards making a full terrain editor, while keeping it managable, for those making it, ie. smaller scope, but would give a MASSIVE boost, in 3D environment quality, almost immediately <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't do this stuff, atm . . I think it is called splat-maps, or some sort of, blending shader, I don't know how to make this, in an optimized way, maybe there's a ' best ' solution, one can use, maybe GPU shader, or so . . It would hopefully allow for HQ-blending, ie. not be so simple, one can't make impressive terrain, but also fast, efficient . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBec., it would take Godot from basic 3D environments, to REALLY nice environments, and just be over-all awesome, I hope it might support 4 different textures, and 4 different decal layers, one can blend, or so . . Optimally, blending of 8 textures, or some other cool method, of terrain texture PAINTING, not sculpting . . .\r\n\r\nThanks . .\r\n\r\nps. I know one can use vertex painting, to get some of this effect, maybe there's a way to use that stuff, to also blend textures, on a surface, it's probably pretty fast, if done that way . . Combining vertex painting, and texture layering, or blending, would be an amazing thing, since we won't get the FULL terrain editor yet, to tie us over, and make Godot 4 such, a well - rounded, epic release, thanks . . .\r\n\r\n![2020-10-11 1110](https://user-images.githubusercontent.com/61069740/95674718-631f1e00-0bb2-11eb-8c79-733caf23e9d0.gif)\r\n\r\nSomething close to this, in quality, would be amazing, or so . . <3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1646",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1646/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1646/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1646/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1646",
    "id": 718751065,
    "node_id": "MDU6SXNzdWU3MTg3NTEwNjU=",
    "number": 1646,
    "title": "Custom RichTextLabel BBCode non-animated effects",
    "user": {
      "login": "ShatReal",
      "id": 69117768,
      "node_id": "MDQ6VXNlcjY5MTE3NzY4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/69117768?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShatReal",
      "html_url": "https://github.com/ShatReal",
      "followers_url": "https://api.github.com/users/ShatReal/followers",
      "following_url": "https://api.github.com/users/ShatReal/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShatReal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShatReal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShatReal/subscriptions",
      "organizations_url": "https://api.github.com/users/ShatReal/orgs",
      "repos_url": "https://api.github.com/users/ShatReal/repos",
      "events_url": "https://api.github.com/users/ShatReal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShatReal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-11T03:48:20Z",
    "updated_at": "2020-10-26T05:00:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nOne that has a RichTextLabel with custom effects but doesn't need them to be animated every frame (text offset).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe custom BBCode effects created with RichTextEffect run each frame because they're all meant to be animated, so I can't make one that isn't animated every frame. I feel like this is a waste of something.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAnother function for RichTextEffect that is non-animated, like, I dunno, \"_custom_fx\"? \"_non_animated_custom_fx\"? Something that does something like the default effect \"Fade\" which isn't animated.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nLike the \"_process_custom_fx\" function, but without all of the time stuff.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think there's any way to not animate the effect with code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know how making this an add-on would work.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1646/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1644",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1644/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1644/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1644/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1644",
    "id": 718568634,
    "node_id": "MDU6SXNzdWU3MTg1Njg2MzQ=",
    "number": 1644,
    "title": "Add pos2colrow and colrow2pos methods in TextEdit",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-10T08:36:05Z",
    "updated_at": "2020-10-10T14:18:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to get `TextEdit` caret position. There is `cursor_get_column()` and `cursor_get_line()` but there is no easy way to convert them to pixels.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMethods that convert rowcol to xy and xy to rowcol would solve the problem\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`Vector2 pos2colrow(Vector2 pos xy coordinates in pixels)`\r\n`Vector2 colrow2pos(Vector2 index in characters/lines)`\r\n\r\n`pos2colrow` or maybe `pos2colline`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo idea how it can be worked around with a few lines of script\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nShould be core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1642",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1642/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1642/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1642/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1642",
    "id": 718243058,
    "node_id": "MDU6SXNzdWU3MTgyNDMwNTg=",
    "number": 1642,
    "title": "Make Containers update on each child rect change, or when checking their property values, even when they are not visible",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-09T15:36:54Z",
    "updated_at": "2020-10-09T16:38:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAdding variable size tooltips that always fit on screen.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGetting the Containers in the tooltip to update and show correct values in their rect while calculating how they will fit on screen require non-intuitive operations on them, since they update in certain conditions only. For instance if I remove any line from this code, my Container will show incorrect value in it's rect:\r\n\r\n```\r\n\t# Update\r\n\tself.visible = false\r\n\r\n\tself.visible = true\r\n\tself.visible = false\r\n\r\n\tself.visible = true\r\n\tself.visible = false\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMake Containers update on each child rect change, or when checking their property values, even when they are not visible.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nExample now:\r\nTooltip is not visible\r\nSwap the content of the tooltip (the children of the Container node), for one that takes less space than the previous one\r\nWhen you now check the rect_size.y property of the container, for instance to check if it will fit on screen properly, it will show an incorrect value, since it did not update\r\nDisplay tooltip\r\nTooltip's Container node kept it's previous (now incorrect) dimensions, still did not update\r\nHide the tooltip and show again\r\nNow the Container updated and shows correct rect_size.y value\r\n\r\nExample after:\r\nTooltip is not visible\r\nSwap the content of the tooltip (the children of the Container node), for one that takes less space than the previous one\r\nWhen you now check the rect_size.y property of the containerit will show a correct (smaller) value\r\nDisplay tooltip - it displays correctly (it shrunk down)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYes, for example by using the code above or similar (which is sometimes hard to find).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's part of the core class.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1641",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1641/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1641/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1641/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1641",
    "id": 718215683,
    "node_id": "MDU6SXNzdWU3MTgyMTU2ODM=",
    "number": 1641,
    "title": "Add a signal to AudioStreamPlayer that indicates that the loop has started again",
    "user": {
      "login": "vetu11",
      "id": 26150190,
      "node_id": "MDQ6VXNlcjI2MTUwMTkw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26150190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vetu11",
      "html_url": "https://github.com/vetu11",
      "followers_url": "https://api.github.com/users/vetu11/followers",
      "following_url": "https://api.github.com/users/vetu11/following{/other_user}",
      "gists_url": "https://api.github.com/users/vetu11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vetu11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vetu11/subscriptions",
      "organizations_url": "https://api.github.com/users/vetu11/orgs",
      "repos_url": "https://api.github.com/users/vetu11/repos",
      "events_url": "https://api.github.com/users/vetu11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vetu11/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-09T14:58:26Z",
    "updated_at": "2020-10-09T15:21:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nProjects with a dynamic music system.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere's no easy way to trigger actions when an AudioStream loops.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAnother signal should be added to the AudioStream indicating that it has finished the loop and it has started again.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's just another signal.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can currently be worked around by setting the Stream to not loop automatically and playing the stream again when the `finished` signal is emitted.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAudioStreamPlayer is a core feature.\r\n\r\n**Related issues:**\r\nhttps://github.com/godotengine/godot/issues/30737\r\nhttps://github.com/godotengine/godot/issues/33579",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1641/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1640",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1640/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1640/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1640/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1640",
    "id": 718029975,
    "node_id": "MDU6SXNzdWU3MTgwMjk5NzU=",
    "number": 1640,
    "title": "Restore original behavior of the camera2D offset respecting limits and set current behavior as optional",
    "user": {
      "login": "securas",
      "id": 2881755,
      "node_id": "MDQ6VXNlcjI4ODE3NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2881755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/securas",
      "html_url": "https://github.com/securas",
      "followers_url": "https://api.github.com/users/securas/followers",
      "following_url": "https://api.github.com/users/securas/following{/other_user}",
      "gists_url": "https://api.github.com/users/securas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/securas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/securas/subscriptions",
      "organizations_url": "https://api.github.com/users/securas/orgs",
      "repos_url": "https://api.github.com/users/securas/repos",
      "events_url": "https://api.github.com/users/securas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/securas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-09T10:20:04Z",
    "updated_at": "2020-10-09T11:27:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nPlatformer with Godot 3.2.1 but also applicable to more recent versions\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe behavior the camera2D was modified by godotengine/godot#30358 to allow changing the camera offset whilst disregarding the camera limits. This was implemented to allow for screen shaking to work in tight camera limits. The new behavior was not made optional, hence breaking compatibility and substantially complicating the implementation of behaviors like camera panning.\r\n\r\nFor a more specific example, consider moving a camera node using an animation player. As the animation player changes the position of the camera and the player can pan the camera with an additional offset. If the camera limits are not respected, then the camera can potentially pan away from the relevant game area. The alternative would be to place the camera within a parent node and move that with the animation player whilst implementing the pan by moving the camera node position within its parent. This also fails due to drag margins, rendering it necessary to align the camera at every frame.\r\n\r\nIn summary, the solution used for godotengine/godot#30358 aimed at solving a problem but severely complicates another. The problem in that issue could have been solved simply by temporarily readjusting the camera limits without a need to modify Godot and without the need to break retro-compatibility.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRevert to the original behavior and optionally implement the new behavior as an option selectable in the editor.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNo need. This is a request to revert to previously existing code.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. It requires adding one or more additional nodes to a scene using a camera to enable the previous behavior or implementing a custom camera node.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe Camera2D is a central node for 2D games.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1637",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1637/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1637/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1637/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1637",
    "id": 717795096,
    "node_id": "MDU6SXNzdWU3MTc3OTUwOTY=",
    "number": 1637,
    "title": "Remove list of projects from `editor_settings-4.tres` for easier settings synchronization across devices",
    "user": {
      "login": "rcorre",
      "id": 2496231,
      "node_id": "MDQ6VXNlcjI0OTYyMzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2496231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcorre",
      "html_url": "https://github.com/rcorre",
      "followers_url": "https://api.github.com/users/rcorre/followers",
      "following_url": "https://api.github.com/users/rcorre/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcorre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcorre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcorre/subscriptions",
      "organizations_url": "https://api.github.com/users/rcorre/orgs",
      "repos_url": "https://api.github.com/users/rcorre/repos",
      "events_url": "https://api.github.com/users/rcorre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcorre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-09T02:04:41Z",
    "updated_at": "2020-10-10T09:49:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nAny.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'd like to store Godot's editor configuration in a dotfiles repository, so I\r\ncan track changes and sync settings between machines.\r\n\r\nUnlike all other fields in `editor_settings-*.tres`, which change when I edit\r\nthings in the \"Editor Settings\", the `projects` field changes automatically as\r\nI add or remove projects. This causes unnecessary churn to the tracked file,\r\nand persists settings that aren't relevant across machines (I might not have\r\nall the same projects on my laptop, or at the same locations).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nStore the projects list in $XDG_DATA_HOME rather than $XDG_CONFIG_HOME. It is data, not configuration.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Remove `projects` from `EditorSettings`\r\n2. Write/read `projects` from a file under the \"User data\" path (a simple .txt would suffice, but it could be .tres or something else)\r\n3. (optional migration) If `projects` is present in `editor_settings-3.tres`, extract it to the data path.\r\n\r\nI think 3 is not necessary if this is a 4.0-only feature, but could be convinced otherwise.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is core to how Godot persists data.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1637/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1636",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1636/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1636/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1636/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1636",
    "id": 717630752,
    "node_id": "MDU6SXNzdWU3MTc2MzA3NTI=",
    "number": 1636,
    "title": "Add a frame interpolation option for particle flipbook animation",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-08T20:11:23Z",
    "updated_at": "2020-10-15T12:45:05Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen using particle flipbooks for animation purposes, you typically use an animation sheet whose intended speed is between 10 FPS and 30 FPS. This is often used to make fire or smoke effects look more realistic. Here's an example from [Team Fortress 2's Flamethrower](https://wiki.tf2.com/wiki/Particle_effects):\r\n\r\n![Fire particle animation sheet](https://wiki.tf2.com/w/images/a/a0/Particle_flames.png)\r\n\r\nThe issue is, when you play the animation as-is, it won't look smooth since the animation only has so many frames per ssecond to display. This issue is noticeable on 60 Hz monitors already, but it gets worse at higher refresh rates.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a **Blend Animation** property to CanvasItemMaterial (for 2D) and StandardMaterial3D (for 3D). When particle flipbook features are used, the engine will blend frames together to make animations appear smoother.\r\n\r\nThis could be extended to animated textures or AnimatedSprites in general. That said, since interpolated flipbook animation is mainly used in particles nowadays, it might not be worth the added complexity.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFor the purpose of this example, let's say you have a 5 FPS animation with 10 frames. If the animation has been playing for 0.4 seconds, you'll see the 3rd frame of the animation as expected. If the animation has been playing for 0.5 seconds, you'll see the 3rd frame and the 4th frame with 50% blending (since we're halfway between the 3rd and 4th frame).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis feature might be doable with a custom shader, but it will require you to override the default shader to benefit from it. This will make interpolation more difficult to reuse in a project, especially if you have other custom shaders to apply on top.\r\n\r\nYou could also interpolate the flipbook manually in an image editor, but this will increase memory and storage requirements (on top of requiring manual work if you're not versed with ImageMagick or similar). Also, even if you interpolate to 60 FPS, it will never look completely smooth on high refresh rate monitors.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1636/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1635",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1635/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1635/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1635/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1635",
    "id": 717585677,
    "node_id": "MDU6SXNzdWU3MTc1ODU2Nzc=",
    "number": 1635,
    "title": "Add lock node / selectable childrens to the nodes right click context menu",
    "user": {
      "login": "jcostello",
      "id": 1168582,
      "node_id": "MDQ6VXNlcjExNjg1ODI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1168582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcostello",
      "html_url": "https://github.com/jcostello",
      "followers_url": "https://api.github.com/users/jcostello/followers",
      "following_url": "https://api.github.com/users/jcostello/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcostello/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcostello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcostello/subscriptions",
      "organizations_url": "https://api.github.com/users/jcostello/orgs",
      "repos_url": "https://api.github.com/users/jcostello/repos",
      "events_url": "https://api.github.com/users/jcostello/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcostello/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-08T18:56:21Z",
    "updated_at": "2020-10-08T19:41:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D FPS\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nConstantly locking and unlocking object and selectable childrens\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd the option to lock node / selectable children in the right click context menu of the node instand in the viewport icons\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSame functionality but different placement\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nScripting will not help here\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecuase the functionality is in the core right now",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1635/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1634",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1634/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1634/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1634/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1634",
    "id": 717478144,
    "node_id": "MDU6SXNzdWU3MTc0NzgxNDQ=",
    "number": 1634,
    "title": "Make some questions optional in the proposal template",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-10-08T16:07:44Z",
    "updated_at": "2020-10-11T12:04:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGDScript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen creating proposals, I often find myself thinking that I cannot accurately answer the last 2 questions of the template.\r\n\r\n- _If this enhancement will not be used often, can it be worked around with a few lines of script?_\r\nWhen creating a proposal, in most cases I think that this enhancement could be used often (at least for the tasks that I am going to solve with this feature)\r\nAlso I believe that my problem cannot be solved using a workaround with a few lines, or find these solutions inconvenient. \r\nIn reality this may not be so, and perhaps there _is_ a work-round that would suit many users instead of implementing a new feature.\r\nHowever, knowledge of the intricacies and work-rounds requires a lot of experience with the engine.\r\nSo I would often like to humbly skip this question.\r\n\r\n\r\n- _Is there a reason why this should be core and not an add-on in the asset library?_\r\nWhen creating a proposal, in most cases I believe that the problem cannot be solved using an addon or this would be inconvenient.\r\nSimilar to the previous question, I cannot be sure about this as I do not have enough experience in developing addons in Godot. Although I can say for example that the current gdscript plugin API is not enough to implement the features I need, but again this may be a wrong opinion.\r\n\r\nI noticed that other participants also often demonstrate uncertainty when answering these 2 questions.\r\nIn this case, the proposal creator's answers to some clarifying questions in the comment section could be more helpful to determine the need for the feature.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAbility to _optionally_ answer questions about addons and workrouns would be more convenient.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nOne could answer questions about addons and workrouns optionally, as additional information if he considers it important.\r\nFor example, a plugin developer could indicate how he tried to implement an addon that could solve the problem and why he eventually abandoned it.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot an engine feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot an engine feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1634/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1632",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1632/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1632/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1632/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1632",
    "id": 717382431,
    "node_id": "MDU6SXNzdWU3MTczODI0MzE=",
    "number": 1632,
    "title": "Allow to import and load external assets at run-time (in exported projects, without extra PCK files)",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2020-10-08T14:10:56Z",
    "updated_at": "2020-11-07T00:04:01Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game with ***user-generated content*** (and less of a modding support).\r\nMostly related to godotengine/godot#17848.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSee very useful discussion which illustrates the problem at godotengine/godot#17748.\r\n\r\nGodot requires that most files must be [first imported into a project](https://github.com/godotengine/godot/pull/42412#discussion_r497534369) (converted from various file formats to `Resource`s, such as `*.png` to `Texture`) before they can be used in a game, and this works well for games which don't require dynamic loading of assets.\r\n\r\nThe export process involves packing all of the previously *imported* assets into a special `*.pck` file which is then unpacked upon running a particular game.\r\n\r\nThe problem comes when you want to give a player an ability to load external assets which are not part of the original game, ***without*** creating additional tools to make `*.pck` files to be used by a player, because players are not developers, and there has to be an intuitive way to load external assets within a game itself. See also limitations at #1212.\r\n\r\nLoading imported resources requires you to use `load()` or `ResourceLoader.load()`. Loading non-imported, external resources require you to ***replicate the import process at run-time first*** (which is already done in the editor), and then store a reference to the loaded resource somewhere for it to be accessed later, so it's not possible to use `load()` for those resources, because they were not actually imported, but created at run-time instead.\r\n\r\nThis in turn leads to various confusions and misuse like with `Image.load()` and `ResourceLoader.load()`.\r\n\r\nSee also related issues and other proposals:\r\n- godotengine/godot-proposals#732\r\n- godotengine/godot-proposals#1658\r\n- godotengine/godot#24768\r\n- godotengine/godot#17337\r\n- godotengine/godot#14879\r\n- godotengine/godot#20972\r\n\r\nMarginally related:\r\n- godotengine/godot#14839\r\n- godotengine/godot#24222\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI suggest to add a way to seamlessly `load()` external resources by first importing them if they are outside of the `res://` path, like `user://` or any other system path.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe crude logic is the following:\r\n\r\n- for *imported* resources (inside `res://`), look whether a particular file was previously imported. If yes, then just fetch the resource with `load()`.\r\n\r\n- for *external* resources (outside of `res://`), we know that they are not imported, so import a file first using the same mechanism as in the editor, and then `load()` it normally.\r\n\r\nAlternatively, perhaps `ResourceImporter` and corresponding `import()` GDScript method could be added (or exposed), to allow users to import external resources at run-time first, if this proves to be easier to implement and/or maintain.\r\n\r\nI understand that a lot of importers are tied to the editor, so this likely needs a rewrite/refactor, or adding a build option to allow those importers to be available in `release` builds, at the very least.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nCurrently, you have to use `File` and various `load()`, `load_from_file()`, `load_from_buffer()` exposed methods scattered in various classes like `Image`, `AudioStreamSample` to replicate the import process to some degree (difficult to account for various peculiarities inherent to parsing files), so none of those existing methods provide a way to import those resources ***exactly*** like in the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI believe one has to rewrite/adapt the `ResourceLoader` and the import mechanism for this to work, which is pretty core.\r\n\r\nI believe implementing this proposal could solve a lot of reported issues, and even some specific loading functions could be unexposed that way.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1632/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1631",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1631/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1631/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1631/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1631",
    "id": 717376968,
    "node_id": "MDU6SXNzdWU3MTczNzY5Njg=",
    "number": 1631,
    "title": "Add GDScript support for defining virtual/prototype/must-override methods in base classes",
    "user": {
      "login": "tx350z",
      "id": 956567,
      "node_id": "MDQ6VXNlcjk1NjU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/956567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tx350z",
      "html_url": "https://github.com/tx350z",
      "followers_url": "https://api.github.com/users/tx350z/followers",
      "following_url": "https://api.github.com/users/tx350z/following{/other_user}",
      "gists_url": "https://api.github.com/users/tx350z/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tx350z/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tx350z/subscriptions",
      "organizations_url": "https://api.github.com/users/tx350z/orgs",
      "repos_url": "https://api.github.com/users/tx350z/repos",
      "events_url": "https://api.github.com/users/tx350z/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tx350z/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-08T14:04:19Z",
    "updated_at": "2020-10-08T15:01:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMy project has a GUI containing a large number of inter-operating custom controls and related logic modules. There is a need for the various controls and logic modules to inter-communicate. Many controls need to implement the same methods but with different logic.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nDue to parser cyclic reference errors I'm using call-groups as a way for the GUI controls and logic modules to intercommunicate. For example, my game has \"power\", \"engines\", \"weapons\" and several other \"systems\". All of the systems have a power button. When the power system's power button is pressed all other systems are notified of the event. This is done using call_group(\"pwr\",\"pwr_mstr_pwr_btn_pressed\"). Every system must implement the method to receive group call. However, each system has unique logic associated with the master power button press.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd support to GDScript for method prototypes. There may be a need to also indicate a class is virtual/prototype so the parser/runtime will raise an error only on concrete classes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPossible options:\r\n\r\n    prototype func_name(arg:int)->String;\r\n    \r\n    virtual func_name(arg:int)->String;\r\n    \r\n    mustoverride func func_name(arg:int)->String;\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe only work around I have found is to implement methods in base classes to programmatically check that required methods are implemented by descendant classes. This is a crude and rather ugly solution prone to errors and difficult to maintain.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot sure if it can be implemented as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1631/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1630",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1630/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1630/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1630/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1630",
    "id": 717346617,
    "node_id": "MDU6SXNzdWU3MTczNDY2MTc=",
    "number": 1630,
    "title": "Make UndoRedo history independent for each scene",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-08T13:29:42Z",
    "updated_at": "2020-11-03T14:00:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game with lots of scenes to switch between.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot's UndoRedo is one of the most unfriendly things in the editor. You can rely on it only if you work on one scene, but since you can open multiple scenes at once, you obviously do that often, because it's convenient. And this is when bad things happen. \r\n\r\nChanging scene gets registered in the undo history. This means that when you change a scene and then switch to another scene and change it and THEN you want to undo the first scene, you can't without undoing the latter scene. Worst case, when you make some action that breaks undo history and you can't undo other scenes even if they were completely unrelated to your action. This is *absolutely horrible experience*, if I didn't use VCS the editor would be 40% less usable for me.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEach scene should have it's own undo history. Unfortunately it's not as simple as that, because Godot has Resources which might not be tied to a specific scene and changes in the Resources are kept in the same undo history for everything. Still, this is a matter worth solving, so I have 2 possible solutions in mind. But first and foremost, Resources should also have their own undo stack, independent from all scenes. At least the file resources. Built-in ones are tied to scene, so they might share the same undo history.\r\n\r\nNow, as to how to handle it:\r\n\r\n- Option 1: make Resource inspector have its own UndoRedo. This means that when you press Ctrl + Z, it would only affect scenes. When you edit resource, but want to undo it, you have to press e.g. Alt + Z or something. This is a bit tricky with nodes and built-in resources, but should be possible to do. We could make it simpler by discarding the Resource change history when the editor resource is removed from the inspector (so you wouldn't be able to keep undo history for multiple resources; scenes are more important anyways).\r\n\r\n- Option 2: make a global MasterUndoRedo with references to UndoRedos in each scene/resource and each UndoRedo action would have a timestamp. When you undo something, the MasterUndoRedo would look for another action in queue, but ignoring actions from other scenes. This way the resource history would be intertwined with scene history, which would allow to have one central undo history, at a cost of being a bit more confusing.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nBasically what I described above but in C++.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThat's definitely more than few lines.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about making the editor usable.\r\n\r\n(btw related https://github.com/godotengine/godot/issues/6797)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1630/reactions",
      "total_count": 13,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1628",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1628/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1628/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1628/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1628",
    "id": 717250075,
    "node_id": "MDU6SXNzdWU3MTcyNTAwNzU=",
    "number": 1628,
    "title": "Make script paths in Editor Output error messages clickable",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-08T11:13:12Z",
    "updated_at": "2020-10-08T14:41:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot editor plugins (gdscript)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n![clickable](https://user-images.githubusercontent.com/16458555/95449123-c3794a00-097d-11eb-8a6c-4826abeb2e9b.JPG)\r\n\r\nI often get errors in `Output`, which point to scripts with errors, but I need to manually go to these scripts (for example in this case I need to manually find `x.gd` and script list or filesystem and scroll to line 2), which is not convenient.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMaking scripts paths clickable in error messages in `Output` would be more convenient than open the script manually.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nOne could click on a script path in `Output` and then the script would be opened and scrolled to line specified in the error message.\r\nThis could be implemented with adding clickable metas in `case MSG_TYPE_ERROR: {` block of [EditorLog.cpp](https://github.com/godotengine/godot/blob/master/editor/editor_log.cpp#L108), maybe in `MSG_TYPE_WARNING` as well\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI tried to make a gdscript plugin that does this.\r\nBut this always looked ugly since there are some missing API methods for that.\r\nThere is no `get_editor_log()` method\r\nThere are no signals to find out if an error is printed.\r\netc",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1628/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1627",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1627/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1627/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1627/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1627",
    "id": 717192977,
    "node_id": "MDU6SXNzdWU3MTcxOTI5Nzc=",
    "number": 1627,
    "title": "Add Get File Icon to Directory",
    "user": {
      "login": "mrjustaguy",
      "id": 50302479,
      "node_id": "MDQ6VXNlcjUwMzAyNDc5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50302479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrjustaguy",
      "html_url": "https://github.com/mrjustaguy",
      "followers_url": "https://api.github.com/users/mrjustaguy/followers",
      "following_url": "https://api.github.com/users/mrjustaguy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrjustaguy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrjustaguy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrjustaguy/subscriptions",
      "organizations_url": "https://api.github.com/users/mrjustaguy/orgs",
      "repos_url": "https://api.github.com/users/mrjustaguy/repos",
      "events_url": "https://api.github.com/users/mrjustaguy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrjustaguy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-08T09:49:58Z",
    "updated_at": "2020-10-08T12:49:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nVarious workflow tools\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nwhen using the Directory, unable to get the file icon that windows is using.\r\nFor example, let's say I've got a directory with shortcuts to blender, gimp and some other files..\r\nI have the correct file path to all of the said files, and I want to add them to an Item List with icons..\r\nI can get the Names just fine, but getting the icons to go along with the files? Not really, unless I manually find the Blender Icon and Gimp Icon and any other File Icons beforehand and feed it into the build\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBy just having a function that get's the icon the OS is displaying and using that outputs the Icon, it would be easy to list out what a directory has with icons to make searching for stuff easier and the UX better.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen Directory has a file/folder of any kind, if function \"get_file_icon()\" is used on the directory/file:\r\n1. Get file Path\r\n2. Get file properties\r\n3. Find from where the file is getting it's icon\r\n4. Attempt to get and load the icon from where the file is getting it's icon\r\n5. Return icon or null if icon cannot be found\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really, the easiest way is to get the icons manually for all the needed files, but that isn't procedurally able to get all the icons from a folder if new things are added to it.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDirectory is core, and the addition should be a part of it, as it can be used for tool managers, modding tools and other similar applications",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1627/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1626",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1626/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1626/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1626/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1626",
    "id": 717141125,
    "node_id": "MDU6SXNzdWU3MTcxNDExMjU=",
    "number": 1626,
    "title": "Add `error_pushed` and `warning_pushed` signals to EditorInterface",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-08T08:37:11Z",
    "updated_at": "2020-10-08T13:06:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot editor plugins (gdscript)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn some of my plugins I need to know that any error or warning has appeared in the `Output`.\r\nBut there is no easy way to find it out with gdscript.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdding signals `error_pushed` and `warning_pushed` could overcome the problem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere could be `get_editor_log()` method in `EditorInterface`\r\nFor example one could `get_editor_interface().get_editor_log()` and then use its signals `error_pushed` and `warning_pushed` \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nShould be core",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1625",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1625/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1625/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1625/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1625",
    "id": 717135819,
    "node_id": "MDU6SXNzdWU3MTcxMzU4MTk=",
    "number": 1625,
    "title": "Make Godot support classic grey-scale bump maps in Standard Shader . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-08T08:28:57Z",
    "updated_at": "2020-10-08T13:00:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider type game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can very easily make some really nice bump maps, by painting grey-scale tones, on a surface, or material, in Blender, and it makes some super-nice, near pro-normal map quality results, it's fast, and just works . . The problem is, Godot doesn't support this texture format, ie. it has to be converted into a normal map, which takes some times, to bake, in Blender, or external programs . . Could it be possible to add support for classic bump maps, in Godot, since the work-flow is really nice, one can paint almost any normal, at least many, with simple bump maps . . Or, there could be a simple converter, if one loads a bump map, into the normal map slot, there could be a button, ' convert bump to normal ', in Godot, it seems to be a fairly simple process, in gIMP, and it would make Godot nicer, at least for me, a beginner, or so . . <3\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd support for classic bump maps, in the shader, since for many beginners, they're a lot more intuitive to work with, since one can't directly paint a ' normal ' map, using texture painting, or with a simple grey-scale image, made in a paint program . . . It could either be with a new section, ie. we have normal, metallic, roughness, AO, add also bump, or, make a feature where after importing it, one converts to normal map, in import settings, or a setting under normal map, in material, PBRMaterial in Godot, that converts the bump maps, to a normal map, 1-to-1, or so . . This would be a nice feature, to have support for bump, as they make a lot of sense, to beginners, and even advanced users can make some quick normal maps, almost no work, in Blender, plug a bump map into principled shader, and paint it grey-scale, and booom, one has near professional normal maps, for many, many use cases, or so . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nFind a way, to make Godot support ordinary grey-scale bump maps, since they've been in the industry, for so many years, not sure how, an elegant way, some-thing fast, robust . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know how to reprogram Godot, to do this stuff, atm . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, bump maps are so common, and have been in game making, for so long, it makes sense to me, to have them, ie. cheap normal maps, that work . . .\r\n\r\nThanks . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1624",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1624/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1624/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1624/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1624",
    "id": 716930821,
    "node_id": "MDU6SXNzdWU3MTY5MzA4MjE=",
    "number": 1624,
    "title": "Add Alerts when In-AnimationTree loads fail",
    "user": {
      "login": "kingoftheconnors",
      "id": 23728939,
      "node_id": "MDQ6VXNlcjIzNzI4OTM5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/23728939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kingoftheconnors",
      "html_url": "https://github.com/kingoftheconnors",
      "followers_url": "https://api.github.com/users/kingoftheconnors/followers",
      "following_url": "https://api.github.com/users/kingoftheconnors/following{/other_user}",
      "gists_url": "https://api.github.com/users/kingoftheconnors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kingoftheconnors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kingoftheconnors/subscriptions",
      "organizations_url": "https://api.github.com/users/kingoftheconnors/orgs",
      "repos_url": "https://api.github.com/users/kingoftheconnors/repos",
      "events_url": "https://api.github.com/users/kingoftheconnors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kingoftheconnors/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-08T00:15:06Z",
    "updated_at": "2020-10-08T12:29:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA 2D platformer heavy on animations. The current system uses a state machine with 1D blend spaces to balance over 40 animations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen trying to move my state machine into a blend-tree using the save and load features, I missed something up and the save created a corrupted .tres file. Thankfully I was careful and kept the old state machine in an archive file. BUT my main confusion was when trying to use this (unknowningly) flawed tres file:\r\n\r\nWhen load is attempted, _**it fails silently**_:\r\n\r\n![image](https://user-images.githubusercontent.com/23728939/95400029-9b371000-08d7-11eb-84f9-8bf552cb71f2.png)\r\n\r\n![silentfail](https://user-images.githubusercontent.com/23728939/95400775-7fcd0480-08d9-11eb-9332-5df10f561c60.gif)\r\n\r\n<br>\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe editors for these nodes don't throw an alert when isValid() returns false. The simple solution is to add an alert. The text would be similar to another alert used in the same process (but when copying in a playback node instead of loading it):\r\n\r\n![image](https://user-images.githubusercontent.com/23728939/95400377-6f685a00-08d8-11eb-9a08-f3c1523412ae.png)\r\n\r\nWith this, users will know when their attempted import is of an illegal file type, or of a corrupted file.\r\n\r\n<br>\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nNothing happens when a loaded file fails the isValid() check. To add an alert, we simply have to add an else clause with an alert:\r\n\r\n![image](https://user-images.githubusercontent.com/23728939/95400521-c79f5c00-08d8-11eb-95e9-219da644172e.png)\r\n\r\nThis needs to be done in the code on both 1D and 2D blend spaces, the blend tree, and the state machine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a minor fix to increase godot's intuitiveness by giving the user accurate feedback. Users won't know it's a problem until after they've wasted time on it, and there's very little that can be done afterwards.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlerts like this are in the interest of users. They improve the UI, and this one is an extremely lightweight addition.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1624/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1623",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1623/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1623/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1623/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1623",
    "id": 716416389,
    "node_id": "MDU6SXNzdWU3MTY0MTYzODk=",
    "number": 1623,
    "title": "Detect plugins recursively",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-07T10:46:31Z",
    "updated_at": "2020-11-21T01:20:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe existing plugin system requires to have `plugin.cfg` for every plugin.\r\nAlso Godot doesn't look for plugins in sub-sub-folders.\r\n\r\nThis forces plugin developers to store each plugin in the addon folder like this:\r\n`addons/plugin1/plugin1.gd`\r\n`addons/plugin2/plugin2.gd`\r\n\r\n[This issue](https://github.com/godotengine/godot/issues/42572)  shows that the limitation is that `plugin.cfg` files are not visible deeper than the `addons/` sub-folders\r\n\r\nThis leads to the following problems:\r\n\r\n1. Possible conflict of names of plugins of different developers, due to which the developers use prefixes to the names of the plugin or add the developer name  in a plugin folder name\r\n[zylann.hterrain for example](https://github.com/Zylann/godot_heightmap_plugin/tree/master/addons/zylann.hterrain) \r\n2. Serious clutter of the `addons` folder with a large number of plugins.\r\n\r\n3. It makes the plugin developer to avoid having his own plugin structure for example\r\n`addons/developer_name/plugin1/plugin1.gd`\r\n`addons/developer_name/plugin2/plugin2.gd`\r\nThis (3) is the point that pushed me most of all to write this proposal.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nRecoursive detecting the `plugin.cfg` in `addons` folder could overcome the problem.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nGodot could find `plugin.cfg` files anywhere in `res://addons/`\r\n\r\nHowever it might also be wise to limit plugins search areas for example when specifying:\r\n- search folder depth\r\nSay the current cfg search folder depth is `0` (allows detecting only in `addons/` sub-folders)\r\n`depth = 1` could allow to search plugins in `addons/` sub-sub-folders as well etc\r\n- additional `addons/` sub folders to search plugins for example:\r\n`res://addons/sub/subsub` (which could ignore `search folder depth` value).\r\n\r\nit would be convenient to have such settings for example in Editor or Project Settings in order to not to scan each sub-sub dirs (especially if you know in advance that there are a lot of files there.)\r\n\r\nAfter all, the feature might be optional and enabled by default\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nshould be core, because this defines the rules for detecting plugins",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1623/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1622",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1622/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1622/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1622/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1622",
    "id": 716065402,
    "node_id": "MDU6SXNzdWU3MTYwNjU0MDI=",
    "number": 1622,
    "title": "Android ability to display game along the notch.",
    "user": {
      "login": "rmichaluszek",
      "id": 20546844,
      "node_id": "MDQ6VXNlcjIwNTQ2ODQ0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20546844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rmichaluszek",
      "html_url": "https://github.com/rmichaluszek",
      "followers_url": "https://api.github.com/users/rmichaluszek/followers",
      "following_url": "https://api.github.com/users/rmichaluszek/following{/other_user}",
      "gists_url": "https://api.github.com/users/rmichaluszek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rmichaluszek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rmichaluszek/subscriptions",
      "organizations_url": "https://api.github.com/users/rmichaluszek/orgs",
      "repos_url": "https://api.github.com/users/rmichaluszek/repos",
      "events_url": "https://api.github.com/users/rmichaluszek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rmichaluszek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-06T22:33:21Z",
    "updated_at": "2020-10-07T10:02:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nIm working on a mobile game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nthat would like to be shown in real full screen, but the sides along the notch are just black, I would like to show my game in these places too.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSome property in the project settings under the android, for example support notch true/false or something like that would be really useful, because there are a lot of phones now that have notches.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIt would just (probably) modify the manifest file, but i dont know how actually because i tried to do this manually and none of manifest properties worked for me to show the game along the notches.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI encountered a lot of posts on different portals about this, and there are no answears or fixes for this problem yet.\r\neg: [link](https://godotengine.org/qa/56785/hide-security-zone-android-better-full-screen-display-effects)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1622/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1621",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1621/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1621/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1621/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1621",
    "id": 715989696,
    "node_id": "MDU6SXNzdWU3MTU5ODk2OTY=",
    "number": 1621,
    "title": "`int PoolVector<T>::size() const` should return `unsigned int`",
    "user": {
      "login": "JUNZ1",
      "id": 8955210,
      "node_id": "MDQ6VXNlcjg5NTUyMTA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8955210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JUNZ1",
      "html_url": "https://github.com/JUNZ1",
      "followers_url": "https://api.github.com/users/JUNZ1/followers",
      "following_url": "https://api.github.com/users/JUNZ1/following{/other_user}",
      "gists_url": "https://api.github.com/users/JUNZ1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JUNZ1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JUNZ1/subscriptions",
      "organizations_url": "https://api.github.com/users/JUNZ1/orgs",
      "repos_url": "https://api.github.com/users/JUNZ1/repos",
      "events_url": "https://api.github.com/users/JUNZ1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JUNZ1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-06T20:11:22Z",
    "updated_at": "2020-10-12T15:26:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n   Creating CPP Module for a Machine Learning Module\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n   I face compilation warning(s) because of comparing it with unsigned int value\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n   There will be no more warning :)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n   By changing the return argument of the interface\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n   No\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n   All the size values should be unsigned int for better logical comparison",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1620",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1620/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1620/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1620/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1620",
    "id": 715718821,
    "node_id": "MDU6SXNzdWU3MTU3MTg4MjE=",
    "number": 1620,
    "title": "Non-physical shading: access to lighting within the `fragment()` function",
    "user": {
      "login": "lyuma",
      "id": 39946030,
      "node_id": "MDQ6VXNlcjM5OTQ2MDMw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/39946030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lyuma",
      "html_url": "https://github.com/lyuma",
      "followers_url": "https://api.github.com/users/lyuma/followers",
      "following_url": "https://api.github.com/users/lyuma/following{/other_user}",
      "gists_url": "https://api.github.com/users/lyuma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lyuma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lyuma/subscriptions",
      "organizations_url": "https://api.github.com/users/lyuma/orgs",
      "repos_url": "https://api.github.com/users/lyuma/repos",
      "events_url": "https://api.github.com/users/lyuma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lyuma/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 13,
    "created_at": "2020-10-06T14:14:02Z",
    "updated_at": "2020-11-27T22:27:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am building a VRM importer for Godot. VRM is a glTF extension based around distribution of stylized non-realistic characters such as models available from VRoid studio, Nico 3D or booth.pm - there is a rapidly growing market of model creators building content in this format. The MToon shader is a main feature of this model format, and it has already been ported to multiple engines, including three.js: https://www.w3.org/2019/09/Meetup/YutakaObuchi_VRM.pdf\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe wish to provide means of true NPR (non-physically rendering) shading approaches within Godot. Among the premise of this issue is that we need a solution which avoids any of the following as they create friction:\r\n- building a custom pipeline (rendering device) around non-physically rendering\r\n- requiring potential users to use a custom build of Godot Engine.\r\n- writing custom GLSL, especially given that error handling of GLSL errors is inadequate and requires hunting through output logs.\r\n- requiring hardcoded in-engine \"toon shading\", as toon shading is by nature stylized and no single one-size-fits-all approach can exist.\r\n\r\nCurrently, it is not possible to build a toon shader in Godot without hitting one of these limitations.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nFor the purpose of this discussion, I picked the well-licensed shader, MToon, which also happens to be part of the VRM model interchange specification. The official MToon implementation is a Unity shader, so I made an identical testing environment in both Unity 2018.4 and Godot 4.0 and Godot 3.2 in which to test lighting. Here is the end result, with an implementation of this proposal applied:\r\n![](https://raw.githubusercontent.com/lyuma/Godot-MToon-Shader/master/docs/alicia_realtime_lights.png)\r\n\r\nFor comparison and as a control, I made my best attempt to port MToon using the tools available in the current version of Godot, and I was unable to attain the desired shading. Here is the attempt:\r\n![](https://raw.githubusercontent.com/lyuma/Godot-MToon-Shader/master/docs/alicia_compat.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nFirst, I will link to reference code and projects exhibiting my reference implementation.\r\n\r\nThe **Godot project** for the above can be found at https://github.com/lyuma/Godot-MToon-Shader\r\nThe **Unity project** available within the VRMUnityTestProject folder of https://github.com/lyuma/Godot-MToon-Shader\r\nFinally, the **pull request** with Godot engine modifications to support this PR is available at godotengine/godot#42599\r\n\r\nWe have shown now that changes to the Godot Engine are necessary, and this capability cannot be provided on top of Godot or in the Asset Library. So, with that out of the way, why modify fragment() rather than extending the light() function?\r\n\r\nI found three approaches that could offer functionality to provide stylized shading.\r\n\r\n- There exists a proposal to add a post-light function ( godotengine/godot-proposals#484 ).\r\n- Find cleaner ways to pass data between fragment() and light().\r\n- Expose information sufficient to iterate through realtime lights in user-written shader code.\r\n\r\nThe mechanics of passing data into and out of light() were quite complex given the lack of static globals in GLSL. The post-light approach is not sufficient to implement all toon-shading techniques, including the one used by MToon. I opted for the last option which offered the most flexibility.\r\n\r\nThis leaves us with the need to expose lighting information to user-written custom shaders, within the fragment() function. This also matches closely approaches used in other environments. See a Unity URP based approach: https://github.com/ColinLeung-NiloCat/UnityURPToonLitShaderExample as a demonstration of this process of iterating through lights.\r\n\r\nThe approach I used for my reference implementation was to reorganize the scene shader to expose more things into functions, such as the calculations for directional shadow attenuation, decals and more. I migrated functions for calculating stuff like Lighting, directional lighting, ambient, baked etc. to return 0 if the approriate #define is not set, rather than being undefined. To keep the API organized and as a convention, I used UPPERCASE_FUNCTION_NAMES for functions which call into these parts of the scene shader.\r\n\r\nFunctions / lighting paths which are no longer implemented can be easily deprecated into a function which returns false. Some lighting paths may be possible to expose as `const bool` expressions, but many which rely on `instances.data[instance_index].flags` must be functions.\r\n\r\nAllow for disabling builtin lighting passes, if overridden. One approach is to do this if the appropriate expression is used. For now, I disable most processing if the shader writes to `AMBIENT_LIGHT`, but I am open to other proposals. Decal processing is separate from lighting, and the builtin decal processing is currently disabled if `DECAL_PROCESS()` is ever called.\r\n\r\nFuture work:\r\nWriting all shading in a single function is a little bit awkward. I would like to change the injection point for user-written functions to be immediately above void main(). This would allow user-written functions to call some of these builtin functions as well as access some globals.\r\n\r\nGiving more access to global variables can only be a good thing, I think... I don't see a reason to disallow this. Also, variables not assigned in the vertex stage can still be disallowed at the shading language level. (We might need to do some dependency checking to avoid including functions which are called only from fragment in the vertex stage.)\r\n\r\nFinally, about compatibility with low-end rendering environments, such as GLES2 should it be implemented: this can be done in two ways:\r\n- implement a shader fallback so that another shader or material can be used if this fails to load (similar to Next Pass)\r\n- hide all the light iteration code around a `const bool` variable such as OUTPUT_IS_SRGB - this will cause code to be optimized out... and because we use accessor functions for everything, those can be easily stubbed out ; and then, light() can still be implemented with fallback lighting code and it will be called when run on a low-end rendering environment. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI predict that this enhancement, or assets based on it, will be heavily used. NPR shading is an extremely desired feature by some communities. In fact, there were 3 questions posed in the chat at the last Q&A asking for NPR. Genshin Impact is a high profile game and was based around an extremely stylized non-physical renderer (deferred, but no reason it can't be done as clustered-forward).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above: This proposal serves to add functionality to the engine not directly related to NPR, but which will enable toon shaders to be written and (hopefully) published to the asset library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1620/reactions",
      "total_count": 26,
      "+1": 25,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1619",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1619/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1619/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1619/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1619",
    "id": 715707399,
    "node_id": "MDU6SXNzdWU3MTU3MDczOTk=",
    "number": 1619,
    "title": "Detect custom C++ modules recursively",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-06T14:00:59Z",
    "updated_at": "2020-10-23T15:53:30Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n[Goost](https://github.com/goostengine/goost) Godot Engine Extension.\r\nSee also https://github.com/goostengine/godot-modules.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe existing [`custom_modules`](https://docs.godotengine.org/en/stable/development/compiling/introduction_to_the_buildsystem.html#custom-modules) SCons build options allows you to pass a list of directory paths to detect C++ modules for compiling with the engine.\r\n\r\nNow imagine the following scenarios:\r\n1. A module has nested modules versioned alongside a particular repository:\r\n   - https://github.com/goostengine/goost/tree/gd3/modules\r\n2. A module is *not* located at the root of a repository (where `SCSub` has to be found):\r\n   - https://github.com/Gramps/GodotSteam.\r\n   - https://github.com/FlutterTal/godot_ggpo\r\n\r\n\r\nBoth scenarios require you to manually specify additional paths which may contain such modules in repositories, which is a problem if this has to be done every time, especially for third-party C++ module packages where the structure may be not what you expect it to be.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose adding a way to search for modules recursively. This can significantly improve the build system usability for a regular user. There's another similar proposal usability-wise: #1561.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI see several ways:\r\n1. Make it so that specifying `custom_modules` shall detect all modules recursively by default.\r\n2. Add another build option such as `custom_modules_recursive=yes` (disabled by default)\r\n3. Add `modules_recursive=yes` option (would also apply for built-in modules).\r\n\r\nIt's likely that the detection logic has to be made more strict, like checking the presence of `register_types.h` as well as `SCSub`, because `SCSub` may be used to organize hierarchical builds within a project, not just modules.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's possible to write functions which can detect modules automatically in Python scripts, including `SConscript`s, otherwise have to specify search paths manually.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHave to modify root `SConstruct` and possibly `methods.py`.\r\n\r\nI can implement this myself, having previously worked on `custom_modules` support in godotengine/godot#36922.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1619/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1617",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1617/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1617/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1617/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1617",
    "id": 715354302,
    "node_id": "MDU6SXNzdWU3MTUzNTQzMDI=",
    "number": 1617,
    "title": "Support scaling of meshes in MeshLibrary",
    "user": {
      "login": "sairam4123",
      "id": 61322406,
      "node_id": "MDQ6VXNlcjYxMzIyNDA2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/61322406?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sairam4123",
      "html_url": "https://github.com/sairam4123",
      "followers_url": "https://api.github.com/users/sairam4123/followers",
      "following_url": "https://api.github.com/users/sairam4123/following{/other_user}",
      "gists_url": "https://api.github.com/users/sairam4123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sairam4123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sairam4123/subscriptions",
      "organizations_url": "https://api.github.com/users/sairam4123/orgs",
      "repos_url": "https://api.github.com/users/sairam4123/repos",
      "events_url": "https://api.github.com/users/sairam4123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sairam4123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-06T05:35:44Z",
    "updated_at": "2020-10-06T12:03:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** City Building Game\r\n\r\n**Describe the problem or limitation you are having in your project:**  \r\nMesh's or Object's scaling is reset when you convert a scene into a MeshLibrary.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**  \r\nSupport scaling of Object or Mesh in Meshlib.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**  \r\nI don't have one right now, I'll make one.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**  \r\nI've not researched about this. But I think, there's no way to workaround this with GDScript, there might be a way to workaround this issue with GDNative though.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**  \r\nThis is a little feature, but a important one that saves a lot of time for the developers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1617/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1616",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1616/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1616/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1616/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1616",
    "id": 715194317,
    "node_id": "MDU6SXNzdWU3MTUxOTQzMTc=",
    "number": 1616,
    "title": "Big Sur compatible new macOS app icon proposal",
    "user": {
      "login": "hazarek",
      "id": 36481442,
      "node_id": "MDQ6VXNlcjM2NDgxNDQy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/36481442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hazarek",
      "html_url": "https://github.com/hazarek",
      "followers_url": "https://api.github.com/users/hazarek/followers",
      "following_url": "https://api.github.com/users/hazarek/following{/other_user}",
      "gists_url": "https://api.github.com/users/hazarek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hazarek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hazarek/subscriptions",
      "organizations_url": "https://api.github.com/users/hazarek/orgs",
      "repos_url": "https://api.github.com/users/hazarek/repos",
      "events_url": "https://api.github.com/users/hazarek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hazarek/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359319259,
        "node_id": "MDU6TGFiZWwyMzU5MzE5MjU5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:macos",
        "name": "platform:macos",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2020-10-05T22:07:04Z",
    "updated_at": "2020-11-27T14:55:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nBig Sur compatible new macOS app icon,\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBig Sur compatible new macOS app icon\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n<img width=\"512\" alt=\"godot1\" src=\"https://user-images.githubusercontent.com/36481442/100390451-75a9c580-3041-11eb-8313-2f23c1ee2903.png\">\r\n<img width=\"512\" alt=\"godot2\" src=\"https://user-images.githubusercontent.com/36481442/100390458-79d5e300-3041-11eb-9a3a-43074ee52ad5.png\">\r\n\r\n\r\nI uploaded this to https://macosicons.com/, if you search for \"godot\" you will see.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1616/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1615",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1615/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1615/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1615/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1615",
    "id": 715085500,
    "node_id": "MDU6SXNzdWU3MTUwODU1MDA=",
    "number": 1615,
    "title": "Import newly generated resources before the game starts",
    "user": {
      "login": "Zylann",
      "id": 1311555,
      "node_id": "MDQ6VXNlcjEzMTE1NTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1311555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zylann",
      "html_url": "https://github.com/Zylann",
      "followers_url": "https://api.github.com/users/Zylann/followers",
      "following_url": "https://api.github.com/users/Zylann/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zylann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zylann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zylann/subscriptions",
      "organizations_url": "https://api.github.com/users/Zylann/orgs",
      "repos_url": "https://api.github.com/users/Zylann/repos",
      "events_url": "https://api.github.com/users/Zylann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zylann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-05T19:01:13Z",
    "updated_at": "2020-11-15T22:37:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I wasn't sure which title to choose but I decided it to be the actual use case.\r\nOtherwise, this proposal is about allowing plugins to **trigger an import on specific files**, and in particular, as part of a resource saver.\r\n\r\n**Describe the project you are working on:**\r\nA terrain plugin which produces or modifies textures on disk when its custom resource gets saved.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAs part of terrain data, I save regular textures as PNG files. These textures need to be imported by Godot, but they aren't, until the user unfocus and refocuses the editor to make it \"realize\" new files were created.\r\nThis causes very confusing situations where the user modifies the terrain, or adds a new layer, starts the game and then doesnt see anything.\r\nRelated: https://github.com/Zylann/godot_heightmap_plugin/issues/205#issuecomment-703800583\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIdeally, I would like to be able to tell Godot to import a specific file *immediately*, as part of the saving process. This is because saving may happen when the user starts the scene, so import *must complete before the game starts*.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere is a `ResourceLoader::import(filename)` function in the engine, which is not exposed. Maybe calling it at the end of my ResourceSaver's save function would do the trick, just after writing the PNGs to disk?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe only workaround is to unfocus the editor and refocus it. Constantly. Otherwise, there is no automatable workaround in my case.\r\n\r\nFirst I wondered where to even trigger the import, so I noticed the presence of the `resource_saved(res)` signal in `EditorPlugin`. Unfortunately, that signal only fires when the user saves a resource from the inspector, and not when a resource is saved when the user saves the scene (is that a bug? That behavior feels unfinished). So I thought doing it right inside my saving routine would be the correct place to do that.\r\n\r\nThen I looked for functions to actually trigger import, by searching \"import\" in the engine docs... but could not find anything that does what I want.\r\n\r\nThe Sketchfab plugin also has a similar need, which was worked around using some undocumented metadata stunt to trigger a scan on the whole project:\r\nhttps://github.com/sketchfab/godot-plugin/blob/379ad4da6e3f9297ff82efec64fe148a2e2f1017/addons/sketchfab/ModelDialog.gd#L188-L193\r\nHowever, this will still not work for me because that process is asynchronous, and as said above, the game could be starting already while such scan (and the imports that actually *follow* it) would not be complete. Not mentionning it also looks super slow compared to my needs.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt seems that it's core already. According to @lawnjelly , ResourceLoader::import() is used by the lightmap baker.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1615/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1614",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1614/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1614/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1614/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1614",
    "id": 714883053,
    "node_id": "MDU6SXNzdWU3MTQ4ODMwNTM=",
    "number": 1614,
    "title": "Include a script in the Godot repository to install build dependencies for Linux/BSD",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318904,
        "node_id": "MDU6TGFiZWwyMzU5MzE4OTA0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:linuxbsd",
        "name": "platform:linuxbsd",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-05T14:17:38Z",
    "updated_at": "2021-01-13T15:52:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nTo compile Godot on Linux, you need to install many dependencies using your distribution's package manager. Right now, you have to head to the [Compiling for Linux, *BSD](https://docs.godotengine.org/en/latest/development/compiling/compiling_for_linuxbsd.html) page and copy the distro-specific one-liner into a terminal.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or **limitation:****\r\n\r\nWe can move those distro-specific one-liners to a script that detects the user's Linux distribution. If some dependencies can't be installed or are too old, we can also print an error message, tell the user where to find up-to-date versions and exit gracefully.\r\n\r\nThis is mainly relevant for Linux/BSD. I could see this being useful to install Android and HTML5 build dependencies as well, but this is a secondary step.\r\n\r\n#### Advantages\r\n\r\n- If you compile Godot often on new systems or in VMs/containers, figuring out what dependencies to install can end up taking a significant amount of your time.\r\n- The dependencies listed in the script will always be relevant for the Godot version you want to compile, as long as the script is kept up-to-date.\r\n- We can improve error checking to give more helpful instructions to the user if their system can't be used to build Godot.\r\n\r\n#### Disadvantages\r\n\r\n- We have to maintain this script, which can be more work than a simple list of one-liners.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd a script like `install-linux-deps.sh` in the `misc/` folder. Users would be instructed to run `misc/install-linux-deps.sh` in the documentation, rather than pasting a distro-specific one-liner.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is buildsystem functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is buildsystem functionality. It could be provided by a third-party, but keeping it up-to-date might be difficult this way.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1614/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1613",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1613/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1613/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1613/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1613",
    "id": 714867619,
    "node_id": "MDU6SXNzdWU3MTQ4Njc2MTk=",
    "number": 1613,
    "title": "Add a way to specify compatible Godot versions for editor plugins",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-10-05T13:59:22Z",
    "updated_at": "2020-10-06T14:36:15Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIf you create an editor plugin, there is currently no built-in way to display an error or warning message if the plugin is being used with an incompatible Godot version. This can be done in the main plugin script using a version check and `push_error()` or `push_warning()`, but it has to be implemented manually by the plugin author.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd a `godot_version` field to `plugin.cfg`. This field would take the form of a [semanatic versioning range](https://docs.npmjs.com/misc/semver).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nHere are some example values for the `godot_version` field:\r\n\r\n- `^3.2.1`: compatible with 3.2.1, 3.2.2… but not 3.2 or 4.0\r\n- `3.2.x`: compatible with 3.2, 3.2.1, 3.2.2… but not 4.0\r\n- `*`: compatible with any version. Since this is too permissive (there's no plugin that can work with all Godot versions), this should probably not be allowed :slightly_smiling_face:\r\n  - Some package managers like [Cargo](https://doc.rust-lang.org/cargo/) have taken a similar stance and forbid using `*` ranges.\r\n\r\nFor the purposes of version comparison, \"zero\" patch releases such as Godot 3.2 will be treated as `3.2.0` by the semantic versioning comparator.\r\n\r\nThis Godot version field should be specifiable using the plugin creation dialog as well. By default, it would default to the current Godot version with a caret prepended. For example, when using Godot 3.2.3, the default value would be `^3.2.3`. If the plugin is known to work with earlier patches, this version field can be edited manually by the plugin author.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core editor functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is about improving the installation experience for editor plugins.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1613/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1612",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1612/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1612/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1612/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1612",
    "id": 714644893,
    "node_id": "MDU6SXNzdWU3MTQ2NDQ4OTM=",
    "number": 1612,
    "title": "Add Apple services for macOS",
    "user": {
      "login": "PoqXert",
      "id": 3893594,
      "node_id": "MDQ6VXNlcjM4OTM1OTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3893594?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PoqXert",
      "html_url": "https://github.com/PoqXert",
      "followers_url": "https://api.github.com/users/PoqXert/followers",
      "following_url": "https://api.github.com/users/PoqXert/following{/other_user}",
      "gists_url": "https://api.github.com/users/PoqXert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PoqXert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PoqXert/subscriptions",
      "organizations_url": "https://api.github.com/users/PoqXert/orgs",
      "repos_url": "https://api.github.com/users/PoqXert/repos",
      "events_url": "https://api.github.com/users/PoqXert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PoqXert/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359319259,
        "node_id": "MDU6TGFiZWwyMzU5MzE5MjU5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:macos",
        "name": "platform:macos",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-05T08:44:51Z",
    "updated_at": "2020-10-05T09:40:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCross-platform Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe game use Apple GameCenter and purchases. It available on iOS and macOS, but Godot implements for iOS only.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMove implementation (GameCenter, purchases etc.). from core to module and add macOS. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSame as now, but on two platforms.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1609",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1609/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1609/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1609/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1609",
    "id": 714333195,
    "node_id": "MDU6SXNzdWU3MTQzMzMxOTU=",
    "number": 1609,
    "title": "Fall back to GLES2 automatically on known problematic GPUs with poor GLES3 support",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-04T15:04:25Z",
    "updated_at": "2020-10-04T15:05:02Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany desktop and mobile GPUs *claim* to support OpenGL 3.3/OpenGL ES 3.0, but do so poorly in practice. They can also have limitations that are incompatible with the current GLES3 renderer design.\r\n\r\nHere are some examples of such GPUs I've listed over the years, based on issue reports:\r\n\r\n### Desktop\r\n\r\n- AMD Radeon HD 3000/4000/5000 series\r\n- NVIDIA GeForce 8000/9000 series\r\n- 3rd-generation Intel HD Graphics (Ivy Bridge)\r\n\r\n### Mobile\r\n\r\n- Many Adreno GPUs\r\n\r\n*Note: I don't have issue links at hand, but it should be possible to find many of them by searching for [`is:issue is:open label:topic:rendering gles3`](https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+gles3+label%3Atopic%3Arendering) in the Godot issue tracker.*\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf the project uses GLES3 and **Fallback to Gles2** is enabled in the project settings, use GLES2 if the GPU is on the exclusion list.\r\n\r\nThis should be implemented in the `3.2` branch first, as the current `master` branch doesn't have GLES3 or GLES2 renderers yet.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n- Store a list of substrings to detect in `VisualServer::get_video_adapter_name()` somewhere in the engine's source code. This list generally don't need to change over time, since new GPU models are unlikely to have poor GLES3 support.\r\n- If there is a match in any of the substrings, fall back to GLES2 automatically.\r\n- Change the`--video-driver` command line argument to work as follows:\r\n  - If not specified, use the project-defined video driver. If GLES3 is used and **Fallback To Gles2** is enabled in the Project Settings, fall back to GLES2 on unsupported GPUs (or GPUs on the aforementioned exclusion list).\r\n  - If `--video-driver GLES3` is used, always attempt to use GLES3 even if the GPU is on the exclusion list. This can be used to bypass the automatic fallback, just in case.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as the renderer choice happens before any of the project's code is run.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core engine functionality, and is required to improve the user experience out of the box.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1609/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1608",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1608/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1608/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1608/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1608",
    "id": 714291653,
    "node_id": "MDU6SXNzdWU3MTQyOTE2NTM=",
    "number": 1608,
    "title": "Make it possible to toggle icon visibility in the Scene dock to declutter it",
    "user": {
      "login": "wingedadventurer",
      "id": 26509794,
      "node_id": "MDQ6VXNlcjI2NTA5Nzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/26509794?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wingedadventurer",
      "html_url": "https://github.com/wingedadventurer",
      "followers_url": "https://api.github.com/users/wingedadventurer/followers",
      "following_url": "https://api.github.com/users/wingedadventurer/following{/other_user}",
      "gists_url": "https://api.github.com/users/wingedadventurer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wingedadventurer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wingedadventurer/subscriptions",
      "organizations_url": "https://api.github.com/users/wingedadventurer/orgs",
      "repos_url": "https://api.github.com/users/wingedadventurer/repos",
      "events_url": "https://api.github.com/users/wingedadventurer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wingedadventurer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-10-04T11:19:48Z",
    "updated_at": "2020-10-04T17:56:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAny project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nScene dock can get cluttered with all of the icons visible, as seen in example below:\r\n\r\n![old](https://user-images.githubusercontent.com/26509794/95013652-fea81000-0641-11eb-8e2f-b20525cf15f8.png)\r\n\r\nThere are some icons that i don't care about. For example:\r\n\r\n* I don't care that KinematicBody2D nodes don't have collision shape, I intend to add them later.\r\n* I also don't care that a node is in a group.\r\n\r\nFinally, when i worked on 1366x768 resolution before, the Scene dock would get very cluttered, especially when working with UI for example. Ability to remove some icons could help with this issue a bit.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow hiding icons by their type. User can easily hide the icons they don't care about.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe mockups below illustrate how it looks with some icons hidden:\r\n\r\n![new_1](https://user-images.githubusercontent.com/26509794/95013765-ade4e700-0642-11eb-9080-6d39afc4aa49.png)\r\n\r\nThis is the View popup mockup:\r\n\r\n![new_2](https://user-images.githubusercontent.com/26509794/95013775-bf2df380-0642-11eb-80c8-6c2f365a286d.png)\r\n\r\nThese are just mockups, so things like order of icons in the popup, or `View` button alternative, are subject to change.\r\n\r\nAny additional ideas are welcome. :)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A (editor enhancement)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n2D and 3D editors already provide ways to toggle visibility of some elements, why not have something similar for the Scene dock as well?\r\n\r\nEdit: renamed \"Tree dock\" to \"Scene dock\"",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1608/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1607",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1607/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1607/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1607/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1607",
    "id": 714289451,
    "node_id": "MDU6SXNzdWU3MTQyODk0NTE=",
    "number": 1607,
    "title": "Feature / TextEdit jumping to start or end of selection",
    "user": {
      "login": "RoniPerson",
      "id": 67514656,
      "node_id": "MDQ6VXNlcjY3NTE0NjU2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/67514656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoniPerson",
      "html_url": "https://github.com/RoniPerson",
      "followers_url": "https://api.github.com/users/RoniPerson/followers",
      "following_url": "https://api.github.com/users/RoniPerson/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoniPerson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoniPerson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoniPerson/subscriptions",
      "organizations_url": "https://api.github.com/users/RoniPerson/orgs",
      "repos_url": "https://api.github.com/users/RoniPerson/repos",
      "events_url": "https://api.github.com/users/RoniPerson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoniPerson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-04T11:06:01Z",
    "updated_at": "2020-10-06T00:40:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** Every project I work on has the problem.\r\n\r\n**Describe the problem or limitation you are having in your project:** When editing code you can do selection with shift key combined with arrow keys. In other editors like VSCode it's so that when you let go the shift key and then press the left or right arrow the cursor jumps to the start or end of the selection and deselects everything. But in godot it only jumps one to the left or right. This often stops my workflow when copying values from the same line.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** The feature would have the option in the settings to enable the jumping mechanics of VSCode. So who has worked with VSCode before can enable it and stick to his programming flow.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nif( key = RIGHT && !modifiers.shift && selection.active && settings.feature_active){\r\n    cursor = selection.end;\r\n} else {\r\n    // default behavior\r\n}\r\n\r\nif( key = LEFT && !modifiers.shift && selection.active && settings.feature_active){\r\n    cursor = selection.start;\r\n} else {\r\n    // default behavior\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It is to small for an add-on. But it is one of the small things that come together to give the best user experience.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1606",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1606/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1606/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1606/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1606",
    "id": 714231795,
    "node_id": "MDU6SXNzdWU3MTQyMzE3OTU=",
    "number": 1606,
    "title": "Allow to create custom more complex nodes",
    "user": {
      "login": "crisestudio",
      "id": 72047925,
      "node_id": "MDQ6VXNlcjcyMDQ3OTI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/72047925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crisestudio",
      "html_url": "https://github.com/crisestudio",
      "followers_url": "https://api.github.com/users/crisestudio/followers",
      "following_url": "https://api.github.com/users/crisestudio/following{/other_user}",
      "gists_url": "https://api.github.com/users/crisestudio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crisestudio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crisestudio/subscriptions",
      "organizations_url": "https://api.github.com/users/crisestudio/orgs",
      "repos_url": "https://api.github.com/users/crisestudio/repos",
      "events_url": "https://api.github.com/users/crisestudio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crisestudio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-10-04T04:36:01Z",
    "updated_at": "2020-10-04T13:44:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D fighter\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's very bothersome to not be able to create quickly new custom nodes to reuse scenes between projects/levels and upload them to the asset store so can be used by others or reused by myself.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow to create custom nodes easily, improve the export keyword functionality, so It can be used to create custom interfaces in a scene, which you can later save as a single node, but in reality is just a scene made from basic nodes.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAllow the root node to have some script with export variables, that allow to create a custom interface, similar to unity component system (which is just an interface of inner nodes), allowing for reusal of scenes between users/projects, and allow it to be uploaded to the asset store.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, requires some improvements to the export keyword.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo, It's a core editor issue to export to the asset library.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1602",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1602/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1602/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1602/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1602",
    "id": 714036870,
    "node_id": "MDU6SXNzdWU3MTQwMzY4NzA=",
    "number": 1602,
    "title": "Allow editing the editor settings from inside the project manager",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-03T08:16:55Z",
    "updated_at": "2020-10-03T08:16:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nGodot Engine, specifically I was reminded of this feature when working on [this PR](https://github.com/godotengine/godot/pull/42447).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThere is no way to edit the editor settings in the project manager, you have to open a project to edit the editor settings. This is a bit strange since the settings in editor settings aren't tied to a particular project, and some are only relevant for the project manager, ex:\r\n\r\n![](https://user-images.githubusercontent.com/1646875/94894648-c7760b00-0457-11eb-832b-2ac97e1a0b8b.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding a button to the project manager to open up the \"Editor Settings\" menu would solve this.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI tried implementing it [here](https://github.com/aaronfranke/godot/tree/editor-settings-pm), but it crashes on launch. It seems that the editor settings menu currently depends on having an `EditorNode` present (an open project), not sure what would be required to properly untangle this spaghetti.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe workaround is to open a project.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAny project will work as a workaround, but this is about improving the project manager.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1602/reactions",
      "total_count": 16,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1599",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1599/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1599/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1599/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1599",
    "id": 713697304,
    "node_id": "MDU6SXNzdWU3MTM2OTczMDQ=",
    "number": 1599,
    "title": "Add Preview Sun and Preview Sky options to 3D editor",
    "user": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "clayjohn",
      "id": 16521339,
      "node_id": "MDQ6VXNlcjE2NTIxMzM5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16521339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clayjohn",
      "html_url": "https://github.com/clayjohn",
      "followers_url": "https://api.github.com/users/clayjohn/followers",
      "following_url": "https://api.github.com/users/clayjohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/clayjohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clayjohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clayjohn/subscriptions",
      "organizations_url": "https://api.github.com/users/clayjohn/orgs",
      "repos_url": "https://api.github.com/users/clayjohn/repos",
      "events_url": "https://api.github.com/users/clayjohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clayjohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "clayjohn",
        "id": 16521339,
        "node_id": "MDQ6VXNlcjE2NTIxMzM5",
        "avatar_url": "https://avatars2.githubusercontent.com/u/16521339?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clayjohn",
        "html_url": "https://github.com/clayjohn",
        "followers_url": "https://api.github.com/users/clayjohn/followers",
        "following_url": "https://api.github.com/users/clayjohn/following{/other_user}",
        "gists_url": "https://api.github.com/users/clayjohn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/clayjohn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clayjohn/subscriptions",
        "organizations_url": "https://api.github.com/users/clayjohn/orgs",
        "repos_url": "https://api.github.com/users/clayjohn/repos",
        "events_url": "https://api.github.com/users/clayjohn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/clayjohn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-10-02T15:11:57Z",
    "updated_at": "2020-12-27T12:40:50Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nHaving default lighting conditions when editing isolated 3D scenes is an annoyance and has always been.\r\n\r\nDue to the modular nature of Godot, if you add a DirectionalLight or a WorldEnvironment to an isolated scene, only to test how an object looks, then these remain when the scene is instantiated into another one. There is the \"Editor Only\" tickbox, but it does not solve the problem because the main scene will also have extra lights from the instances when edited. Its also highly unintuitive.\r\n\r\nFor this, the \"Default Environment\" was added, but its quite a hassle, and adds loading time to projects because that sky has to be generated, even in 2D projects when the file exists.\r\n\r\nAdditionally many artists complain that they would just like to have a simple \"looks good\" tick to see their geometry.\r\n\r\nIts finally time to solve this problem once and for all.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nSimple, easy to use, light and sky menus will be provided. They will save the data only in the editor and only for the current user (this setting is editor only, is not saved to the scene file and does not appear during run-time).\r\n\r\nThe users may want to carry over the quickly edited sky and sun to the final scene so they can optionally, convert this \"editor only\" sun and sky or environment to scene nodes (DirectionalLight and WorldEnvironment). When nodes of this type exist in the scene, the editor provided ones will become disabled (can no longer be used, since the scene nodes are used instead).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe idea is to add these two icons to the 3D editor (sorry my artistic skill is terrible, they will be improved):\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/94936423-98d25180-04a4-11eb-8526-85a57c726466.png)\r\n\r\nThey toggle a default light and default sky on and off.\r\n\r\nTo edit them, options can be added into the view menu.\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/94937150-91f80e80-04a5-11eb-9a08-685c0bb783c9.png)\r\n\r\nAgain both the sun/sky icons and the menu item will appear grey if a DirectionalLight or WorldEnvironment is present on the scene respectively.\r\n\r\nEach of the editors will look as follows:\r\n\r\nSun Preview Editor:\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/94938286-02ebf600-04a7-11eb-8274-192e04020342.png)\r\n\r\nSky Preview Editor (needs some discussion on simplified exposed features, or possibly just a ready made \"HDR\" mode option that enables glow/tonemap and other \"looks good\" options):\r\n\r\n![image](https://user-images.githubusercontent.com/6265307/94939236-38451380-04a8-11eb-8556-0532bccccbec.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, this is core editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1599/reactions",
      "total_count": 31,
      "+1": 24,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 7,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1596",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1596/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1596/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1596/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1596",
    "id": 713638354,
    "node_id": "MDU6SXNzdWU3MTM2MzgzNTQ=",
    "number": 1596,
    "title": "Use most intense rumble if `Input.start_joy_vibration()` is called multiple times",
    "user": {
      "login": "jitspoe",
      "id": 7751182,
      "node_id": "MDQ6VXNlcjc3NTExODI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7751182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jitspoe",
      "html_url": "https://github.com/jitspoe",
      "followers_url": "https://api.github.com/users/jitspoe/followers",
      "following_url": "https://api.github.com/users/jitspoe/following{/other_user}",
      "gists_url": "https://api.github.com/users/jitspoe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jitspoe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jitspoe/subscriptions",
      "organizations_url": "https://api.github.com/users/jitspoe/orgs",
      "repos_url": "https://api.github.com/users/jitspoe/repos",
      "events_url": "https://api.github.com/users/jitspoe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jitspoe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-10-02T13:51:35Z",
    "updated_at": "2020-10-02T17:05:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nFist of the Forgotten, a momentum-based platformer.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIf I have multiple things triggering rumble (ex: landing and taking damage), only the most recent rumble value is used, so sometimes a low-intensity rumble overrides what should be an intense rumble.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUsers will be able to call the start_joy_vibration() function for various events and the most intense values will always be used, even if it's called multiple times in the same frame.\r\n\r\nExample, start_joy_vibration(0, 0.1, 1.0, 0.1) and start_joy_vibration(0, 0.5, 0.1, 0.5) are both called on the same frame.\r\nFor 0.1s, the rumble values 0.5 and 1.0 would be used, then for the remaining 0.4s, 0.5 and 0.1 would be used.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf start_joy_vibration() is called before an existing vibration is finished, the new vibration values would be added to a list.  Whatever rumble has the most intense value will be used.  Instead of a single VibrationInfo per device, an array of them could be used.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be done in script, but it's a bit complicated.  Seems like the type of thing that should \"just work\".\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI suppose it could be an add-on, but it would be more optimal if handled in C++, and it's something I feel should \"just work\".",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1596/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1595",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1595/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1595/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1595/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1595",
    "id": 713582636,
    "node_id": "MDU6SXNzdWU3MTM1ODI2MzY=",
    "number": 1595,
    "title": "Improve input of HDR/overbright colors in ColorPicker",
    "user": {
      "login": "vitorbalbio",
      "id": 6172013,
      "node_id": "MDQ6VXNlcjYxNzIwMTM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6172013?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitorbalbio",
      "html_url": "https://github.com/vitorbalbio",
      "followers_url": "https://api.github.com/users/vitorbalbio/followers",
      "following_url": "https://api.github.com/users/vitorbalbio/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitorbalbio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitorbalbio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitorbalbio/subscriptions",
      "organizations_url": "https://api.github.com/users/vitorbalbio/orgs",
      "repos_url": "https://api.github.com/users/vitorbalbio/repos",
      "events_url": "https://api.github.com/users/vitorbalbio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitorbalbio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-10-02T12:26:05Z",
    "updated_at": "2020-10-02T12:42:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nhttps://twitter.com/ZeroPointGame\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently working with HDR colors is only possible with a \"hack\". You need to set it manually on the raw RGB values.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nBetter handlers for HDR Colors in the Color Picker.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere's no much to think about it. We can jut add another slider to setup Intensity (that will be multiplied by the colors).\r\nAnd allow us to set Value colors > 100 in HSV.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a core feature of the Editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1595/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1594",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1594/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1594/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1594/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1594",
    "id": 713562524,
    "node_id": "MDU6SXNzdWU3MTM1NjI1MjQ=",
    "number": 1594,
    "title": "AnimationPlayer Frame Signal",
    "user": {
      "login": "SoapSpangledGames",
      "id": 55257920,
      "node_id": "MDQ6VXNlcjU1MjU3OTIw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/55257920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SoapSpangledGames",
      "html_url": "https://github.com/SoapSpangledGames",
      "followers_url": "https://api.github.com/users/SoapSpangledGames/followers",
      "following_url": "https://api.github.com/users/SoapSpangledGames/following{/other_user}",
      "gists_url": "https://api.github.com/users/SoapSpangledGames/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SoapSpangledGames/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SoapSpangledGames/subscriptions",
      "organizations_url": "https://api.github.com/users/SoapSpangledGames/orgs",
      "repos_url": "https://api.github.com/users/SoapSpangledGames/repos",
      "events_url": "https://api.github.com/users/SoapSpangledGames/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SoapSpangledGames/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-02T11:49:33Z",
    "updated_at": "2020-10-03T21:58:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAn alphabet learning game. The player flies a dragon through scenery looking for specific letters and avoiding obstacles.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nA donkey kicks a barrel into the player's path. I have an AnimationPlayer playing the kick+return to neutral position animation, but I don't know when the animation reaches the frame where the donkey's feet visually touch the barrel in order to start the barrel flying.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIf AnimationPlayer reported its current frame, I could then detect when the donkey's feet visually touch the barrel, and then start the barrel's flight path.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIt would be a simple signal, \"frame_changed(frame)\", where the frame parameter is the current frame being played.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis should be a core feature of AnimationPlayer, as it would be useful under many circumstances. Probably the best workaround at this point is to use a timer that fires off at the approximate contact time within the animation. However, this is clumsy and prone to timing errors.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nReporting the current animation frame being played is a fundamental responsibility of an animation player.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1593",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1593/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1593/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1593/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1593",
    "id": 713413324,
    "node_id": "MDU6SXNzdWU3MTM0MTMzMjQ=",
    "number": 1593,
    "title": "Add callbacks to `Main::setup()` / `Main::start()` / `Main::cleanup()`, so to allow much freedom to modules.",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-02T07:28:09Z",
    "updated_at": "2020-10-08T12:38:26Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a game, and I'm creating various C++ modules. Couple of those modules, need to know when the engine setup is over, and so the `SceneTree` or other singletons are ready to be used.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThose modules try to connect to some events like `process` and so on, but since the engine is not ready, there is no way to connects to those events. Right now, from the `register_MODULE_types()` it's not possible to know when the engine starts.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is to add 3 callbacks to the `Main` class:\r\n- on_setup_done\r\n- on_start\r\n- on_cleanup\r\n\r\nFrom the `register_MODULE_types()` will be possible to add callbacks in the following way:\r\n```cpp\r\nvoid register_MODULE_types(){\r\n    Main::add_callback(&my_setup_function, Main::SETUP_CALLBACK);\r\n}\r\n```\r\nAll the registered callbacks will be called when the setup/start terminates or the cleanup is started.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nRight before the `Main::setup2` is done https://github.com/godotengine/godot/blob/master/main/main.cpp#L1719-L1720 the following code is executed:\r\n```cpp\r\nfor(int i = 0; i < on_setup_done_callbacks.size(); i+=1){\r\n    on_setup_done_callbacks[i]();\r\n}\r\n```\r\nSo the modules, will be able to interact with the engine extensively.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nLow level feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nLow level feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1593/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1592",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1592/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1592/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1592/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1592",
    "id": 713412758,
    "node_id": "MDU6SXNzdWU3MTM0MTI3NTg=",
    "number": 1592,
    "title": "Allow to override the Godot main so to customize the process loop deeply.",
    "user": {
      "login": "AndreaCatania",
      "id": 8342599,
      "node_id": "MDQ6VXNlcjgzNDI1OTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8342599?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndreaCatania",
      "html_url": "https://github.com/AndreaCatania",
      "followers_url": "https://api.github.com/users/AndreaCatania/followers",
      "following_url": "https://api.github.com/users/AndreaCatania/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndreaCatania/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndreaCatania/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndreaCatania/subscriptions",
      "organizations_url": "https://api.github.com/users/AndreaCatania/orgs",
      "repos_url": "https://api.github.com/users/AndreaCatania/repos",
      "events_url": "https://api.github.com/users/AndreaCatania/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndreaCatania/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-10-02T07:27:03Z",
    "updated_at": "2020-10-17T17:42:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm implementing an Entity Component System module for Godot 4.0. To properly integrate it, it's necessary to process the servers and the other Godot parts (like the `SceneTree`) in a specific way.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTo customize the process loop, so to use the ECS pipeline, it's necessary to change the `Main::iteration`. Right now it's not possible customize the process loop at such deepness without forking Godot.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is to create a system that allows, from a module, to override the `Main::iteration` function and so be able to customize it. In this way, it's possible to add features that need to work at such deepness with the engine, (like for the ECS module), without forking or requesting feature proposal. Features that can be shipped separately from the engine, but still well integrated and easy to use.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's possible to see the needed change directly into this PR: godotengine/godot#42875\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's a low level change.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a low level change.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1592/reactions",
      "total_count": 47,
      "+1": 27,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 6,
      "rocket": 4,
      "eyes": 5
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1590",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1590/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1590/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1590/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1590",
    "id": 712978574,
    "node_id": "MDU6SXNzdWU3MTI5Nzg1NzQ=",
    "number": 1590,
    "title": "Make @GDScript scope cleaner",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 10,
    "created_at": "2020-10-01T16:02:10Z",
    "updated_at": "2020-11-20T15:46:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on:\r\nA game\r\n\r\n### Describe the problem or limitation you are having in your project:\r\nI noticed that some of the global functions in GDScript duplicate/overlap with functionality of other built-in classes.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation:\r\nMy proposal describes each individual case and possible solutions. Perhaps some cases will remain unchanged, but I will be glad if GDScript becomes a little cleaner.\r\n\r\n### Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\r\n\r\n#### 1. to_json(), validate_json() and parse_json()\r\nThere is the `JSON` singleton that does the same.\r\n\r\n```gdscript\r\nvar arr = [1, 2, 3]\r\nprint(to_json(arr))\r\n\r\nvar json = \"[1, 2, 3]\"\r\nvar err = validate_json(json)\r\nif err:\r\n    print(\"Error: \", err)\r\nelse:\r\n    print(parse_json(json))\r\n```\r\n\r\n```gdscript\r\nvar arr = [1, 2, 3]\r\nprint(JSON.print(arr))\r\n\r\nvar json = \"[1, 2, 3]\"\r\nvar res = JSON.parse(json)\r\nif res.error:\r\n    print(\"Error: \", res.error_string)\r\nelse:\r\n    print(res.result)\r\n```\r\n\r\nAs we can see, the number of lines has not changed, the code has not become more complicated or much longer. Moreover, the `JSON` singleton and the `JSONParseResult` class provide several additional capabilities that GDScript functions do not.\r\n\r\n![](https://user-images.githubusercontent.com/47700418/94817875-2ad74d00-0406-11eb-9f2a-e01727a94ccc.png)\r\n![](https://user-images.githubusercontent.com/47700418/94817992-4a6e7580-0406-11eb-9d5a-f698160c6ddd.png)\r\n\r\n_I propose remove the `@GDScript.to_json()`, `@GDScript.validate_json()` and `@GDScript.parse_json()` functions._\r\n\r\n#### 2. randomize(), seed() and rand_seed()\r\n\r\nIt seems to me that having control over the global RNG seed is a bad idea. The global RNG has to be randomized implicitly, as in many other scripting programming languages. Thus, `@GDScript.rand*()` functions will use a different seed each project run. For deterministic sequences of pseudo-random numbers, use the `RandomNumberGenerator` class.\r\n\r\nIf someone uses the `@GDScript.seed()` function - please respond and describe why you need it.\r\n\r\n_I propose remove the `@GDScript.randomize()`, `@GDScript.seed()` and `@GDScript.rand_seed()` functions, and also make it so that the global RNG is randomized implicitly when the project starts._\r\n\r\n#### 3. str2var(), bytes2var(), dict2inst() and var2str(), var2bytes(), inst2dict()\r\n\r\nIn my opinion, these functions are relatively rarely used, they are not GDScript-specific, and therefore there is nothing wrong with moving them into the `Marshalls` singleton, which already contains similar functions:\r\n\r\n![](https://user-images.githubusercontent.com/47700418/94829665-6b899300-0413-11eb-83a2-66727cab4677.png)\r\n\r\nBy the way, the `Marshalls` singleton lacks the `string_to_hex()` and `hex_to_string()` functions, now this needs to be done through the intermediate `PoolByteArray`, which is not very convenient.\r\n\r\n_I propose move `@GDScript.{str2var,bytes2var,dict2inst,var2str,var2bytes,inst2dict}()` functions to `Marshalls` singleton with consistent names._\r\n\r\n#### 4. Color8() and ColorN()\r\n\r\nPerhaps these functions should be part of the `Color` class.\r\n\r\nThis is especially true of the `ColorN` function, because `N` still gives me associations with a number, not a name. Maybe, the `Color(from: String)` constructor should recognize not only hex colors, but also named colors (for example, `Color('red')`).\r\n\r\nAs for `Color8`, maybe we need a static method called `Color.from_rgb8()`, similar to `Color.from_hsv()`?\r\n\r\n_I'm not sure, but I think we should discuss this?_\r\n\r\n#### 5. load()\r\n\r\nSee https://github.com/godotengine/godot-proposals/issues/263#issuecomment-560018422\r\n\r\n`@GDScript.load()` and `ResourceLoader.load()` are the same. However, I think we shouldn't change this, because `load()` is used quite often and is a pair for `preload()`, which is not present in `ResourceLoader`.\r\n\r\n_I'm opposed, but I must mention this for the sake of completeness._\r\n\r\n#### 6. db2linear() and linear2db()\r\n\r\n_These are very specific functions, maybe they should be moved to the `AudioServer` singleton?_\r\n\r\n### If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\nNo, this is part of the GDScript language.\r\n\r\n### Is there a reason why this should be core and not an add-on in the asset library?:\r\nYes, this is part of the GDScript language. :smiley: ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1590/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1589",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1589/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1589/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1589/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1589",
    "id": 712970898,
    "node_id": "MDU6SXNzdWU3MTI5NzA4OTg=",
    "number": 1589,
    "title": "Promote the dangling Variant fix to release builds",
    "user": {
      "login": "RandomShaper",
      "id": 11797174,
      "node_id": "MDQ6VXNlcjExNzk3MTc0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11797174?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandomShaper",
      "html_url": "https://github.com/RandomShaper",
      "followers_url": "https://api.github.com/users/RandomShaper/followers",
      "following_url": "https://api.github.com/users/RandomShaper/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandomShaper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandomShaper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandomShaper/subscriptions",
      "organizations_url": "https://api.github.com/users/RandomShaper/orgs",
      "repos_url": "https://api.github.com/users/RandomShaper/repos",
      "events_url": "https://api.github.com/users/RandomShaper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandomShaper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/3",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/3",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/3/labels",
      "id": 5540413,
      "node_id": "MDk6TWlsZXN0b25lNTU0MDQxMw==",
      "number": 3,
      "title": "3.2",
      "description": "This proposal is planned to be implemented soon and backported to 3.2.x",
      "creator": {
        "login": "m4gr3d",
        "id": 914968,
        "node_id": "MDQ6VXNlcjkxNDk2OA==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/914968?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m4gr3d",
        "html_url": "https://github.com/m4gr3d",
        "followers_url": "https://api.github.com/users/m4gr3d/followers",
        "following_url": "https://api.github.com/users/m4gr3d/following{/other_user}",
        "gists_url": "https://api.github.com/users/m4gr3d/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/m4gr3d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/m4gr3d/subscriptions",
        "organizations_url": "https://api.github.com/users/m4gr3d/orgs",
        "repos_url": "https://api.github.com/users/m4gr3d/repos",
        "events_url": "https://api.github.com/users/m4gr3d/events{/privacy}",
        "received_events_url": "https://api.github.com/users/m4gr3d/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 1,
      "closed_issues": 17,
      "state": "open",
      "created_at": "2020-06-15T04:42:58Z",
      "updated_at": "2020-12-28T01:44:34Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 10,
    "created_at": "2020-10-01T15:52:46Z",
    "updated_at": "2020-10-03T18:39:41Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt's not really related to my project, but to game projects from many people.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe problem is that the current dangling `Variant` fix (https://github.com/godotengine/godot/pull/38119 plus some fixups) only applies to debug (or release_debug) builds, so people is getting bitten by crashes or wrong logic related to the lack of that protection on production. While it's true that the editor will warn you about those situations at dev time, there are usually still states a game can be in that are hard to cover in testing, but can very well happen to users.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe idea is to have the following:\r\n- Godot 3.2: dangling `Variant` fix is applied on pure release builds, too. The performance measurements that have been done so far make this completely reasonably: you get extra robustness at the same performance (theoretically a bit worse, but negligible; but even better in some checks).\r\n- Godot 4.0: here it would be soon enough to take this some steps further:\r\n-- Finally get rid of things like `is_instance_valid`.\r\n-- Enable decayment of freed objects to `null` (that was initially in the fix for 3.2, but was removed because it was a change of behavior).\r\n-- Compare performance of the current approach to protection in 4.0 (quick `ObjectDB` checks) to the one in 3.2 and leave the fastest.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI think it's already pretty clear.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIf a developer could really ensure the lifetime of every object in their game is perfectly tracked, maybe some (or a lot of) scripting would fix the problem. But that's not the case.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is hardcore core stuff, so not possible.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1589/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1587",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1587/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1587/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1587/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1587",
    "id": 712173953,
    "node_id": "MDU6SXNzdWU3MTIxNzM5NTM=",
    "number": 1587,
    "title": "Add a CollisionShape2D shape which is a line and can take PoolVector2Array as points",
    "user": {
      "login": "TanosOP",
      "id": 72160396,
      "node_id": "MDQ6VXNlcjcyMTYwMzk2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/72160396?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TanosOP",
      "html_url": "https://github.com/TanosOP",
      "followers_url": "https://api.github.com/users/TanosOP/followers",
      "following_url": "https://api.github.com/users/TanosOP/following{/other_user}",
      "gists_url": "https://api.github.com/users/TanosOP/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TanosOP/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TanosOP/subscriptions",
      "organizations_url": "https://api.github.com/users/TanosOP/orgs",
      "repos_url": "https://api.github.com/users/TanosOP/repos",
      "events_url": "https://api.github.com/users/TanosOP/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TanosOP/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-09-30T18:27:12Z",
    "updated_at": "2020-12-03T07:03:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a game in which user can draw line using Line2D. I have a RigidBody2D(it's mode is set as kinematic) which has Line2D and CollisionShape2D as children. I use get_global_mouse_position() to add points to the Line2D. When the user releases mouse I want it to generate a LineShape for the CollisionShape2D node and set the RigidBody2D mode to Rigid\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI can't seem to properly use a CollisionShape generated using SegementShape2D's. And there isn't any other collision shape which acts like a normal line.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nIt will help to overcome the problem as I could use the Line2D points to generate a LineShape2D for the CollisionShape2D node which is precisely what I need.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\nif Input.is_action_just_released(\"click\"):\r\n    var lineshape = LineShape2D.new()\r\n    lineshape.points = get_node(\"Line2D\").points\r\n    get_node(\"CollisionShape2D\").shape = lineshape\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nFor my case, It can't be worked around as I tried using SegementShape2D's but that didn't work too.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI think LineShape2D can be used in many Projects by various people and will be a huge help for me too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1586",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1586/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1586/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1586/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1586",
    "id": 711871699,
    "node_id": "MDU6SXNzdWU3MTE4NzE2OTk=",
    "number": 1586,
    "title": "Require contributors to write unit tests for pull requests",
    "user": {
      "login": "CitrusWire",
      "id": 72134064,
      "node_id": "MDQ6VXNlcjcyMTM0MDY0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/72134064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CitrusWire",
      "html_url": "https://github.com/CitrusWire",
      "followers_url": "https://api.github.com/users/CitrusWire/followers",
      "following_url": "https://api.github.com/users/CitrusWire/following{/other_user}",
      "gists_url": "https://api.github.com/users/CitrusWire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CitrusWire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CitrusWire/subscriptions",
      "organizations_url": "https://api.github.com/users/CitrusWire/orgs",
      "repos_url": "https://api.github.com/users/CitrusWire/repos",
      "events_url": "https://api.github.com/users/CitrusWire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CitrusWire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2020-09-30T11:38:19Z",
    "updated_at": "2020-10-13T11:13:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nn/a\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI am currently evaluating Godot for use in my project. Part of this evaluation includes looking at the development environment around Godot; specifically, does it follow software-development best practices such as having requiring Unit Tests with PR's.\r\nUnit Tests are required for infrastructure (which is what Godot is), to ensure there are no regressions between versions. Regressions between versions mean things that were working now break in an undocumented way.\r\n\r\nA single regression can potentially waste thousands of person-hours across all Godot users:\r\n* Countless developers having to debug their games, including the entire QA process if they're an organisation.\r\n* Lots of community time spent discussing the issue and helping those debuggings.\r\n* Engine/library bugs are the hardest to discover because the End User has to consider that any bugs are in their own software first, so has to eliminate all possibilities that's the case before finally concluding it's a problem with the engine/library.\r\n\r\n\r\nThis is also evidenced in the research - https://www.researchgate.net/figure/IBM-System-Science-Institute-Relative-Cost-of-Fixing-Defects_fig1_255965523 - the cost to fix a bug in a Maintenance deployment is 100 times as expensive as fixing it in Design, as compared to just 6.5 times the cost at Implementation.\r\n\r\nAt the time of writing Godot has about 1000 (Open and Closed) issues with the word \"regression\" either in the text or using that flag; and this is likely an underestimate as not all regressions will be marked. This seems like a very large number of regressions for a project that prides itself on being such a small codebase.\r\n\r\nIf you want a stable, reliable game engine that is suitable for non-hobby projects, comprehensive test coverage is a must.\r\n\r\nTL;DR: The problem is that I do not trust Godot to not introduce frequent regressions into my projects.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nGoDot PR's should require Unit Tests.\r\n\r\nBy doing this, over time Godot will see a reduced number of regressions introduced to the codebase. This in turn will free up limited Godot dev resources to contribute to other things in the project, reduce the number of issues raised, and provide end-users with peace-of-mind that the core is stable.\r\n\r\nIdeally over time Unit Tests should also be created for historical code.\r\n\r\nResearch has indicated that Unit Tests (at least when applied via Test Driven Development) can lead to \"a significant increase in quality of the code (greater than two times) for projects developed using TDD\" - https://dl.acm.org/doi/abs/10.1145/1159733.1159787 - \"Additionally, the unit tests have served as auto documentation\".\r\n\r\nThe downside is that \"The projects also took at least 15% extra upfront time for writing the tests.\".\r\n\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis is for the project to decide. This is a process/procedure/workflow suggestion, not a technical suggestion.\r\nA code coverage counter could also be added to the Github project (you already have code helpers, lgtm alerts etc) - https://github.com/marketplace/codecov (free for OS).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nn/a\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDue to its very nature this is about the development process behind the Godot Core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1586/reactions",
      "total_count": 16,
      "+1": 8,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1585",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1585/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1585/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1585/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1585",
    "id": 711733165,
    "node_id": "MDU6SXNzdWU3MTE3MzMxNjU=",
    "number": 1585,
    "title": "Add connection_check flag or parameter in connect/disconnect methods",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-30T08:11:27Z",
    "updated_at": "2020-12-23T20:05:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript editor plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\noften when connecting a signal, I cannot know in advance whether the signal has already been connected to a method.\r\nIn this case, I should use `if not obj.is_connected()`, otherwise I get the error\r\n> Signal is already connected to given method in that object\r\n\r\nthis check (using `is_connected`) makes the code noisier and less readable.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think it would be convenient to check a connection when using `CONNECT_CHECK` flag in `Object` `connect` method.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nenum  ConnectFlags:\r\nCONNECT_DEFERRED = 1\r\nCONNECT_PERSIST = 2\r\nCONNECT_ONESHOT = 4\r\nCONNECT_REFERENCE_COUNTED = 8\r\n_CONNECT_CHECK_ = 16 Connect a signal only if it is not connected\r\n\r\nthe same goes for the `disconnect` method.\r\n> If you try to disconnect a connection that does not exist, the method will throw an error. Use is_connected() to ensure that the connection exists\r\n\r\n`connect_check` parameter or flag could have been implemented to free a user from having to use `is_connected()`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's possible to create a `ConnectUtils` class and a static function something like `connect_once()` in it (or `ConnectUtils` singleton with `connect_once()` method) that would do the connection check, but this generates additional dependencies and it is not much more convenient than just using `if ! is_connected()` in the code every time.\r\nUsing a flag would be more convenient imo\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe `connect` method belongs to the `Object` class, so I think it would be more logical and handy to have this feature in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1584",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1584/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1584/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1584/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1584",
    "id": 711072172,
    "node_id": "MDU6SXNzdWU3MTEwNzIxNzI=",
    "number": 1584,
    "title": "Add support for multiple line comment blocks in GDScript",
    "user": {
      "login": "tx350z",
      "id": 956567,
      "node_id": "MDQ6VXNlcjk1NjU2Nw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/956567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tx350z",
      "html_url": "https://github.com/tx350z",
      "followers_url": "https://api.github.com/users/tx350z/followers",
      "following_url": "https://api.github.com/users/tx350z/following{/other_user}",
      "gists_url": "https://api.github.com/users/tx350z/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tx350z/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tx350z/subscriptions",
      "organizations_url": "https://api.github.com/users/tx350z/orgs",
      "repos_url": "https://api.github.com/users/tx350z/repos",
      "events_url": "https://api.github.com/users/tx350z/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tx350z/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-09-29T12:38:37Z",
    "updated_at": "2020-10-12T10:06:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA MMORPG space game using a realistic ship GUI simulation. The main game display includes a large number of GUI controls with complex inter-dependencies.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\"Self-documenting\" code is fine for projects that have a small code base. My project involves many GUI elements with complex interdependencies. Single line comments are insufficient to document both the \"what\" and (more importantly) the \"why\" of functions and code blocks. Multiple single-line comments can be used but are not collapsible in the editor. When several lines of comments are present, actual code becomes buried.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplement support for comment blocks found in most programming languages and allow the comment blocks to be collapsible like code blocks. /** */ is a commonly used syntax though many others exist.\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n/**\r\ncomment line 1\r\ncomment line 2\r\ncomment line 3\r\n*/\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI personally will use this often and believe others will also.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot sure if it can be done as an add-on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1584/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1580",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1580/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1580/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1580/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1580",
    "id": 710120536,
    "node_id": "MDU6SXNzdWU3MTAxMjA1MzY=",
    "number": 1580,
    "title": " Add exponentiation operator (`**`) to the Expression parser",
    "user": {
      "login": "ModProg",
      "id": 11978847,
      "node_id": "MDQ6VXNlcjExOTc4ODQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11978847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ModProg",
      "html_url": "https://github.com/ModProg",
      "followers_url": "https://api.github.com/users/ModProg/followers",
      "following_url": "https://api.github.com/users/ModProg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ModProg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ModProg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ModProg/subscriptions",
      "organizations_url": "https://api.github.com/users/ModProg/orgs",
      "repos_url": "https://api.github.com/users/ModProg/repos",
      "events_url": "https://api.github.com/users/ModProg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ModProg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "vnen",
      "id": 5599796,
      "node_id": "MDQ6VXNlcjU1OTk3OTY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vnen",
      "html_url": "https://github.com/vnen",
      "followers_url": "https://api.github.com/users/vnen/followers",
      "following_url": "https://api.github.com/users/vnen/following{/other_user}",
      "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
      "organizations_url": "https://api.github.com/users/vnen/orgs",
      "repos_url": "https://api.github.com/users/vnen/repos",
      "events_url": "https://api.github.com/users/vnen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vnen/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "vnen",
        "id": 5599796,
        "node_id": "MDQ6VXNlcjU1OTk3OTY=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5599796?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vnen",
        "html_url": "https://github.com/vnen",
        "followers_url": "https://api.github.com/users/vnen/followers",
        "following_url": "https://api.github.com/users/vnen/following{/other_user}",
        "gists_url": "https://api.github.com/users/vnen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vnen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vnen/subscriptions",
        "organizations_url": "https://api.github.com/users/vnen/orgs",
        "repos_url": "https://api.github.com/users/vnen/repos",
        "events_url": "https://api.github.com/users/vnen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vnen/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-28T09:55:38Z",
    "updated_at": "2020-11-14T03:15:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe `Expression` Parser does not support `**` as a `pow` operator. While `pow(a,b)` may have a better readability when used in a complex expression it is way slower to write than `a**b`. Especially in the case of Input fields, where the expression is lost after submitting, I don't think a lot of people will write smaller expressions more often then complex ones.\r\nWith pull request [godotengine/godot#42376](https://github.com/godotengine/godot/pull/42376), this problem is increased due to commas no longer working in EditorSpinSlider.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd `**` to the operators for the `Expression`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIn `expression.cpp`:\r\nAdd Token `TK_OP_POW` in `_get_token` and the operator switch in `_parse_expression`.\r\nAdd Variant `OP_POW`, here we need to put it between `OP_NEGATE` and `OP_MULTIPLY` i.e. increase the `priority` for everything >= `OP_MULTIPLY` by one and give `OP_POW` `priority = 1`.\r\nIn `variant_op.cpp`:\r\nAdd `OP_POW` to `CASES(PREFIX)`, in `evaluate` the basic Case is obviously numbers, but at least for `a**b, b ∈ ℤ` most things that work for Multiplication could be adopted, this would make this more versatile than the `pow` function.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of code**\r\nThe basic version should be about 20 lines of code, implementing more functionality would increase that by a bit.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt could not be easily done by an add-on, and it could be implemented parallel to #1045, so that both gdscript and the number input use the same syntax.\r\n\r\n**I am able to make a pull request for this, at least for a basic numbers only version.**",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1580/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1579",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1579/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1579/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1579/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1579",
    "id": 710116974,
    "node_id": "MDU6SXNzdWU3MTAxMTY5NzQ=",
    "number": 1579,
    "title": "GDScript interation with GDNative",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-28T09:50:18Z",
    "updated_at": "2020-10-02T02:51:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nStudying GDNative\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you have a working GDNS and GDNLIB file, you GDScript can use for example:\r\n\r\nPlayer.Gdns\r\nTest.gd ->\r\n```\r\nclass_name Test extends Player\r\n```\r\n\r\nBasically you can't inherit Classes compiled with GDNative, but this should be possible.\r\n\r\nAnother problem is that if you have a class that inherits from any Node derived class, it doesn't appear here:\r\n![Screenshot from 2020-09-28 06-45-30](https://user-images.githubusercontent.com/58845030/94417259-3f8db980-0156-11eb-9a65-ebc633e2e7c5.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n* Implementing a way to extends GDNative classes from GDScript\r\n* Show Node derived classes compiled in GDNative in the \"Create a new node\" panel\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```\r\n//user creates a class\r\nclass Test : public Node() {}\r\n\r\n//inside gdscript\r\nclass_name Player extends Test\r\n```\r\n\r\n* Using the exampĺe above, the Test class must be shown in the \"Create a new node Panel\".\r\n\r\n\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be useful for anyone using GDNative, and it can note be worked around by now, as far as I know.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause involves core changes",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1579/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1578",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1578/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1578/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1578/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1578",
    "id": 709844127,
    "node_id": "MDU6SXNzdWU3MDk4NDQxMjc=",
    "number": 1578,
    "title": "Allow hiding ParallaxBackground",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-09-27T23:55:57Z",
    "updated_at": "2020-12-15T16:14:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSpaceship game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCan't seem to easily hide my parallax background node\r\n![image](https://user-images.githubusercontent.com/2453707/94378922-e3894d80-00e1-11eb-97c0-bb59231d4942.png)\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nallows us to hide the parallax background node in the scene editor by toggling it or a parents visibility property\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit would work like toggling visibility of any other node\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit would be used to turn off background for certain scenes\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nits a pretty basic feature and to be honest I think its a massive oversight\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1578/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1577",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1577/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1577/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1577/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1577",
    "id": 709775180,
    "node_id": "MDU6SXNzdWU3MDk3NzUxODA=",
    "number": 1577,
    "title": "GPU Accelerated Machine Learning & Advanced Data Processing with Vulkan & Vulkan Kompute",
    "user": {
      "login": "axsaucedo",
      "id": 1447507,
      "node_id": "MDQ6VXNlcjE0NDc1MDc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1447507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axsaucedo",
      "html_url": "https://github.com/axsaucedo",
      "followers_url": "https://api.github.com/users/axsaucedo/followers",
      "following_url": "https://api.github.com/users/axsaucedo/following{/other_user}",
      "gists_url": "https://api.github.com/users/axsaucedo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axsaucedo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axsaucedo/subscriptions",
      "organizations_url": "https://api.github.com/users/axsaucedo/orgs",
      "repos_url": "https://api.github.com/users/axsaucedo/repos",
      "events_url": "https://api.github.com/users/axsaucedo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axsaucedo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-09-27T16:55:30Z",
    "updated_at": "2020-10-08T19:36:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n[Vulkan Kompute](https://github.com/EthicalML/vulkan-kompute) is a GPU processing framework built to augment Vulkan's computing capabilities, standardising the boilerplate code identified across a broad range of projects that aim to bring Vulkan to enable mobile and cross-vendor GPU compute capabilities. \r\n\r\nI have added an integration with the Godot Engine, both through the GdNative Library and the Godot Custom Module approaches. Both of these approaches are outlined in this [blog post I released recently](https://medium.com/@AxSaucedo/supercharging-game-development-with-gpu-accelerated-ml-using-vulkan-kompute-the-godot-game-engine-4e75a84ea9f0).\r\n\r\nI would like to propose how GPU accelerated processing could be exposed through the Godot game engine whether as tools or best practices. This would be an an opportunity to further the discussion around leveraging the underlying Vulkan capabilities specifically for the purpose of GPU compute. The current implementation I shared above is built on Godot 3.2.x, so it doesn't leverage the Godot Vulkan instance - it would be interesting to explore what are the ways it could be integrated, and more generally how some of these workflows for GPU accelerated processing to be exposed for developers.\r\n\r\n[Here is also another article](https://towardsdatascience.com/machine-learning-and-data-processing-in-the-gpu-with-vulkan-kompute-c9350e5e5d3a) I wrote that covers this from a higher level, talking about the design principles of the framework, as well as the underlying implementation intuition on the ML algorithm used.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently it's not clear what's the best way to integrate with Godot, hence why it would be interesting to explore further.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThis would involve providing an option for Godot developers to leverage not only the underlying Vulkan Instance, but more specifically leverage the compute features of Vulkan through interfaces that encourage best practices, and reduce repeated/boilerplate code.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe architecture of kompute augments the Vulkan architecture, and introduces terminology that provides a GPU compute focused approach. Currently the way that it is integrated with Godot is quite superficial, but it would be interesting to explore what would be the best practices when developers want to leverage the GPU compute requirements using the Vulkan API. This would be quite powerful espcially with the cross-platform / cross-vendor GPU support that vulkan provides.\r\n\r\n![image](https://user-images.githubusercontent.com/1447507/94370729-82fe0e80-00e9-11eb-9956-4826fb3c6789.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt would be possible to extend the current implementation to enable for CPU specific implementation of the compute backend, however it would depend on what level of abstraction this is to be introduced.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nI think there may be an opportunity to explore this across both areas. It would be interesting to explore if the Vulkan instance can also be exposed through GdNative Libraries, such that other compute applications can also leverage the underlying vulkan instance/appliction. Similarly, it would be useful for developers that want to use GPU acceleration for compute specific tasks, to have some best practices or guidelines when performing these integrations. The initial results integrating Vulkan Kompute has provided some workflows that could be abstracted for individuals that are interested to integrate it into their game development workflows\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1577/reactions",
      "total_count": 10,
      "+1": 3,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 4,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1575",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1575/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1575/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1575/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1575",
    "id": 709699754,
    "node_id": "MDU6SXNzdWU3MDk2OTk3NTQ=",
    "number": 1575,
    "title": "Make it possible to change the `.sln` and `.csproj` location in a project",
    "user": {
      "login": "n-tiz",
      "id": 3192885,
      "node_id": "MDQ6VXNlcjMxOTI4ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3192885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/n-tiz",
      "html_url": "https://github.com/n-tiz",
      "followers_url": "https://api.github.com/users/n-tiz/followers",
      "following_url": "https://api.github.com/users/n-tiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/n-tiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/n-tiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n-tiz/subscriptions",
      "organizations_url": "https://api.github.com/users/n-tiz/orgs",
      "repos_url": "https://api.github.com/users/n-tiz/repos",
      "events_url": "https://api.github.com/users/n-tiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/n-tiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 2,
    "created_at": "2020-09-27T08:58:42Z",
    "updated_at": "2020-10-12T17:01:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nDevelloping a little game using C# to see limitations of the langage integration\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to move all my scripts/sources in a directory, rather than be required to have the .sln and the .csproj in the root directory.\r\nThe name of the csproj is generated from \"application/config/name\" and the directory is \"res://\" (see in GodotSharpEditor.cs).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI think that it could be interesting to add a setting to override the sln/csproj location.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI dont know the engine code good enough to write code, but i think that the change will be done in GodotSharpEditor and it would replace:\r\n`                string resourceDir = ProjectSettings.GlobalizePath(\"res://\");`\r\nBy some code checking if the new csproj location setting is null, and if it's not, use its value rather than \"res://\".\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI dont think that it could be done by an add-on.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1575/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1574",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1574/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1574/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1574/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1574",
    "id": 709576058,
    "node_id": "MDU6SXNzdWU3MDk1NzYwNTg=",
    "number": 1574,
    "title": "Improve the CollisionObject API",
    "user": {
      "login": "madmiraal",
      "id": 9253928,
      "node_id": "MDQ6VXNlcjkyNTM5Mjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9253928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madmiraal",
      "html_url": "https://github.com/madmiraal",
      "followers_url": "https://api.github.com/users/madmiraal/followers",
      "following_url": "https://api.github.com/users/madmiraal/following{/other_user}",
      "gists_url": "https://api.github.com/users/madmiraal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madmiraal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madmiraal/subscriptions",
      "organizations_url": "https://api.github.com/users/madmiraal/orgs",
      "repos_url": "https://api.github.com/users/madmiraal/repos",
      "events_url": "https://api.github.com/users/madmiraal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madmiraal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-26T17:19:35Z",
    "updated_at": "2020-09-29T06:51:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCreating and accessing collision shapes at runtime.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe [`CollisionObject2D` API](https://docs.godotengine.org/en/latest/classes/class_collisionobject2d.html#methods) and [`CollisionObject(3D)` API](https://docs.godotengine.org/en/latest/classes/class_collisionobject.html#methods) are confusing and difficult to use as expressed in https://github.com/godotengine/godot-docs/issues/3204, https://github.com/godotengine/godot/issues/36499, https://github.com/godotengine/godot/issues/36528, https://github.com/godotengine/godot/issues/39887.\r\n\r\nThings that are particularly confusing include:\r\n- `owner`: This is actually either a `CollisionShape` or a `CollisionPolygon` that is a child of the `CollisionObject` giving it its shape.\r\n- `owner_id`: This is actually the index of the `CollisionShape` or `CollisionPolygon` in the sub-list of children of the `CollisionObject` that give it its shape. It is local to the `CollisionObject`.\r\n- `shape_index`: This is a local index of `CollisionObject` that spans all the `CollisionShape`s and `CollisionPolygon`s that are children of the `CollsionObject`.\r\n- `shape_id`: This is the local index of each `CollisionShape` or `CollisionPolygon` of the `Shape` `Resource`s that make up the `CollisionShape` (only ever one) or `CollisionPolygon`.\r\n\r\nSimple things that are difficult to do include:\r\n- Add a `Shape` to a `CollisionObject`.\r\n- Get or remove a `Shape` from a `CollisionObject` given the `shape_index`, which is what is provided by the `body_shape_entered` and `body_shape_exited` signals and `KinematicCollision`.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nReplace or even just extend the current APIs to include functions that make interacting with `CollsiionObject`s intuitive.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI suggest the following list of functions:\r\n\r\nCurrent | Proposed | Description\r\n-- | -- | --\r\n```Array get_shape_owners()``` | ```Array get_shape_nodes() const``` | Returns the `CollisionObject`’s `Shape` `Nodes` (`CollisionShape` and `CollisionPolygon`).\r\n  | ```void add_shape(Shape shape)``` | Creates a new `Shape` `Node` and adds the `shape` to it.\r\n  | ```void add_shape_node(Node shape_node)``` | Adds the `shape_node` to the `CollisionObject`.\r\n```void shape_owner_add_shape(int owner_id, Shape shape)``` | ```void add_shape_to_shape_node(Node shape_node, Shape shape)``` | Adds the `shape` to the `Shape` `Node` `shape_node`.\r\n```void remove_shape_owner(int owner_id)``` | ```void remove_shape_node(Node shape_node)``` | Removes the `Shape` `Node` and its `Shape`(s) from the `CollisionObject`.\r\n```void shape_owner_clear_shapes(int owner_id)``` | ```void remove_shapes_from_shape_node(Node shape_node)``` | Removes all the `Shape`s from a `Shape` `Node` `shape_node`.\r\n```void shape_owner_remove_shape(int owner_id, int shape_id)``` | ```void remove_shape(Shape shape)``` | Removes the `shape` from the `CollisionObject`.\r\n```int shape_find_owner(int shape_index) const``` | ```Node get_shape_node(int shape_index) const``` | Returns the `Shape` `Node` that contains the `Shape` with `shape_index`.\r\n```Shape shape_owner_get_shape(int owner_id, int shape_id) const``` | ```Shape get_shape(int shape_index) const``` | Returns the `Shape` with `shape_index`.\r\n  | ```int get_shape_count() const``` | Returns the number of shapes associated with the `CollisionObject`.\r\n```int shape_owner_get_shape_count(int owner_id) const``` | ```int get_shape_node_shape_count(Node shape_node) const``` | Returns the number of shapes associated with the `Shape` `Node` `shape_node`.\r\n```int shape_owner_get_shape_index(int owner_id, int shape_id) const``` | ```int get_shape_index(Shape shape) const``` | Returns the index of the `shape` in the `CollisionObject`.\r\n```bool is_shape_owner_disabled(int owner_id) const``` | ```bool is_shape_node_disabled(Node shape_node)``` | Returns whether or not the `Shape` `Node` is disabled.\r\n```void shape_owner_set_disabled(int owner_id, bool disabled)``` | ```void set_shape_node_disabled(Node shape_node, bool disabled)``` | Sets the `Shape` `Node` to `disabled`.\r\n```Transform shape_owner_get_transform(int owner_id) const``` | ```Transform get_shape_node_transform(Node shape_node)``` | Returns the `Shape` `Node`’s transform.\r\n```void shape_owner_set_transform(int owner_id, Transform transform)``` | ```void set_shape_node_transform(Node shape_node, Transform transform)``` | Sets the `Shape` `Node`’s `Transform` to `transform`.\r\n2D Only |   |  \r\n```bool is_shape_owner_one_way_collision_enabled(int owner_id) const``` | ```bool is_shape_node_one_way_collision_enabled(Node shape_node)``` | Returns whether or not the `Shape` `Node`’s one-way collision is enabled.\r\n```void shape_owner_set_one_way_collision(int owner_id, bool enable)``` | ```void set_shape_node_one_way_collision_enabled(Node shape_node, bool enabled)``` | Sets the `Shape` `Node`’s one-way collision to `enabled`.\r\n```float get_shape_owner_one_way_collision_margin(int owner_id) const``` | ```float get_shape_node_one_way_collision_margin(Node shape_node)``` | Returns the `Shape` `Node`’s one-way collision margin.\r\n```void shape_owner_set_one_way_collision_margin(int owner_id, float margin)``` | ```void set_shape_node_one_way_collision_margin(Node shape_node, float margin)``` | Sets the `Shape` `Node`’s one-way collision margin to `margin`.\r\nNo longer needed |   |  \r\n```Object shape_owner_get_owner(int owner_id) const``` |   |  \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis modifies existing core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1574/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1572",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1572/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1572/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1572/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1572",
    "id": 709466815,
    "node_id": "MDU6SXNzdWU3MDk0NjY4MTU=",
    "number": 1572,
    "title": "Add a method to get physics layer by name",
    "user": {
      "login": "dkuku",
      "id": 904179,
      "node_id": "MDQ6VXNlcjkwNDE3OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/904179?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dkuku",
      "html_url": "https://github.com/dkuku",
      "followers_url": "https://api.github.com/users/dkuku/followers",
      "following_url": "https://api.github.com/users/dkuku/following{/other_user}",
      "gists_url": "https://api.github.com/users/dkuku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dkuku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dkuku/subscriptions",
      "organizations_url": "https://api.github.com/users/dkuku/orgs",
      "repos_url": "https://api.github.com/users/dkuku/repos",
      "events_url": "https://api.github.com/users/dkuku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dkuku/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-26T08:18:28Z",
    "updated_at": "2020-09-29T04:31:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI worked on GDQuest platformer demo \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nand there was a problem with stomping on enemies - it was fixed in a later video but left my mushrooms that had the same feature  and it stopped to work. Looking for an easy solution I found that area has a collision layer property but its a numeric value which is a magic number:\r\n`area.collision_layer == 16`\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nit would be much easier to have reference it by name\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI searched for a solution for a few moments but I only found that Its impossible and I should use groups. This makes the layer naming a bit pointless - I came with a solution in gd script that works:\r\n\r\n```\r\nvar is_stomping = false\r\nvar _layers := {}\r\n\r\nfunc _ready():\r\n    for i in range(0, 5, 1):\r\n        var layer = ProjectSettings.get_setting(\"layer_names/2d_physics/layer_\" + str(i + 1))\r\n        _layers[layer] = pow(2, i)\r\n\r\n\r\nfunc _on_StompDetector_area_entered(area: Area2D) -> void:\r\n    is_stomping = area.collision_layer == _layers['Bumpers']\r\n```\r\nbut it would be much easier to have a property that returns the custom name and falls back to default layer name when its not set\r\n`area.collision_layer_name == 'Bumpers'`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can, but it may get popular - makes the code more readable \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nsame as before- its really just a few lines of code",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1572/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1571",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1571/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1571/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1571/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1571",
    "id": 709452485,
    "node_id": "MDU6SXNzdWU3MDk0NTI0ODU=",
    "number": 1571,
    "title": "Implement method overloading in GDScript",
    "user": {
      "login": "me2beats",
      "id": 16458555,
      "node_id": "MDQ6VXNlcjE2NDU4NTU1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16458555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/me2beats",
      "html_url": "https://github.com/me2beats",
      "followers_url": "https://api.github.com/users/me2beats/followers",
      "following_url": "https://api.github.com/users/me2beats/following{/other_user}",
      "gists_url": "https://api.github.com/users/me2beats/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/me2beats/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/me2beats/subscriptions",
      "organizations_url": "https://api.github.com/users/me2beats/orgs",
      "repos_url": "https://api.github.com/users/me2beats/repos",
      "events_url": "https://api.github.com/users/me2beats/events{/privacy}",
      "received_events_url": "https://api.github.com/users/me2beats/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-09-26T07:52:46Z",
    "updated_at": "2020-09-29T10:07:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\ngdscript plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI often need to create similar methods that do similar things (and even usually return the same type), but differ in arguments (their number or their types).\r\n\r\nThe problem is that the more subtle the difference between the two methods, the more difficult it is to come up with a clear and concise names for the methods.\r\nIn addition, it is highly likely that in this case the methods will contain unnecessary redundant information that could easily be obtained from the methods signatures.\r\n\r\nOn the other hand, creating a single method using optional parameters partially solves the problem, but this creates difficulties in further extending the method, forcing to create a confusing code with a large number of `if` statements, and ultimately degrade the readability and support of the method.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplementing method overloading in gdscript would solve this problem in most cases\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPerhaps one of the most beautiful illustrations of how convenient method overloading is, is the `Color()` methods.\r\n![Color](https://user-images.githubusercontent.com/16458555/94332474-1ef71f80-ffef-11ea-9f7c-a7bcc9c53b13.JPG)\r\n\r\nNote how method overloading saved the engine developers from having to create methods like\r\n`hex2color()`\r\n`int2color()`\r\netc\r\n\r\nso in gdscript, one could declare several methods with the same name but different parameters.\r\nwhen trying to declare 2 methods with exactly the same signatures, an error would appear:\r\n> The function \"x\"  with signature ... already exist in the class\r\n\r\nand when calling such an overloaded method, one just needs to choose a suitable signature, that could pop up just like in the case of `Color()`:\r\n![Color2](https://user-images.githubusercontent.com/16458555/94332573-dd1aa900-ffef-11ea-9c56-0e2fc9c93ffa.JPG)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nabove I indicated 2 workarounds (one is to set appropriate method names and the other is to use \"universal\" methods - all in one - with optional parameters), this may be acceptable in small projects, but most likely will lead to difficulties in maintaining such code as the project grows\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this should be core feature as it's directly related to gdscript",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1571/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
