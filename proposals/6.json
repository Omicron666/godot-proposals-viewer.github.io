[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1430",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1430/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1430/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1430/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1430",
    "id": 688695150,
    "node_id": "MDU6SXNzdWU2ODg2OTUxNTA=",
    "number": 1430,
    "title": "Change the Multi-threaded resource loading API to be more friendly.",
    "user": {
      "login": "PranavSK",
      "id": 18136182,
      "node_id": "MDQ6VXNlcjE4MTM2MTgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/18136182?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PranavSK",
      "html_url": "https://github.com/PranavSK",
      "followers_url": "https://api.github.com/users/PranavSK/followers",
      "following_url": "https://api.github.com/users/PranavSK/following{/other_user}",
      "gists_url": "https://api.github.com/users/PranavSK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PranavSK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PranavSK/subscriptions",
      "organizations_url": "https://api.github.com/users/PranavSK/orgs",
      "repos_url": "https://api.github.com/users/PranavSK/repos",
      "events_url": "https://api.github.com/users/PranavSK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PranavSK/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-30T10:40:10Z",
    "updated_at": "2020-08-30T12:23:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis is for any project that needs multi-threaded resource loading and uses GDScript (or any other custom scripting).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:**\r\nThis is with regards to the newly added multi-threaded loading in 4.0 (https://github.com/godotengine/godot/pull/36640#issue-381362185). Currently, this has three functions exposed - one to request a load, one to get the status of load and it's progress, and finally, one to get the loaded resource (or block the main thread till the resource is fully loaded). The main issue with this is that we are additionally needed to poll for the progress or status and also, more importantly, the API feels weird. The polling of status and progress needs to pass an array which is then replaced internally by a single element array. This does not feel very GDScript like (although it is quite common to have return values like this in c++).  Also, the use of `Array` like this is very inconsistent. Many other functions expect a non-empty array while some (like this one) just replace the passed array.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe idea is to use an `AsyncLoadResult`, which is returned when the request is made. Its properties could store the path to the resource and wrap the other 2 functions, namely progress, status and a get_result function. Additionally, it could have a completed signal. This would work great with the new GDScript async.\r\n\r\nThe current approach:\r\n```\r\n//...\r\nResourceLoader.load_threded_request(path)\r\n//...\r\nfunc _process():\r\n    var prog_arr = []\r\n    var status = ResourceLoader.load_threaded_get_status(path, prog_arr)\r\n    var progress = prog_arr[0]\r\n    //...\r\n```\r\n\r\nThe proposed approach:\r\n```\r\n//...\r\nload_result = ResourceLoader.load_threaded_request(path)\r\nawait load_result\r\n//...\r\n// If needed to update the progress:\r\nvar status = load_result.get_status()\r\nvar progress = load_result.get_progress()\r\n// Also supports - load_result.completed.connect...\r\n// On complete or for wait-to-finish\r\nvar resource = load_result.get_resource()\r\n```\r\n\r\nThis could potentially improved upon by the user as a multi-threaded task scheduling since in games this is mainly needed for resources (other uses of multi-threaded are probably better handled using an exclusive thread for the system).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, it is possible but feels very redundant.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe idea is to improve the user experience of core API and hence needs to be in the core engine.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1430/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1429",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1429/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1429/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1429/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1429",
    "id": 688693797,
    "node_id": "MDU6SXNzdWU2ODg2OTM3OTc=",
    "number": 1429,
    "title": "Add integration tests for GDScript",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-30T10:29:50Z",
    "updated_at": "2020-09-13T10:09:40Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine. ðŸ™‚\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGDScript is constantly evolving, bugs are getting fixed, but at the same time, I've experienced many regressions throughout my game development experience with Godot (starting with Godot 2.1), and probably some are left unnoticed, causing various crashes and/or undefined behavior in release builds of the engine.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI'd like that we have a proper system for testing GDScript implementation. It cannot be unit tested per se (languages are not typically unit tested), but providing a regression/integration suite is, in my opinion, essential to the prosperity of a programming language, which *should* be robust and stable by definition. See the many [language bindings](https://github.com/Vivraan/godot-lang-support), and I wouldn't be surprised to find out if one of the motivations behind creating those bindings is in fact GDScript instability.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI propose that we implement those kind of tests using already integrated [doctest](https://github.com/godotengine/godot/issues/40659) unit testing framework. It's still useful even for integration testing because we're interested that any changes to GDScript implementation are properly covered by our GitHub CI.\r\n\r\nI insist that we maintain those tests directly within the main repository, so contributors can work on testing out GDScript implementation without much hassle, and to run tests on CI easily, as long as we provide proper documentation for this. Tests can also be marked as \"allowed to fail\" if GDScript is still under heavy development.\r\n\r\nIt's not possible to bloat the engine with tests either. You have to explicitly compile the engine with `scons tests=yes` in order to run tests in the first place. There is [godotengine/gdscript-tests](https://github.com/godotengine/gdscript-tests) which is separated from the main repository. There's modules support for doctest as implemented in godotengine/godot#40720, so this can be made self-contained (`modules/gdscript/tests`). GDScript being a module is already a separation from core, I don't see a reason why we should split it further away from Godot. Even the tests themselves run through a different entry point.\r\n\r\nOn the other hand, there's also a fuzzing approach to testing: #168. For these kind of tests, yeah it would certainly make sense to run outside of main repository, because the task is to find bugs by breaking the parser, and not providing a deterministic regression suite, which must be reproducible in contrast.\r\n\r\nThere are a number of pull requests already in work (some of them already working) to showcase the power of GDScript testing:\r\n- [ ] https://github.com/godotengine/godot/pull/41074\r\n- [x] https://github.com/godotengine/godot/pull/41355\r\n- [ ] https://github.com/godotengine/godot/pull/41616\r\n\r\nPossible enhancements marginally related to this proposal: #1307.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's possible to maintain a set of tests to check whether GDScript is working outside of the main repository, but then it defeats the purpose of the proposal. You need to be able to react to any regressions quickly enough, else those bugs will be left ignored.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGDScript is implemented as a C++ module. It's possible to test GDScript for simple parse errors with `godot --script --check-only` command-line options, but it doesn't really makes sense because people can usually find bugs (if lucky) by simply working with the engine.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1429/reactions",
      "total_count": 9,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1428",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1428/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1428/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1428/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1428",
    "id": 688582041,
    "node_id": "MDU6SXNzdWU2ODg1ODIwNDE=",
    "number": 1428,
    "title": "For multi-pass rendering, add \"multiple cameras\" to Viewport, \"depth\" to Camera, and \"keep\" and \"keep depth\"",
    "user": {
      "login": "31",
      "id": 331300,
      "node_id": "MDQ6VXNlcjMzMTMwMA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/331300?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/31",
      "html_url": "https://github.com/31",
      "followers_url": "https://api.github.com/users/31/followers",
      "following_url": "https://api.github.com/users/31/following{/other_user}",
      "gists_url": "https://api.github.com/users/31/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/31/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/31/subscriptions",
      "organizations_url": "https://api.github.com/users/31/orgs",
      "repos_url": "https://api.github.com/users/31/repos",
      "events_url": "https://api.github.com/users/31/events{/privacy}",
      "received_events_url": "https://api.github.com/users/31/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "reduz",
      "id": 6265307,
      "node_id": "MDQ6VXNlcjYyNjUzMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reduz",
      "html_url": "https://github.com/reduz",
      "followers_url": "https://api.github.com/users/reduz/followers",
      "following_url": "https://api.github.com/users/reduz/following{/other_user}",
      "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
      "organizations_url": "https://api.github.com/users/reduz/orgs",
      "repos_url": "https://api.github.com/users/reduz/repos",
      "events_url": "https://api.github.com/users/reduz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reduz/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "reduz",
        "id": 6265307,
        "node_id": "MDQ6VXNlcjYyNjUzMDc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6265307?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reduz",
        "html_url": "https://github.com/reduz",
        "followers_url": "https://api.github.com/users/reduz/followers",
        "following_url": "https://api.github.com/users/reduz/following{/other_user}",
        "gists_url": "https://api.github.com/users/reduz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/reduz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/reduz/subscriptions",
        "organizations_url": "https://api.github.com/users/reduz/orgs",
        "repos_url": "https://api.github.com/users/reduz/repos",
        "events_url": "https://api.github.com/users/reduz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/reduz/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 2,
    "created_at": "2020-08-29T18:24:38Z",
    "updated_at": "2020-08-31T01:17:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\nThis is an implementation proposal for https://github.com/godotengine/godot-proposals/issues/956 and https://github.com/godotengine/godot-proposals/issues/932. I figure it's worth filing separately, so that if there's no way it'll happen this way, we can close this proposal without derailing the more general ones.\r\n\r\n**Describe the project you are working on:**\r\n\r\n* An FPS game with a gun viewmodel.\r\n  * It's common practice to render this separately from the world, with different FoV, near/far clip planes. Using cull masks on the multiple cameras, this can be done.\r\n  * Described more at https://github.com/godotengine/godot-proposals/issues/956.\r\n* A VR game with an effect that requires multiple render passes.\r\n  * Described more at https://github.com/godotengine/godot-proposals/issues/932. That issue proposes a different implementation, but it can be accomplished just as well using multiple cameras.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI can use Viewports to accomplish this, but that **doesn't work at all in VR** (see https://github.com/godotengine/godot-proposals/issues/932), and is a (unknown severity) performance issue.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThese purely additive new properties (to avoid compat problems) work together to make both scenarios possible:\r\n\r\n* Viewport\r\n  * `use_multiple_cameras` - Enables multi camera mode. This tells the renderer to use `cameras` rather than the single `current` `camera`.\r\n* Camera\r\n  * `depth` - This determines the order that cameras are rendered in when `use_multiple_cameras` is enabled. No effect otherwise. If two cameras have the same `depth`, behavior is undefined.\r\n    * This property is familiar to those who have used Unity and Unreal, where this feature already exists.\r\n* Environment\r\n  * `keep` - Tells the renderer not to clear the current color when rendering the camera with this environment.\r\n    * We can't simply use `mode` `KEEP`, because that doesn't let us use sky-contributed lighting. This means `keep` is redundant, but to keep these features purely additive, this is what I came up with.\r\n  * `keep_depth` - Tells the renderer not to clear the depth buffer. This is not desired for the FPS viewmodel scenario, but is required for the VR effect I want to accomplish.\r\n\r\nI would prefer to have the new Environment properties on Camera. That would let me reuse the same Environment for multiple Cameras, rather than creating a duplicated copy for each Camera just to change the one bool. However, Environment data is already passed deep into the renderer, and it's easier to code this way. If someone more skilled than me takes this over, putting these on Camera would be a lot better. ðŸ˜„ It's difficult for me to tell when changing function signatures would be a massive breaking change for developers of C++ extensions and whatnot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI tried implementing it in 3.2 as a proof of concept, which works:\r\nGodot changes: [31:multicam/3.2](https://github.com/godotengine/godot/compare/3.2...31:multicam/3.2)\r\nExample use: https://github.com/31/example-arvr-viewports/blob/vr-custom/main.tscn\r\n\r\nThat branch is not done:\r\n* It's only implemented in the GLES3 renderer.\r\n* There's an error that pops up repeatedly that I assume is due to some code depending on there being only one `current` camera or some missing code with how I added multiple cameras. (Although the test scenes work, I assume some Camera-related stuff is broken.)\r\n  ```\r\n  ERROR: SpatialIndexer::_update_camera: Condition \"!E\" is true.\r\n     At: scene\\resources\\world.cpp:126\r\n  ```\r\n* You have to be careful to not set `current` on the last camera to render. Don't know why.\r\n* I disabled a VR optimization when `use_multiple_cameras` because it breaks multi-cam `cull mask`s on the right eye.\r\n* There's an arbitrary `VIEWPORT_CAMERAS_MAX = 32` with no indication to the user. (It's potentially unnecessary, I'm just not sure if `Vector<T>` is permitted in server data--could only find arrays.)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis can't be implemented as a workaround or addon: the renderer is not flexible enough to allow it. I've heard that the 4.0 pipeline should be more flexible, but last I heard there were no concrete plans, and it would be nice to get it before then.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1428/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1427",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1427/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1427/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1427/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1427",
    "id": 688566304,
    "node_id": "MDU6SXNzdWU2ODg1NjYzMDQ=",
    "number": 1427,
    "title": "Add a method to check if vibration is supported on Android",
    "user": {
      "login": "Zottelchen",
      "id": 5148555,
      "node_id": "MDQ6VXNlcjUxNDg1NTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5148555?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zottelchen",
      "html_url": "https://github.com/Zottelchen",
      "followers_url": "https://api.github.com/users/Zottelchen/followers",
      "following_url": "https://api.github.com/users/Zottelchen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zottelchen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zottelchen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zottelchen/subscriptions",
      "organizations_url": "https://api.github.com/users/Zottelchen/orgs",
      "repos_url": "https://api.github.com/users/Zottelchen/repos",
      "events_url": "https://api.github.com/users/Zottelchen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zottelchen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318056,
        "node_id": "MDU6TGFiZWwyMzU5MzE4MDU2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:android",
        "name": "platform:android",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-29T16:47:36Z",
    "updated_at": "2020-09-18T21:51:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\n\r\nA simple Android game which uses vibration.\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\n\r\nVibration is not available on all devices (e.g. Kindle Fire).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** \r\n\r\nEither there would be a function to check if the device can actually vibrate (something like OS.has_feature(\"vibrate\")) or the Input.vibrate_handheld should return an error (currently void).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** \r\n\r\nVariant 1:\r\n\r\n```gdscript\r\nif OS.has_feature(\"vibrate\"):\r\n     Input.vibrate_handheld()\r\n```\r\n\r\nVariant 2:\r\n\r\n```gdscript\r\n if ERR == Input.vibrate_handheld():\r\n    print(\"Vibration failed\")\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** \r\n\r\nUnless I missed something, this probably has to be changed in Godot_Java?\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** \r\n\r\nSame reason as above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1426",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1426/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1426/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1426/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1426",
    "id": 688388127,
    "node_id": "MDU6SXNzdWU2ODgzODgxMjc=",
    "number": 1426,
    "title": "Built-in named enum consistency proposal",
    "user": {
      "login": "homchom",
      "id": 41265646,
      "node_id": "MDQ6VXNlcjQxMjY1NjQ2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41265646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/homchom",
      "html_url": "https://github.com/homchom",
      "followers_url": "https://api.github.com/users/homchom/followers",
      "following_url": "https://api.github.com/users/homchom/following{/other_user}",
      "gists_url": "https://api.github.com/users/homchom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/homchom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/homchom/subscriptions",
      "organizations_url": "https://api.github.com/users/homchom/orgs",
      "repos_url": "https://api.github.com/users/homchom/repos",
      "events_url": "https://api.github.com/users/homchom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/homchom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-28T22:28:31Z",
    "updated_at": "2020-08-31T21:15:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A computerized custom monopoly game.\r\n\r\n**Describe the problem or limitation you are having in your project:** I noticed an inconsistency between the built-in nodes and GDScript that was created in Godot 3.1. Named enums in GDScript are prefixed by their name (eg. `var x = Name.OPTION_A`), but built-in named enums are not prefixed at all. Instead, the enum options usually share a common naming convention. (eg. `var x = NAME_OPTION_A`).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Since Godot 4.0 is breaking compatibility in other ways (eg. renaming nodes), I think built-in enums should be changed as well. For example, the current method of setting the alignment of a Label is with `label.align = ALIGN_LEFT`. I think it should be changed to `label.align = Align.LEFT`, which is more consistent.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** Since GDScript named enums are (to my knowledge) just syntactic sugar for dictionaries with integer values, this code could be reused for the built-in enums.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** The amount of code is the same in both cases, but consistency is important, and other changes in Godot 4.0 reflect this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Consistency is important.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1426/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1424",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1424/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1424/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1424/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1424",
    "id": 687932819,
    "node_id": "MDU6SXNzdWU2ODc5MzI4MTk=",
    "number": 1424,
    "title": "Add support for the accelerometer sensor to `Input.get_accelerometer()` for Windows Desktop export",
    "user": {
      "login": "ZodmanPerth",
      "id": 546368,
      "node_id": "MDQ6VXNlcjU0NjM2OA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/546368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZodmanPerth",
      "html_url": "https://github.com/ZodmanPerth",
      "followers_url": "https://api.github.com/users/ZodmanPerth/followers",
      "following_url": "https://api.github.com/users/ZodmanPerth/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZodmanPerth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZodmanPerth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZodmanPerth/subscriptions",
      "organizations_url": "https://api.github.com/users/ZodmanPerth/orgs",
      "repos_url": "https://api.github.com/users/ZodmanPerth/repos",
      "events_url": "https://api.github.com/users/ZodmanPerth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZodmanPerth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359320277,
        "node_id": "MDU6TGFiZWwyMzU5MzIwMjc3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:windows",
        "name": "platform:windows",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-28T09:14:56Z",
    "updated_at": "2020-11-22T00:26:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game whose core design requires both touch screen input and the earth's gravity vector (via the accelerometer sensor on the device).  The game will not run on devices that does not provide support for both touch input and the accelerometer sensor.  \r\nThe game's target platforms are Android and Windows.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFirstly, the Android export is working fine and is not an issue.  The issue is Windows does currently not have any working export that supports both touch input and the accelerometer (specifically the gravity vector).\r\n\r\nIn earlier releases of Godot 3 I was successfully using the UWP Export to run my game on the Windows platform with support for both touch and the accelerometer.  However in more recent versions of Godot 3 the UWP export has stopped working.\r\n\r\nReference: [gototengine/godot issue #30558 - Does UWP export works?](https://github.com/godotengine/godot/issues/30558)\r\n\r\nIn community conversations it has been stated that due to current issues with the way the UWP technology is evolving it is unlikely that the UWP export will be fixed. This only leaves Windows Desktop as a valid export target for the Windows platform.  While touch input currently works correctly with Windows Desktop export, this export does not support the accelerometer on devices that contain such a sensor.  In other words Godot now has a regression issue with the `Input.get_accelerometer()` GDScript feature on the Windows platform.\r\n\r\nIn other community conversations it has been questioned why Windows Desktop should support the accelerometer sensor.  \r\nThe Surface line (Surface Hybrid and Surface Hub) has created a market of devices that run Windows Desktop with touch and accelerometer sensors.  Hybrid devices from multiple manufacturers compete in this space.  An evolving market such as this is ripe for establishing games that support touch and accelerometer sensors.  This is the driving reason for the requirements of the game design in the first place.\r\n\r\nNote this proposal was originally raised as [gototengine/godot issue #41303 - Input.get_gravity() and Input.get_accelerometer() are not supported on Windows Desktop export](https://github.com/godotengine/godot/issues/41303), however @Calinou recommended this proposal be created to have the problem addressed instead.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis would be an enhancement to the existing `Input.get_accelerometer()` feature on the Windows Desktop export.  The export would need to add code to check if the accelerometer sensor was present on the device, and wire the sensor up to the existing `Input.get_accelerometer()` function in Godot (GDScript).  If the accelerometer sensor is not present on the device, calls to `Input.get_accelerometer()` should return the zero vector (as it currently does).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Windows Desktop Export would be enhanced to search for the accelerometer sensor and marshal data from the sensor through calls to the existing `Input.get_accelerometer()` feature in Godot (GDScript).\r\n\r\n(Perhaps code from the UWP export can be utilised to provide this feature for the Windows Desktop export?)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis issue cannot be worked around.  The Windows Desktop Export needs to be modified to ensure the Windows Platform supports devices with touch input and an accelerometer sensor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nImplementing this proposal restores the regressed `Input.get_accelerometer()` feature on the Windows Platform.  This is already a core feature in Godot which has become unavailable on the Windows Platform due to the circumstances described above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1423",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1423/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1423/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1423/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1423",
    "id": 687687625,
    "node_id": "MDU6SXNzdWU2ODc2ODc2MjU=",
    "number": 1423,
    "title": "Projected Gauss-Seidel (or PGS for short) based physics system, and a Weld Joint",
    "user": {
      "login": "Famous5000",
      "id": 9399230,
      "node_id": "MDQ6VXNlcjkzOTkyMzA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9399230?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Famous5000",
      "html_url": "https://github.com/Famous5000",
      "followers_url": "https://api.github.com/users/Famous5000/followers",
      "following_url": "https://api.github.com/users/Famous5000/following{/other_user}",
      "gists_url": "https://api.github.com/users/Famous5000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Famous5000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Famous5000/subscriptions",
      "organizations_url": "https://api.github.com/users/Famous5000/orgs",
      "repos_url": "https://api.github.com/users/Famous5000/repos",
      "events_url": "https://api.github.com/users/Famous5000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Famous5000/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-28T03:41:05Z",
    "updated_at": "2020-08-31T19:49:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** I'm trying to work on a dynamic building project where you are allowed to build custom vehicles using lots of modules on one vehicle [and each module having its own health].\r\n\r\n**Describe the problem or limitation you are having in your project:** The main issue I'm having is the fact that there's no real good \"Weld\" joint that forces 2 objects to stay perfectly combined with each other with 0 tearing.\r\n\r\n**Describe the feature/enhancement and how it helps to overcome the problem or limitation:** The WELD joint would resolve this issue by combining the two collision meshes and locking them in place, but with the added ability to remove the joint to remove the combination of the colliders at the same time.\r\n\r\nA PGS based solver would also fix this issue.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** Look at Roblox's PGS system. The weld joints perfectly weld 2 parts together with 0 movements between the two parts, and can even be chained a large number of times thanks to the PGS system.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I'm not entirely sure on this one, however, a weld joint would allow two objects to stay together without both being set to static [or other weird physics limitations that happens when you parent a static object to a dynamic one]\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** This could totally just be an addon and I'd be fine with it; not everyone will be trying to weld two objects while keeping them separate for module-based health anyways.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1423/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1420",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1420/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1420/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1420/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1420",
    "id": 687341586,
    "node_id": "MDU6SXNzdWU2ODczNDE1ODY=",
    "number": 1420,
    "title": "TextEdit should syntax highlight symbols",
    "user": {
      "login": "BenStigsen",
      "id": 24865450,
      "node_id": "MDQ6VXNlcjI0ODY1NDUw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24865450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenStigsen",
      "html_url": "https://github.com/BenStigsen",
      "followers_url": "https://api.github.com/users/BenStigsen/followers",
      "following_url": "https://api.github.com/users/BenStigsen/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenStigsen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenStigsen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenStigsen/subscriptions",
      "organizations_url": "https://api.github.com/users/BenStigsen/orgs",
      "repos_url": "https://api.github.com/users/BenStigsen/repos",
      "events_url": "https://api.github.com/users/BenStigsen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenStigsen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-08-27T15:33:31Z",
    "updated_at": "2020-10-16T19:21:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nSomething that requires the `TextEdit` node to highlight symbols\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe `TextEdit` control node doesn't highlight symbols.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA new function being added called `add_symbol_color()` or symbols being accepted in `add_keyword_color()`. This could be used to create text editors that highlight symbols related to the game or for programming languages such as Brainfuck.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm not sure. Currently I just know that in the Godot Engine source code, all keywords are being added to a dictionary with an associated color, then it's the syntax highlighter that checks if the character is a symbol with `is_symbol()` where currently the only part where the expected return value is `true` is when highlighting ranges.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot as far as I know... I'm currently creating one myself with a `RichTextLabel` and constantly checking what the user input is, to then highlight it with a BBcode.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe `TextEdit` node could be used for many many different projects, but it not being able to syntax highlight symbols makes it more limited.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1419",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1419/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1419/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1419/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1419",
    "id": 687319095,
    "node_id": "MDU6SXNzdWU2ODczMTkwOTU=",
    "number": 1419,
    "title": "Give projects a kickstart by including a placeholder asset library! (Placeholder textures, audio, and maybe models/meshes)",
    "user": {
      "login": "CenTdemeern1",
      "id": 24682280,
      "node_id": "MDQ6VXNlcjI0NjgyMjgw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/24682280?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CenTdemeern1",
      "html_url": "https://github.com/CenTdemeern1",
      "followers_url": "https://api.github.com/users/CenTdemeern1/followers",
      "following_url": "https://api.github.com/users/CenTdemeern1/following{/other_user}",
      "gists_url": "https://api.github.com/users/CenTdemeern1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CenTdemeern1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CenTdemeern1/subscriptions",
      "organizations_url": "https://api.github.com/users/CenTdemeern1/orgs",
      "repos_url": "https://api.github.com/users/CenTdemeern1/repos",
      "events_url": "https://api.github.com/users/CenTdemeern1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CenTdemeern1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-27T15:06:13Z",
    "updated_at": "2020-08-27T15:51:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(I haven't used the assetlib much so please excuse any errors)\r\n<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's hard to start out making a new project without assets.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInclude a placeholder asset library!\r\nLike, something like the existing assetlib, but you get placeholder textures, audio, and other assets there.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI imagine it'd be a tab within the assetlib section specifically for assets.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, because my idea is that this would literally just be integrated into the same system as the assetlib.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1419/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1417",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1417/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1417/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1417/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1417",
    "id": 686449334,
    "node_id": "MDU6SXNzdWU2ODY0NDkzMzQ=",
    "number": 1417,
    "title": "An options to have more themes, for the visual look, of the editor . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-08-26T16:17:43Z",
    "updated_at": "2020-08-28T17:34:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, atm . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI really like the current look, of the engine, it's very smart, I was wondering if we could have themes, where all the docs have rounded corners, so they look, a bit, like bubbles . . The old program, WinAmp, a mp3 player, had a bunch of cool themes, it could be cool, if there were a few nice ones, with each release of Godot, we get another one, or two, for mile-stone releases, so one can make it look, even better . . Lot of work, but maybe the new user interface expert, could make something nice, over time . . Lots, of work, finding a new one, for each major release, will be a challenge, look to WinAmp, for ideas . . .\r\n\r\n![2020-08-26 1813](https://user-images.githubusercontent.com/61069740/91329091-09ac8c80-e7c8-11ea-9c55-87ab9a696e42.gif)\r\n\r\n![2020-08-26 1814](https://user-images.githubusercontent.com/61069740/91329110-0dd8aa00-e7c8-11ea-8d98-ecb896658ce6.gif)\r\n\r\n![2020-08-26 1811](https://user-images.githubusercontent.com/61069740/91328762-9dca2400-e7c7-11ea-882c-3a615f16a3ab.png)\r\n\r\nFinding a really cool theme, for each new release, could be really amazing, so we always have a surprise, a cool one, for new releases, imagine what Godot could look like, with in-built skins, like that . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust, for fun, maybe the Godot engine team could have a few people, work on some ideas, then before launch, pick the best ones, or so . . Really made WinAmp more fun and, epic . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNot sure, like a skin, or theme, perhaps drawing inspiration from new features, could be neat . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot sure, not engine expert . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWell, it'd mostly be for looks and, effect . . But, it could be a chance, for Godot team, to make something a bit more ' wild ', to mark each new release, or like, so . .\r\n\r\n:D <3 <3 . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1417/reactions",
      "total_count": 14,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 11,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1416",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1416/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1416/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1416/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1416",
    "id": 686405765,
    "node_id": "MDU6SXNzdWU2ODY0MDU3NjU=",
    "number": 1416,
    "title": "Refactor build object suffix to standardized tuples/target triples identifying build options",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "akien-mga",
        "id": 4701338,
        "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akien-mga",
        "html_url": "https://github.com/akien-mga",
        "followers_url": "https://api.github.com/users/akien-mga/followers",
        "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
        "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
        "organizations_url": "https://api.github.com/users/akien-mga/orgs",
        "repos_url": "https://api.github.com/users/akien-mga/repos",
        "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akien-mga/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-26T15:16:21Z",
    "updated_at": "2020-09-23T15:07:40Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Credits to @akien-mga in https://github.com/godotengine/godot/issues/24030 for the original issue text. I reopened it as a proposal so it gets more visibility here.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe currently set a `suffix` string in `SConstruct` that is appended to the name of all build objects, and most importantly the final Godot binary. It contains some information about the build options (platform, target, tools, ~arch/bitness, ~compiler), but not in a very consistent way for all platforms: most don't include compiler info, some have arch info, others have bitness info, the use of tools impact what kind of target info is included, etc.\r\n\r\nThe current form is more or less:\r\n\r\n```\r\ngodot.<platform>.<target and/or tools>.<bits or arch>[.<module suffix>][.<compiler>][.<user-defined extra suffix>][<extension>]\r\n```\r\n\r\n(order might differ a bit towards the tail, didn't double check)\r\n\r\nSo we typically get binary names like these:\r\n\r\n```\r\ngodot.windows.opt.tools.64.mono.exe\r\ngodot.x11.opt.debug.32.llvm\r\n```\r\n\r\n(Some other platforms don't follow this scheme and have instead:\r\n\r\n```\r\nplatform/android/java/libs/debug/armeabi-v7a/libgodot_android.so\r\n```\r\n\r\nand a resulting `bin/android_debug.apk` bundling the libs for all built arches.\r\nTheir intermediate build options however follow the scheme:\r\n\r\n```\r\ncore_bind.android.debug.armv7.neon.o\r\n```\r\n\r\nalbeit with some variation (see e.g. `.neon` here))\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI propose to refactor this system to use well-documented and standardized tuples, so that you can see at a glance how a binary was configured. Such information could also be included in `godot --version` and printed to stdout on start, so that we get reliable info on users' build in bug reports.\r\n\r\nIt would then also be easier for thirdparty buildsystems (e.g. GDNative plugins) to use compatible tuples, especially if we factor out this SCons logic in a Python module that could be reused outside Godot.\r\n\r\nThis should also be the opportunity to sanitize the mess we currently have with `arch`, `android_arch` and `bits` options. We should only use `arch` and drop the rest IMO. (If we want to keep `bits` for convenience, its mapping to \"common-sense\" arches -- e.g. `arch=x86_64` for `bits=64` on PC) for the given platform should likely be done in a module in a big switch, to avoid polluting each platform's `detect.py`)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI don't have a proposal yet for how it should look like exactly, so feel free to do some research on what other projects do and make suggestions. Some data:\r\n- Rust target triples: https://forge.rust-lang.org/platform-support.html\r\n- Debian multiarch tuples: https://wiki.debian.org/Multiarch/Tuples\r\n\r\nInformation that should be included by our target tuple (won't be a triplet as we need more than 3 fields):\r\n- platform (currently `x11`, `windows`, `android`, etc.)\r\n- target (currently `opt`, `opt.debug`, `debug`)\r\n- architecture (currently a mess mixing `bits`, `arch` and `android_arch` based on the target platform)\r\n- tools (currently `tools` or nothing)\r\n- compiler (currently only `llvm` exists, but we should have `gcc`, `llvm`, `msvc`, etc.)\r\n- noteworthy build options (currently only `mono`, defined with `env.add_module_version_string`). We can't document every single build option this way though, so it should be limited to those which really matter for everyday use, like whether the build is linked againt the Mono SDK or not\r\n\r\nThe `extra_suffix` may not need to be included in the tuple and could just be appended at the end.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core build system functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core build system functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1416/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1415",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1415/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1415/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1415/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1415",
    "id": 686146673,
    "node_id": "MDU6SXNzdWU2ODYxNDY2NzM=",
    "number": 1415,
    "title": "Expose the `poll()` function in StreamPeerTCP",
    "user": {
      "login": "chenjie199234",
      "id": 29348971,
      "node_id": "MDQ6VXNlcjI5MzQ4OTcx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29348971?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chenjie199234",
      "html_url": "https://github.com/chenjie199234",
      "followers_url": "https://api.github.com/users/chenjie199234/followers",
      "following_url": "https://api.github.com/users/chenjie199234/following{/other_user}",
      "gists_url": "https://api.github.com/users/chenjie199234/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chenjie199234/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chenjie199234/subscriptions",
      "organizations_url": "https://api.github.com/users/chenjie199234/orgs",
      "repos_url": "https://api.github.com/users/chenjie199234/repos",
      "events_url": "https://api.github.com/users/chenjie199234/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chenjie199234/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-26T09:04:18Z",
    "updated_at": "2020-11-26T14:21:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm writing a tcp client model to connect to the server writted in golang.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen writing a low-level socket script,there are two functions to recv data:\r\n1.StreamPeerTcp.get_data(1024) will block,there is a while loop in c++ code read() function.So,this will waste cpu and cause message delay if the data if short then 1024\r\n2.StreamPeerTcp.get_partial_data(1024) can solve the message delay problem,but if there's no data,the function will return too.So if there is no data,the script will loop too,cpu is wasting.\r\nWe need a way to know if there has data to be read\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn c++ code,class StreamPeerTcp,there is a function called poll(),this can be used to notice if there has data to read\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPlease export this function to gdscript\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is a main function to use in all online games\r\nlibevent/libev/libuv all these library are based on this\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNormal tcp socket is write in this way,on windows is iocp,on linux is epoll",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1414",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1414/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1414/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1414/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1414",
    "id": 685897637,
    "node_id": "MDU6SXNzdWU2ODU4OTc2Mzc=",
    "number": 1414,
    "title": "Means of accessing a tile from a tilemap collision and other related items",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-25T23:27:29Z",
    "updated_at": "2020-08-26T11:48:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlatformer\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTilemap collisions provide no real meta data on a per tile basis, in addition when collisions occur all you get back is the entire Tilemap object (not the tile) and every tile has to share the same single collision mask/layer.\r\n\r\nIn order to get the tile something collides with, this is the best I've been able to do:\r\n\r\n```\r\nvar tile_pos = collision.collider.world_to_map(position)\r\ntile_pos -= collision.normal\r\nvar tile_id = collision.collider.get_cellv(tile_pos)\r\nvar one_way = collision.collider.tile_set.tile_get_shape_one_way (tile_id,0) \r\n```\r\n\r\nIt's not simple, takes a lot of thought and searching, and getting a collision for a tile should be a simple one liner in Godot. In addition, the 'shape_id' value '0' I used, I just guessed this was an index because I could find nothing on it.\r\n\r\nAs an aside, the documentation is little more than a few words for most properties in tilemap/tileset when trying to figure out collisions between tilemap and other objects, made more difficult by because collisions and colliders return generic object generic types, there is no auto-completion to help either.\r\n\r\nI am in awe of the Godot developers, but the above should not be how you have to access a tile. It's painful and hard.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. Provide a means of accessing a tile from a collision or even replacing the 'collider' tilemap with the tile itself\r\n2. Optional but really is required: provide a means for EACH tile to have its own collision mask/layer because a one for every single tile, which could be tens or hundreds in a tileset is a bit mad, leading on to\r\n3. Optional, but really is required: a tile should have a means of providing some custom meta-data within it's own data\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSomebody, better than me, who wrote the tilemap please make it simpler :)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nTilemaps play a large part in 2D games and currently it's pretty hard to do a lot of things, making collisions better would be a start...\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1414/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1413",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1413/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1413/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1413/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1413",
    "id": 685620123,
    "node_id": "MDU6SXNzdWU2ODU2MjAxMjM=",
    "number": 1413,
    "title": "Create an official repository for CI helpers (aka Actions)",
    "user": {
      "login": "umarcor",
      "id": 38422348,
      "node_id": "MDQ6VXNlcjM4NDIyMzQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38422348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/umarcor",
      "html_url": "https://github.com/umarcor",
      "followers_url": "https://api.github.com/users/umarcor/followers",
      "following_url": "https://api.github.com/users/umarcor/following{/other_user}",
      "gists_url": "https://api.github.com/users/umarcor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/umarcor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/umarcor/subscriptions",
      "organizations_url": "https://api.github.com/users/umarcor/orgs",
      "repos_url": "https://api.github.com/users/umarcor/repos",
      "events_url": "https://api.github.com/users/umarcor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/umarcor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-25T16:20:58Z",
    "updated_at": "2020-08-25T19:42:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNot relevant. This request is usable for any project that needs to be built automatically and periodically.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhile trying to setup CI for a Godot project in GitHub, using GitHub Actions, I found that 6 different projects are available in the marketplace: https://github.com/marketplace?type=actions&query=godot. On the one hand, none of them seems to be officially supported by the org. On the other hand, many of them feel redundant, but there is no discussion about the differences/motivations.\r\n\r\nI did not check *helpers* for other CI services, but I'd expect the ecosystem to be either similar or inexistent.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nRegardless of the CI service, most users willing to export their projects/games/tools to multiple platforms are likely to find the same problems. Hence, it is sensible to gather resources in a common location. Moreover, most of the CI services provide equivalent environments, while differences are related to the syntax of configuration files.\r\n\r\nIn the specific case of GitHub Actions, it is not a requirement for each action to be hosted in a separate repository. It is possible to have subdirs, and each of them be a \"completely\" different action. As a result, it is possible to have one or multiple actions, along with some \"generic\" scripts, and other specific setup files for \"external\" CI services (GitLab, Travis, CircleCI, etc.). However, for now I am mostly interested on conciliating and officializing (the best of) existing GitHub Actions.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n- [113 stars] [godot-ci](https://github.com/marketplace/actions/godot-ci) @aBARICHELLO: \"*Docker image to export Godot Engine games. Templates for Gitlab CI/GitHub Actions deploy to GitLab/GitHub Pages or Itch.io*\"\r\n  - Despite being published in the marketplace, this does NOT provide any action. On the one hand, a [Dockerfile](https://github.com/aBARICHELLO/godot-ci/blob/master/Dockerfile) is provided (see #1411). On the other hand, an example workflow is provided (see https://github.com/aBARICHELLO/godot-ci/blob/master/.github/workflows/godot-ci.yml). Workflows use GitHub Action's syntax to execute jobs in containers *automagically*.\r\n  - It is mostly a documentation repo, where multiple videotutorials and examples are provided.\r\n  - Deploying to GitHub Pages (from GitLab CI) and to Itch.io (via [Butler](https://itch.io/docs/butler/)) is explained.\r\n  - Another image is provided for projects with Mono enabled.\r\n  - Since the logic is written in bash scripts, the same resources are used in GitHub or GitLab.\r\n- [87 stars] [Godot Export](https://github.com/marketplace/actions/godot-export) @firebelley: \"*Automatically exports your Godot games*\"\r\n  - It is a JavaScript (TypeScript) GitHub Action that provides an all-in-one solution. It reads the `export_presets.cfg` file, builds all the targets at once and creates releases.\r\n  - Since it needs to download and install godot, the URLs to the tarballs and the templates are required parameters.\r\n  - It supports standard and Mono builds.\r\n- [21 stars] [Build Godot](https://github.com/marketplace/actions/build-godot) @josephbmanley: \"*Build a Godot project for multiple platforms*\"\r\n  - It is a Docker GitHub Action for exporting project only. No releases, not pages, not itch.io.\r\n  - It based on the Docker image from godot-ci. So, in essence, this repo contains what @aBARICHELLO's repo is lacking, for it to be an Action. From a user's perspective, this is seen in the \"complexity\" of the workflows:\r\n    - https://github.com/aBARICHELLO/godot-ci/blob/master/.github/workflows/godot-ci.yml#L17-L25\r\n    - https://github.com/josephbmanley/build-godot-action#usage\r\n- [Run GUT Tests](https://github.com/marketplace/actions/run-gut-tests) @josephbmanley: \"*Run GUT tests for a Godot project*\"\r\n  - Unlike the other action by the same author, this is per se a JavaScript (TypeScript) GitHub Action, which uses `dockerode` (a third-party npm package) to run a container. It feels weird, but the motivation might be the inability for allowing users to customize the Docker image defined in the `action.yml`.\r\n- [godot-tester](https://github.com/marketplace/actions/godot-tester) @croconut: \"*Runs all GUT tests you have for your Godot game*\"\r\n  - It is a Docker GitHub Action. However, the base Docker image does not include godot. Instead, it is installed in the entrypoint. As a result, it does not really take advantage of using a Docker image.\r\n- [godot-android-builder](https://github.com/marketplace/actions/godot-android-builder) @croconut: \"*Builds for Android, Windows, Mac OSX, HTML5 and/or Linux*\"\r\n  - Despite the name, it is a Docker GitHub Action that allows to build projects for Android, Windows, MacOS and/or HTML5.\r\n  - Unlike the other action by the same author, this takes advantage of Docker images, and does not install dependencies in the entrypoint. However, the Dockerfile that produces the base image seems not to be publicly available.\r\n  - Compared to godo-ci + build-godot, this allows to build for Android, but it has less options and it is less documented.\r\n\r\nNOTE: I am not familiar with testing features. That's why my comments about some of the actions are limited/short.\r\n\r\nOverall:\r\n\r\n- JavaScript/TypeScript Actions need to be compiled (or `node_modules` needs to be added to the repo). That is really annoying for this kind of projects where any scripting language (bash, Python, GDScript...) works.\r\n- JavaScript/TypeScript Actions can be executed on any of the environments in GitHub Actions (ubuntu, windows or macos). However, Docker Actions (and docker containers) can only be used on ubuntu. As a result:\r\n  - @josephbmanley, I think there is no motivation to write run-gut-tests in JavaScript, because it can only be used on ubuntu anyway. Should it be because you prefer the language, that's ok. However, note that you can achieve the same result with e.g. Python and [docker-py](https://docker-py.readthedocs.io/en/stable/).\r\n    - IMHO, Python is a better fit for this use case. Precisely, run-gut-tests can be useful locally too (for users to run tests without installing godot on their host). I'd expect more people to have a working Python installation, than Node.js.\r\n    - \"Locally\" means \"any laptop/workstation with Docker (Desktop)\". Docker is available for Windows and Mac OS, despite it not being available in GitHub Actions (due to issues with nested virtualization).\r\n  - @firebelley, as long as godot-export is supported on any environment, it cannot take advantage of preinstalling dependencies in a container. However:\r\n    - It is sensible to provide a solution that works on any environment, for those use cases that need to be linked/built together with some other platform-specific dependency. Is this something you want to support? Currently, all the examples are on ubuntu, and there is no CI for the action itself.\r\n    - GitHub Actions' caching features might be used for reducing startup time (as an alternative to containers).\r\n\r\nMy proposal is the following:\r\n\r\n- Fork/clone/migrate godot-ci to a new repo named `godotengine/ci` or `godotengine/actions` or `godotengine/ci-helpers` or...\r\n- Merge build-godot into the repo and reorganize the content:\r\n  - A subdir for the Dockerfile(s) of the \"base\" images.\r\n  - A workflow to generate and publish the \"base\" images (ref #1411).\r\n  - A subdir for the Docker Action (godot-ci).\r\n  - An example workflow using the syntax from godot-ci.\r\n  - A subdir for docs (GitHub Pages, Itch.io, etc.).\r\n- If godot-export is to be supported on any environment, merge it into the repo, to a subdir.\r\n- run-gut-tests and godot-tester ?\r\n- Enhance the Dockerfile from godot-ci with the features from godot-android-builder. Alternatively, provide another image.\r\n\r\nThe self-contained approach (publishing the \"base\" docker image and an action from subdirs of the same repo) is shown in https://github.com/umarcor/hwstudio/tree/godot/root/.github/actions/godot. That is equivalent to the hypothetical first merge of godot-ci and build-godot:\r\n\r\n- A workflow is used to build and publish the base image:\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/workflows/dev.yml\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/godot.dockerfile (this dockerfile might be located anywhere, it does NOT need to be in the same subdir as the action below)\r\n- A subdir contains a Docker Action, with a custom shell entrypoint:\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/action.yml\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/gexport.dockerfile\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/gexport.sh\r\n  - As commented in #1411, the custom entrypoint should NOT be required, if Godot could find templates in other \"standard\" locations.\r\n- In another workflow, the Action (and the image) are used/tested:\r\n  - https://github.com/umarcor/hwstudio/blob/godot/root/.github/workflows/build.yml\r\n  - Note that the HTML5 version is uploaded to GitHub Pages. This is equivalent to https://github.com/aBARICHELLO/godot-ci#github-pages. However, it reuses the credentials from actions/checkout.\r\n    - https://github.com/umarcor/hwstudio/blob/godot/root/.github/workflows/build.yml#L31-L33\r\n    - https://github.com/umarcor/hwstudio/blob/godot/root/.github/publish.sh\r\n  - Note also that all artifacts are uploaded (as in godot-ci), but also pushed as the assets of a \"nightly\" pre-release: https://github.com/umarcor/hwstudio/blob/godot/root/.github/workflows/build.yml#L92-L138 (ref #1412)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI'm quite sure that, the sooner this is conciliated and officialized, the more people will use it. There is not technical limitation. This issue is about communication, documentation, and reducing fragmentation to ease the path for new users.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis question does not apply.\r\n\r\n/cc @aBARICHELLO @firebelley @josephbmanley @croconut",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1413/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1411",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1411/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1411/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1411/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1411",
    "id": 685500860,
    "node_id": "MDU6SXNzdWU2ODU1MDA4NjA=",
    "number": 1411,
    "title": "Provide official container images for CI",
    "user": {
      "login": "umarcor",
      "id": 38422348,
      "node_id": "MDQ6VXNlcjM4NDIyMzQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38422348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/umarcor",
      "html_url": "https://github.com/umarcor",
      "followers_url": "https://api.github.com/users/umarcor/followers",
      "following_url": "https://api.github.com/users/umarcor/following{/other_user}",
      "gists_url": "https://api.github.com/users/umarcor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/umarcor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/umarcor/subscriptions",
      "organizations_url": "https://api.github.com/users/umarcor/orgs",
      "repos_url": "https://api.github.com/users/umarcor/repos",
      "events_url": "https://api.github.com/users/umarcor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/umarcor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-08-25T13:47:35Z",
    "updated_at": "2020-08-25T23:37:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nNot relevant. This request is usable for any project that needs to be built automatically and periodically.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently, there is no official container repository/image that I am aware of. As a result, any user willing to use Godot in CI needs to retrieve and extract both the (headless) tool and the templates. Doing so requires ~1min. \r\n\r\nIn some distributions, Godot is available through the package manager. However, on the one hand, templates might not be available. On the other hand, the version of Godot might be outdated.\r\n\r\nCurrently, there are several several users providing Dockerfiles and publishing images. Some examples:\r\n\r\n- https://github.com/aBARICHELLO/godot-ci/blob/master/Dockerfile\r\n  - https://hub.docker.com/r/barichello/godot-ci\r\n- https://hub.docker.com/r/ioribranford/godot-docker/dockerfile\r\n  - https://hub.docker.com/r/ioribranford/godot-docker\r\n- https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/godot.dockerfile\r\n  - https://hub.docker.com/r/hwstudio/godot\r\n- See 150+ results in https://hub.docker.com/search?q=godot&type=image\r\n\r\nUnfortunately, there are two main caveats:\r\n\r\n- Each of the maintainers of those images needs to \"manually\" keep track of new Godot releases, in order to update their Dockerfiles.\r\n- There is an unnecessary competition, because most of those projects are almost completely equivalent. I.e., there are no explicit incompatibilities that prevent them from being merged into a single solution.\r\n  - Yet, because of how template installation is managed, there might be small differences that make the workflows not exactly switchable.\r\n\r\nFurthermore, since Godot is already using CI, the tool itself is already being built and published in an automated workflow. Moreover, in the org/project, Docker images are already being used for building Godot. For reference, see:\r\n\r\n- https://github.com/godotengine/godot/tree/master/.github/workflows\r\n- https://github.com/godotengine/build-containers \"*These containers should help you build Godot for all platforms supported on any machine that can run Docker containers*\".\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe request is the following:\r\n\r\n- Create a `godot` organization in Docker Hub.\r\n  - Alternatively, use GitHub's Package Registry (to avoid handling new credentials).\r\n- Add one or more Dockerfiles to the main repo, based on the references from aBARICHELLO, ioribranford or myself (see above).\r\n- On each tagged commit (release), build the Docker image (which should contain, at least, the headless version and the templates), tag it `godot/export:<VERSION>` as well as `godot/export:latest`, and push it to the registry.\r\n\r\nThen, users can extend the \"official\" \"base\" image with other features (say tools for publishing to itch). But there would be a common reference that is updated automatically together with the official releases.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee previous point.\r\n\r\nMy proposal would be to start with a single image based on `ubuntu:bionic`, and add `Godot_v${GODOT_VERSION}-stable_linux_headless.64.zip` and `Godot_v${GODOT_VERSION}-stable_export_templates.tpz` only. To do so, `wget`|`curl` and `unzip` are required. Leaving these in the final image is optional. That alone would be (re)usable by any of the most popular actions/workflows.\r\n\r\nThere is a point that needs to be addressed, though: where to locate templates. By default, godot expects templates to be located at `~/.local/share/...`. That is unfortunate, because when building the docker image the user is typically `root`, but in CI workflows/runs, it might not be. E.g., in GitHub Actions, `HOME` is `/github/home`.\r\n\r\n@aBARICHELLO addressed it by copying the content in the workflow: https://github.com/aBARICHELLO/godot-ci/blob/master/.github/workflows/godot-ci.yml#L19-L20. I was not convinced with that approach and, instead, I used a script as the entrypoint to a container Action: https://github.com/umarcor/hwstudio/blob/godot/root/.github/actions/godot/gexport.sh. Moreover, in the image, templates are located in `/usr/local/share/...`, instead of `~/.local/share/...`. For the purpose of this request, that difference is trivial.\r\n\r\nNevertheless, this arises the question about the convenience of Godot search for templates in the user home only. I believe it would be sensible for Godot to look at `/usr/local/share/...` (or any other global location) too. Should that be possible, neither @aBARICHELLO's solution (fixes/hacks) nor mine would be required at all.\r\n\r\nNOTE: I put the templates in `/usr/local/share` because godot is installed in `/usr/local/bin`. But I'd expect `/usr/share` and `/usr/bin`, or `/bin` and `/share` to be valid too.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis is not a requirement, but an enhancement to avoid unneccesary fragmentation in the community. Don't take me wrong: fragmentation in open source is frequently good; but I think that not in this specific case.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis question does not apply.\r\n\r\n/cc @aBARICHELLO @josephbmanley @croconut",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1411/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1409",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1409/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1409/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1409/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1409",
    "id": 685180031,
    "node_id": "MDU6SXNzdWU2ODUxODAwMzE=",
    "number": 1409,
    "title": "Add support for editing manual/tutorial Markdown files in the script editor",
    "user": {
      "login": "cloewen8",
      "id": 1569808,
      "node_id": "MDQ6VXNlcjE1Njk4MDg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1569808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cloewen8",
      "html_url": "https://github.com/cloewen8",
      "followers_url": "https://api.github.com/users/cloewen8/followers",
      "following_url": "https://api.github.com/users/cloewen8/following{/other_user}",
      "gists_url": "https://api.github.com/users/cloewen8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cloewen8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cloewen8/subscriptions",
      "organizations_url": "https://api.github.com/users/cloewen8/orgs",
      "repos_url": "https://api.github.com/users/cloewen8/repos",
      "events_url": "https://api.github.com/users/cloewen8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cloewen8/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-25T05:22:59Z",
    "updated_at": "2020-08-25T21:57:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nA dungeon crawler with a dolphin character.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm having to switch between Godot and a text editor a lot.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nRather then having to switch to another program to view and edit text documentation, it would be great to be able to edit and view documentation directly in Godot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThis proposal is meant for higher-level documentation. Low-level code documentation is a separate concern.\r\n\r\nTo edit documentation, I imagine this would be almost completely identical to the Script editor (just with different highlighting). I mostly use Markdown for documentation. Here is an example:\r\n\r\n![image](https://user-images.githubusercontent.com/1569808/91125553-3e510480-e65f-11ea-81a8-0e3cf9c0a48c.png)\r\n\r\nOptimally there would be a toggle button on the toolbar to switch between editing and viewing. And documentation would be placed alongside Godot documentation tabs.\r\n\r\n![image](https://user-images.githubusercontent.com/1569808/91126081-6725c980-e660-11ea-9246-9aed21e1f7a9.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nDefinitely not a few. I have not worked on the editor and am unsure how easy it would be to add.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nOptimally everyone should have some kind of documentation to keep their project on track (along with keeping a team in sync). \"Failing to plan is planning to fail.\" Seeing as this is advantageous to everyone, it should be provided to everyone.\r\n\r\nI can write several paragraphs on how beneficial documentation is if needed (but please don't make me).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1409/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1408",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1408/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1408/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1408/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1408",
    "id": 684901709,
    "node_id": "MDU6SXNzdWU2ODQ5MDE3MDk=",
    "number": 1408,
    "title": "Allow multiple debuggers to run at once",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-24T19:13:27Z",
    "updated_at": "2020-08-26T16:08:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have two instances of Godot open, however they cannot be debugged at the same time because they share the same global config value for the debug port. If I change the port it works, so I know there is no technical difficulty. However on reopening, the value is reset to whatever project last closed, causing an error due to the port being already open.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nEither:\r\n1. Provide a means of having a per-project 'Editor' setting override\r\n2. Move debugging port to project settings from Editor\r\n3. Provide an 'automatic' port number option\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAny of the above 3. I think 3 would be less prone to user error but require more work determining the next port.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPeople need to debug code, and many times this is with more than one client. For a small change, Godot can be much more usable for debugging multiple clients at the same time.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1408/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1407",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1407/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1407/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1407/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1407",
    "id": 684862355,
    "node_id": "MDU6SXNzdWU2ODQ4NjIzNTU=",
    "number": 1407,
    "title": "Provide obfuscators support for C#",
    "user": {
      "login": "Bleuzen",
      "id": 12885163,
      "node_id": "MDQ6VXNlcjEyODg1MTYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12885163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bleuzen",
      "html_url": "https://github.com/Bleuzen",
      "followers_url": "https://api.github.com/users/Bleuzen/followers",
      "following_url": "https://api.github.com/users/Bleuzen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bleuzen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bleuzen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bleuzen/subscriptions",
      "organizations_url": "https://api.github.com/users/Bleuzen/orgs",
      "repos_url": "https://api.github.com/users/Bleuzen/repos",
      "events_url": "https://api.github.com/users/Bleuzen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bleuzen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-24T18:05:20Z",
    "updated_at": "2021-01-02T16:24:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nAny C# / Mono project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently nothing is done to obfuscate the C# assemblies on export with Godot Mono. This means it is easy to recovery the full source code of the game for anyone with a C# decompiler.\r\nOf course this hurts commercial projects, since they get easy to crack.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere are some C# obfuscators out there, which try to solve (or at least improve) the problem.\r\n(for example https://www.obfuscar.com/)\r\n\r\nThe feature request is to Godot to support applying an obfuscator on game export.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nGodot will the the obfuscator program on the C# assembly when the user exports the game.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nMany users are complaining about it and want to better protect their game resources (and scripts) for commercial projects. See:\r\nhttps://github.com/godotengine/godot/issues/24716\r\n\r\n\r\n**Alternative**\r\n\r\nAn even better way to solve this problem and better protect the source code would be to convert C# to C++ and compile it to a native binary, just like Unity does (https://docs.unity3d.com/Manual/IL2CPP.html).\r\nThis will protect the code much better and is much harder to reverse engineer.\r\nBut it also may be harder to implement in Godot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1407/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1405",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1405/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1405/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1405/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1405",
    "id": 684283804,
    "node_id": "MDU6SXNzdWU2ODQyODM4MDQ=",
    "number": 1405,
    "title": "Warning when unlisted JSON (and other) files are accessed in the FIleSystem",
    "user": {
      "login": "goatchurchprime",
      "id": 677254,
      "node_id": "MDQ6VXNlcjY3NzI1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/677254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/goatchurchprime",
      "html_url": "https://github.com/goatchurchprime",
      "followers_url": "https://api.github.com/users/goatchurchprime/followers",
      "following_url": "https://api.github.com/users/goatchurchprime/following{/other_user}",
      "gists_url": "https://api.github.com/users/goatchurchprime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/goatchurchprime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/goatchurchprime/subscriptions",
      "organizations_url": "https://api.github.com/users/goatchurchprime/orgs",
      "repos_url": "https://api.github.com/users/goatchurchprime/repos",
      "events_url": "https://api.github.com/users/goatchurchprime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/goatchurchprime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-24T00:14:19Z",
    "updated_at": "2020-08-25T13:30:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCave survey VR\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor some reason JSON files do not appear in the FileSystem docked window even when they are in the underlying directory and they can still be opened from GDscript.  \r\n\r\nThe problem comes when you deploy the game to another machine and your unlisted JSON file doesn't get included in the bundle.  \r\n\r\nThis issue took me a while to track down and it is unfortunate.\r\n\r\n(I would say it is a surprise that JSON files are not considered a resource, given the support for them in the core libraries.  It's a useful format for porting game level data created by your legacy scripts into your new Godot game, and is just as common as PNG or JPG file formats.  The work-around is to put a \".res\" at the end of the file and point the json parser at it, but it shouldn't be necessary to do this.  Similar observations have been made at https://github.com/godotengine/godot/issues/24186)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThis warning feature would help people identify a problem they will have on deployment while they are still working in their development environment. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere should be a Debug Warning/Error option when I open a file from the resource directory \"res://something.json\" \r\nand it is not listed in the FileSystem and is therefore not going to be included when the game gets deployed to another machine.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot applicable\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot applicable",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1404",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1404/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1404/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1404/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1404",
    "id": 684259244,
    "node_id": "MDU6SXNzdWU2ODQyNTkyNDQ=",
    "number": 1404,
    "title": "Improve navigation in Texture Region menu with right-click",
    "user": {
      "login": "nice-shot",
      "id": 2602328,
      "node_id": "MDQ6VXNlcjI2MDIzMjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2602328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nice-shot",
      "html_url": "https://github.com/nice-shot",
      "followers_url": "https://api.github.com/users/nice-shot/followers",
      "following_url": "https://api.github.com/users/nice-shot/following{/other_user}",
      "gists_url": "https://api.github.com/users/nice-shot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nice-shot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nice-shot/subscriptions",
      "organizations_url": "https://api.github.com/users/nice-shot/orgs",
      "repos_url": "https://api.github.com/users/nice-shot/repos",
      "events_url": "https://api.github.com/users/nice-shot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nice-shot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-23T21:24:36Z",
    "updated_at": "2020-08-24T19:16:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D UI Project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm using a single sprite texture with several different elements inside of it. Most of the time I'm using the AtlasTexture resource and selecting a region using the Texture Region menu. However, navigating inside this menu is a bit uncomfortable since I can't use the right-click to scroll across the image, instead, I have to drag the scrollbars. I would expect to have the same controls as in the 2D scene view. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf I could navigate the Texture Region menu the same way I could the 2D scene view, it would greatly enhance my efficiency with this tool.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhen the pointer is inside the Texture Region menu, the user can right click and drag to scroll across the image. Exactly how this works in the 2D scene view.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt might be possible to create an alternative menu for Texture Region controls but this seems too complex for such a small change.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis seems like a simple UX quality of life improvement that should be part of the existing menu.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1403",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1403/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1403/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1403/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1403",
    "id": 684200177,
    "node_id": "MDU6SXNzdWU2ODQyMDAxNzc=",
    "number": 1403,
    "title": "Add presets to Modify Editor Features to ease the learning of Godot",
    "user": {
      "login": "mount2010",
      "id": 13136505,
      "node_id": "MDQ6VXNlcjEzMTM2NTA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13136505?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mount2010",
      "html_url": "https://github.com/mount2010",
      "followers_url": "https://api.github.com/users/mount2010/followers",
      "following_url": "https://api.github.com/users/mount2010/following{/other_user}",
      "gists_url": "https://api.github.com/users/mount2010/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mount2010/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mount2010/subscriptions",
      "organizations_url": "https://api.github.com/users/mount2010/orgs",
      "repos_url": "https://api.github.com/users/mount2010/repos",
      "events_url": "https://api.github.com/users/mount2010/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mount2010/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-23T15:06:49Z",
    "updated_at": "2020-08-23T19:49:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThis proposal is general and is not limited to a certain project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThis proposal relates to learning Godot. As a beginner, especially if one intends to learn by doing (instead of following tutorials or guides step-by-step), one may be confused about the amount of features and nodes that Godot offers. To illustrate, imagine being a new user who has just downloaded Godot and started a project. Adding a new node may be daunting because you are immediately faced with the dozens of nodes that Godot offers for specific functionality. The intent of this proposal is not to remove features or to limit what one can do with Godot, but instead to offer \"hints\" to _beginners_ who want to learn Godot by using the software. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCurrently, one can use the Editor -> Modify Editor Features interface to change what can be seen in the editor. This is useful, but it does not offer presets. I propose adding, for example, a \"basic\" or \"beginner\" preset that has more limited features in order to help new users learn how to use the engine. This preset will indicate to beginners that \"hey, you may want to try out, and figure out, these features before moving on with the rest of the engine\". This is a clear pathway for new users.\r\n\r\nI do not claim to understand all the implications of separating \"basic\" or \"beginner\" features from \"advanced\" features, which is why I am making this proposal, to invite debate on this issue. I would like to note that I am myself a new user, and I have been confused about the amount of nodes I seem to have to learn and get familiar with, especially with the GUI-based editor being at the forefront of Godot, and no nodes seeming to work the same way in this GUI. As I am a new user, I cannot claim to know which nodes are _most likely_ used in a majority of projects. However, what I am thinking of, for example, is to place the User Interface nodes, as well as things that can encourage one to begin to design at the forefront, while nodes less important to newcomers such as the 3D nodes or nodes relevant to multiplayer may not be as important to show.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWhile this is an abstract proposal, if beginner presets are added, one can show a pop-up on the first launch of the Project Editor:\r\n![mockup](https://user-images.githubusercontent.com/13136505/90981608-9c64e580-e594-11ea-9449-64c7a15e0388.png)\r\n\r\nAgain, I do not claim to know the implications of such a pop-up. I am not a UX designer by any means. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nN/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1403/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1402",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1402/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1402/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1402/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1402",
    "id": 684075528,
    "node_id": "MDU6SXNzdWU2ODQwNzU1Mjg=",
    "number": 1402,
    "title": "AnimationStateMachine: adding control over blending/interpolation function for each transition similar what Tween has.",
    "user": {
      "login": "jcarlosrc",
      "id": 8985409,
      "node_id": "MDQ6VXNlcjg5ODU0MDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8985409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcarlosrc",
      "html_url": "https://github.com/jcarlosrc",
      "followers_url": "https://api.github.com/users/jcarlosrc/followers",
      "following_url": "https://api.github.com/users/jcarlosrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcarlosrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcarlosrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcarlosrc/subscriptions",
      "organizations_url": "https://api.github.com/users/jcarlosrc/orgs",
      "repos_url": "https://api.github.com/users/jcarlosrc/repos",
      "events_url": "https://api.github.com/users/jcarlosrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcarlosrc/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-22T22:07:24Z",
    "updated_at": "2020-08-22T22:09:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a 3D third person shooter project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to implement a frame-based animation system for the project. I would like to have an graph connecting animations / frames similar to an AnimationStateMachine but with advanced interpolation functions on each transition.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to have a node similar to an AnimationStateMachine to connect distinct animations in a directed graph. However, I would like to have the control on the blending interpolation method for each transition. Working with 1d/2d blending spaces are not a good solution because they rely on an space-based interpolation, not a graph-based one.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nOn each connecting arrow, I would like to have control over the blending time, speed, interpolation method.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can not be implemented on a few lines on existing platform.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a general purpose addition.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1401",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1401/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1401/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1401/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1401",
    "id": 683988799,
    "node_id": "MDU6SXNzdWU2ODM5ODg3OTk=",
    "number": 1401,
    "title": "Plug a graph drawing framework into GraphEdit, for automatic layout and routing",
    "user": {
      "login": "umarcor",
      "id": 38422348,
      "node_id": "MDQ6VXNlcjM4NDIyMzQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38422348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/umarcor",
      "html_url": "https://github.com/umarcor",
      "followers_url": "https://api.github.com/users/umarcor/followers",
      "following_url": "https://api.github.com/users/umarcor/following{/other_user}",
      "gists_url": "https://api.github.com/users/umarcor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/umarcor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/umarcor/subscriptions",
      "organizations_url": "https://api.github.com/users/umarcor/orgs",
      "repos_url": "https://api.github.com/users/umarcor/repos",
      "events_url": "https://api.github.com/users/umarcor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/umarcor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-08-22T12:31:01Z",
    "updated_at": "2020-08-23T16:53:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe main mechanic of a tool I'm prototyping is an [schematic editor](https://en.wikipedia.org/wiki/Schematic_editor). There is a logical problem/puzzle that needs to be solved by combining pre-existing blocks/modules with given functionality and inputs/outputs. \r\n\r\nHence, the use case has virtually no difference compared to any other usage of GraphEdit, including the Visual Editor in godot.\r\n\r\nSeveral in-progress PRs apply to GraphEdit (godotengine/godot#37227, godotengine/godot#40043, godotengine/godot#40322), but none of them conflicts with this request from a feature point of view. However, code conflicts might exist.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn complex schematic diagrams, laying all the blocks in a left to write flow is inneficient. The vertical space can be better used by laying the blocks in several rows (a grid). Furthermore, clustering can significantly aid in providing an easy to understand layout/graph.\r\n\r\nHowever, current connections are splines or bezier curves. As a result, feedback connections (the ones going from right to left) are drawn below the blocks/nodes/modules. On the other hand, clustering seems not to be supported.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nMany libraries exist for automatic layout and routing of diagrams, since it is a complex task that has been throroughly studied. The proposal is to pick one that is compatible with godot, in terms of licensing. Then, provide some acceptable defaults/presets in GraphEdit class/node.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nIn the following references, multiple layout algorithms are shown:\r\n\r\n- https://ogdf.uos.de/wp-content/uploads/2019/04/ogdf.pdf\r\n- http://rtsys.informatik.uni-kiel.de/%7Ebiblio/downloads/theses/msp-dt.pdf\r\n\r\nFrom godot's user's point of view, there would be 1 or 2 options added to the 'GraphEdit' section of the 'Inspector', just below current 'Use Snap' or 'Zoom':\r\n\r\n- Layout: algorithm used to position the nodes in the graph. Defaults to 'unset' or 'manual'.\r\n- Router: algorithm used to draw the connections between nodes in the graph. Defaults to 'unset', 'splines' or 'bezier'.\r\n\r\nOptionally, clustering would be supported. I believe a new node class would need to be written. From the usage perspective, users/developers/players would select a group of GraphNodes and would click an option to \"Create cluster\". There are two possible types of clusters:\r\n\r\n- Transparent: a box is drawn in the diagram, but connections are not changed.\r\n- Node/entity: ports are added to the cluster for each ingoing or outgoing connection; then existing connections are broken/split, for making them pass through the ports of the cluster.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nMy main concern is routing of connections. I believe it is currently not possible to override how connections are drawn by GraphEdit. I assume that rewriting the class from scratch might be needed.\r\n\r\nRegarding layout algorithms, there is #1253 where implementing 6 different algorithms is proposed. Should any of those be significantly different from the ones available in existing libraries, I wonder whether contributing them there might be a better long-term approach.\r\n\r\nI think that clustering is NOT a priority. I mentioned it because it is thoroughly covered in some of the references, and it would come handy. Nevertheless, I believe that improving routing and layout are the relevant enhancements, in that order.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHaving a \"nice\" schematic editor combined with godot's engine and assets is an unvaluable framework for gamification of all kinds of subjects. Schematic graphs/diagrams are used in many areas of engineering for communicating knowledge between programmers/designers and other developers. With GraphEdit, most of the functionality is already there. The only missing feature for working with large/complex graphs to be pleasing is a well-thought layout and routing solution.\r\n\r\nHence, it might be possible to duplicate GraphEdit, should making godot dependent on any external library be unacceptable. Otherwise, I believe that all the current users of GraphEdit would benefit from the enhancement being built-in.\r\n\r\nRef #506 #593 #1159 \r\n\r\n# OGDF\r\n\r\nOGDF is a long going open source project developed by several international research groups. It stands both for *Open Graph Drawing Framework* (the original name) and *Open Graph algorithms and Data structures Framework*.\r\n\r\n> OGDF is a self-contained C++ library for graph algorithms, in particular for (but not restricted to) automatic graph drawing. It offers sophisticated algorithms and data structures to use within your own applications or scientific projects.\r\n\r\n- [ogdf.uos.de](https://ogdf.uos.de/)\r\n- [github.com/ogdf/ogdf](https://github.com/ogdf/ogdf)\r\n- https://ogdf.github.io/doc/ogdf/index.html\r\n\r\n# d3-hwschematic\r\n\r\nRegarding minimization of crossings, \"*see [On the Automatic Layout of Data Flow Diagrams](http://rtsys.informatik.uni-kiel.de/%7Ebiblio/downloads/theses/msp-dt.pdf) by Miro SpÃ¶nemann, referenced in [ghdl/ghdl#111:363395770](https://github.com/ghdl/ghdl/issues/111#issuecomment-363395770) by @Nic30 (see [Nic30/d3-hwschematic](https://github.com/Nic30/d3-hwschematic)). See also [Nic30/d3-wave](https://github.com/Nic30/d3-wave) and [(RTL) Schematic view](https://github.com/eine/hwd-ide/wiki/%28RTL%29-Schematic-view)*\" (from SymbiFlow/ideas/issues/41).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1401/reactions",
      "total_count": 3,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 2,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1400",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1400/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1400/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1400/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1400",
    "id": 683988056,
    "node_id": "MDU6SXNzdWU2ODM5ODgwNTY=",
    "number": 1400,
    "title": "Allow for easier reloading of resources in the editor",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-22T12:26:15Z",
    "updated_at": "2020-08-22T17:47:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA game where I use lots of built-in scripts.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nA very common problem I'm encountering in Godot is that there's no simple way to reload a resource loaded in the editor. You can close the scene referencing it or open another resource if it was open in the inspector, but very often the reference still remains somewhere. In worst case you have to restart the editor.\r\n\r\nFor me it most commonly happens with built-in scripts. When you make a tool built-in script, you need to reload it after every change. And it's difficult to do, sometimes requiring editor restart. Well of course built-in scripts have their problems blah blah, but I just had it happen with a TileSet. I edited TileSet externally and Godot kept overwriting my changes until I restarted it completely.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be some way to reload a resoure. Probably a menu option in the inspector. It would force-reload the resource in every place it is referenced.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere would be the reload option\r\n![image](https://user-images.githubusercontent.com/2223172/90955993-e9f12d80-e482-11ea-9062-d1d78eaa4e3e.png)\r\nNot sure how would it work exactly. Maybe it's possible to track all resource references and update them with reloaded resource. Dunno.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't think so, it's a core thing.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nProbably not pluginable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1400/reactions",
      "total_count": 5,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 4,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1399",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1399/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1399/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1399/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1399",
    "id": 683860692,
    "node_id": "MDU6SXNzdWU2ODM4NjA2OTI=",
    "number": 1399,
    "title": "Improve editor property capitalization",
    "user": {
      "login": "im4potato",
      "id": 62815710,
      "node_id": "MDQ6VXNlcjYyODE1NzEw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/62815710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/im4potato",
      "html_url": "https://github.com/im4potato",
      "followers_url": "https://api.github.com/users/im4potato/followers",
      "following_url": "https://api.github.com/users/im4potato/following{/other_user}",
      "gists_url": "https://api.github.com/users/im4potato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/im4potato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/im4potato/subscriptions",
      "organizations_url": "https://api.github.com/users/im4potato/orgs",
      "repos_url": "https://api.github.com/users/im4potato/repos",
      "events_url": "https://api.github.com/users/im4potato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/im4potato/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-21T22:35:45Z",
    "updated_at": "2020-08-22T01:02:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm not sure if this type of suggestion belongs here, but I couldn't find a more appropriate place.\r\n\r\n**Describe the project you are working on:**\r\nCleaning up the Godot editor UI strings.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMany strings in the Godot editor are not properly capitalized, acronyms only capitalize the first letter, or abbreviations are used. I know these are small issues, but it would contribute to a more cohesive and \"correct\" UI.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to see many of the strings throughout the editor cleaned up so that they use the proper syntax. Many of these issues can be found in `Editor Settings`, for instance, `Network > Ssl`. SSL is an acronym, all letters should be capitalized. Similarly, `2D` and `3D` should be used, not `2d` and `3d`. `Poly Editor` should be `Polygon Editor`, etc.\r\n![Screenshot from 2020-08-21 15-13-28](https://user-images.githubusercontent.com/62815710/90940160-b64ece80-e3c2-11ea-82b7-09fd67ade9fc.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThese strings should simply be updated to their proper forms. I've already tried to look into doing this myself, but I can't seem to find these UI strings anywhere within the project, which makes me think that they are somehow generated from some other bit of code, so perhaps there is a technical reason why things are the way they are currently, but I still believe this should be cleaned up.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1397",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1397/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1397/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1397/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1397",
    "id": 683544589,
    "node_id": "MDU6SXNzdWU2ODM1NDQ1ODk=",
    "number": 1397,
    "title": "Complained a lot about visual script looking bad - found a setting, now it's wonderful, sorry . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-21T13:00:46Z",
    "updated_at": "2020-08-23T00:30:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nVisual script didn't look so good, found a button <3 . .\r\n\r\n<img width=\"993\" alt=\"SkÃ¦rmbillede (15)\" src=\"https://user-images.githubusercontent.com/61069740/90892946-74238e00-e3be-11ea-9268-2f1a49ecf8e3.png\">\r\n\r\n![SkÃ¦rmbillede (16)](https://user-images.githubusercontent.com/61069740/90892960-78e84200-e3be-11ea-9c5f-bb035a6c13c6.png)\r\n\r\n![SkÃ¦rmbillede (19)](https://user-images.githubusercontent.com/61069740/90892971-7c7bc900-e3be-11ea-9fe2-6126c8500477.png)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI asked for a lot of visual script changes, for Godot, my only request is, you make a button, so one can make top corners of the boxes a bit rounded, just a setting, under the editor . .\r\n\r\n![2020-08-13 1544](https://user-images.githubusercontent.com/61069740/90893062-9ddcb500-e3be-11ea-8755-85ddba6e1df6.jpg)\r\n\r\nI also think it would be really nice, with an expandable lower bar, like image, where there could be settings, such as for changing color of box, from a 16 color palette, or so . . Right now, visual script is 98 % perfect, so nice, anyway, can't really ask for more, but that's my hope, just, gotta give you praise, it's so amazing, well done . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWell, like the image, a setting in editor settings, to have ' Graph Node Headers Colored ', ' Graph Node with Rounded Top ' . . So, we can make it look, like Blender visual shaders, which is probably best, looks bit, like thinking bubbles . . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't change engine, on my own . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs an extra setting, in editor, it would not bloat the engine, and give visual script users an extra option . . Right now, I'm so happy with how it looks, I'm not sure even ask for it, but wanted to try . .\r\n\r\n<3 . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1396",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1396/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1396/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1396/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1396",
    "id": 683241848,
    "node_id": "MDU6SXNzdWU2ODMyNDE4NDg=",
    "number": 1396,
    "title": "Make a short-cut key for ' snap settings ' . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-21T03:58:37Z",
    "updated_at": "2020-08-22T17:57:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTomb Raider - adventure title . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWould be nice if the ' snap ' had a short-cut, and also ' snap ' settings, as I'm constantly using them, to align stuff, sometimes it's bricks, that need 1 mm snap, then it's 1 m tiles, then I need 45 degree snap, then 5 degree, or 2 degree . . Would be nice, if the ' snap settings ' had a short-cut key, by default . . . ' Snap ' is toggled with ' Y ', maybe snap settings could be SHIFT-Y, or CTRL-Y, or so . . :(( . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI use that feature so often, for blocking levels, aligning meshes, so on, it'd be nice, if it had a short-cut, by default . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nWell, just a new button, maybe CTRL+Y, or SHIFT+Y, as snap is ' Y ', already . . <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't change the engine, as a new beginner . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nMakes sense, use it all the time, for placing stuff, rotating, getting the right placement . .\r\n\r\nThx <3 . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1396/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1394",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1394/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1394/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1394/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1394",
    "id": 683153903,
    "node_id": "MDU6SXNzdWU2ODMxNTM5MDM=",
    "number": 1394,
    "title": "Expose Structs to GDScript",
    "user": {
      "login": "brndel",
      "id": 58010307,
      "node_id": "MDQ6VXNlcjU4MDEwMzA3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58010307?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brndel",
      "html_url": "https://github.com/brndel",
      "followers_url": "https://api.github.com/users/brndel/followers",
      "following_url": "https://api.github.com/users/brndel/following{/other_user}",
      "gists_url": "https://api.github.com/users/brndel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brndel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brndel/subscriptions",
      "organizations_url": "https://api.github.com/users/brndel/orgs",
      "repos_url": "https://api.github.com/users/brndel/repos",
      "events_url": "https://api.github.com/users/brndel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brndel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-20T23:25:28Z",
    "updated_at": "2020-08-21T13:51:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA project using GDScript\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNodes like `ItemList` have tons of functions to set/get text, icon, modulate, metadata, tooltip... of the items. As GDScript is a object oriented programming language this doesn't feel very right.\r\n\r\nSome other places, where i have found those kind of functions are `TreeItem`, `Tabs` and `RayCast` (probably there are some more)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nInternally `ItemList`, `TreeItem` and `Tabs` are using a Struct for the items, so one way to get rid of all of those functions, would be to add Structs to GDScript (which also is a feature, requested by some users), alternatively the said Nodes could use Objects instead of Structs, because the can already be exposed to GDScript.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nItemList\r\n```\r\nvar item : ItemList.Item = ItemList.get_item(0)\r\nitem.text = \"new text\"\r\nitem.icon = load(\"res://icon.png\")\r\n```\r\n\r\nTreeItem\r\nfor TreeItem.Cell i would also imagine Subtypes like TextCell, ButtonCell, IconCell, CheckCell...\r\n```\r\nvar text_cell : TreeItem.TextCell = TreeItem.get_cell(0)\r\ncell.text = \"edited cell\"\r\n\r\nvar button_cell : TreeItem.ButtonCell = TreeItem.get_cell(1)\r\nbutton_cell.text = \"press me\"\r\nbutton_cell.disabled = false\r\n```\r\nRayCast\r\n```\r\n$RayCast.force_raycast_update()\r\nvar hit_result : RayCast.HitResult = $RayCast.get_hit_result()\r\nif(hit_result.hit):\r\n  show_hit_effect(hit_result)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nno\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nnot possible",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1394/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1393",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1393/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1393/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1393/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1393",
    "id": 682448616,
    "node_id": "MDU6SXNzdWU2ODI0NDg2MTY=",
    "number": 1393,
    "title": "Implement script editor description hint on hover a symbol/word",
    "user": {
      "login": "ThakeeNathees",
      "id": 41085900,
      "node_id": "MDQ6VXNlcjQxMDg1OTAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41085900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ThakeeNathees",
      "html_url": "https://github.com/ThakeeNathees",
      "followers_url": "https://api.github.com/users/ThakeeNathees/followers",
      "following_url": "https://api.github.com/users/ThakeeNathees/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThakeeNathees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ThakeeNathees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThakeeNathees/subscriptions",
      "organizations_url": "https://api.github.com/users/ThakeeNathees/orgs",
      "repos_url": "https://api.github.com/users/ThakeeNathees/repos",
      "events_url": "https://api.github.com/users/ThakeeNathees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ThakeeNathees/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-20T06:20:27Z",
    "updated_at": "2020-09-25T11:38:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nDescription hint on hover for the text edit(https://github.com/ThakeeNathees/godot/tree/TextEdit-hover-hint)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nit's one of the essential feature for a fully featured script editor and currently we lack of. Also the implementation of GDScript doc comments (https://github.com/godotengine/godot/pull/41095) it'll improve the user experience.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nwhen a symbol is hovered by the mouse, the text editor emits a signal to validate the symbol (like when it's being hovered with a ctrl), and when validating for that symbol it'll add some additional data (like description, type, class_name, return_type, arguments, etc.,) and display them at the text edit's draw call.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA working example (this will work with doc comments when it'll be merged)\r\n![hint2](https://user-images.githubusercontent.com/41085900/90722006-9d1d2380-e2d7-11ea-9aca-a3555145a481.gif)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, It would be a great usability improvement and can't be worked around with the script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nthere is no way to implement this with an add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1393/reactions",
      "total_count": 20,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1391",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1391/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1391/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1391/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1391",
    "id": 682157089,
    "node_id": "MDU6SXNzdWU2ODIxNTcwODk=",
    "number": 1391,
    "title": "Update SpriteFrames spritesheet",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-19T20:26:41Z",
    "updated_at": "2020-08-19T20:26:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game with lots of animated stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm reluctant to use an AnimatedSprite and I prefer a Sprite with AnimationPlayer attached. The reason is that when you create SpriteFrames from a sprite sheet, any size modification to the sheet will not be reflected in the animation and the only way to update it is removing all frames and adding them again. This makes you stuck with the original size of the sprite, which might often change. `Sprite` node doesn't have this problem and ironically it's better for animations.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere should be some way to update animations in SpriteFrames when sprite sheet frame size changes, without having to redo everything. Maybe this could be automatic, but given the nature of SpriteFrames, it could be difficult to implement in automatic way.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUh, not sure about the implementation >_>\r\nI'll just describe it with an example:\r\n1. User creates a sprite sheet animation\r\n2. User creates an AnimatedSprite with this animation\r\n3. User changes their mind and resizes the sprite sheet\r\n4. User goes to the SpriteFrames editor again and clicks a button that magically adjusts their old animation to use new size\r\n5. Everyone is happy\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's about AnimatedSprite usability.\r\n\r\nSome related issue: https://github.com/godotengine/godot/issues/29158",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1391/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1390",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1390/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1390/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1390/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1390",
    "id": 682149659,
    "node_id": "MDU6SXNzdWU2ODIxNDk2NTk=",
    "number": 1390,
    "title": "Add an `autoplay` property to AnimatedSprite",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-19T20:16:06Z",
    "updated_at": "2020-09-12T22:43:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D game with lots of animated stuff.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI sometimes decide to use an AnimatedSprite and I come into the same problem - there's no way to properly play an AnimatedSprite in game without using a script. AnimationPlayer has an autoplay functionality, but AnimatedSprite is missing it. This leaves basically 2 options:\r\n- setting `playing` to true. This means that your animation will play in the editor, constantly changing the `frame` property. Every time you save the scene, a different value ends in the `tscn`, which is bad for your VCS\r\n- playing it in a script. That requires every single AnimatedSprite having a script attached, which is meh\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThere could be an `autoplay` property, which if true would make an animation play when AnimatedSprite is ready (in-game). This is consistent with AnimationPlayer and AudioStreamPlayers.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust add the `autoplay` property and set `playing` to true in `NOTIFICATION_READY` if `autoplay` is true.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around with 3 lines of script, but that script could've not existed in the first place.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAnimatedSprite is clearly missing this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1390/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1389",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1389/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1389/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1389/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1389",
    "id": 682091739,
    "node_id": "MDU6SXNzdWU2ODIwOTE3Mzk=",
    "number": 1389,
    "title": "Add a function to Geometry to check if a polygon is self-intersecting (ie. simple/non-simple)",
    "user": {
      "login": "Av3r3tt",
      "id": 37034763,
      "node_id": "MDQ6VXNlcjM3MDM0NzYz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/37034763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Av3r3tt",
      "html_url": "https://github.com/Av3r3tt",
      "followers_url": "https://api.github.com/users/Av3r3tt/followers",
      "following_url": "https://api.github.com/users/Av3r3tt/following{/other_user}",
      "gists_url": "https://api.github.com/users/Av3r3tt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Av3r3tt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Av3r3tt/subscriptions",
      "organizations_url": "https://api.github.com/users/Av3r3tt/orgs",
      "repos_url": "https://api.github.com/users/Av3r3tt/repos",
      "events_url": "https://api.github.com/users/Av3r3tt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Av3r3tt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-19T19:10:08Z",
    "updated_at": "2020-08-20T19:56:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nWhen working with Polygon2Ds and polygons in general as used by the Geometry singleton, ie. as PoolVector2Arrays, there does not seem to be a function to check whether a polygon is valid for drawing (i.e. \"simple\" in geometrical terms -- a polygon that does not self-intersect). Godot quietly fails to render it if that is the case. This feature proposal follows the discussion mentioned in\r\n[https://godotforums.org/discussion/comment/41222#Comment_41222](https://godotforums.org/discussion/comment/41222#Comment_41222)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm currently working on creating simple polygon primitives whose edges are subsequently turned into \"noise\", to give them squiggly edges, such as is often the case for land masses or islands in maps, or for \"fuzzy\" edges of medieval scroll paper, by inserting additional points into the polygon. Even the best noise algorithms might accidentally create overlapping edges, turning polygons accidentally from simple ones into non-simple (self intersecting) ones. As hinted above, Godot does not give feedback if a polygon is \"illegal\" (ie non-simple) for drawing, and just fails in the process. A simple code function to check whether a polygon is valid would be needed.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose to add a function to Geometry which could yield a boolean to check whether a polygon is \"simple\" or not. A non-simple polygon cannot be rendered, and a simple hint in the documentation, together with this function, would alleviate the problem as it would allow developers to catch such polygons before attempting to use them.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Geometry should take this function:\r\n`func polygonIsSimple(polygon: PoolVector2Array/PackedVector2Array) -> bool`\r\nso that developers can write:\r\n```\r\nif !Geometry.polygonIsSimple(myPolygon):\r\n[repair polygon]\r\n...\r\n[render polygon]\r\n```\r\n\r\nActual algorithms and code for this are freely available in C++. For this function, usage of the Shamos-Hoey Algorithm (using a SweepLine algorithm implementation) would be ideal.\r\n\r\nCode for an implementation in C++ can be found here:\r\n[http://geomalgorithms.com/a09-_avl_code.html](http://geomalgorithms.com/a09-_avl_code.html)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWhile there might be, I have not found one that works well in GDscript.A brute force solution (of o(n2) computing time) could be achieved in GDScript by checking all polygon segments of a polygon p against all others; or by implementing a sweep line algorithm in GDscript; but these are presumably slow options, especially if the code wishes to deal with dozens or hundreds of such polygons. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAs a fundamental geometrical function, it would be logical to add in the Geometry singleton, as similar functions for polygons like clipping can be found there, too.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1389/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1388",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1388/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1388/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1388/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1388",
    "id": 681789374,
    "node_id": "MDU6SXNzdWU2ODE3ODkzNzQ=",
    "number": 1388,
    "title": "Establishing naming conventions for test macros",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-19T12:09:56Z",
    "updated_at": "2020-08-19T12:43:38Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine tests.\r\nConsider this proposal as preliminary documentation.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nInconsistency between error macros and test macros names, in terms of usage.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nProvide aliases for doctest macros to follow Godot naming conventions.\r\n\r\nIf you look at `core/error_macros.h`, you'll see a set of macros which are currently used by the engine for handling errors. All are prefixed with `ERR_*`, and some have corresponding `*_MSG` macros for conveying error rationale.\r\n\r\ndoctest provides a default set of simple macros such as `CHECK` and `REQUIRE` (which are also aliases for `DOCTEST_CHECK` and `DOCTEST_REQUIRE` internally, by the way). Macros with rationale are quite verbose too, for instance: `CHECK_MESSAGE`.\r\n\r\nCurrently we have `tests/test_macros.h` which could also have similar macros as in `core/error_macros.h` defined specifically for testing. They would be prefixed with `TEST_*` and also have corresponding `*_MSG` macros.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere's a rename mapping I propose, feel free to suggest anything else.\r\n\r\n\r\n## [Assertions](https://github.com/onqtam/doctest/blob/master/doc/markdown/assertions.md)\r\n\r\nSorted by severity (prefer `CHECK` macros as they do not fail the test immediately).\r\n\r\n| doctest                         | Godot                | Description                                                                                 |\r\n| ------------------------------- | -------------------- | ------------------------------------------------------------------------------------------- |\r\n| `DOCTEST_REQUIRE`               | `TEST_REQUIRE`       | Test condition, fail the test if does not hold true.                                        |\r\n| `DOCTEST_REQUIRE_MESSAGE`       | `TEST_REQUIRE_MSG`   | Same as above, prints a rationale.                                                          |\r\n| `DOCTEST_REQUIRE_FALSE`         | `TEST_FAIL_COND`     | Fail the test if condition holds true.                                                      |\r\n| `DOCTEST_REQUIRE_FALSE_MESSAGE` | `TEST_FAIL_COND_MSG` | Same as above, prints a rationale.                                                          |\r\n| `DOCTEST_CHECK`                 | `TEST_CHECK`         | Simple assertion.                                                                           |\r\n| `DOCTEST_CHECK_MESSAGE`         | `TEST_CHECK_MSG`     | Same as above, prints a rationale.                                                          |\r\n| `DOCTEST_CHECK_FALSE`           | `TEST_COND`          | Test if condition holds true, but does not fail the test.                                   |\r\n| `DOCTEST_CHECK_FALSE_MESSAGE`   | `TEST_COND_MSG`      | Same as above, prints a rationale.                                                          |\r\n| `DOCTEST_WARN`                  | `TEST_WARN`          | Test condition, does not fail the test, but logs a warning if something does not hold true.         |\r\n| `DOCTEST_WARN_MESSAGE`          | `TEST_WARN_MSG`      | Same as above, prints a rationale.                                                          |\r\n| `DOCTEST_WARN_FALSE`            | `TEST_COND_WARN`     | Test condition, does not fail the test, but logs a warning if something holds true. |\r\n| `DOCTEST_WARN_FALSE_MESSAGE`    | `TEST_COND_WARN_MSG` | Same as above, prints a rationale.                                                          |\r\n\r\nNote that `TEST_COND` and `TEST_FAIL_COND` are already used locally in [ClassDB tests](https://github.com/godotengine/godot/blob/master/tests/test_class_db.h#L45-L48), for instance.\r\n\r\n## [Logging](https://github.com/onqtam/doctest/blob/master/doc/markdown/logging.md)\r\n\r\n| doctest              | Godot                | Description                                           |\r\n| -------------------- | -------------------- | ----------------------------------------------------- |\r\n| `DOCTEST_MESSAGE`    | `TEST_MSG`           | Print a message.                                      |\r\n| `DOCTEST_FAIL_CHECK` | `TEST_FAIL_CONTINUE` | Mark the test as failing, but continue the execution. Can be wrapped in conditionals for complex checks. |\r\n| `DOCTEST_FAIL`       | `TEST_FAIL`          | Fail the test immediately. Can be wrapped in conditionals for complex checks.                            |\r\n\r\nI'd like to refactor all existing macros usages once we reach a consensus.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nC++ developers can still choose to use their own macros however they see it, or continue using doctest macros.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHave to modify `tests/test_macros.h`.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1387",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1387/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1387/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1387/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1387",
    "id": 681533837,
    "node_id": "MDU6SXNzdWU2ODE1MzM4Mzc=",
    "number": 1387,
    "title": "Add a way to differentiate Left and Right Shift, Alt, and Control keys",
    "user": {
      "login": "krscott",
      "id": 823324,
      "node_id": "MDQ6VXNlcjgyMzMyNA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/823324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/krscott",
      "html_url": "https://github.com/krscott",
      "followers_url": "https://api.github.com/users/krscott/followers",
      "following_url": "https://api.github.com/users/krscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/krscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/krscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/krscott/subscriptions",
      "organizations_url": "https://api.github.com/users/krscott/orgs",
      "repos_url": "https://api.github.com/users/krscott/repos",
      "events_url": "https://api.github.com/users/krscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/krscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-19T04:18:34Z",
    "updated_at": "2020-08-20T12:35:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA pinball-style game with left and right flippers.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like the option of using the left and right Shift keys as left and right paddles for users with tenkeyless or shorter keyboards, however, the Input Map treats these keys both as \"Shift\", and the `InputEventKey` `scancode` is `16777237` for both keys.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf there was a way to differentiate left and right Shift keys, it would be possible to use these keys for separate functions.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI can imagine two ways to solve this issue:\r\n1. Add `KEY_RIGHT_SHIFT`, `KEY_RIGHT_ALT`, `KEY_RIGHT_CONTROL` to the KeyList enum.\r\n\r\n```\r\nfunc _input(ev):\r\n  if ev is InputEventKey:\r\n    match ev.scancode:\r\n      KEY_SHIFT:\r\n        print(\"left shift\")\r\n      KEY_RIGHT_SHIFT:\r\n        print(\"right shift\")\r\n```\r\n\r\n2. Add a `location` field to `InputEventKey` with a new enum for left/right. This would preserve the current functionality of `KEY_SHIFT`, etc., but probably would require more changes to get working with the Input Map menu.\r\n```\r\nfunc _input(ev):\r\n  if ev is InputEventKey and ev.scancode == KEY_SHIFT:\r\n    match ev.location:\r\n      MULTIKEY_LOCATION_LEFT:\r\n        print(\"left shift\")\r\n      MULTIKEY_LOCATION_RIGHT:\r\n        print(\"right shift\")\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not aware of any possible way to work around this issue in GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature would require adding to the GlobalScope KeyList enum or adding an enum to InputEventKey.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1387/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1386",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1386/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1386/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1386/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1386",
    "id": 680975968,
    "node_id": "MDU6SXNzdWU2ODA5NzU5Njg=",
    "number": 1386,
    "title": "Imports: replace MD5 with a modern hash algorithm",
    "user": {
      "login": "snoopdouglas",
      "id": 4892574,
      "node_id": "MDQ6VXNlcjQ4OTI1NzQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4892574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/snoopdouglas",
      "html_url": "https://github.com/snoopdouglas",
      "followers_url": "https://api.github.com/users/snoopdouglas/followers",
      "following_url": "https://api.github.com/users/snoopdouglas/following{/other_user}",
      "gists_url": "https://api.github.com/users/snoopdouglas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/snoopdouglas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/snoopdouglas/subscriptions",
      "organizations_url": "https://api.github.com/users/snoopdouglas/orgs",
      "repos_url": "https://api.github.com/users/snoopdouglas/repos",
      "events_url": "https://api.github.com/users/snoopdouglas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/snoopdouglas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-18T11:46:26Z",
    "updated_at": "2020-08-18T17:23:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nn/a\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMD5 is an old boi at this point and I propose something newer might be better. [It also has known collision attacks](https://www.kb.cert.org/vuls/id/836068), but speed is more important in this context, as collisions are unlikely to affect assets.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nUse a faster algorithm. Better cryptographic strength would be a bonus.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI'm personally unsure where/how this would be implemented, but as far as the user is concerned, a few names would change:\r\n\r\n* Hash metadata in `.import/` would have some other extension (rather than `.md5`).\r\n* In the metadata, `source_md5` and `dest_md5`'s names would probably change.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't believe GDScript can hook into the importer this way.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAsset imports are necessary for almost any game.\r\n\r\n---\r\n\r\nnb. this GIP was initially integrity-focused. I agree with @Calinou's comments (below) so have edited it for an emphasis on speed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1385",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1385/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1385/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1385/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1385",
    "id": 680793873,
    "node_id": "MDU6SXNzdWU2ODA3OTM4NzM=",
    "number": 1385,
    "title": "A means of viewing (collision) layer and mask bit fields in one place for all nodes",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-18T08:15:14Z",
    "updated_at": "2020-08-18T12:33:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nKeeping track of collision masks and layers\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe Group dialog can be accessed in the groups tab and you can visualise which nodes belong to which group, as shown below.\r\n\r\nHowever, more complex than groups and used much more often (groups are a passing fad ;) ), although different, are collision layers and masks. Yet they share a common purpose of tracking interactions. Why not provide a similar thing because when you have 6 or 7 layers with tens of nodes, it's hard to track. Not a means of modifying, simply a means of getting from one place all the nodes and where they are used.\r\n\r\n![image](https://user-images.githubusercontent.com/12863685/90487618-9ef9b200-e132-11ea-8a35-92ba48e594a9.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would enhance the usability and understanding of collision data in godot, helping reduce game bugs at the same time.\r\n\r\nI presume this could easily be extended to the other bit based mask fields such as the lighting or render layers...",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1385/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1384",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1384/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1384/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1384/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1384",
    "id": 680699561,
    "node_id": "MDU6SXNzdWU2ODA2OTk1NjE=",
    "number": 1384,
    "title": "Simplify the PhysicsBodies interface and its methods",
    "user": {
      "login": "madmiraal",
      "id": 9253928,
      "node_id": "MDQ6VXNlcjkyNTM5Mjg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9253928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madmiraal",
      "html_url": "https://github.com/madmiraal",
      "followers_url": "https://api.github.com/users/madmiraal/followers",
      "following_url": "https://api.github.com/users/madmiraal/following{/other_user}",
      "gists_url": "https://api.github.com/users/madmiraal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madmiraal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madmiraal/subscriptions",
      "organizations_url": "https://api.github.com/users/madmiraal/orgs",
      "repos_url": "https://api.github.com/users/madmiraal/repos",
      "events_url": "https://api.github.com/users/madmiraal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madmiraal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 21,
    "created_at": "2020-08-18T05:18:28Z",
    "updated_at": "2020-12-04T17:05:29Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny game that uses `PhysicsBodies`.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, Godot has three types of `PhysicsBody`: `RigidBody`, `KinematicBody` and `StaticBody`. `RigidBody` also has four modes: `Rigid`, `Character`, `Kinematic` and `Static`. Not only is this confusing, but there are functions available in `KinematicBody` that are not available to a `RigidBody` and visa versa. Furthermore, functions like `KinematicBody's` `move_and_slide()` have lots of parameters that can be confusing and don't always do what is expected (most notably `stop_on_slope`).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA `KinematicBody` is just a `RigidBody` with infinite mass (or zero inverse mass). A `StaticBody` is just a `KinematicBody` with zero (or constant) velocity. The same way a `RigidBody` in `Character` mode doesn't rotate (because it effectively has infinite rotational inertia, or zero inverse rotational inertia). Furthermore, sliding and snapping are really just `PhysicsMaterial` properties, and `stop_on_slope` can be programmed in to work as expected.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA `RigidBody` already has the modes needed, so we just need to make the functions that are available to `KinematicBody` available to a `RigidBody` (in `Kinematic` mode). At the same time, since all of the parameters to the `move_and_collide()`, `move_and_slide()` and `move_and_slide_with_snap()` can be made properties of the `PhysicsBody`, the `PhysicsMaterial`, or, in the case of the `up_direction` and `floor_max_angle`, the `Space` or `Area`. These methods can then be removed, because they will no longer be needed.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, this will actually simplify scripts.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a change to how core physics works.\r\n\r\nFinally, its worth noting that these changes should make implementing some of the other proposals (e.g. #236, #364, #628, #667 #740) easier.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1384/reactions",
      "total_count": 30,
      "+1": 16,
      "-1": 10,
      "laugh": 0,
      "hooray": 0,
      "confused": 4,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1383",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1383/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1383/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1383/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1383",
    "id": 680483276,
    "node_id": "MDU6SXNzdWU2ODA0ODMyNzY=",
    "number": 1383,
    "title": "Narrowing conversion from float to int must be reported as a warning",
    "user": {
      "login": "Vivraan",
      "id": 12777564,
      "node_id": "MDQ6VXNlcjEyNzc3NTY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12777564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vivraan",
      "html_url": "https://github.com/Vivraan",
      "followers_url": "https://api.github.com/users/Vivraan/followers",
      "following_url": "https://api.github.com/users/Vivraan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vivraan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vivraan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vivraan/subscriptions",
      "organizations_url": "https://api.github.com/users/Vivraan/orgs",
      "repos_url": "https://api.github.com/users/Vivraan/repos",
      "events_url": "https://api.github.com/users/Vivraan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vivraan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 4,
    "created_at": "2020-08-17T19:44:42Z",
    "updated_at": "2020-11-13T20:38:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nProposal is valid anywhere.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I statically typed a var as an int, and accidentally forgot that it was supposed to be a float, it always silently floored (0.25 to 0, say), so a resulting float times int multiplication was always evaluating to zero.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWarn when assigning a float to an int about lossy conversion.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA static check to see if the resulting rhs is equal to its own floor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUsing dynamic typing skirts around this, but breaks consistency. Plugins would make it opaque, where it is required to be implicit.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is supposed to be a chage in the core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1382",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1382/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1382/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1382/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1382",
    "id": 679951727,
    "node_id": "MDU6SXNzdWU2Nzk5NTE3Mjc=",
    "number": 1382,
    "title": "Improve post-process color correction by supporting 3D LUTs instead of a single Gradient",
    "user": {
      "login": "UnknownS1024",
      "id": 17591539,
      "node_id": "MDQ6VXNlcjE3NTkxNTM5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17591539?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UnknownS1024",
      "html_url": "https://github.com/UnknownS1024",
      "followers_url": "https://api.github.com/users/UnknownS1024/followers",
      "following_url": "https://api.github.com/users/UnknownS1024/following{/other_user}",
      "gists_url": "https://api.github.com/users/UnknownS1024/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UnknownS1024/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UnknownS1024/subscriptions",
      "organizations_url": "https://api.github.com/users/UnknownS1024/orgs",
      "repos_url": "https://api.github.com/users/UnknownS1024/repos",
      "events_url": "https://api.github.com/users/UnknownS1024/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UnknownS1024/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-17T05:44:09Z",
    "updated_at": "2020-11-12T10:52:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nGodot Editor, I will decide to work on ARPG 3D (low poly)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot need to improve post process (LUTs) for Color Grading very helpful\r\n\r\nArea Post Process Box example hit inside color change other different colors\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\ndescription here\r\n![image](https://user-images.githubusercontent.com/17591539/90359103-a5b7f480-e060-11ea-9a32-b6ad19851811.png)\r\n\r\nhttps://docs.unrealengine.com/en-US/Engine/Rendering/PostProcessEffects/UsingLUTs/index.html\r\n\r\nexample screenshot to the left or to the right the color is different depends on customize for the designer\r\n![image](https://user-images.githubusercontent.com/17591539/90359646-24616180-e062-11ea-9d40-dfe31db74155.png)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n.......\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n.......\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPost Process is very useful for realistic graphic games, if without it it would be very bad, this is for 3D AAA studio games (of course the core)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1382/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1381",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1381/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1381/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1381/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1381",
    "id": 679898263,
    "node_id": "MDU6SXNzdWU2Nzk4OTgyNjM=",
    "number": 1381,
    "title": "Improve object duplication shortcuts in the editor",
    "user": {
      "login": "MHillier98",
      "id": 26564949,
      "node_id": "MDQ6VXNlcjI2NTY0OTQ5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/26564949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MHillier98",
      "html_url": "https://github.com/MHillier98",
      "followers_url": "https://api.github.com/users/MHillier98/followers",
      "following_url": "https://api.github.com/users/MHillier98/following{/other_user}",
      "gists_url": "https://api.github.com/users/MHillier98/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MHillier98/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MHillier98/subscriptions",
      "organizations_url": "https://api.github.com/users/MHillier98/orgs",
      "repos_url": "https://api.github.com/users/MHillier98/repos",
      "events_url": "https://api.github.com/users/MHillier98/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MHillier98/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-17T03:01:40Z",
    "updated_at": "2020-08-17T10:19:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm currently working on a [Settlers of Catan](https://www.catan.com/game/catan) recreation, and learning what I can do in 3D with Godot.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAfter working with Unreal and the Source 2 Hammer tools, I'm finding myself wishing that there was a faster way to duplicate objects, as using the shortcuts `Ctrl+C, Ctrl+V` or even `Ctrl+D` can be a little slow (though `Ctrl+D` isn't terrible).\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn UE4 and S2 Hammer, there are shortcuts that allow you to hold Alt (UE4), or Shift (S2) and drag the object's gizmo to duplicate it. This is an extremely helpful workflow optimisation for working in 3D and it helps to reduce how long it takes to build a 3D scene.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nHere are two timestamped videos that show how this feature works in UE4 and S2 Hammer:\r\nhttps://youtu.be/qqDNOqJesAQ?t=19\r\nhttps://youtu.be/tQcw1DjMj7w?t=42\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis feature seems like it would have to be a core improvement to the tools themselves.\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWith the upcoming improvements to Godot's 3D capabilities in 4.0, this feature would help onboard new 3D users from other programs, as well as help everyone who is using Godot for 3D scenes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1381/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1380",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1380/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1380/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1380/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1380",
    "id": 679841837,
    "node_id": "MDU6SXNzdWU2Nzk4NDE4Mzc=",
    "number": 1380,
    "title": "Add a node to exclude specific areas from being affected by GI",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-16T22:46:25Z",
    "updated_at": "2020-08-16T22:47:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Note: This proposal was discussed with reduz and is likely feasible to implement.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGIProbe can exhibit leaks when used in levels with thin walls. It's sometimes possible to adjust the level to make leaks less noticeable, but not always.\r\n\r\nIn the `master` branch, it's possible to enable anisotropy to reduce leaks at the cost of performance. However, not everyone is able to pay this performance cost.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTo avoid leaks, an alternative method can be used. It requires some manual work but should have (nearly) no performance cost at runtime, unlike enabling anisotropy in GIProbe.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd a \"NoGIArea\" node that defines an AABB (or an arbitrarily shaped area) that will not receive indirect lighting. This node can be placed by the artist/level designer to make leaks less noticeable. As usual, editor gizmos should be added to make this node easy to configure.\r\n\r\nWe may want to require this node to be a child of the GIProbe node. It may be easier to implement this way, especially when multiple GIProbe nodes are in use.\r\n\r\nI'm not sure how reflections should be handled though.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core renderer functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core renderer functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1380/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1379",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1379/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1379/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1379/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1379",
    "id": 679781379,
    "node_id": "MDU6SXNzdWU2Nzk3ODEzNzk=",
    "number": 1379,
    "title": "Add built-in terminal to editor's bottom panel",
    "user": {
      "login": "neqs20",
      "id": 38013155,
      "node_id": "MDQ6VXNlcjM4MDEzMTU1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/38013155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neqs20",
      "html_url": "https://github.com/neqs20",
      "followers_url": "https://api.github.com/users/neqs20/followers",
      "following_url": "https://api.github.com/users/neqs20/following{/other_user}",
      "gists_url": "https://api.github.com/users/neqs20/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neqs20/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neqs20/subscriptions",
      "organizations_url": "https://api.github.com/users/neqs20/orgs",
      "repos_url": "https://api.github.com/users/neqs20/repos",
      "events_url": "https://api.github.com/users/neqs20/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neqs20/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-16T16:15:53Z",
    "updated_at": "2020-08-26T14:03:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nGodot Editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen working on your project you usually use a terminal for all kinds of tasks \r\n(e.g. git, searching for files or in my case - compaling GDNative plugin).\r\nThis requires you to switch between multiple windows and that takes a bit of the time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere could be a terminal interface integrated into editor that could save a lot of time. \r\nIt would be similar to the Visual Studio Code one but simpler. Here's a screenshot of it:\r\n![screenshot](https://user-images.githubusercontent.com/38013155/90313615-3500c300-df0e-11ea-983f-9be9fc2deca5.png)\r\n\r\nGodot's terminal would include:\r\n* Commands and programs execution\r\n* A kill button that will instantly stop the process/terminal\r\n* Commonly used shortcuts like: (CTRL+C, CTRL+X)\r\n* System enviroment variables (to make it feel like it's a real terminal)\r\n\r\nWe also need to make sure that it's cross-platform. This feature targets OSX, Linux and Windows platforms.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n\r\nI faced some limitations while imlementing this feature with EditorPlugin:\r\n* Current `OS.execute` implementation spawns new process every time you use it. See Egzample 1\r\n* Having the same control to handle input and output is hard. See Egzample 2\r\n\r\n*Egzample 1*\r\nWhat do I mean by \"spawns new process\"? Take a look at this code:\r\n```\r\nfunc _ready():\r\n    var output = []\r\n    OS.execute(\"cd\", [\"c:/Users/user_name/Desktop/\"])\r\n    # use blocking mode to receive output\r\n    OS.execute(\"some_program.bat\", [], true, output, true)\r\n    print(output)\r\n    \"\"\"\r\n        prints: ['some_program.bat' is not recognized as an internal or external command, operable program or batch file.]\r\n    \"\"\"\r\n```\r\n\r\nEven though I changed directory to Desktop where my batch script resides I can't run it. That's because `OS.execute` doesn't behave like one terminal. Every time we try to run commands one after another we wait for the first one to finish and then read the output. After it's done the process is terminated and then the next `OS.execute` call is run.\r\n\r\nTo fix this we can chain commands together in one `OS.execute` call with a composite command:\r\n```\r\nfunc _ready():\r\n    var output = []\r\n    OS.execute(\"cmd.exe\", [\"/c\", \"c:/users/micha/desktop/ && some_program.bat\"], true, output, true)\r\n    print(output)\r\n    \"\"\"\r\n        prints: ['WELL DONE!']\r\n    \"\"\"\r\n```\r\n\r\nIt's not that straightforward as it seems but pretty doable.\r\n\r\n*Egzample 2*\r\n\r\nTo execute commands terminal needs some sort of input box or input element. It also needs to output information.\r\nTerminals that we use combain those two elements into one:\r\n![Example](https://user-images.githubusercontent.com/38013155/90316734-7a2fef80-df24-11ea-9ddd-7c5d8dbc1e79.png)\r\n\r\nOutput is a part of terminal's text which should never be overwrttien by the user.\r\nInput on the other hand is a part that user needs to control.\r\n\r\nWhen a user issues the command it becomes part of the output.\r\n\r\nI had troubles with that approch so I came up with a simpler design:\r\n\r\n![screenshot](https://user-images.githubusercontent.com/38013155/90313548-befc5c00-df0d-11ea-8542-41ab5b729a2a.png)\r\n\r\nAs you can see the terminal consists of 3 parts:\r\n* The kill button\r\n* Output element (RichTextLabel)\r\n* Input element (LineEdit)\r\n\r\n\r\nNote that it's really simple prototype created with EditorPlugin just to showcase this feature.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI belive many people will use this feature. Definitely can't be worked around with few lines of code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThere are 3 ways to add this:\r\n* As an EditorPlugin (kind of limited)\r\n* As a custom C++ module\r\n* Part of editor's source code\r\n\r\nI think the feature would benefit a lot if it was made as a part of the editor code.\r\n\r\n**Additional information:**\r\n\r\nAll of this was tested in Godot 3.2.3 and Windows 10 version 2004\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1379/reactions",
      "total_count": 9,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1378",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1378/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1378/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1378/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1378",
    "id": 679754631,
    "node_id": "MDU6SXNzdWU2Nzk3NTQ2MzE=",
    "number": 1378,
    "title": "Add `INFO_PRINT()` and `push_info()` for important but \"expected\" messages",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-16T13:27:03Z",
    "updated_at": "2020-10-26T15:24:41Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*See also https://github.com/godotengine/godot-proposals/issues/919.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWe currently have `ERR_PRINT()` and `WARN_PRINT()` macros to print error and warning messages respectively. (These are available as `push_error()` and `push_warning()` in GDScript.)\r\n\r\nHowever, we don't have an equivalent for informational prints that are not errors or warnings. We can use `print()`, but this is typically used for debugging instead.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdd an `info` logging category for messages that are more important than others, but aren't considered errors or warnings.\r\n\r\nThis will also be helpful once we implement filtering messages by category in the editor's Output panel.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nAdd a `INFO_PRINT()` macro in C++ and expose a `push_info()` global scope method in GDScript (and by extension, C#).\r\n\r\nUnlike the warning and error print handlers, the info print handler should *not* print a stack trace to the terminal since the user doesn't *need* to know the message's origin. The message should also not appear in the editor's Errors panel.\r\n\r\nIn the terminal, we can use the `\\e[1m` (bold) ANSI escape code for coloring the message. This makes it easier to dinstinguish from standard `print()`s.\r\n\r\n![image](https://user-images.githubusercontent.com/180032/90335453-727c5380-dfd5-11ea-8e8e-851f1ddf24df.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be implemented by a script, but it's not ideal as we'd prefer to have a standard way of reporting informational messages.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1378/reactions",
      "total_count": 14,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1376",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1376/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1376/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1376/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1376",
    "id": 679685838,
    "node_id": "MDU6SXNzdWU2Nzk2ODU4Mzg=",
    "number": 1376,
    "title": "Change all the `Disabled` boolean properties to `Enabled`, or `Negative` boolean to `Positive` form",
    "user": {
      "login": "sooonism",
      "id": 2647094,
      "node_id": "MDQ6VXNlcjI2NDcwOTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2647094?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sooonism",
      "html_url": "https://github.com/sooonism",
      "followers_url": "https://api.github.com/users/sooonism/followers",
      "following_url": "https://api.github.com/users/sooonism/following{/other_user}",
      "gists_url": "https://api.github.com/users/sooonism/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sooonism/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sooonism/subscriptions",
      "organizations_url": "https://api.github.com/users/sooonism/orgs",
      "repos_url": "https://api.github.com/users/sooonism/repos",
      "events_url": "https://api.github.com/users/sooonism/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sooonism/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-16T04:24:18Z",
    "updated_at": "2020-08-16T13:05:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on my own Level Editor that used a lots of Node2D and Control. This job required me to use code to switch On and Off the functions or visibility of the interface like buttons and panels.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI realised for most of the Control node, it used `Disabled` boolean variable for user to switch on and off the function.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen working with many Control nodes, it become challenging to wrap your head around the double negative scenario.\r\nExample, I have a Toggle_Button to turn on/off the edit mode, I want the rest of the buttons enabled, so I have to set their `Disabled` to `true`, and vice versa.\r\nIt become quickly very hard and time consuming to do that when the interfaces become more complex\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI would suggest changing all the `Negative` boolean like `Disabled`, `Deactivated`, ... to `Positive` (`Enabled`, `Activated`,...) so that we don't have to pause our logic thinking just to ponder if should its `Disabled` be `false`(Double negative).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nOf course we can work out the double negative situation eventually. But trust me, It will save a lot of debugging time for all the programmer in general.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause most of the current nodes (if not all) already using `Disabled` boolean variable, thus it can't be the add-on.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1376/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1375",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1375/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1375/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1375/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1375",
    "id": 679683438,
    "node_id": "MDU6SXNzdWU2Nzk2ODM0Mzg=",
    "number": 1375,
    "title": "Add a `get_used_cells_by_id()` method to GridMap",
    "user": {
      "login": "TrueSgtMonkey",
      "id": 47369629,
      "node_id": "MDQ6VXNlcjQ3MzY5NjI5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47369629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrueSgtMonkey",
      "html_url": "https://github.com/TrueSgtMonkey",
      "followers_url": "https://api.github.com/users/TrueSgtMonkey/followers",
      "following_url": "https://api.github.com/users/TrueSgtMonkey/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrueSgtMonkey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrueSgtMonkey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrueSgtMonkey/subscriptions",
      "organizations_url": "https://api.github.com/users/TrueSgtMonkey/orgs",
      "repos_url": "https://api.github.com/users/TrueSgtMonkey/repos",
      "events_url": "https://api.github.com/users/TrueSgtMonkey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrueSgtMonkey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-16T04:00:06Z",
    "updated_at": "2020-08-16T13:05:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI have been working with Gridmaps extensively in my FPS I have been working on since Summer started. I recently have begun working on modules and compiling them to add functionality to my game, and I got the idea to add the get_used_cells_by_id function to GridMaps because I think it is an incredibly handy function and use it all over my game. Here is an example:\r\n\r\n```gdscript\r\nvar mouse = get_used_cells_by_id(2)\r\nvar skitter = get_used_cells_by_id(3)\r\nvar testLight = get_used_cells_by_id(4)\r\nvar testLongLight = get_used_cells_by_id(7)\r\nvar meatGoblin = get_used_cells_by_id(8)\r\nvar doors = get_used_cells_by_id(12)\r\nvar spawners = get_used_cells_by_id(13)\r\nvar jetties = get_used_cells_by_id(14)\r\nvar dbRed = get_used_cells_by_id(15)\r\nvar dbGray = get_used_cells_by_id(16)\r\nvar stingers = get_used_cells_by_id(17)\r\nvar partSpawns = get_used_cells_by_id(18)\r\n```\r\n\r\nI store all of these cells in arrays and then I replace them with scenes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWith Gridmaps right now, you cannot use the get_used_cells_by_id like you can in TileMaps. It is strange that this easy of a function is not used in GridMaps as I have just written the function in C++ to work like the TileMap get_used_cells_by_id function works. Without it, I cannot replace cells in my GridMap with instanced scenes and instead have to rely on adding them to the scene tree in my game (which gets messy fast).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nAdding this feature/enhancement would help make GridMaps come a step closer to being as useful as TileMaps are. Also, the get_used_cells_by_id function is incredibly useful as it allows one to replace cells on a GridMap with whatever they wish and nicely store all the cells that are used in Arrays.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI have the C++ code here, and I have already tested it. I got it to work with no hiccups, and tried to write it in the same style as the TileMap function was written:\r\n\r\n```cpp\r\nArray GridMap::get_used_cells_by_id(int p_id) const {\r\n    Array a;\r\n    for(Map<IndexKey, Cell>::Element *E = cell_map.front(); E; E = E->next()) {\r\n        if(E->value().item == p_id) {\r\n            Vector3 p(E->key().x, E->key().y, E->key().z);\r\n            a.push_back(p);\r\n        }\r\n    }\r\n\t\r\n    return a;\r\n}\r\n```\r\n\r\nI can confirm that this works the same way as the get_used_cells_by_id function in TileMaps worked.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around with GDScript. I have already done this in the past. But, I feel as if GridMaps lack features that TileMaps have, and that this would improve 3D development for people who like working with Grids instead of scene trees. It's also incredibly strange that this function is not in the class in the first place.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause it is a basic function that should be added to the GridMap class. If it is in TileMap, then why isn't it in GridMap if someone like me can easily code it in and add this functionality to the GridMap class?\r\n\r\nBy the way, I also edited the GridMap documentation locally on my machine and kept to the same style as the TileMap documentation. I will upload the files I edited here.\r\n[gridmap_changes.zip](https://github.com/godotengine/godot-proposals/files/5079954/gridmap_changes.zip)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1374",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1374/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1374/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1374/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1374",
    "id": 679635572,
    "node_id": "MDU6SXNzdWU2Nzk2MzU1NzI=",
    "number": 1374,
    "title": "Add a volumetric cull mask to lights for volumetric fog",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-15T20:14:55Z",
    "updated_at": "2020-08-16T19:34:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Note: This feature was discussed with reduz. It's probably good to implement if someone finds a way to do it.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWith the [newly-added volumetric fog effect](https://github.com/godotengine/godot/pull/41213), it's not possible to prevent individual lights from contributing to the volumetric fog's color.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nA volumetric cull mask property could be added to prevent individual lights from contributing to the volumetric fog's color.\r\n\r\nIn addition, there should probably be a way to disable fog completely in areas not lit by anything (instead of having a black fog). This way, it can be used purely as a volumetric *lighting* solution, not adding any fog unless desired by the artist.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThere could be a Volumetric Cull Mask property mimicking Light's Cull Mask property. It would only affect volumetric lighting. Direct and indirect lighting would be left unaffected by this mask.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core renderer functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core renderer functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1374/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1373",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1373/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1373/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1373/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1373",
    "id": 679632867,
    "node_id": "MDU6SXNzdWU2Nzk2MzI4Njc=",
    "number": 1373,
    "title": "Expose PhysicsServer's (and Physics2DServer's) `space_step`",
    "user": {
      "login": "ETdoFresh",
      "id": 1261843,
      "node_id": "MDQ6VXNlcjEyNjE4NDM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1261843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ETdoFresh",
      "html_url": "https://github.com/ETdoFresh",
      "followers_url": "https://api.github.com/users/ETdoFresh/followers",
      "following_url": "https://api.github.com/users/ETdoFresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/ETdoFresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ETdoFresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ETdoFresh/subscriptions",
      "organizations_url": "https://api.github.com/users/ETdoFresh/orgs",
      "repos_url": "https://api.github.com/users/ETdoFresh/repos",
      "events_url": "https://api.github.com/users/ETdoFresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ETdoFresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-15T19:54:32Z",
    "updated_at": "2020-11-08T10:52:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am currently working on a lower level client side prediction / server reconciliation clone of asteroids. I saw the demo project on youtube (https://www.youtube.com/watch?v=B02bil7G2S4) of Client side prediction and Server reconciliation in Godot 4.0. I asked the question how this was being done. @AndreaCatania responded back immediately and told me he was using kinematic bodies and space_step. He asked if space_step is not currently exposed, to put in an issue. (This is my first one, so apologies if I'm doing this wrong!)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, I have no way to re-simulate physics via gdscript. I can run physics in realtime, but if I need to do server reconciliation, I do not have access to any _step()_ function.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nExposing a _step()_ function will allow network programmers to re-simulate the world and make corrections as necessary.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n``` gdscript\r\n# Very psuedo! :p\r\nfunc resimulate_step(delta):\r\n    PhysicsServer.space_step(space_rid, delta)\r\n\r\nfunc correct_and_resimulate(corrected_transforms, number_of_steps_to_resimulate):\r\n    correct_all_physics_body_transforms(corrected_transforms)\r\n    for i in range(number_of_steps_to_simulate):\r\n        resimulate_step(fixed_rate)\r\n    apply_correction_to_all_nodes()\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think resimulating physics seems like something that would take many man hours to reproduce if not exposed.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think everyone that has to do some kind of live networking game will need this in their coding toolkit.\r\n\r\nPS - I'm currently working in 3.2. It's be great if this can be exposed here. But if not, I'll definitely make the switch to whichever version has it! :)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1373/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1372",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1372/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1372/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1372/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1372",
    "id": 679631374,
    "node_id": "MDU6SXNzdWU2Nzk2MzEzNzQ=",
    "number": 1372,
    "title": "Add more methods to fill in the gaps and more helper methods in the Animation class",
    "user": {
      "login": "TypeOverride2",
      "id": 69324102,
      "node_id": "MDQ6VXNlcjY5MzI0MTAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/69324102?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TypeOverride2",
      "html_url": "https://github.com/TypeOverride2",
      "followers_url": "https://api.github.com/users/TypeOverride2/followers",
      "following_url": "https://api.github.com/users/TypeOverride2/following{/other_user}",
      "gists_url": "https://api.github.com/users/TypeOverride2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TypeOverride2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TypeOverride2/subscriptions",
      "organizations_url": "https://api.github.com/users/TypeOverride2/orgs",
      "repos_url": "https://api.github.com/users/TypeOverride2/repos",
      "events_url": "https://api.github.com/users/TypeOverride2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TypeOverride2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-15T19:42:15Z",
    "updated_at": "2020-08-16T00:52:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA project where i work with the AnimationPlayer and Animation class in deep\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n- Some methods on Animation class are missing. _**(They were forgotten!)**_\r\n- Some methods on Animation class i want to add to improve it / to easier work with it when doing algorithms via script.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n- It helps because the missing methods are necessary to do stuff with the Animation class. _**(They were forgotten!)**_\r\n- The methods i want to have added are good because when i want to want to add and remove keyframes from the animation via code. Algorithms for cleaning the animation keyframes in a certain way. Or adding keys with certain conditions. _(Making algorithms that manipulate the Animation class)_\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n_**missing methods**_\r\n- there are methods for:\r\n`void value_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const;`\r\n`void method_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const;`\r\n\r\n- but no methods for (i want to have added them):\r\n`void audio_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const;`\r\n`void animation_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const;`\r\n\r\n**_nice to see methods_**\r\n- there is a method:\r\n`int track_find_key(int p_track, float p_time, bool p_exact = false) const;`\r\n\r\n- but i want those methods as well so i can easily find the keys before where he is _track_find_key_ and after he is _track_find_key_:\r\n`int track_find_prev_key(int p_track, float p_time) const;`\r\n_(finds the key that is before the key that it is found by method track_find_key)_\r\n`int track_find_next_key(int p_track, float p_time) const;`\r\n_(finds the key that is after the key that it is found by method track_find_key)_\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n- On the missing methods is no work around! Thats the problem. _**(They were forgotten!)**_\r\n- On the nice to see methods there is a way to use the `track_find_key` method. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n- On the missing methods because they are important to have. They were not implemented.\r\n- On the nice to see methods because i think its more natural to work with when searching for keys. Working with keys. Writing algorithms for Animation key setting and getting via code.\r\n\r\n### _Here are the implementations_\r\n_(its more copy pasted (similar to the already existing ones for value_track / method_track) - methods were testet on Godot 3.2:_\r\n\r\n```\r\nvoid Animation::_audio_track_get_key_indices_in_range(const AudioTrack *at, float from_time, float to_time, List<int> *p_indices) const {\r\n\tif (from_time != length && to_time == length)\r\n\t\tto_time = length * 1.001; //include a little more if at the end\r\n\r\n\tint to = _find(at->values, to_time);\r\n\r\n\tif (to >= 0 && from_time == to_time && at->values[to].time == from_time) {\r\n\t\t//find exact (0 delta), return if found\r\n\t\tp_indices->push_back(to);\r\n\t\treturn;\r\n\t}\r\n\t// can't really send the events == time, will be sent in the next frame.\r\n\t// if event>=len then it will probably never be requested by the anim player.\r\n\r\n\tif (to >= 0 && at->values[to].time >= to_time)\r\n\t\tto--;\r\n\r\n\tif (to < 0)\r\n\t\treturn; // not bother\r\n\r\n\tint from = _find(at->values, from_time);\r\n\r\n\t// position in the right first event.+\r\n\tif (from < 0 || at->values[from].time < from_time)\r\n\t\tfrom++;\r\n\r\n\tint max = at->values.size();\r\n\r\n\tfor (int i = from; i <= to; i++) {\r\n\t\tERR_CONTINUE(i < 0 || i >= max); // shouldn't happen\r\n\t\tp_indices->push_back(i);\r\n\t}\r\n}\r\n```\r\n```\r\nvoid Animation::audio_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const {\r\n\tERR_FAIL_INDEX(p_track, tracks.size());\r\n\tTrack *t = tracks[p_track];\r\n\tERR_FAIL_COND(t->type != TYPE_AUDIO);\r\n\r\n\tAudioTrack *at = static_cast<AudioTrack *>(t);\r\n\r\n\tfloat from_time = p_time - p_delta;\r\n\tfloat to_time = p_time;\r\n\r\n\tif (from_time > to_time)\r\n\t\tSWAP(from_time, to_time);\r\n\r\n\tif (loop) {\r\n\t\tfrom_time = Math::fposmod(from_time, length);\r\n\t\tto_time = Math::fposmod(to_time, length);\r\n\r\n\t\tif (from_time > to_time) {\r\n\t\t\t// handle loop by splitting\r\n\t\t\t_audio_track_get_key_indices_in_range(at, from_time, length, p_indices);\r\n\t\t\t_audio_track_get_key_indices_in_range(at, 0, to_time, p_indices);\r\n\t\t\treturn;\r\n\t\t}\r\n\t} else {\r\n\t\tif (from_time < 0)\r\n\t\t\tfrom_time = 0;\r\n\t\tif (from_time > length)\r\n\t\t\tfrom_time = length;\r\n\r\n\t\tif (to_time < 0)\r\n\t\t\tto_time = 0;\r\n\t\tif (to_time > length)\r\n\t\t\tto_time = length;\r\n\t}\r\n\r\n\t_audio_track_get_key_indices_in_range(at, from_time, to_time, p_indices);\r\n}\r\n```\r\nAnd the binding:\r\n```\r\nClassDB::bind_method(D_METHOD(\"audio_track_get_key_indices\", \"idx\", \"time_sec\", \"delta\"), &Animation::_audio_track_get_key_indices);\r\n```\r\n\r\n```\r\nvoid Animation::_animation_track_get_key_indices_in_range(const AnimationTrack *vt, float from_time, float to_time, List<int> *p_indices) const {\r\n\tif (from_time != length && to_time == length)\r\n\t\tto_time = length * 1.001; //include a little more if at the end\r\n\r\n\tint to = _find(vt->values, to_time);\r\n\r\n\tif (to >= 0 && from_time == to_time && vt->values[to].time == from_time) {\r\n\t\t//find exact (0 delta), return if found\r\n\t\tp_indices->push_back(to);\r\n\t\treturn;\r\n\t}\r\n\t// can't really send the events == time, will be sent in the next frame.\r\n\t// if event>=len then it will probably never be requested by the anim player.\r\n\r\n\tif (to >= 0 && vt->values[to].time >= to_time)\r\n\t\tto--;\r\n\r\n\tif (to < 0)\r\n\t\treturn; // not bother\r\n\r\n\tint from = _find(vt->values, from_time);\r\n\r\n\t// position in the right first event.+\r\n\tif (from < 0 || vt->values[from].time < from_time)\r\n\t\tfrom++;\r\n\r\n\tint max = vt->values.size();\r\n\r\n\tfor (int i = from; i <= to; i++) {\r\n\t\tERR_CONTINUE(i < 0 || i >= max); // shouldn't happen\r\n\t\tp_indices->push_back(i);\r\n\t}\r\n}\r\n```\r\n```\r\nvoid Animation::animation_track_get_key_indices(int p_track, float p_time, float p_delta, List<int> *p_indices) const {\r\n\tERR_FAIL_INDEX(p_track, tracks.size());\r\n\tTrack *t = tracks[p_track];\r\n\tERR_FAIL_COND(t->type != TYPE_ANIMATION);\r\n\r\n\tAnimationTrack *vt = static_cast<AnimationTrack *>(t);\r\n\r\n\tfloat from_time = p_time - p_delta;\r\n\tfloat to_time = p_time;\r\n\r\n\tif (from_time > to_time)\r\n\t\tSWAP(from_time, to_time);\r\n\r\n\tif (loop) {\r\n\r\n\t\tfrom_time = Math::fposmod(from_time, length);\r\n\t\tto_time = Math::fposmod(to_time, length);\r\n\r\n\t\tif (from_time > to_time) {\r\n\t\t\t// handle loop by splitting\r\n\t\t\t_animation_track_get_key_indices_in_range(vt, from_time, length, p_indices);\r\n\t\t\t_animation_track_get_key_indices_in_range(vt, 0, to_time, p_indices);\r\n\t\t\treturn;\r\n\t\t}\r\n\t} else {\r\n\t\tif (from_time < 0)\r\n\t\t\tfrom_time = 0;\r\n\t\tif (from_time > length)\r\n\t\t\tfrom_time = length;\r\n\r\n\t\tif (to_time < 0)\r\n\t\t\tto_time = 0;\r\n\t\tif (to_time > length)\r\n\t\t\tto_time = length;\r\n\t}\r\n\r\n\t_animation_track_get_key_indices_in_range(vt, from_time, to_time, p_indices);\r\n}\r\n```\r\nAnd the binding:\r\n```\r\nClassDB::bind_method(D_METHOD(\"animation_track_get_key_indices\", \"idx\", \"time_sec\", \"delta\"), &Animation::_animation_track_get_key_indices);\r\n```\r\nThe others methods i love to see:\r\n```\r\nint Animation::track_find_prev_key(int p_track, float p_time) const {\r\n\tERR_FAIL_INDEX_V(p_track, tracks.size(), -1);\r\n\r\n\tint prev_idx = track_find_key(p_track, p_time, false) - 1;\r\n\tif (prev_idx < 0) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\treturn prev_idx;\r\n}\r\n```\r\nAnd the binding:\r\n```\r\nClassDB::bind_method(D_METHOD(\"track_find_prev_key\", \"idx\", \"time\"), &Animation::track_find_prev_key);\r\n```\r\n\r\n```\r\nint Animation::track_find_next_key(int p_track, float p_time) const {\r\n\tERR_FAIL_INDEX_V(p_track, tracks.size(), -1);\r\n\r\n\tint next_idx = track_find_key(p_track, p_time, false);\r\n\tif (next_idx < 0) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tnext_idx = next_idx + 1;\r\n\r\n\tTrack *t = tracks[p_track];\r\n\tswitch (t->type) {\r\n\t\tcase TYPE_TRANSFORM: {\r\n\t\t\tTransformTrack *tt = static_cast<TransformTrack *>(t);\r\n\t\t\tif (next_idx >= tt->transforms.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t\tcase TYPE_VALUE: {\r\n\r\n\t\t\tValueTrack *vt = static_cast<ValueTrack *>(t);\r\n\t\t\tif (next_idx >= vt->values.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t\tcase TYPE_METHOD: {\r\n\r\n\t\t\tMethodTrack *mt = static_cast<MethodTrack *>(t);\r\n\t\t\tif (next_idx >= mt->methods.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t\tcase TYPE_BEZIER: {\r\n\r\n\t\t\tBezierTrack *bt = static_cast<BezierTrack *>(t);\r\n\t\t\tif (next_idx >= bt->values.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t\tcase TYPE_AUDIO: {\r\n\r\n\t\t\tAudioTrack *at = static_cast<AudioTrack *>(t);\r\n\t\t\tif (next_idx >= at->values.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t\tcase TYPE_ANIMATION: {\r\n\r\n\t\t\tAnimationTrack *at = static_cast<AnimationTrack *>(t);\r\n\t\t\tif (next_idx >= at->values.size()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t} break;\r\n\t}\r\n\r\n\treturn next_idx;\r\n}\r\n```\r\nAnd the binding:\r\n```\r\nClassDB::bind_method(D_METHOD(\"track_find_next_key\", \"idx\", \"time\"), &Animation::track_find_next_key);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1372/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1371",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1371/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1371/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1371/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1371",
    "id": 679584733,
    "node_id": "MDU6SXNzdWU2Nzk1ODQ3MzM=",
    "number": 1371,
    "title": "Don't constrain the 3D editor camera to a pitch angle of -90..90 degrees",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-15T14:35:41Z",
    "updated_at": "2020-08-15T15:40:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "*Note: I'm not 100% convinced doing this is a good idea. This is why I'm opening a proposal about it here, to see whether this behavior should actually be changed or left as-is.*\r\n\r\n**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMany 3D editors such as Blender don't constrain the pitch angle when orbiting or using freelook mode. I wonder if the Godot editor should do the same.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nWe can change the editor code to remove the 3D editor camera's pitch angle constraint.\r\n\r\n*Advantages:*\r\n\r\n- Selecting 3D nodes that are above/below you becomes easier.\r\n- Previewing 3D scenes for correct appearance becomes easier.\r\n- This makes the camera behavior more consistent with Blender.\r\n\r\n*Disadvantages:*\r\n\r\n- It's easier to get disoriented since the camera can end up upside-down.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nRemove [this line](https://github.com/godotengine/godot/blob/4ee779e6d307d60c8f38c0927f0e951b95eb0481/editor/plugins/node_3d_editor_plugin.cpp#L2141) and its equivalent in the pan code. Make sure input works as expected when the camera is upside down â€“Â the X axis should probably be inverted automatically when the pitch angle isn't between -90 and 90 degrees.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is core editor functionality.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is core editor functionality.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1371/reactions",
      "total_count": 4,
      "+1": 2,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1370",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1370/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1370/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1370/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1370",
    "id": 679578159,
    "node_id": "MDU6SXNzdWU2Nzk1NzgxNTk=",
    "number": 1370,
    "title": "Expose Collision Penetration_Depth",
    "user": {
      "login": "19PHOBOSS98",
      "id": 37253663,
      "node_id": "MDQ6VXNlcjM3MjUzNjYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/37253663?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/19PHOBOSS98",
      "html_url": "https://github.com/19PHOBOSS98",
      "followers_url": "https://api.github.com/users/19PHOBOSS98/followers",
      "following_url": "https://api.github.com/users/19PHOBOSS98/following{/other_user}",
      "gists_url": "https://api.github.com/users/19PHOBOSS98/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/19PHOBOSS98/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/19PHOBOSS98/subscriptions",
      "organizations_url": "https://api.github.com/users/19PHOBOSS98/orgs",
      "repos_url": "https://api.github.com/users/19PHOBOSS98/repos",
      "events_url": "https://api.github.com/users/19PHOBOSS98/events{/privacy}",
      "received_events_url": "https://api.github.com/users/19PHOBOSS98/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-15T13:49:50Z",
    "updated_at": "2020-08-15T13:55:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA portal system to accommodate large composite physics bodies\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy system involves 2 identical rigidbodies as the portal travelling agent, the original and its duplicate. \r\nAs the original would pass half way thru the first portal it's duplicate mimics it's movement on the other portal giving the illusion of being its other half. If anything interacts with either one (walls, bullets etc.) they would move in sync as one object.\r\n\r\nI did it by having the duplicant pool its collision parameters(collision_bodies,_normals,_position) to its original, having it recalculate and add the duplicants collision response to itself as if it was its own. The duplicant is forced to mimic its original by global_transform manipulation (I know, its taboo but it works better than manipulating velocities and somehow it even detects KinematicBodies better by doing this). \r\n\r\nI got the collision response to work (static2rigid & rigid2rigid) but I have a hard time implementing [positional correction](https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-basics-and-impulse-resolution--gamedev-6331)(to stop stuff from sinking into stuff). To do that i need to recalculate each of the bodies [\"manifolds\"](https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-basics-and-impulse-resolution--gamedev-6331) to get the penetration_depth which is a pain since the engine already calculated it when it calculated the collision normal. \r\n\r\nif I had to, I'd have to dig thru the colliding bodies to find their aabbs and calculate the penetration depth from there, and that'll work right, only if it collides with a box (my game involves more complex shapes than that).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be easier to write custom physics if the penetration_depth was exposed. The code wouldn't have to dig thru collision shapes and body states twice each physics frame just for a single float value.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\njust like how collision normal is: \"get_contact_local_normal()\"\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around, but the script has to consider the object's shapes and also offsets. Besides, the engine already calculate this for the Physics to run.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe fact that the engine is already doing the calculation is the reason that this feature should be in the core and not as an add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1369",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1369/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1369/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1369/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1369",
    "id": 679531853,
    "node_id": "MDU6SXNzdWU2Nzk1MzE4NTM=",
    "number": 1369,
    "title": "Make a Timer node that makes a TRUE-FALSE boolean timer . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-15T09:15:34Z",
    "updated_at": "2020-09-13T14:51:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTomb Raider game, atm . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I want to make a simple timer node, that is true for instance, every second, then false for the rest of the time, so use with IF condition statements, the current timer doesn't really work, that well . . I have to create a signal, and it seems weird, basically the signal ' runs ' on every frame it's true, ie. every 1 second, and then is silent, at other times . . Many nodes have attached methods, like AnimationPlayer has play(string), playbackwards(string), so on . . I was wondering if we couldn't have a method under Timer nodes, that was TRUE when it fired, and false at all other time . . So, it print . .\r\n\r\nTRUE\r\nFALSE\r\nFALSE\r\nSo on . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI find Timer nodes very unintuitive for beginners, maybe there could be added some sort of more easily managed BOOL value, that worked like above, atm I have to make some weird code, seems pretty obvious it should be built-in, for beginners working with signals is somewhat later, would be nice if there was a method, under the Timer node, or function, that just did that, like you'd expect a timer, to work, not sure . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust add a boolean to timers, as a property, or variable that output true on timer run-out, for instance, every 1 second, and false on all others, I think this could be built-in, as most beginners would find that easier to work with, and having that, wouldn't really bloat the engine . . I'm still confused by signals, and ' how ' to connect it, to logic, in bigger scripts, to for instance something in _physicsprocess, anyway, it's a suggestion, for beginners, and making a more user-friendly timer node, thank you . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can worked around, had to make another node, attach a script, send the signal there, and make some weird IF timer true, set boolean TRUE, and set wait_1_frame, then set to FALSE, repeat . . I just find it strange, it's not the other way around, you get a boolean that's TRUE every second, for 1 second timer, then false, that works really well with IF conditions, for instance, and it's simpler to make elegant code, or such . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think, if it was a method under the Timer node, like a ' variable ', with that property, it'd be much easier, for beginners, in general . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1368",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1368/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1368/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1368/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1368",
    "id": 679142021,
    "node_id": "MDU6SXNzdWU2NzkxNDIwMjE=",
    "number": 1368,
    "title": "Division by zero should return +INF",
    "user": {
      "login": "tavurth",
      "id": 100964,
      "node_id": "MDQ6VXNlcjEwMDk2NA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/100964?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tavurth",
      "html_url": "https://github.com/tavurth",
      "followers_url": "https://api.github.com/users/tavurth/followers",
      "following_url": "https://api.github.com/users/tavurth/following{/other_user}",
      "gists_url": "https://api.github.com/users/tavurth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tavurth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tavurth/subscriptions",
      "organizations_url": "https://api.github.com/users/tavurth/orgs",
      "repos_url": "https://api.github.com/users/tavurth/repos",
      "events_url": "https://api.github.com/users/tavurth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tavurth/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 25,
    "created_at": "2020-08-14T13:02:03Z",
    "updated_at": "2020-08-18T08:50:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI've been building a trading system in Godot, and my code has many mathematical transformations.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm getting a bit tired of crashes whenever I accidentally don't check if I divide by zero or not.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI notice that in JS `1/0` is `Infinity`, and I'd suggest this is a good solution.\r\n\r\nIn python `1/0` is a runtime error, but since most stats systems use `numpy` or `pandas` anyway, they usually take care of this to be `+INF`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\n# Calculate % change from one candle to the next\r\ny_change = (next_candle.c - curr_candle.c) / curr_candle.c\r\n```\r\n\r\nand the following will commonly fail, with an error (Division by zero):\r\n\r\n```\r\ncurr_candle.c / y_change\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n`y_change` is quite commonly `zero`, and so I have to always add an extra check:\r\n\r\n```gdscript\r\ny_change = (next_candle.c - curr_candle.c) / curr_candle.c\r\nif y_change == 0:\r\n    y_change = 0.000000001\r\n````\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a bit frustrating and leads to many errors when I accidentally forget to check this.\r\n\r\nI'd be interested in hearing other contributors thoughts, as this lies outside the realm of normal game dev stuff, and perhaps returning `+INF` when we divide by zero is not a great solution for some?\r\n\r\n**Additional**\r\nSubmitted as [bug report](https://github.com/godotengine/godot/issues/41252), redirected to proposal\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1368/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1367",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1367/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1367/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1367/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1367",
    "id": 679114921,
    "node_id": "MDU6SXNzdWU2NzkxMTQ5MjE=",
    "number": 1367,
    "title": "Mesh Based 3D Terrain (Not Height Map Based, Not Noise Based)",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 20,
    "created_at": "2020-08-14T12:10:08Z",
    "updated_at": "2020-08-15T03:05:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\ni'm not sure if i want to give too many details, but having an easy to use terrain editor, which doesn't make me want to shoot myself would be nice\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nthere's a limit to both heightmap and noise based terrain systems, they tend to look very samey, they are too uniform, and both systems don't have as much control, as i'd like them to have, plus there's far more room for all kinds of optimizations when all your terrain is just another 3D mesh, and i also feel like it would make things more intuitive and easier to work with as a whole, just gotta make the user interface for it really good (age of mythology has a really nice, easy to use interface)\r\n\r\nmeshes allow you to have far more detail overall, and it gives the artist far more control, meaning that you can create any kind of game world, and at the same time, it would make the editor easier to use, a heightmap just feels very finnicky to work with in contrast\r\n\r\nheightmaps are, okay for really general terrain, but if you ever wish to do anything more complex, like a cave like system, filled with all kinds of details, underpasses, or just anything really extreme, you are kinda screwed - if you'd like to do some really fancy geometry, or if your level design is non-standard, then you'll have to fight against all the limits of these two systems\r\n\r\ni'd like a system which gives the artist 100% freedom, a system which doesn't force the artist to adapt to the limitations of the heightmap system\r\n\r\nit might also help in games where level streaming is a thing, plus i think a mesh based  system gives people the extra artistic freedom, and i wouldn't be surprised if most games actually ended up running better with it as a whole\r\n\r\nyou could stich multiple meshes togheter, and i'm sure that there are methods to get some nice performance out of it\r\n\r\nheightmaps just kinda suck at, adding really specific details, there are just so many annoying limitations\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nwell i already did above... so this feels redundant....\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nit would just be a really basic plane, with little squares in it i immagine, i'm not sure how a mesh based system would actually work, but it's probably something like this\r\n![mesh base 1](https://user-images.githubusercontent.com/43797325/90247762-f8669600-de3f-11ea-90d1-4a9748f1fbcf.png)\r\n\r\nthe level of detail would, mostly be defined by how big the squares are i immagine, so you could get fancier looking geometry, by making the planes smaller, and so on\r\n![mesh base 2](https://user-images.githubusercontent.com/43797325/90247770-fbfa1d00-de3f-11ea-9a38-07f19ce68602.png)\r\n\r\nthen you'd just have some general tools, which would allow the player to \"paint\" the geometry, or add trees or, make cliffs or, detail it or whatever (i did this in photoshop, i would draw a cliff but, i'd rather not go insane, but you get the idea)\r\n![mesh base 3](https://user-images.githubusercontent.com/43797325/90247773-fe5c7700-de3f-11ea-905f-0ca7e26b1f20.png)\r\n\r\nage of mythology has an example of a really nice and easy to use interface\r\n![](https://i.imgur.com/jOayMYA.png)\r\n![](https://i.imgur.com/8Hc8agR.png)\r\n\r\nif you ever used the Source Engine, this will likely feel very familiar to you already\r\n![](https://i.imgur.com/Rso4PoK.png)\r\n\r\nand yes, i agree, displacements are a nightmare to work with, but ideally we would have a better UI and some nice painting tools like in Age of Mythology, to make it all very pleasant and nice to use, also ideally things wouldn't be as nightmarishly prone to corrupt as the Source Engine is keen to, but that engine is mostly taped togheter with glue and black magic, so i wouldn't worry too much about it\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nuh, no, it needs to be fast as hell\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nyes, it needs to run REALLY FAST, and gd script is VERY SLOW",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1367/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1366",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1366/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1366/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1366/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1366",
    "id": 678985670,
    "node_id": "MDU6SXNzdWU2Nzg5ODU2NzA=",
    "number": 1366,
    "title": "Create scene inheritance for existing scenes",
    "user": {
      "login": "uapaladin",
      "id": 52129590,
      "node_id": "MDQ6VXNlcjUyMTI5NTkw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/52129590?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/uapaladin",
      "html_url": "https://github.com/uapaladin",
      "followers_url": "https://api.github.com/users/uapaladin/followers",
      "following_url": "https://api.github.com/users/uapaladin/following{/other_user}",
      "gists_url": "https://api.github.com/users/uapaladin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/uapaladin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/uapaladin/subscriptions",
      "organizations_url": "https://api.github.com/users/uapaladin/orgs",
      "repos_url": "https://api.github.com/users/uapaladin/repos",
      "events_url": "https://api.github.com/users/uapaladin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/uapaladin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-14T08:13:55Z",
    "updated_at": "2020-08-14T22:30:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\nI would like to have the option of making already existing scenes inherit from other scenes, either breaking up their current inheritance, or create one.\r\n\r\nPlease also see this issue where it was previously discussed:\r\n[Issue 30024](https://github.com/godotengine/godot/issues/30024)\r\n\r\n**Describe the project you are working on:**\r\nI'm working on a 2D strategy game with many types of scenes with accompanying scripts, and most of them inherit from each other.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen needing to re-design/rework some class to inherit from a new intermediate class, there's not an option in the menu for this. There's an option 'New Inherited Scene' in the Scene menu, but this doesn't help. It's for creating new scenes. I need an option which does the same for already existing scenes. Now you will have to do it manually which ends up in having to edit scene files manually in an external text editor.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAn option for changing the inheritance of already existing scenes. When selected, you would point out the new inherited scene and the Godot system would make any necessary alterations in script and scene files. It helps by removing the necessity of manual editing of scene files.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nA new menu option in the right-click menu of scene files, in the FileSystem tab/window. It may have the caption 'Inherit from scene' or similar. When selecting it, you should get a screen/window from which you select the new base scene for the clicked-on scene file. This base scene should already exist. Any current inheritance of the clicked-on scene should switch to the new selected base scene.\r\n\r\nOr alternatively, there could be two options:\r\n1. Inherit from existing scene (in which you select the new base scene as described above)\r\n2. Inherit from new scene (in which a new scene is created and set as the base scene for the one on which the operation is conducted)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. The only workaround involves manually editing scene files.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes. It would mean adding a new option to the menu system, which action concerns basic scene management.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1366/reactions",
      "total_count": 13,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1363",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1363/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1363/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1363/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1363",
    "id": 678741435,
    "node_id": "MDU6SXNzdWU2Nzg3NDE0MzU=",
    "number": 1363,
    "title": "Add a way to draw 1-pixel wide lines that scale with viewport zoom",
    "user": {
      "login": "m6502",
      "id": 1667712,
      "node_id": "MDQ6VXNlcjE2Njc3MTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1667712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m6502",
      "html_url": "https://github.com/m6502",
      "followers_url": "https://api.github.com/users/m6502/followers",
      "following_url": "https://api.github.com/users/m6502/following{/other_user}",
      "gists_url": "https://api.github.com/users/m6502/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m6502/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m6502/subscriptions",
      "organizations_url": "https://api.github.com/users/m6502/orgs",
      "repos_url": "https://api.github.com/users/m6502/repos",
      "events_url": "https://api.github.com/users/m6502/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m6502/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-13T21:21:20Z",
    "updated_at": "2020-08-14T08:49:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n\r\nI'm coding some tools we need for our current project and at one point I needed to draw a rectangle enclosing an area of a sprite.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI set the line width to 1 expecting a thickness of one pixel of the sprite. Instead, the line is literally of 1 pixel width, giving an unexpected result as it wasn't taking into account the amount of zoom the viewport had. Further experimentation showed the problem happened while in game too, not only in the editor viewport. \r\n\r\nI opened an issue but it looks like the bug was already reported (but I missed it when I searched before opening a new one):\r\n\r\nMine: https://github.com/godotengine/godot/issues/41176\r\nOlder: https://github.com/godotengine/godot/issues/19844\r\n\r\nAs the bug was already reported I closed my issue, but as suggested by @pouleyKetchoupp I'm bringing this to the Godot proposals. In my report there are screenshots showing both the bug and the expected result, the first patch I did at the code of Godot and a small Godot project showing the problem (shown in the second set of before-after images).\r\n\r\nThe issue is present both in the 3.x and 4.x branches, and affects Vulkan, GLES2 and GLES3. It is caused by a optimization where the line draw function checks if the width is <= 1 so it can use a simpler approach for speed reasons. As it can be seen in my issue I tried to patch the check and recompile Godot but I was a bit clumsy with the pull requests :-) Also I didn't take into account Vulkan (I'm currently at version 3.2.2).\r\n\r\nThis problem happens when using draw_rect(), etc, as in the end it's the line draw function that is called.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nReading the old issue has been interesting because we all arrived at similar conclusions. Probably not really a good idea to fix for 3.x at this point? But there are use cases both for the correct width and the fixed 1 pixel width, so for the sake of correctness it would be nice to make this work.\r\n\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI propose to change the size check for a constant with a negative value, instead of less or equal than 1. A value of 0 should give a non-visible line. A value of 0.5 should give a line that is half the width of a line 1 pixel thick if the zoom level allows for it. Or have a new draw line function that only draws lines of 1 pixel screen space pixels width.\r\n\r\nI'm quite happy with Godot and plan to contribute when I can, so I would be happy to make a new pull request after we agree on the best way to fix the issue.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can't be worked around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt's a change on \"core\" code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1363/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1362",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1362/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1362/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1362/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1362",
    "id": 678601575,
    "node_id": "MDU6SXNzdWU2Nzg2MDE1NzU=",
    "number": 1362,
    "title": "Add option to import resources using a command line argument",
    "user": {
      "login": "qarmin",
      "id": 41945903,
      "node_id": "MDQ6VXNlcjQxOTQ1OTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41945903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qarmin",
      "html_url": "https://github.com/qarmin",
      "followers_url": "https://api.github.com/users/qarmin/followers",
      "following_url": "https://api.github.com/users/qarmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/qarmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qarmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qarmin/subscriptions",
      "organizations_url": "https://api.github.com/users/qarmin/orgs",
      "repos_url": "https://api.github.com/users/qarmin/repos",
      "events_url": "https://api.github.com/users/qarmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qarmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-13T17:04:34Z",
    "updated_at": "2020-10-24T17:16:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI'm working on PR which import and check project to test PR - https://github.com/godotengine/godot/pull/40994\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can't find(because probably doesn't exists) any flag, that would only import all files(scenes, resources, images etc...)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nNow I use timeout to prevent godot from quiting during importing, which sadly doesn't always work in CI\r\n```\r\ntimeout 25s godot -e\r\n```\r\nbut this isn't also universal solution, because  a lot of projects have a lot of assets which is impossible to measure time which is needed to import all files.\r\n\r\nSo better idea is to add new flag e.g. `--import-only` which would import files and after that just close Godot.\r\nIt would be great if the editor wasn't even running.\r\n```\r\ngodot --import-only\r\n```\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe best if it would work without needing initializing all graphics editor components, but I know that this isn't now possible, because code which imports resources exists in `EditorFileSystem`\r\n\r\nThe easiest way to do this is to save to variable  if user used `--import-only` option and check it in `EditorFileSystem::_notification` inside `NOTIFICATION_EXIT_TREE` if is set, so it may wait until all files will be imported.\r\n\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nLike I wrote, it can be used timeout but it is really really really bad solution for any project greater than 1 image.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be very helpful for all people wanting to integrate their projects into CI",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1362/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1361",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1361/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1361/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1361/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1361",
    "id": 678520513,
    "node_id": "MDU6SXNzdWU2Nzg1MjA1MTM=",
    "number": 1361,
    "title": "Let developer handle some system signals in script",
    "user": {
      "login": "Kobrar",
      "id": 5860567,
      "node_id": "MDQ6VXNlcjU4NjA1Njc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5860567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kobrar",
      "html_url": "https://github.com/Kobrar",
      "followers_url": "https://api.github.com/users/Kobrar/followers",
      "following_url": "https://api.github.com/users/Kobrar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kobrar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kobrar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kobrar/subscriptions",
      "organizations_url": "https://api.github.com/users/Kobrar/orgs",
      "repos_url": "https://api.github.com/users/Kobrar/repos",
      "events_url": "https://api.github.com/users/Kobrar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kobrar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-13T15:17:57Z",
    "updated_at": "2020-08-14T06:24:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nMy company has a custom built hardware that we run a hierarchy of Godot applications as a sort of \"operating system\" on. Its a game machine in simple terms, it has a menu that spawns child game processes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNothing stops child processes from spawning more processes for whatever reason (for instance). That's a problem when the menu wants to terminate the game. The game won't know it should clean up after itself before quitting.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nSome sort of way to handle SIG*** in GDScript would go a long way to solve all kinds of more complex but perfectly valid use cases like this one. Signal handling isn't at all an exotic idea in software developement. Here for instance, as long as I send the application a signal it can handle internally, I could clean up any and all child processes before the application closes.\r\nI have tested on Linux things like kill -1, kill -2, kill -3, kill -15, none of them send notifications to the engine (and it obviously closes).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere are a lot of ways this could work.\r\nOne way could be to have a _system_notification(int SIG_CODE) method in MainLoop class. Something like this would be the most generalized form of the solution.\r\nSimpler solution would be to hook up existing handles like _finalize() or _notification() to some of the signals, but that may be less generalized. Given the already implemented functionality, it may have been intended for NOTIFICATION_WM_QUIT_REQUEST to handle kill signals in particular.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere is no way that I know of. On any SIGINT, SIGHUP, SIGTERM signals the game closes with no way to execute code.\r\nMainLoop._finalize() doesn't run.\r\nObject._notification() doesn't run.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a fairly fundamental problem in software engineering. It also seems some of this kind of functionality is already intended to be a part of the core, like NOTIFICATION_WM_QUIT_REQUEST.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1361/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1360",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1360/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1360/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1360/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1360",
    "id": 678505096,
    "node_id": "MDU6SXNzdWU2Nzg1MDUwOTY=",
    "number": 1360,
    "title": "Ability to make inherited projects",
    "user": {
      "login": "ShawkMusic",
      "id": 48574225,
      "node_id": "MDQ6VXNlcjQ4NTc0MjI1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/48574225?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ShawkMusic",
      "html_url": "https://github.com/ShawkMusic",
      "followers_url": "https://api.github.com/users/ShawkMusic/followers",
      "following_url": "https://api.github.com/users/ShawkMusic/following{/other_user}",
      "gists_url": "https://api.github.com/users/ShawkMusic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ShawkMusic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ShawkMusic/subscriptions",
      "organizations_url": "https://api.github.com/users/ShawkMusic/orgs",
      "repos_url": "https://api.github.com/users/ShawkMusic/repos",
      "events_url": "https://api.github.com/users/ShawkMusic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ShawkMusic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-13T14:57:48Z",
    "updated_at": "2020-11-04T08:32:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis applies to almost every project I've made\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to easily create new projects with pre-chosen elements (like screen resolution, project settings, some premade nodes, etc.) based off another project.\r\nFor example, I could create a personal template for 3D FPS games (with my own settings) so whenever I want to make a 3D FPS game, I can easily just select the 3D FPS template project as a base and start working on the project.\r\nFurthermore, I want to have changes I make to the base project also affect all the projects inheriting from it.\r\nThis can technically already be done now by duplicating the project folder in the OS file explorer and renaming it but it's somewhat clumsy and if I change something from the base project later, the changes won't be reflected on the new one, since it's just a copy and not truly inherited.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen creating a project, add an option to select another project that you want this one to inherit from. This would be like using `extends` on a script or creating an inherited scene, except instead of being between two different scripts or scenes, it would be between two projects. Now I'm not only able to get up and running with a new project faster, but I'm also able to easily make changes to multiple projects by just changing one. It's the same benefits as inherited scenes and `extends` scripts.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis is an example of how different projects could inherit from others:\r\n\r\n- Project 1\r\n-- Feature 1\r\n-- Feature 2\r\n\r\n- Project 2 (inherits from Project 1)\r\n-- Feature 1\r\n-- Feature 2 *(modified)\r\n-- *Feature 3\r\n\r\n- Project 3 (inherits from Project 2)\r\n-- Feature 1\r\n-- Feature 2  *(modified)\r\n-- *Feature 3\r\n-- **Feature 4\r\n\r\n- Project 4 (inherits from Project 2)\r\n-- Feature 1\r\n-- Feature 2 *(modified)\r\n-- *Feature 3 **(modified)\r\n-- **Feature 5\r\n\r\nIf I later decide I want to change a feature (for example, the screen resolution settings or the node configuration) from Project 1, I would want it to reflect on all the projects inheriting from it. With this method, I can just change it and all the projects inheriting it will change along with it.\r\nAs it is now, I would have to manually go through every project and change it, which is extremely inefficient.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm pretty sure this isn't possible with add-ons. Besides, I feel like this is important enough to be useful to everyone, as it's a very fundamental feature that can be helpful to any kind of project.\r\n\r\n---\r\n\r\n**Potential issues that could arrise**\r\n-**Sharing your project with someone else or sending it to another computer would require you to send all the parent projects as well.** This could be fixed by adding a button to export your project as an independent version, which could duplicate all the parent assets as actual files instead of links. \r\n-**Having files, assets and settings that come from other projects could get confusing** This could be fixed by having the inherited assets be greyed out and having any parameters that get changed have a button appear next to it to set it back to being inherited.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1360/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 3,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1359",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1359/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1359/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1359/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1359",
    "id": 678446628,
    "node_id": "MDU6SXNzdWU2Nzg0NDY2Mjg=",
    "number": 1359,
    "title": "Add several themes for how visual script looks to Godot 4.0",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-13T13:41:15Z",
    "updated_at": "2020-08-13T18:01:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use visual script, main focus was to start making simple games, and not spend 6 - 12 months learning code, even though I knew it from before, from 20 years ago, never used it . . I absolutely love visual script, for making games, prototypes, but the current look of the nodes are a bit lacking . . I asked for a major overhaul, but have noticed one can load themes, however none are available, I have tried looking . . Please consider adding some different themes, to visual script in Godot 4.0, another user ( Duriel ) has this AMAZING version, I'd LOVE having that, as an in-built theme option, for visual script, it's just 200 % better, nicer . . .\r\n\r\n![2020-08-12 0707](https://user-images.githubusercontent.com/61069740/90141226-259d4080-dd7b-11ea-82a9-f56bd3d0f292.png)\r\n\r\nIt seems one can already do it, change the look of visual script, I'm just so excited, wanted to ask you add this as soon as possible, just a new theme, for the next Godot 3.2 release, or 4.0, that would be the nicest addition, thank you . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI just want some in-built themes, for visual script, like there is for editor color, or so . . The sooner, the better, tired of waiting, for Godot . . <3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt should just look like the above example, as a theme, nothing more, don't know how one can find those, they're so amazing, wonderful . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't know how, at all . . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's just 200 % better, the example above, thank you . . <3 ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1359/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1358",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1358/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1358/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1358/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1358",
    "id": 678300463,
    "node_id": "MDU6SXNzdWU2NzgzMDA0NjM=",
    "number": 1358,
    "title": "Add stage with testing project in CI to find regressions earlier",
    "user": {
      "login": "qarmin",
      "id": 41945903,
      "node_id": "MDQ6VXNlcjQxOTQ1OTAz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/41945903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qarmin",
      "html_url": "https://github.com/qarmin",
      "followers_url": "https://api.github.com/users/qarmin/followers",
      "following_url": "https://api.github.com/users/qarmin/following{/other_user}",
      "gists_url": "https://api.github.com/users/qarmin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qarmin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qarmin/subscriptions",
      "organizations_url": "https://api.github.com/users/qarmin/orgs",
      "repos_url": "https://api.github.com/users/qarmin/repos",
      "events_url": "https://api.github.com/users/qarmin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qarmin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-08-13T09:39:47Z",
    "updated_at": "2020-11-29T20:17:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI working in Godot 3.2 with 3d project, but due a lot of new features I want to upgrade to Godot 4.0\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nFor now my testing branch with Godot 4.0 is very unstable, because every few days or weeks some parts of engine just stop working or working bad.\r\nI know that is too early to port projects to unstable version of engine, but also some regression I spotted in Godot 3.2.x(smaller of course)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAutomatic running example project with help of address, leak and undefined sanitizers should help to catch more bugs and crashes before merging PR.\r\n\r\nThis will help to find:\r\n- Memory leaks - CI will fail\r\n- Crashes - CI will fail\r\n- Invalid memory read/write - CI will fail\r\n- Undefined code behaviors - they will be printed, but CI may pass\r\n- Errors printed to console - CI may pass\r\n\r\nThis will NOT help to find:\r\n- Invalid logic - like invalid size of object or colors of shader\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI implemented this here - https://github.com/godotengine/godot/pull/40994, but still needs testing and new test project.\r\n\r\nCompiling `release` build is slow due using  `-O3` flag and this needs to be changed if we want faster build times.\r\nhttps://github.com/godotengine/godot/blob/f0b58928eafd2245aaf11649ff213e5f094b8020/platform/linuxbsd/detect.py#L87-L113\r\n\r\nIn this PR:\r\n- Godot and release build are compiled with debug symbols\r\n- Project https://github.com/qarmin/RegressionTestProject/tree/3.2 is downloaded\r\n- Godot editor opens project, import it and close\r\n- Godot tests project by running it\r\n- Project is exported\r\n- Project is running as external app\r\n\r\nThis for now finds 3 bugs which blocks this PR, but in future may find much more.\r\nIt is sadly unavailable in Godot 4.0 since it use Vulkan\r\n\r\nMy test project is too basic and needs to be changed to something more complex, but for now it is enough good to simply test most basics regressions.\r\n\r\nNew project should:\r\n- give easy to reproduction results(no randi or similar function)\r\n- be small(for me max is few MB - current assets size, not all git repository)\r\n- test big amount of nodes and resources(2D, 3D, Shaders, GDScript, Physics etc...)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will be used on every PR, and alternative is to manual testing engine as it is today.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis need be added to build system not core or asset library ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1358/reactions",
      "total_count": 8,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1357",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1357/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1357/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1357/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1357",
    "id": 678199478,
    "node_id": "MDU6SXNzdWU2NzgxOTk0Nzg=",
    "number": 1357,
    "title": "Implement std::initializer_list<T> assignment for Vector<T>",
    "user": {
      "login": "Vivraan",
      "id": 12777564,
      "node_id": "MDQ6VXNlcjEyNzc3NTY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12777564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vivraan",
      "html_url": "https://github.com/Vivraan",
      "followers_url": "https://api.github.com/users/Vivraan/followers",
      "following_url": "https://api.github.com/users/Vivraan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vivraan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vivraan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vivraan/subscriptions",
      "organizations_url": "https://api.github.com/users/Vivraan/orgs",
      "repos_url": "https://api.github.com/users/Vivraan/repos",
      "events_url": "https://api.github.com/users/Vivraan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vivraan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-13T06:52:53Z",
    "updated_at": "2020-08-20T06:56:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nThe engine itself.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot being able to do\r\n```cpp\r\nVector<String> _colors =  {...};\r\n```\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nImplement `std::initializer_list` for `Vector<T>` (and possibly other container types).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nhttps://en.cppreference.com/w/cpp/utility/initializer_list\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMultiple calls of `insert`, or `append` - `append_all` only works for other types of Godot containers.\r\nNone of these work outside a function.\r\nOne could use `std::vector` or other containers but these are not trivially convertible to Godot containers.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is literally a proposal for modifying core collection types.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1357/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1356",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1356/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1356/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1356/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1356",
    "id": 678136261,
    "node_id": "MDU6SXNzdWU2NzgxMzYyNjE=",
    "number": 1356,
    "title": "Make a simple cut-scene editor where one can drag-drop animations, sounds, so on . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-13T04:14:41Z",
    "updated_at": "2020-08-14T22:55:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to have cut-scenes, but right now it takes a lot of custom, written code, or large visual scripts, to do that . . I know Unity has a lot of flaws, but they have a nice feature, where one can place animations, and sounds, in a ' timeline ', or ' Playback Sequencer ', and sort of just trigger them . . I think it would be nice if there was such a thing, to manage cinematics, cut-scenes, or more . .\r\n\r\n![2020-08-13 0605](https://user-images.githubusercontent.com/61069740/90093124-14c4de80-dd2b-11ea-8134-5a69c460ff12.png)\r\n\r\nSo, one can make different animations, for a character, camera-movement, and so on . . Anyway, I thought timeline worked well in Unity, it was simple, drag in animations you needed, set time, total time, so on, when one press play, it all just works, no need to make a massive ( visual script ), and fit the times, all that stuff, also sound . . . Wanted to ask, if such a editor might be a good idea, for Godot, or close . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nHave a special editor, where one can drag animation tracks, and sound tracks ( Track Manager, Track Editor, or so ), and then one can ' move ' a single ' TrackNode ', ' TrackEditorNode ' into Godot, and call ' meta ' - animations, from there . . It makes a lot of sense to make the process visual, anyway, an idea, not sure, if cool . . <3\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nJust take the animations you want to play, at the same time, and place them in layers, so when it's set up, it just plays in sequence, all those animations, complete with sound, animation, camera movement, and effects ( ie. trigger particles, changes in camera settings, post-processing, or more ) . . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure, I have been wanting to make a nice cut-scene, cinematic in Godot, and it's rather confusing, how to even start . . Having a simple, powerful visual editor, where it makes sense, point-click, drag-and-drop, would really help me, get started . . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure, I think it is built into Unity, but I'm not sure, if it's not in Godot already there might be a good reason for it, all it'd have to do was ' play ' the animations, and sounds in sequence, so one could set up a single, linear cinematic, and then be able to store several ones, that one can call, from a meta-code, or visual script box, ' TrackManager ', ' TrackComposer ', or so . . It could make a new place, in the debugger, same way adding an AnimationPlayer, one gets a sort of, well place to add key-frames, same thing, but for cinematics, ie. one can drag animations, sound, camera animations, and effect triggers, and play them, in a simple sequence, with option of having more than one sequence, to make branching animations, or cinematics . .\r\n\r\nThanks . .\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1356/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1354",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1354/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1354/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1354/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1354",
    "id": 677456095,
    "node_id": "MDU6SXNzdWU2Nzc0NTYwOTU=",
    "number": 1354,
    "title": "Make the visual shader in Godot 1-to-1 match (open source) Blender system, add copy-paste . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-12T07:15:38Z",
    "updated_at": "2020-08-13T04:37:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere are so many cool shaders being made, by Blender users, but they don't copy well into Godot . . Maybe Godot could implement the exact same system, or match it closely, so one could copy the many awesome Blender shaders, more easily . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice after watching a Blender tutorial, one could copy paste it, it would give all Godot games a massive visual boost, since there are many cool ones, see here . . .\r\n\r\nhttps://www.reddit.com/r/blender/comments/i7xhk7/tried_making_a_procedural_lava_river/\r\n\r\n![2020-08-12 0913](https://user-images.githubusercontent.com/61069740/89985980-23a08800-dc7c-11ea-9730-3086370de797.gif)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt's not something a beginner can do, but if the two matched better, like Godot has the Disney Principled shader, it would instantly mean all Godot users could find a tutorial, and also use Blender tutorials, giving the engine a massive leap forward, visually, for the community, as well . . . <3\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm a beginner, it's really complicated, to make visual shaders, atm . .\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWhy not, Godot already uses the principled shader, and Blender is open source, it would be a nice work-flow, also to encourage users to use open source software, when using Godot, as well . .\r\n\r\nIt would also lower the need by engine makers, to make documentation, since there'd instantly be many tutorials, for many cool effects, very easily . .\r\n\r\nThanks . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1354/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 6,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1353",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1353/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1353/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1353/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1353",
    "id": 677238713,
    "node_id": "MDU6SXNzdWU2NzcyMzg3MTM=",
    "number": 1353,
    "title": "Make C# Private Methods / Fields / Properties Private For Cross-Language Scripting",
    "user": {
      "login": "croconut",
      "id": 52222076,
      "node_id": "MDQ6VXNlcjUyMjIyMDc2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/52222076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/croconut",
      "html_url": "https://github.com/croconut",
      "followers_url": "https://api.github.com/users/croconut/followers",
      "following_url": "https://api.github.com/users/croconut/following{/other_user}",
      "gists_url": "https://api.github.com/users/croconut/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/croconut/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/croconut/subscriptions",
      "organizations_url": "https://api.github.com/users/croconut/orgs",
      "repos_url": "https://api.github.com/users/croconut/repos",
      "events_url": "https://api.github.com/users/croconut/events{/privacy}",
      "received_events_url": "https://api.github.com/users/croconut/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-11T22:26:20Z",
    "updated_at": "2020-08-12T14:46:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** A metroidvania for Android\r\n\r\n**Describe the problem or limitation you are having in your project:** I've been accidentally changing C# private methods/properties without realizing it was even possible. I also experienced engine crashes when I tried to directly set a property that didn't have a set method with a backing type: e.g. the property just had a get { return other_variable; }\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:** Making the private things inaccessible gives developers more safety in terms of using the code as, say components since I'm using an ECS, as state changes can be very hard to manage when they're happening outside the class. I also expect to be able to consider private things as untouchable outside the class in C# and it's currently not intuitive for people getting started with godot that have used something like Unity or Unreal. \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:** \r\n``` C#\r\npublic class Inventory : Reference\r\n{\r\n    public int Size \r\n    { \r\n        get;\r\n        private set;\r\n        // no longer necessary\r\n        // get { return _size; }\r\n        // set { GD.PushError(\"no setting directly\"); }\r\n    }\r\n    // wont need a backing field for pseudo-privacy either\r\n    // private int _size = 1;\r\n}\r\n```\r\n``` \r\nfunc change_inventory_size(size: int):\r\n    // inventory size doesn't change\r\n    _inventory.Size = 7\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** I will be using this enhancement for every C# class I make. I can only kind of work around it as you see above. It's still not private since _size can still be modified whenever / wherever.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** The default behavior of C# classes in godot should be analogous to compiled/static class behavior, not scripting/dynamic class behavior. Also, my IDE is giving warnings for this as I don't want to use underscript variables (so the GDScript developers know not to touch) and I do want to be able to use auto-properties.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1353/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1352",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1352/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1352/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1352/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1352",
    "id": 677064497,
    "node_id": "MDU6SXNzdWU2NzcwNjQ0OTc=",
    "number": 1352,
    "title": "Use the 2D main screen plugin as default instead of 3D (affects empty scenes without root node)",
    "user": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-08-11T17:37:37Z",
    "updated_at": "2020-08-12T16:49:30Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine :)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you create a new Godot project, or create a new scene (empty initially), the default main screen plugin (i.e. the central part of the editor) is the 3D viewport, like this:\r\n\r\n![Screenshot_20200811_193012](https://user-images.githubusercontent.com/4701338/89929120-15655400-dc09-11ea-8b9d-ff89254b0ff8.png)\r\n\r\n![Screenshot_20200811_192939](https://user-images.githubusercontent.com/4701338/89929075-054d7480-dc09-11ea-8434-abb9ad2264b0.png)\r\n\r\nhttps://github.com/godotengine/godot/pull/41036 and this proposal suggest to change that to the 2D viewport, which is the first top menu item:\r\n\r\n![Screenshot_20200811_193058](https://user-images.githubusercontent.com/4701338/89929191-3037c880-dc09-11ea-9fb6-209c7eafae49.png)\r\n\r\n![Screenshot_20200811_193108](https://user-images.githubusercontent.com/4701338/89929214-375ed680-dc09-11ea-820a-cd5f092ce362.png)\r\n\r\nThis proposal serves to gather feedback from the community on which one is preferred, to see if we should change it or keep things as is. (I'm neutral myself, just opening the proposal as it's the intended workflow to get community feedback.)\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nPR https://github.com/godotengine/godot/pull/41036 changes the default to \"2D\".\r\n\r\nNote that this will only impact **empty** projects. As soon as you add a Node to the scene tree, the default main screen plugin for that scene will be the one that best matches the root node (2D for CanvasItem-derived nodes, 3D for Spatial/Node3D-derived nodes).\r\nThen, any subsequent empty scene will use the same main screen plugin as the previously opened scene.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nSee https://github.com/godotengine/godot/pull/41036\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot relevant, it's about changing a default for the engine.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes, it's about changing a default for the engine.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1352/reactions",
      "total_count": 14,
      "+1": 12,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1350",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1350/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1350/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1350/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1350",
    "id": 676616084,
    "node_id": "MDU6SXNzdWU2NzY2MTYwODQ=",
    "number": 1350,
    "title": "Rename the options in particles so they make more sense . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-08-11T06:21:03Z",
    "updated_at": "2020-08-12T16:49:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game, atm . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen I add a particle system, it's not really clear if it's GPU particles, or CPU particles, in the add node . . So, a small request, so for 3D particle systems, they get called GPUParticles, and CPUParticles . . The second thing is, it's very un-intuitive that the two main settings are call ' Process Material ', and ' Draw Passes ' . . Since ' Draw Passes ' is really the mesh, even if it's just a plane, it would make sense if it was called ' Particle Mesh ', and ' Process Material ' was called ' Particle Parameters ' . . There's always a good reason why something is so, in Godot, so I can't really critique it, it would be nice if it was renamed, to make more sense . . Or, just called ' Process Material ' \"Parameters\", and ' Draw Passes \" Particle Mesh 3D \" . . :OO . . That way, it's more clear what the settings will actually do, I still keep clicking the wrong place, after using it for over 2 months <3, because of names . . Hope it will be updated, hopeful . . .\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWell, it's just a constant struggle, to have to re-think what one knows, as the current names aren't the best, they're probably very accurate, at a high-tech level, but it's not that easy, for beginners . . I hope you will update the names for Godot, to make more sense, right away . . . Thanks . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nUhmmm, change the names, so they are more user-friendly . .\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not good enough, to say if this can be done, as a new user . . \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would make it easier for all users to use the engine, and make more sense, or so . . .",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1350/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1349",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1349/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1349/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1349/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1349",
    "id": 676540981,
    "node_id": "MDU6SXNzdWU2NzY1NDA5ODE=",
    "number": 1349,
    "title": "Develop some workflow for \"low level\" Godot development for advanced users",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2020-08-11T02:57:42Z",
    "updated_at": "2020-11-06T18:51:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA custom 2D engine on top of Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to really use Godot in a closer way to how you would develop a game in a game framework like monogame.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI need to have my own custom gameloop, which some godot users told me It was possible extending the game loop and customizing it using Servers.\r\nStill my issue is that is an area of not much documentation or interest in the comunity, but is vital for serious developers (specially for professional programmers from a serious studio).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nDevelop a better workflow to completelly work with godot in a \"low level\" that is closer to a game framework, without having to create C++ modules.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, because this is too low level to be simple lines of script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt affects the core of the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1349/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1347",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1347/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1347/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1347/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1347",
    "id": 676506024,
    "node_id": "MDU6SXNzdWU2NzY1MDYwMjQ=",
    "number": 1347,
    "title": "Add a ' set ' and ' get ' autoload singleton variable box to visual script . . .",
    "user": {
      "login": "jasperbrooks79",
      "id": 61069740,
      "node_id": "MDQ6VXNlcjYxMDY5NzQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/61069740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasperbrooks79",
      "html_url": "https://github.com/jasperbrooks79",
      "followers_url": "https://api.github.com/users/jasperbrooks79/followers",
      "following_url": "https://api.github.com/users/jasperbrooks79/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasperbrooks79/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasperbrooks79/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasperbrooks79/subscriptions",
      "organizations_url": "https://api.github.com/users/jasperbrooks79/orgs",
      "repos_url": "https://api.github.com/users/jasperbrooks79/repos",
      "events_url": "https://api.github.com/users/jasperbrooks79/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasperbrooks79/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-08-11T01:06:06Z",
    "updated_at": "2020-08-12T05:42:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Tomb Raider game . .\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've been trying to find out, how to access a singleton in visual script, and I accidentally found the answer, online . . It's quite complicated, as can be seen here . .\r\n\r\n![2020-08-11 0259](https://user-images.githubusercontent.com/61069740/89845433-bf4bce80-db7e-11ea-8fca-b3e72aaed6aa.png)\r\n\r\n![2020-08-11 0300](https://user-images.githubusercontent.com/61069740/89845437-c2df5580-db7e-11ea-9b77-c806eb45ec9b.png)\r\n\r\nSingletons are really nice, like global variables, that are stored between scenes, and they seem to be very important for the engine . . I would like to ask for a SIMPLER way to do this, than the above, as there's almost no chance of a beginner actually figuring this out, and it seems to be expected that one uses them, ie. they're presented as important features, for making game in the docs, right now . . I'd like to have a ' get ' and ' set ' autoload singleton box in Godot, atm I don't think it's possible, it doesn't make sense there's no way I'd have found the answer above, on my own, as a non-coder ( learning it, though <3\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake a ' set ' and ' get ' button, for accessing singletons, in the list of nodes, if that's not a good idea, make some sort of box, or way for it to be easier, and more logical . . right now, it's tough . . .\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSince autoloads are considered a core feature, maybe make a ' get autoload ', or ' set autoload ', right now accessing a singleton is very difficult, for people learning visual script, for no reason, imo, sry . . . :((\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI can't change visual script, like that, as a beginner . . :((\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause, singletons are very powerful, and useful parts, of the engine, and the official docs mention them, in the cool features, of the engine . . . :)) <3",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1346",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1346/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1346/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1346/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1346",
    "id": 676425270,
    "node_id": "MDU6SXNzdWU2NzY0MjUyNzA=",
    "number": 1346,
    "title": "Add SpongePowered-like mixins to GDScript",
    "user": {
      "login": "CammiePone",
      "id": 16853086,
      "node_id": "MDQ6VXNlcjE2ODUzMDg2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16853086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CammiePone",
      "html_url": "https://github.com/CammiePone",
      "followers_url": "https://api.github.com/users/CammiePone/followers",
      "following_url": "https://api.github.com/users/CammiePone/following{/other_user}",
      "gists_url": "https://api.github.com/users/CammiePone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CammiePone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CammiePone/subscriptions",
      "organizations_url": "https://api.github.com/users/CammiePone/orgs",
      "repos_url": "https://api.github.com/users/CammiePone/repos",
      "events_url": "https://api.github.com/users/CammiePone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CammiePone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-10T21:23:46Z",
    "updated_at": "2020-08-21T03:11:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a modloader for a voxel game of mine, and my goal with said modloader is to give modders as much power over my own code as I possibly can, while maintaining compatibility between mods.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile general hooks are good, they are limited to what I think to add, and the fact that I can't really add a hook for every single line of code. This could possibly even be extended to allow you to mixin into parts of the engine itself through GDScript, which could allow greater power to game developers, but I'm also not entirely sure how you would convert GDScript to C++ in order to do it.\r\n\r\nI come from making mods for Minecraft, and after getting used to using mixins, it's hard to imagine not being able to use them. Unfortunately SpongePowered's mixins are for Java only.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs the title says, I think something like SpongePowered's mixins in GDScript would be extremely powerful. They're very different from the mixins mentioned in #758. Basically what they do is they allow someone to make a mixin class or interface to safely inject code into specific areas, even if other mods inject into those same exact places. It uses annotations, the main five being `@Mixin`, `@Accessor`, `@Inject`, `@At`, and `@Shadow`.\r\n\r\nThe Mixin annotation specifies that a class or interface is a mixin and to what class you're wanting to mess with, the Accessor annotation allows you to create getters or setters for variables you normally don't have access to, the Inject annotation specifies a method to inject into as well as where using the At annotation (HEAD (top of the method), TAIL (bottom of the method), and more specific things like before or after a variable or method is called in a method and which one to place the injection at if there's multiple), and the Shadow annotation allows you to use a variable as if your mixin class was inside the specified class without needing to create it yourself. You're also able to create your own variables, local and not, as well as methods through mixins if you wish, and can also overwrite a method entirely (however obviously this would be a last ditch thing, as it could break anything trying to inject into the method you overwrote).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSo let's say I had a method for handling the movement of my player, and a modder wanted to inject into there. They could do something like this:\r\n\r\n```\r\n@shadow\r\nvar velocity\r\n\r\n@accessor(script = \"res://scripts/entities/Player.gd\", variable = \"health\")\r\nfunc get_health()\r\n\r\n@inject(script = \"res://scripts/entities/Player.gd\", method = \"move\", @At(value = \"PRE_VAR\", target = \"velocity\", ordinal = 1))\r\nfunc multiply_move_vector():\r\n    if get_health() < 5:\r\n        velocity *= 0.2\r\n```\r\n\r\nThis is a very simple example of someone specifying the path to the script they want to mess with, and gaining access to my `velocity` variable within the mixin itself, and using an accessor to create an empty method (these would usually be used within an interface due to limitations with Java, but would be doable in an implementation in GDScript without it since, you know, you're able to modify GDScript itself) that returns the value of the `health` variable, and can be used outside of the mixin if the class were to be extended or autoloaded. From there, I'm injecting just before the second time the variable `velocity` is called in the `move()` method and adding a check for if the player's health is less than 5, and if it is, to slow them down.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI actually don't believe so. If it could, I would love to be told how to for when 4.0 hits. After I saw annotations were coming to GDScript, I immediately thought about how this could solve my conundrum for how to make a useful modding API without needing to add hooks myself into everything and then maintain those hooks.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause I don't think it's possible without engine-level access. It could probably be done with a module, but I feel like if implemented in a way that allows users to inject code into the base engine as well, it could be extremely useful to people that don't know C++, but want to make a change to the engine's code that wouldn't otherwise be changeable, and it would definitely help with making mods for games that use Godot if a developer wants to build a modding community around their game.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1346/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1343",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1343/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1343/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1343/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1343",
    "id": 675772857,
    "node_id": "MDU6SXNzdWU2NzU3NzI4NTc=",
    "number": 1343,
    "title": "GDScript should remove the need for most `set_deferred()` calls",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-09T21:11:35Z",
    "updated_at": "2020-08-10T16:11:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nBackground: In my gdscript I called two lines of code on an area2D:\r\nmonitored=true\r\nmonitorable=true\r\n\r\nbut after the second line, only monitored was changed, monitorable was not.\r\n\r\nI believe this turns out to be due to doing certain things during physics processing can cause issues and set_deferred is required. As far as I know set_deferred is required when setting up scenes, when modifying collision details, as above in my case on changing criteria, plus probably a dozen other things.\r\n\r\nThe net result was my game had a random bug that took a long time to figure out.\r\n\r\nThe thing is, why should a programmer know in gdscript that a property they are setting is in the middle of a physics loop and the system may be unstable and they have to provide a workaround?\r\n\r\nSurely if this is the case, then on things that can effect physics, the parser should be automatically putting a set_deferred call in?\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAs above, the end programmer should not have to know about the inner workings of Godot and on every line of code think 'do I need to call set_deferred here', the engine should automatically inject deferred calls when required.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMake it so that set_deferred is not required because it makes no sense to most people.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nKnowing when and when not to call deferred in order to circumvent edge cases on the physics engines should be down the engine and not the end user.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1342",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1342/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1342/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1342/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1342",
    "id": 675770165,
    "node_id": "MDU6SXNzdWU2NzU3NzAxNjU=",
    "number": 1342,
    "title": "Distribute official builds with full debugging symbols",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "akien-mga",
      "id": 4701338,
      "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akien-mga",
      "html_url": "https://github.com/akien-mga",
      "followers_url": "https://api.github.com/users/akien-mga/followers",
      "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
      "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
      "organizations_url": "https://api.github.com/users/akien-mga/orgs",
      "repos_url": "https://api.github.com/users/akien-mga/repos",
      "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akien-mga/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "akien-mga",
        "id": 4701338,
        "node_id": "MDQ6VXNlcjQ3MDEzMzg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/4701338?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/akien-mga",
        "html_url": "https://github.com/akien-mga",
        "followers_url": "https://api.github.com/users/akien-mga/followers",
        "following_url": "https://api.github.com/users/akien-mga/following{/other_user}",
        "gists_url": "https://api.github.com/users/akien-mga/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/akien-mga/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/akien-mga/subscriptions",
        "organizations_url": "https://api.github.com/users/akien-mga/orgs",
        "repos_url": "https://api.github.com/users/akien-mga/repos",
        "events_url": "https://api.github.com/users/akien-mga/events{/privacy}",
        "received_events_url": "https://api.github.com/users/akien-mga/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-09T20:52:50Z",
    "updated_at": "2020-10-01T14:51:51Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nFor the sake of small file sizes and optimization, official builds are stripped from their debugging symbols and have link-time optimization enabled. Unfortunately, LTO is currently incompatible with *accurate* debugging symbols (like some optimizations found at the `-O2` level in general).\r\n\r\nWhile optimized builds are fast, they're impractical to use for debugging as their backtraces aren't useful.\r\n\r\nI currently distribute builds with full debugging information in [this repository](https://github.com/Calinou/godot-debug-builds), but an official solution will likely scale better over time.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nTo ease troubleshooting of crashes and other difficult-to-diagnose issues, we should distribute official builds that are built with the `debug` target and contain full debugging symbols, especially for Windows where compiling is more difficult.\r\n\r\nWindows debug builds should preferably be compiled with MSVC so people can use the Visual Studio Debugger or WinDbg. (It would be possible to build them with MinGW and tell people to use gdb, but that might not be accepted as much.)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCreate and distribute builds with debugging symbols on the official Godot download mirrors.\r\n\r\nThese builds could be referenced on the website under a single link for all platforms on the Download page. (Most people won't need those builds, so these shouldn't be made too prominent.)\r\n\r\nSince these builds are slower and significantly larger, these should only be used for debugging purposes. There should be a disclaimer stating these shouldn't be used in a production environment.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, as this is related to official build distribution.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is about making official builds.\r\n\r\n___\r\n\r\nSee also #1341.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1342/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1340",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1340/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1340/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1340/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1340",
    "id": 675669987,
    "node_id": "MDU6SXNzdWU2NzU2Njk5ODc=",
    "number": 1340,
    "title": "Editor hint when zoom level is maxed out, and focus indicator on the object rotating gizmo",
    "user": {
      "login": "goatchurchprime",
      "id": 677254,
      "node_id": "MDQ6VXNlcjY3NzI1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/677254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/goatchurchprime",
      "html_url": "https://github.com/goatchurchprime",
      "followers_url": "https://api.github.com/users/goatchurchprime/followers",
      "following_url": "https://api.github.com/users/goatchurchprime/following{/other_user}",
      "gists_url": "https://api.github.com/users/goatchurchprime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/goatchurchprime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/goatchurchprime/subscriptions",
      "organizations_url": "https://api.github.com/users/goatchurchprime/orgs",
      "repos_url": "https://api.github.com/users/goatchurchprime/repos",
      "events_url": "https://api.github.com/users/goatchurchprime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/goatchurchprime/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-09T09:43:54Z",
    "updated_at": "2020-08-09T11:10:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n3D VR game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nMy editor got stuck in a mode where I could not zoom in enough to edit my CSG object.  This was pretty frustrating and I could not fix it even by duplicating the scene and trying to edit it again.  \r\n\r\nI only found out how to fix it by searching through the old bugs and getting a clue that there was a Focus mode in the editor that I did not know about -- even after using Godot for 2 months.  \r\n\r\nI had zoomed out and looked away from the object and accidentally pressed the 'F' key, so the editor was stuck focused on the Grid plane (which does not exist in the node tree).\r\n\r\nThe real GUI problem is that the object of the \"spatial_editor/focus_selection\" is an entirely invisible factor to the user.  They just have to remember what they selected last, which could be hours ago and accidental.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nDetect when a novice user is repeatedly trying to zoom further in and has hit the end-stop, and provide them with a hint that they should set the focus to an object that they want to get close to.  \r\nhttps://docs.godotengine.org/en/stable/getting_started/editor/default_key_mapping.html\r\n\r\nIt is reasonable to guess that when a user is trying to go beyond this limit it is because they don't know how to get what they want.\r\n\r\nThere is a zooming gizmo on the left of the editor that maxes out (on the lower level) at 0.0.  Unlike the axis gizmo it is non-interactive.\r\n\r\nIt would be useful if the Inspector or the selected object gizmo gave some indication that the object was in or out of focus wrt to zooming.\r\n\r\nAlso, the Freelook mode could be made more discoverable in the following way:\r\nEditor->Editor Settings->Editors->3d  \"Freelook\" section could have a tool-tip highlight that tells the user how to enter and exit that mode.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n* When zooming hard against the 0 level, the zoom gizmo blinks red and you get a tool tip that says: \"Limit reached for this focused object\"\r\n\r\n* There is a section in the Inspector pane that either says: \"This object has 3D focus\" or there is button that says \"Make this object have 3D focus\".  Its tooltip would tell you the keyboard shortcut.\r\n\r\n* Put an asterisk somewhere on the object gizmo that is white if object has focus, or grey if it does not have focus (but you can click it to make it have focus)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's an editor UI issue\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an editor issue for noobs.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1339",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1339/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1339/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1339/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1339",
    "id": 675658256,
    "node_id": "MDU6SXNzdWU2NzU2NTgyNTY=",
    "number": 1339,
    "title": "Add descriptions/tooltips to editor settings",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-08-09T08:11:25Z",
    "updated_at": "2020-08-25T21:36:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nUsing the Godot engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSometimes it would be helpful to have additional information/context about editor or project settings.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd ability to set descriptions for these settings which show up in the tooltip when hovered.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nNot the best example but you get it. Most properties have self-explanatory names, but some could do with some additional context.\r\n![Photoshop_D3rSrnLeHd](https://user-images.githubusercontent.com/41730826/89727836-9f77b600-da6b-11ea-9b21-92e29708bf8c.png)\r\nIn code:\r\n![devenv_G3dCkskNjr](https://user-images.githubusercontent.com/41730826/89727837-a272a680-da6b-11ea-837c-8269f25631f4.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nPart of the editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1339/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1338",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1338/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1338/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1338/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1338",
    "id": 675528378,
    "node_id": "MDU6SXNzdWU2NzU1MjgzNzg=",
    "number": 1338,
    "title": "Add support for sending desktop notifications",
    "user": {
      "login": "Calinou",
      "id": 180032,
      "node_id": "MDQ6VXNlcjE4MDAzMg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/180032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Calinou",
      "html_url": "https://github.com/Calinou",
      "followers_url": "https://api.github.com/users/Calinou/followers",
      "following_url": "https://api.github.com/users/Calinou/following{/other_user}",
      "gists_url": "https://api.github.com/users/Calinou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Calinou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Calinou/subscriptions",
      "organizations_url": "https://api.github.com/users/Calinou/orgs",
      "repos_url": "https://api.github.com/users/Calinou/repos",
      "events_url": "https://api.github.com/users/Calinou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Calinou/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-08-08T13:49:40Z",
    "updated_at": "2020-12-18T15:12:28Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe Godot editor :slightly_smiling_face: \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt's currently impossible to send desktop notifications from a Godot project (or the editor) in a cross-platform manner. It's possible to run `notify-send` using `OS.execute()`, but that only works on Linux/BSD.\r\n\r\nThere are many use cases for sending desktop notifications in projects:\r\n\r\n- Alert the player when a new round starts if the player isn't focused on the game window (usually because they minimized the window, or they alt-tabbed out of it).\r\n- Display chat messages while the player has alt-tabbed out from a game.\r\n- Non-game applications can probably find creative ways to use them as well.\r\n\r\nWe could also benefit from integrating them in the Godot editor:\r\n\r\n- If the editor window isn't focused, optionally display a notification when assets have finished reimporting.\r\n- If the editor window isn't focused, display a notification when an asset or export templates have finished downloading.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere could be a method in the OS singleton to send a desktop notification:\r\n\r\n```gdscript\r\nOS.send_notification(title: String, message: String, custom_icon: Image = null, duration: int = -1)\r\n```\r\n\r\nThe custom icon is optional. If it's `null` (the default), the project icon will be used for the notification icon.\r\n\r\nThe duration is specified in seconds. If it's `-1` (the default), the OS-provided default will be used. (Note that this value can vary across platforms and configurations to match the user's accessibility settings.)\r\n\r\nIf the duration is `0`, the notification will never go away and will have to be discarded manually (this may not be supported on all platforms).\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nOn Windows 10, the result would look something like this:\r\n\r\n![](https://camo.githubusercontent.com/cf620d7a3c1ebb30256edf6c316a1180a5711418/687474703a2f2f692e696d6775722e636f6d2f5542766f4d6a392e706e67)\r\n\r\nWe could perhaps integrate the [portablefiledialogs](https://github.com/samhocevar/portable-file-dialogs) library to implement this feature. On top of sending desktop notifications, it also supports spawning message dialogs and native file choosers (which may be useful for non-game applications made with Godot). On the HTML5 platform, the [Web Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API) could be used to implement this feature.\r\n\r\nI also have a [WIP branch](https://github.com/Calinou/godot/tree/add-os-notifications) which currently only supports Windows, but doesn't add any third-party libraries.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo (except on Linux using `notify-send`).\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt might be possible to provide this functionality using a GDNative add-on. However, we may want to use this feature in the editor as described above for convenience reasons.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1338/reactions",
      "total_count": 43,
      "+1": 41,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1337",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1337/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1337/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1337/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1337",
    "id": 675525315,
    "node_id": "MDU6SXNzdWU2NzU1MjUzMTU=",
    "number": 1337,
    "title": "Make TileMap snap settings available before defining a tile",
    "user": {
      "login": "mount2010",
      "id": 13136505,
      "node_id": "MDQ6VXNlcjEzMTM2NTA1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13136505?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mount2010",
      "html_url": "https://github.com/mount2010",
      "followers_url": "https://api.github.com/users/mount2010/followers",
      "following_url": "https://api.github.com/users/mount2010/following{/other_user}",
      "gists_url": "https://api.github.com/users/mount2010/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mount2010/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mount2010/subscriptions",
      "organizations_url": "https://api.github.com/users/mount2010/orgs",
      "repos_url": "https://api.github.com/users/mount2010/repos",
      "events_url": "https://api.github.com/users/mount2010/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mount2010/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-08T13:25:44Z",
    "updated_at": "2020-08-08T14:27:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a project using TileMaps.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently, to change the snap settings of a TileSet in the TilesetEditor, you must first define a tile (of the wrong size), in order to access the TilesetEditorContext inspector properties which contains the snap settings. This is counterinitutive, as you will be looking for the settings for changing the snap settings before you define a tile.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAdd a \"Snap Settings\" button next to the Snap button in the Tileset Editor (similar to the Snap button in the Viewport) to access TilesetEditorContext properties, either in a popup menu, or in the Inspector. This will allow the user to change the snap settings at any time.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nSimilar to the Snap Settings button in the Viewport:\r\n\r\n![image](https://user-images.githubusercontent.com/13136505/89711572-9f20e180-d9bd-11ea-862c-ca1af2a07f56.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nN/A\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1337/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1336",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1336/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1336/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1336/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1336",
    "id": 675494574,
    "node_id": "MDU6SXNzdWU2NzU0OTQ1NzQ=",
    "number": 1336,
    "title": "Enable transform chaining by making scaled/rotated/translated consistent",
    "user": {
      "login": "bluenote10",
      "id": 3620703,
      "node_id": "MDQ6VXNlcjM2MjA3MDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3620703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bluenote10",
      "html_url": "https://github.com/bluenote10",
      "followers_url": "https://api.github.com/users/bluenote10/followers",
      "following_url": "https://api.github.com/users/bluenote10/following{/other_user}",
      "gists_url": "https://api.github.com/users/bluenote10/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bluenote10/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bluenote10/subscriptions",
      "organizations_url": "https://api.github.com/users/bluenote10/orgs",
      "repos_url": "https://api.github.com/users/bluenote10/repos",
      "events_url": "https://api.github.com/users/bluenote10/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bluenote10/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-08T09:25:06Z",
    "updated_at": "2020-12-17T09:20:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA guitar practicing application ([here](https://www.youtube.com/watch?v=odWXE5Dv9HQ) is an old version but in VR).\r\n\r\nI suspect the reasons why I'm facing this issue more than others are:\r\n- Almost all geometry/meshes are procedurally generated.\r\n- Because of usage of `MultiMeshInstance` I can't rely less on node hierarchies, but have to compute complex transformation chains manually.\r\n- I like fluent interfaces ;)\r\n\r\nHowever the issue I'm facing is a fairly fundamental one, and can affect almost any project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nBasically every time I try to chain `.scaled`/`.rotated`/`.translated` I end up with a bug. I had raised this issue before https://github.com/godotengine/godot/issues/34329, which has been closed by adding a line to the documentation. This line didn't help much, I still run into the same problem a lot. I finally had the time to analyze why that is, and since 4.0 is the chance to get things right, here is my proposal.\r\n\r\nNote: I'm discussing the topic based on `Transform`, but both the problem and solution would also apply for `Transform2D` as far as I can see.\r\n\r\nAlso feel free to read the much shorter proposal (down below) first, and only dive into the lengthy reasoning behind it (above) if need be ;).\r\n\r\n## Terminology\r\n\r\nChaining transformation always requires to be aware of left-to-right or right-to-left thinking, because the \"mathematical reading order\" is typically opposite to the \"transformation order\". For instance\r\n```\r\nx' = C Â· B Â· A Â· x\r\n```\r\nfirst transforms `x` by `A`, then by `B`, then by `C`, opposite to how the mathematical equation is typically written. Put another way:\r\n\r\n- Transform left multiplication\r\n  ```\r\n  M' = A Â· M\r\n  ```\r\n  means that `A` is applied _after_ `M` is applied.\r\n\r\n- Transform right multiplication\r\n  ```\r\n  M' = M Â· A\r\n  ```\r\n  means that `A` is applied _before_ `M` is applied.\r\n\r\n## Current behavior\r\n\r\nCurrently the behavior is a mix of left and right multiplication.\r\n\r\n- Scaled:\r\n  ```\r\n  var M_new = M.scaled(... S ...)\r\n  ```\r\n  has **left** multiplication semantics (i.e., happens _after_ in transformation order):\r\n  ```\r\n  M_new = S Â· M\r\n  ```\r\n\r\n- Rotated:\r\n  ```\r\n  var M_new = M.rotated(... R ...)\r\n  ```\r\n  has **left** multiplication semantics (i.e., happens _after_ in transformation order):\r\n  ```\r\n  M_new = R Â· M\r\n  ```\r\n\r\n- Translated:\r\n  ```\r\n  var M_new = M.translated(... T ...)\r\n  ```\r\n  has **right** multiplication semantics (i.e., happens _before_ in transformation order):\r\n  ```\r\n  M_new = M Â· T\r\n  ```\r\n\r\n## Issue 1: Hard to read\r\n\r\nBecause of mixing left and right multiplication, I find it fairly hard to look at chained expressions and come up with the underlying mathematical order. Going from the code to the mathematical expression cannot be done by just reading in one direction, but rather requires to switch between left-to-right and right-to-left thinking. For instance:\r\n\r\n```gdscript\r\nvar M = Transform.IDENTITY\\\r\n    .scaled(... S ...)\\\r\n    .translated(... T ...)\\\r\n    .rotated(... R ...)\r\n```\r\nis equivalent to (if I didn't get it wrong again)\r\n```\r\nM = R Â· S Â· T\r\n```\r\nNote how `R` has moved from last to first, `S` has moved to the middle, and `T` ended up at the end. The result feels almost like a random shuffle of the order written in the code. Doing such transformations on longer expressions is a challenging (and unnecessary) mental exercise.\r\n\r\n## Issue 2: Hard to write\r\n\r\nThe problem is even more tricky the other way around, when trying to convert a mathematical expression into code.\r\n\r\n_Example 1_: Imagine your goal is to write the following purely with chaining:\r\n```\r\nM = S Â· T Â· R\r\n```\r\nAs far as I can see this actually cannot be written purely with chaining, because having the `.translated` in the middle breaks the right-to-left flow, and there is no way get the `R` in the right position.\r\n\r\nThe only way to write it is in a non-chained way, for instance:\r\n```gdscript\r\nvar M = Transform.IDENTITY\\\r\n    .scaled(... S ...)\r\n    .translated(... T ...)\r\nM *= Transform.IDENTITY.rotated(... R ...)\r\n```\r\n\r\n_Example 2_: Imagine implementing longer transform chains like:\r\n```\r\nM = R_2 Â· T_2 Â· R_1 Â· S_2 Â· T_1 Â· S_1\r\n```\r\nTrying to work out the code becomes more and more awkward, because it is necessary to split the expression into subgroups at each `T_*`, which break the right-to-left flow. The individual groups can be assembled right-to-left, but need to be assembled\r\nin an outer multiplication left-to-right. An alternative is to manually implement translation left multiplication with the trick to use `temporary.offset += T_*`. In any case the resulting code is much less clear than a full chaining expression (if `.translated` would do left-multiplication as well):\r\n```gdscript\r\nvar M = Transform.IDENTITY\\\r\n    .scaled(... S_1 ...)\\\r\n    .translated(... T_1 ...)\\\r\n    .scaled(... S_2 ...)\\\r\n    .rotated(... R_1 ...)\\\r\n    .translated(... T_2 ...)\\\r\n    .rotated(... R_2 ...)\r\n```\r\n\r\n## Issue 3: Performance aspects\r\n\r\nIn general writing transforms as chains is faster than using full `transform1 * transform2` expressions, because the implementation can exploit the particular matrix properties of `.scaled`/`.rotated`/`.translated`. However, because of the error prone chaining semantics, I have basically replaced many transform chains by transform product expressions, which has performance drawbacks.\r\n\r\nI had to refresh my memory about the differences, in case you are interested in the details:\r\n\r\n<details>\r\n<summary>All possible transform operations</summary>\r\n\r\n### Translation\r\n\r\n**Left multiply**\r\n\r\n![Translation_lm](https://user-images.githubusercontent.com/3620703/89706741-bc779080-d968-11ea-870c-80641dedacd9.png)\r\n\r\n**Right multiply**\r\n\r\n![Translation_rm](https://user-images.githubusercontent.com/3620703/89706744-c4373500-d968-11ea-87f0-3d11c7536392.png)\r\n\r\n### Scale\r\n\r\n**Left multiply**\r\n\r\n![Scale_lm](https://user-images.githubusercontent.com/3620703/89706748-cd280680-d968-11ea-9055-f1dc5f9eaaa0.png)\r\n\r\n**Right multiply**\r\n\r\n![Scale_rm](https://user-images.githubusercontent.com/3620703/89706750-d1ecba80-d968-11ea-84e5-d56d720cacdb.png)\r\n\r\n\r\n### Rotation\r\n\r\n**Left multiply**\r\n\r\n![Rotation_lm](https://user-images.githubusercontent.com/3620703/89706735-abc71a80-d968-11ea-8a01-95ebb6469efe.png)\r\n\r\n**Right multiply**\r\n\r\n![Rotation_rm](https://user-images.githubusercontent.com/3620703/89706736-b08bce80-d968-11ea-9adb-6e5f8b2d7056.png)\r\n\r\n### Generic transform\r\n\r\n**Left multiply (rhs only)**\r\n\r\n![Transform_lm](https://user-images.githubusercontent.com/3620703/89706714-85a17a80-d968-11ea-80fa-ff5a22fc840f.png)\r\n\r\n**Right multiply (rhs only)**\r\n\r\n![Transform_rm](https://user-images.githubusercontent.com/3620703/89706733-a2d64900-d968-11ea-8c1c-b922a66d1215.png)\r\n\r\n</details>\r\n\r\nCounting the number of floating point operations gives:\r\n\r\n| Operation                     | # Floating point operations | available |\r\n|-------------------------------|----------------------------:|:---------:|\r\n| Translation (left multiply)   |                           3 |           |\r\n| Translation (right multiply)  |                          18 |     *     |\r\n| Scale (left multiply)         |                          12 |     *     |\r\n| Scale (right multiply)        |                           9 |           |\r\n| Rotation (left multiply)      |                          60 |     *     |\r\n| Rotation (right multiply)     |                          45 |           |\r\n| Translation (both directions) |                          63 |     *     |\r\n\r\nIt is interesting to see how much more costly a full `transform1 * transform2` (63 ops) is compared to a simple translation left multiply (3 ops). The other aspect I vaguely remembered: For scale/rotate the faster operation is right multiplication, whereas for translation it is left multiplication. If performance is critical, it can be helpful to build a transform exactly in the way that minimizes floating point operations. Unfortunately, the interface in Godot is not only inconsistent, but also offers only the less efficient variants.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThe solution I'm proposing is to make the interface consistent and offer all possible operations:\r\n\r\n- `.scaled` performs **left** multiplication\r\n- `.rotated` performs **left** multiplication\r\n- `.translated` performs **left** multiplication\r\n- `.pre_scaled` performs **right** multiplication\r\n- `.pre_rotated` performs **right** multiplication\r\n- `.pre_translated` performs **right** multiplication\r\n\r\nThis is also the solution chosen by [Eigen](https://eigen.tuxfamily.org/dox/group__TutorialGeometry.html) (possibly the most famous library in that area) just the other way around because of using participles instead of infinitives, and to be less of a breaking change. What \"pre\" means is a matter of convention anyway, and up to the documentation to communicate.\r\n\r\nThus, in terms of documentation it is key to clearly describe what these functions do mathematically. Currently the docs do not even clearly say whether they are performing left or right multiplication, I only figured it out after reading the C++ sources. I could contribute some of the stuff above to the docs.\r\n\r\nIn terms of breaking changes this would add one item to the Godot 4.0 migration guide: Replace `translated` by `pre_translated`.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nShould be covered by the section above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt affects `Transform` / `Transform2D` so the enhancement is probably used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nMainly to avoid headaches for others.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1336/reactions",
      "total_count": 7,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1335",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1335/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1335/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1335/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1335",
    "id": 675482573,
    "node_id": "MDU6SXNzdWU2NzU0ODI1NzM=",
    "number": 1335,
    "title": "Make the editor change debug remote port automatically if unavailable",
    "user": {
      "login": "Tooniis",
      "id": 36982494,
      "node_id": "MDQ6VXNlcjM2OTgyNDk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/36982494?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tooniis",
      "html_url": "https://github.com/Tooniis",
      "followers_url": "https://api.github.com/users/Tooniis/followers",
      "following_url": "https://api.github.com/users/Tooniis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tooniis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tooniis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tooniis/subscriptions",
      "organizations_url": "https://api.github.com/users/Tooniis/orgs",
      "repos_url": "https://api.github.com/users/Tooniis/repos",
      "events_url": "https://api.github.com/users/Tooniis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tooniis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-08T07:50:39Z",
    "updated_at": "2020-11-16T16:03:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA multiplayer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI need to launch 2 instances of the Godot editor, one for the server and one for the client, in order to work on the game. When I launch the game on both editor instances, the second instance can't use the debug remote port set in editor settings, since it's being used by the first instance. It says ` Error listening on port <remote debug port>`.\r\nEach time I want to work on the game, I have to manually change the debug remote port in one of the editor instances so they don't interfere with each other.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nMake the editor automatically change the port if it finds the default unavailable.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nPerhaps a fallback port that would also be set in editor settings, then after it throws `Error listening on port <remote debug port>`, it automatically changes to that port and attempts to connect.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is a general enhancement to the editor that would better be done in core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1335/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1333",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1333/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1333/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1333/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1333",
    "id": 675400596,
    "node_id": "MDU6SXNzdWU2NzU0MDA1OTY=",
    "number": 1333,
    "title": "There needs to be a better way to track what is being actively worked on",
    "user": {
      "login": "EricEzaM",
      "id": 41730826,
      "node_id": "MDQ6VXNlcjQxNzMwODI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41730826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EricEzaM",
      "html_url": "https://github.com/EricEzaM",
      "followers_url": "https://api.github.com/users/EricEzaM/followers",
      "following_url": "https://api.github.com/users/EricEzaM/following{/other_user}",
      "gists_url": "https://api.github.com/users/EricEzaM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EricEzaM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EricEzaM/subscriptions",
      "organizations_url": "https://api.github.com/users/EricEzaM/orgs",
      "repos_url": "https://api.github.com/users/EricEzaM/repos",
      "events_url": "https://api.github.com/users/EricEzaM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EricEzaM/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-08-08T02:08:07Z",
    "updated_at": "2020-10-10T14:19:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "As a preface, I am a pretty casual contributor so it's possible that this issue only applies to me, or contributors like me. However, I still think that this could be an important thing to think about since it lowers the barrier to entry for new contributors. \r\n\r\n**Describe the project you are working on:**\r\nContributing to the Godot Engine.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'll start with an anecdote:\r\nI saw proposal #48 as well as issue https://github.com/godotengine/godot/issues/41083, and so I thought I might take a look at the curve editor to make some improvements to it. After a couple of hours working on it, a comment was made that someone was already working on an improved curve editor (for a couple of weeks already, it seems), so it was sort of wasteful for me to spend time on that in the first place. I cannot figure out how @Zylann knew that @WiggleWizard was working on an improved curve editor, at least from publicly available information and discussions. The comment in #48 doesn't really imply that he is working on it - it is just an additional feature request.\r\n\r\nSo I have run into this issue before too, where I may start looking at implementing a feature/fix but I later find out \"oh, this is being rewritten by so and so.\". As a result I sort of feel that I have wasted my time a bit.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe first thing that pops into my mind is a public Trello style board (maybe Github Projects?) which allows users to openly discuss what they are actively working on. This way if I am looking to implement a proposal, I can go there and possibly see that someone is working on a rework/rewrite of that system and either a) move on, or b) see if I can help in any way.\r\n\r\nAnyway, let me know what you think. Would this be appropriate? Have you experienced something similar?\r\n\r\nCheers",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1333/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1332",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1332/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1332/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1332/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1332",
    "id": 675312629,
    "node_id": "MDU6SXNzdWU2NzUzMTI2Mjk=",
    "number": 1332,
    "title": "Add an `import` keyword",
    "user": {
      "login": "monk-e-boy",
      "id": 17924807,
      "node_id": "MDQ6VXNlcjE3OTI0ODA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17924807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/monk-e-boy",
      "html_url": "https://github.com/monk-e-boy",
      "followers_url": "https://api.github.com/users/monk-e-boy/followers",
      "following_url": "https://api.github.com/users/monk-e-boy/following{/other_user}",
      "gists_url": "https://api.github.com/users/monk-e-boy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/monk-e-boy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/monk-e-boy/subscriptions",
      "organizations_url": "https://api.github.com/users/monk-e-boy/orgs",
      "repos_url": "https://api.github.com/users/monk-e-boy/repos",
      "events_url": "https://api.github.com/users/monk-e-boy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/monk-e-boy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2020-08-07T22:05:01Z",
    "updated_at": "2020-11-01T14:53:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nA program to do 3D design\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have some classes, I would like to cut and paste a class into an external .gd file and include it.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\n![image](https://user-images.githubusercontent.com/17924807/89691745-a08cd400-d901-11ea-82c8-bbd9854291f4.png)\r\n\r\nI decide to refactor my code and move the classes into external .gd files:\r\n\r\n![image](https://user-images.githubusercontent.com/17924807/89691813-d2059f80-d901-11ea-9e51-44fa58c3da63.png)\r\n\r\nTest2.gd:\r\n![image](https://user-images.githubusercontent.com/17924807/89691825-d9c54400-d901-11ea-95d9-c7eb304eeaa5.png)\r\n\r\nThis does not work. The code now fails silently.\r\n\r\nChanging Test2.gd to this:\r\n\r\n![image](https://user-images.githubusercontent.com/17924807/89691859-f82b3f80-d901-11ea-9605-3ba2c638b971.png)\r\n\r\n1. Remove the class name\r\n2. Re-indent my code\r\n\r\nFixes the issue.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nCreate an 'import' keyword that would mimic the Python include keyword. It just pulls the file in.\r\n\r\n[edit] I forgot the Python keyword is \"import\", I mistakenly remembered it as \"include\"",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1332/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1331",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1331/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1331/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1331/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1331",
    "id": 675247510,
    "node_id": "MDU6SXNzdWU2NzUyNDc1MTA=",
    "number": 1331,
    "title": "Add JACK audio support with per-channel mixer outputs",
    "user": {
      "login": "wargreen",
      "id": 5098493,
      "node_id": "MDQ6VXNlcjUwOTg0OTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5098493?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wargreen",
      "html_url": "https://github.com/wargreen",
      "followers_url": "https://api.github.com/users/wargreen/followers",
      "following_url": "https://api.github.com/users/wargreen/following{/other_user}",
      "gists_url": "https://api.github.com/users/wargreen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wargreen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wargreen/subscriptions",
      "organizations_url": "https://api.github.com/users/wargreen/orgs",
      "repos_url": "https://api.github.com/users/wargreen/repos",
      "events_url": "https://api.github.com/users/wargreen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wargreen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-07T20:07:03Z",
    "updated_at": "2020-09-04T23:32:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn multimedia artwork that use video tracking of people, 3D with physics and spatial audio.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot will be really good for make all the visual environement and physics. But I need to get a realtime multichannel output for sent the audio of each object to my Digital Audio Worksation (Ardour) and my spatialisation plugins.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nA JACK (https://jackaudio.org/) audio output for each channels of the mixer would make possible to process the audio outside of godot.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n![Jack_Godot](https://user-images.githubusercontent.com/5098493/89683815-85b66180-d8f9-11ea-81db-43d48826f20e.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWe can't get this feature working or any work around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe \"standard\" outputs formats of godot (stereo, 5.1...) don't allow a large number of mono outputs, so the output system need to be reviewed.\r\n\r\n@jpcima have work on a first version : https://github.com/godotengine/godot/issues/24274",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1331/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1329",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1329/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1329/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1329/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1329",
    "id": 675188526,
    "node_id": "MDU6SXNzdWU2NzUxODg1MjY=",
    "number": 1329,
    "title": "Fix path resolution for Windows Symbolic Links",
    "user": {
      "login": "Vivraan",
      "id": 12777564,
      "node_id": "MDQ6VXNlcjEyNzc3NTY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12777564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vivraan",
      "html_url": "https://github.com/Vivraan",
      "followers_url": "https://api.github.com/users/Vivraan/followers",
      "following_url": "https://api.github.com/users/Vivraan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vivraan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vivraan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vivraan/subscriptions",
      "organizations_url": "https://api.github.com/users/Vivraan/orgs",
      "repos_url": "https://api.github.com/users/Vivraan/repos",
      "events_url": "https://api.github.com/users/Vivraan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vivraan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-08-07T18:19:35Z",
    "updated_at": "2020-08-12T09:00:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n## **Describe the project you are working on**\r\nA 2D game as a tutorial in 3.2.2.stable, although the given proposal is applicable for any game using plugins which are passed around as git repos. I'm using Windows 10, but I expect this to also work as expected in *nix and macOS.\r\n\r\n\r\n## **Describe the problem or limitation you are having in your project**\r\nI want to create symlinks of git cloned plugins' `addons/` directories so that my own repo stays lean, but Godot doesn't recognise symlinks that well. Godot behaves with symlinked files in two ways as I've observed:\r\n\r\n1. **Treating them as read-only (symlink clones)** - if saving after modfying, the editor shows a pop-up saying:\r\n\r\n    ![image](https://user-images.githubusercontent.com/12777564/89672059-b7cbc180-d901-11ea-958d-2e2b7cc543a4.png)\r\n*Note, here `DebugOverlay.gd` is derived from [my fork of GammaGames' godot-debug-overlay](https://github.com/ShivamMukherjee/godot-debug-overlay), a small plugin for displaying debug information on screen. The script is actually a symlinked to a location outside my project and is being read correctly by Godot.*\r\n\r\n    and erroneously produces this in the console:\r\n    > Safe save failed. This may be a permissions problem, but also may happen because you are running a paranoid antivirus. If this is the case, please switch to Windows Defender or disable the 'safe save' option in editor settings. This makes it work, but increases the risk of file corruption in a crash.\r\n\r\n    The plus side is that a `.tmp` file is created which can then be diffed and merged on the original file.\r\n\r\n    This read-only hack can be achieved by using symlink clones - keeping concrete directory structures but maintaining symlinks to individual files.\r\n\r\n    While it's pretty useful since I'd expect to affect changes in my plugin by opening it as a separate Godot project (using a `project.godot` file likely supplied by the plugin maker(s) or by creating one myself), the drawback is that Git will treat it like any other file, and if I pull any of these files in case they're available on the remote repo, Windows *can't tell that they're symlinks anymore* (opening the file will just contain a system path to the original resource) and **I effectively lose the symlink.**\r\n\r\n2. **Crashing unexpectedly (junction hardlinks)** - When using junction hardlinks, Godot may flip the table trying to import a resource *which isn't actually there*. I learnt this the hard way - the editor may crash and the adjoining log window returns a waterfall of blood-red error logs. However, this doesn't always happen - Godot *may* play nice and reflect changes between simultaneously running Godot engine processes. The downside is that Git now assumes that the files actually exist in the repo containing the symlink, and probably creates artefacts assuming this.\r\n\r\n~~There is no workaround that allows me to *include minimal addon content which is also versionable* (I could use a `git submodule` but I'll also need to understand `git filter` and `git sparsecheckout`, so if this is something that may work I'm all ears.. er... eyes), so I ignore my project's `addons/` folder except for a file at `../addons/REQUIRES.md` that links to the plugin repo should I (or anyone on my team) wish to clone my project elsewhere, regardless of whether anyone here uses symlink clones (as per the [Link Shell Extension](https://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html) extension which makes this as easy as two clicks.)~~\r\n\r\n\r\n## **Describe the feature / enhancement and how it helps to overcome the problem or limitation**\r\n~~I do not know the specifics of how a file subsystem understands what's a symlink or not, and my knowledge of symlinks in *nix is limited to `ln -s`, but while I've read some proposals for *introducing dependency and package management* (too many to link, if you find them please don't hesitate to link them here) and come to understand the complexity in remaking the whole AssetLib system, I think a method which relies on submodules and symlinks can help bridge some gaps, and if implementing all of it is too hard, at least let Godot know about symlinks.~~\r\n\r\n\r\n## **Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams**\r\n~~Godot's file system could be updated to understand symlinks in different OSs, and treat them as special directories with references to the global filesystem, maybe with a greyed out icon, or an `@` symbol - anything that marks it from normal folders which are actual children of `res://`.~~\r\n\r\n![symlink-proposal](https://user-images.githubusercontent.com/12777564/89685301-adb5bd00-d919-11ea-94c9-54103767acd3.png)\r\n*The vision I had (Note that that either junction or symlink are optional)*\r\n\r\n~~I cannot point to the exact proposal but there was one that wanted to allow Godot to understand the global filesystem, and the owner came up with [the DSCN plugin](https://godotengine.org/asset-library/asset/274), a method to pass around scene data outside the project folder, as well as a proposal for [plugin management at the system level which was dropped](https://github.com/godotengine/godot/pull/35432).~~\r\n\r\n~~Sure, this could be a plugin level content again: write a script that~~\r\n~~- detects the OS~~\r\n~~- recognises the file path in a symlink clone file~~\r\n~~- correctly assigns the kind of symlink to make~~\r\n~~- runs the appropriate symlink command in the appropriate terminal with the appropriate privileges~~\r\n\r\n~~effectively rewiring the files pulled from the Git repo as symlinks in the appropriate platform/OS.\r\nThis satisfies my project's current requirements since I don't plan on including the *godot-debug-overlay* plugin content in a build, but Godot may need to correctly include the scripts being linked to if they're needed in a build, which AFAICT must be built into core.~~\r\n\r\n~~One could use a placeholder file (akin to `__init__.py`, `gdignore`, or similar) to mark these directories as containing symlinks, which could also be a `REQUIRES` file - while I made mine a Markdown file for readability, it should probably be a plaintext file, ideally a kind of `.cfg` file that denotes:~~\r\n~~- platform/OS agnostic symlink type, **or**~~\r\n~~- a list of OS-specific symlink types applicable to different platforms the project intends to be edited on~~\r\n\r\n~~EDIT: On second thought, it might be useful to provide such a file outside the `addons/` tree, and it should thus also include~~\r\n~~- relative path to symlinked directories or files (in `users://`? `addons://`? Allow that setting to be passed through `project.godot` in a `[requires`/`[symlink]` section? Put the whole thing outside `project.godot` in a `requires.cfg`/`links.cfg` file? I see a pattern similar to a `packages.xxx` file.)~~\r\n\r\n~~EDIT 2: It's preferable to make such an annotator agnostic to the type of symlink used, so it's better not to assume that only symlink clones will be used. The links would then rightfully belong in `project.godot` until a dependency management solution is conceived (or not).~~\r\n\r\n## **If this enhancement will not be used often, can it be worked around with a few lines of script?**\r\n~~It needs to be an editor plugin `tool` that listens to changes in the filesystem or currently checked out branch/commit, which may not be a trivial 10-line script but could be a single monolithic script, *if it doesn't support adding symlinked files to builds.* If needed, PoC can make use of node metadata.~~\r\n\r\n~~The difficulty is that the files and their symlinks look exactly the same by name from the outside to Git (Windows correctly marks symlink clones as such):~~\r\n\r\n![image](https://user-images.githubusercontent.com/12777564/89674050-19415f80-d905-11ea-8573-cfe7342b0340.png)\r\n\r\n~~The IDE knows that both are essentially the same:~~\r\n\r\n![image](https://user-images.githubusercontent.com/12777564/89674185-5f96be80-d905-11ea-9240-ee0e70bed176.png)\r\n\r\n~~Some Git GUIs detect what the symlinks actually contain:~~\r\n\r\n![image](https://user-images.githubusercontent.com/12777564/89674619-12671c80-d906-11ea-9e59-64b86b412c08.png)\r\n\r\n~~When uploaded to Git, they will also look like these single line files containing some absolute or relative path.~~\r\n\r\n~~This is a non-problem for tiny plugins - indeed even in my case I could paste the files and call it a day - but the occasionally large plugin may raise eyebrows if passed around by (figurative) value, and not as a (figurative) reference, and eyes may roll when these are copy-pasted around projects. In these cases, an optional `REQUIRES.cfg`/`requires.cfg`/`symlinks.cfg` file or optional `[requires]/[symlinks]` section to `project.godot` can be added.~~\r\n\r\n## **Is there a reason why this should be core and not an add-on in the asset library?**\r\n~~It could be another plugin that needs to be pasted into my project, but as I stated earlier:~~\r\n> ~~Godot may need to correctly include the scripts being linked to if they're needed in a build, which AFAICT must be built into core.~~\r\n\r\n~~It could be something the engine provides so that the experience with symlinks becomes seemless, without possibly getting outdated, and devs can begin to grok the problem of dependency management in its possibly its simplest, most low-level form, possibly even forming a basic dependency system that can symlink git repos (not necessarily as submodules) to give absolute freedom to users to pass their plugins around by value or by reference.~~\r\n\r\nMost of this content is largely incorrect.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1328",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1328/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1328/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1328/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1328",
    "id": 675181326,
    "node_id": "MDU6SXNzdWU2NzUxODEzMjY=",
    "number": 1328,
    "title": "Implement some API for rollback netcode",
    "user": {
      "login": "ca3games",
      "id": 19626687,
      "node_id": "MDQ6VXNlcjE5NjI2Njg3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19626687?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ca3games",
      "html_url": "https://github.com/ca3games",
      "followers_url": "https://api.github.com/users/ca3games/followers",
      "following_url": "https://api.github.com/users/ca3games/following{/other_user}",
      "gists_url": "https://api.github.com/users/ca3games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ca3games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ca3games/subscriptions",
      "organizations_url": "https://api.github.com/users/ca3games/orgs",
      "repos_url": "https://api.github.com/users/ca3games/repos",
      "events_url": "https://api.github.com/users/ca3games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ca3games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-07T18:04:01Z",
    "updated_at": "2020-11-28T16:31:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlan on making some online 2D fighters.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNeed a form of rollback netcode in my game.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nCould be a default integration with the ggpo code.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThere's already a ggpo module, but It lacks documentation and seems not polished enough.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, this requires integration with the godot engine at some level, specifically the ggpo step of resimulation the engine in a single frame, is not a trivial problem for average users.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nRollback netcode has been described as free lag experience for online games.\r\nAs such It's very beneficial not just for 2D fighters but for more genres that requires netcode, because it gives a free lag experience compared to normal online methods.\r\nIt should be a core network issue, or at least godot developers should have some discussion to see if they can use some of the ideas of ggpo specifically to improve the godot networking to a level where is a lag free experience to the users.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1327",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1327/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1327/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1327/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1327",
    "id": 675128508,
    "node_id": "MDU6SXNzdWU2NzUxMjg1MDg=",
    "number": 1327,
    "title": "Particle2D should not reset itself when you change amount",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-07T16:24:30Z",
    "updated_at": "2020-08-07T21:00:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D platform\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen you change the 'amount' value of particle2D it resets the particles, i.e. immediately stops them all then starts again. This means if you want to increase particles over time, such as in an animation player, e.g. number of flames particles increase, you cannot.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nAllow or change particle system so that increasing amount will simply continue adding more particles as required instead of stopping the particle system and restarting. I guess the same can apply to reducing...\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would presume anyone wanting to change amount will expect the particle system to not reset as it looks awful.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nit is probably as users expect.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1326",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1326/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1326/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1326/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1326",
    "id": 675097648,
    "node_id": "MDU6SXNzdWU2NzUwOTc2NDg=",
    "number": 1326,
    "title": "Animation player track/key management features",
    "user": {
      "login": "chucklepie",
      "id": 12863685,
      "node_id": "MDQ6VXNlcjEyODYzNjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12863685?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chucklepie",
      "html_url": "https://github.com/chucklepie",
      "followers_url": "https://api.github.com/users/chucklepie/followers",
      "following_url": "https://api.github.com/users/chucklepie/following{/other_user}",
      "gists_url": "https://api.github.com/users/chucklepie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chucklepie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chucklepie/subscriptions",
      "organizations_url": "https://api.github.com/users/chucklepie/orgs",
      "repos_url": "https://api.github.com/users/chucklepie/repos",
      "events_url": "https://api.github.com/users/chucklepie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chucklepie/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-07T15:40:31Z",
    "updated_at": "2020-08-07T17:22:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlatform 2D\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI added an animation player to my game, added a bezier curve for my position, then carried on and added more tracks via the 'key' icon on the inspector.\r\n\r\nWhat I didn't realise is when you use the 'key' icon create dialog defaults to bezier if you last used bezier. So all my tracks ended up bezier before I realised they weren't property tracks. I then found I could not change them.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n1. Default the track type set via the 'key' icon in the inspector to be property tracks without bezier as these are used probably 90% of the time and not the last one used, or...\r\n2. Provide a means of changing a track from one type to another, i.e. a bit like changing node types, such as changing from bezier to property track\r\n\r\nAs it stands I've now got 10 tracks, all bezier, when none of them other than the one field I wanted, makes any sense being a bezier :)\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nAs steps 1,2,3 above\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo it can't and you lose all your work unless there's a way I haven't seen.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt makes for a more intuitive and useful IDE with no drawbacks.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1325",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1325/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1325/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1325/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1325",
    "id": 674818647,
    "node_id": "MDU6SXNzdWU2NzQ4MTg2NDc=",
    "number": 1325,
    "title": "Add hint_transparent for uniforms",
    "user": {
      "login": "DrMoriarty",
      "id": 1177068,
      "node_id": "MDQ6VXNlcjExNzcwNjg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1177068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrMoriarty",
      "html_url": "https://github.com/DrMoriarty",
      "followers_url": "https://api.github.com/users/DrMoriarty/followers",
      "following_url": "https://api.github.com/users/DrMoriarty/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrMoriarty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrMoriarty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrMoriarty/subscriptions",
      "organizations_url": "https://api.github.com/users/DrMoriarty/orgs",
      "repos_url": "https://api.github.com/users/DrMoriarty/repos",
      "events_url": "https://api.github.com/users/DrMoriarty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrMoriarty/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-07T07:21:54Z",
    "updated_at": "2020-11-23T22:18:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\n2D painting game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI use a complex shader in order to make some painting effects. It uses several sampler uniform to blend the color. \r\nIf some of uniforms don't used I should to set to it special transparent texture 1x1 in order to skip some type of processing. It's just because we don't have `hint_transparent` in shader language. If I use `hint_black` of `hint_white` it only changes RGB channels and Alpha is always 1.0.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf we would have `hint_transparent` in shader languages then unused uniforms will have Alpha = 0.0 and it will not affect on result color.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nuniform sampler2D add_tex : hint_black;\r\nuniform sampler2D sub_tex : hint_black;\r\nuniform sampler2D mul_tex : hint_white;\r\nuniform sampler2D blend_tex : hint_transparent;\r\n\r\nvoid fragment() {\r\n    vec4 col = texture(TEXTURE, UV);\r\n    vec4 add_col = texture(add_tex, UV);\r\n    vec4 sub_col = texture(sub_tex, UV);\r\n    vec4 mul_col = texture(mul_tex, UV);\r\n    \r\n    col = (col * mul_col) - sub_col + add_col;\r\n    vec4 col2 = texture(blend_tex, UV);\r\n    COLOR = mix(col, col2, col2.a);\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nYes, it requires in every place where the uniform does't used use instead of it special placeholder 1x1 texture.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's just a several lines of code! I saw how implemented `hint_black`:\r\n```\r\n                glGenTextures(1, &resources.black_tex);\r\n                unsigned char blacktexdata[8 * 8 * 3];\r\n                for (int i = 0; i < 8 * 8 * 3; i++) {\r\n                        blacktexdata[i] = 0;\r\n                }\r\n\r\n                glActiveTexture(GL_TEXTURE0);\r\n                glBindTexture(GL_TEXTURE_2D, resources.black_tex);\r\n                glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 8, 8, 0, GL_RGB, GL_UNSIGNED_BYTE, blacktexdata);\r\n                glGenerateMipmap(GL_TEXTURE_2D);\r\n                glBindTexture(GL_TEXTURE_2D, 0);\r\n```\r\n\r\nWe already have 4 types of default textures. Let's add the last one and we will have the full range of options.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1325/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1323",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1323/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1323/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1323/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1323",
    "id": 674682180,
    "node_id": "MDU6SXNzdWU2NzQ2ODIxODA=",
    "number": 1323,
    "title": "New AssetLib Workflow",
    "user": {
      "login": "nonunknown",
      "id": 58845030,
      "node_id": "MDQ6VXNlcjU4ODQ1MDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/58845030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nonunknown",
      "html_url": "https://github.com/nonunknown",
      "followers_url": "https://api.github.com/users/nonunknown/followers",
      "following_url": "https://api.github.com/users/nonunknown/following{/other_user}",
      "gists_url": "https://api.github.com/users/nonunknown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nonunknown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nonunknown/subscriptions",
      "organizations_url": "https://api.github.com/users/nonunknown/orgs",
      "repos_url": "https://api.github.com/users/nonunknown/repos",
      "events_url": "https://api.github.com/users/nonunknown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nonunknown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-07T00:47:48Z",
    "updated_at": "2020-08-08T06:42:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe the project you are working on:\r\n\r\nNot Related to a project, Applicable to all community\r\n\r\n### Describe the problem or limitation you are having in your project:\r\n\r\nThe current asset store, is working fine, I'm not sure but I think Godot Maintainers pay a server to maintain it, and it relies on only\r\nfew, if not one, moderator.\r\n\r\n### Describe the feature / enhancement and how it helps to overcome the problem or limitation:\r\n\r\nMy proposal is an enhancement to the assetlib, that fully relies on github (the majority of godot users use it).\r\nThis enhancement will give the following advantages:\r\n* Fast Server Response\r\n* No needed to pay hosting\r\n* Easy Moderation due to relying on github PRs (Pull Requests)\r\n* Better workflow\r\n\r\n### Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\r\n\r\nResuming, I've made a plugin (Will post here later as this proposal evolves) that works as MVP (minimum viable product) so the reader can follow reading, and doing at the same time\r\n\r\nPS: Github personal token, from tests I've done today wasn't necessary, so it will be optional in a settings tab.\r\n\r\n##### Step - 1\r\n- After user Install and activate the plugin, will be a list with all registered assets. Since its not relied on a server, this information has to be in somewhere, in this case the plugin uses this url:\r\n\r\nhttps://github.com/nonunknown/godot-assetlib-x/blob/data/repos.json\r\n\r\n![Screenshot from 2020-08-07 18-24-34](https://user-images.githubusercontent.com/58845030/89689670-4547eb00-d8db-11ea-90c1-4ef46ed80bed.png)\r\n\r\n* PS - in case this is approved, the godot engine github account would need a new repo called: **assetlib**, there all information will be stored in a json file, like the example above.\r\n\r\nThe file above will list all assets available in the assetstore.\r\n\r\n##### Submit asset workflow\r\nIn the actual workflow the user must go to asset store page, register (again?), fulfill lots of informations and wait for approval.\r\n\r\n###### The new workflow\r\nUser goes to go to his github repo lets say: UserA/PluginA or UserB/PluginB\r\ncreate a new branch (required pattern): **assetstore**\r\n\r\nThis branch must not contain master branch's files, but these:\r\n* imgs/ - Images to show in asset lib's details\r\n* asset.json - Used by assetlib plugin\r\n* description.MD - The description is a MD(MarkDown) file, for better organization\r\n* icon.png - assetlib icon to show\r\n* dependencies.json - other plugin dependencies (optional file)\r\n- Asset.json\r\n```json\r\n{\r\n\t\"name\":\"Required Asset Name here\",\r\n\t\"author\":\"Required Name here\",\r\n\t\"category\":\"Required Category here\",\r\n\t\"license\":\"Required License here\", \r\n\t\"godot_version\": 0, \r\n\t\"version\": 0,\r\n\t\"videos\": [\"Optional urls here\"],\r\n\t\"commit\": \"latest\"\r\n}\r\n\r\n```\r\nPS: For auto-detect values read **The Future** section\r\n\r\nAfter making this new branch, the user goes to GodotEngine's AssetLib repo and create a pull request, this pull request must modify the `repos.json ` file only including the existing repo url as the following example:\r\n\r\nbefore PR\r\n```json\r\n[\r\n\t\"nonunknown/godot-sheet-manager\",\r\n\t\"usera/pluginA\"\r\n]\r\n```\r\nafter PR\r\n```json\r\n[\r\n\t\"nonunknown/godot-sheet-manager\",\r\n\t\"usera/pluginA\",\r\n\t\"userb/pluginB\"\r\n]\r\n```\r\n\r\nSo the branch assetlib containing these files will be automatically accessed by the plugin's when it requests `repos.json`\r\n\r\n#### Dependencies\r\nOne new feature, requested by many people is dependencies, since this relies on github a way to solve this problem, is adding\r\na new file to **assetlib** branch of the user's plugin.\r\n\r\n- Dependencies.json\r\n```json\r\n[\r\n\t{\r\n\t\t\"asset\": \"userC/pluginC\",\r\n\t\t\"commit\": \"latest\"\r\n\t},\r\n\t{\r\n\t\t\"asset\": \"userD/pluginD\",\r\n\t\t\"commit\": \"HUASD3357784DAS\"\r\n\t}\r\n\t\r\n]\r\n\r\n```\r\nBefore downloading any dependency, the assetlib must check if it already exists and the commit hash.\r\n\r\n### Example Repos:\r\n\r\nhttps://github.com/nonunknown/Godot-3D-text-plugin/tree/assetstore\r\nhttps://github.com/nonunknown/godot-sheet-manager/tree/assetstore\r\n\r\n#### The future\r\n\r\n* In order to automate the process, a github action can be used to check if the PR inserted url has a **assetlib** branch with the pattern mentioned above.\r\n* since the plugin uses github API , a button: \"Submit asset\" can be created, this will let users submit asset automatically by selecting\r\nthe folder and telling the program the repo URL and then the **assetlib** branch will created with required files, and everything can be\r\ndone inside the engine\r\n\r\n#### This project solves the following issues\r\n\r\n#142 - Add dependency handling and enable users to organize and publish addons and addon-collections as packages\r\n#831 - Add support for global/universal addons / **In a proper release**\r\n#554 - Allow extracting asset library assets into subfolders\r\n#139 - Add full Markdown support for use in browsing, creating, and editing projects and addons / **Partially if this is only a plugin, fully if its turn core**\r\n\r\n#### If this enhancement will not be used often, can it be worked around with a few lines of script?:\r\n\r\nThis Feature will be use by every single godot user\r\n\r\n#### Is there a reason why this should be core and not an add-on in the asset library?:\r\n\r\nThis question is answered by the pros mentioned above",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1323/reactions",
      "total_count": 4,
      "+1": 0,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1322",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1322/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1322/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1322/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1322",
    "id": 674644617,
    "node_id": "MDU6SXNzdWU2NzQ2NDQ2MTc=",
    "number": 1322,
    "title": "Add new MouseFilter to Control node",
    "user": {
      "login": "ghsoares",
      "id": 43936806,
      "node_id": "MDQ6VXNlcjQzOTM2ODA2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/43936806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghsoares",
      "html_url": "https://github.com/ghsoares",
      "followers_url": "https://api.github.com/users/ghsoares/followers",
      "following_url": "https://api.github.com/users/ghsoares/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghsoares/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghsoares/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghsoares/subscriptions",
      "organizations_url": "https://api.github.com/users/ghsoares/orgs",
      "repos_url": "https://api.github.com/users/ghsoares/repos",
      "events_url": "https://api.github.com/users/ghsoares/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghsoares/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-06T22:49:48Z",
    "updated_at": "2020-08-07T20:37:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nAn OS Simulator game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm trying to create a custom window control node where there's a _gui_input function to handle resizing, the problem is that the children is obscuring the input because of the MouseFilter, but I can't disable it. The solution would be add a control child of the window control to get any mouse event, and I though that the MouseFilter.Pass would report the input and continue the propagation, but after testing and reading the docs, the behaviour is that the input stops if is handled.\r\n\r\nI need a MouseFilter constant that allows me to handle input event, without stoping propagation (_input is not an option because I need to handle the input inside the window, and still stop the propagation to the windows behind it).\r\n\r\nI'm not using WindowDialog to create the UI because the Popup node only shows up as modal form and overlays other nodes even if in the Scene Tree is behind (even calling show() manually).\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe feature would be a MouseFilter constant that allows the control node to handle the input and continue event propagation, if a control behind it have a _unhandled_input function, it fires normally.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nI don't know how the MouseFilter works in code, but I think that when it reaches a control that handles input and have this MouseFilter constant, it don't call a function to stop the propagation.\r\n\r\nThen the MouseFilter enum would look something like this:\r\n![Temp1](https://user-images.githubusercontent.com/43936806/89590717-f0469f00-d81e-11ea-89e4-af9805f186ab.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, bacause it needs to change the core code. Or building a custom Godot version that add this feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause as I said, I think that no script can change input behaviour beyound the *_input methods provided.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1322/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1321",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1321/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1321/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1321/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1321",
    "id": 674631038,
    "node_id": "MDU6SXNzdWU2NzQ2MzEwMzg=",
    "number": 1321,
    "title": "Implement a null-coalescing operator (`??`)",
    "user": {
      "login": "nathanfranke",
      "id": 14253836,
      "node_id": "MDQ6VXNlcjE0MjUzODM2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/14253836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathanfranke",
      "html_url": "https://github.com/nathanfranke",
      "followers_url": "https://api.github.com/users/nathanfranke/followers",
      "following_url": "https://api.github.com/users/nathanfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathanfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathanfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathanfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/nathanfranke/orgs",
      "repos_url": "https://api.github.com/users/nathanfranke/repos",
      "events_url": "https://api.github.com/users/nathanfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathanfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-08-06T22:13:37Z",
    "updated_at": "2020-12-10T12:02:48Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Supersedes https://github.com/godotengine/godot/issues/7223\r\nCC @Zylann\r\n\r\n**Describe the project you are working on:**\r\nThis can work on any project, but currently I want to implement a \"Fallback\" color if the given color is null.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe ternary operator can be used as a fallback, but it is...\r\n- Superfluous: `a if a else b` rather than `a else b`.\r\n- Dangerous for non-const functions: `a() if a() else b()` calls `a()` twice.\r\n- Inefficient for high load functions: `http_get() if http_get() else cached_value`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe enhancement would be to implement an operator that simplifies this workflow. See the code example below.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nTo avoid ambiguity from boolean `or`, I propose operator `else` with alternate symbol counterpart `??`.\r\n\r\n```py\r\nfunc set_color(color: Color):\r\n    modulate = color else Color.white\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis will be used often. Currently, the workaround for slow or non-const function is:\r\n```py\r\nvar http_result = http_get()\r\nvar result = http_result if http_result else cached_value\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would not be possible to implement this in an add-on so that the code is brief. The only simplification would be a coalescing function like\r\n```py\r\nfunc coalesce(a, b):\r\n    return a if a else b\r\n```\r\n\r\nEven with the function, `b` would always be evaluated even if `a` is valid.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1321/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1320",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1320/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1320/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1320/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1320",
    "id": 674536063,
    "node_id": "MDU6SXNzdWU2NzQ1MzYwNjM=",
    "number": 1320,
    "title": "New Cull Mode for OccluderPolygon2D (LightOccluder2D)",
    "user": {
      "login": "jgrauman0",
      "id": 65253131,
      "node_id": "MDQ6VXNlcjY1MjUzMTMx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/65253131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgrauman0",
      "html_url": "https://github.com/jgrauman0",
      "followers_url": "https://api.github.com/users/jgrauman0/followers",
      "following_url": "https://api.github.com/users/jgrauman0/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgrauman0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgrauman0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgrauman0/subscriptions",
      "organizations_url": "https://api.github.com/users/jgrauman0/orgs",
      "repos_url": "https://api.github.com/users/jgrauman0/repos",
      "events_url": "https://api.github.com/users/jgrauman0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgrauman0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-08-06T19:02:32Z",
    "updated_at": "2020-08-06T19:58:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am designing a multiplayer 2D Space shooter which extensively uses Normal Maps and Lights to achieve 2.5D.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI have rendered animations of 3D asteroids along with normal maps. I have also been able to animate them and animate their collision shape 2D so that they look and react like they are in true 3D. They look amazing. I would like them to cast shadows. However, because they are rendered as 3D with a normal map, the way the light needs to cast shadows from them doesn't work with any of the existing OccluderPolygon2D cull modes. I've tried every possible combination. What is needed for a 2.5D sprite (ie. a Sprite with a normal map used as a LighOccluder2d) for them to be lit properly is for the OccluderPolygon2D to be 'closed' but for it not to cast any shadows on anything within the polygon shape itself. Because the sprite has a normal map, depending on where the light is shining from, the appropriate portion of the sprite will **already be shadowed from the normal map**. I just need it to cast shadows on *other* asteroids, ships, etc. \r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nI would like another 'cull mode' to be added to OccluderPolygon2D (LightOccluder2D) that works like culling is disabled, except that it causes there to be no light occlusion whatsoever for anything *inside* the closed light occluder shape.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nI propose simply adding another option to cull mode of OccluderPolygon2D called \"inside\" or something else that makes sense. It would cause no shadows to be cast by the LightOccluder2D to anything inside the occluder polygon.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo. I have researched extensively, and there is no way to fix this rendering bug other than adding a new cull mode. This has to do with how shadows are rendered in the engine itself.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThere is no way to fix this rendering bug other than adding a new cull mode. This has to do with how shadows are rendered in the engine itself.\r\n\r\nP.S. I am attaching a picture that shows the issue. It is extremely hard to see in a still picture, but there are rendering bugs that come from having to use an open occluder polygon and counter-clockwise culling as the closest option to what is needed.\r\nhttp://grauman.com/bug10.png",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1319",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1319/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1319/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1319/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1319",
    "id": 674510854,
    "node_id": "MDU6SXNzdWU2NzQ1MTA4NTQ=",
    "number": 1319,
    "title": "Allow usage of `is not` and `not in` in GDScript",
    "user": {
      "login": "Xascoria",
      "id": 59613709,
      "node_id": "MDQ6VXNlcjU5NjEzNzA5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/59613709?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xascoria",
      "html_url": "https://github.com/Xascoria",
      "followers_url": "https://api.github.com/users/Xascoria/followers",
      "following_url": "https://api.github.com/users/Xascoria/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xascoria/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xascoria/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xascoria/subscriptions",
      "organizations_url": "https://api.github.com/users/Xascoria/orgs",
      "repos_url": "https://api.github.com/users/Xascoria/repos",
      "events_url": "https://api.github.com/users/Xascoria/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xascoria/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-06T18:19:43Z",
    "updated_at": "2020-08-27T14:11:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** \r\nThis issue works for all projects that use the keywords \"in\" and \"is\"\r\n\r\n**Describe the problem or limitation you are having in your project:** \r\nWhen trying to use the opposite of \"in\" and \"is\", most people, especially the people who have used Python before would use \"a not in b\" and \"a is not b\" instead of \"not a in b\" and \"not a is b\". In Python, both the former and latter example works, but in GDScript only the latter is valid syntaxes.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nJust allow usage of \"a not in b\" and \"a is not b\", which not only are in Python but also make sense grammatically \r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n`a is not b #equivalent to not a is b`\r\n`a not in b #equivalent to not a in b`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe keywords themselves should be used quite oftenly, but yes its easy to have a work around.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a simple quality of life improvement that is pretty straightforward to implement and helps with the workload a lot.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1319/reactions",
      "total_count": 16,
      "+1": 14,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1318",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1318/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1318/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1318/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1318",
    "id": 674306207,
    "node_id": "MDU6SXNzdWU2NzQzMDYyMDc=",
    "number": 1318,
    "title": "Add InputEventScreenRelease",
    "user": {
      "login": "Sosasees",
      "id": 66305550,
      "node_id": "MDQ6VXNlcjY2MzA1NTUw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/66305550?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sosasees",
      "html_url": "https://github.com/Sosasees",
      "followers_url": "https://api.github.com/users/Sosasees/followers",
      "following_url": "https://api.github.com/users/Sosasees/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sosasees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sosasees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sosasees/subscriptions",
      "organizations_url": "https://api.github.com/users/Sosasees/orgs",
      "repos_url": "https://api.github.com/users/Sosasees/repos",
      "events_url": "https://api.github.com/users/Sosasees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sosasees/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-06T13:16:31Z",
    "updated_at": "2020-08-06T15:16:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n### **Describe the project you are working on:**\r\nI am porting a Computer game to Android.\r\n\r\n### **Describe the problem or limitation you are having in your project:**\r\nTo adapt the Keyboard and Controller Controls to phones, I need TouchScreenButtons.\r\nBut the stock **TouchScreenButton** nodes lack the Relative (instead of absolute) Positioning and Scaling I need to make sure that the buttons are always the correct position and size, and never go off-screen reguardless of the screen resolution.\r\nSo I want to make my own replacement using regular **Button** nodes.\r\nHowever, I could never get it close enough.\r\nThe button could pick up whenever I touched it, but I could never get it to pick up whenever I lifted my finger, so it's stuck being a toggle button:\r\n```\r\nextends Button\r\n\r\nexport (String) var action\r\n\r\nfunc _gui_input(event):\r\n\tif Input.is_action_pressed(action):\r\n\t\tInput.action_release(action)\r\n\telse:\r\n\t\tInput.action_press(action)\r\n```\r\n\r\n### **Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIf there was **`InputEventScreenRelease`**, I'd finally have a way to tell Godot what it should do when I release the Touchscreen.\r\nThis way, I could code the perfect **TouchScreenButton** all by myself, which can not only press any action, but also release it when I release the button (instaed of alternating between pressing and releasing the action every time I press the button, which is way too un-intuitive)\r\n\r\n\r\n### **Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThis would be the code for my perfect **TouchScreenButton** replacement, if **`InputEventScreenRelease`** actually existed:\r\n```\r\nextends Button\r\n\r\nexport (String) var action\r\n\r\nfunc _gui_input(event):\r\n\tif event is InputEventScreenTouch:\r\n\t\tInput.action_press(action)\r\n\telif event is InputEventScreenRelease:\r\n\t\tInput.action_release(action)\r\n```\r\n\r\n### **If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI've already searched for other ways of making the perfect **TouchScreenButton** replacement with relative position and scale, but I couldn't find anything.\r\n\r\n### **Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt only makes sense. I wouldn't even think about looking for **`InputEventScreenRelease`** in the Asset Library.\r\nIt only seems natural that this would be in the same package as **`InputEventScreenTouch`** and **`InputEventScreenDrag`**. And when it isn't, I'd think ,,Why isn't it in the same package as **`InputEventScreenTouch`** and **`InputEventSCreenDrag`**?\"\r\n\r\n### Attach a project demonstrating this proposal, or why it is needed:\r\nThis is the only section I added below the required ones. I hope that adding my own sections (and enlargening the Headlines) isn't against the rules.\r\nThis project demonstrates all the above: [TouchScreenButton(TSB)demo.zip](https://github.com/godotengine/godot-proposals/files/5034984/TouchScreenButton.TSB.demo.zip)",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1318/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1316",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1316/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1316/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1316/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1316",
    "id": 673834428,
    "node_id": "MDU6SXNzdWU2NzM4MzQ0Mjg=",
    "number": 1316,
    "title": "GDScript 4.0: Allow custom annotations which can be read at runtime",
    "user": {
      "login": "Wavesonics",
      "id": 406473,
      "node_id": "MDQ6VXNlcjQwNjQ3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/406473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Wavesonics",
      "html_url": "https://github.com/Wavesonics",
      "followers_url": "https://api.github.com/users/Wavesonics/followers",
      "following_url": "https://api.github.com/users/Wavesonics/following{/other_user}",
      "gists_url": "https://api.github.com/users/Wavesonics/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Wavesonics/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Wavesonics/subscriptions",
      "organizations_url": "https://api.github.com/users/Wavesonics/orgs",
      "repos_url": "https://api.github.com/users/Wavesonics/repos",
      "events_url": "https://api.github.com/users/Wavesonics/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Wavesonics/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-08-05T20:42:28Z",
    "updated_at": "2020-12-07T17:51:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMultiplayer game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAutomaticly serializing custom data classes\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn 4.0 GDScript now has annotations. What I propose is two fold:\r\n1. User's can declare their own custom annotations much like how Java allows you to (override a built in Annotation class)\r\n2. User's can query a classes properties and methods for their associated annotations at runtime\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n```\r\nextends Reference\r\nclass_name MyDataClass\r\n\r\n@Serialize(name=\"json_foo\")\r\nvar foo: int\r\n\r\n@Serialize\r\nvar bar: String\r\n\r\nvar x: Boolean\r\n```\r\n\r\nThen I can wrote some code to introspect `MyDataClass` and find it's properties that it wants serialized, and produce something like:\r\n```\r\n{\r\n    \"json_foo\": 0,\r\n    \"bar\": \"test\"\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be worked around, it will just be less flexible and elegant.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAt least this particular approach would not be possible without support from GDScript it's self. But other approaches are possible, such as just listing all of the properties using the current inspection methods, and serializing all of them.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1316/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1315",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1315/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1315/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1315/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1315",
    "id": 673791032,
    "node_id": "MDU6SXNzdWU2NzM3OTEwMzI=",
    "number": 1315,
    "title": "Add a disable tooltip function for the TreeItem object",
    "user": {
      "login": "Reno57",
      "id": 19251706,
      "node_id": "MDQ6VXNlcjE5MjUxNzA2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/19251706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Reno57",
      "html_url": "https://github.com/Reno57",
      "followers_url": "https://api.github.com/users/Reno57/followers",
      "following_url": "https://api.github.com/users/Reno57/following{/other_user}",
      "gists_url": "https://api.github.com/users/Reno57/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Reno57/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Reno57/subscriptions",
      "organizations_url": "https://api.github.com/users/Reno57/orgs",
      "repos_url": "https://api.github.com/users/Reno57/repos",
      "events_url": "https://api.github.com/users/Reno57/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Reno57/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-05T19:25:39Z",
    "updated_at": "2020-08-05T20:29:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nMaking a Quest Journal user interface for a RPG game project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI use TreeItem control node to achieve this function, the display of the three Item is not satisfactory because tooltips always appear above the TreeItem.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\n\r\nThere is no possibility to disable tooltips in TreeItem (these features are not very well documented). I asked the community, I was advised to turn on github. Please add the ability for the TreeItem to disable tooltips.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\nThe result is quite obvious, i think.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThe code : item.set_tooltip(0, \" \") seems to do the job but it's not as clean as a built-in function\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause it's relative to TreeItem Object.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1315/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1314",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1314/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1314/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1314/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1314",
    "id": 673659639,
    "node_id": "MDU6SXNzdWU2NzM2NTk2Mzk=",
    "number": 1314,
    "title": "get_open_scenes() should return an Array of Nodes(Scenes) instead of an Array of Nodes.filename(Scenes.filename)",
    "user": {
      "login": "ailernx",
      "id": 28108603,
      "node_id": "MDQ6VXNlcjI4MTA4NjAz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/28108603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ailernx",
      "html_url": "https://github.com/ailernx",
      "followers_url": "https://api.github.com/users/ailernx/followers",
      "following_url": "https://api.github.com/users/ailernx/following{/other_user}",
      "gists_url": "https://api.github.com/users/ailernx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ailernx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ailernx/subscriptions",
      "organizations_url": "https://api.github.com/users/ailernx/orgs",
      "repos_url": "https://api.github.com/users/ailernx/repos",
      "events_url": "https://api.github.com/users/ailernx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ailernx/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-05T16:01:56Z",
    "updated_at": "2020-08-06T14:01:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nPlugin that makes changes in scenes components importing a custom file.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI can only get the path of the open scenes I cannot get the scenes itself. This makes very difficulty avoid inconsistencies because if I only edit scenes with the plugin getting by path and press \"play project\" the editor will \"accidentaly\" save open scenes and overwrite all changes that plugin did. Close all scenes every time before import is impracticable.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nChange EditorInterface.get_open_scenes() to return scenes instead of scenes.filename will help plugins decide to make changes in scenes getting by editor if they are open. Doing this will avoid inconsistencies between scenes open and their files.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMy proposal is remove \"->get_filename()\" from this line:\r\n\r\nhttps://github.com/godotengine/godot/blob/f8c066e97eec9c936d5e809328144d7af21acd0d/editor/editor_plugin.cpp#L216\r\n\r\nBTW filename will easily geted by something like that:\r\n\r\nAssuming EI is EditorInterface geted.\r\n\r\n```\r\nfor f in EI.get_open_scenes():\r\n    print(f.filename)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI can't find a way to get scenes outside the core.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1314/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1313",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1313/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1313/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1313/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1313",
    "id": 673530277,
    "node_id": "MDU6SXNzdWU2NzM1MzAyNzc=",
    "number": 1313,
    "title": "Optional centered Scene on \"Play Scene\"",
    "user": {
      "login": "letsgamedev",
      "id": 4989757,
      "node_id": "MDQ6VXNlcjQ5ODk3NTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4989757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/letsgamedev",
      "html_url": "https://github.com/letsgamedev",
      "followers_url": "https://api.github.com/users/letsgamedev/followers",
      "following_url": "https://api.github.com/users/letsgamedev/following{/other_user}",
      "gists_url": "https://api.github.com/users/letsgamedev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/letsgamedev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/letsgamedev/subscriptions",
      "organizations_url": "https://api.github.com/users/letsgamedev/orgs",
      "repos_url": "https://api.github.com/users/letsgamedev/repos",
      "events_url": "https://api.github.com/users/letsgamedev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/letsgamedev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-08-05T13:14:41Z",
    "updated_at": "2020-08-05T15:50:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2d Pixel Art Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAll my Scenes like Player, Enemies, Objekt having their origin point at 0,0.\r\nBefore I test the Scenes in the real game I run the single scene with \"Play Scene\" button (cmd+r)\r\nThe problem is, that 0,0 is always at the top left side, which is correct but not very useful in that case.\r\n\r\nEnemy in editor origin position on 0,0\r\n<img width=\"2560\" alt=\"Bildschirmfoto 2020-08-05 um 15 04 40\" src=\"https://user-images.githubusercontent.com/4989757/89416889-3c65e680-d72e-11ea-85a6-de858885c95a.png\">\r\n\r\n\r\nLooks useless with \"Play Scene\"\r\n<img width=\"660\" alt=\"Bildschirmfoto 2020-08-05 um 15 04 50\" src=\"https://user-images.githubusercontent.com/4989757/89416869-32dc7e80-d72e-11ea-880c-a0ea6513f68a.png\">\r\n\r\n\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIt would be nice if it would be possible to play a single scene so, that the 0,0 point is in the center of the Window to see the whole object.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nMaybe an option in the editor configs or instead of cmd+r it would be cmd+opt+r or so, to activate the centered version.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe Workaround is to drag the object to another position, but that can lead to problems especially with coded positions.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is a common problem, cause 0,0 is a natural center point for objects.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1312",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1312/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1312/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1312/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1312",
    "id": 673330813,
    "node_id": "MDU6SXNzdWU2NzMzMzA4MTM=",
    "number": 1312,
    "title": "When creating a new project the default path should be the same as the parent of your last project",
    "user": {
      "login": "louisgjohnson",
      "id": 12892064,
      "node_id": "MDQ6VXNlcjEyODkyMDY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12892064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/louisgjohnson",
      "html_url": "https://github.com/louisgjohnson",
      "followers_url": "https://api.github.com/users/louisgjohnson/followers",
      "following_url": "https://api.github.com/users/louisgjohnson/following{/other_user}",
      "gists_url": "https://api.github.com/users/louisgjohnson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/louisgjohnson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/louisgjohnson/subscriptions",
      "organizations_url": "https://api.github.com/users/louisgjohnson/orgs",
      "repos_url": "https://api.github.com/users/louisgjohnson/repos",
      "events_url": "https://api.github.com/users/louisgjohnson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/louisgjohnson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-05T07:46:26Z",
    "updated_at": "2020-08-06T11:44:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:** N/A\r\n\r\n**Describe the problem or limitation you are having in your project:** When creating a new project it doesn't suggest the last place I had a project e.g: `C:/Users/Louis/Desktop/Godot/`\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nWhen the user creates a new project is suggests putting that new project inside the folder of where you last had a project.\r\n\r\nlast: `C:/Users/Louis/Desktop/Godot/ProjectA`\r\nsuggested: `C:/Users/Louis/Desktop/Godot/ProjectB`\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n1. Check if the user has a previous godot project\r\n2. if so suggest that parent folder as the new location for your project with the project name as the folder container\r\n3. else use the default path\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Not sure\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** It seems like a lot of programs and other game engines work this way and it's a lot more convenient \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1312/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1311",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1311/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1311/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1311/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1311",
    "id": 673304338,
    "node_id": "MDU6SXNzdWU2NzMzMDQzMzg=",
    "number": 1311,
    "title": "Add a `const`/`final` qualifier for methods that shouldn't be overridden",
    "user": {
      "login": "jonbonazza",
      "id": 1424843,
      "node_id": "MDQ6VXNlcjE0MjQ4NDM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424843?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonbonazza",
      "html_url": "https://github.com/jonbonazza",
      "followers_url": "https://api.github.com/users/jonbonazza/followers",
      "following_url": "https://api.github.com/users/jonbonazza/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonbonazza/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonbonazza/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonbonazza/subscriptions",
      "organizations_url": "https://api.github.com/users/jonbonazza/orgs",
      "repos_url": "https://api.github.com/users/jonbonazza/repos",
      "events_url": "https://api.github.com/users/jonbonazza/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonbonazza/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-05T07:00:30Z",
    "updated_at": "2020-11-14T02:27:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMMO framework\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI have some classes that I want users to be able to extend, but there's certain methods of those classes that I don't want them to be able to override, as they are integral to the function of the overall framework.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nIn many languages, functions/methods can be marked as `const` or `final` which tells the compiler/interpreter that it cannot be overridden. I suggest the same design for GDScript. Since we already have `const` for constants, we might as well just use that here too.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\n\r\n```gdscript\r\n# the function is marked as const, so subclasses cannot override it.\r\nconst func foo(bar : String) -> void:\r\n    print(bar)\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt cannot currently be worked around easily.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nGDScript is a core component.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1311/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1309",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1309/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1309/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1309/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1309",
    "id": 673074819,
    "node_id": "MDU6SXNzdWU2NzMwNzQ4MTk=",
    "number": 1309,
    "title": "Ability to automatically create a polygon in the Polygon2D UV editor ",
    "user": {
      "login": "nesja",
      "id": 22263042,
      "node_id": "MDQ6VXNlcjIyMjYzMDQy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22263042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nesja",
      "html_url": "https://github.com/nesja",
      "followers_url": "https://api.github.com/users/nesja/followers",
      "following_url": "https://api.github.com/users/nesja/following{/other_user}",
      "gists_url": "https://api.github.com/users/nesja/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nesja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nesja/subscriptions",
      "organizations_url": "https://api.github.com/users/nesja/orgs",
      "repos_url": "https://api.github.com/users/nesja/repos",
      "events_url": "https://api.github.com/users/nesja/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nesja/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-04T20:52:51Z",
    "updated_at": "2020-12-26T21:18:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\nPlease fill in *all* the questions below and don't remove any of them.\r\nProposals not following the template below will be closed immediately.\r\n-->\r\n\r\n**Describe the project you are working on:**\r\nI am working on a project based on many objects with 2D mesh deformations using Polygon2D\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt takes a long time to create a polygon manually by selecting each vertex point, if the shape has a significant number of points.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nThe smallest improvement I can suggest is the automatic creation of a polygon based on previously added vertex points. Mesh density can be maximized, and can be manually optimized in desired areas. An ideal improvement would be a fully automatic creation of polygons with their vertexes based on the alpha channel of the image with mesh density settings. This will allow to create objects much faster than it is now.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nThe simplest implementation of the interface is just a button in the polygon editor that generates a polygon.\r\nAlso, the polygon generation algorithm does not have to be super fast, since the process takes place only in the editor and in any case will be faster than manual generation. So anything that connects the nearest points into triangles will do.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt looks like this enhancement will significantly affect the user experience and will allow to unleash the potential of the functionality that already exists in Godot, will give the opportunity to abandon external animation editors, such as Spine, DragonBones, which allow to create complex meshes, but have issues using with Godot. So I think it's worth adding this feature to the editor.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1308",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1308/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1308/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1308/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1308",
    "id": 673060130,
    "node_id": "MDU6SXNzdWU2NzMwNjAxMzA=",
    "number": 1308,
    "title": "Switch from current debugger protocol to DAP",
    "user": {
      "login": "ofrank123",
      "id": 15386897,
      "node_id": "MDQ6VXNlcjE1Mzg2ODk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15386897?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ofrank123",
      "html_url": "https://github.com/ofrank123",
      "followers_url": "https://api.github.com/users/ofrank123/followers",
      "following_url": "https://api.github.com/users/ofrank123/following{/other_user}",
      "gists_url": "https://api.github.com/users/ofrank123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ofrank123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ofrank123/subscriptions",
      "organizations_url": "https://api.github.com/users/ofrank123/orgs",
      "repos_url": "https://api.github.com/users/ofrank123/repos",
      "events_url": "https://api.github.com/users/ofrank123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ofrank123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-04T20:25:50Z",
    "updated_at": "2020-08-05T15:33:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGetting a debugger for Godot working in Emacs.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nGodot does not currently follow the [DAP](https://microsoft.github.io/debug-adapter-protocol/) protocol, and as such for each text editor a standalone client must be written, instead of the existing DAP client that almost all modern text editors have available.\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI would like to switch the debugger to the follow the DAP protocol.  In addition I can try to switch the current VSCode debugger to DAP.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIt will work very similarly to the current debugger, it will just be standarized.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis is changing core godot functionality, not an add on.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1307",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1307/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1307/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1307/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/1307",
    "id": 673037637,
    "node_id": "MDU6SXNzdWU2NzMwMzc2Mzc=",
    "number": 1307,
    "title": "Unit/integration testing: creating a system to run different test contexts",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-08-04T19:43:30Z",
    "updated_at": "2020-09-30T12:01:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine.\r\n\r\n__*Context:*__\r\nUnit testing is introduced in godotengine/godot#40148 by @RevoluPowered.\r\nTests being ported currently in godotengine/godot#40659 by me and other contributors.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nPorting existing or creating new tests to use the new `doctest` testing framework was so far a smooth experience covering simple data structures and classes: \r\n\r\n- godotengine/godot#40676\r\n- godotengine/godot#40850\r\n\r\nLater we've figured that some tests implement some random stress testing:\r\n\r\n- godotengine/godot#40835\r\n- godotengine/godot#40940\r\n\r\nThis is mostly not an issue as long as those tests don't eat up CI resources. So far we've established a convention to mark those kind of test cases with a `[Stress]` tag, so they can be easily filtered out from running on the CI in the future, because those kind of tests might be worth running on a separate instance instead, say fuzz testing as proposed in #168.\r\n\r\nAll those tests required the initialization of just `OS` singleton and the `StringName` cache (because of the error macros existing throughout the engine internals).\r\n\r\nThe real problem appeared (which this proposal aims to discuss) is when I've started to port existing `ClassDB` tests: godotengine/godot#40980. This kind of testing requires the initialization of `ClassDB` and all the types within the engine. At first I've just called `Main::setup()` and kept deleting every single line of code there to determine the exact minimum setup required in order for `ClassDB` to get tested. I've managed to exclude the initialization of most rendering, audio, input, servers etc, and fixed everything which implicitly used to depend on the existence of those entities.\r\n\r\nWhile I think that it's important being able to isolate the code for unit testing to achieve best results, I think that we need to provide some practical way of ensuring what kind of subsystems need to be initialized for different kinds of tests we'll need to implement (without code duplication).\r\n\r\n\r\n**Describe the feature / enhancement and how it helps to overcome the problem or limitation:**\r\nI propose that we create a system which allows to switch different test context depending on whether you need to test just the core functionality or the engine as a whole.\r\n\r\n__*Different test context:*__\r\n\r\n1. The data structures built upon atomic types can be tested without initializing most of the engine.\r\n2. More complex tests like `ClassDB` testing do require initializing more stuff apart from `OS::get_singleton()->initialize()`... So this requires another context.\r\n3. Some yet-to-be-ported tests most likely require a `MainLoop`, demanding another context: physics, rendering, audio etc.\r\n4. Full-blown integration tests which may also require running `project.godot` projects (just initialize all as in `Main::setup()`). For instance, this is where a project like [The-worst-Godot-test-project](https://github.com/qarmin/The-worst-Godot-test-project) by @qarmin could be run, certainly not on the CI side but on the fuzzer as proposed in #168. The doctest framework can be reused through filtering test cases.\r\n\r\nOf course that totally depends on whether you're OK supporting these kind of contexts, but according to previous (now obsolete) tests, many required a `MainLoop` to be running.\r\n\r\nIf you ask my opinion, I don't quite see the point of testing something only in isolation, that's far from practical and that's not how most users utilize the engine, so I think we'll certainly benefit from having those kind of integration tests.\r\n\r\n**Describe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:**\r\nIf you look at `tests/test_main.cpp`, doctest already has a concept of a test context:\r\n```cpp\r\nint test_main(int argc, char *argv[]) {\r\n\t// Doctest runner.\r\n\tdoctest::Context test_context;\r\n\tList<String> valid_arguments;\r\n```\r\n\r\nThe actual tests are run with `test_context.run()`. The \"problem\" is that doctest doesn't really provide any callbacks for tests `setup` and `teardown` as seen in other frameworks. You *could* make a test case initialize and finalize stuff, but that means adding those callbacks in every single test case...\r\n\r\nSo, I propose creating several test context for each type of testing as described above. This would look something like the following:\r\n\r\n```cpp\r\ndoctest::Context test_context_core; // Just OS::initialize().\r\ndoctest::Context test_context_engine; // No rendering.\r\ndoctest::Context test_context_mainloop; // Need to call something every frame.\r\ndoctest::Context test_context_project; // Main::setup().\r\n// ... etc ?\r\n``` \r\n\r\nThe exact test cases which need to be run (and which depend on initialization of those subsystems) would be determined by hard-coding the filter via code:\r\n\r\n```cpp\r\ntest_context_core.setOption(\"test-suite\", \"*[Requires:Core]*\");\r\ntest_context_engine.setOption(\"test-suite\", \"*[Requires:Engine]*\");\r\n```\r\n\r\nOr just simply reorganize the tests into folders (not sure if this would work):\r\n\r\n```cpp\r\ntest_context_core.setOption(\"source-file\", \"*core/test_*\");\r\ntest_context_engine.setOption(\"source-file\", \"*engine/test_*\");\r\n```\r\n\r\nThen run each test context individually and collect exit codes from each. Rough example:\r\n\r\n```cpp\r\nbool result = true;\r\nfor (int i = 0; i < test_contexts.size(); ++i) {\r\n    test_context[i]->setup();\r\n    result = results && test_contexts[i].run();\r\n    test_context[i]->teardown();\r\n}\r\n```\r\n\r\nIf any context fails, it would fail all tests (for CI), but again they all would run somewhat independently of each other. To make it even more clean, those contexts could be run individually from a bash script instead. This also achieves proper ordering of tests being run. Currently if you run the tests, [the order of test cases is not guaranteed](https://github.com/onqtam/doctest/blob/master/doc/markdown/testcases.md):\r\n\r\n> Tests are registered from top to bottom of each processed cpp after the headers have been preprocessed and included but there is no ordering between cpp files.\r\n\r\nSo you may end up in a situation that you first test `ClassDB` and then test the data structures later on, but then you can't because it crashed from running previous tests...\r\n\r\nOf course the downside of using bash scripts is that you'll need to run each test \"by hand\". But we could also make it an option to run all tests, I think it's somewhat trivial to implement.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nHave to write duplicate initialization and cleanup code for anything more complex than testing data structures, too much work and error-prone.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI *think* it *might* be possible to achieve via modules in some way given godotengine/godot#40720, but likely you'd have to implement some kind of callback for modules before any initialization is run by the engine itself (including requiring you to parse `argc,argv` yourself). But this is not the idea, the idea is about the core functionality of the testing framework, which should be stable and robust by definition.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/1307/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
