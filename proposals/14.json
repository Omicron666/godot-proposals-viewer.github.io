[
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/242",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/242/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/242/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/242/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/242",
    "id": 525017418,
    "node_id": "MDU6SXNzdWU1MjUwMTc0MTg=",
    "number": 242,
    "title": "Add \"restore purchases completed/failed\" notifications to iOS IAP",
    "user": {
      "login": "johngirvin",
      "id": 672750,
      "node_id": "MDQ6VXNlcjY3Mjc1MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/672750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johngirvin",
      "html_url": "https://github.com/johngirvin",
      "followers_url": "https://api.github.com/users/johngirvin/followers",
      "following_url": "https://api.github.com/users/johngirvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/johngirvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johngirvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johngirvin/subscriptions",
      "organizations_url": "https://api.github.com/users/johngirvin/orgs",
      "repos_url": "https://api.github.com/users/johngirvin/repos",
      "events_url": "https://api.github.com/users/johngirvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johngirvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318633,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NjMz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:ios",
        "name": "platform:ios",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-19T13:42:12Z",
    "updated_at": "2020-09-18T21:53:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGame with iOS IAP\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere are no notifications sent to GDScript when iOS \"restore purchases\" completes or fails overall.\r\n\r\nAt present, notifications are sent to GDScript for each purchase restored. However in the cases where (1) the user does not have any purchases to restore, and (2) restore purchases fails, no notifications are sent and it is impossible for the GDScript code to react correctly. For example, by updating whatever restore purchase UI the game has implented.\r\n\r\nA workaround is perhaps to set a maximum time limit on the restore process, but this is unreliable, a poor end-user experience and generally unsatisfactory.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nBy introducing new notifications it will be possible for GDScript on iOS to react correctly to the cases above.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nImplement the `SKPaymentTransactionObserver` `paymentQueueRestoreCompletedTransactionsFinished` and `restoreCompletedTransactionsFailedWithError` methods in `platform/iphone/in_app_store.mm`\r\n\r\nSample code:\r\n```\r\n- (void)paymentQueueRestoreCompletedTransactionsFinished:(SKPaymentQueue *)queue {\r\n    Dictionary ret;\r\n    ret[\"type\"]   = \"restore\";\r\n    ret[\"result\"] = \"completed\";\r\n    InAppStore::get_singleton()->_post_event(ret);\r\n}\r\n\r\n- (void)paymentQueue:(SKPaymentQueue *)queue restoreCompletedTransactionsFailedWithError:(NSError *)error {\r\n    Dictionary ret;\r\n    ret[\"type\"]   = \"restore\";\r\n    ret[\"result\"] = \"error\";\r\n    ret[\"error\"]  = String::utf8([error.localizedDescription UTF8String]);\r\n    InAppStore::get_singleton()->_post_event(ret);\r\n}\r\n```\r\n\r\nThis will send new notifcations to GDScript, similar to the existing iOS IAP notifications, when the restore purchases process completes or fails overall.\r\n\r\nFWIW, I am sucessfully using code similar to this in a released iOS game with a custom build of Godot 3.1\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. This must be implemented at the iOS platform level.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe `SKPaymentTransactionObserver` protocol is implemented in the iOS platform code in `platform/iphone/in_app_store.mm`. The required new methods are part of this implementation and so must be added in the same place.\r\n\r\nI understand a redesign of IAP may be in consideration with the aim of unifying the IAP GDScript API across Android and iOS (I was unable to find an existing issue for this, if it exists). The new notifications proposed here should be part of that design.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/241",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/241/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/241/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/241/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/241",
    "id": 524219802,
    "node_id": "MDU6SXNzdWU1MjQyMTk4MDI=",
    "number": 241,
    "title": "Add option to deactivate the Mono \"build error\" window",
    "user": {
      "login": "Torguen",
      "id": 19652075,
      "node_id": "MDQ6VXNlcjE5NjUyMDc1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19652075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Torguen",
      "html_url": "https://github.com/Torguen",
      "followers_url": "https://api.github.com/users/Torguen/followers",
      "following_url": "https://api.github.com/users/Torguen/following{/other_user}",
      "gists_url": "https://api.github.com/users/Torguen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Torguen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Torguen/subscriptions",
      "organizations_url": "https://api.github.com/users/Torguen/orgs",
      "repos_url": "https://api.github.com/users/Torguen/repos",
      "events_url": "https://api.github.com/users/Torguen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Torguen/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-18T08:49:13Z",
    "updated_at": "2019-11-25T21:35:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny minimal or big project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe window that appears when there is a code error can be annoying and a waste of time for the developer.\r\nThis window does not indicate anything, and you just have to close it, the details of the error are indicated in the debug panel.\r\n![1](https://user-images.githubusercontent.com/19652075/69037461-38e7cf00-09e8-11ea-9625-da4b72eeded6.png)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf there were the option to disable this window it would be more convenient for many developers.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdd an option to the editor to disable this window.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI'm not sure that this can be done with an asset library add-on.\r\n\r\n---\r\n\r\nGodot is amazing, thanks to all the collaborators and the community.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/241/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/240",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/240/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/240/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/240/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/240",
    "id": 524115281,
    "node_id": "MDU6SXNzdWU1MjQxMTUyODE=",
    "number": 240,
    "title": "Allow enums and local classes to be used outside of the file they are defined",
    "user": {
      "login": "telaviv",
      "id": 192675,
      "node_id": "MDQ6VXNlcjE5MjY3NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/192675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/telaviv",
      "html_url": "https://github.com/telaviv",
      "followers_url": "https://api.github.com/users/telaviv/followers",
      "following_url": "https://api.github.com/users/telaviv/following{/other_user}",
      "gists_url": "https://api.github.com/users/telaviv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/telaviv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/telaviv/subscriptions",
      "organizations_url": "https://api.github.com/users/telaviv/orgs",
      "repos_url": "https://api.github.com/users/telaviv/repos",
      "events_url": "https://api.github.com/users/telaviv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/telaviv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-18T03:37:23Z",
    "updated_at": "2020-10-29T22:44:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D Fighting Game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm writing my project using entirely static typing. Unfortunately, it's currently impossible to share something as simple as enum definition across multiple files. Let's say I have an enum definition in 1 file like so:\r\n\r\n```\r\n# attacks_enum.gd\r\nenum Attacks {\r\n    Normal,\r\n    Special,\r\n    Aerial,\r\n}\r\n```\r\n\r\nIf I'd like to use this definition across files outside of `attacks_enum.gd`, I'm completely out of luck.\r\n\r\n```\r\n# slime.gd\r\n\r\nfunc attack(attack: Attacks):\r\n    pass\r\n``` \r\n\r\n```\r\n# vampire.gd\r\n\r\nfunc attack(attack: Attacks):\r\n    pass\r\n```\r\n\r\nThe same goes for classes defined using the `class` keyword\r\n```\r\n# puppet.gd\r\nclass Puppet:\r\n    pass\r\n```\r\n\r\n```\r\n# game_simulation.gd\r\n\r\nfunc move_puppet(puppet: Puppet):\r\n    pass\r\n```\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe solution I propose will allow the use of the class name for both referencing the class as well as static typing for method definitions.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nMy solution would be to have both the `enum` and `class` keywords make their definitions global by default similar to how the `class_name` keyword works. This would be a breaking change to how things currently work since now there would be a possibility of global name conflict in existing projects.\r\n\r\nThis suggestion makes the assumption that most of the time you want to enum/class definition, you really want to use it across your project. For use cases where you really want your enum/class definitions just in your file I propose a new keyword. `local`. It would work like this:\r\n\r\n```\r\n# local.gd\r\nlocal enum Attacks {\r\n    Normal,\r\n    Special,\r\n    Aerial,\r\n}\r\n\r\nlocal class Puppet:\r\n    pass\r\n```\r\n\r\n```\r\n# other.gd\r\nfunc attack(attack: Attacks): # this fails because Attacks is out of scope\r\n    pass\r\n\r\nfunc move_puppet(puppet: Puppet): # this fails because Puppet is out of scope\r\n    pass\r\n```\r\n\r\nSimilarly if we don't want a breaking change, and if we believe that users would prefer a more explicit way of sharing enums/classes we can instead introduce a `global` keyword.\r\n\r\n ```\r\n# global.gd\r\nglobal enum Attacks {\r\n    Normal,\r\n    Special,\r\n    Aerial,\r\n}\r\n\r\nglobal class Puppet:\r\n    pass\r\n```\r\n\r\n```\r\n# other.gd\r\nfunc attack(attack: Attacks): # this works because Attacks is in scope\r\n    pass\r\n\r\nfunc move_puppet(puppet: Puppet): # this works because Puppet is in scope\r\n    pass\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nFor the case of the `class` keyword, yes. You can create a new file and use the new `class_name` keyword to have a global reference to the class. For `enum`, the best you can do is copy and paste the definition every time you want to reference it. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nWhen it comes to implementation of things that involve scopes, that needs to be a language level detail.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/240/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/239",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/239/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/239/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/239/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/239",
    "id": 524030156,
    "node_id": "MDU6SXNzdWU1MjQwMzAxNTY=",
    "number": 239,
    "title": "Suggest function names in the signal connection dialog",
    "user": {
      "login": "evsey9",
      "id": 7791364,
      "node_id": "MDQ6VXNlcjc3OTEzNjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7791364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/evsey9",
      "html_url": "https://github.com/evsey9",
      "followers_url": "https://api.github.com/users/evsey9/followers",
      "following_url": "https://api.github.com/users/evsey9/following{/other_user}",
      "gists_url": "https://api.github.com/users/evsey9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/evsey9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/evsey9/subscriptions",
      "organizations_url": "https://api.github.com/users/evsey9/orgs",
      "repos_url": "https://api.github.com/users/evsey9/repos",
      "events_url": "https://api.github.com/users/evsey9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/evsey9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-17T19:17:38Z",
    "updated_at": "2020-11-14T02:34:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am currently working on a 2D physics puzzle-platformer. I want to make a system where each component has input signals that trigger specific functions, and output signals, and you can easily connect different component objects through the editor to quickly design puzzles.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI plan to have multiple different objects/components in a scene that would be connected using signals from levers/buttons/pressure plates/etc. to the components. Currently, there is only very simple and basically useless signal name suggestion - it consists of _on, the node name and signal name, which does not represent any functions that already might be in the code, requiring me to go check the code frequently so that I make sure to use the already existing functions and dont accidentally make a new one.\r\nMy proposal is a simple feature: show suggested function names in the editor when you are connecting a signal to another node (It could show all function names that start with _ (excluding _ready, _process and _physics_process) or by some other criteria .)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis feature would allow for faster and easier creation of different rooms/puzzles involving many different types of objects without having to look at the code constantly.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/7791364/69012547-e16e4280-0998-11ea-81b6-4bc66c19da43.png)\r\n\r\nThis is how the signal connect screen could be changed to look like, or maybe decrease the size of the \"Extra Call Arguments\" window on the right, since it takes up 50% of the space.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nsadly not experienced with developing for Godot\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI am not sure you can work around that with a few lines of script\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis feature would also allow for people less experienced with code/not willing to look through huge amounts of code to easier work with signals, and prevent accidental creation of duplicate functions, resulting in faster code development.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/239/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/237",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/237/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/237/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/237/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/237",
    "id": 523884071,
    "node_id": "MDU6SXNzdWU1MjM4ODQwNzE=",
    "number": 237,
    "title": "Save the exact Godot version number to `project.godot`",
    "user": {
      "login": "RobKohr",
      "id": 26756,
      "node_id": "MDQ6VXNlcjI2NzU2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobKohr",
      "html_url": "https://github.com/RobKohr",
      "followers_url": "https://api.github.com/users/RobKohr/followers",
      "following_url": "https://api.github.com/users/RobKohr/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobKohr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobKohr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobKohr/subscriptions",
      "organizations_url": "https://api.github.com/users/RobKohr/orgs",
      "repos_url": "https://api.github.com/users/RobKohr/repos",
      "events_url": "https://api.github.com/users/RobKohr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobKohr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-16T19:13:05Z",
    "updated_at": "2020-05-03T19:06:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a [Godot Asset Store](https://godotasset.store)\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nLooking at files in project directories isn't helpful in identifying what version of godot this project works with (or at least was developed with). \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI am going to have it so users can easily submit godot projects, and it would be helpful to know what version of godot a project was built with\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWhenever config or scene files are saved, it will add something like\r\n\r\n```godot_version=3.1```\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, this would have to be a fundamental change in how the engine saves data files\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis would be useful in the general evolution of godot for handling file versions and migrations to newer versions of godot. If something in one version was different in another, when upgrading, such differences can be highlighted. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/236",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/236/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/236/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/236/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/236",
    "id": 523857551,
    "node_id": "MDU6SXNzdWU1MjM4NTc1NTE=",
    "number": 236,
    "title": "Implement semi-fixed timestep / manual stepping",
    "user": {
      "login": "lawnjelly",
      "id": 21999379,
      "node_id": "MDQ6VXNlcjIxOTk5Mzc5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21999379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lawnjelly",
      "html_url": "https://github.com/lawnjelly",
      "followers_url": "https://api.github.com/users/lawnjelly/followers",
      "following_url": "https://api.github.com/users/lawnjelly/following{/other_user}",
      "gists_url": "https://api.github.com/users/lawnjelly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lawnjelly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lawnjelly/subscriptions",
      "organizations_url": "https://api.github.com/users/lawnjelly/orgs",
      "repos_url": "https://api.github.com/users/lawnjelly/repos",
      "events_url": "https://api.github.com/users/lawnjelly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lawnjelly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-16T15:20:59Z",
    "updated_at": "2020-10-13T14:11:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nGodot currently only supports fixed timestep. While this is my preferred method, in most cases it requires the use of fixed timestep interpolation in order to prevent jitter due to aliasing between physics ticks and frames.\r\n\r\nThis interpolation is now supported via https://github.com/godotengine/godot/pull/30226 ,\r\nexample addon here: https://github.com/lawnjelly/smoothing-addon \r\n\r\nDuring the development of the above, a simpler alternative strategy was also discussed (used by default in some engines, e.g. Unreal) to overcome this same problem of physics ticks / frame synchronisation - the use of semi-fixed timestep. This can be simpler to work with, particularly for beginners and game jams, and can provide a more responsive input experience in certain circumstances.\r\n\r\nOn the other hand, semi-fixed can suffer from lack of deterministic behaviour. This can make debugging, testing and QA difficult in some types of game (hence why I personally prefer using fixed timestep interpolation). This is a trade off.\r\n\r\nAnyway in the interests of a rounded approach to the problem I investigated semi-fixed as well as fixed.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nSemi-fixed time step overcomes the need to use fixed timestep interpolation. Semi-fixed timestep can be used to limit the problem of physics 'explosion' due to too high deltas, when stepping physics by frame deltas, and can also be used to lock physics ticks to frames, or the frame rate.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI've already implemented semi-fixed using a hard coded path.\r\n\r\nSemi-fixed logic is something like this:\r\n```\r\nfloat MAX_PHYSICS_DELTA_MS = 16.0f;\r\n\r\nmain::frame_iteration(float deltaMS)\r\n{\r\n// how many whole ticks\r\nint nPhysicsTicks = floor(deltaMS / MAX_PHYSICS_DELTA_MS);\r\nfor (int n=0; n<nPhysicsTicks; n++)\r\n    _physics_process(MAX_PHYSICS_DELTA_MS);\r\n\r\n// always do a fractional physics tick\r\nfloat leftMS = deltaMS - (nPhysicsTicks * MAX_PHYSICS_DELTA_MS);\r\n_physics_process(leftMS);\r\n\r\n// frame update\r\n_process(deltaMS);\r\n}\r\n```\r\n\r\nThis is the semi-fixed timestep selectable in project settings (note that delta smoothing is not part of this PR):\r\n![timesteps](https://user-images.githubusercontent.com/21999379/68994334-b6410180-0879-11ea-9b98-e6d1eaf4f841.jpg)\r\n\r\nIf we do decide to add semi-fixed, it is notable that it can either be hard coded (as I have done already), or implemented as a customizable callback in e.g. gdscript.\r\n\r\n```\r\nfunc iteration(frame_delta):\r\n    for i in range (4):\r\n        Engine.step_physics(0.02)\r\n \r\n    Engine.step_frame(frame_delta)\r\n```\r\nA customizable approach also has the **potential** for a tie in to solve the issue of the desire to manually step the physics in network games, both at the server and the client:\r\nhttps://github.com/godotengine/godot/issues/25068\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI've already implemented semi-fixed timestep, as a hard coded solution, selectable from project settings:\r\nhttps://github.com/godotengine/godot/pull/30798\r\n\r\nAlternatively custom manual stepping can be implemented as a callback (I've already done this in another area for delta smoothing), which also has the potential to provide a mechanism to allow manual stepping for multiplayer. However this would require some investigation because although running the main iteration from a callback is feasible, multiplayer may better be accomplished by allowing stepping from within _process during the frame update, which may or may not be feasible.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, in both cases this would need core support.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt cannot be implemented as an add-on.\r\n\r\n**Extra**\r\nI originally wrote the PR before godot proposals, but it seems a good idea to discuss the whole area here, as there must be overall support of the idea if we are to go ahead with it (or similar).\r\n\r\nThere are 3 possible options here:\r\n1) Continue to only support fixed timestep\r\n2) Add semi-fixed hard coded as an option in addition to fixed\r\n3) Add customizable timestepping (possibly with a tie in for the multiplayer issue)\r\n\r\nProbably strangely for a 'proposer', I am equally happy with any of these. It really boils down to the Godot mission statement, where we want to go with the engine - become highly focused for making single player games via a common method, or make it more adaptable. This involves trade offs, more options can bring in greater complexity and surface for bugs.\r\n\r\nRealistically, if we did add semi-fixed I would tend towards the KISS principle, keep it simple stupid and go for the hard coded approach. I think most people for whom semi-fixed would be useful would be far more likely to use it if they simply had to switch it on in project settings, then forget about it, rather than write or copy some custom scripts.\r\n\r\n### Addendum\r\nJust to add a little as we may get to discuss this soon:\r\n#### Fixed to refresh rate\r\nAnother additional option that reduz is keen on, which is changing the fixed tick rate at runtime to match the refresh rate of the monitor.\r\n\r\nThis has some advantages - it is simple to use and does not require interpolation. On the downside, it means that game behaviour will be different on different machines, and may not play nicely with variable refresh rate monitors.\r\n#### Delta smoothing\r\nFor best results with interpolation and semi fixed it can be a good idea to consider delta smoothing as an additional step. This is an attempt to compensate for the sources of error in making delta measurements to drive timesteps. This is fairly easy to implement and I got this working while I was working on the timestepping last year (both hard coded and with custom script interface), and is fairly simple to add, I didn't make a PR because I was waiting for decisions on timestepping.\r\n\r\nFixed timestep without interpolation offers some insulation against this problem. There are also some newer APIs in vulkan and android for improving frame timing information.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/236/reactions",
      "total_count": 13,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/235",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/235/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/235/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/235/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/235",
    "id": 523548525,
    "node_id": "MDU6SXNzdWU1MjM1NDg1MjU=",
    "number": 235,
    "title": "Add a method to rotate around a point",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-11-15T15:53:03Z",
    "updated_at": "2019-11-25T21:38:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA learning project, where I rotate the level around the player.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNormally if you want to rotate everything around a certain point, you add a parent node acting as pivot. In my case it's not viable, because the \"pivot\" is moving and I don't want to move everything with the pivot. So my workaround is this:\r\n```\r\nvar trans := global_transform\r\nvar parent := get_parent()\r\nparent.remove_child(self)\r\n\t\r\nplayer.get_node(\"Rotator\").add_child(self)\r\nglobal_transform = trans\r\nplayer.get_node(\"Rotator\").rotation_degrees += rot\r\ntrans = global_transform\r\nplayer.get_node(\"Rotator\").remove_child(self)\r\n\t\r\nparent.add_child(self)\r\nglobal_transform = trans\r\n```\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would change the above code into\r\n```\r\nrotate_around(player.global_position, rot)\r\n```\r\nI guess it would help people with similar problem too.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nA method in Node2D that has the equivalent functionality of the long code above.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n10 lines is more than \"few\". Maybe.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's impossible to extend base types with plugins.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/235/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/234",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/234/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/234/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/234/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/234",
    "id": 523529562,
    "node_id": "MDU6SXNzdWU1MjM1Mjk1NjI=",
    "number": 234,
    "title": "The same ease of Animation for 3D as it is on 2D inside Godot",
    "user": {
      "login": "LoneDespair",
      "id": 35421467,
      "node_id": "MDQ6VXNlcjM1NDIxNDY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/35421467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LoneDespair",
      "html_url": "https://github.com/LoneDespair",
      "followers_url": "https://api.github.com/users/LoneDespair/followers",
      "following_url": "https://api.github.com/users/LoneDespair/following{/other_user}",
      "gists_url": "https://api.github.com/users/LoneDespair/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LoneDespair/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LoneDespair/subscriptions",
      "organizations_url": "https://api.github.com/users/LoneDespair/orgs",
      "repos_url": "https://api.github.com/users/LoneDespair/repos",
      "events_url": "https://api.github.com/users/LoneDespair/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LoneDespair/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-15T15:20:26Z",
    "updated_at": "2019-11-25T21:38:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on**\r\nI am currently working on a 2.5D trench-like warfare,\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIn almost any node whenever there's an Animation Player, an Inset key will pop up making it super easy to rotate, scale or whatever you want to do be added on your animation timeline on the go, but for 3D nodes including Sprite3D you'd have to go to their transform position in inspector one by one as you cannot select multiple 3D nodes and still be able to click on that key making it super tedious when you have separate sprites for different parts\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\ntho this might not be a problem for a lot of people doing pure 3D as they can just use blender but for sprite-based games on 3D there's no other way to do it but with built-in animation player\r\n\r\nso having the same freedom as in 2D in animation will be a real game changer for certain type of games,\r\nit would also allow those who only need simple animation for their 3D stuffs to save headache from learning the basics of a new third-party tool\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Screenshot (65)_LI](https://user-images.githubusercontent.com/35421467/68954171-6bce6f00-07fe-11ea-91f1-71c035a31029.jpg)\r\n![Screenshot (66)_LI](https://user-images.githubusercontent.com/35421467/68954338-cec00600-07fe-11ea-8fa4-95d199e95ab4.jpg)\r\n![Screenshot (67)_LI](https://user-images.githubusercontent.com/35421467/68954351-d2538d00-07fe-11ea-9625-862ec7c00640.jpg)\r\n![Screenshot (68)_LI](https://user-images.githubusercontent.com/35421467/68954355-d4b5e700-07fe-11ea-81de-26bf3ace56a7.jpg)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nif Node is 3D : ShowInsertKey() #just kidding, i'm a noobie\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nit can be worked around even without code but it will be very impractical for certain usage\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's kind of a necessity for 2.5D games",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/234/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/233",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/233/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/233/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/233/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/233",
    "id": 523142727,
    "node_id": "MDU6SXNzdWU1MjMxNDI3Mjc=",
    "number": 233,
    "title": "Ability to get the RPC mode in node's method",
    "user": {
      "login": "vicguedez",
      "id": 12116228,
      "node_id": "MDQ6VXNlcjEyMTE2MjI4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12116228?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vicguedez",
      "html_url": "https://github.com/vicguedez",
      "followers_url": "https://api.github.com/users/vicguedez/followers",
      "following_url": "https://api.github.com/users/vicguedez/following{/other_user}",
      "gists_url": "https://api.github.com/users/vicguedez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vicguedez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vicguedez/subscriptions",
      "organizations_url": "https://api.github.com/users/vicguedez/orgs",
      "repos_url": "https://api.github.com/users/vicguedez/repos",
      "events_url": "https://api.github.com/users/vicguedez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vicguedez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864547,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NTQ3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:network",
        "name": "topic:network",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-14T22:33:26Z",
    "updated_at": "2020-11-24T02:46:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI've been using multiple instances of `NetworkedMultiplayerEnet` as part of an MMO.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCurrently I need to manually poll the peers for new packets and then:\r\n\r\n```\r\n# warning-ignore:unused_argument\r\nfunc _process_peer_packet(peer_id : int, packet : PoolByteArray) -> void:\r\n\tvar msg : NetworkMessage = NetworkMessage.new()\r\n\t\r\n\tif msg.from_packet(packet) == false:\r\n\t\t_debug(\"Invalid packet, dropped.\")\r\n\t\treturn\r\n\t\r\n\tif not game_root_node.has_node(msg.node):\r\n\t\t_debug(\"Node with path %s, not found, packet dropped.\" % msg.node)\r\n\t\treturn\r\n\t\r\n\tvar node : Node = game_root_node.get_node(msg.node)\r\n\t\r\n\tif not node.has_method(msg.method):\r\n\t\t_debug(\"Method %s not found in node %s, packet dropped.\" % [msg.method, msg.node])\r\n\t\treturn\r\n\t\r\n\tnode.callv(msg.method, msg.args)\r\n```\r\n\r\nAs you can see, this effectively means any method can be called on a node trough network. Granted you must:\r\n\r\n1. Know the path of the node.\r\n2. Match the argument signature of the method\r\n\r\nBut it is still undesired for security reasons. Workarounds are very limited, as a node without a script could still be missused from network.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe ability to get a node's method rpc mode will allow a proper way of checking if a call to the method is allowed.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nExpose to the `Node` class a method -maybe- called `get_rpc_mode(method)` and return the proper enum `MultiplayerAPI.RPCMode`.\r\n\r\nEDIT: By exposing said method, one can use `rpc_config` or the keywords like `master`, `puppet`, to mark a method as call-able trough network.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWorkarounds can be created, but still would be limited, i.e: a call to a node that does not own any script, can still execute any method it inherits if given the right parameters, which would basically allow a `self.get_tree().quit()` from any peer on any node.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nHonestly can't think/know of a reason why not to include this in core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/231",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/231/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/231/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/231/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/231",
    "id": 522881717,
    "node_id": "MDU6SXNzdWU1MjI4ODE3MTc=",
    "number": 231,
    "title": "Add property path support to NodePath",
    "user": {
      "login": "rcorre",
      "id": 2496231,
      "node_id": "MDQ6VXNlcjI0OTYyMzE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2496231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rcorre",
      "html_url": "https://github.com/rcorre",
      "followers_url": "https://api.github.com/users/rcorre/followers",
      "following_url": "https://api.github.com/users/rcorre/following{/other_user}",
      "gists_url": "https://api.github.com/users/rcorre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rcorre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rcorre/subscriptions",
      "organizations_url": "https://api.github.com/users/rcorre/orgs",
      "repos_url": "https://api.github.com/users/rcorre/repos",
      "events_url": "https://api.github.com/users/rcorre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rcorre/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-11-14T14:06:49Z",
    "updated_at": "2019-11-25T21:34:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nA multiplayer versus game. Two of them actually, the one I'm currently working on, as well as a [prior gamejam project](https://gitlab.com/rcorre/lichcraft).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn both games, I want to color objects based on their team. For any given object (player, projectile, item, ect.), there are a specific set of properties that need to be changed. For example, theming a lich means setting the color of its eyes and its light. Theming a projectile means setting the color on a MeshInstance and a particle effect.\r\n\r\nI end up writing [specific](https://gitlab.com/rcorre/lichcraft/blob/master/lich/lich.gd#L272) [logic](https://gitlab.com/rcorre/lichcraft/blob/master/lich/phylactery.gd#L5) [for](https://gitlab.com/rcorre/lichcraft/blob/master/spells/missile/projectile.gd#L24) [every](https://gitlab.com/rcorre/lichcraft/blob/master/spells/sparks/sparks.gd#L16) [thing](https://gitlab.com/rcorre/lichcraft/blob/master/spells/blink/blink.gd#L9).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI love Godot's `AnimationPlayer`. The ability to wire it up to an arbitrary property of any node in the scene tree makes it an incredibly flexible tool.\r\n\r\nWouldn't it be awesome if your scripts could tap into this same flexibility?\r\nYou could write generic, flexible scripts that can be customized to specific scenes by pointing them at particular properties.\r\n\r\nIn my case, I could have a generic \"themeable\" script, and provide the paths to various properties I want to tweak on a particular object..\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n1. Attach the following script to an object:\r\n\r\n```\r\nextends Spatial\r\n\r\nexport(NodePath, PROPERTY_PATH) var path\r\n\r\nfunc _ready():\r\n\tget_node(path).set_indexed(path.get_concatenated_subnames(), 2)\r\n```\r\n\r\n2. In the editor, you see an editable property:\r\n![editor_prop](https://user-images.githubusercontent.com/2496231/68863814-0c694580-06be-11ea-9d7a-9a509616f33e.png)\r\n\r\n3. Click on that property to see a node selector:\r\n![node_select](https://user-images.githubusercontent.com/2496231/68863820-0ecb9f80-06be-11ea-83dd-d8482fb96a24.png)\r\n\r\n4. After clicking OK, you now see a property selector for that node:\r\n![prop_select](https://user-images.githubusercontent.com/2496231/68863828-11c69000-06be-11ea-87c9-c72a4f0c2cd7.png)\r\n\r\n5. Click on, `translation`. `path` is now set to `NodePath(\"MeshInstance:translation\")`.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Add a `PROPERTY_PATH` hint to `export(NodePath)`, which tells the editor it should point at a property. There's [already a precedent](http://docs.godotengine.org/en/latest/getting_started/scripting/gdscript/gdscript_exports.html#doc-gdscript-exports) for hints like this:\r\n\r\n```\r\nexport(float, EASE) var transition_speed\r\nexport(Color, RGB) var col\r\nexport(Color, RGBA) var col\r\n```\r\n\r\n2. Show the property selector (which is already implemented for `AnimationPlayer`) for NodePath properties exported with the `PROPERTY_PATH` flag. \r\n\r\nThe rest of the functionality already exists.\r\nProperty/resources paths are [already built in to NodePath](http://docs.godotengine.org/en/latest/classes/class_nodepath.html#method-descriptions)\r\nArbitrary properties are already accessible in code via [get_indexed](http://docs.godotengine.org/en/latest/classes/class_object.html#class-object-method-get-indexed) and [set_indexed](http://docs.godotengine.org/en/latest/classes/class_object.html#class-object-method-set-indexed).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNot a few lines of script, but many lines repeated over and over. See above.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nMost of the functionality already exists in godot core, it just needs to be tied together.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/231/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/228",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/228/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/228/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/228/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/228",
    "id": 522501374,
    "node_id": "MDU6SXNzdWU1MjI1MDEzNzQ=",
    "number": 228,
    "title": "Project export improvements",
    "user": {
      "login": "KoBeWi",
      "id": 2223172,
      "node_id": "MDQ6VXNlcjIyMjMxNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2223172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KoBeWi",
      "html_url": "https://github.com/KoBeWi",
      "followers_url": "https://api.github.com/users/KoBeWi/followers",
      "following_url": "https://api.github.com/users/KoBeWi/following{/other_user}",
      "gists_url": "https://api.github.com/users/KoBeWi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KoBeWi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KoBeWi/subscriptions",
      "organizations_url": "https://api.github.com/users/KoBeWi/orgs",
      "repos_url": "https://api.github.com/users/KoBeWi/repos",
      "events_url": "https://api.github.com/users/KoBeWi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KoBeWi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-13T22:08:37Z",
    "updated_at": "2020-08-29T23:49:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nMobile Android game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nTo save APK size, it's recommended to export for various architectures separately and upload multiple APKs. Cool, but this means multiple export presets and unfortunately, things like project version or permissions are stored in the preset too, so each time I want to increment version or change permissions I have to remember to set it for each preset.\r\n\r\nAnother thing is, I have a preset that that is used for debug only and it has all architectures enabled. My problem here is that Export All button literally exports all, including presets I don't want to export right now. Which means that if I want to skip one, I have to export everything else manually.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMy proposal is this: when you create a preset, aside from duplicate, you'd have an option to \"Inherit Preset\". This creates a duplicate preset, which will inherit all values from it's parent preset and if you change parent preset, changes are reflected in the inheriting preset. Also you can override some values in the preset, so they aren't inherited anymore. Think of scene instances.\r\n\r\nExporting a preset with child presets, would export only the inheriting presets (so the inherited one becomes \"abstract\"). It's basically \"Export All\", but for groups, not everything.\r\n\r\nBonus for ability to mark preset as \"Release Only\".\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/2223172/68808315-c5e9fb80-0669-11ea-8632-bc4a51f9e76d.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNothing interesting here.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot doable with any reasonable script. Unless we consider hacky plugins viable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/228/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/227",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/227/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/227/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/227/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/227",
    "id": 521886136,
    "node_id": "MDU6SXNzdWU1MjE4ODYxMzY=",
    "number": 227,
    "title": "Add \"Save project as .zip file\" option",
    "user": {
      "login": "noidexe",
      "id": 526829,
      "node_id": "MDQ6VXNlcjUyNjgyOQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/526829?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/noidexe",
      "html_url": "https://github.com/noidexe",
      "followers_url": "https://api.github.com/users/noidexe/followers",
      "following_url": "https://api.github.com/users/noidexe/following{/other_user}",
      "gists_url": "https://api.github.com/users/noidexe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/noidexe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/noidexe/subscriptions",
      "organizations_url": "https://api.github.com/users/noidexe/orgs",
      "repos_url": "https://api.github.com/users/noidexe/repos",
      "events_url": "https://api.github.com/users/noidexe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/noidexe/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-11-13T00:43:46Z",
    "updated_at": "2019-12-09T09:53:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am teaching Godot to students of a video game art and animation course. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nBeginners are confused by the fact that if they want to copy the project somewhere else, they need to find the folder where it was created and copy the whole folder. They try to do this using the export option since they are used to having a \"Save to..\" or \"Export to..\" option available. Other times they just save the .tscn file somewhere else and find the whole project is missing when they arrive home. \r\nEngines like Construct and GameMaker which by default work using a project folder structure also offer a single file, compress format, usually a .zip with renamed extension. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nGodot already implemented importing projects from .zip files by dragging them to the Project Manager ( https://github.com/godotengine/godot/pull/19693 ) but it doesn't offer a way to generate said .zip files without the need of external tools. Having a \"Save to..\"/\"Export to..\" option within the engine will allow them to use a workflow they are used to while they familiarize with the engine. It also works as a buckup/versioning system for people not still familiar with VCSs. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/526829/68721462-33762900-0591-11ea-9c11-4388baf31036.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI guess it'd be similar to how EditorExportPlatform::save_zip is implemented in editor_export.cpp but without excluding any files, compiling any scripts, or replacing files by the imported version. It'd just zip the whole project folder as is. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe same end result can be achieved with an external tool and probably with a plugin but not the same user experience. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot being a feature that's available out-of-the-box would defeat the purpose of being a beginner-friendly feature. \r\n\r\nUsability is one of the core pilars of Godot and this feature makes the learning curve less steeper for new users, providing them with a familiar workflow without disturbing in any way the workflow of experienced users. It is also relatively simple to implement, being mostly a variation of EditorExportPlatform::save_zip",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/227/reactions",
      "total_count": 18,
      "+1": 9,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 5,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/226",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/226/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/226/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/226/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/226",
    "id": 521791007,
    "node_id": "MDU6SXNzdWU1MjE3OTEwMDc=",
    "number": 226,
    "title": "Allow for buttons on SpinBox to act independently of step value",
    "user": {
      "login": "johannesgunnar",
      "id": 2924543,
      "node_id": "MDQ6VXNlcjI5MjQ1NDM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2924543?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/johannesgunnar",
      "html_url": "https://github.com/johannesgunnar",
      "followers_url": "https://api.github.com/users/johannesgunnar/followers",
      "following_url": "https://api.github.com/users/johannesgunnar/following{/other_user}",
      "gists_url": "https://api.github.com/users/johannesgunnar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/johannesgunnar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/johannesgunnar/subscriptions",
      "organizations_url": "https://api.github.com/users/johannesgunnar/orgs",
      "repos_url": "https://api.github.com/users/johannesgunnar/repos",
      "events_url": "https://api.github.com/users/johannesgunnar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/johannesgunnar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-12T20:43:06Z",
    "updated_at": "2020-05-04T07:51:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a project which uses spinboxes in one of its GUI components, I would like to allow users to write floats with relatively high precision in the spinboxes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe arrow buttons on Spinbox become relatively useless when one wants to have the ability to write numbers with high precision. For example setting step to 0.000001. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI would want to propose having the possibility to set the arrow button step and the spinbox step precision independently of each other so that one can write numbers like 0.8237 but jump up a whole number for example with the buttons.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nAs far as I know, no.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/226/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/225",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/225/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/225/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/225/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/225",
    "id": 521506390,
    "node_id": "MDU6SXNzdWU1MjE1MDYzOTA=",
    "number": 225,
    "title": "Set CanvasItem as default mode for 2D nodes when creating shaders",
    "user": {
      "login": "nikhilCad",
      "id": 47214394,
      "node_id": "MDQ6VXNlcjQ3MjE0Mzk0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/47214394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nikhilCad",
      "html_url": "https://github.com/nikhilCad",
      "followers_url": "https://api.github.com/users/nikhilCad/followers",
      "following_url": "https://api.github.com/users/nikhilCad/following{/other_user}",
      "gists_url": "https://api.github.com/users/nikhilCad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nikhilCad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nikhilCad/subscriptions",
      "organizations_url": "https://api.github.com/users/nikhilCad/orgs",
      "repos_url": "https://api.github.com/users/nikhilCad/repos",
      "events_url": "https://api.github.com/users/nikhilCad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nikhilCad/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-12T11:56:58Z",
    "updated_at": "2019-11-25T21:41:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA roguelike\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot a limitation, a little annoyance\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt will make the process of creating a [visual] shader one repetitive click less.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nA 2D node...\r\n![image](https://user-images.githubusercontent.com/47214394/68669477-9d320b00-0570-11ea-9419-bbb5a943ebe5.png)\r\n\r\n....Having a visual shader has mode Spatial by default\r\n![image](https://user-images.githubusercontent.com/47214394/68669596-f13cef80-0570-11ea-827b-a705b7701be4.png)\r\n\r\nIf Godot becomes smart enough to detect that the shader is on a 2D node and set its mode to CanvasItem(by default) , it will help when creating a lot of shaders\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nSorry, I not that advanced.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's just a click\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nVery small feature for an add-on",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/225/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/220",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/220/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/220/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/220/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/220",
    "id": 520740088,
    "node_id": "MDU6SXNzdWU1MjA3NDAwODg=",
    "number": 220,
    "title": "Add normal generation options to the OBJ mesh importer",
    "user": {
      "login": "RobertBColton",
      "id": 3212801,
      "node_id": "MDQ6VXNlcjMyMTI4MDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3212801?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobertBColton",
      "html_url": "https://github.com/RobertBColton",
      "followers_url": "https://api.github.com/users/RobertBColton/followers",
      "following_url": "https://api.github.com/users/RobertBColton/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobertBColton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobertBColton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobertBColton/subscriptions",
      "organizations_url": "https://api.github.com/users/RobertBColton/orgs",
      "repos_url": "https://api.github.com/users/RobertBColton/repos",
      "events_url": "https://api.github.com/users/RobertBColton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobertBColton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-11-11T04:56:53Z",
    "updated_at": "2020-06-11T01:00:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nSubdivision surfaces which require accurate vertex and face adjacency lookup with MeshDataTool or custom half-edge data structure. The forced normal generation for objs without normals produces flat shaded faces leading to inaccurate adjacency lookup in MeshDataTool. \r\n**Describe the problem or limitation you are having in your project:**\r\nI would like to disable normal generation for some of my imported models so I could use the builtin obj reader.\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI can dump my custom simple obj reader that uses SurfaceTool in favor of the builtin obj mesh importer.\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![Generate Normals Mockup](https://user-images.githubusercontent.com/3212801/68561751-ea996580-0414-11ea-857b-6ca9f1b56121.png)\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nWell, I may just jump into my first pull request to Godot and do this myself. I can already see where it needs done in the obj resource importer.\r\n\r\nFirst the setting needs added:\r\nhttps://github.com/godotengine/godot/blob/dec10dd776fca2994277faa3a97b13e70317f784/editor/import/resource_importer_obj.cpp#L492\r\nThen the setting needs to be actually checked:\r\nhttps://github.com/godotengine/godot/blob/dec10dd776fca2994277faa3a97b13e70317f784/editor/import/resource_importer_obj.cpp#L337\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis problem can not easily be worked around, no. It would be a total waste to write a script that dumps the normals and reloads the model for no reason. It's also not always sensible to write your own obj reader.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI see this feature as universally necessary for practically all types of 3D games. First, not all 3D games actually use lighting, in which case the normal computation is a waste both in terms of editor processing time and GPU upload time. Even 3D games which do use lighting don't always need normals for every model. Finally, I'd feel remiss if I did not mention that Blender, which heavily inspires Godot, also has this on its export options.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/220/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/219",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/219/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/219/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/219/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/219",
    "id": 520697045,
    "node_id": "MDU6SXNzdWU1MjA2OTcwNDU=",
    "number": 219,
    "title": "VisualScript node for array access of an element by index",
    "user": {
      "login": "InkTide",
      "id": 13171110,
      "node_id": "MDQ6VXNlcjEzMTcxMTEw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13171110?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/InkTide",
      "html_url": "https://github.com/InkTide",
      "followers_url": "https://api.github.com/users/InkTide/followers",
      "following_url": "https://api.github.com/users/InkTide/following{/other_user}",
      "gists_url": "https://api.github.com/users/InkTide/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/InkTide/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/InkTide/subscriptions",
      "organizations_url": "https://api.github.com/users/InkTide/orgs",
      "repos_url": "https://api.github.com/users/InkTide/repos",
      "events_url": "https://api.github.com/users/InkTide/events{/privacy}",
      "received_events_url": "https://api.github.com/users/InkTide/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865426,
        "node_id": "MDU6TGFiZWwxNjk3ODY1NDI2",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:visualscript",
        "name": "topic:visualscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-11T01:50:27Z",
    "updated_at": "2020-03-23T22:19:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny project using VisualScript.\r\n**Describe the problem or limitation you are having in your project:**\r\nThe existing nodes for interacting with arrays have no way to access a single element of an array using the element's index within that array. The node-based workaround creates unnecessary iterators, harming performance.\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA node that functions the same way as a \"var = array[n]\" statement in GDScript would entirely eliminate the problem.\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nArrays in VisualScript should have a node that takes two inputs, an array and an integer, and outputs the data stored at the index corresponding to that integer within the array. If the integer is greater than the size of the array, NULL could be returned.\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nSee above, it's really just a node for \"var = array[n]\" with a bit of bounds checking. VisualScript already has access to all of GDScript's array functions, but none of those methods approximate \"array[n]\". In order to fully match the usefulness of \"array[n]\", a second node could be added that would have three inputs: the array, the index integer, and a variable. This would set the element at the index integer in the array to the input variable. Then it might return the edited array. In essence, a node-based way to implement \"array[n] = var,\" though admittedly the node-based workaround for this is fairly simple (\"array.insert(n, var)\" followed by \"array.remove(n+1)\").\r\n\r\nI'm not sure how the Godot engine implements VisualScript nodes under the hood, so here's some pseudocode:\r\n\r\nArray element 'n' getter:\r\n\r\nelement_get(Array a, int index) {\r\n  if (index >= a.size() || index < 0) {\r\n    return NULL;\r\n  } else {\r\n    return a[index];\r\n  }\r\n}\r\n\r\nArray element 'n' setter:\r\n\r\nelement_set(Array a, int index, var data) {\r\n  if (index >= a.size() || index < 0) {\r\n    return NULL;\r\n  } else {\r\n    a[index] = data;\r\n    return a;\r\n  }\r\n}\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt is an extremely common use for arrays, and the current node-based workaround is a dedicated function that copies the array, loops through it by popping the front and decrementing the index, then returns the value at index 0 in the copied array once the index argument equals zero - a mountain of nodes and wasted computational power.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nVisualScript's interaction with arrays without such a node is severely limited, as accessing the array becomes needlessly obtuse, which is something VisualScript should try to avoid as part of its design philosophy.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/219/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/218",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/218/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/218/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/218/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/218",
    "id": 520540657,
    "node_id": "MDU6SXNzdWU1MjA1NDA2NTc=",
    "number": 218,
    "title": "Add a \"close\" button next to each open script file name",
    "user": {
      "login": "wyattbiker",
      "id": 930478,
      "node_id": "MDQ6VXNlcjkzMDQ3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/930478?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyattbiker",
      "html_url": "https://github.com/wyattbiker",
      "followers_url": "https://api.github.com/users/wyattbiker/followers",
      "following_url": "https://api.github.com/users/wyattbiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyattbiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyattbiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyattbiker/subscriptions",
      "organizations_url": "https://api.github.com/users/wyattbiker/orgs",
      "repos_url": "https://api.github.com/users/wyattbiker/repos",
      "events_url": "https://api.github.com/users/wyattbiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyattbiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-11-10T01:58:51Z",
    "updated_at": "2020-07-27T12:15:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny\r\n**Describe the problem or limitation you are having in your project:**\r\nClosing open scripts is not as convenient as with modern editors. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAdd X close button next to each open script file name. Would make it easier, faster and less confusing than using CMD-W (for Mac) or (Right Click and choosing close).\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/930478/68537506-3b389200-0333-11ea-94f7-587c741775f1.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nunsure\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill be used very often if not exclusively as opposed to CMD-W (on Mac) or RightClick and choose  close\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nshould be part of editor.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/218/reactions",
      "total_count": 7,
      "+1": 4,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/216",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/216/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/216/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/216/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/216",
    "id": 520338765,
    "node_id": "MDU6SXNzdWU1MjAzMzg3NjU=",
    "number": 216,
    "title": "Improve `OS.execute()` (run a callback with the line contents every time a line is printed)",
    "user": {
      "login": "NHodgesVFX",
      "id": 11403345,
      "node_id": "MDQ6VXNlcjExNDAzMzQ1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11403345?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NHodgesVFX",
      "html_url": "https://github.com/NHodgesVFX",
      "followers_url": "https://api.github.com/users/NHodgesVFX/followers",
      "following_url": "https://api.github.com/users/NHodgesVFX/following{/other_user}",
      "gists_url": "https://api.github.com/users/NHodgesVFX/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NHodgesVFX/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NHodgesVFX/subscriptions",
      "organizations_url": "https://api.github.com/users/NHodgesVFX/orgs",
      "repos_url": "https://api.github.com/users/NHodgesVFX/repos",
      "events_url": "https://api.github.com/users/NHodgesVFX/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NHodgesVFX/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-11-09T05:41:58Z",
    "updated_at": "2020-12-10T22:31:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA application that calls a console executable to encode video\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen using os.execute you can get the data back using blocking mode or non-blocking when using threads but only when the application is closed/completed. At least as far as I know there is no way to get the data line by line while the application is running.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt would be great if in either blocking or non blocking for every line printed by the exe call a function with the new line as its printed in realtime. \r\n\r\nthis would make it super easy to call and check progress on external executables\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nfor example it should work like\r\n\r\n```\r\nos.execute(\"res://example.exe\", [\"-w\", \"example\"], true, \"callback\")\r\n\r\nfunc callback(new_line):\r\n    #called every time a new line is printed by the called exe in real time\r\n     print(new_line)\r\n\r\n```\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nno this would need to be implemented in core as it not something that can be changed in gdscript\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nas noted above this is already a core feature that would be enhanced",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/216/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/215",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/215/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/215/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/215/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/215",
    "id": 520120466,
    "node_id": "MDU6SXNzdWU1MjAxMjA0NjY=",
    "number": 215,
    "title": "Renaming of exported variables should not delete associated values",
    "user": {
      "login": "SlothDevLlama",
      "id": 1180429,
      "node_id": "MDQ6VXNlcjExODA0Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1180429?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SlothDevLlama",
      "html_url": "https://github.com/SlothDevLlama",
      "followers_url": "https://api.github.com/users/SlothDevLlama/followers",
      "following_url": "https://api.github.com/users/SlothDevLlama/following{/other_user}",
      "gists_url": "https://api.github.com/users/SlothDevLlama/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SlothDevLlama/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SlothDevLlama/subscriptions",
      "organizations_url": "https://api.github.com/users/SlothDevLlama/orgs",
      "repos_url": "https://api.github.com/users/SlothDevLlama/repos",
      "events_url": "https://api.github.com/users/SlothDevLlama/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SlothDevLlama/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-08T16:50:30Z",
    "updated_at": "2020-03-15T00:12:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Currently I'm working on a project where I have modules. For modules I use packed scenes with a script attached to it. I have plenty of those modules and these define some important variables via the export() hint.\r\n\r\n![image](https://user-images.githubusercontent.com/1180429/68494853-66e24c00-024f-11ea-96df-1393523ebf46.png)\r\n\r\n**Limitations**\r\nOne day will come for every programmer, where he wants to rename some variables. So when I have let's say over 100 modules with some values different from the default values:\r\n![image](https://user-images.githubusercontent.com/1180429/68494960-8da08280-024f-11ea-9610-30cf3d709e9a.png)\r\nAnd I rename the variable in the script. All modules using this script will immediately drop their values different from the default set inside the script.\r\n\r\n**Better handling of exported variables**\r\nThis will lead to a general better handling of variables in scripts, since a \"search and replace\" might happen once a time without the developer realising that various of his \".tscn\" files now lost their predefined script value.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nDon't have much experience in editor-programming of the Godot engine... :-(\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nmaybe currently it can be done by using an out of the box text editor (e.g. vscode) which will also look deeper into the according tscn files.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an enhancement which user would use without knowing it, but I think a lot of people would assume that the editor will respect their predefined settings of packed scenes no matter how a variable was named, it would improve the usability of the editor A LOT.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/215/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/211",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/211/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/211/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/211/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/211",
    "id": 518694406,
    "node_id": "MDU6SXNzdWU1MTg2OTQ0MDY=",
    "number": 211,
    "title": "Improve error handling/messages for users",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-06T19:45:25Z",
    "updated_at": "2021-01-04T18:21:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nWorking on plugins\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWhen something I do in GDScript that results in an error, and I am checking for errors and printing them to the screen, they come out as integers. Because I do not have @GlobalScope's err enums memorized, I must then break my flow of thought from looking at my code to now looking up this enum in documentation to figure out what it means.\r\n\r\nIt would be more convenient for debugging if error values could be printed directly as a string based on the name of their identifier.\r\n\r\nAdd a `@GDScript.err2str(Error value) -> String` method that handles the conversion of integer value to String identifier name for us. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt is purely a convenience factor since a lot of the information people want can already be acquired through manual work. But if we want to improve UX by absolving users of the need to do that, then that would be great.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n    if error != OK:\r\n        printerr(\"Error: %d\" % error) # shows as int, must look up in docs!\r\n        printerr(\"Error: %s\" % err2str(error)) # shows as string, know meaning immediately\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nYou just need to add a `Map<int, String>` into the core somewhere and then make it accessible to scripting languages that each implement a global function for accessing the data.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nYou could, conceivably, just write your own Dictionary for handling this, but that would be even *more* work and the whole reason to do this in the first place is to improve the UX, not make it worse.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/211/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/208",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/208/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/208/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/208/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/208",
    "id": 518109684,
    "node_id": "MDU6SXNzdWU1MTgxMDk2ODQ=",
    "number": 208,
    "title": "Allow setting of GDScript `class_name` property through the Create Script menu",
    "user": {
      "login": "homchom",
      "id": 41265646,
      "node_id": "MDQ6VXNlcjQxMjY1NjQ2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41265646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/homchom",
      "html_url": "https://github.com/homchom",
      "followers_url": "https://api.github.com/users/homchom/followers",
      "following_url": "https://api.github.com/users/homchom/following{/other_user}",
      "gists_url": "https://api.github.com/users/homchom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/homchom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/homchom/subscriptions",
      "organizations_url": "https://api.github.com/users/homchom/orgs",
      "repos_url": "https://api.github.com/users/homchom/repos",
      "events_url": "https://api.github.com/users/homchom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/homchom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-05T23:03:39Z",
    "updated_at": "2020-09-06T19:22:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am working on a program that allows the user to configure a thermometer-style progress bar to display.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI noticed that when creating GDScript files, the \"Class Name\" option in the menu is locked. The docs say this is because \"the file itself represents the class\". However, recently the `class_name` property was added, and I think this menu was overlooked. My \"problem\" is not as much a problem as it is a notice of inconsistency and overlook within the editor.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n My proposal is to unlock this field and allow setting `class_name` from the menu, similarly to how `extends` can be set using the \"Inherits\" field. This would fix the inconsistency and overlook mentioned above.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n<img width=\"208\" alt=\"h\" src=\"https://user-images.githubusercontent.com/41265646/68253612-55523780-fff6-11e9-9aef-40a5d60a8723.png\">\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:** N/A\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt can be worked around with one line; however, it should in theory be used just as often as the `class_name` keyword itself if implemented. It is also an easy fix to an inconsistency.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis is not a \"new feature\" like those found in the asset library; it is just an expansion of an existing feature that makes logical sense.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/208/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/207",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/207/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/207/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/207/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/207",
    "id": 517983716,
    "node_id": "MDU6SXNzdWU1MTc5ODM3MTY=",
    "number": 207,
    "title": "Implement container conversion functions",
    "user": {
      "login": "lupoDharkael",
      "id": 14951430,
      "node_id": "MDQ6VXNlcjE0OTUxNDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14951430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lupoDharkael",
      "html_url": "https://github.com/lupoDharkael",
      "followers_url": "https://api.github.com/users/lupoDharkael/followers",
      "following_url": "https://api.github.com/users/lupoDharkael/following{/other_user}",
      "gists_url": "https://api.github.com/users/lupoDharkael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lupoDharkael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lupoDharkael/subscriptions",
      "organizations_url": "https://api.github.com/users/lupoDharkael/orgs",
      "repos_url": "https://api.github.com/users/lupoDharkael/repos",
      "events_url": "https://api.github.com/users/lupoDharkael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lupoDharkael/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-05T19:36:48Z",
    "updated_at": "2019-11-25T21:44:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGeneral engine feature development:\r\nhttps://github.com/godotengine/godot/pull/26213\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing `List<T>` is the common thing in Godot as it uses only the memory required by the elements it contains but exposing to GDscript requires using `Vector<T>` or `PoolVector<T>`.\r\nThat implies a lot of repeated code around the engine codebase to convert between those types. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nHaving methods/functions to implement that conversion will save some lines of code and prevent some potential copypaste bugs.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nMaybe we could have a Vector::to_list(), List::to_vector(), PoolVector::to_vector() and PoolVector::to_list().\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is for internal use in the engine only.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/205",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/205/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/205/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/205/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/205",
    "id": 517535904,
    "node_id": "MDU6SXNzdWU1MTc1MzU5MDQ=",
    "number": 205,
    "title": "Enhance the Godot Sharp Export to look in the custom export template's directory for the corresponding data directory",
    "user": {
      "login": "JoshLee0915",
      "id": 10620778,
      "node_id": "MDQ6VXNlcjEwNjIwNzc4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10620778?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoshLee0915",
      "html_url": "https://github.com/JoshLee0915",
      "followers_url": "https://api.github.com/users/JoshLee0915/followers",
      "following_url": "https://api.github.com/users/JoshLee0915/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoshLee0915/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoshLee0915/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoshLee0915/subscriptions",
      "organizations_url": "https://api.github.com/users/JoshLee0915/orgs",
      "repos_url": "https://api.github.com/users/JoshLee0915/repos",
      "events_url": "https://api.github.com/users/JoshLee0915/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoshLee0915/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-05T04:02:13Z",
    "updated_at": "2019-11-25T21:45:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Before I move forward I want to say I am not sure if this might be considered a bug but this behavior looks documented within the docs so I assume it is not.\r\n\r\n**Describe the project you are working on:**\r\nI am working on a small prof of concept multiplayer project that a group of friends and I are using to evaluate how well Godot would work for this type of game. We wanted to use the a Mono enabled headless server as our server as we are more familiar with C#, and wanted to take advantage of its libraries for interfacing with a data base and a SSO server. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhile working on fixing the build scripts to allow for us to build a mono enabled headless server export template I noticed something peculiar with how the Godot Sharp export works. \r\n\r\nWithin the `ExportDataDirectory` method of `GodotSharpExport` it always looks within the default template directory even when using custom export templates. This was causing us issues as it would use the data directory in the template directory instead of the one generated for the export template we where using (x11 mono enabled headless server) which for us resulted in api checks to fail.\r\n\r\nI do not know how interchangeable these data directories should be but from my current, though limited, experience with them so far they seem heavily tied to the binary that was compiled. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nDue to the above I would like to suggest enhancing the `GodotSharpExport` so when using a custom export template the `GodotSharpExport` will look in the directory the custom export template is stored for a data directory before checking the default template directory.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSince a fix would more than likely have to be made within the export code its self it is not likely to be easily worked around without modifying the mono module directly and recompiling the engine.\r\n \r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/204",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/204/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/204/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/204/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/204",
    "id": 517495766,
    "node_id": "MDU6SXNzdWU1MTc0OTU3NjY=",
    "number": 204,
    "title": "Add UI Physics setting for # of solver iterations to fix CCD issues",
    "user": {
      "login": "andyfreer",
      "id": 15262896,
      "node_id": "MDQ6VXNlcjE1MjYyODk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15262896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andyfreer",
      "html_url": "https://github.com/andyfreer",
      "followers_url": "https://api.github.com/users/andyfreer/followers",
      "following_url": "https://api.github.com/users/andyfreer/following{/other_user}",
      "gists_url": "https://api.github.com/users/andyfreer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andyfreer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andyfreer/subscriptions",
      "organizations_url": "https://api.github.com/users/andyfreer/orgs",
      "repos_url": "https://api.github.com/users/andyfreer/repos",
      "events_url": "https://api.github.com/users/andyfreer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andyfreer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-05T01:23:28Z",
    "updated_at": "2020-07-01T15:04:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nVarious Github issues relating to CCD problems e.g. [#16505](https://github.com/godotengine/godot/issues/16505)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nAllow increased accuracy without increasing physics fps to v. high values... users can tweak solver iterations as part of the physics tuning for their particular config/requirements\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nMoving hardcoded settings to Godot UI e.g. [here](https://github.com/godotengine/godot/blob/master/thirdparty/bullet/Bullet3Dynamics/ConstraintSolver/b3ContactSolverInfo.h#L71)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nno but you can change the hardcoded setting and recompile :)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/204/reactions",
      "total_count": 8,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/203",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/203/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/203/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/203/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/203",
    "id": 517305994,
    "node_id": "MDU6SXNzdWU1MTczMDU5OTQ=",
    "number": 203,
    "title": "Search and filter input map actions in project settings",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-04T17:46:25Z",
    "updated_at": "2020-02-20T08:51:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGodot Engine prosperity.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere's no way to easily search and organize input map actions via dialog. You have to type and guess what possible actions you might have in your project in order to search for them:\r\n\r\n![input_map_search](https://user-images.githubusercontent.com/17108460/68142883-f5498b80-ff38-11e9-9a1d-a5b93d188523.png)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nAdding a search button or simply combining the process of searching and adding actions into the same interface so that the list is automatically updated:\r\n\r\n![input_map_search_box](https://user-images.githubusercontent.com/17108460/68143218-afd98e00-ff39-11e9-941a-09f01acaaa6c.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdd ability to filter out actions by typing text in the input field intended for adding new actions, either for instant feedback or a way to search for similar actions. The filtering behavior is already present in the `General` tab, for instance.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThe actions can be renamed in `project.godot` via external code editor but the way they are stored are not that user-friendly:\r\n```ini\r\n[input]\r\n\r\njump={\r\n\"deadzone\": 0.5,\r\n\"events\": [ Object(InputEventKey,\"resource_local_to_scene\":false,\"resource_name\":\"\",\"device\":0,\"alt\":false,\"shift\":false,\"control\":false,\"meta\":false,\"command\":false,\"pressed\":false,\"scancode\":16777221,\"unicode\":0,\"echo\":false,\"script\":null)\r\n, Object(InputEventKey,\"resource_local_to_scene\":false,\"resource_name\":\"\",\"device\":0,\"alt\":false,\"shift\":false,\"control\":false,\"meta\":false,\"command\":false,\"pressed\":false,\"scancode\":32,\"unicode\":0,\"echo\":false,\"script\":null)\r\n ]\r\n}\r\n```\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nAlready part of the editor, needs minor enhancement.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/203/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/201",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/201/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/201/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/201/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/201",
    "id": 516994568,
    "node_id": "MDU6SXNzdWU1MTY5OTQ1Njg=",
    "number": 201,
    "title": "Add `encrypt()` and `decrypt()` methods to PackedByteArray",
    "user": {
      "login": "dalexeev",
      "id": 47700418,
      "node_id": "MDQ6VXNlcjQ3NzAwNDE4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47700418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalexeev",
      "html_url": "https://github.com/dalexeev",
      "followers_url": "https://api.github.com/users/dalexeev/followers",
      "following_url": "https://api.github.com/users/dalexeev/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalexeev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalexeev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalexeev/subscriptions",
      "organizations_url": "https://api.github.com/users/dalexeev/orgs",
      "repos_url": "https://api.github.com/users/dalexeev/repos",
      "events_url": "https://api.github.com/users/dalexeev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalexeev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-04T07:38:58Z",
    "updated_at": "2020-11-06T19:10:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI noticed that the `PoolByteArray` class has `compress` and `decompress` methods that allow manipulating data directly in memory.\r\n\r\nThe `File` class has `open`, `open_compressed`, `open_encrypted` and `open_encrypted_with_pass` methods, but it only allow you to work with files in the file system, not in memory.\r\n\r\nI propose to add to the `PoolByteArray` class the `encrypt`, `encrypt_with_pass`, `decrypt` and `decrypt_with_pass` methods.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis can be useful for example in this case:\r\n```gdscript\r\nvar f = File.new()\r\nf.open(path, f.WRITE)\r\nf.store_line(\"MY_FILE_FORMAT_SIGNATURE\")\r\nf.store_buffer(buffer.encrypt(key))\r\nf.close()\r\n```\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI tried to study the sources, but since I'm not very good at C++, I didn't dare to edit anything. However, I noticed that for the `core/io/file_access_compressed.cpp` file there is a `core/io/compression.cpp` abstraction, while for `file_access_encrypted.cpp` is no `encryption.cpp` abstraction.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/201/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/200",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/200/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/200/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/200/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/200",
    "id": 516940388,
    "node_id": "MDU6SXNzdWU1MTY5NDAzODg=",
    "number": 200,
    "title": "Add boolean operations to 2D collision objects",
    "user": {
      "login": "define-private-public",
      "id": 4551425,
      "node_id": "MDQ6VXNlcjQ1NTE0MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4551425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/define-private-public",
      "html_url": "https://github.com/define-private-public",
      "followers_url": "https://api.github.com/users/define-private-public/followers",
      "following_url": "https://api.github.com/users/define-private-public/following{/other_user}",
      "gists_url": "https://api.github.com/users/define-private-public/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/define-private-public/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/define-private-public/subscriptions",
      "organizations_url": "https://api.github.com/users/define-private-public/orgs",
      "repos_url": "https://api.github.com/users/define-private-public/repos",
      "events_url": "https://api.github.com/users/define-private-public/events{/privacy}",
      "received_events_url": "https://api.github.com/users/define-private-public/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-04T03:10:18Z",
    "updated_at": "2020-12-03T11:14:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis feature request stems from this forum post: https://godotforums.org/discussion/21443/is-it-possilble-to-do-boolean-operations-to-construct-collision-objects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nSame limitation from #199, I'm trying to make a Colosseum where I need to keep my objects inside of a circle.  `CollisionShape2D` with `Circle` right now keeps them outside of the said circle.  Manually drawing out a collision polygon with perfect curves is a pain (and not that elegant of a solution).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWould be a massive time saver, and much more flexible if I need to make changes in the future.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nThe diagram here is a good example of what I want: https://en.wikipedia.org/wiki/Boolean_operations_on_polygons\r\n\r\nhttps://en.wikipedia.org/wiki/Constructive_solid_geometry\r\n\r\nAs for how to make a nice Godot friendly interface, I'm not quite sure.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nN/A.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSuper-duper useful (and semi-fundamental) for 2D game developers.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/200/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/199",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/199/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/199/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/199/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/199",
    "id": 516939401,
    "node_id": "MDU6SXNzdWU1MTY5Mzk0MDE=",
    "number": 199,
    "title": "Be able to convert a `CollisionShape2D` into a `CollisionPolygon2D`",
    "user": {
      "login": "define-private-public",
      "id": 4551425,
      "node_id": "MDQ6VXNlcjQ1NTE0MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4551425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/define-private-public",
      "html_url": "https://github.com/define-private-public",
      "followers_url": "https://api.github.com/users/define-private-public/followers",
      "following_url": "https://api.github.com/users/define-private-public/following{/other_user}",
      "gists_url": "https://api.github.com/users/define-private-public/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/define-private-public/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/define-private-public/subscriptions",
      "organizations_url": "https://api.github.com/users/define-private-public/orgs",
      "repos_url": "https://api.github.com/users/define-private-public/repos",
      "events_url": "https://api.github.com/users/define-private-public/events{/privacy}",
      "received_events_url": "https://api.github.com/users/define-private-public/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-04T03:04:33Z",
    "updated_at": "2019-11-25T21:44:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm trying to create a game where there is a Colosseum style area.  I.e. the inside of a circle.  And I need walls that keep objects inside. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nIt's a real pain to try to make a (near) perfect circle manually with `CollisionPolygon2D`.  \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**  It would be much easier if I could instead create a `CollisionShape2D` with a `Circle` shape.  Have Godot take the edge of the circle and turn it to a Polygon (with a user determine number of points).  Then move points around as I need but retain parts that are a (near) perfect curve.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n1. Create a `CollisionShape2D` object.  Give it a shape and adjust\r\n2a. In the `Inspector`, under the `CollisionShape2D` section, there is a new button called \"Generate Polygon from Shape\".  An Integer field should also be supplied where I can specify how many points I want the generated polygon to have.\r\n2b. In the `Scene` tree, I right click on the node.  There would be an option called \"Convert to Polygon\".  Once clicking a dialog would pop up asking me how many points for the generated polygon to have.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot really sure how to answer this.  It could be very useful for 2D game developers.  Though I think it could be done with GD Script.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nSeems like kinda of fundament thing (to me at least).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/199/reactions",
      "total_count": 6,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 3,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/196",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/196/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/196/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/196/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/196",
    "id": 516401711,
    "node_id": "MDU6SXNzdWU1MTY0MDE3MTE=",
    "number": 196,
    "title": "Accessibility QOL improvement in relation to graphics tablets ",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-11-01T23:41:38Z",
    "updated_at": "2019-11-25T21:40:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nA little background: I use a graphics tablet due to the fact im unable to use a mouse for any period due to health issues also the more the pen hits the tablet to do something the better it is for you arms.\r\n\r\nOn the 2d side of the editor my graphic tablet works well apart from a few minor issues with slider boxes not working with my graphics pen and some view ports not working with CTRL+ and CTRL - but thats easily worked around but when it comes to the 3d view ports theres alot of things wrong that could be improved.\r\n\r\ncurrently navigating normally around the viewport is broken for me, it has the same issue with sliders where it moves in slight increments before you have to click again.\r\n\r\nbut even on other engines where the pen works well i have found something as simple as the below feature has taken alot of strain off my arms and wrists because constantly holding the pen just slightly off the tablet which over time hurts)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n3 button mouse emulation similar to how blender does it: this works amazing so you dont have to awkwardly press a button constantly on the pen at a weird angle, if people are unaware it turns the alt key into the middle mouse button to move your view in the view port and press with shift or ctrl allows you to pan and zoom.\r\n\r\ndoesn't have to be exactly due to the fact in blender your rotating around point but in godot your not, it could work like a toggle for ease of access to view and traverse the scene.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWill constantly be used.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n<>\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n<>\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nBecause at its core its will help others like me that have a disability that stops them from doing something they love, graphics tablets have shown to be a hell of a lot more natural then mice.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/196/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/195",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/195/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/195/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/195/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/195",
    "id": 516203802,
    "node_id": "MDU6SXNzdWU1MTYyMDM4MDI=",
    "number": 195,
    "title": "Add support for running pre- and post-export scripts",
    "user": {
      "login": "WizzardMaker",
      "id": 7768485,
      "node_id": "MDQ6VXNlcjc3Njg0ODU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7768485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WizzardMaker",
      "html_url": "https://github.com/WizzardMaker",
      "followers_url": "https://api.github.com/users/WizzardMaker/followers",
      "following_url": "https://api.github.com/users/WizzardMaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/WizzardMaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WizzardMaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WizzardMaker/subscriptions",
      "organizations_url": "https://api.github.com/users/WizzardMaker/orgs",
      "repos_url": "https://api.github.com/users/WizzardMaker/repos",
      "events_url": "https://api.github.com/users/WizzardMaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WizzardMaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-01T16:05:11Z",
    "updated_at": "2020-09-12T21:30:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nWe are working on an open source remake of an old game. We use extracted sprites of the game inside the engine. We are not allowed to redistribute the files, thats why we remove the image content and created a system, which extracts the images when the game starts and loads them into godot. \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nOur system works fine, but its tedious to clear the images outside of godot in preparation of an export.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would be more elegant, if we were able to let godot run a gd or C# script before it starts the export process. A feature like Unity has for example.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n1. Add scripts to the \"Pre Export Execution List\" or the \"Post Export Execution List\"\r\n2. Start export process.\r\n3. Godot executes every script inside the \"Pre Export Execution List\"\r\n4. Godot waits for completion of scripts\r\n5. Godot exports project\r\n3. Godot executes every script inside the \"Post Export Execution List\"\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nGodot could call a function inside a \"Callback\" class. We could just inherit that class and override the callback functions for pre and post export.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI don't see a real why of how we could achieve this inside of godot\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIts an addition to the export process\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/194",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/194/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/194/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/194/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/194",
    "id": 515855089,
    "node_id": "MDU6SXNzdWU1MTU4NTUwODk=",
    "number": 194,
    "title": "Detect coroutines and change highlight color in editor",
    "user": {
      "login": "jabcross",
      "id": 6402237,
      "node_id": "MDQ6VXNlcjY0MDIyMzc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6402237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jabcross",
      "html_url": "https://github.com/jabcross",
      "followers_url": "https://api.github.com/users/jabcross/followers",
      "following_url": "https://api.github.com/users/jabcross/following{/other_user}",
      "gists_url": "https://api.github.com/users/jabcross/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jabcross/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jabcross/subscriptions",
      "organizations_url": "https://api.github.com/users/jabcross/orgs",
      "repos_url": "https://api.github.com/users/jabcross/repos",
      "events_url": "https://api.github.com/users/jabcross/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jabcross/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-01T01:17:24Z",
    "updated_at": "2019-11-25T21:42:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Function calls are highlighted in blue by default (as in 3.2 alpha).\r\n\r\nWhen using coroutines (functions that may `yield` a GDScriptFunctionState), the caller must know it's a coroutine and change the caller appropriately, so\r\n\r\n`x = foo()`\r\n\r\nbecomes\r\n\r\n`x = yield(foo(),'completed')`\r\n\r\n(or `x = await foo()` with [this pull request](https://github.com/godotengine/godot/pull/32034).)\r\n\r\nIt might be handy to highlight such coroutines with a different color in the editor, so that bugs are easier to find when you change a normal function to a coroutine or vice-versa and forget to change its calls.\r\n\r\nI'd make the difference very noticeable, a bold orange for instance. This would've personally saved me a lot of time.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/194/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/193",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/193/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/193/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/193/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/193",
    "id": 515089615,
    "node_id": "MDU6SXNzdWU1MTUwODk2MTU=",
    "number": 193,
    "title": "Allow extending Font class",
    "user": {
      "login": "BenMcLean",
      "id": 1747250,
      "node_id": "MDQ6VXNlcjE3NDcyNTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1747250?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenMcLean",
      "html_url": "https://github.com/BenMcLean",
      "followers_url": "https://api.github.com/users/BenMcLean/followers",
      "following_url": "https://api.github.com/users/BenMcLean/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenMcLean/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenMcLean/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenMcLean/subscriptions",
      "organizations_url": "https://api.github.com/users/BenMcLean/orgs",
      "repos_url": "https://api.github.com/users/BenMcLean/repos",
      "events_url": "https://api.github.com/users/BenMcLean/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenMcLean/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-31T01:29:02Z",
    "updated_at": "2019-11-25T21:42:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI'm working on re-creating Wolfenstein 3-D in VR for the Oculus Quest **_using Godot Mono / C#_**.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nI'm working on loading binary font data directly from the original unaltered 1992 Wolfenstein 3-D files at runtime and then using it as the font for a Godot GUI theme also generated in code at runtime. (the goal being for the new theme to closely mimic the style of the Wolfenstein 3-D menus) I've already converted the font data to ImageTextures of letters that I can display in Godot. So my thought was to try extending the Font class to enable using this data as a Godot Font. But I found that I cannot extend the Godot Font class (or at least not in C#) because its constructor(s) are not public.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nRather than trying to support literally every font format under the sun (there are tons) it would make more sense to provide an interface that allows any kind of underlying font data to be used as long as users write the code to support it. I think that providing a  public constructor interface for Font would allow this.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo. The workaround I envision is probably figuring out some way to convert from the Wolfenstein 3-D font format to the FNT format and then loading that into a BitmapFont, but since I don't know how the FNT format works, that'll require tedious research.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt prevents a whole category of addons (Font format support addons) from even being made, or it seems to.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/193/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/192",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/192/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/192/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/192/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/192",
    "id": 514857104,
    "node_id": "MDU6SXNzdWU1MTQ4NTcxMDQ=",
    "number": 192,
    "title": "Add static type hints for array members",
    "user": {
      "login": "SeleDreams",
      "id": 16335601,
      "node_id": "MDQ6VXNlcjE2MzM1NjAx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16335601?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SeleDreams",
      "html_url": "https://github.com/SeleDreams",
      "followers_url": "https://api.github.com/users/SeleDreams/followers",
      "following_url": "https://api.github.com/users/SeleDreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeleDreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SeleDreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeleDreams/subscriptions",
      "organizations_url": "https://api.github.com/users/SeleDreams/orgs",
      "repos_url": "https://api.github.com/users/SeleDreams/repos",
      "events_url": "https://api.github.com/users/SeleDreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SeleDreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1",
      "html_url": "https://github.com/godotengine/godot-proposals/milestone/1",
      "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/milestones/1/labels",
      "id": 5047538,
      "node_id": "MDk6TWlsZXN0b25lNTA0NzUzOA==",
      "number": 1,
      "title": "4.0",
      "description": "This proposal is planned to be implemented in 4.0",
      "creator": {
        "login": "aaronfranke",
        "id": 1646875,
        "node_id": "MDQ6VXNlcjE2NDY4NzU=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/aaronfranke",
        "html_url": "https://github.com/aaronfranke",
        "followers_url": "https://api.github.com/users/aaronfranke/followers",
        "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
        "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
        "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
        "repos_url": "https://api.github.com/users/aaronfranke/repos",
        "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 43,
      "closed_issues": 111,
      "state": "open",
      "created_at": "2020-01-27T23:05:37Z",
      "updated_at": "2021-01-05T17:02:17Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 16,
    "created_at": "2019-10-30T17:36:48Z",
    "updated_at": "2020-11-24T00:02:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on a Pokemon inspired RPG where the player would be a \"manager\" and would have battle moves and stats based on the objects they own\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI guess it isn't a \"problem\" but I thought of something while implementing the party system.\r\nWhile implementing the party system, I've made an array that would contain multiple instances of a specific class I made (BattleCharacter), however, while I always use static typing, it seems to be impossible to determine in advance the type all array members would have.\r\n\r\nWhich I am used to coming from a C# background, I also feel like it would allow a lot of optimizations in case of iterations through array members\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nMy proposal would be to allow something like \r\nvar array_name : type = []\r\nor\r\nvar array_name = [] : type\r\nit would then only allow to set values of the array to values of the specified type\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAs I only started using Godot recently, I unfortunately don't know enough the way the engine handles internally GDScript.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWell, yeah since it can be done without static typing, it's mostly a feature improving on the static typing added to 3.0\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would allow big performance optimizations in games relying heavily on arrays and iterations.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/192/reactions",
      "total_count": 15,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/191",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/191/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/191/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/191/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/191",
    "id": 514792713,
    "node_id": "MDU6SXNzdWU1MTQ3OTI3MTM=",
    "number": 191,
    "title": "Add support for multiple .NET languages to have \"built-in\"-like support. F#, Visual Basic, Etc.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864440,
        "node_id": "MDU6TGFiZWwxNjk3ODY0NDQw",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:mono",
        "name": "topic:mono",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-10-30T16:04:54Z",
    "updated_at": "2020-09-25T10:14:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPlugins and a mobile app that uses .NET.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nUsing non-C# .NET languages in Godot is cumbersome since you have to create C# scripts anyway and then have C# classes inherit a third-party class's features. This is what the [Godot F# Tools](https://github.com/willnationsdev/godot-fsharp-tools) plugin I wrote assists with. However, I would prefer it if it were easier to add support for arbitrary .NET languages that build on the features in the current CSharpScript implementation.\r\n\r\nFor example, maybe have a MonoScript that acts as another layer on top of Script and then have more specific CSharpScript, and potentially FSharpScript ~~or TypeScript~~, implementations in submodules. This would allow other languages to take advantage of some of the GDMonoObject work that has already been done. Even if support for other languages had to be downloaded via the AssetLibrary, I'd still think it could work very well. Though, I must admit, I know very little about the ramifications of dynamically loading in additional languages, but it sounds a lot like what the NativeScript submodule already kinda does.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nPeople who want to use their preferred .NET language to create Godot games would be able to do so much more easily, without having to hack support in through C#.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nI would propose re-organizing the codebase to make CSharpScript files be in a dedicated submodule folder within the `mono` folder (at `mono/csharpscript`) and instead replace them with a set of `MonoScript`-like files. Then provide avenues for plugging in other arbitrary MonoScripts, operating similarly to PluginScript for the GDNative C bindings.\r\n\r\nInheritance hierarchy would look something like this:\r\n\r\n    - Script\r\n        - MonoScript\r\n            - CSharpScript (built-in)\r\n            - FSharpScript (via addon), can reference .fs files, interops with same MonoScript API.\r\n            - Etc. (via addon), can reference .xx files, interops with same MonoScript API.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nThis would involve refactoring a lot of the C# Mono code to remove direct dependencies of C# code and syntax.\r\n\r\nProjects would need to be generated and managed from the `dotnet` cli, more than likely, rather than manually creating the files in Godot's Mono-related C++ code. It would make it easier to operate with an arbitrary language.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nInvolves direct changes to the `mono` module. Unrelated to scriptable changes.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nInvolves direct changes to the `mono` module. Unrelated to scriptable changes.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/191/reactions",
      "total_count": 37,
      "+1": 22,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 15,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/190",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/190/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/190/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/190/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/190",
    "id": 514741430,
    "node_id": "MDU6SXNzdWU1MTQ3NDE0MzA=",
    "number": 190,
    "title": "Enable users to create GUI-only optimized builds for web and mobile",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-10-30T15:00:10Z",
    "updated_at": "2020-09-12T21:31:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nBuilding a mobile application.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI wanted to use Godot to build a mobile app since it's a great customizable tool with a strong community and a plethora of built-in UI tools that can deploy to multiple platforms. However, Godot also has a variety of built-in systems for game development that aren't really necessary for a GUI-only app (even if it were a GUI-only game, of which there are many possibilities). And if you are developing for mobile or web, you want the smallest possible size binary.\r\n\r\nI believe there should be additional build options, just like `disable_3d` and `disable_advanced_gui` that are tailor-made for GUI-only mobile/web apps. The only thing I can specifically think of to add would be a `disable_physics` option, perhaps with a dummy server implementation. But if anyone can think of other things, then that would be great. I already know that a lot of unnecessary features can be stripped out via the `module_<name>_enabled=no` option.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt would help minimize binary sizes for mobile/web platforms when you want to build a GUI-only Godot project.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nI want to be able to do this:\r\n\r\n    scons p=windows disable_3d=yes disable_physics=yes disable_other_stuff=yes module_X_enabled=no... -j6\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Add the implementation of the additional options to the SConstruct script.\r\n1. Add C++ macros for conditionally building any relevant code that can be stripped out.\r\n    1. In the case of physics, we'd need a dummy PhysicsServer implementation so as not to break code everywhere that is referencing it. It would also remove all nodes in the `scene` directory that are related to collision detection and physics. Maybe also remove the PhysicsServer global variable / core bind?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt is related to engine builds, not script code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt is related to engine builds, not script code.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/190/reactions",
      "total_count": 26,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 4,
      "rocket": 5,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/188",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/188/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/188/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/188/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/188",
    "id": 513463846,
    "node_id": "MDU6SXNzdWU1MTM0NjM4NDY=",
    "number": 188,
    "title": "Import and store animation and mesh separately",
    "user": {
      "login": "gogo199432",
      "id": 9107561,
      "node_id": "MDQ6VXNlcjkxMDc1NjE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9107561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gogo199432",
      "html_url": "https://github.com/gogo199432",
      "followers_url": "https://api.github.com/users/gogo199432/followers",
      "following_url": "https://api.github.com/users/gogo199432/following{/other_user}",
      "gists_url": "https://api.github.com/users/gogo199432/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gogo199432/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gogo199432/subscriptions",
      "organizations_url": "https://api.github.com/users/gogo199432/orgs",
      "repos_url": "https://api.github.com/users/gogo199432/repos",
      "events_url": "https://api.github.com/users/gogo199432/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gogo199432/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864199,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTk5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:import",
        "name": "topic:import",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-10-28T17:55:06Z",
    "updated_at": "2019-11-25T21:43:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nPlanned project would be a story designer where the player's could import their own avatars as AI companions. For this to work the animations need to be reusable.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIn Godot currently the meshes (in this case humanoid characters) are linked with their animation upon import. Thus it is impossible to reuse the same animation without having to import them multiple times with their meshes. This creates duplicates, same animation in multiple model files.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIf we could store animation separately from meshes, we could create one armature that all characters share. Then import the animated armature separately and link it with any of the actual meshes later as needed. This not only enables reuse, but also makes iteration easier, since there is no need to reimport the whole model and possibly introduce issues along the way. Also better for source control with multiple artists.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nWhen selecting a model file for import, we could choose to only import animation/mesh. Once both of them were imported separately, then in the animation player add the animation to the character scene, and use it as usual. Godot should try to automatically match up the skeletons in the two files if possible. Alternatively set up a definitions model that assigns each bone to a predefined human model. (This feature is possible in Unity, please take a look for inspiration if needed)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis feature would be a change to the way (core) importing works in Godot. Since it's a pretty big and useful feature, it should be shipped in the engine by default.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/188/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/182",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/182/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/182/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/182/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/182",
    "id": 512180002,
    "node_id": "MDU6SXNzdWU1MTIxODAwMDI=",
    "number": 182,
    "title": "Allow multiple CSG meshes to be merged into one",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-24T21:03:16Z",
    "updated_at": "2020-08-01T03:50:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nPrototype for level design.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe scene tree becomes increasingly chaotic the more CSG meshes are in the scene. Besides being chaotic, performance get's worse the bigger the tree and the number of Booolean operations. There is even an [explicit warning](https://docs.godotengine.org/en/3.1/tutorials/3d/csg_tools.html#processing-order) about it in the docs.\r\nOverview in the viewport becomes worse and worse with every CSG mesh. Even as few as **3** CSG boxes make it hard to tell the wireframe of the mesh apart from all the bounding boxes! \r\nBoolean operations are usually an _intermediate_ step to get the part to a **reusable unit**. Not being able to merge CSG meshes together makes reuse ability hard and prototyping harder to manage.\r\n\r\n![csg_01](https://user-images.githubusercontent.com/47016402/67522401-f4993580-f6ac-11e9-8b9a-40cde86fe3a2.png)\r\nThis is just 3 boxes.  Can't make a level with 3 boxes.\r\n\r\n\"Make the sure the objects children are not selectable\" is helping with visibility, and is great for when you want CSGs to stay open and editable, but not with performance and I still would like to have to option to commit to this shape by merging it together, freeing up all overhead that a huge open CSG mesh tree would undoubtedly entail.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe true power and potential of CSG meshes unfolds when infinite reusability, recombination and remerging of CSG meshes is possible. For this to happen we need the ability to\r\n\r\n1. merge any CSG Meshes and CSG Primitives and\r\n2. change MeshesInstances into custom CSG meshes and vice versa with a simple mouse click.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nViewport RMB click -> \"merge CSG mesh and it's children\", \r\nScene panel RMB click -> \"merge CSG mesh and it's children\", \r\nMenu bar: RMB click -> \"merge CSG mesh and it's children\" ->\r\n![csg_02](https://user-images.githubusercontent.com/47016402/67524359-e220fb00-f6b0-11e9-8783-8b3159d4ae23.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI can't pronounce \"C\" with classes.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt would be used often by Level designers, people who quickly want to block out prototypes, gamejams games that require just very basic geometry. It would also integrate brilliantly with the upcoming Gltf2 export https://github.com/godotengine/godot/issues/14752\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would be a imho necessary improvement to an existing feature to make is more usable for production work.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/182/reactions",
      "total_count": 14,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/181",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/181/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/181/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/181/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/181",
    "id": 512053664,
    "node_id": "MDU6SXNzdWU1MTIwNTM2NjQ=",
    "number": 181,
    "title": "Allow to load a folder into filesystem in runtime, like it is already possible with .zip/.pck",
    "user": {
      "login": "IlyaStuurFedorov",
      "id": 51226895,
      "node_id": "MDQ6VXNlcjUxMjI2ODk1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/51226895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IlyaStuurFedorov",
      "html_url": "https://github.com/IlyaStuurFedorov",
      "followers_url": "https://api.github.com/users/IlyaStuurFedorov/followers",
      "following_url": "https://api.github.com/users/IlyaStuurFedorov/following{/other_user}",
      "gists_url": "https://api.github.com/users/IlyaStuurFedorov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IlyaStuurFedorov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IlyaStuurFedorov/subscriptions",
      "organizations_url": "https://api.github.com/users/IlyaStuurFedorov/orgs",
      "repos_url": "https://api.github.com/users/IlyaStuurFedorov/repos",
      "events_url": "https://api.github.com/users/IlyaStuurFedorov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IlyaStuurFedorov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-24T16:30:03Z",
    "updated_at": "2019-11-25T21:43:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nGame with a big emphasis on modding.\r\n**Describe the problem or limitation you are having in your project:**\r\nThere is no way to load up folders in engine's filesystem like you could do with .pck/.zip\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThere would be no need for my mod framework to repack folder deltas into .zip, just so there would be a workaround for loading the latest version of the WIP mod into the core game's filesystem.\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis greatly accelerates the development of things, that in some games could be loaded procedurally. I do realize, that the inability to load up the folders could be due to a fact that people would use this as a way-to-go importing mechanism, instead of using proper .zip/.pck importers, but it should just be mentioned in docs that this is only for WIP purposes and nothing else.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/181/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/178",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/178/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/178/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/178/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/178",
    "id": 510878670,
    "node_id": "MDU6SXNzdWU1MTA4Nzg2NzA=",
    "number": 178,
    "title": "Add numerical RGBA raw sliders to modulate property inspector",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-22T20:07:59Z",
    "updated_at": "2019-11-25T21:50:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the projects you are working on:**\r\n\r\nAll my projects require to adjust the modulate property a ton. As soon as a WE node is added, this increases even more.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nThe current modulate value visualization in the inspector does not give me any information about it's actual value if it is above raw 1 and it's incredibly hard to judge which alpha value is given.\r\nWhen working with modulate properties, there is no way around to open the color-picker and then switch to raw to see what are the set values. This becomes especially apparent while animating the modulate value and trying to set the right key. Much more so when a WorldEnvironment Node is present, because the representation of the value in the game is changed through the WE.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n- It would allow me to see on one glance what the modulate values are\r\n- It would allow me to swiftly change the value by moving the slider or typing in a new value without having to go through menus. \r\n- It would allow me to instantly reset values, save a substantial part of dev time wastes on pointless clicking and trying to remember the last set values.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![modulate_channels2](https://user-images.githubusercontent.com/47016402/67326683-2d070b00-f517-11e9-8776-1a31bfde0c99.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI would hope for these numerical slider adjustments right in the inspector to be present wherever the is a modulation preview. (under Canvas Item, in the AnimationPlayer key value panel, in shader_param ...)\r\nI don't know C++.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWould be used often, because it would be the fastest way to intentionally change the modulate value, which currently is the only way to adjust color and alpha properties of a node in the editor.\r\nExisting color-picker Workflow would be unchanged.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an improvement of an existing UI/UX.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/178/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/177",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/177/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/177/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/177/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/177",
    "id": 510850733,
    "node_id": "MDU6SXNzdWU1MTA4NTA3MzM=",
    "number": 177,
    "title": "Enable scripts to generate XML API documentation for the editor's GUI",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-10-22T19:08:09Z",
    "updated_at": "2020-08-25T21:39:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCreating plugins for Godot.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nLet's say I define an addon with a collection of script classes. If someone else installs my addon, they have no way to easily determine what the intended use/API is for those scripts. I can't state what the purpose of my script is for, which methods are public versus protected/private, which methods are static, which methods are virtual (and intended to be overridden). I can't specify in which cases a method or class should be used, how constants and signals relate to the API, etc.\r\n\r\nThe only way for someone to glean any of this information is to go to the script itself and read the source code which is antithetical to the purpose of building an addon for others to use. They shouldn't need to know the details of how the addon works; they only need to know *what* they can use the addon for and *how* to use it.\r\n\r\nWe should provide a mechanism by which people can generate in-editor documentation for script classes and be able to rebuild this documentation on command / via a recurring process / something-or-other.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n> And God said, \"Let there be script documentation,\" and there was script documentation.\r\n\r\nIntegrating user-defined script documentation would be the most direct, clean, and efficient means of solving the problem. The editor *already* has built-in support for this with engine types. There is just no code at the moment that actively searches for and integrates user-defined documentation data and rebuilds the in-editor docs cache as scripts change, nor is there anything that generates that information.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nAdd a button to rebuild documentation manually in the ScriptEditor.\r\n\r\n<img width=\"473\" alt=\"script_view_edited\" src=\"https://user-images.githubusercontent.com/16217563/67315384-11c2de00-f4cc-11e9-8d90-e9dac4303b9d.png\">\r\n\r\nThe information above would all be filled in with our own custom script class's name, properties, methods, etc.\r\n\r\nSince private/public data concepts are not built into GDScript and Godot's scripting except through naming conventions, we could set things so that only items without leading underscores appear in the documentation.\r\n\r\nOnce, later on, the scripting API supports recognizing annotations for scripts in general, and GDScript gets annotation support, then we can start to directly mark things as private/public, virtual, etc.\r\n\r\nWould one day like to be able to do something like this:\r\n\r\n    extends Node\r\n    class_name MyNode\r\n    \r\n    # Despite method having a leading underscore, this specially marks that\r\n    # the method should be exposed to API documentation.\r\n    @public\r\n    @desc Summary about how this does a thing.\r\n        More information on it doing that thing.\r\n        This is injected straight into the XML, i.e. you can use Godot's XML doc features:\r\n        Now I'm referencing a Godot class: [Node].\r\n        Default implementation can be found in [method MyNode._override_me].\r\n        Here's an example of how you should override it...\r\n        [codeblock]\r\n        extends MyNode\r\n        @override # indented @-signs don't impact outer annotation\r\n        func _override_me() -> int:\r\n            return 1\r\n        [/codeblock]\r\n    @virtual\r\n    func _override_me() -> int:\r\n        return 0\r\n\r\nBut none of the docs stuff is 100% dependent on the annotations. It just helps fill in information. A lot of the boilerplate functionality can be achieved without annotations thanks to the inclusion of scripting API reflection information (godotengine/godot#31021)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Cache an original copy of the engine's DocData information.\r\n1. Write a method in the Editor's DocData or other docs-related, centralized API, to fetch a collection of XML files from all existing addons directories (`res://addons/*/docs/*.xml` for example) or sub-projects (whenever godotengine/godot#19178 is implemented). It would then build the content of those files into a DocData instance and merge it into the editor's cached DocData instance in order to update and replace the main DocData instance. The main one will then automatically cause Godot's ScriptEditor GUI to update with the correct script information.\r\n1. Write a method to generate boilerplate XML files from one or more scripts.\r\n    - If annotation support is in the engine (godotengine/godot#20318), then use that information to help fill out the content inside the XML data.\r\n1. Whenever script classes are regenerated, we would also want to regenerate XML docs in a background thread.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt would be used extremely often. The entire addon script ecosystem is hamstrung by the lack of this feature. We need an integrated solution. It would be a decently large amount of script work to build the tools necessary to do all of this.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nHonestly, with the exception of the annotation stuff (cherry-on-top material) and the DocData merging/searching code (which isn't exposed to scripts yet), a lot of this can be done from the scripting API with an EditorPlugin now that script reflection info is exposed to scripts. But even if we fixed the basic problems of exposing the right stuff, a user shouldn't need to install a plugin that then enables them to generate documentation on how to use a plugin. That would be ridiculous.\r\n\r\n**Other Related Issues:**\r\n- godotengine/godot#23047\r\n- godotengine/godot#10635",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/177/reactions",
      "total_count": 30,
      "+1": 28,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/176",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/176/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/176/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/176/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/176",
    "id": 510549799,
    "node_id": "MDU6SXNzdWU1MTA1NDk3OTk=",
    "number": 176,
    "title": "Add support for drag and drop of text",
    "user": {
      "login": "Jummit",
      "id": 28286961,
      "node_id": "MDQ6VXNlcjI4Mjg2OTYx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28286961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jummit",
      "html_url": "https://github.com/Jummit",
      "followers_url": "https://api.github.com/users/Jummit/followers",
      "following_url": "https://api.github.com/users/Jummit/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jummit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jummit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jummit/subscriptions",
      "organizations_url": "https://api.github.com/users/Jummit/orgs",
      "repos_url": "https://api.github.com/users/Jummit/repos",
      "events_url": "https://api.github.com/users/Jummit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jummit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-22T09:58:13Z",
    "updated_at": "2019-11-25T21:51:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTool for managing and organizing reference images with support for dragging png files from the file manager into the program.\r\n\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI want to be able to drag images from a web browser into my program and have it automatically download and display it there.\r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA `SceneTree#text_dropped` signal like `SceneTree#files_dropped`, just with text.\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAs Godot doesn't support this sort of drag and drop, it would have to be implemented from scratch.\r\nIf implemented, it could also be used in LineEdit, TextEdit and more text input nodes.\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is sadly system-level stuff, so It is impossible to implement without editing the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/175",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/175/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/175/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/175/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/175",
    "id": 510409719,
    "node_id": "MDU6SXNzdWU1MTA0MDk3MTk=",
    "number": 175,
    "title": "In the `Filesystem` panel, when mousing over an image, show the image in the tooltip",
    "user": {
      "login": "define-private-public",
      "id": 4551425,
      "node_id": "MDQ6VXNlcjQ1NTE0MjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4551425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/define-private-public",
      "html_url": "https://github.com/define-private-public",
      "followers_url": "https://api.github.com/users/define-private-public/followers",
      "following_url": "https://api.github.com/users/define-private-public/following{/other_user}",
      "gists_url": "https://api.github.com/users/define-private-public/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/define-private-public/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/define-private-public/subscriptions",
      "organizations_url": "https://api.github.com/users/define-private-public/orgs",
      "repos_url": "https://api.github.com/users/define-private-public/repos",
      "events_url": "https://api.github.com/users/define-private-public/events{/privacy}",
      "received_events_url": "https://api.github.com/users/define-private-public/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-10-22T03:31:33Z",
    "updated_at": "2020-05-25T15:58:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm currently running through the docs to learn how to use Godot.  I'm planning on doing some Game Jams with it, and resurrecting some older projects.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot a limitation, but a usability enhancement for Godot.  Right now when trying to identify images in the `FileSystem` panel, all you can rely on is the name of the file, or the tiny preview icon.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nRight now when mousing over an image in the `FileSystem` panel, it will only show the filename in the tooltip.  I think it would be more useful if the actual image (or a preview of it) showed up in the tooltip.  I've seen this done in all sorts of applications.  \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI think this is simple enough to not need a mockup creation, but I can provide one if requested.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nPseudocode provided by @Jummit:\r\n```\r\nif file is Image then\r\n   set_custom_tooltip(new ImageTexture().from_data(file.data))\r\nelse\r\n   set_tooltip(file.name)\r\nend\r\n```\r\n\r\nI do think that there should be a hard limit on the tooltip size.  e.g. 256x256 pixels max.  Anything larger should be scaled down.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nVery nice (and hopefully simple) usability enhancement.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/175/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/174",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/174/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/174/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/174/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/174",
    "id": 510212472,
    "node_id": "MDU6SXNzdWU1MTAyMTI0NzI=",
    "number": 174,
    "title": "Add multi-select for tracks for AnimationPlayer // Alternatively add way to change interpolation method for all tracks with one select",
    "user": {
      "login": "SaffronStreams",
      "id": 50481103,
      "node_id": "MDQ6VXNlcjUwNDgxMTAz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/50481103?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SaffronStreams",
      "html_url": "https://github.com/SaffronStreams",
      "followers_url": "https://api.github.com/users/SaffronStreams/followers",
      "following_url": "https://api.github.com/users/SaffronStreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/SaffronStreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SaffronStreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SaffronStreams/subscriptions",
      "organizations_url": "https://api.github.com/users/SaffronStreams/orgs",
      "repos_url": "https://api.github.com/users/SaffronStreams/repos",
      "events_url": "https://api.github.com/users/SaffronStreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SaffronStreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-21T19:01:02Z",
    "updated_at": "2020-05-26T17:37:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nFor any 2D project, really. I've had this comfort problem during many game jams.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've asked around and there seems to be no way to change the interpolation mode for multiple tracks in AnimationPlayer.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nTake one character. After bone rigging I have an Animation with 38 tracks (pos + rot), if I want to switch the interpolation mode to cubic, which often yield more natural results for animating characters, I need to click 76 times (once on interpolation setting of that track, once for selecting a certain setting). I feel like it could be 2-4, with either a dropdown at the top that changes the setting for all tracks, or with a multiselect (click first, shift click last, click interpolation, select interpolation). So a potential save of 50+ clicks, depending on model complexity. For one animation, even in game jams I have 3-5.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![proposal](https://user-images.githubusercontent.com/50481103/67234050-ada90700-f444-11e9-8433-7239eaeca096.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot to my knowledge, but I'm far from expert level.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis ease of use seems handy for anyone using Godot. I have no 3D experience, but their animation node might work the same?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/174/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/173",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/173/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/173/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/173/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/173",
    "id": 509954237,
    "node_id": "MDU6SXNzdWU1MDk5NTQyMzc=",
    "number": 173,
    "title": "Allow users to choose, if scripts should be force to be strongly-typed (or not)",
    "user": {
      "login": "dreamsComeTrue",
      "id": 1110337,
      "node_id": "MDQ6VXNlcjExMTAzMzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1110337?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dreamsComeTrue",
      "html_url": "https://github.com/dreamsComeTrue",
      "followers_url": "https://api.github.com/users/dreamsComeTrue/followers",
      "following_url": "https://api.github.com/users/dreamsComeTrue/following{/other_user}",
      "gists_url": "https://api.github.com/users/dreamsComeTrue/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dreamsComeTrue/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dreamsComeTrue/subscriptions",
      "organizations_url": "https://api.github.com/users/dreamsComeTrue/orgs",
      "repos_url": "https://api.github.com/users/dreamsComeTrue/repos",
      "events_url": "https://api.github.com/users/dreamsComeTrue/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dreamsComeTrue/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2019-10-21T13:14:15Z",
    "updated_at": "2020-11-24T00:45:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nGodot source code itself / RPG-type game in 2D\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nHaving lot of GDScript files, I am not forced anyhow to maintain consistency across them.\r\nThus - I sometimes use optional typing, sometimes not.\r\nI would love to have some sort of switch (on Editor Settings for example) that will force me\r\nto remember to put types (or not) in Script files.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nHaving scripts checked for using optional typing across whole files would set harmony across whole project.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![image](https://user-images.githubusercontent.com/1110337/67208158-49228380-f415-11e9-9e20-26f6b7599b63.png)\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nProbably (apart from Editor Settings changes) that would need a lot of modifications of script_text_editor.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nOnly, if team/developers agree to have one appointed way of writing scripts\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt should have access to Script Editor itself (or some kind of background checker/code linter) - and as long as script_text_editor is a plugin itself - it could be also considered as a addon.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/173/reactions",
      "total_count": 17,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/171",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/171/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/171/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/171/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/171",
    "id": 509615965,
    "node_id": "MDU6SXNzdWU1MDk2MTU5NjU=",
    "number": 171,
    "title": "For TextEdit/LineEdit, provide a checkbox in the editor to automatically select text on any focus/mouse entered events.",
    "user": {
      "login": "wyattbiker",
      "id": 930478,
      "node_id": "MDQ6VXNlcjkzMDQ3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/930478?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyattbiker",
      "html_url": "https://github.com/wyattbiker",
      "followers_url": "https://api.github.com/users/wyattbiker/followers",
      "following_url": "https://api.github.com/users/wyattbiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyattbiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyattbiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyattbiker/subscriptions",
      "organizations_url": "https://api.github.com/users/wyattbiker/orgs",
      "repos_url": "https://api.github.com/users/wyattbiker/repos",
      "events_url": "https://api.github.com/users/wyattbiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyattbiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-10-20T16:12:30Z",
    "updated_at": "2020-02-09T21:13:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny UI project\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen a **LineEdit**/**TextEdit** control receives focus automatically select the text and deselect when focus is lost. Otherwise I need to create a connection for `focus_entered, focus_exited(), mouse_entered(), mouse_exited()` and call the functions `select_all(), deselect()` . It is a PITA.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThe enhancement would add a checkbox in the editor Line/TextEdit properties called **Select Text on Focus**, so that when an input control gets focus (_whether via mouse or tabbing or focus_grab())_  to automatically select the text.\r\n\r\nIn addition there should be an opposite checkbox **Deselect Text on Lost Focus**.\r\n\r\nThis is essential especially handy for, but not limited to),numeric values. Normally numeric values are not edited by cursoring over them but just overtyped.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nExample tabbing/mousing Godot numeric values:\r\n![image](https://user-images.githubusercontent.com/930478/67162517-b3162c80-f332-11e9-8d44-8a24fb51ff88.png)\r\n\r\nExample Unity if you tab in/out or mouse/in out it highlights the columns. Many other applications\r\n\r\n![image](https://user-images.githubusercontent.com/930478/67162091-ece53400-f32e-11e9-9394-93a9c5af3baa.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAs stated above, if Select/Deselect Text is checked, when any of the inputs receive focus, to select the text, and the opposite when they lose focus.\r\n\r\nSpinBox and RichText (although I think these have specialized purpose) would possibly fall into this :)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUIs will be using this often. Also plugins for the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt should be core.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/169",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/169/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/169/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/169/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/169",
    "id": 509538651,
    "node_id": "MDU6SXNzdWU1MDk1Mzg2NTE=",
    "number": 169,
    "title": "Add recording feature and button to AnimationPlayer",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-10-20T03:13:31Z",
    "updated_at": "2019-11-25T21:47:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nProjects that require me to create many animations, tracks, keys.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nCreating animations, tracks and key is a very tedious process. Especially so when trying to animate not just one property of an object, but a few.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIf we had a record feature for the AnimationPlayer, I could hit \"record\" even prior to any animations existing, make a change to any object, hit pause or stop when I'm done, and only fine tune the timing and values if needed. If I made changes to multiple properties, (like scale, position, rotation, texture ... what have you) all those tracks and keys would be created for me. If there was no animation in the AnimationPlayer, it would automatically create a new one and give it a dummy name.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![record_button](https://user-images.githubusercontent.com/47016402/67154161-62cda900-f2f7-11e9-8b05-0b45c73b5efb.gif)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI only got a C-- in the \"How to turn your computer on and off\" class. So I'm not quite on the level of C++ yet. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI suppose it would be used a lot, as it would make animating anything a whole lot faster and easier.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's another UX improvement (a rather substantial one this time) to the AnimationPlayer. I don't think you should need go to the asset library to make existing tools efficient to use.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/169/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/168",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/168/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/168/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/168/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/168",
    "id": 509524043,
    "node_id": "MDU6SXNzdWU1MDk1MjQwNDM=",
    "number": 168,
    "title": "Add Godot Engine to oss-fuzz",
    "user": {
      "login": "fire",
      "id": 32321,
      "node_id": "MDQ6VXNlcjMyMzIx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/32321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fire",
      "html_url": "https://github.com/fire",
      "followers_url": "https://api.github.com/users/fire/followers",
      "following_url": "https://api.github.com/users/fire/following{/other_user}",
      "gists_url": "https://api.github.com/users/fire/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fire/subscriptions",
      "organizations_url": "https://api.github.com/users/fire/orgs",
      "repos_url": "https://api.github.com/users/fire/repos",
      "events_url": "https://api.github.com/users/fire/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fire/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 2253698383,
        "node_id": "MDU6TGFiZWwyMjUzNjk4Mzgz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:tests",
        "name": "topic:tests",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-19T23:56:37Z",
    "updated_at": "2020-08-04T19:54:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nRobustness, and security is a core Godot Engine feature.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot commonly crashes and does not deal well with valid inputs.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nhttps://github.com/google/oss-fuzz\r\n\r\nI was at the Google GSOC Mentor Summit. Google had a room dedicated to oss-fuzz.\r\n\r\noss-fuzz is a service ran by Google to help prominent or security-critical software find bugs via the method of fuzzing. They also offer up $20,000 in rewarding oss-fuzz integration.\r\n\r\nFuzzing is a method of generating valid inputs to Godot and finding invalid responses. These invalid responses can be used to discover issues to be fixed.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![oss fuzz process](https://raw.githubusercontent.com/google/oss-fuzz/master/docs/images/process.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nThe approach described by the oss-fuzz Googler is to take https://github.com/qarmin/The-worst-Godot-test-project exported as a Godot project. We would use the compiled gdscript bytecode and run the fuzzer on that input.\r\n\r\n> Why bytecode? Compiled gdscript is easier for the fuzzer to generate valid input.\r\n\r\noss-fuzz requires this project corpus to get the state of the whole project for fuzzing\r\n\r\noss-fuzz requires the Godot project to submit a pull request.\r\n\r\n* with the name of the project, \r\n* why the Godot project should be tested \r\n* a list of developers to be emailed when bugs are found.\r\n  * I nominate @fire, @akien-mga and @qarmin to have the associated email address to be set in the pr template.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nNo, this requires integration by the compiler and Godot C++ code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis feature must be in the core because oss-fuzz requires a single executable and uses clang instrumentation to find bugs.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/168/reactions",
      "total_count": 15,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/167",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/167/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/167/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/167/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/167",
    "id": 509503040,
    "node_id": "MDU6SXNzdWU1MDk1MDMwNDA=",
    "number": 167,
    "title": "Improve AnimationPlayer playback GUI",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-19T20:03:21Z",
    "updated_at": "2019-11-25T21:51:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAll my projects are using the AnimationPlayer.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNeither the play button nor the stop button is working as expected. (Godot 3.1.1, 3.2 alpha2)\r\n\r\nThe worldwide convention for play buttons is:\r\n\r\n1. Press it once to play. This will start playback from where ever the current timestamp is at the moment.\r\n2. Press it a second time while the thing is playing to Pause. (When the playback is paused, timestamps stays at it's current location and the button texture changes to a pause symbol)\r\n3. Press it a third time to resume playback of the thing.\r\n4. If the playback of the thing finished because the animation is not looped and the timestamp reached the end, the timestamp will stay at the end. Hitting play again in this state will start the playback from the beginning.\r\n\r\nCurrently only 1. works and the rest either does not exist or is spread on buttons that should do something else (like stop is currently neither a true pause, because you cannot resume clicking it again, nor a true stop, because it does not reset. See below)\r\n\r\nThe worldwide convention for stop buttons is:\r\nStop all playback and set the timestamp to the beginning.\r\nWhen the playback is stopped, the play button's texture changes back to the play symbol in case it was paused.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt would mean less irritation and confusion for people from the outside world entering Godotsphere. Users could spend more time on creating content, less on studying the obscure inner workings of the playback GUI.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![play_pause_button](https://user-images.githubusercontent.com/47016402/67151549-16b74000-f2c8-11e9-8267-f1badd0ac08b.gif)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know C++\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's an UX improvement (or rather fix) of existing engine feature, so no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis should have been core from the beginning. Don't make people go to the Asset Library to download UX improvements. Doing that is the opposite of an UX improvement.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/167/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/166",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/166/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/166/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/166/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/166",
    "id": 509421282,
    "node_id": "MDU6SXNzdWU1MDk0MjEyODI=",
    "number": 166,
    "title": "Need VR playspace and guardian bounds",
    "user": {
      "login": "RobKohr",
      "id": 26756,
      "node_id": "MDQ6VXNlcjI2NzU2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/26756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RobKohr",
      "html_url": "https://github.com/RobKohr",
      "followers_url": "https://api.github.com/users/RobKohr/followers",
      "following_url": "https://api.github.com/users/RobKohr/following{/other_user}",
      "gists_url": "https://api.github.com/users/RobKohr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RobKohr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RobKohr/subscriptions",
      "organizations_url": "https://api.github.com/users/RobKohr/orgs",
      "repos_url": "https://api.github.com/users/RobKohr/repos",
      "events_url": "https://api.github.com/users/RobKohr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RobKohr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862117,
        "node_id": "MDU6TGFiZWwxNjk3ODYyMTE3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:xr",
        "name": "topic:xr",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-19T09:11:47Z",
    "updated_at": "2019-11-25T21:43:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA VR game similar to unseen diplomacy where the level keeps adding new paths within the playspace to explore.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe walls, doors, etc all need to be placed dynamically inside the playspace, but all I have is ARVROrigin to tell me where the centerpoint is. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI could add/remove walls and pathing inside the playspace for an infinite exploration game, without any locomotion, and knowing that nothing I place will be outside of the player's reach.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n```\r\n+----+------+\r\n|    |      |\r\n|  P |      |\r\n+--+ +--+ +-+\r\n|       +   |\r\n|           |\r\n+-----------+\r\n```\r\nPlayer in a room in the playspace. As he moves parts of the enviornment can fall away outside of his view, and be replaced by more rooms.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nIt would use a path of points for the outter bounds to provide starting lines to build walls from.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I can see since it needs to come from the VR server\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nKnowing the playspace and gaurdian bounds is pretty base level things needed for a VR game, it will have many other uses, and I don't know if it could be implemented as an add on. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/166/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/165",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/165/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/165/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/165/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/165",
    "id": 509171941,
    "node_id": "MDU6SXNzdWU1MDkxNzE5NDE=",
    "number": 165,
    "title": "Allow Autoloads to be instanced below the user-run scene",
    "user": {
      "login": "samdze",
      "id": 19392104,
      "node_id": "MDQ6VXNlcjE5MzkyMTA0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19392104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samdze",
      "html_url": "https://github.com/samdze",
      "followers_url": "https://api.github.com/users/samdze/followers",
      "following_url": "https://api.github.com/users/samdze/following{/other_user}",
      "gists_url": "https://api.github.com/users/samdze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samdze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samdze/subscriptions",
      "organizations_url": "https://api.github.com/users/samdze/orgs",
      "repos_url": "https://api.github.com/users/samdze/repos",
      "events_url": "https://api.github.com/users/samdze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samdze/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-18T16:04:57Z",
    "updated_at": "2020-09-12T21:31:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTop-down 2d game with several viewports that have to be updated in a specific order, then rendered.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'd like to have a way to globally update or call functions in nodes that are scattered across the SceneTree.\r\nI want to update the positions of those objects only after everything else has been updated.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI'd like to be able to define Autoloads that will be created below the current scene instead of above it.\r\nThis way, I can keep track of the nodes I'd like to update adding them to a list and calling them in the Autoload that is certain to be ran after everything else.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIn the editor, the project manager could also display the Scene as a non-removable \"Autoload\", and allow the user to place Autoloads below it.\r\n\r\n![GodotAutoloadOrder](https://user-images.githubusercontent.com/19392104/67108933-c492f380-f1cf-11e9-9900-676983d907dd.png)\r\n\r\nAdditionally, the API used by plugins to add/remove Autoloads could be updated to check and specify their order and the position of the Scene inside the list.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n<>\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nMaybe, but they would require more boilerplate and more strict setups.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a feature better added as a core one as it can give more control to Autoloads and plugin creators.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/165/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/162",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/162/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/162/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/162/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/162",
    "id": 507566880,
    "node_id": "MDU6SXNzdWU1MDc1NjY4ODA=",
    "number": 162,
    "title": "Add support for nullable static types in GDScript",
    "user": {
      "login": "aaronfranke",
      "id": 1646875,
      "node_id": "MDQ6VXNlcjE2NDY4NzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1646875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaronfranke",
      "html_url": "https://github.com/aaronfranke",
      "followers_url": "https://api.github.com/users/aaronfranke/followers",
      "following_url": "https://api.github.com/users/aaronfranke/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaronfranke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaronfranke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaronfranke/subscriptions",
      "organizations_url": "https://api.github.com/users/aaronfranke/orgs",
      "repos_url": "https://api.github.com/users/aaronfranke/repos",
      "events_url": "https://api.github.com/users/aaronfranke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaronfranke/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 50,
    "created_at": "2019-10-16T01:53:20Z",
    "updated_at": "2020-12-18T08:29:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "\r\n**Describe the project you are working on:** This applies to many projects. This is an offshoot from https://github.com/godotengine/godot/issues/20801, example use cases and other discussions are welcome.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nLet's say you have a method that accepts a 2D position, which would look something like this:\r\n\r\n```gdscript\r\nfunc whatever(vec):\r\n```\r\n\r\nA problem with this is that there's no type safety, so the function could unexpectedly break if the passed-in value is not a `Vector2`. One option is to use static typing:\r\n\r\n```gdscript\r\nfunc whatever(vec: Vector2):\r\n```\r\n\r\nThis works, and now it's not possible for users to, for example, pass in a `Color` or any other type that's invalid for this method. However, now you can't pass in `null` to mean N/A or similar.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIf GDScript's static typing system allowed specifying nullable types, we would be able to restrict the type to either a valid value or `null`. The presence of a valid value can then be detected simply by checking if it is not null, as non-null nullable typed values must be valid values.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nMy suggestion is to simply allow this by adding a question mark after the type name, which is the same syntax used in C#, Kotlin, and TypeScript. User code could look something like this:\r\n\r\n```gdscript\r\nfunc whatever(vec: Vector2?):\r\n```\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nAside from the above, I don't have any specific ideas on how it would be implemented. \r\n\r\nHowever, I will add that we could expand this idea for engine methods. Many parts of Godot accept a specific type or `null` to mean invalid or N/A, or return a specific type or `null` when there is nothing else to return. For example, `Plane`'s [intersect methods](https://docs.godotengine.org/en/latest/classes/class_plane.html#class-plane-method-intersect-3) return a `Vector3` if an intersection was found, or `null` if no intersection was found. Nullable static typing could essentially self-document such methods by showing that the return type is `Vector3?` instead of `Vector3`.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** The only option is to not use static typing if you need the variable to be nullable.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** Yes, because it would be part of GDScript.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/162/reactions",
      "total_count": 82,
      "+1": 81,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/161",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/161/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/161/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/161/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/161",
    "id": 507160611,
    "node_id": "MDU6SXNzdWU1MDcxNjA2MTE=",
    "number": 161,
    "title": "Add touch control to editor",
    "user": {
      "login": "cewbdex",
      "id": 9021297,
      "node_id": "MDQ6VXNlcjkwMjEyOTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/9021297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cewbdex",
      "html_url": "https://github.com/cewbdex",
      "followers_url": "https://api.github.com/users/cewbdex/followers",
      "following_url": "https://api.github.com/users/cewbdex/following{/other_user}",
      "gists_url": "https://api.github.com/users/cewbdex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cewbdex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cewbdex/subscriptions",
      "organizations_url": "https://api.github.com/users/cewbdex/orgs",
      "repos_url": "https://api.github.com/users/cewbdex/repos",
      "events_url": "https://api.github.com/users/cewbdex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cewbdex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-15T10:41:37Z",
    "updated_at": "2019-11-25T21:53:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nN/A\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCan't use touch properly in Godot editor.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nI will be able to work without mouse better on the go, touchpad is not the most productive, touchscreen is just better. Implementing 3D view control and scrolling with finger would be nice.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nN/A\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nN/A\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nN/A",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/160",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/160/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/160/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/160/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/160",
    "id": 507069080,
    "node_id": "MDU6SXNzdWU1MDcwNjkwODA=",
    "number": 160,
    "title": "Match-Case Fallthrough",
    "user": {
      "login": "neoxid501",
      "id": 27456168,
      "node_id": "MDQ6VXNlcjI3NDU2MTY4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/27456168?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/neoxid501",
      "html_url": "https://github.com/neoxid501",
      "followers_url": "https://api.github.com/users/neoxid501/followers",
      "following_url": "https://api.github.com/users/neoxid501/following{/other_user}",
      "gists_url": "https://api.github.com/users/neoxid501/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/neoxid501/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/neoxid501/subscriptions",
      "organizations_url": "https://api.github.com/users/neoxid501/orgs",
      "repos_url": "https://api.github.com/users/neoxid501/repos",
      "events_url": "https://api.github.com/users/neoxid501/events{/privacy}",
      "received_events_url": "https://api.github.com/users/neoxid501/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-10-15T07:49:42Z",
    "updated_at": "2020-01-27T13:28:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nIt's an RPG where when a character levels, specific stats are increased for example speed, skills, etc. The problem that this proposal will be addressing isn't specific to ours but moreso a feature that offers a solution to simplify the amount of work required for a situation.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAdmittedly I wouldn't call it a problem, it's more of a QoL change where a keyword is added such as `fallthrough` where in a `match` statement, if used the next block is executed without the need for an additional check or comparison.\r\nThe problem we initially ran into was that if the player is say level 3, then we would like everything that happens to them on lvl 3 to happen, then 2, then 1.\r\n```python\r\nmatch 3:\r\n    3:\r\n        print(\"Only this prints.\")\r\n    2:\r\n        print(\"But I want these \")\r\n    1:\r\n        print(\"to print too!\")\r\n```\r\nHowever due to the way that `continue` currently works where it rechecks the value being matched, only `Only this prints` is put into console. We eventually found a solution (described below) however I still think the feature would be useful.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI am primarily making this feature proposal because having used `switch case` before in other languages, I assumed that using the keyword `continue` would effectively act as a fallthrough. However it seems that Godot will continue to check for a match instead of just executing the next case as it would in Java for example. From my understanding that Godot attempts to be a very flexible toolkit not beholden to other languages/engines, but I think that adding fallthrough simplifies the problem solving needed for certain logic problems.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nNot... entirely sure what to put here, but effectively what I'm proposing would be a keyword `fallthrough` or something along those lines where when used it continues and executes the next block without doing a check on the values. Adding a keyword this way would maintain backwards compatability so no previously written `match` statements would need to be rewritten.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nA keyword `fallthrough` where if used in a match, the next code block is executed without the need for a comparison.\r\n```python\r\nmatch 3:\r\n\tcase 3:\r\n\t\tprint(\"This will print\")\r\n\t\tfallthrough\r\n\tcase 2:\r\n\t\tprint(\"And so will this.\")\r\n\t\tcontinue\r\n\tcase 1:\r\n\t\tprint(\"However not this.\")\r\n\t_:\r\n\t\tprint(\"But this will also print.\")\r\n```\r\n\r\nConsole Output:\r\n```\r\nThis will print\r\nAnd so will this.\r\nBut this will also print.\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nUsing the current `match` you could do this\r\n```python\r\nmatch 4:\r\n    4:\r\n        print(\"However this is very long, \")\r\n        continue\r\n    3, 4:\r\n        print(\"and if I need to implement say 20 levels \")\r\n        continue\r\n    2, 3, 4:\r\n        print(\"worth of rewards then the list of matches \")\r\n        continue\r\n    1, 2, 3, 4:\r\n        print(\"gets really long the longer it goes.\")\r\n```\r\nHowever this runs into a space problem where if it goes on to say value 100 it takes up a tone of space and it still has to run a check through the list of values.\r\n\r\nAnother alternative I thought of would be to start from the lowest level and check climbing up using if statements.\r\n\r\n```python\r\nvar lvl = 4\r\nif(lvl>=1):\r\n    print(\"But this runs into a problem where \")\r\n    if(lvl>=2):\r\n        print(\"the indentation will keep pushing \")\r\n        if(lvl>=3):\r\n            print(\"the code furth off to the right \")\r\n            if(lvl>=4):\r\n                print(\"which is inconvenient.\")\r\n```\r\nThis helps cut back on the number of checks being done, however still runs into a space problem especially with the amount of indentation.\r\n```python\r\nfor i in range(1, level + 1):\r\n    match x:\r\n        1:\r\n            print(\"You're done at level 1!\")\r\n        2:\r\n            print(\"No you fool, level 2!\")\r\n        3:\r\n            print(\"Level 3, actually!\")\r\n        4:\r\n            print(\"No more than level 4!\")\r\n```\r\nThis is actually the solution that we're using, however it doesn't solve a case where functionally you would like two of the options to be connected, and one to be independent.\r\n```python\r\nvar val = 3\r\nmatch val:\r\n    case 3:\r\n        print(\"hello\")\r\n        val = 2\r\n        continue\r\n    case 2:\r\n        print(\"howdy\")\r\n    case 1:\r\n        print(\"whoa\")\r\n```\r\nThis now solves the above problem, but requires the changing of the variable `val`. Alternatively the value could be duplicated to a temp value but that would introduce another variable if `fallthrough` was available this could be simplified to:\r\n\r\n```python\r\nvar val = 3\r\nmatch val:\r\n    case 3:\r\n        print(\"hello\")\r\n        fallthrough\r\n    case 2:\r\n        print(\"howdy\")\r\n    case 1:\r\n        print(\"whoa\")\r\n```\r\nNo temp variable or value changing needed. It also simplifies a lot of the through process of how to solve the issue (as the above code blocks were in fact how we iterated on the issue).\r\n\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis could be an asset, however I think there can be situations other than my use case. In general for instance:\r\n```\r\nIf option 3 happens, option 2 also happens.\r\nIf option 2 happens, option 3 doesn't happen.\r\nAnd option 1 only occurs if option is picked.\r\n```\r\nIt's mostly weird to me that seemingly I fallthrough wasn't implemented when `match` was first created, but of course that's just a personal preference. Though apparently the issue has been raised before so there is precedence.\r\nhttps://www.reddit.com/r/godot/comments/b8gqli/match_fallthrough_with_continue_gdscript_help/\r\n\r\nI apologies if this is way too long and verbose, but hopefully this can get added to Godot's core ~~and if not someone plz make an addon I will use it ty!~~\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/160/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/158",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/158/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/158/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/158/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/158",
    "id": 506828946,
    "node_id": "MDU6SXNzdWU1MDY4Mjg5NDY=",
    "number": 158,
    "title": "Expose method to get current key index of an animation",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-10-14T19:17:23Z",
    "updated_at": "2019-11-25T21:50:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAction Game, Card Game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI'm trying to get the index of the current key of my animation. Maybe I'm blind, but I've been going over and over both the [Animation resource](http://docs.godotengine.org/en/stable/classes/class_animation.html) docs and the [AnimationPlayer ](https://docs.godotengine.org/en/3.1/classes/class_animationplayer.html)docs and could not find it and also asked around on Discord.\r\n\r\nI would expect something like this to work:\r\n```\r\nvar anim = $AnimationPlayer.get_animation(\"default\")\r\nvar key = anim.get_key_index()\r\n```\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMany methods of the Animation resource require the key index as argument, but there seems no way to get it.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI don't know if people would prefer it as method or property, but I guess it would look something like either\r\n`int keyindex `or\r\n`int get_key_index (optional int track)`\r\nreturns current key index of the animation.\r\nIf no track argument is given, all track keys of the animation considered.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't speak C++\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI would not know how.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt seems like a reasonable thing to have in core since so many other already existing methods require the key index as argument.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/157",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/157/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/157/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/157/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/157",
    "id": 506743152,
    "node_id": "MDU6SXNzdWU1MDY3NDMxNTI=",
    "number": 157,
    "title": "Add literal quoted strings with embedded variables (f-strings) to GDScript",
    "user": {
      "login": "wyattbiker",
      "id": 930478,
      "node_id": "MDQ6VXNlcjkzMDQ3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/930478?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyattbiker",
      "html_url": "https://github.com/wyattbiker",
      "followers_url": "https://api.github.com/users/wyattbiker/followers",
      "following_url": "https://api.github.com/users/wyattbiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyattbiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyattbiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyattbiker/subscriptions",
      "organizations_url": "https://api.github.com/users/wyattbiker/orgs",
      "repos_url": "https://api.github.com/users/wyattbiker/repos",
      "events_url": "https://api.github.com/users/wyattbiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyattbiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-10-14T16:01:03Z",
    "updated_at": "2020-06-03T07:28:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nCoding applications using Godot/GDScript\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nWould like to format literal quoted strings with embedded global/local variables and expressions by preceding the quoted string with the formatter 'f'. See example below.\r\n\r\nWould like the option to use embedded f-string formatting similar to Python. \r\nKeeps GDScript consistent with Python as much as possible but provides less wordy and error prone methods to display strings.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nMakes string formatting simpler and less error prone and uses less code to format strings.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n### Example code single line literal string formatting.\r\n```\r\n>>> var x='abc'\r\n>>> var y=0\r\n>>> output =  f'The alphabet starts with {x} and numerals start with {y}'\r\n>>> print(output)\r\n```\r\nOutput>> The alphabet starts with abc and numerals start with 0\r\n\r\n### Example code using multiline string formatting with embedded expression.\r\n\r\n```\r\n>>> var name='Godot'\r\n>>> var profession='Game Engine'\r\n>>> message = f\"\"\"\r\n...     Hi {name}. \r\n...     You are a {profession}. \r\n...     You are version {(Engine.get_version_info()).major}.\r\n... \"\"\"\r\n...\r\n>>> print(message)\r\n```\r\nOutput>> '\\n    Hi Godot.\\n    You are a Game Engine.\\n    You are version 3.\\n'\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nImplementation specs should follow Python 3 where possible:\r\nhttps://www.python.org/dev/peps/pep-0498/\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nWill be used often. The alternative is using % or .format() formatting which is much more verbose.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nThis enhancement needs to be part of the core along with the other formatting options since it is a syntax modification.\r\n\r\n*Bugsquad edit (keywords for easier searching): template literals, string interpolation*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/157/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/153",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/153/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/153/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/153/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/153",
    "id": 506390538,
    "node_id": "MDU6SXNzdWU1MDYzOTA1Mzg=",
    "number": 153,
    "title": "Add reparenting method",
    "user": {
      "login": "lmerriam",
      "id": 1657444,
      "node_id": "MDQ6VXNlcjE2NTc0NDQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1657444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmerriam",
      "html_url": "https://github.com/lmerriam",
      "followers_url": "https://api.github.com/users/lmerriam/followers",
      "following_url": "https://api.github.com/users/lmerriam/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmerriam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmerriam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmerriam/subscriptions",
      "organizations_url": "https://api.github.com/users/lmerriam/orgs",
      "repos_url": "https://api.github.com/users/lmerriam/repos",
      "events_url": "https://api.github.com/users/lmerriam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmerriam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-10-13T22:24:44Z",
    "updated_at": "2020-11-11T14:55:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA Diablo-style 2D action RPG.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nAny time I pass around nodes (for example, I have status effects which are transferred from an attack object to it's victim) reparenting them requires that I first get the existing parent, remove the child, and then add them to their new parent. This causes what feels like unnecessary code and scene tree traversal:\r\n```\r\nnode.get_parent().remove_child(node)\r\nnew_parent.add_child(node)\r\n```\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA reparenting function built in to the engine would be faster than my GDScript and would save me from repeating most of the code in the example above every time I need to reparent.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nImplement a new `node.set_parent(new_parent)` method or change the existing `add_child(node)` method to remove any existing parents by default\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is a common use case that would be faster if implemented in the engine.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/153/reactions",
      "total_count": 17,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/152",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/152/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/152/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/152/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/152",
    "id": 506384796,
    "node_id": "MDU6SXNzdWU1MDYzODQ3OTY=",
    "number": 152,
    "title": "Add an indicator to method metadata to indicate static methods",
    "user": {
      "login": "bitwes",
      "id": 1156520,
      "node_id": "MDQ6VXNlcjExNTY1MjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1156520?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitwes",
      "html_url": "https://github.com/bitwes",
      "followers_url": "https://api.github.com/users/bitwes/followers",
      "following_url": "https://api.github.com/users/bitwes/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitwes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitwes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitwes/subscriptions",
      "organizations_url": "https://api.github.com/users/bitwes/orgs",
      "repos_url": "https://api.github.com/users/bitwes/repos",
      "events_url": "https://api.github.com/users/bitwes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitwes/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-13T21:28:14Z",
    "updated_at": "2020-11-22T14:56:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThe GUT unit testing framework.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen creating doubles for objects I cannot determine if a method is static or not which causes error when instantiating said object.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nI can exclude static methods from doubling.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nIn the results of `get_method_list` the dictionary would include some way to determine if a method is static or not.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNA\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThere is a workaround.  Barring any way to determine the status from info provided by the engine, I must make users specify a list of functions not to double.  This is more cumbersome for users than it is to code.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI don't know how an add-on could supply this info.  It's also useful information that others may need at some point.  Most everything else about the method is provided by `get_method_list`",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/151",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/151/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/151/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/151/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/151",
    "id": 506324420,
    "node_id": "MDU6SXNzdWU1MDYzMjQ0MjA=",
    "number": 151,
    "title": "Allow Spritesheets using the Frame property to expand horizontally",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 53,
    "created_at": "2019-10-13T13:17:38Z",
    "updated_at": "2020-04-23T17:00:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D action game, card game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen working with the Sprite node and spritesheet textures, it's possible to expand the spritesheet in the vertical direction, but not the horizontal direction without breaking animation. (see minimal testproject below)\r\n\r\n![test_spritesheet3](https://user-images.githubusercontent.com/47016402/66716602-e2c3b280-edcf-11e9-94db-c655cef978e1.png)\r\n\r\nIssue:\r\n![non_expand_spritesheet_demo](https://user-images.githubusercontent.com/47016402/66873648-40f7bd80-efa9-11e9-86cb-6947c803a911.gif)\r\n\r\n\r\nDetailed description of the issue:\r\n\r\n![46406276-875ddf80-c6fa-11e8-801e-cfc1ff81bbd3](https://user-images.githubusercontent.com/47016402/66715779-996f6500-edc7-11e9-96ca-3a37b2d44f6c.png)\r\n\r\nGraphic is from: https://github.com/godotengine/godot/issues/22553\r\n\r\n\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nAs it is now, for all practical sense and purposes, it is infeasible to increase the amount of drawn frames without tearing them apart on your spritesheet because of this limitation. Tearing them apart makes frame animations terrible to work with. Allowing horizontal expansion would allow me to iterate on those spritesheets without braking animation, something desperately needed. See minimal test project below.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nMinimal test project:\r\n[expand_spritesheet.zip](https://github.com/godotengine/godot-proposals/files/3721738/expand_spritesheet.zip)\r\n\r\nRun the project and see the correct frame cells playing. To see the issue,\r\n- drag the \"test_spritesheet_expanded.png\" into the Sprite texture,\r\n- set \"Hframes\" from 7 to 11\r\n- run the project again to see the wrong cells being displayed in any but green,\r\nGreen is the first row, the cell attribution for green obviously is unchanged.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThe Animation resource Frame value would just have to update if the Hframe property changed in the editor.\r\n![expandable_spritesheet_demo](https://user-images.githubusercontent.com/47016402/66873741-80bea500-efa9-11e9-980b-97a384d0524c.gif)\r\nDownload and try this visualization: [Win](https://github.com/godotengine/godot-proposals/files/3730120/expandable_spritesheet_win.zip), [Linux](https://github.com/godotengine/godot-proposals/files/3730144/expandable_spritesheet_linux.zip), [Mac](https://github.com/godotengine/godot-proposals/files/3730171/expandable_spritesheet_mac.zip).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is about fixing a current poor design/implementation that impedes production. \r\nThe only workaround is to delete all done work on animation and reassign all animation key values again once the Hframe property changed.\r\nSince 3.2, there is the option use the Frame Coords property instead of Frame property, but this means also deleting all work done on animation and reassign all animation key values again. In my case that's hundreds of frames per character. Worse even, because the Frame Coords property requires two values to be set, not one like Frames property, doubling the work load.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's an issue with an already existing and otherwise working built in feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/151/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/147",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/147/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/147/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/147/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/147",
    "id": 505867337,
    "node_id": "MDU6SXNzdWU1MDU4NjczMzc=",
    "number": 147,
    "title": "Add WASM (WASI) host support (including, but not limited to, the HTML5 target)",
    "user": {
      "login": "Type1J",
      "id": 413028,
      "node_id": "MDQ6VXNlcjQxMzAyOA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/413028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Type1J",
      "html_url": "https://github.com/Type1J",
      "followers_url": "https://api.github.com/users/Type1J/followers",
      "following_url": "https://api.github.com/users/Type1J/following{/other_user}",
      "gists_url": "https://api.github.com/users/Type1J/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Type1J/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Type1J/subscriptions",
      "organizations_url": "https://api.github.com/users/Type1J/orgs",
      "repos_url": "https://api.github.com/users/Type1J/repos",
      "events_url": "https://api.github.com/users/Type1J/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Type1J/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2359318412,
        "node_id": "MDU6TGFiZWwyMzU5MzE4NDEy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/platform:html5",
        "name": "platform:html5",
        "color": "e4e4e4",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865108,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:porting",
        "name": "topic:porting",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-10-11T13:54:00Z",
    "updated_at": "2020-11-05T19:01:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am working on an app that needs updates often due to new features.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nReplacing a GDNative dll is how we currently need to distribute new updates. Each platform needs it's own dll. The dlls are written in Rust. GDScript isn't an option due to the CPU intensive tasks in other threads that we are performing.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nOnly 1 .dll (.wasm) file will need to be produced, and it will work on all platforms\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nCurrent:\r\nWindows -> .dll\r\nLinux -> .so\r\nmacOS -> .dylib\r\nHTML5 -> Currently not supported, but desired\r\nAndroid -> .so\r\niOS -> Currently not supported, but desired (for our project)\r\n\r\nAfter proposal:\r\nWindows, Linux, macOS, HTML5, Android, and iOS (potentially more) -> .wasm\r\n\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThe .wasm dynamic library would basically implement the same API as GDNative dynamic libraries currently do. See wasmer and WASI (https://wasi.dev/) for an example host native application.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo. Currently, this is a build system and distribution problem. The feature is the only option for a GDNative library for HTML5, and it can be used to prevent the need for other proposals to go into the core.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt enables asset libraries to make \"native\"-ish extensions that can be used on multiple platforms. They may not be as fast as true native, but they are faster than GDScript by far, and enable legacy code in the same way that GDNative does, but WASI also provides sandboxing support that GDNative does not have, which reduces the security audit required in some cases with asset library GDNative dynamic libraries.\r\n\r\n*Bugsquad edit (keywords for easier searching): WebAssembly*",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/147/reactions",
      "total_count": 30,
      "+1": 30,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/146",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/146/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/146/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/146/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/146",
    "id": 505726070,
    "node_id": "MDU6SXNzdWU1MDU3MjYwNzA=",
    "number": 146,
    "title": "Implement a patch system to generate PCK files with only the required data",
    "user": {
      "login": "somnivore",
      "id": 28724859,
      "node_id": "MDQ6VXNlcjI4NzI0ODU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28724859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somnivore",
      "html_url": "https://github.com/somnivore",
      "followers_url": "https://api.github.com/users/somnivore/followers",
      "following_url": "https://api.github.com/users/somnivore/following{/other_user}",
      "gists_url": "https://api.github.com/users/somnivore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somnivore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somnivore/subscriptions",
      "organizations_url": "https://api.github.com/users/somnivore/orgs",
      "repos_url": "https://api.github.com/users/somnivore/repos",
      "events_url": "https://api.github.com/users/somnivore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somnivore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-10-11T08:56:24Z",
    "updated_at": "2020-10-30T18:35:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCommunity Content-heavy RPG\r\n**Describe the problem or limitation you are having in your project:**\r\nI have designed my game with the idea that anyone can download the game's contents and create their own DLC with it.  A large variety of assets will be made available, including various scenes containing ready-made models/collision to compose new levels with, music/sfx, animations, icons, and so on.  The designer can then export their creations as a .pck, which the game's players can download (through some distribution system or another) into their `user://` and enjoy.\r\n\r\nThis works great, thanks to `ProjectSettings.load_resource_pack()`, but there's a really big catch: there's no built-in way to prevent a designer from exporting much of, if not all, of the project's contents in their .pck.  In the best-case scenario, only the relevant content is exported, which means that all dependencies are exported, too.  Because the community designer is expected to not need to create their own assets when they want to create content for the game, but instead may use ready-made assets already included with the game, they wind up exporting duplicate assets due to the obligation that resources are exported with their dependencies.  Worse: these dependencies may or may not be desirable, as a designer will most likely need some of those dependencies included, while other dependencies not.\r\n\r\nFor the sake of an example, let's say the project provides 1GB of assets to play with, and your typical community-designed DLC may reference 100MB of those assets, but itself provide few new assets (so just a lot of data for scenes, scripts and simple resources, in effect.)  As the system is designed right now, 100MB of assets which the game already has will be duplicated into the .pck because they are dependencies for the designer's scenes.  It's not only a lot to distribute, but it's not required for the game to work as it'll just overwrite what's already there, and what's more: it forces the player to be conservative about what community content they play at any given time since they may not want to have multiple gigabytes of (duplicated) content on their HDD.\r\n\r\nThat's just one aspect of the problem; another aspect is when the game's own designers want to release a patch for their game using a .pck, and that patch, just as well, references a lot of excess, unmodified content just by the nature of exporting.  This example is probably less extreme than the previous one, but the idea that making a minor change to a scene can result in the inclusion of a large amount of duplicate content is a little worrying.  At some point, you might think that you're better off patching your game by re-releasing the entire thing and overwriting the last one, than continually building up duplicated content until the patches alone outweigh the game's own size.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nIt seems that Godot already has a feature that should solve this problem easily, via the patches tab in the Export dialogue: \r\n\r\n![image](https://user-images.githubusercontent.com/28724859/66632730-b9880400-ebce-11e9-8121-4977bbe7d917.png)\r\n\r\nBut, unfortunately, it seems that this tool hasn't been functional for quite a long time, assuming it ever was:\r\n\r\nhttps://github.com/godotengine/godot/issues/22394\r\n![image](https://user-images.githubusercontent.com/28724859/66632826-f6ec9180-ebce-11e9-816c-b15725b4bc17.png)\r\n\r\nThis tool would've been used to indicate what constitutes as the \"base game\" content, where you would then add more patches as you go along with adding content packs.  From then on, exporting content would take into account what is already within these patches, and avoid duplicating any assets which are otherwise entirely unmodified.  Now our .pck's are small and efficient, containing only essential data.  Hurrah!\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nAccording to a [tweet](https://twitter.com/reduzio/status/833439304571551744?lang=en) by Juan back in the 2.0 days, this is how it would've been used:\r\n![image](https://user-images.githubusercontent.com/28724859/66633008-6d898f00-ebcf-11e9-8d1e-399578f3291a.png)\r\n\r\nAside from \"add previous patches\" being a little confusing, I think this design should work just fine as-is.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nThe foundational code for this system is somewhere in the engine already, though I'm not sure where it might be located.  It just needs to be completed/updated.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nApparently it's possible to create your own plugin which uses the `PCKPacker` API to do something similar to what the aforementioned tool would do.  From my experiences with creating plugins, I can say it definitely can't be worked around with a few lines of script, but it is probably doable with a lot of lines of script.  Regardless, it's definitely something a lot of Godot developers could use, especially those who are creating medium to large games, or any game where modability stems from using Godot as the mod editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's in \"essential but missing feature\" territory.\r\n\r\nAlso, sorry for opening a proposal for a feature that's practically halfway in the engine already; I figured it could help bring more attention to it, and give some insight as to the struggle developers are facing without it, or why you might need it sooner or later.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/146/reactions",
      "total_count": 51,
      "+1": 40,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 11,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/144",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/144/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/144/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/144/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/144",
    "id": 505501641,
    "node_id": "MDU6SXNzdWU1MDU1MDE2NDE=",
    "number": 144,
    "title": "Add a link/unlink option for subproperties like \"scale\"",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-10-10T20:46:21Z",
    "updated_at": "2020-08-27T03:36:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D action game, card game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThroughout the day I change properties like `scale` in the editor many, many times. Which already can be quite annoying because of https://github.com/godotengine/godot/issues/28618.\r\nIn 95% of the cases I want to change properties like `scale` proportionally. So I have to first set the x, then the y value, _both to the same value_. Because the editor does not offer to link those properties, all those operations have to be done twice ... every ... single ... time.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA small clickable link/unlink icon next to values that would often be set proportionally. \r\nA small mouseover text explaining what it does, for those unsure about the meaning of the icon, similar to mouseover on properties.\r\nI would expect `scale` to be **linked** by default, others may be unlinked by default.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![linked_properties](https://user-images.githubusercontent.com/47016402/66604307-335bc580-ebae-11e9-8640-5cb84933e30f.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI'm C++ illiterate.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's so common everywhere else, people are used to that level of comfort. I expect it to be used a lot.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNoone will/would/should download addons for such small UI quality of life improvements.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/144/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/143",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/143/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/143/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/143/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/143",
    "id": 505488663,
    "node_id": "MDU6SXNzdWU1MDU0ODg2NjM=",
    "number": 143,
    "title": "\"Menu\" key should open up the right click context menu for highlighted elements",
    "user": {
      "login": "greenfox1505",
      "id": 1642297,
      "node_id": "MDQ6VXNlcjE2NDIyOTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1642297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenfox1505",
      "html_url": "https://github.com/greenfox1505",
      "followers_url": "https://api.github.com/users/greenfox1505/followers",
      "following_url": "https://api.github.com/users/greenfox1505/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenfox1505/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenfox1505/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenfox1505/subscriptions",
      "organizations_url": "https://api.github.com/users/greenfox1505/orgs",
      "repos_url": "https://api.github.com/users/greenfox1505/repos",
      "events_url": "https://api.github.com/users/greenfox1505/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenfox1505/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-10-10T20:18:26Z",
    "updated_at": "2019-11-25T21:56:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** Writing GDScript within Godot\r\n\r\n**Describe the problem or limitation you are having in your project:** The \"Menu\" key seems to be unused in the Godot Editor. Godot, like other text editors, should listen to the \"Menu\" key to right click context menus. This could be used for getting right-click menus from GDScript editor or even in the Scene tab. Other areas where a right-click triggers something and that area can be \"highlighted\" with arrow keys should also respond the the \"Menu\" key.\r\n\r\nFor those that don't know, the \"Menu\" key is a key on most keyboards (although some laptops require you use a \"Fn\" key to activate it). It usually exists between the Ctrl and Alt keys right of the space bar. It usually looks like a hamburger menu inside a box. https://en.wikipedia.org/wiki/Menu_key\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:** This would allow you to open context menus with a keyboard. Does the exact same action as right clicking an object, but does not require context switching to a mouse.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No. I would use this enhancement will be used constantly.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/143/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/142",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/142/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/142/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/142/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/142",
    "id": 505028768,
    "node_id": "MDU6SXNzdWU1MDUwMjg3Njg=",
    "number": 142,
    "title": "Add dependency handling and enable users to organize and publish addons and addon-collections as packages",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863754,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNzU0",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:assetlib",
        "name": "topic:assetlib",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2019-10-10T04:37:34Z",
    "updated_at": "2021-01-04T18:30:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nThe [Godot Next plugin](https://github.com/godot-extended-libraries/godot-next): a collection of scripts that are useful in a variety of projects (utilities, editor tools, singletons, nodes, resources, etc.).\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot Next is large enough that it has a small network of internal dependencies (ranging from 0 and 1 all the way up to 6 in the rarest case). No big deal if you grab the whole thing, but if you just want to solve a problem with one script, then you *might* have to deal with dependency management, even inside a single addon. \r\n\r\nThis is a big headache, both for me as the maintainer and for users who get interested and then very quickly frustrated/turned off due to needing to deal with resolving out-of-nowhere dependency chains.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThe best solution would be to increase the granularity of addons in Godot Next and introduce dependency handling to Godot. After all, some people want it all; some want just the most necessary bits. The choice of whether to make users manually pick out the parts they want from the whole or piece together the whole from a bunch of parts shouldn't be a mutually exclusive one. Both options should be available.\r\n\r\nRight now we have 1 addon with a wide variety of classes. Some are related to others; many aren't. But, they are all a package deal. They are part of Godot Next's brand of, \"a generic extension to Godot.\"\r\n\r\nRather than that, I would rather have N addons, one for each class or minor collection of classes, and have each tiny addon declare the dependencies that it has on other addons. I would then want to be able to declare all of these addons to be part of a thematic/topical \"package\" that users can use to mass select a collection of other addons. These could be defined as part of an AssetPackage resource type for arbitrary creation and storage. The Godot Asset Library and the EditorSettings would also be able to store these AssetPackage files for remotely distributed and locally shared \"packages\" of addons.\r\n\r\nFurthermore, I would want to be able to browse and configure these \"packages\" of addons during the project creation and addon browsing processes to provide more concentrated value and discoverability to users.\r\n\r\nIf a new-ish Godot user opens up the Project Manager to create a new project, they should be able to view a list of popular Packages that they can install alongside their project. Rather than needing to create their project, go to the AssetLib tab, and then browse through hundreds of addons and install interesting ones one-by-one, they could instead see a GUI of addons to select which are batch installed at the end of the process and which can be selected/de-selected in groups by selecting/de-selecting themed Packages.\r\n\r\nUsers should even be able to create their own AssetPackage resources, either for local use (to auto-install a collection of preferred addons) or to upload and manage for the community (like what Godot Next could do).\r\n\r\nA \"Package\" could then be...\r\n\r\n- Godot Next.\r\n- A user-defined Favorites list of editor tools to share across all projects.\r\n    - Perhaps we could add an AssetPackagae field in EditorSettings to accommodate this.\r\n- A \"framework\" of addons tailored to specific fields:\r\n    - A game genre such as 2D platformer or first-person shooter, etc.\r\n    - A technology category such as Mobile Apps, Data Structures, AI, Particle Effects, etc.\r\n- A team-organized collection of addons for specific tasks:\r\n    - Producers get in-editor tools for task management, allocating team resources, etc.\r\n    - Writers get in-editor tools for narrative dialogue editing, more visual scripting nodes, etc.\r\n    - 3D artists get in-editor tools for voxel modeling or assets for meshes, textures, etc.\r\n\r\nNote that one difference between an addon and a package is that addons simply declare a set of dependencies while packages can have both required and optional addons associated with them, as demonstrated in the final mockup below.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThe final UI I imagine for this would be like a blend of the VS Code extensions UI and the Visual Studio Installer.\r\n\r\nThe former contains a list of elements where selecting any one element displays an editor-rendered Markdown README + any other custom data (repo web URL, rating, whatever data we can safely store and use, assuming it doesn't violate GDPR).\r\n\r\nFor reference, here is the VS Code extensions image in #139:\r\n\r\n![extensions-popular](https://user-images.githubusercontent.com/16217563/66510448-ad9b2580-ea9a-11e9-84ab-9a57ba08f6b7.png).\r\n\r\nThe latter maintains a list of selected editor components and will mass add/remove components from the batch installation dialog as users add/remove packages of functionality from the installation. Individual components can also be browsed and added/removed as desired.\r\n\r\nHere is the original Visual Studio Installer:\r\n\r\n<img width=\"626\" alt=\"vs_installer\" src=\"https://user-images.githubusercontent.com/16217563/66538981-2eced880-eaec-11e9-9405-e6a0a7ff6e47.png\">\r\n\r\nI'm imagining that we could setup our own packages-over-addons setup with a VS Code-like README renderer. Something along these lines:\r\n\r\n<img width=\"864\" alt=\"redesigned_asset_lib\" src=\"https://user-images.githubusercontent.com/16217563/66539014-4efe9780-eaec-11e9-8136-610126f5f085.png\">\r\n\r\nAnd this would be something that can appear both in the AssetLib tab *and* as a popup when users are creating a new project. Packages would be pulled from the Godot Asset Library as well as from local user files.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. I can publish individual addons (with just a single script even) with minimal effort (just pressing a few buttons).\r\n    1. Editor can *generate* an addon for me (#118).\r\n    1. Editor can *access* third-party addon APIs for me (#12).\r\n    1. Editor can *publish* an addon for me to any supported API through a common interface (N/A).\r\n        - Would require some plugin to enable users to interact with third-party APIs and publish to them. Things like this could even be part of an \"Addon Creators\" Package installable from the Project Manager.\r\n        - Godot would need to be able to, at the very least, directly submit new asset version submissions to a selected remote online vendor (which defaults to the Asset Library, pending godotengine/godot-asset-library#143, and which gets other API support out-of-the-box with #12 once their plugins are installed).\r\n1. Users can easily browse addons, access their source repositories, and get their information.\r\n    1. Editor AssetLib is redesigned to support rendering Markdown content (#139). \r\n    1. Addons could expose direct documentation for included classes.\r\n        1. Script annotations help here, but are not required (godotengine/godot#20318)\r\n        1. Use script annotations and script reflection data (already exposed in 3.2) to generate XML documentation data. Then we can program the editor to auto-import that documentation data via a commonly defined directory structure. DocData would need to only integrate docs for script classes that are successfully registered. Any time script classes update, DocData would also need to be rebuilt. Start with a cached copy of the ClassDB-only DocData and then re-add all script class data as needed (#177).\r\n    1. See #139 for an example of what this could look like in the AssetLib editor tab.\r\n1. Users can identify and automatically install all dependencies related to an addon.\r\n    1. Addons would need a standardized, safe-to-copy-paste-install internal structure where Godot can validate whether a directory constitutes a valid addon because of its structure. Only when an addon directory has structured data can the editor apply installation logic to them universally, without humans having to manually check off which files are to be copied into a project (#62).\r\n        - This might also involve the need for some kind of .gdignore file to filter out some files from bundling into an addon.\r\n    - godotengine/godot#19486 discussion must be resolved.\r\n    - godotengine/godot#19178 discussion must be resolved.\r\n    - At the *very* least, we would need an agreed-upon dependency acquisition mechanism, regardless of whether it ends up being a full-blown management tool or just a \"curl these URLs, kthxbai!\"\r\n1. Users can view collections of assets related to topics in which they are interested and can easily install/uninstall them en masse (this Issue).\r\n    1. See mockup above.\r\n    1. Packages would maintain a list of optional and required addons/sub-projects/whatever to be associated with them (will call them just \"addons\" for now).\r\n    1. The GAL would need to be refactored to use a batch install process. In it, users would be able to select a set of addons to install (a list of checkboxes in the GUI).\r\n        1. Every time the list of packages/addons is updated, rebuild the list.\r\n        1. Allow users to view a flat list and search that list for addons directly (the regular GAL behavior).\r\n        1. Allow users to view the checkboxes grouped into packages. If an addon is present in more than one package, that is fine (more about seeing what stuff is associated with a package overall). You still would only install that addon once.\r\n        1. Potentially multithread the download and installation process?\r\n        1. If someone clicks on an individual addon in the flat or grouped list, the currently active tab on the right should update to display that addon's information (README, CHANGELIST, name, other data).\r\n        1. Users should be able to open new tabs in the addon viewer to quickly switch between cached versions of the data (without needing to re-fetch it).\r\n        1. A loading icon should display between requesting a new addon's information and displaying it.\r\n        1. The visualization of an addon's information should have no relevance to whether that addon is checked or unchecked in the flat/grouped list. \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis enhancement is largely based on modifications to the Asset Library, the Editor's AssetLib tab, and introducing a new resource: AssetPackage. It also changes the Project Manager and is dependent on standardization changes in the addon ecosystem. It would revolutionize the accessibility and growth of addons, so yes, it would be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nTons of changes to NOT script-accessible stuff. See above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/142/reactions",
      "total_count": 28,
      "+1": 27,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/139",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/139/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/139/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/139/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/139",
    "id": 504842101,
    "node_id": "MDU6SXNzdWU1MDQ4NDIxMDE=",
    "number": 139,
    "title": "Add full Markdown support for use in browsing, creating, and editing projects and addons",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-09T19:17:49Z",
    "updated_at": "2020-07-02T14:06:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nDesigning solutions (either for editor changes or an addon) that involve browsing and displaying data regarding third-party addons.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nMarkdown README files are an industry-standard resource for sharing project information. Creators need to be able to edit and preview (render) them, and users need to be able to view (render) them. The Asset Library could then be refactored to render Markdown files (related to #12).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n1. Allows users to employ more familiar and featureful technology than what Godot currently offers.\r\n1. Allows Godot to take advantage of a wealth of information already accessible on the Internet.\r\n1. Prevents users from needing to duplicate and maintain information between the Asset Library asset information (description) and the project's own README (the standard).\r\n1. Allows users to create, edit, and preview their own project's README directly from Godot rather than having to use a separate tool.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nThis would be similar to how VS Code's Extensions tab looks. Below is an example for #12 on how things could appear in the Asset Library if refactored to display Markdown files.\r\n\r\n![extensions-popular](https://user-images.githubusercontent.com/16217563/66510448-ad9b2580-ea9a-11e9-84ab-9a57ba08f6b7.png).\r\n\r\nIn fact, @fenix-hub's [TextEditor plugin](https://github.com/fenix-hub/godot-engine.text-editor) *already* has a dedicated viewport with an editor and previewer for Markdown files, so it would be an excellent starting place for creating an extension to the built-in ScriptEditor that does the same.\r\n\r\nRaw .md file:\r\n\r\n![MD_FILE](https://media.discordapp.net/attachments/629339210566074386/631569820483059712/MD_FILE.PNG)\r\n\r\nWIP conversion to rendered content (will eventually have headers, online images, etc.):\r\n\r\n![MD2_FILE](https://cdn.discordapp.com/attachments/629339210566074386/631569842473795594/MD2_FILE.PNG)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Add an `/editor/markdown_editor.h` class for editing Markdown files and integrate it into the ScriptEditor.\r\n1. Add an `/editor/markdown_renderer.h` class for rendering a Markdown file's contents.\r\n1. Update the ScriptEditor in these scenarios to have a Tab, CheckButton, or similar for editing versus previewing the currently opened .md file. (hide when not editing a .md file).\r\n1. Update the EditorFileSystem dock to display .md files and allow them to be selected/edited.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nMost of the community using any sort of addon (either creating OR using) would use this, so almost everyone. \r\n\r\nYes, this could be done as a plugin in script code. No, it would not be just a few lines. It would be a huge amount of work just to create a well-written editor and renderer pair.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nYes. The ScriptEditor integration portion is something that can only properly be done with direct editor modifications in the source code.\r\n\r\nFurthermore, we are talking about an industry-standard text format. It should be built into the editing experience for all users, without the need for a plugin.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/139/reactions",
      "total_count": 24,
      "+1": 22,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/138",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/138/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/138/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/138/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/138",
    "id": 504734360,
    "node_id": "MDU6SXNzdWU1MDQ3MzQzNjA=",
    "number": 138,
    "title": "Add fill and line width parameters to Polygon2D",
    "user": {
      "login": "Shadowblitz16",
      "id": 2453707,
      "node_id": "MDQ6VXNlcjI0NTM3MDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2453707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Shadowblitz16",
      "html_url": "https://github.com/Shadowblitz16",
      "followers_url": "https://api.github.com/users/Shadowblitz16/followers",
      "following_url": "https://api.github.com/users/Shadowblitz16/following{/other_user}",
      "gists_url": "https://api.github.com/users/Shadowblitz16/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Shadowblitz16/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Shadowblitz16/subscriptions",
      "organizations_url": "https://api.github.com/users/Shadowblitz16/orgs",
      "repos_url": "https://api.github.com/users/Shadowblitz16/repos",
      "events_url": "https://api.github.com/users/Shadowblitz16/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Shadowblitz16/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-10-09T15:40:52Z",
    "updated_at": "2020-06-09T12:53:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am working on a asteroids clone and I am having the limitation where polygon2D doesn't have a option to set it to line drawing mode and set a line width.\r\n\r\nI suggest a fill and width parameter be added to the polygon2d node and inspector to allow the user to enable line drawing mode instead of fill drawing mode. this allows the user to not just have filled polygons but line ones as well.\r\n\r\n\r\nthis is a example of a filled polygon\r\n![image](https://user-images.githubusercontent.com/2453707/66534784-2e264a00-eacc-11e9-9e4f-76989e962f22.png)\r\n\r\nand here is a example of a line polygon\r\n![image](https://user-images.githubusercontent.com/2453707/66534797-3d0cfc80-eacc-11e9-8122-5c445acdaba8.png)\r\n\r\nI don't have any code to show since I am not familiar with how polygons draw lines however I do know other game engines allow this sort of thing.\r\n\r\nI think that this would be used alot when people are using polygons and I think this should be added into the core library because its a basic feature of polygon drawing.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/137",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/137/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/137/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/137/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/137",
    "id": 504716653,
    "node_id": "MDU6SXNzdWU1MDQ3MTY2NTM=",
    "number": 137,
    "title": "Add a CLI command parser",
    "user": {
      "login": "lupoDharkael",
      "id": 14951430,
      "node_id": "MDQ6VXNlcjE0OTUxNDMw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14951430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lupoDharkael",
      "html_url": "https://github.com/lupoDharkael",
      "followers_url": "https://api.github.com/users/lupoDharkael/followers",
      "following_url": "https://api.github.com/users/lupoDharkael/following{/other_user}",
      "gists_url": "https://api.github.com/users/lupoDharkael/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lupoDharkael/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lupoDharkael/subscriptions",
      "organizations_url": "https://api.github.com/users/lupoDharkael/orgs",
      "repos_url": "https://api.github.com/users/lupoDharkael/repos",
      "events_url": "https://api.github.com/users/lupoDharkael/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lupoDharkael/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-10-09T15:11:00Z",
    "updated_at": "2020-06-18T14:32:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm ignoring the base proposal template as it doesn't fit the needs of this issue.\r\n\r\nAs some of you may know I started a WIP PR in the main Godot repository: https://github.com/godotengine/godot/pull/26213\r\n\r\nI stoped working on the implementation due to the lack of feedback about it but it is obvious that it requires defining the design first before I continue the PR.\r\nI'm going to explain a few design concepts so we can debate the best fit for Godot or even consider options not mentioned here.\r\n\r\n### Why is the parser needed\r\nA parser allows the unification of the command parsing which in is separated in multiple steps in the actual main.cpp and the process is kind of chaotic.\r\nThe delegation of that work to a parser keeps the main.cpp smaller and more organized. The detection of some errors in format is better and more clean and we can fail earlier as a consequence.\r\n\r\n\r\n### Argument ownership\r\nThis is the tricky part, not because it is hard but because it requires a decision based on personal preferences.\r\n\r\nWe have 2 options:\r\n- Strict command parsing:\r\nrequires to register all the commands, if an invalid command is provided it can suggest the most similar known by the parser.\r\nThe problem here are the game related commands. A very standardized solution is to define a separator between engine commands and game commands.\r\nFor example, with `--` as a separator, the command `godot --quiet -- test 55 3` would identify `--quiet` as a godot command and `test 55 3` as game command. The separator could be configurable.\r\n\r\n- Non strict command parsing:\r\nIt an unknown command is provided it just ignores the content that doesn't match the registered information in the command parser.\r\nIt may be interesting as the user could process the commands later and extract the relevant information. Command suggestion is not possible here.\r\n\r\n### Godot module exposed\r\nGodot modules could benefit from the command parser.\r\nThe actual structure of the modules need to define the following functions:\r\nvoid register_xxx();\r\nvoid unregister_xxx();\r\n(where xxx is the name of the module).\r\nusing the register function to register new commands is not possible as it is called *after* we parse the commands and initialize a few things in the engine.\r\nI propose defining an optional function (that way it is backward compatible) so every module can register new commands and validate them before they start processing.\r\nIt could be called setup_xxx or something clearer. And it would be called before the command parsing stage.\r\n\r\nThat would also mean having a pointer to a Command parser in a singleton so the modules can access the parser and register commands there.\r\nPreserving the command parser in memory would mean delegating al the command related functionality to the command parser.\r\n\r\n### GDS exposed classes\r\nThe command parser could be exposed to gds for a general purpose command parsing solution.\r\nThat has the drawback of creating public API so it would be a limitation to change how to parser works.\r\nOn the other hand it would be code already implemented in the engine and a command parser shouldn't change that much. It could be very useful to validate game commands.\r\nIt would also be understandable not to expose this as some games could require very custom solutions.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/137/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/134",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/134/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/134/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/134/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/134",
    "id": 504331035,
    "node_id": "MDU6SXNzdWU1MDQzMzEwMzU=",
    "number": 134,
    "title": "Shader Graph icons from 2.1 to 3.2",
    "user": {
      "login": "Norrox",
      "id": 13393087,
      "node_id": "MDQ6VXNlcjEzMzkzMDg3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/13393087?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Norrox",
      "html_url": "https://github.com/Norrox",
      "followers_url": "https://api.github.com/users/Norrox/followers",
      "following_url": "https://api.github.com/users/Norrox/following{/other_user}",
      "gists_url": "https://api.github.com/users/Norrox/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Norrox/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Norrox/subscriptions",
      "organizations_url": "https://api.github.com/users/Norrox/orgs",
      "repos_url": "https://api.github.com/users/Norrox/repos",
      "events_url": "https://api.github.com/users/Norrox/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Norrox/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697865322,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MzIy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:shaders",
        "name": "topic:shaders",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-10-08T23:34:47Z",
    "updated_at": "2020-11-06T18:31:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nVarious 2d and 3d projects\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nNot really a problem or limitaiton.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThis will be very nice to look at and make it look more professional.\r\nEasier to connect one to another if there are something other that text and color.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![55761449-8e75f980-5a5f-11e9-8f3f-d14836e80fbf](https://user-images.githubusercontent.com/13393087/66440819-9f1a2300-ea34-11e9-8dfa-f5d64225e2b5.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nSomehow transfer them from 2.1 to 3.** ?\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt will be used by everyone that's using visual shaders\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYeah, this should just be in the core, this should be the first thing a new user sees when they open visual shader, first impressions last the longest.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/133",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/133/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/133/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/133/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/133",
    "id": 503174708,
    "node_id": "MDU6SXNzdWU1MDMxNzQ3MDg=",
    "number": 133,
    "title": "Complete debugger Output buffer should be copyable so it can be pasted elsewhere",
    "user": {
      "login": "wyattbiker",
      "id": 930478,
      "node_id": "MDQ6VXNlcjkzMDQ3OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/930478?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wyattbiker",
      "html_url": "https://github.com/wyattbiker",
      "followers_url": "https://api.github.com/users/wyattbiker/followers",
      "following_url": "https://api.github.com/users/wyattbiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/wyattbiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wyattbiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wyattbiker/subscriptions",
      "organizations_url": "https://api.github.com/users/wyattbiker/orgs",
      "repos_url": "https://api.github.com/users/wyattbiker/repos",
      "events_url": "https://api.github.com/users/wyattbiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wyattbiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-10-06T23:10:58Z",
    "updated_at": "2020-11-06T19:10:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the problem or limitation you are having in your project:**\r\nI am using Mac OS X.\r\nIm dumping out large arrays, into the output window using print().  However I would like to copy the complete output from that window to a text editor to review it.\r\n\r\nIt does not allow me to highlight and copy/paste the complete Output.  ctrl+a or command+a do not work.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nWill allow large output to be copied/pasted to another text editor or file.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/133/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/132",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/132/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/132/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/132/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/132",
    "id": 503149047,
    "node_id": "MDU6SXNzdWU1MDMxNDkwNDc=",
    "number": 132,
    "title": "Tree structure for the Scripts Panel",
    "user": {
      "login": "ebbsenghargor",
      "id": 47830737,
      "node_id": "MDQ6VXNlcjQ3ODMwNzM3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/47830737?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ebbsenghargor",
      "html_url": "https://github.com/ebbsenghargor",
      "followers_url": "https://api.github.com/users/ebbsenghargor/followers",
      "following_url": "https://api.github.com/users/ebbsenghargor/following{/other_user}",
      "gists_url": "https://api.github.com/users/ebbsenghargor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ebbsenghargor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ebbsenghargor/subscriptions",
      "organizations_url": "https://api.github.com/users/ebbsenghargor/orgs",
      "repos_url": "https://api.github.com/users/ebbsenghargor/repos",
      "events_url": "https://api.github.com/users/ebbsenghargor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ebbsenghargor/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-06T19:35:33Z",
    "updated_at": "2019-11-25T21:57:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA personal game project.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI've started adding a lot of scripts, which quickly made the Scripts Panel hard to navigate. Even after adding full paths it quickly starts to be hard to go back and forth between the scripts I use.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nMy suggestion is to add the possibility to show scripts in a tree structure, just like the FileSystem tab does.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nThis is how my FileSystem tab looks, and I would want to have that structure in the Scripts Panel too:\r\n![image](https://user-images.githubusercontent.com/47830737/66274654-02fbea80-e881-11e9-8b57-45494493a334.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI guess the implementation would be very similar to the FileSystem implementation.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThis should be a core feature.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/132/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/129",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/129/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/129/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/129/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/129",
    "id": 503100046,
    "node_id": "MDU6SXNzdWU1MDMxMDAwNDY=",
    "number": 129,
    "title": "Allow users to set the origin of Control Nodes",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-10-06T13:20:55Z",
    "updated_at": "2020-10-02T20:10:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCard game, Action game with items, menus.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWhen working on menus, anything with drag'n'drop functionality, items, cards, or even a simple debug text label, I find myself in dire need to have control over the Control nodes origin every single time. \r\nI work with a Control nodes as well as those inheriting from Control, but Godot currently does not seem to offer a way to adjust the origin. `rect_pivot_offset` is not an option since it is an absolute value (pixels I assume), not a percentage.\r\nThe default origin for all Control nodes is the top right corner. This makes centering and scaling and positioning incredibly tedious and unintuitive.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nControling scale, positioning and grow direction is currently a nightmare from UX perspective. It forces you to use multiple nested nodes and properties of those nodes and absolut pixel values.\r\nThis proposal would reduce all that to just one single setting.\r\n\r\nPersonally I would think having the origin of Control nodes and Node2Ds work the same way would be the solution, even if they have different defaults (top left vs centered) and Control nodes having additional parameters like padding/margins.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![control_origin](https://user-images.githubusercontent.com/47016402/66269758-d3cb8600-e84c-11e9-96d6-bb519ccf2de2.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know any C++\r\nEdit:\r\nSomething similar has apparently been proposed and requested here:\r\nhttps://github.com/godotengine/godot/issues/19529\r\nPR: https://github.com/godotengine/godot/pull/30305\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's the first thing I would want to adjust every single time I work with any kind Node that inherits from Control, so yes, it would be used often.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's mainly a (massive) UI/UX improvement of existing features.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/129/reactions",
      "total_count": 30,
      "+1": 28,
      "-1": 2,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/128",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/128/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/128/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/128/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/128",
    "id": 503093155,
    "node_id": "MDU6SXNzdWU1MDMwOTMxNTU=",
    "number": 128,
    "title": "Allow drag and drop to the scene panel",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-06T12:19:14Z",
    "updated_at": "2019-11-25T21:59:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nTop down action game, card game\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nRight now I can drag and drop scenes and assets like Sprites from the file panel to the viewport, but I cannot drop them to the scene panel (see gif below)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nDrag'n'drop a sprite into a viewport is a lot faster than clicking the plus sign, searching for \"Sprite\", click ok, grabbing a texture and drag'n'dropping it into the sprites texture resource.\r\nFor continuity but also to have a mechanism to conveniently and fast and accurate placing at the 0.0 position without having to turn on snapping first, I would like to drag'n'drop the files that allow drag and drop to the viewport also to the scene panel. This is an operation I do many many times a day, especially when prototyping.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![cant_drag_to_scene_panel](https://user-images.githubusercontent.com/47016402/66269031-c8279180-e843-11e9-9c58-8c8c5fda6ac4.gif)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't know any C++ \r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's a minor improvement of the built in UX, so I don't think so.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNo one will/would/should go to the asset library to download minor UX improvements like this.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/128/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/127",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/127/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/127/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/127/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/127",
    "id": 503022065,
    "node_id": "MDU6SXNzdWU1MDMwMjIwNjU=",
    "number": 127,
    "title": "Expose more audio methods to be able to generate waveform previews",
    "user": {
      "login": "EIREXE",
      "id": 3101690,
      "node_id": "MDQ6VXNlcjMxMDE2OTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3101690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EIREXE",
      "html_url": "https://github.com/EIREXE",
      "followers_url": "https://api.github.com/users/EIREXE/followers",
      "following_url": "https://api.github.com/users/EIREXE/following{/other_user}",
      "gists_url": "https://api.github.com/users/EIREXE/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EIREXE/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EIREXE/subscriptions",
      "organizations_url": "https://api.github.com/users/EIREXE/orgs",
      "repos_url": "https://api.github.com/users/EIREXE/repos",
      "events_url": "https://api.github.com/users/EIREXE/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EIREXE/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-05T22:03:56Z",
    "updated_at": "2020-05-04T07:45:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nRhythm game chart editor\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nIt is currently seemingly impossible to generate a waveform preview from within runtime.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nBy exposing more audio features, we could generate waveforms.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nIt seems like all of the methods used in https://github.com/godotengine/godot/blob/24e1039eb6fe32115e8d1a62a84965e9be19a2ed/editor/audio_stream_preview.cpp#L103 should be exposed to the game for this to work, or a way to generate a waveform to a texture.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt appears it can't.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt requires exposing native interfaces that aren't exposed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/127/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/126",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/126/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/126/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/126/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/126",
    "id": 502838916,
    "node_id": "MDU6SXNzdWU1MDI4Mzg5MTY=",
    "number": 126,
    "title": "Introduce bi-monthly regular hotfix releases",
    "user": {
      "login": "Feniks-Gaming",
      "id": 30668026,
      "node_id": "MDQ6VXNlcjMwNjY4MDI2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/30668026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Feniks-Gaming",
      "html_url": "https://github.com/Feniks-Gaming",
      "followers_url": "https://api.github.com/users/Feniks-Gaming/followers",
      "following_url": "https://api.github.com/users/Feniks-Gaming/following{/other_user}",
      "gists_url": "https://api.github.com/users/Feniks-Gaming/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Feniks-Gaming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Feniks-Gaming/subscriptions",
      "organizations_url": "https://api.github.com/users/Feniks-Gaming/orgs",
      "repos_url": "https://api.github.com/users/Feniks-Gaming/repos",
      "events_url": "https://api.github.com/users/Feniks-Gaming/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Feniks-Gaming/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697863239,
        "node_id": "MDU6TGFiZWwxNjk3ODYzMjM5",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:buildsystem",
        "name": "topic:buildsystem",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-10-04T20:51:28Z",
    "updated_at": "2020-11-08T14:05:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nTop down 2 d game with survival elements\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nCurrently Godot sufferes from small bugs here and there due to fast pace of it's development. Many of those bugs are fixed over time however users need to wait for major releases to benefit from those fixes. There is option of building from source but this introduces whole bunch of problems of working with partially completed features of next big release. \r\n\r\nProviding more regular hot fix builds as often as every other month would allow comunity to benefit from all the work that bug fixers are doing without introducing serious changes to the editor itself.  We already had version 3.1.1 getting versions 3.1.2 and 3.1.3 before 3.2 is released would be nice benefit for a comunity and wouldn't take away anything from a hype of new version combining with latest features in a future.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nIt would provide comunity with more and more stable version of the engine without introducing big changes to editor itself and would be very safe for ongoing projects. \r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nSimply release compiled bug fixes branch to public more often.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThis enhancement would be used all the time by almost every member of comunity as fixing bugs would benefit any projects. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/126/reactions",
      "total_count": 11,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/125",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/125/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/125/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/125/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/125",
    "id": 502747781,
    "node_id": "MDU6SXNzdWU1MDI3NDc3ODE=",
    "number": 125,
    "title": "LineEdit and TextEdit enhancements",
    "user": {
      "login": "MennoMax",
      "id": 12477395,
      "node_id": "MDQ6VXNlcjEyNDc3Mzk1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12477395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MennoMax",
      "html_url": "https://github.com/MennoMax",
      "followers_url": "https://api.github.com/users/MennoMax/followers",
      "following_url": "https://api.github.com/users/MennoMax/following{/other_user}",
      "gists_url": "https://api.github.com/users/MennoMax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MennoMax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MennoMax/subscriptions",
      "organizations_url": "https://api.github.com/users/MennoMax/orgs",
      "repos_url": "https://api.github.com/users/MennoMax/repos",
      "events_url": "https://api.github.com/users/MennoMax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MennoMax/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-10-04T17:08:38Z",
    "updated_at": "2019-12-13T16:38:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nThis enhancement isn't really project specific, but I came across these things while working on a modelling tool for minecraft entities that consist of cuboids, which intensively uses the UI nodes.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThere are no limitations caused by these issues, but these small things made the editor appear less \"professional\", as the UI seemed to be off and not very user friendly (especially because the LineEdit might only show a single character when removing text, which could get the user lost)\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nThese enhancements would make the nodes to be more appealing to the user. More details below.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nSee the linked issues in the text below - they contain gifs that clearly show the issues I am having.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n> These are a few things regarding LineEdit or TextEdit that should be changed to match other applications behaviour and make them more appealing.\r\n> \r\n> **First of all; these two nodes are drifting apart in terms of what they should have in common.**\r\n> - clicking on a letter in LineEdit always places the caret right in front of the clicked letter. On TextEdit however if the first half of the letter was clicked, it places the caret in front of the letter and behind of the letter if the latter half was clicked.\r\n> - the width of the caret differs between these two nodes (TextEdit has a wider caret). This can be a problem in forms that use both of these nodes. I personally prefer the width of the LineEdit caret.\r\n> - double clicking on a LineEdit marks the whole text but keeps the caret position, TextEdit places the caret behind the marked text.\r\n> - https://github.com/godotengine/godot/issues/12810\r\n> - removing text from a LineEdit that contains more text than can be drawn will result in it no longer presenting as much information to the user as possible. TextEdit adjusts the scroll position. This can be seen in the gif of this issue; https://github.com/godotengine/godot/issues/27420\r\n> \r\n> These are just the things I remember. I just tested them again while writing this issue in an up to date build of the master branch. More can be found when browsing through open issues.\r\n> \r\n> **Possible solution:**\r\n> The issue https://github.com/godotengine/godot/issues/31739 suggests that TextEdit should be split into two classes that inherit what they have in common. We could apply the same to TextEdit and LineEdit - have them inherit their common behaviour which could prevent this from even happening. Just adjusting both of them would lead to new issues in the future.\r\n> \r\n> **Now let's move on to the improvements.** \r\n> - both LineEdit and TextEdit should be able to draw letters partially. See my old issue here https://github.com/godotengine/godot/issues/27420 again. This looks especially weird when vertically scrolling a TextEdit, as letters just disappear and reappear in front of and behind of it.\r\n> - clicking outside of Text/LineEdit doesn't release the nodes focus as most other applications do. Losing focus should also clear the selection on that node. https://github.com/godotengine/godot/issues/24133 might be related.\r\n> - ~https://github.com/godotengine/godot/issues/27631~ (fixed)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nWhile a few of these can be worked around with a few lines of script, they should not even require that. Most of them however can not be adjusted solely in GDScript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, as this enhancement enhances the core nodes of Godot to meet behaviour that is common across other applications - for example the web browser you are currently using.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/125/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/124",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/124/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/124/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/124/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/124",
    "id": 502504932,
    "node_id": "MDU6SXNzdWU1MDI1MDQ5MzI=",
    "number": 124,
    "title": "Add node source selection box into New Node Wizard",
    "user": {
      "login": "aspenforest",
      "id": 6948036,
      "node_id": "MDQ6VXNlcjY5NDgwMzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/6948036?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aspenforest",
      "html_url": "https://github.com/aspenforest",
      "followers_url": "https://api.github.com/users/aspenforest/followers",
      "following_url": "https://api.github.com/users/aspenforest/following{/other_user}",
      "gists_url": "https://api.github.com/users/aspenforest/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aspenforest/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aspenforest/subscriptions",
      "organizations_url": "https://api.github.com/users/aspenforest/orgs",
      "repos_url": "https://api.github.com/users/aspenforest/repos",
      "events_url": "https://api.github.com/users/aspenforest/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aspenforest/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-04T08:34:54Z",
    "updated_at": "2019-11-25T21:59:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm creating a stock market trading system in Godot which has many small self-standing logical components like graph display, communicating with RESTful Web Services, and data persistence modules. All of these will be implemented as standalone plugins, so they could be re-used in later projects to save time from \"reinventing the wheel\".\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nHuge number of addons which implement their own nodes clutter the New Node Wizard node selection box and it becomes too cumbersome to visually find the node if you can't remember the specific name of the node and thus can't use the search box. This slows down development time and creates frustration.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nBy having the ability to select the Source from which the nodes are displayed in the Wizard, it becomes possible to easily filter nodes by their plugin, simplifying visually finding the nodes for big projects with numerous custom plugins.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![newnodefromsource](https://user-images.githubusercontent.com/6948036/66193135-a212bd80-e69a-11e9-8efb-28b4bc872164.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNodes are assigned a parent class to which they belong. Core nodes belong to the Core class (category) and plugin nodes belong to their own plugin.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** No\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is very difficult, nigh impossible, to modify New Node Wizard from within the Editor by a plugin. Theoretically, it _could_ be done, but it's too difficult (for me). And no, I can not implement this myself, because I don't understand how Godot works under the hood.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/124/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/123",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/123/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/123/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/123/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/123",
    "id": 502260637,
    "node_id": "MDU6SXNzdWU1MDIyNjA2Mzc=",
    "number": 123,
    "title": "Define and expose an Inspector-like property list editor to the scripting API",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-03T19:44:23Z",
    "updated_at": "2020-05-04T07:45:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI have worked on GUIs for the editor, but my issue applies equally to any game that includes an Options page, Settings page, or similar. It also applies to Godot \"games\" that are tools of which there is a growing and vibrant community.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe Godot Editor has a built-in system for generating an Inspector that allows one to edit the data associated with an Object. However, there is no capacity for taking advantage of this existing system to generate such Inspectors for one's own plugins, standalone tools, or in-game GUI elements.\r\n\r\nYes, you can often times just delegate things to the EditorInspector, but 1) that only applies to plugins, not external tools or game GUIs and 2) it limits users' ability to control their user experience by forcing them to either rely on the Inspector or re-implement existing Inspector functionality for a local GUI.\r\n\r\nSome use cases, even inside the editor, are better when they avoid working with the Inspector. For example, creating editable fields inside VisualScript's GraphNodes for the editor. If you could generate a GUI that looks and behaves exactly like the Inspector, but is present *inside* the graph node and affects that object directly, then there'd be a lot less work involved in creating Inspector-less, more streamlined user experiences for VisualScript and visual graph shaders in general (much like Unreal's Blueprint). The same goes for creating editable GUI fields in a variety of other contexts, both in and out of the editor.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nThis change would enable users to quickly and consistently create a high-quality editing experience that mimics the features, quality assurance, and robustness of the official Godot Editor Inspector, but with the flexibility to put the editable fields anywhere they want and to target whatever object they want.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n    # Sample 1\r\n    # Can create a Form object and get an Array of FormProperty node instances\r\n    # Default behavior runs off of the object's property list.\r\n    var form = Form.new()\r\n    form.object = $Options\r\n    var form_properties: Array = form.create_form_properties()\r\n    \r\n    # Sample 2\r\n    # can add FormProperty objects to VBoxContainer for an Inspector-like editor.\r\n    # - \"Main\" Node (this script)\r\n    #     - \"Options\" ScrollContainer (options.gd)\r\n    #         - VBoxContainer <- add all FormProperty nodes to this node.\r\n    for a_form_property in form_properties:\r\n        $Options/VBoxContainer.add_child(a_form_property)\r\n    \r\n    # Sample 3\r\n    # Can register new FormProperty types using Scripts that extend the type.\r\n    # They would have a virtual method that decides whether they apply to a given PropertyInfo.\r\n    # The first matching result, processed from last to first, would get used.\r\n    form.register_form_property(load(\"my_custom_form_property.gd\"))\r\n    \r\n    # Sample 4\r\n    # I can override what property list is used to draw data from the assigned Object.\r\n    form.set_object_properties([ { \"name\": \"hi\", \"type\": TYPE_STRING } ])\r\n\r\n    # Sample 5\r\n    # I can receive a signal callback for whenever a value is edited by the Form\r\n    form.connect(\"property_edited\", self, \"_on_property_edited\")\r\n\r\n    # Sample 6\r\n    # The editor would, for usability purposes, provide a Node that can generate a form\r\n    # and vertically or horizontally align it as desired.\r\n    var form_container = FormContainer.new()\r\n    form_container.target = @\"Options\" # an exported property\r\n    add_child(form_container) # is a Node itself.\r\n\r\nBelow is a would-be options menu (poorly made, w/e). I would ideally have a horizontally-aligned FormContainer for the top section and two vertically-aligned FormContainers for the two bottom sections.\r\n\r\n<img width=\"514\" alt=\"options_page\" src=\"https://user-images.githubusercontent.com/16217563/66158232-17bf5080-e5eb-11e9-931f-1ca71d2126e5.png\">\r\n\r\nThe point being that I don't have to write the form creation/hookup code myself, nor do I have to write sophisticated editors for Godot's existing resource types. I can focus on building my game/tool.\r\n\r\nThen, if I wanted to arrange the UI however I want for a more complex title, I can use the Form class directly and do whatever I want with the FormProperty nodes. The example below could be a game that uses a diagonal, custom-aligned set of properties on a page that, regardless, all provide editors for modifying a single object's data in an easy manner.\r\n\r\n![persona_5_settings_menu](https://user-images.githubusercontent.com/16217563/66158618-e1360580-e5eb-11e9-9f11-9d7ae5cd99e1.jpg)\r\n(Yes, this is a settings menu from Persona 5)\r\n\r\nIf it were just about changing the visualization of the boolean form editor, then the user could just define their own custom FormProperty that actually displays the boolean as an on/off switch, as above, and then override the Form's use of TYPE_BOOL properties to use that FormProperty instead.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Define a non-editor Inspector class called Form to avoid confusion with the EditorInspector.\r\n1. Refactor EditorProperty types to be FormProperty types instead. If necessary, define editor-specific classes that make use of the core FormProperty types, but I think that should be minimized.\r\n1. Refactor the EditorInspector to use the Form class.\r\n1. (the most complex part) identify the best way of organizing the Godot Engine project so that EditorProperty types can be available to both the engine and the editor.\r\n    1. You could just move them all into the core (considered bloat?).\r\n    1. You could make a symlink to the modules directly and end up having them defined in one place, but built in two: the editor and the modules (weird, unconventional, but would solve synchronization issues between two parts of the codebase - might have cross-platform issues due to differences in symlink APIs though).\r\n    1. You could make them all a first-party addon that is somehow also available to the Inspector. In this case, the Inspector would need to support plugging in user-defined EditorProperty-turned-FormProperty types. And the editor would have to somehow download and use these types in the editor, perhaps even without showing up in the FileSystem.\r\n        - This would be especially problematic for people with poor Internet connections and would also lead to less than ideal UX since the editor would ship with diminished functionality until it is able to separately install these things.\r\n\r\nNo matter how I look at it, the cleanest solution is just to move them to core, but I'm open to other suggestions.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nI would use this *every single day* since I mess with plugin code all the time, and plugins often have their own data with their own GUI for viewing and editing that data.\r\n\r\nIt would also enable us to simplify and refactor several other parts of the Godot editor I imagine. VisualScript and VisualShader nodes are one place. Anything in a dock, bottom panel, or viewport is another. Several uses of Tree could probably be replaced entirely to use this more robust, pluggable tool.\r\n\r\nTons and tons of games would be able to use this to vastly simplify their code.\r\n\r\nNon-game applications would make heavy use of this as they often involve users entering or configuring data and gaining some benefit from allowing the app to have that data.\r\n\r\nThe code is all inside the editor. You *could* re-implement the entire Inspector as an addon but that would be a highly involved and complex process, not to mention a waste of time since you'd then have to maintain the codebase to closely match the editor's code for consistency's sake. It would *really* be a bad idea to do that. And having to go through the effort of coding one's own form for general purpose stuff is a huge time sink when there is already a perfectly good form/inspector built and maintained by the community.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nAs outlined above, making this an addon presents huge synchronization/maintenance hazards. In addition, if you updated the Editor to use an addon, then it would make for horrible UX. In my opinion, core is really the best place for it.\r\n\r\nIf the devs believe that including it in core would be too much bloat, then I would believe that at least some kind of partial solution is best where some essential form/form properties are kept in core and then more are kept maintained in the editor AND in a separate downloadable addon, so that those who want to build godot \"games\" that are tools with complex editors required could still make use of this API. Not sure of the best way to do that though.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/123/reactions",
      "total_count": 13,
      "+1": 10,
      "-1": 0,
      "laugh": 3,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/122",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/122/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/122/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/122/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/122",
    "id": 502062769,
    "node_id": "MDU6SXNzdWU1MDIwNjI3Njk=",
    "number": 122,
    "title": "Tileset Tile Naming AutoCompletion Option In Editor Settings",
    "user": {
      "login": "Gnomeknows",
      "id": 6752290,
      "node_id": "MDQ6VXNlcjY3NTIyOTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6752290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gnomeknows",
      "html_url": "https://github.com/Gnomeknows",
      "followers_url": "https://api.github.com/users/Gnomeknows/followers",
      "following_url": "https://api.github.com/users/Gnomeknows/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gnomeknows/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gnomeknows/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gnomeknows/subscriptions",
      "organizations_url": "https://api.github.com/users/Gnomeknows/orgs",
      "repos_url": "https://api.github.com/users/Gnomeknows/repos",
      "events_url": "https://api.github.com/users/Gnomeknows/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gnomeknows/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-03T13:21:09Z",
    "updated_at": "2019-11-25T22:00:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\nI am grabbing tiles by name, each needs to have specific numbers following it.  Floor0, Floor1, Wall1, Wall2 etc.  \r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nSlowdown when trying to create Tilesets in this manner because of auto completion.  When I try to rename a tile, after the old name has been selected and I start typing it puts the number of the tile I am working on at the end of the caret, forcing me to go back with the mouse, select those numbers and delete them. \r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nA checkbox allowing this auto completion to be turned off in editor settings would eliminate the issue.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nGodot for the most part allows flexible design, forcing this naming scheme seems to go against that.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/120",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/120/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/120/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/120/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/120",
    "id": 501768147,
    "node_id": "MDU6SXNzdWU1MDE3NjgxNDc=",
    "number": 120,
    "title": "Add a Camera2D aspect ratio scaling mode that behaves like Camera3D's Keep Width (Vert-)",
    "user": {
      "login": "The5-1",
      "id": 22944373,
      "node_id": "MDQ6VXNlcjIyOTQ0Mzcz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22944373?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/The5-1",
      "html_url": "https://github.com/The5-1",
      "followers_url": "https://api.github.com/users/The5-1/followers",
      "following_url": "https://api.github.com/users/The5-1/following{/other_user}",
      "gists_url": "https://api.github.com/users/The5-1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/The5-1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/The5-1/subscriptions",
      "organizations_url": "https://api.github.com/users/The5-1/orgs",
      "repos_url": "https://api.github.com/users/The5-1/repos",
      "events_url": "https://api.github.com/users/The5-1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/The5-1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-02T23:01:31Z",
    "updated_at": "2020-11-22T14:48:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D side scrolling fighting game in pixel-art style.\r\nSupport multiple resolutions via up-scaling where, for a side scrolling game, the vertical field of view is to remain fixed.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWindow stretch mode `2d` results in black borders as in [letterbox filming](https://en.wikipedia.org/wiki/Letterboxing_(filming)). With \"borderless\" I refer to removing those black borders by **up-scaling** the visible view port rather than **expanding** it.\r\nTo me up-scaling appears to be the more common solution.\r\nSimilar to how 3D games adjust to aspect ratios by modifying horizontal/vertical field of view rather than letterboxing. `keep height`, to me, should behave like keeping the vertical field of view rather than keeping the height in pixels. Of course this may well be an option for those with the requirement to remain pixel-perfect without up-scaling.\r\n\r\nSee the following example:\r\n![Godot_keep_height2](https://user-images.githubusercontent.com/22944373/66085750-67156a80-e572-11e9-80d8-089e4ead328d.png)\r\nThis is stretch mode `2D`with `keep_height` enabled. (Same happens for `viewport` mode.)\r\n\r\nMy expected behavior would be that `keep_height` forces the **vertical field of view to remain constant and up-scale to fill the height**, while the horizontal field of view adapts into the other dimension.\r\nTo me the black border is un-intuitive and the less aesthetic solution when compared with up-scaling.\r\nIn fact up-scaling does already occur when resizing the display \"diagonally\" maintaining a somewhat similar aspect ratio.\r\nNo combination of settings seems to yield a border less scaling.\r\nTo me it appears like a bug but I could not find any relevant reports in the engine´s issue board.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nRemove any black borders by setting an option in the expected settings category.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nRefer to the image above.\r\nAdd option to enable borderless scaling in `Project Settings/Display/Window/Stretch`.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAs of now I do not understand the reasoning behind the current logic involving the black border.\r\nSo I can not estimate what is necessary to not conflict with it.\r\nTo me it appears like there currently is a more complex logic happening that checks for more conditions than a scaling based on a fixed dimension would require.\r\n\r\n```Cpp\r\nvec2 viewportRes = ...;\r\nvec2 deviceRes = ...;\r\n//...\r\nif(fixedDimension == Dim::X) {\r\n    Viewport.height *= deviceRes.y/viewportRes.y;\r\n}\r\nelse if(fixedDimension == Dim::Y) {\r\n    Viewport.width *= deviceRes.x/viewportRes.x;\r\n}\r\n```\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nImplementing the view port scaling in GDScript should be possible, though I have not yet attempted it, so I am not certain if the API provides everything needed. \r\nBut it defies the purpose of the already existent options as you most likely have to disable them as to not interfere.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nThe current stretch options are core, this is an (possibly simple) addition to them.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/119",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/119/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/119/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/119/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/119",
    "id": 501727580,
    "node_id": "MDU6SXNzdWU1MDE3Mjc1ODA=",
    "number": 119,
    "title": "Create a built-in editor tool for organizing and mass/selectively compiling GDNative projects and addons",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697863498,
        "node_id": "MDU6TGFiZWwxNjk3ODYzNDk4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdnative",
        "name": "topic:gdnative",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 31,
    "created_at": "2019-10-02T21:08:42Z",
    "updated_at": "2020-11-27T22:42:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI have attempted in the past to build addons written in NativeScript C++, but the process is cumbersome and concerns me at scale.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\n\r\nGodot's NativeScript is very much a second-class citizen compared to GDScript, C#, and VisualScript. It requires a lot of technical know-how to set it up. Work that is done automatically for other languages is difficult or impossible to do for NativeScript.\r\n\r\n1. It does not auto-compile before scene launch.\r\n1. Unlike Mono, it has no GUI-based means of...\r\n    1. setting up a project space.\r\n    1. manually triggering a build.\r\n    1. reviewing the build output/errors or project information.\r\n1. The \"Create a script\" process is often a multi-step process. For example, with C++:\r\n    1. Create .h file.\r\n    1. Create .cpp file.\r\n    1. Update one's `init.cpp` file so that `godot_nativescript_init(...)` properly registers the new class name.\r\n        - Must also specify whether it should be a tool script or not.\r\n    1. Create a new `.gdns` resource that points to the correct class name.\r\n        - Must also specify the script class name and/or icon path, if any.\r\n\r\nPluginScript is a concept that was designed to accommodate some of these concerns. However, there are many NativeScript languages already created. Improving the toolset to create, manage, build, and use NativeScript code would provide more value to Godot's addon ecosystem overall.\r\n\r\nIn addition, many NativeScript languages must deal with the dilemma of where to put their source code.\r\n\r\nA user who installs NativeScript code via the Godot Asset Library should have access to the source code while still keeping the source code out of their project's final binary. This means:\r\n\r\n1. The source code must be kept in the git repository tied to the asset, so that it can be easily downloaded.\r\n1. The user should be able to access their project's code and the addon's code through a similar, intuitive interface that still distinguishes between the two.\r\n1. The user should be able to build and use Godot resources (GDNativeLibrary/NativeScript) in the project without the source code files becoming part of the final binary, i.e. when downloaded, the source code files should be moved to a third party `user://` location so that they can be referenced by the editor on a per-project basis, but not bundled into the final binary.\r\n\r\nThe editor should be able to scan directories (maybe `/src` and `/addons/**/src` as conventions) for necessary files (`SCSub`, `config.py`) which NativeScript bindings version they should use, etc. Then the editor can work out the minimal number of dynamic libraries necessary, generating all appropriate GDNativeLibrary resources, and likewise generating a NativeScript resource file for each registered class, along with optionally (in the python configuration perhaps, or ProjectSettings for project-wide configuration) assigning script class names to them all. The editor would ideally provide an intuitive GUI for configuring and automating all of this.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\nCreate a base GDNativeBuild resource that allows users to configure the construction of different types of GDNative projects. The engine could then provide a derived GDNativeBuildCpp resource tailor-made for building and managing NativeScript source code. Those managing repositories could then create their own derived versions to have a user-accessible GUI built into the editor with minimal effort.\r\n\r\nFor C++, we'd need to create an \"official\", highly generic, parameterized SConstruct script that Godot can generate on command (if we want the language to have better first-party support). It could simply download the bindings to the user settings under a version number, thereby allowing multiple \"builds\" to reference the same bindings version number.\r\n\r\nWe can then use an EditorInspectorPlugin to create buttons and other behavioral elements to the GDNativeBuild to provide a unified interface for doing all operations necessary for all NativeScript projects:\r\n\r\n1. Regenerating the Godot API JSON (for master builds).\r\n1. Downloading a particular version of the bindings (1.0, 1.1, master, etc.).\r\n1. Generating the boilerplate for a project associated with the Build's target language.\r\n1. Managing the project files created in step 3.\r\n1. Building the static library for a particular bindings version.\r\n1. For any one project...\r\n    1. Building the source code with the static library into the dynamic library.\r\n    1. Generating scripts for the language represented by the Build resource via templates.\r\n    1. Generating the GDNativeLibrary and automatically hooking it up for the user.\r\n    1. Generating the NativeScript files and automatically hooking them up for the user.\r\n    1. Allowing the user to manage, through an interface in the Build's Inspector, which classes exist, which have `.gdns` files, which are tool scripts, etc. (and toggle on/off the presence of the latter two).\r\n\r\nThis would all shift work that would otherwise be difficult to learn, manually executed, and an absolute maze of chaos to manage into something simple, intuitive, built-in, automated, organized, and *visual*.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nSome generic interface for executing necessary NativeScript processes. There could be a lot more than just this, as mentioned in other sections, but this is just a general idea. The buttons at the top are inserted via an EditorInspectorPlugin.\r\n\r\n\"Sub builds\" would be an array of resources that allow one to bunch multiple other builds under a single build recursively, i.e. requesting to build the top level one would also build the lower level ones, or the lower ones could be expanded to open their own toolbar for building independently, etc.\r\n\r\n<img width=\"408\" alt=\"gdnative_build_res_01\" src=\"https://user-images.githubusercontent.com/16217563/66081764-54794200-e52e-11e9-8deb-7336555d28da.png\">\r\n\r\nI would imagine you could have additional GUI elements for detailing where to place the source code, which classes are present / what their status is (registered? tool? NativeScript?) and GUI elements for generating files. Everything outlined above, though I'm not the best UI designer so maybe others have better ideas.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. We would need to create a `/gdnative/build` submodule. It would need to have...\r\n    1. GDNativeBuild\r\n    1. GDNativeBuildCpp\r\n    1. GDNativeBuildPlugin\r\n    1. GDNativeBuildInspectorPlugi\r\n    - Users could then add GDNativeBuild\\<OtherLanguage\\> via the Asset Library.\r\n1. We would need to create the SConstruct file necessary to compile the scripts and make it a permanent addition to the `godot-cpp` repository. Default users who are just getting started could use it while power users that prefer to write their own could replace it with their own or ignore it.\r\n1. The Cpp version would need to also support generating Visual Studio projects since that is a commonly used editor for Windows users (myself included).\r\n    - Careful thought would have to be put in here to make sure we don't conflict with users who have both a C# and a C++ project in their Godot project.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt would be used *very* often. I have already started working with it and then frequently stopped because of how much of a hassle it is to setup, manage, and use the C++ scripts compared to GDScript and C#. If it were easier, I would be more inclined to use them. And if we are going to improve the usability of one, we may as well ensure that the NativeScript ecosystem itself can benefit from the changes rather than just C++ alone (as a PluginScript would do).\r\n\r\nOnce we start having more first-party addons that port functionality out of the core and once the addon ecosystem is improved further (teaching more users how to setup Travis CI builds for their own multi-platform GDNative projects - godotengine/godot-docs#2815), I believe we will see more and more people wanting to use it for complex projects and performance-intensive code.\r\n\r\nAny user that wants to include third-party addon in their project shouldn't have to worry about what kind of source code was used to write that addon. Including it in their project should mean that using it works out-of-the-box with minimal effort.\r\n\r\nYou *can* do most of this exclusively through script code, but the code itself is highly complex and C++ is supposed to an official Godot language (as the godotengine team members directly maintain the `godot-cpp` repository). We should also put forward the minimal effort of improving the C++ workflow for users through the editor, even if it has to separately download most of the required files.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIf the goal is for the manner of addon implementation to be irrelevant to the end-user, then the end-user should not need a separate tool to setup and use the code in an organized and efficient way. I should be able to use Godot as a lightweight IDE, just as it works for C#.\r\n\r\nFurthermore, content creators should not have to go through an obscure and difficult process just to organize their addons adequately. It should all be built-in.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/119/reactions",
      "total_count": 97,
      "+1": 68,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 20,
      "rocket": 1,
      "eyes": 6
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/118",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/118/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/118/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/118/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/118",
    "id": 501684180,
    "node_id": "MDU6SXNzdWU1MDE2ODQxODA=",
    "number": 118,
    "title": "Remove addon versus plugin inconsistencies.",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      },
      {
        "id": 1697864971,
        "node_id": "MDU6TGFiZWwxNjk3ODY0OTcx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:plugin",
        "name": "topic:plugin",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-02T19:35:30Z",
    "updated_at": "2020-12-24T17:23:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI work on a lot of plugins.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nThe terms `addon` and `plugin` are terms that are often used interchangeably in the community (with good reason, since so many addons include plugins). However, not all addons *are* plugins. There are a couple places still where wires get crossed.\r\n\r\n1. The ability to toggle plugins on and off has long sufficed. However, now that we have script classes as an exposed API that does not rely on plugins. People can install addons, but may want to be able to toggle an addon's script classes on/off without the addon itself having a plugin. The ProjectSettings' Plugins tab only allows you to toggle plugins though.\r\n    - Problem was encountered in the now-reverted godotengine/godot#32434\r\n1. The defining configuration file that specifies that an addon exists is called `plugin.cfg`, not `addon.cfg`. This invites confusion to users who may be under the impression that the EditorPlugin is a necessary part of their addon.\r\n1. the PluginCreateDialog is specialized exclusively for creating plugins, but it should really support addons in general and keep plugins optional. Users should be able to easily create toggleable subsystems for their projects with the ability to redistribute them independently if desired (and without the expectation that it will be a plugin).\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\n\r\n- Minimizes user confusion.\r\n- Improves the flexibility of the addon/plugin system to account for the currently global presence of script classes.\r\n- Remove clutter / improve the flexibility of the addon creation process (as distinct from the plugin creation process).\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n<img width=\"449\" alt=\"plugin_tab_edited\" src=\"https://user-images.githubusercontent.com/16217563/66075457-45d85e00-e521-11e9-8903-8426ecfcc1f1.png\">\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI would just add a setting in PluginCreateDialog that allows users to leave the plugin script path empty (so that it doesn't generate one) and then update the Plugin tab to be the Addon tab instead and specifically flag whether an addon *has* a plugin (with *all* of them being toggleable).\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nIt is an editor change and a breaking API change for the addon system. So no.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/118/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/116",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/116/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/116/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/116/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/116",
    "id": 500708106,
    "node_id": "MDU6SXNzdWU1MDA3MDgxMDY=",
    "number": 116,
    "title": "Include fluid simulation in the 2D physics engine",
    "user": {
      "login": "nezvers",
      "id": 26794315,
      "node_id": "MDQ6VXNlcjI2Nzk0MzE1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/26794315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nezvers",
      "html_url": "https://github.com/nezvers",
      "followers_url": "https://api.github.com/users/nezvers/followers",
      "following_url": "https://api.github.com/users/nezvers/following{/other_user}",
      "gists_url": "https://api.github.com/users/nezvers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nezvers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nezvers/subscriptions",
      "organizations_url": "https://api.github.com/users/nezvers/orgs",
      "repos_url": "https://api.github.com/users/nezvers/repos",
      "events_url": "https://api.github.com/users/nezvers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nezvers/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-10-01T07:10:00Z",
    "updated_at": "2020-01-03T17:28:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Google has made an open-sourced extension on Box2d. Gamemaker already has implemented it and I think Godot community will only benefit with this new tool.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nI haven't had luck with simulating liquid on my own.\r\n\r\n**Describe how this feature/enhancement will help you overcome this problem or limitation:**\r\nA convenient way to create good looking liquid simulation.\r\n\r\n**Show a mock-up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nExamples are shown in Google's own GitHub repository - https://google.github.io/liquidfun/\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI think it can be used as Rigidbody2D mode and as standalone node (same as Kinematicbody2D and Staticbody2d) \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt is part of the same physics system that's already supported by Godot.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/116/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/115",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/115/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/115/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/115/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/115",
    "id": 500183248,
    "node_id": "MDU6SXNzdWU1MDAxODMyNDg=",
    "number": 115,
    "title": "Add a \"debug\" Label to display node properties in a running project",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2019-09-30T10:17:12Z",
    "updated_at": "2020-11-06T18:51:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D action game, turn based card game.\r\n\r\n**Describe the problem or limitation you are having in your project:**\r\nWriting code in Godot is fast, but I actually spend the majority of my dev time debugging and making sure what I wrote actually works. Using ``print`` in all it's variants is great for the utmost basic things, but especially for any code running in _process() or _physics_process() printing to output is anything but optimal due to the nature of print: \r\n\r\n- It consumes a lot of performance in _process() or _physics_process() severely limiting the usefulness of \"live\" debugging with print\r\n- it's had to keep track of a larger number of different values that change each frame\r\n\r\nTwo alternatives: \r\nEither print to file, has less performance issues, but requires to clutter your project with file code and is not suitable for live-debugging,\r\nor create Label node and set_text to those values which will also require custom code that clutters your project and therefore scales really badly. Formatting this Label for comprehensive debugging takes even more time out of your valuable dev time.\r\n\r\nBoth alternative require a lot more effort than just writing `print(myvalue)` and therefore are a hindrance to immediate debugging.\r\n\r\n**Describe how this feature / enhancement will help you overcome this problem or limitation:**\r\nA Debug-Label node, that serves to print all values I pass as arguments would solve all these problems:\r\n\r\n`$DebugLabel.set_text(variable or property or signal, variable or property or signal, variable or property or signal, ...)`\r\n\r\nwould automatically format the argument already like \r\nargument1: value of argument1\r\nargument2: value of argument2\r\nargument3: value of argument3\r\n...\r\nAutomatic text outline would guarantee legible text on all backgrounds. Arguments themselves would be displayed with 90% white and black outline, while the argument values have different colors according to what type the value is. Those colors depend on the users Godot editor theme so that they match the users script colors. For the default theme this would be strings are yellow, booleans are red, vectors or color is green, integers white. \r\n\r\nIt would provide immediate onscreen information, right at the location where I need it. It would have very little performance costs compared to print (presumably close to a simple Label) and provide all the Label Node comforts (scale, relative positioning, add it as child to the scene I want to debug, and therefore moving along relative with the parent scene)\r\n\r\nIn the roll down menu next to \"Visual collision shapes\" all types of debug Nodes like this DebugLable (another type could be [DebugVector](https://github.com/godotengine/godot-proposals/issues/112#issuecomment-536215911)) could be made visible or hidden simultaneously. \r\nDebug Nodes should always be automatically drawn on top of everything else.\r\nThe debug nodes are obviously not included in exports, or would have to be opted in to be included.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n`$DebugLabel.set_values(name, z_index, state, health, ready_to_jump, modulate, position)` would result in:\r\n![debug_label](https://user-images.githubusercontent.com/47016402/65871742-53ee7900-e37f-11e9-8e7f-3afad77c2731.png)\r\nThe DebugLabel boundary box is obviously just for the sake of this visualization.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI don't have the coding skills.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt's a debugging improvement, so I can imagine it being used a lot.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nBecause debugging is such an essential and big part of development time, efficient and easy use should not be an downloadable option, but already come with the engine on first installment.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/115/reactions",
      "total_count": 13,
      "+1": 12,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/114",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/114/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/114/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/114/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/114",
    "id": 499966310,
    "node_id": "MDU6SXNzdWU0OTk5NjYzMTA=",
    "number": 114,
    "title": "Extend the 2D TileMap autotiling feature to 3D GridMaps",
    "user": {
      "login": "viniciuscsg",
      "id": 5377339,
      "node_id": "MDQ6VXNlcjUzNzczMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5377339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/viniciuscsg",
      "html_url": "https://github.com/viniciuscsg",
      "followers_url": "https://api.github.com/users/viniciuscsg/followers",
      "following_url": "https://api.github.com/users/viniciuscsg/following{/other_user}",
      "gists_url": "https://api.github.com/users/viniciuscsg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/viniciuscsg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viniciuscsg/subscriptions",
      "organizations_url": "https://api.github.com/users/viniciuscsg/orgs",
      "repos_url": "https://api.github.com/users/viniciuscsg/repos",
      "events_url": "https://api.github.com/users/viniciuscsg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/viniciuscsg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-09-29T20:25:12Z",
    "updated_at": "2020-12-16T08:25:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA very simple 3d platformer with gridmap-based terrains and platforms.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nTo construct a 3d level quickly by reusing walls, corners, wall edges etc, the most useful node available is clearly the Gridmap, similarly to what you would do with a 2d tilemap. However while there is autotiling functionality already implemented in 2d tilemaps to speed up level design, in 3d Gridmaps you have to select and place every tile individually, while also using non-intuitive keybinded commands to flip the tiles on screen, which is quite tiresome and time consuming.\r\n\r\nAs an practical example, to draw something as a simple cubic house or building measuring 3x3x3 cells, after setting up the resource and the grip map, one has to click the screen at least 39 times (including selecting the types of tiles needed, placing them, and changing the Gridmap's floor), plus using keybinded commands to flip the tiles a dozen times, without a tool-tip on screen.\r\n\r\nIf it was possible to extend the exact same functionality we already have for 2d tilemaps to make it work in the exact same way for a single floor of a grimap (as if it were a tilemap) the same building would me made with 6 clicks (3 to place, 3 to change floor) by choosing the 4-bit/2x2 option. With the 8bit-3x3 option, you would still click to paint every cell, but all the tile selection would still be automatic, and a great level of detail could be achieved quickly.\r\n\r\nWhen one consider a rather large level, not having this feature can easily amount to hundreds (or thousands) of extra clicks and mouse movements, while drawing with autotiling is sure to speed up level design and be a great quality of life option, which hopefully could be achieved by reusing code already implemented in godot for another node (2d tilemaps).\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![rlhyx0u5nez11](https://user-images.githubusercontent.com/5377339/65838714-74b1c280-e2dc-11e9-8fd4-e921423ce979.png)\r\nIn this case, the 3x3 cliff above would produced by a single autotiled brush click.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nAdapt the tilemap autotile code, considering a floor in a gridmap as if it were a tilemap.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis is an IDE usability enhancement, so I think implementing it with code by the average user would amount to creating your own level maker, which doesn't seem like a trivial task that could be done with a few lines of code. I believe that once implemented this enhancement will be used very often, given that painting levels with autotiling is widely considered much more efficiente than placing tiles one by one, and selecting the correct tile hundreds of times.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nYes, I believe this to be a general purpose functionality useful for any game with scenes composed of gridmaps, which is should be a preferred way of making grid based levels.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/114/reactions",
      "total_count": 30,
      "+1": 28,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/113",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/113/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/113/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/113/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/113",
    "id": 499956913,
    "node_id": "MDU6SXNzdWU0OTk5NTY5MTM=",
    "number": 113,
    "title": "Keep multiple audio tracks in sync",
    "user": {
      "login": "nhydock",
      "id": 316728,
      "node_id": "MDQ6VXNlcjMxNjcyOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/316728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhydock",
      "html_url": "https://github.com/nhydock",
      "followers_url": "https://api.github.com/users/nhydock/followers",
      "following_url": "https://api.github.com/users/nhydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhydock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhydock/subscriptions",
      "organizations_url": "https://api.github.com/users/nhydock/orgs",
      "repos_url": "https://api.github.com/users/nhydock/repos",
      "events_url": "https://api.github.com/users/nhydock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhydock/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862802,
        "node_id": "MDU6TGFiZWwxNjk3ODYyODAy",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:audio",
        "name": "topic:audio",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-09-29T19:07:18Z",
    "updated_at": "2020-11-28T17:07:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA game with dynamic audio based on gameplay context.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThe audio in the game involves multiple tracks which are variations unto itself.  Transitioning between tracks should be seemless and in-sync with one another, as they are layered.  In my game all the tracks that I need to switch between are the same length and bpm, but this shouldn't be a requirement.  Without accurate syncing, I've had tracks that need to play simultaneously and both be heard together end up becoming desynced, causing extreme dissonance as the beats are completely off.\r\n\r\nThis kind of feature is also incredibly useful for rhythm games that keep instrument tracks as separate streams, ie. Frets On Fire/Rock Band.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/316728/65837757-2ba44300-e2c9-11e9-97f3-12fab2516769.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nUsing a manager node, allow all children audio streams within it to play simultaneously, their positions synced across them.  Position and isPlaying should be controlled by the manager instead of each stream.  Looping should still be managed by child streams, with sync position relative to the longest stream.\r\n\r\nThrough scripts developers can adjust things such as fade between tracks if they only wish to have one heard at a time.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot presently without causing audio to jitter.  Audio runs on a thread separate from the game loop, so attempting to modulate and keep tracks in sync using scripts is not ideal.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCore at the present time does not expose enough low-level details about the audio streams and ability to keep them in sync.  Most audio features are better suited integrated tightly with the engine, however if the APIs could be improved to expose more details then it's possible that this could be a feature managed better in an asset such as Godot-Mixing-Deck",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/113/reactions",
      "total_count": 8,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 2
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/112",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/112/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/112/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/112/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/112",
    "id": 499791957,
    "node_id": "MDU6SXNzdWU0OTk3OTE5NTc=",
    "number": 112,
    "title": "Add support for immediate-mode debug drawing",
    "user": {
      "login": "The5-1",
      "id": 22944373,
      "node_id": "MDQ6VXNlcjIyOTQ0Mzcz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22944373?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/The5-1",
      "html_url": "https://github.com/The5-1",
      "followers_url": "https://api.github.com/users/The5-1/followers",
      "following_url": "https://api.github.com/users/The5-1/following{/other_user}",
      "gists_url": "https://api.github.com/users/The5-1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/The5-1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/The5-1/subscriptions",
      "organizations_url": "https://api.github.com/users/The5-1/orgs",
      "repos_url": "https://api.github.com/users/The5-1/repos",
      "events_url": "https://api.github.com/users/The5-1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/The5-1/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-09-28T16:27:25Z",
    "updated_at": "2020-05-19T19:41:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n![image](https://user-images.githubusercontent.com/22944373/65819318-491ad380-e21b-11e9-82bf-31122536ac5c.png)\r\n\r\nA side scrolling fighting game. \r\nThe game logic is in 2D, but visuals may be changed to 3D at some point.\r\nI frequently wish to draw points or vectors in space to visualize and debug my logic, e.g. distances, directions, targeting, velocity, grids, touch-input bounds, etc.\r\nAt first I intuitively tried to call the public `draw_*()`methods of a `CanvasItem` derived Singleton, but this results in the error:\r\n`Drawing is only allowed inside NOTIFICATION_DRAW, _draw() function or 'draw' signal.`\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThe goal is to **conveniently** draw debugging visualizations from **anywhere** in your code **without cluttering** the actual logic with glue code.\r\nFurther, any debug drawing code **shall be clearly separated** from drawing that is intended to end up in the final product.\r\n\r\nCurrently I see two workarounds to draw debug visualizations, both have drawbacks:\r\n\r\nYou either embed the entire debug drawing logic into your class e.g. if its Node2D or Control, but this clutters your logic with debug code for drawing. It does not distinguish between drawing that is supposed to end up in the shipped game and debug visualizations.\r\n\r\nOr you have to implement a Singleton that provides various helpful shapes like point, line, box, etc. and make it work with the transforms of 2D, Control and 3D.\r\nSimilar to this: https://github.com/klaykree/Godot-3D-Lines/blob/master/DrawLine3D.gd\r\n\r\nIn the spirit of \"The Godot editor is a Godot Game\" we may argue that \"any drawing is drawing\" and we should not have an engine-side differentiation between debug and release drawing. In this case we may discuss what changes, if any, would be needed to facilitate the implementation of an Add-On with the desired capabilities.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nAn API example may be of more use here:\r\n```GDScript\r\nfunc _targetEnemy():\r\n\t# have some math or gameplay logic here..\r\n\tvar selfPos: Vector3 = ...\r\n\tvar targetPos: Vector3 = ...\r\n\t# params: from, to, color, duration, view space transform\r\n\tDebug.draw_line(selfPos, targetPos, Color.red, 0.0, maincamera3D)\r\n```\r\nConsidering the performance impact it would be preferable to have the option to toggle all `Debug` calls at runtime additionally to compiling them out.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nhttps://github.com/klaykree/Godot-3D-Lines/blob/master/DrawLine3D.gd seems like a good start. Possibly attention needs to be paid to handling multiple viewports and offscreen rendering.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI assume it will be used often. It is likely more than a few lines of code to provide a generic class with a rich set of shapes like CanvasItem to draw in both 2D and 3D.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nA DebugDraw class like this may well be an add-on.\r\nImplementing it on the native side may benefit performance though.\r\nHowever more important may be to not hide such a debug feature behind an add-on.\r\n\r\n**Misc:**\r\nA more advanced version (or a add-on implemented on top of this core functionality) may offer the possibility to add Tags. This would allow to toggle the drawing of only certain tags at run time.\r\n```\r\n\tDebug.draw_line(\"Targeting\", selfPos, targetPos, Color.red, 0.0, maincamera3D)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/112/reactions",
      "total_count": 21,
      "+1": 18,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/110",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/110/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/110/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/110/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/110",
    "id": 499762053,
    "node_id": "MDU6SXNzdWU0OTk3NjIwNTM=",
    "number": 110,
    "title": "Make Toggle Comment respect indentation level in the Script Editor",
    "user": {
      "login": "PLyczkowski",
      "id": 7307968,
      "node_id": "MDQ6VXNlcjczMDc5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7307968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PLyczkowski",
      "html_url": "https://github.com/PLyczkowski",
      "followers_url": "https://api.github.com/users/PLyczkowski/followers",
      "following_url": "https://api.github.com/users/PLyczkowski/following{/other_user}",
      "gists_url": "https://api.github.com/users/PLyczkowski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PLyczkowski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PLyczkowski/subscriptions",
      "organizations_url": "https://api.github.com/users/PLyczkowski/orgs",
      "repos_url": "https://api.github.com/users/PLyczkowski/repos",
      "events_url": "https://api.github.com/users/PLyczkowski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PLyczkowski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-28T11:53:30Z",
    "updated_at": "2019-11-25T21:58:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAny project.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThis feature would work better with code folding than the current solution (code would fold with commented parts at the end of it), would introduce parity with other software like VSCode, would increase readability of the code (would be clearer what is the intended indentation level of the commented lines), and would work better with changing the indentation level (has at the beginning of the line prevents the user from selecting commented lines and indenting/deindenting them).\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nCurrent behavior, hash sign is inserted at the beginning of the line:\r\n![image](https://user-images.githubusercontent.com/7307968/65815942-02ff4900-e1f6-11e9-9d4c-564c0cb0fb04.png)\r\n> \r\n![image](https://user-images.githubusercontent.com/7307968/65815949-127e9200-e1f6-11e9-9371-709140497ded.png)\r\nThe last commented line/lines of the function is not folded with the function.\r\n\r\nProposed behavior, hash is inserted after the indentation:\r\n![image](https://user-images.githubusercontent.com/7307968/65815963-5d98a500-e1f6-11e9-9c0b-2b5d31058983.png)\r\n> \r\n![image](https://user-images.githubusercontent.com/7307968/65815973-76a15600-e1f6-11e9-8687-6483e4466d12.png)\r\nThe last commented line/lines of the function is folded with the function according to the indentation.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNo, it's inherent to the editor.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's inherent to the editor.\r\n\r\nFor a working example of this feature check VSCode.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/110/reactions",
      "total_count": 10,
      "+1": 10,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/106",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/106/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/106/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/106/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/106",
    "id": 499034592,
    "node_id": "MDU6SXNzdWU0OTkwMzQ1OTI=",
    "number": 106,
    "title": "Ability to copy parameters path from shaders and animation trees",
    "user": {
      "login": "IllusiveS",
      "id": 7921065,
      "node_id": "MDQ6VXNlcjc5MjEwNjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7921065?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IllusiveS",
      "html_url": "https://github.com/IllusiveS",
      "followers_url": "https://api.github.com/users/IllusiveS/followers",
      "following_url": "https://api.github.com/users/IllusiveS/following{/other_user}",
      "gists_url": "https://api.github.com/users/IllusiveS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IllusiveS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IllusiveS/subscriptions",
      "organizations_url": "https://api.github.com/users/IllusiveS/orgs",
      "repos_url": "https://api.github.com/users/IllusiveS/repos",
      "events_url": "https://api.github.com/users/IllusiveS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IllusiveS/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-26T18:03:23Z",
    "updated_at": "2020-06-08T13:30:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nCurrently i am developing a few small game-jam like projects\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nNot having to transcribe the values of paths will save some time and help avoid bugs when mistyping\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nI hover mouse over the property with shader parameter\r\n![image](https://user-images.githubusercontent.com/7921065/65712827-2dd38b00-e098-11e9-8ed2-d5209d415083.png)\r\nand now i want to press or do something that will save property path to clipboard so that i can easily copy it into the script\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nNo clue, if someone could direct me somewhere i could do it myself probably, but right now i don't know much about godot to propose code\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that i know of, if it is, i would love to make a plugin for it then\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nDo not know if it is possible to do that, it might be because some inspector fields can tell the difference between right and left click\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/105",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/105/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/105/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/105/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/105",
    "id": 498441114,
    "node_id": "MDU6SXNzdWU0OTg0NDExMTQ=",
    "number": 105,
    "title": "Make `get_stack()` available in release/debug export templates as well as in the editor",
    "user": {
      "login": "rslepon",
      "id": 53791975,
      "node_id": "MDQ6VXNlcjUzNzkxOTc1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/53791975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rslepon",
      "html_url": "https://github.com/rslepon",
      "followers_url": "https://api.github.com/users/rslepon/followers",
      "following_url": "https://api.github.com/users/rslepon/following{/other_user}",
      "gists_url": "https://api.github.com/users/rslepon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rslepon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rslepon/subscriptions",
      "organizations_url": "https://api.github.com/users/rslepon/orgs",
      "repos_url": "https://api.github.com/users/rslepon/repos",
      "events_url": "https://api.github.com/users/rslepon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rslepon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864108,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MTA4",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gdscript",
        "name": "topic:gdscript",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-09-25T18:07:19Z",
    "updated_at": "2020-11-21T15:02:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI am developing a story-driven turn-based tactical game.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nBugs happen even in released games. Having an error log with a stack trace would help in debugging.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nN/A\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nCurrently get_stack() seems to work only in the editor, as far as I can see. I believe it may be even more useful in the exported exe (in debug and release mode), so I suggest making it work there too.\r\n\r\nHere is a function I was planning to use in my game as a replacement for assert():\r\n\r\n```\r\n# replacement for assert, aborting in debug mode, logging in debug and release modes\r\nfunc ass (cond :  bool, # if conditional is not true, pretty fatal\r\n          msg  := \"\"    # message to print to log\r\n         ) -> void:\r\n   var fh  := File.new() # file handle\r\n   var err := OK         # error code\r\n\r\n   # if failed\r\n   if not cond:\r\n\r\n      # open new file\r\n      err = fh.open(D.LOG_FILE_PATH_FULL, File.READ_WRITE)\r\n      assert(err == OK)\r\n\r\n      # write to log\r\n      fh.store_line(\"%d: %s\" % [OS.get_ticks_msec(), msg])\r\n      fh.store_line(str(get_stack()))\r\n\r\n      # close file\r\n      fh.close()\r\n\r\n      # abort in debug mode\r\n      assert(cond)\r\n```\r\n\r\nIt works just fine, except that get_stack() returns an empty array in the exported exe (regardless of whether \"Export With Debug\" is checked or not), where it is most needed, since in the editor the information is already available in the debugger.\r\n\r\nP.S. I expect the same could be said for print_stack() too.\r\n\r\nP.P.S. I am suggesting to add this as an optional project (or export) setting (off by default). If one wished to pay the performance penalty for the added debug capability (I would), then one would enable that setting.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNot that I can see.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a very basic debug feature that I would expect it to be useful for every game being developed.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/105/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/104",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/104/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/104/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/104/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/104",
    "id": 498424042,
    "node_id": "MDU6SXNzdWU0OTg0MjQwNDI=",
    "number": 104,
    "title": "Distinguish between the system that filters input and the data structure that contains input state",
    "user": {
      "login": "Xrayez",
      "id": 17108460,
      "node_id": "MDQ6VXNlcjE3MTA4NDYw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17108460?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xrayez",
      "html_url": "https://github.com/Xrayez",
      "followers_url": "https://api.github.com/users/Xrayez/followers",
      "following_url": "https://api.github.com/users/Xrayez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xrayez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xrayez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xrayez/subscriptions",
      "organizations_url": "https://api.github.com/users/Xrayez/orgs",
      "repos_url": "https://api.github.com/users/Xrayez/repos",
      "events_url": "https://api.github.com/users/Xrayez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xrayez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864335,
        "node_id": "MDU6TGFiZWwxNjk3ODY0MzM1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:input",
        "name": "topic:input",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 30,
    "created_at": "2019-09-25T17:31:23Z",
    "updated_at": "2020-12-01T20:23:27Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## Executive summary\r\n\r\nThe default `Input` implementation doesn't provide a flexible way to control the internal input state, which often leads to \"one-way\" communication given the current input API, so the main goal of this proposal is to allow managing both internal *input state* **and** *input logic/filtering* of the `Input` singleton independently of each other. There are a number of requests/proposals which can be resolved by allowing people to create their own input filtering layers via script by providing low-level access via `InputState` structure, listing some proposals and use cases:\r\n\r\n* godotengine/godot-proposals#100\r\n* https://github.com/godotengine/godot/pull/16797#issuecomment-590096443\r\n* https://github.com/godotengine/godot/issues/30613#issuecomment-590008287\r\n* https://github.com/godotengine/godot/issues/15681#issuecomment-589902810\r\n* https://github.com/godotengine/godot/issues/21005#issuecomment-589902700\r\n* https://github.com/godotengine/godot/issues/29363#issuecomment-589902595\r\n* https://github.com/godotengine/godot/pull/39541#issuecomment-644052004\r\n* bitwes/Gut#171\r\n\r\nHaving an encapsulated instance of an `InputState` brings many possibilities such as multi-agent, local multi-player games, input-driven AI, networking, replication via input buffers etc.\r\n\r\nThe alternative way of achieving the following features is to allow the developers to override the default input implementation (via modules or similar), but there's no way of doing so yet.\r\n\r\n## Domain\r\n\r\nMostly genre-agnostic, but most useful for turn-based games, fighting games, and other games with multiple characters controlled by the same player (even local and networked multiplayer).\r\n\r\n# Introduction\r\n\r\n## Problem\r\n\r\nConsider this somewhat typical input handling code that you can see in many tutorials involving character movement:\r\n\r\n```gdscript\r\nextends Sprite\r\n\r\nvar speed = 300.0\r\n\r\nfunc _physics_process(delta):\r\n\tif Input.is_action_pressed(\"ui_left\"):\r\n\t\tposition += Vector2.LEFT * speed * delta\r\n\tif Input.is_action_pressed(\"ui_right\"):\r\n\t\tposition += Vector2.RIGHT * speed * delta\r\n\tif Input.is_action_pressed(\"ui_up\"):\r\n\t\tposition += Vector2.UP * speed * delta\r\n\tif Input.is_action_pressed(\"ui_down\"):\r\n\t\tposition += Vector2.DOWN * speed * delta\r\n```\r\n\r\nWhile this works perfecly fine for single-character games (like First-person shooters), this approach becomes unusable for type of games involving multiple characters (like real-time strategy games, or simply turn-based games).\r\n\r\nFirstly, `Input` singleton is global by definition. If we place multiple characters given the same script, naturally they are going to be controlled by the same input which results in synchonous movement. While this could work for certain type of games, this is probably not what we want for the most part:\r\n\r\n![sync_motion](https://user-images.githubusercontent.com/17108460/72617461-ad37e380-3941-11ea-850b-d4530f0ef354.gif)\r\n\r\nSecondly, if a game implements certain characters which can be controlled by an AI, we'll likely want to somehow manipulate the dynamics of a character via code as well, so we also need to copy some of the `Input` internal state to each of the characters in the game and interpret that as input instead (mainly talking about input-driven AI here).\r\n\r\n## First steps\r\n\r\nLets improve the situation by adding a new `motion` property to the character:\r\n\r\n```gdscript\r\nextends Sprite\r\n\r\nvar speed = 300.0\r\nexport var motion = Vector2()\r\n\r\nfunc _physics_process(delta):\r\n\t# First, collect input\r\n\tif Input.is_action_pressed(\"ui_left\"):\r\n\t\tmotion += Vector2.LEFT\r\n\tif Input.is_action_pressed(\"ui_right\"):\r\n\t\tmotion += Vector2.RIGHT\r\n\tif Input.is_action_pressed(\"ui_up\"):\r\n\t\tmotion += Vector2.UP\r\n\tif Input.is_action_pressed(\"ui_down\"):\r\n\t\tmotion += Vector2.DOWN\r\n\r\n\t# Finally, process logic given the input\r\n\tposition += motion * speed * delta\r\n\tmotion = Vector2()\r\n```\r\n\r\nThis has two parts now: the part which collects input and the part which acts upon the input, in our case by actually moving the character. This has some nice benefits:\r\n\r\n- makes the \"input state\" (`motion`) more independent from `Input` singleton;\r\n- the property can be modified externally which allows us to possibly implement an AI controller in the future;\r\n- can even be animated!\r\n\r\nOne of the major downside is that if we do modify the `motion` property directly, it's still vulnerable to user input, so we need something better.\r\n\r\n## Filtered input and AI\r\n\r\nIn a multi-character game, you'll mostly want to control only one or a group of characters out of all available. Lets add `controlled` property:\r\n\r\n```gdscript\r\nexport var controlled = false\r\n\r\nfunc _physics_process(delta):\r\n\tif not controlled:\r\n\t\treturn\r\n```\r\n\r\nThat's simple enough. Recall AI stuff? Lets make up something:\r\n\r\n```gdscript\r\nexport var motion = Vector2()\r\nexport var controlled = false\r\nexport var human = false\r\n\r\nfunc _physics_process(delta):\r\n\tif not controlled:\r\n\t\treturn\r\n\r\n\tif human:\r\n\t\tif Input.is_action_pressed(\"ui_left\"):\r\n\t\t\tmotion += Vector2.LEFT\r\n\t\tif Input.is_action_pressed(\"ui_right\"):\r\n\t\t\tmotion += Vector2.RIGHT\r\n\t\tif Input.is_action_pressed(\"ui_up\"):\r\n\t\t\tmotion += Vector2.UP\r\n\t\tif Input.is_action_pressed(\"ui_down\"):\r\n\t\t\tmotion += Vector2.DOWN\r\n\telse:\r\n\t\t# Brownian AI motion!\r\n\t\tmotion += [Vector2.RIGHT, Vector2.LEFT, \r\n                Vector2.DOWN, Vector2.UP][randi() % 4]\r\n\r\n\tposition += motion * speed * delta\r\n\tmotion = Vector2()\r\n```\r\nResult:\r\n\r\n![human-and-ai](https://user-images.githubusercontent.com/17108460/72617567-e6705380-3941-11ea-8e0c-56296756782d.gif)\r\n\r\n\r\nFor simplicity, the primitive AI randomly picks 1 out of 4 given directions here and modifies the `motion` property accordingly. But what if we add more type of inputs now?\r\n\r\n## Too many actions\r\n\r\nWhat we've done so far is cloning our global `Input` state down to our character instances, controlled by either a human or an AI. Lets add some more type of input actions to see how well this scales:\r\n\r\n```gdscript\r\nvar motion = Vector2()\r\nvar sprint = false\r\nvar shoot = false\r\n# ... and\r\n# ... much\r\n# ... more\r\n\r\nexport var controlled = false\r\nexport var human = false\r\n\r\nfunc _physics_process(delta):\r\n\tif not controlled:\r\n\t\treturn\r\n        \r\n\tif human:\r\n\t\tif Input.is_action_pressed(\"ui_left\"):\r\n\t\t\tmotion += Vector2.LEFT\r\n\t\tif Input.is_action_pressed(\"ui_right\"):\r\n\t\t\tmotion += Vector2.RIGHT\r\n\t\tif Input.is_action_pressed(\"ui_up\"):\r\n\t\t\tmotion += Vector2.UP\r\n\t\tif Input.is_action_pressed(\"ui_down\"):\r\n\t\t\tmotion += Vector2.DOWN\r\n\r\n\t\tsprint = Input.is_action_pressed(\"sprint\")\r\n\t\tshoot = Input.is_action_just_pressed(\"shoot\")\r\n\t\t# ... and many more!\r\n\telse:\r\n\t\tmotion += [Vector2.RIGHT, Vector2.LEFT, \r\n                Vector2.DOWN, Vector2.UP][randi() % 4]\r\n\t\tsprint = true if rand_range(0.0, 1.0) > 0.9 else false\r\n\t\tshoot = true if rand_range(0.0, 1.0) > 0.9 else false\r\n\t\t# ... and many more!\r\n\r\n    if sprint:\r\n        position += motion * speed * 2.0 * delta\r\n    else:\r\n        position += motion * speed * delta\r\n\r\n\tif shoot:\r\n\t\t# shoot bullets here\r\n       \t\tpass\r\n\r\n\tmotion = Vector2()\r\n\tsprint = false\r\n\tshoot = false\r\n\t# ... and many more!\r\n```\r\nResult:\r\n\r\n![more-actions](https://user-images.githubusercontent.com/17108460/72617830-83cb8780-3942-11ea-807b-d0978bcb6521.gif)\r\n\r\nImagine if you have more than 3 actions... There's clearly something wrong with this approach.\r\n\r\n## Hardcoded input states\r\n\r\nIdeally, we need to remove `Input` handling dependency from our character scripts, because we don't want the user input to mess up with AI, recorded, or simulated input. In some way, we basically need to keep a local copy of internal input state representation within each character instance.\r\n\r\nUnfortunately, there's no easy way to retrieve the entire input state. The current `Input` API only allows us to scratch the surface of the real input state, here's some example:\r\n\r\n```gdscript\r\nfunc get_pressed_actions():\r\n\tvar pressed = []\r\n\r\n\tfor action in InputMap.get_actions():\r\n\t\tif Input.is_action_pressed(action):\r\n\t\t\tpressed.push_back(action)\r\n\r\n\treturn pressed\r\n    \r\n# How about the pressed keys and joypad buttons?..\r\n```\r\n\r\nSimilarly, you'd have to implement a bunch of other utility methods, and ensure that you keep all the input metadata like action strength, which is a nightmare if done via script, and in most cases this just leads to \"one-way\" communication.\r\n\r\nBecause we *do* want to make sure that we don't miss any input along the programming hurdles, there needs to be a more elegant and unified way to handle this problem.\r\n\r\n# Introducing `InputState` class\r\n\r\n`InputState` is a new type of the `Resource` which decouples input handling logic from the actual input state. The `Input` singleton has a master instance of this class exposed as a property. This means that:\r\n\r\n- we can have multiple unique instances of the input state;\r\n- share input states between multiple instances (resources are shared by default);\r\n- switch input states depending on the context;\r\n- have a more low-level control over the internal states not provided nor exposed by the `Input` singleton by default.\r\n- can be serialized, sent over the network, saved to disk etc.\r\n\r\nThe `InputState` API mostly replicates the `Input` API, but only those methods which are responsible for data queries such as `is_action_pressed()`.\r\n\r\nTo be more concrete, lets rewrite our previous script using `InputState` class:\r\n\r\n```gdscript\r\nexport(InputState) var input = InputState.new()\r\nexport var controlled = false\r\nexport var human = false\r\n\r\nfunc _physics_process(delta):\r\n\tif not controlled:\r\n\t\treturn\r\n\r\n\tif human:\r\n\t\t# We have to update our local input state from the global one,\r\n\t\t# in essence requesting a local copy of the state, forwarding it.\r\n\t\tinput.feed(Input.state)\r\n\telse:\r\n\t\t# This doesn't interfere with the rest of the characters so we can safely\r\n\t\t# modify the state the way we want locally.\r\n\t\tinput.release_pressed_events()\r\n\t\tvar rand_move = [\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\"][randi() % 4]\r\n\t\tinput.action_press(rand_move)\r\n\t\tif rand_range(0.0, 1.0) > 0.5:\r\n\t\t\tinput.action_press(\"sprint\")\r\n\t\tif rand_range(0.0, 1.0) > 0.9:\r\n\t\t\tinput.action_press(\"shoot\")\r\n\r\n\t# Regardless of whether it was a human or an AI,\r\n\t# we can use the same API to determine the behavior now.\r\n    \r\n\tvar motion = Vector2()\r\n\r\n\tif input.is_action_pressed(\"ui_left\"):\r\n\t\tmotion += Vector2.LEFT\r\n\tif input.is_action_pressed(\"ui_right\"):\r\n\t\tmotion += Vector2.RIGHT\r\n\tif input.is_action_pressed(\"ui_up\"):\r\n\t\tmotion += Vector2.UP\r\n\tif input.is_action_pressed(\"ui_down\"):\r\n\t\tmotion += Vector2.DOWN\r\n\r\n\tif input.is_action_pressed(\"sprint\"):\r\n\t\tposition += motion * speed * 2.0 * delta\r\n\telse:\r\n\t\tposition += motion * speed * delta\r\n\r\n\tif input.is_action_just_pressed(\"shoot\"):\r\n\t\tpass # shoot bullets here\r\n```\r\n\r\n### Benefits\r\n- we cannot possibly pollute the global input state unless we explicitly tell so.\r\n- you can request your local state to be updated from the global input state.\r\n- removes the need to manually copy the internal Input state to each character instance so that there's no need to redefine local variables for each action.\r\n- use your usual Input API locally\r\n- the input state can be shared between instances so that multiple characters can be controlled given the same input\r\n- you can program AI movement by simulating inputs (action presses etc).\r\n\r\n## Use case: recording input states for playback\r\n\r\nGameplay can be simulated via feeding input events alone, for instance implementing replay system, this can save quite a bunch of memory without having to read the whole game state as events are much more lightweight. State interpolation could be implemented to help this, but in some cases it's just easier to feed those input events as the existing logic can just respond to an input event and you get almost the same behavior without writing some complex logic to replicate those actions on top of the existing logic.\r\n\r\nAs most engines are not truly deterministic (including Godot), this isn't the perfect solution, but things like:\r\n\r\n- instant replay (nice shot, lets see how it went!);\r\n- tutorials (repeat after me!);\r\n- recording combo actions before they can be executed (fighting games): #100;\r\n\r\nThese could be as well be implemented by simulating inputs as the floating point error would be negligible for short replication episodes for the butterfly effect to kick in, especially if this doesn't affect the gameplay itself.\r\n\r\n### Recording input events\r\n\r\nThe process of recording input events was \"relatively easy\" process:\r\n\r\n```gdscript\r\nfunc _input(event):\r\n\tif event.is_action_type() and not event is InputEventMouseMotion:\r\n\t\tinput_player.record_event(event) # queues event to be recorded\r\n\r\nfunc process():\r\n\tif mode == Mode.RECORD:\r\n\t\tif queued_event:\r\n\t\t\ttrack[position] = queued_event\r\n\t\t\tqueued_event = null\r\n\t\tposition += 1\r\n\telif mode == Mode.PLAY:\r\n\t\tif track.has(position):\r\n\t\t\tInput.parse_input_event(track[position])\r\n\t\tposition = int(clamp(position + 1, 0, length))\r\n```\r\n        \r\nThe problem with this approach is that it's not always convenient to use `_input` callback, because you can't detect a combination of input events easily. Using this approach has also some caveats if used for networking needs, unlike the `Input` singleton which collects all the parsed input events for us to query.\r\n\r\nThe only problem currently is that, as previously regurgitated, `Input` internal state is simply unaccessible for those actions to be replicated more or less deterministically.\r\n\r\nThat's where `InputState` comes into action, as it provides more low-level access to internal data. In fact, the whole state can be retrieved via a single `data` property:\r\n\r\n```gdscript\r\n# recorder.gd\r\n\r\nvar snapshots = [] # a collection of Input.state.data\r\n\r\nfunc process():\r\n\tif mode == Mode.RECORD:\r\n\t\t# `input` is a local instance of Input.state\r\n\t\tsnapshots.push_back(character.input.data)\r\n\telif mode == Mode.PLAY:\r\n\t\tplayback_pos = clamp(playback_pos + 1, 0, snapshots.size() - 1)\r\n\t\tcharacter.input.data = snapshots[playback_pos]\r\n```\r\n\r\nResult:\r\n\r\n![recorded-motion](https://user-images.githubusercontent.com/17108460/72618422-b3c75a80-3943-11ea-824e-3b6c0f5b8e16.gif)\r\n\r\nThat's the gist of the process of recording and replaying input-driven game. Unlike `InputEvents`, the data can also be sent over network, saved to disk etc. The question of whether all of the data is actually useful would be determined by game-specific requirements. You can filter and set the data without worrying about missing fields. In most cases, such data can also be efficiently compressed.\r\n\r\n## Why this should be part of the core?\r\n\r\nApart from described use cases and limitations, in order for this to be efficient, it has to be part of the core. The `InputDefault` implementation has already all the internal states. If the proposal is not accepted, I'd like to be able to override the default `Input` implementation via modules or similar, I haven't found an easy way for doing so yet.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/104/reactions",
      "total_count": 20,
      "+1": 15,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 5,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/103",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/103/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/103/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/103/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/103",
    "id": 498400836,
    "node_id": "MDU6SXNzdWU0OTg0MDA4MzY=",
    "number": 103,
    "title": "Simplify scripting API \"type\" and \"icon\" data acquisition for scripts and scenes",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-25T16:40:46Z",
    "updated_at": "2020-05-04T07:45:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is related to #68.\r\n\r\n**Describe the project you are working on:**\r\n\r\nI would like to make an Instantiation Pallete toolbar. That is, an EditorPlugin (that may one day be merged as a PR if lots of people like it? Who knows. I will definitely use it for my projects though) where users get a vertical toolbar on the left-hand side of the CanvasItem/Spatial viewport that displays frequently used, favorited, and/or suggested types and allows users to drag-n-drop them into the world. It would make for a much easier workflow than constantly flipping to/from the CreateDialog, searching, adding, then positioning, and going back again for a different type, repeatedly. Currently, it's a huge level design hassle. Anyway, that's not the problem I'm addressing today.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nAs I'm thinking about how I would design this plugin, I'm realizing that the only way to display the icon associated with a scene (if I wanted to drag-n-drop a scene too - which I do) would be to load the PackedScene resource in its entirety, then get the root node, and then check if it has a script / get the icon for the type, etc. BUT, I don't want to have to load every single scene in my project every single time the user updates the file system or brings the editor into focus, etc. I would much rather have the information cached somewhere and accessible from script code.\r\n\r\nIn addition, the workflow for gathering information about a script class is extremely cumbersome on the scripting side whereas there are plenty of ways to get this information inside the engine:\r\n\r\n- ScriptServer methods (ideally more suggested in #68)\r\n- `script->get_language()->get_global_class_name(script->get_path())`\r\n- `EditorNode::get_singleton()->get_class_icon/get_object_icon(...)`\r\n\r\nAccess to this information would need to be exposed to the scripting API.\r\n\r\nIn addition, to prevent users from having to load scenes to get at the information they need, the EditorFileSystem would need to start caching root node information inside just like it does for script class name/icon/extends. You could *probably* even re-use the same fields - though you'd have to update the API and refactor things; you might include a bool as to whether it's a script class, a scene, or neither.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nSo, anytime someone changes the filesystem, I have to check to see if they've updated any of the script class names or icons, as well as see if the icon associated with a scene has also updated (based on its root node). Ideally, I wouldn't have to load any resources to get this information. I should be able to get everything I need just from the file path and by querying cached data hidden behind singletons/facades/etc. Keep in mind, much of this logic must be executed for *every single script/scene file* I iterate over. For larger projects, this could become obscenely slow.\r\n\r\n### Get the name of a script\r\n\r\nBefore: O(N) time where N is the number of script classes in the project.\r\n\r\n    var filepath := get_from_somewhere()\r\n    var name := \"\"\r\n    var script_classes := ProjectSettings.get_setting(\"_global_script_classes\") as Array\r\n    for a_class in script_classes:\r\n        if a_class.path == filepath:\r\n            name = a_class.class\r\n            break\r\n\r\nAfter: O(1) time based on a single HashMap lookup.\r\n\r\n    var filepath := get_from_somewhere()\r\n    var name := ScriptServer.get_global_class_name(filepath) # relies on changes from #68.\r\n\r\n### Get the icon for a script\r\n\r\nBefore: O(N) time where N is the number of script classes in the project. Also adds two HashMap lookups.\r\n\r\n    var filepath := get_from_somewhere()\r\n    var name := \"\"\r\n    var script_classes := ProjectSettings.get_setting(\"_global_script_classes\") as Array\r\n    for a_class in script_classes:\r\n        if a_class.path == filepath:\r\n            name = a_class.class\r\n            break\r\n    var script_class_icons := ProjectSettings.get_setting(\"_global_script_class_icons\") as Dictionary\r\n    var script_icon := script_class_icons[name] as Texture\r\n\r\nAfter: O(1) time based on a constant number of HashMap lookups (at least, once custom types are deprecated and removed).\r\n\r\n    var filepath := get_from_somewhere()\r\n    var name := ScriptServer.get_global_class_name(filepath)\r\n    var icon := get_editor_interface().get_class_icon(name) # from EditorNode\r\n\r\n### get the icon for a scene\r\n\r\nBefore: O(N + M) time. Performance is dependent on the number of properties on the nodes (N), the number of script classes that exist (M).\r\n\r\n    var filepath := get_from_somewhere()\r\n    var scene := load(filepath) as PackedScene\r\n    var state := scene.get_state()\r\n    var the_type := state.get_node_type(0)\r\n    var the_script: Script = null\r\n    var the_icon: Texture = null\r\n    for i in range(state.get_node_property_count(0):\r\n        if (state.get_node_property_name(0, i) == \"script\":\r\n            the_script = state.get_node_property_value(0, i)\r\n            break\r\n    if not the_script:\r\n        the_icon = get_editor_interface().get_base_control().get_icon(the_type, \"EditorIcons\") # done!\r\n    else:\r\n        var script_classes := ProjectSettings.get_setting(\"_global_script_classes\") as Array\r\n        for a_class in script_classes:\r\n            if a_class.path == filepath:\r\n                name = a_class.class\r\n                break\r\n        var script_class_icons := ProjectSettings.get_setting(\"_global_script_class_icons\") as Dictionary\r\n        the_icon = script_class_icons[name] as Texture # done! (finally)\r\n    \r\nAfter: O(1) time based on two HashMap lookups (get cache, lookup in Dictionary).\r\n\r\n    var filepath := get_from_somewhere()\r\n    var file_cache := get_editor_interface().get_editor_filesystem().get_file_cache(filepath) as Dictionary\r\n    var icon := load(file_cache.class_icon) as Texture\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\n1. Add a method to get the name of a script by filepath in ScriptServer (included in #68).\r\n1. Add the EditorNode `get_class_icon` and `get_object_icon` methods to the EditorInterface class.\r\n1. Create a script-accessible method to fetch a FileCache struct as a Dictionary from the EditorFileSystem\r\n    1. The returned Dictionary would have an additional field for the actual icon Texture that already figures out for us what the appropriate class icon is based on the \"extends\" and the \"icon_path\" values.\r\n    1. You would likely need to refactor the names to go from `script_class_name`, `script_class_extends`, etc. to just be `class_name`, `class_extends`, etc. if they start describing information for any arbitrary root node in a scene. Icon paths for non script types would just be empty.\r\n1. A script-accessible `_ScriptServer` singleton would need to be registered to the ClassDB to expose access to the ScriptServer utility methods.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nThere is no performance-sensitive means by which to do this in the scripting API. This proposal is about updating the scripting API's capabilities to accommodate the performance problems that can occur at scale.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt requires direct modifications to the engine core (expose ScriptServer) and the editor (EditorNode icon methods, EditorFileSystem FileCache exposure).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/103/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/102",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/102/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/102/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/102/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/102",
    "id": 498377994,
    "node_id": "MDU6SXNzdWU0OTgzNzc5OTQ=",
    "number": 102,
    "title": "Rule Tile Type for Tilemaps",
    "user": {
      "login": "TheColorRed",
      "id": 1571806,
      "node_id": "MDQ6VXNlcjE1NzE4MDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1571806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheColorRed",
      "html_url": "https://github.com/TheColorRed",
      "followers_url": "https://api.github.com/users/TheColorRed/followers",
      "following_url": "https://api.github.com/users/TheColorRed/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheColorRed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheColorRed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheColorRed/subscriptions",
      "organizations_url": "https://api.github.com/users/TheColorRed/orgs",
      "repos_url": "https://api.github.com/users/TheColorRed/repos",
      "events_url": "https://api.github.com/users/TheColorRed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheColorRed/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-25T15:56:32Z",
    "updated_at": "2019-11-25T22:02:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:** A game where rats run through a maze\r\n\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nIt makes using auto tiling easier....\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nHere is a video of someone using/explaining a \"Rule Tile\" in unity: https://youtu.be/Ky0sV9pua-E?t=60\r\n\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:** Unknown.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI come from unity, and in unity they have a \"Rule Tile\" and I have been messing around with the autotile in Godot, and either I don't understand it, or it is more advanced than what I need. I feel that if I want to use two tiles in my map I cannot do that. In order to do that I need the same tile duplicated with a different bitmask on it, which seems very redundant.\r\n\r\nIn unity the Rule tile editor looks like this, where an arrow says \"There must be a tile here\" and an \"X\" says \"There cannot be a tile here\".\r\n\r\n**Note:** The last rule is a darker green, it might be hard to see.\r\n\r\n![Screenshot from 2019-09-25 10-27-59](https://user-images.githubusercontent.com/1571806/65615935-c62a1c80-df7f-11e9-96a5-69032de70da0.png)\r\n\r\nWhen drawn into the scene, everytime a tile is placed it goes through the list and changes each tile in the surrounding area on the map. When the first matching rule is found it is used from the array/list (so the order in the list is just as important), and placed into the scene. If no rule was found the default tile is selected.\r\n\r\nWith the above rules setup, the following output is generated when drawn in the scene.\r\n\r\n![Screenshot from 2019-09-25 10-31-13](https://user-images.githubusercontent.com/1571806/65615942-c9bda380-df7f-11e9-951b-f5b2afe2754d.png)\r\n\r\nIt is also possible to choose a tile at random by changing the output to \"Random\" which will select a tile from random in the list as seen below.\r\n\r\n![Screenshot from 2019-09-25 10-45-58](https://user-images.githubusercontent.com/1571806/65617062-b8759680-df81-11e9-9832-7bb0784a17eb.png)\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI am not sure if the tileset editor can be extended.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/101",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/101/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/101/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/101/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/101",
    "id": 498120065,
    "node_id": "MDU6SXNzdWU0OTgxMjAwNjU=",
    "number": 101,
    "title": "ItemList add_item and add_icon_item indices",
    "user": {
      "login": "Ternvein",
      "id": 9861570,
      "node_id": "MDQ6VXNlcjk4NjE1NzA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9861570?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ternvein",
      "html_url": "https://github.com/Ternvein",
      "followers_url": "https://api.github.com/users/Ternvein/followers",
      "following_url": "https://api.github.com/users/Ternvein/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ternvein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ternvein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ternvein/subscriptions",
      "organizations_url": "https://api.github.com/users/Ternvein/orgs",
      "repos_url": "https://api.github.com/users/Ternvein/repos",
      "events_url": "https://api.github.com/users/Ternvein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ternvein/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-25T08:08:11Z",
    "updated_at": "2019-12-13T16:38:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe how this feature / enhancement will help your project:**\r\nMakes work with `ItemList` more obvious by returning added item index.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n`var index = $ItemList.add_item(...)`\r\n`$ItemList.set_item_tooltip(index, ...)`\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n`var index = $ItemList.get_item_count()`\r\n`$ItemList.add_item(...)`\r\n`$ItemList.set_item_tooltip(index, ...)`\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:** \r\nIt's too basic feature.\r\n\r\nCurrently both `add_item` and `add_icon_item` functions return `void`. It won't break compatibility much, but will make setting up `ItemList` more obvious. Every item-related function in `ItemList` works with indices, except for `add_item` and `add_icon_item`.\r\n\r\nI can make a pull request when I'll have some time.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/101/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/99",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/99/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/99/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/99/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/99",
    "id": 497400160,
    "node_id": "MDU6SXNzdWU0OTc0MDAxNjA=",
    "number": 99,
    "title": "Sort Autocomplete by Class Hierarchy",
    "user": {
      "login": "somnivore",
      "id": 28724859,
      "node_id": "MDQ6VXNlcjI4NzI0ODU5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/28724859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somnivore",
      "html_url": "https://github.com/somnivore",
      "followers_url": "https://api.github.com/users/somnivore/followers",
      "following_url": "https://api.github.com/users/somnivore/following{/other_user}",
      "gists_url": "https://api.github.com/users/somnivore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somnivore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somnivore/subscriptions",
      "organizations_url": "https://api.github.com/users/somnivore/orgs",
      "repos_url": "https://api.github.com/users/somnivore/repos",
      "events_url": "https://api.github.com/users/somnivore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somnivore/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-24T01:06:32Z",
    "updated_at": "2019-11-25T22:04:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nAutocomplete-heavy RPG\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nAutocomplete is great: you type in a few letters, find it in the list, hit enter, and all is well.  However, frequently there's a lot of stuff that appears in autocomplete which effectively does little more than collect dust: a variety of constants, properties and functions that are, more often than not, completely irrelevant to what you're trying to do, and many of them go practically unused in a typical Godot game.  Because of this, it's important to know ahead of time what it is you're looking for, to remember the name of the thing you're looking for, as otherwise you're typing any different thing you can think up that might be related to what it is you need.\r\n\r\nIf, instead, you were able to sort the autocomplete starting with the most immediate class, you would instantly be able to see exactly what's in that object you're looking in, very often being a script you've placed on a node, and just after that, the functionality of the node you've placed the script on, descending until you hit all the noise in the core classes (`Object`, `Node`, etc.), and if you really did want to look for something down at the bottom of the list, you could hit End on your keyboard to get there quickly.  Now it's much clearer to find what it is you're looking for without needing to know the name of it, you can more easily browse an object's contents starting with what's likely to be most important: your script, and the node it sits on.  It also makes things much easier when you're working with something new to see what each property, constant and function is associated with what class, allowing for faster learning.\r\n\r\nGranted, one could always take a peek at the built-in docs if they wanted just what was in a particular class (excepting scripts, where instead you'd open up the script to see what was in it), but it's a little more out of the way, when all you want is a reminder of what you have to work with.  In any case, as it stands, the ginormous list of everything that makes up an object isn't all that useful.\r\n\r\n```\r\nclass_name Drop extends Resource\r\n\r\nexport var item: String = \"\"\r\nexport(float, 0.01, 1, 0.01) var chance := 0.5\r\n```\r\n![image](https://user-images.githubusercontent.com/28724859/65472902-3c713680-de3b-11e9-9189-ec75e5750e78.png)\r\n\r\nPerhaps it can be toggled with a certain key combination.  Also, perhaps PgDn and PgUp can be used to skip to the next class while this is active, to make it easier to skip to the class you're looking for.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\n![image](https://user-images.githubusercontent.com/28724859/65472486-53168e00-de39-11e9-9f01-16742ef34402.png)\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI think it will be used often, but if it wasn't, I assume it's not something that can be added easily.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt changes how Godot works under the hood, doesn't add bloat, and wouldn't interfere with those who prefer the unsorted autocomplete, assuming it's toggleable.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/99/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/98",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/98/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/98/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/98/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/98",
    "id": 497103685,
    "node_id": "MDU6SXNzdWU0OTcxMDM2ODU=",
    "number": 98,
    "title": "Change the default gravity settings of the RigidBody2D Node so its physics feel less floaty out of the box",
    "user": {
      "login": "golddotasksquestions",
      "id": 47016402,
      "node_id": "MDQ6VXNlcjQ3MDE2NDAy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/47016402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/golddotasksquestions",
      "html_url": "https://github.com/golddotasksquestions",
      "followers_url": "https://api.github.com/users/golddotasksquestions/followers",
      "following_url": "https://api.github.com/users/golddotasksquestions/following{/other_user}",
      "gists_url": "https://api.github.com/users/golddotasksquestions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/golddotasksquestions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/golddotasksquestions/subscriptions",
      "organizations_url": "https://api.github.com/users/golddotasksquestions/orgs",
      "repos_url": "https://api.github.com/users/golddotasksquestions/repos",
      "events_url": "https://api.github.com/users/golddotasksquestions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/golddotasksquestions/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697864807,
        "node_id": "MDU6TGFiZWwxNjk3ODY0ODA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:physics",
        "name": "topic:physics",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-23T13:37:39Z",
    "updated_at": "2020-05-04T07:45:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n2D Action game. Eventually I want to incorporate RigidBodys in my game, so I make a number of test projects.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nRigidBodies2D gravity never seems to behave realistic out of the box. The reasons why one setting won't be the perfect setting that fits all projects, are obvious. What settings I have to change though and why the current default settings are not correct, is the exact opposite of obvious. But having the default settings come closer to what the majority of users do would already help A LOT in getting off from a much better start.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nMy proposals is just to change the default settings.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI assume since in the 2D engine the unit is one pixel not one meter as it is in 3D, those 9.8 refer to 9.8 pixel, not meters. This seems plausible, because if you make your RigidBody2D's CollisionShape exactly 2 pixels high (comparatively to a person of 2 meters height), and zoom waaaay in with your camera onto your \"character\" so much so those two pixels seem as high as a character on screen normally would, gravity seems very natural.\r\nHowever most people won't have 2 pixel characters to apply RigidBody2D physics to and a viewport of 11 by 20 pixels. At this resolutions, pretty much any \"ball\" will be a square. RigidBodies would not make that much sense here anyway:\r\n![11x20](https://user-images.githubusercontent.com/47016402/65426638-e6879900-de10-11e9-9c12-8dd050c4a45f.png)\r\nThis brown football is never going to roll.\r\n\r\nKidsCanCode RigidBody2D demo runs at 1024 by 600 and has a gravity scale of 20 and it still feels floaty. The more realistic value with a character that size and items that size would probably be around 50.\r\n![default_gravity](https://user-images.githubusercontent.com/47016402/65430739-b0e6ae00-de18-11e9-81a9-68924880b440.gif)\r\nThe left ball has a gravity scale of 50, mass 2, and weight 19.6, \r\nthe right ball has the default gravity scale of 1, mass 1, and weight 9.8, \r\n\r\nThere are a lot of values to tweak to get RigidBodies to behave like you want them. Let's make new users not also wonder why the 9.8 they associate with gravity ever since school a specific value they don't need, and neither is the neat 1 of gravity scale. (Why would anyone who wants natural gravity think of scaling it?)\r\nThe default setting looks correct, it looks as if it needs no changing. When in fact they are only correct in a world with 2 pixel characters.\r\n\r\nThe 1024 by 600 is the default project resolution, the default Rigidbody2D physics settings should feel realistic with those settings.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nSince this is about default values, it would be used every time RigidBody2Ds are used. \r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nCore, because it's a usability setting of an existing feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/98/reactions",
      "total_count": 20,
      "+1": 13,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 2,
      "rocket": 2,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/97",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/97/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/97/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/97/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/97",
    "id": 496835498,
    "node_id": "MDU6SXNzdWU0OTY4MzU0OTg=",
    "number": 97,
    "title": "TableControl for complex column-row data sets in UIs",
    "user": {
      "login": "nhydock",
      "id": 316728,
      "node_id": "MDQ6VXNlcjMxNjcyOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/316728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhydock",
      "html_url": "https://github.com/nhydock",
      "followers_url": "https://api.github.com/users/nhydock/followers",
      "following_url": "https://api.github.com/users/nhydock/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhydock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhydock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhydock/subscriptions",
      "organizations_url": "https://api.github.com/users/nhydock/orgs",
      "repos_url": "https://api.github.com/users/nhydock/repos",
      "events_url": "https://api.github.com/users/nhydock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhydock/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-22T21:28:40Z",
    "updated_at": "2019-12-13T16:38:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a very UI heavy RPG with plenty of menus that present data in a tabular structure.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI find myself in tons of situations where I'm building up tables but have no way of selecting them cleanly without doing something hacky like having a backing ItemList control.  Something more powerful than ItemList is necessary, to allow for the ability to select not just a single item, but a whole row or whole column of items and returning the associated group of values as one dictionary.  A tabular UI is valuable for creating things like inventory lists as seen in RPGs where item names and counts are displayed on the same row but aligned to different sides of the row.  Keeping an association of all data within the row and represented as a single selectable element is key for this.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nUsing a single controller, being able to define the following values\r\n* Column Names, used for field lookup in the item records, as well as translated for column header labels\r\n* Visible Header toggle, since sometimes you don't need to have column names visible in the UI\r\n* Column Content Alignment, allowing each column's contents to be aligned differently.  Might want to have the ability to have row alignment different from header alignment\r\n* Minimum Column widths and expansion\r\n* Row height\r\n* Toggle allow Field Selection\r\n* Toggle allow Row Selection\r\n* Toggle allow Column Selection\r\n* Themeable selection, hover, normal, and disabled states for fields\r\n* Themeable normal, hover, focus states for the table itself\r\n* Standard font theming\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nThis enhancement has the potential to be used often.  It's a complex control element as well, making it difficult to work out with existing control nodes and hacking it without making compromises in feature capability.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt's a common use-case control for more UI heavy games, and would be a powerful addition to the editor itself in certain UIs, especially for something like #13 ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/97/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/96",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/96/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/96/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/96/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/96",
    "id": 496786651,
    "node_id": "MDU6SXNzdWU0OTY3ODY2NTE=",
    "number": 96,
    "title": "Add an HSL modulation property to CanvasItem (to complement RGBA modulation)",
    "user": {
      "login": "jsena42",
      "id": 24941270,
      "node_id": "MDQ6VXNlcjI0OTQxMjcw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/24941270?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsena42",
      "html_url": "https://github.com/jsena42",
      "followers_url": "https://api.github.com/users/jsena42/followers",
      "following_url": "https://api.github.com/users/jsena42/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsena42/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsena42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsena42/subscriptions",
      "organizations_url": "https://api.github.com/users/jsena42/orgs",
      "repos_url": "https://api.github.com/users/jsena42/repos",
      "events_url": "https://api.github.com/users/jsena42/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsena42/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697865173,
        "node_id": "MDU6TGFiZWwxNjk3ODY1MTcz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:rendering",
        "name": "topic:rendering",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-09-22T14:29:50Z",
    "updated_at": "2020-06-03T09:03:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a combat focused 2d platformer with a dark tone like Hollow Knight but with a combat more like Dead Cells.\r\n**Describe how this feature / enhancement will help your project:**\r\nBeing able to change the color of an asset to fit a specific area without generating an image variation or writing a shader for it (specially for assets that may have another shader already) would be very nice.\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nImagine the modulate property but actually being able to change HSL instead of just adding a tinted look.\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nIt can be done with a simple shader but such a feature is very useful (specially on the polishing stage).\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nI think this is a much needed feature.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/96/reactions",
      "total_count": 11,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/94",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/94/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/94/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/94/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/94",
    "id": 496693290,
    "node_id": "MDU6SXNzdWU0OTY2OTMyOTA=",
    "number": 94,
    "title": "Add a way to adjust the speed of individual frames on AnimatedSprites",
    "user": {
      "login": "nuke-makes-games",
      "id": 47336974,
      "node_id": "MDQ6VXNlcjQ3MzM2OTc0",
      "avatar_url": "https://avatars2.githubusercontent.com/u/47336974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nuke-makes-games",
      "html_url": "https://github.com/nuke-makes-games",
      "followers_url": "https://api.github.com/users/nuke-makes-games/followers",
      "following_url": "https://api.github.com/users/nuke-makes-games/following{/other_user}",
      "gists_url": "https://api.github.com/users/nuke-makes-games/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nuke-makes-games/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nuke-makes-games/subscriptions",
      "organizations_url": "https://api.github.com/users/nuke-makes-games/orgs",
      "repos_url": "https://api.github.com/users/nuke-makes-games/repos",
      "events_url": "https://api.github.com/users/nuke-makes-games/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nuke-makes-games/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697856207,
        "node_id": "MDU6TGFiZWwxNjk3ODU2MjA3",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:core",
        "name": "topic:core",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-09-21T19:42:50Z",
    "updated_at": "2020-05-06T12:56:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\n\r\n2D game with heavy reliance on animations\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\n\r\nSome of my animations don't look that fantastic when every frame has identical speed.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nEXAMPLE: https://i.imgur.com/vd1uJE3.png\r\n\r\nBasically, the user should have the option to specify how many frames each part of the animation takes.\r\n\r\nIn this example image, frame # 1 is visible for 1 frame, frame # 2 is visible for 15 frames, and frame # 3 is also visible for 15 frames.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nI dunno how you'd implement it but it can't be that hard if you already have the animation FPS setting.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nPerhaps allow users to override these individual frame speeds with the old FPS system.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nIt would make 2D animations in godot considerably more flexible and powerful. Not to mention it just makes sense to do it. Forcing all animations to have homogeneous FPS for each of their frames means users have to hack their way around this system if they want something different. ",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/94/reactions",
      "total_count": 7,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/91",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/91/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/91/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/91/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/91",
    "id": 496675054,
    "node_id": "MDU6SXNzdWU0OTY2NzUwNTQ=",
    "number": 91,
    "title": "Add a godot-ideas referral to the issue template",
    "user": {
      "login": "willnationsdev",
      "id": 16217563,
      "node_id": "MDQ6VXNlcjE2MjE3NTYz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16217563?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willnationsdev",
      "html_url": "https://github.com/willnationsdev",
      "followers_url": "https://api.github.com/users/willnationsdev/followers",
      "following_url": "https://api.github.com/users/willnationsdev/following{/other_user}",
      "gists_url": "https://api.github.com/users/willnationsdev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willnationsdev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willnationsdev/subscriptions",
      "organizations_url": "https://api.github.com/users/willnationsdev/orgs",
      "repos_url": "https://api.github.com/users/willnationsdev/repos",
      "events_url": "https://api.github.com/users/willnationsdev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willnationsdev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2415345063,
        "node_id": "MDU6TGFiZWwyNDE1MzQ1MDYz",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/meta",
        "name": "meta",
        "color": "c5def5",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-09-21T16:36:58Z",
    "updated_at": "2020-10-10T14:19:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nManaging community expectations for the Godot-Proposals repository.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nI think we should add a blurb in the `godot-proposals` issue template that redirects people to the new `godot-extended-libraries/godot-ideas` repository if they do not feel as though they can adequately answer the questions, or if they already know that their proposal is not applicable to the engine development itself.\r\n\r\nThe reason this would help, aside from things already brought up in #47, is that it drives users awareness of this space up.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n\r\nSee below.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\n\r\nJust add a comment to the top of the message, exactly like the one in `godotengine/godot` that tells people they can go to `godot-extended-libraries/godot-ideas` instead.\r\n\r\n> \\<!--If you feel that you cannot provide highly detailed instructions with the proposal below, consider creating a more simple, open-ended Issue in the unofficial, community-maintained [godot-extended-libraries/godot-ideas repository](https://github.com/godot-extended-libraries/godot-ideas/issues/new)--\\>\r\n\r\nSomething like that.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\n\r\nRelates to the GitHub repository, not Godot itself.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\n\r\nSee above.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/91/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/89",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/89/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/89/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/89/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/89",
    "id": 496358737,
    "node_id": "MDU6SXNzdWU0OTYzNTg3Mzc=",
    "number": 89,
    "title": "Procedural images for img tag on RichTextLabel ",
    "user": {
      "login": "Bethleem",
      "id": 17690275,
      "node_id": "MDQ6VXNlcjE3NjkwMjc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/17690275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bethleem",
      "html_url": "https://github.com/Bethleem",
      "followers_url": "https://api.github.com/users/Bethleem/followers",
      "following_url": "https://api.github.com/users/Bethleem/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bethleem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bethleem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bethleem/subscriptions",
      "organizations_url": "https://api.github.com/users/Bethleem/orgs",
      "repos_url": "https://api.github.com/users/Bethleem/repos",
      "events_url": "https://api.github.com/users/Bethleem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bethleem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1732722445,
        "node_id": "MDU6TGFiZWwxNzMyNzIyNDQ1",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:gui",
        "name": "topic:gui",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-09-20T13:39:33Z",
    "updated_at": "2020-09-01T17:19:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nA interactive ficition engine. Is text based with ilustrations created in runtime and added between the text. RichTextLabel is critical because the engine relies on the meta_clicked feature.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nImages showed in the games are created in runtime. They are not file disk images because may change a lot with player choices and that would end in thousands of png files just to use one of them.\r\nEven if I save that procedural image into a png file in runtime, it can´t be used by godot because the .import file would be missing and img tag don´t work with Sprite or Image variables.\r\nRichTextLabel show only image files from disk previosusly imported via the editor, so no way procedural ones woul be used.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\nWell, it´s the same output that the actual img tag but reading it from variable instead of disk file.\r\nOr, It would work too if a png file could be saved with the needed .import file, but I think it would be a mayor headhache to add to the engine.\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have not the level to touch Godot´s internal code. But the img tag should read a Image/Sprite variable reference instead a disk path for file.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nNope. It´s a hardoded feature. A entire new RichTextLabel must be written from scratch in order to acomplish procedural images showed if Godot´s one doesn´t provide that feature.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nNot really. Any way it can work, would be wellcomed.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/89/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/88",
    "repository_url": "https://api.github.com/repos/godotengine/godot-proposals",
    "labels_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/88/labels{/name}",
    "comments_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/88/comments",
    "events_url": "https://api.github.com/repos/godotengine/godot-proposals/issues/88/events",
    "html_url": "https://github.com/godotengine/godot-proposals/issues/88",
    "id": 496257090,
    "node_id": "MDU6SXNzdWU0OTYyNTcwOTA=",
    "number": 88,
    "title": "Allow auto-tiles to connect with each other if specified",
    "user": {
      "login": "Alzter",
      "id": 22513909,
      "node_id": "MDQ6VXNlcjIyNTEzOTA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22513909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Alzter",
      "html_url": "https://github.com/Alzter",
      "followers_url": "https://api.github.com/users/Alzter/followers",
      "following_url": "https://api.github.com/users/Alzter/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alzter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Alzter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alzter/subscriptions",
      "organizations_url": "https://api.github.com/users/Alzter/orgs",
      "repos_url": "https://api.github.com/users/Alzter/repos",
      "events_url": "https://api.github.com/users/Alzter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Alzter/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1697862421,
        "node_id": "MDU6TGFiZWwxNjk3ODYyNDIx",
        "url": "https://api.github.com/repos/godotengine/godot-proposals/labels/topic:editor",
        "name": "topic:editor",
        "color": "ffee88",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-20T09:49:30Z",
    "updated_at": "2019-11-25T22:05:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the project you are working on:**\r\nI'm working on a 2D platformer game [(Link)](https://github.com/Alzter/TuxBuilder) with a built in level editor. I'm trying to add slopes by making them a separate auto-tile that makes corners slopes, but I want the autotile to connect with the main ground tileset seamlessly. I propose there is an option added that lets certain autotiles connect with other autotiles.\r\n\r\n**Describe how this feature / enhancement will help your project:**\r\nThis enhancement could help me make slope autotiles that seamlessly blend in with the ground tiles, so I could easily implement slopes that could be used in the level editor.\r\n\r\n**Show a mock up screenshots/video or a flow diagram explaining how your proposal will work:**\r\n![image](https://user-images.githubusercontent.com/22513909/65321023-7c8bab80-dbe6-11e9-9ff7-932f28e64b4d.png)\r\n\r\n**Describe implementation detail for your proposal (in code), if possible:**\r\nI have no experience coding for Godot, but my idea is to have some sort of \"Connect\" menu for each autotile that allows them to connect to other auto-tiles when enabled.\r\n\r\n**If this enhancement will not be used often, can it be worked around with a few lines of script?:**\r\nI'm not sure if it's possible to adjust auto-tiles through GDscript.\r\n\r\n**Is there a reason why this should be core and not an add-on in the asset library?:**\r\nIt would help make seamless transitions between different auto-tiles and for me it could help make slope tiles.",
    "reactions": {
      "url": "https://api.github.com/repos/godotengine/godot-proposals/issues/88/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
